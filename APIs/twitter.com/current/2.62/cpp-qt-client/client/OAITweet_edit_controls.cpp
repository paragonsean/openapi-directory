/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITweet_edit_controls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITweet_edit_controls::OAITweet_edit_controls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITweet_edit_controls::OAITweet_edit_controls() {
    this->initializeModel();
}

OAITweet_edit_controls::~OAITweet_edit_controls() {}

void OAITweet_edit_controls::initializeModel() {

    m_editable_until_isSet = false;
    m_editable_until_isValid = false;

    m_edits_remaining_isSet = false;
    m_edits_remaining_isValid = false;

    m_is_edit_eligible_isSet = false;
    m_is_edit_eligible_isValid = false;
}

void OAITweet_edit_controls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITweet_edit_controls::fromJsonObject(QJsonObject json) {

    m_editable_until_isValid = ::OpenAPI::fromJsonValue(m_editable_until, json[QString("editable_until")]);
    m_editable_until_isSet = !json[QString("editable_until")].isNull() && m_editable_until_isValid;

    m_edits_remaining_isValid = ::OpenAPI::fromJsonValue(m_edits_remaining, json[QString("edits_remaining")]);
    m_edits_remaining_isSet = !json[QString("edits_remaining")].isNull() && m_edits_remaining_isValid;

    m_is_edit_eligible_isValid = ::OpenAPI::fromJsonValue(m_is_edit_eligible, json[QString("is_edit_eligible")]);
    m_is_edit_eligible_isSet = !json[QString("is_edit_eligible")].isNull() && m_is_edit_eligible_isValid;
}

QString OAITweet_edit_controls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITweet_edit_controls::asJsonObject() const {
    QJsonObject obj;
    if (m_editable_until_isSet) {
        obj.insert(QString("editable_until"), ::OpenAPI::toJsonValue(m_editable_until));
    }
    if (m_edits_remaining_isSet) {
        obj.insert(QString("edits_remaining"), ::OpenAPI::toJsonValue(m_edits_remaining));
    }
    if (m_is_edit_eligible_isSet) {
        obj.insert(QString("is_edit_eligible"), ::OpenAPI::toJsonValue(m_is_edit_eligible));
    }
    return obj;
}

QDateTime OAITweet_edit_controls::getEditableUntil() const {
    return m_editable_until;
}
void OAITweet_edit_controls::setEditableUntil(const QDateTime &editable_until) {
    m_editable_until = editable_until;
    m_editable_until_isSet = true;
}

bool OAITweet_edit_controls::is_editable_until_Set() const{
    return m_editable_until_isSet;
}

bool OAITweet_edit_controls::is_editable_until_Valid() const{
    return m_editable_until_isValid;
}

qint32 OAITweet_edit_controls::getEditsRemaining() const {
    return m_edits_remaining;
}
void OAITweet_edit_controls::setEditsRemaining(const qint32 &edits_remaining) {
    m_edits_remaining = edits_remaining;
    m_edits_remaining_isSet = true;
}

bool OAITweet_edit_controls::is_edits_remaining_Set() const{
    return m_edits_remaining_isSet;
}

bool OAITweet_edit_controls::is_edits_remaining_Valid() const{
    return m_edits_remaining_isValid;
}

bool OAITweet_edit_controls::isIsEditEligible() const {
    return m_is_edit_eligible;
}
void OAITweet_edit_controls::setIsEditEligible(const bool &is_edit_eligible) {
    m_is_edit_eligible = is_edit_eligible;
    m_is_edit_eligible_isSet = true;
}

bool OAITweet_edit_controls::is_is_edit_eligible_Set() const{
    return m_is_edit_eligible_isSet;
}

bool OAITweet_edit_controls::is_is_edit_eligible_Valid() const{
    return m_is_edit_eligible_isValid;
}

bool OAITweet_edit_controls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editable_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edits_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_edit_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITweet_edit_controls::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_editable_until_isValid && m_edits_remaining_isValid && m_is_edit_eligible_isValid && true;
}

} // namespace OpenAPI
