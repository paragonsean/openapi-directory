/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRulesRequestSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRulesRequestSummary::OAIRulesRequestSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRulesRequestSummary::OAIRulesRequestSummary() {
    this->initializeModel();
}

OAIRulesRequestSummary::~OAIRulesRequestSummary() {}

void OAIRulesRequestSummary::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_invalid_isSet = false;
    m_invalid_isValid = false;

    m_not_created_isSet = false;
    m_not_created_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_not_deleted_isSet = false;
    m_not_deleted_isValid = false;
}

void OAIRulesRequestSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRulesRequestSummary::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_invalid_isValid = ::OpenAPI::fromJsonValue(m_invalid, json[QString("invalid")]);
    m_invalid_isSet = !json[QString("invalid")].isNull() && m_invalid_isValid;

    m_not_created_isValid = ::OpenAPI::fromJsonValue(m_not_created, json[QString("not_created")]);
    m_not_created_isSet = !json[QString("not_created")].isNull() && m_not_created_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_not_deleted_isValid = ::OpenAPI::fromJsonValue(m_not_deleted, json[QString("not_deleted")]);
    m_not_deleted_isSet = !json[QString("not_deleted")].isNull() && m_not_deleted_isValid;
}

QString OAIRulesRequestSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRulesRequestSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_invalid_isSet) {
        obj.insert(QString("invalid"), ::OpenAPI::toJsonValue(m_invalid));
    }
    if (m_not_created_isSet) {
        obj.insert(QString("not_created"), ::OpenAPI::toJsonValue(m_not_created));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_not_deleted_isSet) {
        obj.insert(QString("not_deleted"), ::OpenAPI::toJsonValue(m_not_deleted));
    }
    return obj;
}

qint32 OAIRulesRequestSummary::getCreated() const {
    return m_created;
}
void OAIRulesRequestSummary::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRulesRequestSummary::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRulesRequestSummary::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIRulesRequestSummary::getInvalid() const {
    return m_invalid;
}
void OAIRulesRequestSummary::setInvalid(const qint32 &invalid) {
    m_invalid = invalid;
    m_invalid_isSet = true;
}

bool OAIRulesRequestSummary::is_invalid_Set() const{
    return m_invalid_isSet;
}

bool OAIRulesRequestSummary::is_invalid_Valid() const{
    return m_invalid_isValid;
}

qint32 OAIRulesRequestSummary::getNotCreated() const {
    return m_not_created;
}
void OAIRulesRequestSummary::setNotCreated(const qint32 &not_created) {
    m_not_created = not_created;
    m_not_created_isSet = true;
}

bool OAIRulesRequestSummary::is_not_created_Set() const{
    return m_not_created_isSet;
}

bool OAIRulesRequestSummary::is_not_created_Valid() const{
    return m_not_created_isValid;
}

qint32 OAIRulesRequestSummary::getRValid() const {
    return m_r_valid;
}
void OAIRulesRequestSummary::setRValid(const qint32 &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIRulesRequestSummary::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIRulesRequestSummary::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

qint32 OAIRulesRequestSummary::getDeleted() const {
    return m_deleted;
}
void OAIRulesRequestSummary::setDeleted(const qint32 &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIRulesRequestSummary::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIRulesRequestSummary::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAIRulesRequestSummary::getNotDeleted() const {
    return m_not_deleted;
}
void OAIRulesRequestSummary::setNotDeleted(const qint32 &not_deleted) {
    m_not_deleted = not_deleted;
    m_not_deleted_isSet = true;
}

bool OAIRulesRequestSummary::is_not_deleted_Set() const{
    return m_not_deleted_isSet;
}

bool OAIRulesRequestSummary::is_not_deleted_Valid() const{
    return m_not_deleted_isValid;
}

bool OAIRulesRequestSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRulesRequestSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_invalid_isValid && m_not_created_isValid && m_r_valid_isValid && m_deleted_isValid && m_not_deleted_isValid && true;
}

} // namespace OpenAPI
