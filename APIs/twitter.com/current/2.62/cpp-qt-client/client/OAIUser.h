/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * The Twitter User object.
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include "OAIUserWithheld.h"
#include "OAIUser_entities.h"
#include "OAIUser_public_metrics.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_entities;
class OAIUser_public_metrics;
class OAIUserWithheld;

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIUser_entities getEntities() const;
    void setEntities(const OAIUser_entities &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPinnedTweetId() const;
    void setPinnedTweetId(const QString &pinned_tweet_id);
    bool is_pinned_tweet_id_Set() const;
    bool is_pinned_tweet_id_Valid() const;

    QString getProfileImageUrl() const;
    void setProfileImageUrl(const QString &profile_image_url);
    bool is_profile_image_url_Set() const;
    bool is_profile_image_url_Valid() const;

    bool isRProtected() const;
    void setRProtected(const bool &r_protected);
    bool is_r_protected_Set() const;
    bool is_r_protected_Valid() const;

    OAIUser_public_metrics getPublicMetrics() const;
    void setPublicMetrics(const OAIUser_public_metrics &public_metrics);
    bool is_public_metrics_Set() const;
    bool is_public_metrics_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    bool isVerified() const;
    void setVerified(const bool &verified);
    bool is_verified_Set() const;
    bool is_verified_Valid() const;

    QString getVerifiedType() const;
    void setVerifiedType(const QString &verified_type);
    bool is_verified_type_Set() const;
    bool is_verified_type_Valid() const;

    OAIUserWithheld getWithheld() const;
    void setWithheld(const OAIUserWithheld &withheld);
    bool is_withheld_Set() const;
    bool is_withheld_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIUser_entities m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pinned_tweet_id;
    bool m_pinned_tweet_id_isSet;
    bool m_pinned_tweet_id_isValid;

    QString m_profile_image_url;
    bool m_profile_image_url_isSet;
    bool m_profile_image_url_isValid;

    bool m_r_protected;
    bool m_r_protected_isSet;
    bool m_r_protected_isValid;

    OAIUser_public_metrics m_public_metrics;
    bool m_public_metrics_isSet;
    bool m_public_metrics_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    bool m_verified;
    bool m_verified_isSet;
    bool m_verified_isValid;

    QString m_verified_type;
    bool m_verified_type_isSet;
    bool m_verified_type_isValid;

    OAIUserWithheld m_withheld;
    bool m_withheld_isSet;
    bool m_withheld_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
