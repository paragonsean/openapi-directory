/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceJob::OAIComplianceJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceJob::OAIComplianceJob() {
    this->initializeModel();
}

OAIComplianceJob::~OAIComplianceJob() {}

void OAIComplianceJob::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_download_expires_at_isSet = false;
    m_download_expires_at_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_upload_expires_at_isSet = false;
    m_upload_expires_at_isValid = false;

    m_upload_url_isSet = false;
    m_upload_url_isValid = false;
}

void OAIComplianceJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceJob::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_download_expires_at_isValid = ::OpenAPI::fromJsonValue(m_download_expires_at, json[QString("download_expires_at")]);
    m_download_expires_at_isSet = !json[QString("download_expires_at")].isNull() && m_download_expires_at_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_upload_expires_at_isValid = ::OpenAPI::fromJsonValue(m_upload_expires_at, json[QString("upload_expires_at")]);
    m_upload_expires_at_isSet = !json[QString("upload_expires_at")].isNull() && m_upload_expires_at_isValid;

    m_upload_url_isValid = ::OpenAPI::fromJsonValue(m_upload_url, json[QString("upload_url")]);
    m_upload_url_isSet = !json[QString("upload_url")].isNull() && m_upload_url_isValid;
}

QString OAIComplianceJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceJob::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_download_expires_at_isSet) {
        obj.insert(QString("download_expires_at"), ::OpenAPI::toJsonValue(m_download_expires_at));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_upload_expires_at_isSet) {
        obj.insert(QString("upload_expires_at"), ::OpenAPI::toJsonValue(m_upload_expires_at));
    }
    if (m_upload_url_isSet) {
        obj.insert(QString("upload_url"), ::OpenAPI::toJsonValue(m_upload_url));
    }
    return obj;
}

QDateTime OAIComplianceJob::getCreatedAt() const {
    return m_created_at;
}
void OAIComplianceJob::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIComplianceJob::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIComplianceJob::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIComplianceJob::getDownloadExpiresAt() const {
    return m_download_expires_at;
}
void OAIComplianceJob::setDownloadExpiresAt(const QDateTime &download_expires_at) {
    m_download_expires_at = download_expires_at;
    m_download_expires_at_isSet = true;
}

bool OAIComplianceJob::is_download_expires_at_Set() const{
    return m_download_expires_at_isSet;
}

bool OAIComplianceJob::is_download_expires_at_Valid() const{
    return m_download_expires_at_isValid;
}

QString OAIComplianceJob::getDownloadUrl() const {
    return m_download_url;
}
void OAIComplianceJob::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIComplianceJob::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIComplianceJob::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIComplianceJob::getId() const {
    return m_id;
}
void OAIComplianceJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComplianceJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComplianceJob::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComplianceJob::getName() const {
    return m_name;
}
void OAIComplianceJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComplianceJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComplianceJob::is_name_Valid() const{
    return m_name_isValid;
}

OAIComplianceJobStatus OAIComplianceJob::getStatus() const {
    return m_status;
}
void OAIComplianceJob::setStatus(const OAIComplianceJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIComplianceJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIComplianceJob::is_status_Valid() const{
    return m_status_isValid;
}

OAIComplianceJobType OAIComplianceJob::getType() const {
    return m_type;
}
void OAIComplianceJob::setType(const OAIComplianceJobType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIComplianceJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIComplianceJob::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIComplianceJob::getUploadExpiresAt() const {
    return m_upload_expires_at;
}
void OAIComplianceJob::setUploadExpiresAt(const QDateTime &upload_expires_at) {
    m_upload_expires_at = upload_expires_at;
    m_upload_expires_at_isSet = true;
}

bool OAIComplianceJob::is_upload_expires_at_Set() const{
    return m_upload_expires_at_isSet;
}

bool OAIComplianceJob::is_upload_expires_at_Valid() const{
    return m_upload_expires_at_isValid;
}

QString OAIComplianceJob::getUploadUrl() const {
    return m_upload_url;
}
void OAIComplianceJob::setUploadUrl(const QString &upload_url) {
    m_upload_url = upload_url;
    m_upload_url_isSet = true;
}

bool OAIComplianceJob::is_upload_url_Set() const{
    return m_upload_url_isSet;
}

bool OAIComplianceJob::is_upload_url_Valid() const{
    return m_upload_url_isValid;
}

bool OAIComplianceJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_download_expires_at_isValid && m_download_url_isValid && m_id_isValid && m_status_isValid && m_type_isValid && m_upload_expires_at_isValid && m_upload_url_isValid && true;
}

} // namespace OpenAPI
