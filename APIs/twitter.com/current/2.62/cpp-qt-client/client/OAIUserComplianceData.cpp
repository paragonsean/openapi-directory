/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserComplianceData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserComplianceData::OAIUserComplianceData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserComplianceData::OAIUserComplianceData() {
    this->initializeModel();
}

OAIUserComplianceData::~OAIUserComplianceData() {}

void OAIUserComplianceData::initializeModel() {

    m_user_protect_isSet = false;
    m_user_protect_isValid = false;

    m_user_unprotect_isSet = false;
    m_user_unprotect_isValid = false;

    m_user_delete_isSet = false;
    m_user_delete_isValid = false;

    m_user_undelete_isSet = false;
    m_user_undelete_isValid = false;

    m_user_suspend_isSet = false;
    m_user_suspend_isValid = false;

    m_user_unsuspend_isSet = false;
    m_user_unsuspend_isValid = false;

    m_user_withheld_isSet = false;
    m_user_withheld_isValid = false;

    m_scrub_geo_isSet = false;
    m_scrub_geo_isValid = false;

    m_user_profile_modification_isSet = false;
    m_user_profile_modification_isValid = false;
}

void OAIUserComplianceData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserComplianceData::fromJsonObject(QJsonObject json) {

    m_user_protect_isValid = ::OpenAPI::fromJsonValue(m_user_protect, json[QString("user_protect")]);
    m_user_protect_isSet = !json[QString("user_protect")].isNull() && m_user_protect_isValid;

    m_user_unprotect_isValid = ::OpenAPI::fromJsonValue(m_user_unprotect, json[QString("user_unprotect")]);
    m_user_unprotect_isSet = !json[QString("user_unprotect")].isNull() && m_user_unprotect_isValid;

    m_user_delete_isValid = ::OpenAPI::fromJsonValue(m_user_delete, json[QString("user_delete")]);
    m_user_delete_isSet = !json[QString("user_delete")].isNull() && m_user_delete_isValid;

    m_user_undelete_isValid = ::OpenAPI::fromJsonValue(m_user_undelete, json[QString("user_undelete")]);
    m_user_undelete_isSet = !json[QString("user_undelete")].isNull() && m_user_undelete_isValid;

    m_user_suspend_isValid = ::OpenAPI::fromJsonValue(m_user_suspend, json[QString("user_suspend")]);
    m_user_suspend_isSet = !json[QString("user_suspend")].isNull() && m_user_suspend_isValid;

    m_user_unsuspend_isValid = ::OpenAPI::fromJsonValue(m_user_unsuspend, json[QString("user_unsuspend")]);
    m_user_unsuspend_isSet = !json[QString("user_unsuspend")].isNull() && m_user_unsuspend_isValid;

    m_user_withheld_isValid = ::OpenAPI::fromJsonValue(m_user_withheld, json[QString("user_withheld")]);
    m_user_withheld_isSet = !json[QString("user_withheld")].isNull() && m_user_withheld_isValid;

    m_scrub_geo_isValid = ::OpenAPI::fromJsonValue(m_scrub_geo, json[QString("scrub_geo")]);
    m_scrub_geo_isSet = !json[QString("scrub_geo")].isNull() && m_scrub_geo_isValid;

    m_user_profile_modification_isValid = ::OpenAPI::fromJsonValue(m_user_profile_modification, json[QString("user_profile_modification")]);
    m_user_profile_modification_isSet = !json[QString("user_profile_modification")].isNull() && m_user_profile_modification_isValid;
}

QString OAIUserComplianceData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserComplianceData::asJsonObject() const {
    QJsonObject obj;
    if (m_user_protect.isSet()) {
        obj.insert(QString("user_protect"), ::OpenAPI::toJsonValue(m_user_protect));
    }
    if (m_user_unprotect.isSet()) {
        obj.insert(QString("user_unprotect"), ::OpenAPI::toJsonValue(m_user_unprotect));
    }
    if (m_user_delete.isSet()) {
        obj.insert(QString("user_delete"), ::OpenAPI::toJsonValue(m_user_delete));
    }
    if (m_user_undelete.isSet()) {
        obj.insert(QString("user_undelete"), ::OpenAPI::toJsonValue(m_user_undelete));
    }
    if (m_user_suspend.isSet()) {
        obj.insert(QString("user_suspend"), ::OpenAPI::toJsonValue(m_user_suspend));
    }
    if (m_user_unsuspend.isSet()) {
        obj.insert(QString("user_unsuspend"), ::OpenAPI::toJsonValue(m_user_unsuspend));
    }
    if (m_user_withheld.isSet()) {
        obj.insert(QString("user_withheld"), ::OpenAPI::toJsonValue(m_user_withheld));
    }
    if (m_scrub_geo.isSet()) {
        obj.insert(QString("scrub_geo"), ::OpenAPI::toJsonValue(m_scrub_geo));
    }
    if (m_user_profile_modification.isSet()) {
        obj.insert(QString("user_profile_modification"), ::OpenAPI::toJsonValue(m_user_profile_modification));
    }
    return obj;
}

OAIUserComplianceSchema OAIUserComplianceData::getUserProtect() const {
    return m_user_protect;
}
void OAIUserComplianceData::setUserProtect(const OAIUserComplianceSchema &user_protect) {
    m_user_protect = user_protect;
    m_user_protect_isSet = true;
}

bool OAIUserComplianceData::is_user_protect_Set() const{
    return m_user_protect_isSet;
}

bool OAIUserComplianceData::is_user_protect_Valid() const{
    return m_user_protect_isValid;
}

OAIUserComplianceSchema OAIUserComplianceData::getUserUnprotect() const {
    return m_user_unprotect;
}
void OAIUserComplianceData::setUserUnprotect(const OAIUserComplianceSchema &user_unprotect) {
    m_user_unprotect = user_unprotect;
    m_user_unprotect_isSet = true;
}

bool OAIUserComplianceData::is_user_unprotect_Set() const{
    return m_user_unprotect_isSet;
}

bool OAIUserComplianceData::is_user_unprotect_Valid() const{
    return m_user_unprotect_isValid;
}

OAIUserComplianceSchema OAIUserComplianceData::getUserDelete() const {
    return m_user_delete;
}
void OAIUserComplianceData::setUserDelete(const OAIUserComplianceSchema &user_delete) {
    m_user_delete = user_delete;
    m_user_delete_isSet = true;
}

bool OAIUserComplianceData::is_user_delete_Set() const{
    return m_user_delete_isSet;
}

bool OAIUserComplianceData::is_user_delete_Valid() const{
    return m_user_delete_isValid;
}

OAIUserComplianceSchema OAIUserComplianceData::getUserUndelete() const {
    return m_user_undelete;
}
void OAIUserComplianceData::setUserUndelete(const OAIUserComplianceSchema &user_undelete) {
    m_user_undelete = user_undelete;
    m_user_undelete_isSet = true;
}

bool OAIUserComplianceData::is_user_undelete_Set() const{
    return m_user_undelete_isSet;
}

bool OAIUserComplianceData::is_user_undelete_Valid() const{
    return m_user_undelete_isValid;
}

OAIUserComplianceSchema OAIUserComplianceData::getUserSuspend() const {
    return m_user_suspend;
}
void OAIUserComplianceData::setUserSuspend(const OAIUserComplianceSchema &user_suspend) {
    m_user_suspend = user_suspend;
    m_user_suspend_isSet = true;
}

bool OAIUserComplianceData::is_user_suspend_Set() const{
    return m_user_suspend_isSet;
}

bool OAIUserComplianceData::is_user_suspend_Valid() const{
    return m_user_suspend_isValid;
}

OAIUserComplianceSchema OAIUserComplianceData::getUserUnsuspend() const {
    return m_user_unsuspend;
}
void OAIUserComplianceData::setUserUnsuspend(const OAIUserComplianceSchema &user_unsuspend) {
    m_user_unsuspend = user_unsuspend;
    m_user_unsuspend_isSet = true;
}

bool OAIUserComplianceData::is_user_unsuspend_Set() const{
    return m_user_unsuspend_isSet;
}

bool OAIUserComplianceData::is_user_unsuspend_Valid() const{
    return m_user_unsuspend_isValid;
}

OAIUserTakedownComplianceSchema OAIUserComplianceData::getUserWithheld() const {
    return m_user_withheld;
}
void OAIUserComplianceData::setUserWithheld(const OAIUserTakedownComplianceSchema &user_withheld) {
    m_user_withheld = user_withheld;
    m_user_withheld_isSet = true;
}

bool OAIUserComplianceData::is_user_withheld_Set() const{
    return m_user_withheld_isSet;
}

bool OAIUserComplianceData::is_user_withheld_Valid() const{
    return m_user_withheld_isValid;
}

OAIUserScrubGeoObjectSchema OAIUserComplianceData::getScrubGeo() const {
    return m_scrub_geo;
}
void OAIUserComplianceData::setScrubGeo(const OAIUserScrubGeoObjectSchema &scrub_geo) {
    m_scrub_geo = scrub_geo;
    m_scrub_geo_isSet = true;
}

bool OAIUserComplianceData::is_scrub_geo_Set() const{
    return m_scrub_geo_isSet;
}

bool OAIUserComplianceData::is_scrub_geo_Valid() const{
    return m_scrub_geo_isValid;
}

OAIUserProfileModificationObjectSchema OAIUserComplianceData::getUserProfileModification() const {
    return m_user_profile_modification;
}
void OAIUserComplianceData::setUserProfileModification(const OAIUserProfileModificationObjectSchema &user_profile_modification) {
    m_user_profile_modification = user_profile_modification;
    m_user_profile_modification_isSet = true;
}

bool OAIUserComplianceData::is_user_profile_modification_Set() const{
    return m_user_profile_modification_isSet;
}

bool OAIUserComplianceData::is_user_profile_modification_Valid() const{
    return m_user_profile_modification_isValid;
}

bool OAIUserComplianceData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_protect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_unprotect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_undelete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_suspend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_unsuspend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_withheld.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scrub_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile_modification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserComplianceData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_protect_isValid && m_user_unprotect_isValid && m_user_delete_isValid && m_user_undelete_isValid && m_user_suspend_isValid && m_user_unsuspend_isValid && m_user_withheld_isValid && m_scrub_geo_isValid && m_user_profile_modification_isValid && true;
}

} // namespace OpenAPI
