/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TweetComplianceSchemaTweet from './TweetComplianceSchemaTweet';

/**
 * The TweetUnviewable model module.
 * @module model/TweetUnviewable
 * @version 2.62
 */
class TweetUnviewable {
    /**
     * Constructs a new <code>TweetUnviewable</code>.
     * @alias module:model/TweetUnviewable
     * @param application {String} If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.
     * @param eventAt {Date} Event time.
     * @param tweet {module:model/TweetComplianceSchemaTweet} 
     */
    constructor(application, eventAt, tweet) { 
        
        TweetUnviewable.initialize(this, application, eventAt, tweet);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, application, eventAt, tweet) { 
        obj['application'] = application;
        obj['event_at'] = eventAt;
        obj['tweet'] = tweet;
    }

    /**
     * Constructs a <code>TweetUnviewable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TweetUnviewable} obj Optional instance to populate.
     * @return {module:model/TweetUnviewable} The populated <code>TweetUnviewable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TweetUnviewable();

            if (data.hasOwnProperty('application')) {
                obj['application'] = ApiClient.convertToType(data['application'], 'String');
            }
            if (data.hasOwnProperty('event_at')) {
                obj['event_at'] = ApiClient.convertToType(data['event_at'], 'Date');
            }
            if (data.hasOwnProperty('tweet')) {
                obj['tweet'] = TweetComplianceSchemaTweet.constructFromObject(data['tweet']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TweetUnviewable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TweetUnviewable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TweetUnviewable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['application'] && !(typeof data['application'] === 'string' || data['application'] instanceof String)) {
            throw new Error("Expected the field `application` to be a primitive type in the JSON string but got " + data['application']);
        }
        // validate the optional field `tweet`
        if (data['tweet']) { // data not null
          TweetComplianceSchemaTweet.validateJSON(data['tweet']);
        }

        return true;
    }


}

TweetUnviewable.RequiredProperties = ["application", "event_at", "tweet"];

/**
 * If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.
 * @member {String} application
 */
TweetUnviewable.prototype['application'] = undefined;

/**
 * Event time.
 * @member {Date} event_at
 */
TweetUnviewable.prototype['event_at'] = undefined;

/**
 * @member {module:model/TweetComplianceSchemaTweet} tweet
 */
TweetUnviewable.prototype['tweet'] = undefined;






export default TweetUnviewable;

