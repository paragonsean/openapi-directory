/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PollOption from './PollOption';

/**
 * The Poll model module.
 * @module model/Poll
 * @version 2.62
 */
class Poll {
    /**
     * Constructs a new <code>Poll</code>.
     * Represent a Poll attached to a Tweet.
     * @alias module:model/Poll
     * @param id {String} Unique identifier of this poll.
     * @param options {Array.<module:model/PollOption>} 
     */
    constructor(id, options) { 
        
        Poll.initialize(this, id, options);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, options) { 
        obj['id'] = id;
        obj['options'] = options;
    }

    /**
     * Constructs a <code>Poll</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Poll} obj Optional instance to populate.
     * @return {module:model/Poll} The populated <code>Poll</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Poll();

            if (data.hasOwnProperty('duration_minutes')) {
                obj['duration_minutes'] = ApiClient.convertToType(data['duration_minutes'], 'Number');
            }
            if (data.hasOwnProperty('end_datetime')) {
                obj['end_datetime'] = ApiClient.convertToType(data['end_datetime'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [PollOption]);
            }
            if (data.hasOwnProperty('voting_status')) {
                obj['voting_status'] = ApiClient.convertToType(data['voting_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Poll</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Poll</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Poll.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                PollOption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['voting_status'] && !(typeof data['voting_status'] === 'string' || data['voting_status'] instanceof String)) {
            throw new Error("Expected the field `voting_status` to be a primitive type in the JSON string but got " + data['voting_status']);
        }

        return true;
    }


}

Poll.RequiredProperties = ["id", "options"];

/**
 * @member {Number} duration_minutes
 */
Poll.prototype['duration_minutes'] = undefined;

/**
 * @member {Date} end_datetime
 */
Poll.prototype['end_datetime'] = undefined;

/**
 * Unique identifier of this poll.
 * @member {String} id
 */
Poll.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/PollOption>} options
 */
Poll.prototype['options'] = undefined;

/**
 * @member {module:model/Poll.VotingStatusEnum} voting_status
 */
Poll.prototype['voting_status'] = undefined;





/**
 * Allowed values for the <code>voting_status</code> property.
 * @enum {String}
 * @readonly
 */
Poll['VotingStatusEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed"
};



export default Poll;

