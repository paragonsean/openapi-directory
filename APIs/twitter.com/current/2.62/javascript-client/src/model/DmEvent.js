/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DmEventAttachments from './DmEventAttachments';
import DmEventReferencedTweetsInner from './DmEventReferencedTweetsInner';

/**
 * The DmEvent model module.
 * @module model/DmEvent
 * @version 2.62
 */
class DmEvent {
    /**
     * Constructs a new <code>DmEvent</code>.
     * @alias module:model/DmEvent
     * @param eventType {String} 
     * @param id {String} Unique identifier of a DM Event.
     */
    constructor(eventType, id) { 
        
        DmEvent.initialize(this, eventType, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventType, id) { 
        obj['event_type'] = eventType;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>DmEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DmEvent} obj Optional instance to populate.
     * @return {module:model/DmEvent} The populated <code>DmEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DmEvent();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = DmEventAttachments.constructFromObject(data['attachments']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dm_conversation_id')) {
                obj['dm_conversation_id'] = ApiClient.convertToType(data['dm_conversation_id'], 'String');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = ApiClient.convertToType(data['event_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('participant_ids')) {
                obj['participant_ids'] = ApiClient.convertToType(data['participant_ids'], ['String']);
            }
            if (data.hasOwnProperty('referenced_tweets')) {
                obj['referenced_tweets'] = ApiClient.convertToType(data['referenced_tweets'], [DmEventReferencedTweetsInner]);
            }
            if (data.hasOwnProperty('sender_id')) {
                obj['sender_id'] = ApiClient.convertToType(data['sender_id'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DmEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DmEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DmEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attachments`
        if (data['attachments']) { // data not null
          DmEventAttachments.validateJSON(data['attachments']);
        }
        // ensure the json data is a string
        if (data['dm_conversation_id'] && !(typeof data['dm_conversation_id'] === 'string' || data['dm_conversation_id'] instanceof String)) {
            throw new Error("Expected the field `dm_conversation_id` to be a primitive type in the JSON string but got " + data['dm_conversation_id']);
        }
        // ensure the json data is a string
        if (data['event_type'] && !(typeof data['event_type'] === 'string' || data['event_type'] instanceof String)) {
            throw new Error("Expected the field `event_type` to be a primitive type in the JSON string but got " + data['event_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['participant_ids'])) {
            throw new Error("Expected the field `participant_ids` to be an array in the JSON data but got " + data['participant_ids']);
        }
        if (data['referenced_tweets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referenced_tweets'])) {
                throw new Error("Expected the field `referenced_tweets` to be an array in the JSON data but got " + data['referenced_tweets']);
            }
            // validate the optional field `referenced_tweets` (array)
            for (const item of data['referenced_tweets']) {
                DmEventReferencedTweetsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sender_id'] && !(typeof data['sender_id'] === 'string' || data['sender_id'] instanceof String)) {
            throw new Error("Expected the field `sender_id` to be a primitive type in the JSON string but got " + data['sender_id']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

DmEvent.RequiredProperties = ["event_type", "id"];

/**
 * @member {module:model/DmEventAttachments} attachments
 */
DmEvent.prototype['attachments'] = undefined;

/**
 * @member {Date} created_at
 */
DmEvent.prototype['created_at'] = undefined;

/**
 * Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.
 * @member {String} dm_conversation_id
 */
DmEvent.prototype['dm_conversation_id'] = undefined;

/**
 * @member {String} event_type
 */
DmEvent.prototype['event_type'] = undefined;

/**
 * Unique identifier of a DM Event.
 * @member {String} id
 */
DmEvent.prototype['id'] = undefined;

/**
 * A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.
 * @member {Array.<String>} participant_ids
 */
DmEvent.prototype['participant_ids'] = undefined;

/**
 * A list of Tweets this DM refers to.
 * @member {Array.<module:model/DmEventReferencedTweetsInner>} referenced_tweets
 */
DmEvent.prototype['referenced_tweets'] = undefined;

/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} sender_id
 */
DmEvent.prototype['sender_id'] = undefined;

/**
 * @member {String} text
 */
DmEvent.prototype['text'] = undefined;






export default DmEvent;

