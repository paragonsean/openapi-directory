/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Point from './Point';

/**
 * The Geo model module.
 * @module model/Geo
 * @version 2.62
 */
class Geo {
    /**
     * Constructs a new <code>Geo</code>.
     * @alias module:model/Geo
     * @param bbox {Array.<Number>} 
     * @param properties {Object} 
     * @param type {module:model/Geo.TypeEnum} 
     */
    constructor(bbox, properties, type) { 
        
        Geo.initialize(this, bbox, properties, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bbox, properties, type) { 
        obj['bbox'] = bbox;
        obj['properties'] = properties;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Geo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Geo} obj Optional instance to populate.
     * @return {module:model/Geo} The populated <code>Geo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Geo();

            if (data.hasOwnProperty('bbox')) {
                obj['bbox'] = ApiClient.convertToType(data['bbox'], ['Number']);
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = Point.constructFromObject(data['geometry']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Geo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Geo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Geo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bbox'])) {
            throw new Error("Expected the field `bbox` to be an array in the JSON data but got " + data['bbox']);
        }
        // validate the optional field `geometry`
        if (data['geometry']) { // data not null
          Point.validateJSON(data['geometry']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Geo.RequiredProperties = ["bbox", "properties", "type"];

/**
 * @member {Array.<Number>} bbox
 */
Geo.prototype['bbox'] = undefined;

/**
 * @member {module:model/Point} geometry
 */
Geo.prototype['geometry'] = undefined;

/**
 * @member {Object} properties
 */
Geo.prototype['properties'] = undefined;

/**
 * @member {module:model/Geo.TypeEnum} type
 */
Geo.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Geo['TypeEnum'] = {

    /**
     * value: "Feature"
     * @const
     */
    "Feature": "Feature"
};



export default Geo;

