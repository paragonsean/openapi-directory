/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Geo from './Geo';
import PlaceType from './PlaceType';

/**
 * The Place model module.
 * @module model/Place
 * @version 2.62
 */
class Place {
    /**
     * Constructs a new <code>Place</code>.
     * @alias module:model/Place
     * @param fullName {String} The full name of this place.
     * @param id {String} The identifier for this place.
     */
    constructor(fullName, id) { 
        
        Place.initialize(this, fullName, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fullName, id) { 
        obj['full_name'] = fullName;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Place</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Place} obj Optional instance to populate.
     * @return {module:model/Place} The populated <code>Place</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Place();

            if (data.hasOwnProperty('contained_within')) {
                obj['contained_within'] = ApiClient.convertToType(data['contained_within'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('geo')) {
                obj['geo'] = Geo.constructFromObject(data['geo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('place_type')) {
                obj['place_type'] = PlaceType.constructFromObject(data['place_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Place</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Place</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Place.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contained_within'])) {
            throw new Error("Expected the field `contained_within` to be an array in the JSON data but got " + data['contained_within']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // validate the optional field `geo`
        if (data['geo']) { // data not null
          Geo.validateJSON(data['geo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Place.RequiredProperties = ["full_name", "id"];

/**
 * @member {Array.<String>} contained_within
 */
Place.prototype['contained_within'] = undefined;

/**
 * The full name of the county in which this place exists.
 * @member {String} country
 */
Place.prototype['country'] = undefined;

/**
 * A two-letter ISO 3166-1 alpha-2 country code.
 * @member {String} country_code
 */
Place.prototype['country_code'] = undefined;

/**
 * The full name of this place.
 * @member {String} full_name
 */
Place.prototype['full_name'] = undefined;

/**
 * @member {module:model/Geo} geo
 */
Place.prototype['geo'] = undefined;

/**
 * The identifier for this place.
 * @member {String} id
 */
Place.prototype['id'] = undefined;

/**
 * The human readable name of this place.
 * @member {String} name
 */
Place.prototype['name'] = undefined;

/**
 * @member {module:model/PlaceType} place_type
 */
Place.prototype['place_type'] = undefined;






export default Place;

