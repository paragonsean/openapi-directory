/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PollOption model module.
 * @module model/PollOption
 * @version 2.62
 */
class PollOption {
    /**
     * Constructs a new <code>PollOption</code>.
     * Describes a choice in a Poll object.
     * @alias module:model/PollOption
     * @param label {String} The text of a poll choice.
     * @param position {Number} Position of this choice in the poll.
     * @param votes {Number} Number of users who voted for this choice.
     */
    constructor(label, position, votes) { 
        
        PollOption.initialize(this, label, position, votes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, position, votes) { 
        obj['label'] = label;
        obj['position'] = position;
        obj['votes'] = votes;
    }

    /**
     * Constructs a <code>PollOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PollOption} obj Optional instance to populate.
     * @return {module:model/PollOption} The populated <code>PollOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PollOption();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('votes')) {
                obj['votes'] = ApiClient.convertToType(data['votes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PollOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PollOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PollOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}

PollOption.RequiredProperties = ["label", "position", "votes"];

/**
 * The text of a poll choice.
 * @member {String} label
 */
PollOption.prototype['label'] = undefined;

/**
 * Position of this choice in the poll.
 * @member {Number} position
 */
PollOption.prototype['position'] = undefined;

/**
 * Number of users who voted for this choice.
 * @member {Number} votes
 */
PollOption.prototype['votes'] = undefined;






export default PollOption;

