/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Problem from './Problem';

/**
 * The ResourceUnauthorizedProblem model module.
 * @module model/ResourceUnauthorizedProblem
 * @version 2.62
 */
class ResourceUnauthorizedProblem {
    /**
     * Constructs a new <code>ResourceUnauthorizedProblem</code>.
     * A problem that indicates you are not allowed to see a particular Tweet, User, etc.
     * @alias module:model/ResourceUnauthorizedProblem
     * @extends module:model/Problem
     * @implements module:model/Problem
     * @param title {String} 
     * @param type {String} 
     * @param parameter {String} 
     * @param resourceId {String} 
     * @param resourceType {module:model/ResourceUnauthorizedProblem.ResourceTypeEnum} 
     * @param section {module:model/ResourceUnauthorizedProblem.SectionEnum} 
     * @param value {String} 
     */
    constructor(title, type, parameter, resourceId, resourceType, section, value) { 
        Problem.initialize(this, title, type);
        ResourceUnauthorizedProblem.initialize(this, title, type, parameter, resourceId, resourceType, section, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, type, parameter, resourceId, resourceType, section, value) { 
        obj['parameter'] = parameter;
        obj['resource_id'] = resourceId;
        obj['resource_type'] = resourceType;
        obj['section'] = section;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>ResourceUnauthorizedProblem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceUnauthorizedProblem} obj Optional instance to populate.
     * @return {module:model/ResourceUnauthorizedProblem} The populated <code>ResourceUnauthorizedProblem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceUnauthorizedProblem();
            Problem.constructFromObject(data, obj);
            Problem.constructFromObject(data, obj);

            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
            if (data.hasOwnProperty('resource_id')) {
                obj['resource_id'] = ApiClient.convertToType(data['resource_id'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceUnauthorizedProblem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceUnauthorizedProblem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceUnauthorizedProblem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['parameter'] && !(typeof data['parameter'] === 'string' || data['parameter'] instanceof String)) {
            throw new Error("Expected the field `parameter` to be a primitive type in the JSON string but got " + data['parameter']);
        }
        // ensure the json data is a string
        if (data['resource_id'] && !(typeof data['resource_id'] === 'string' || data['resource_id'] instanceof String)) {
            throw new Error("Expected the field `resource_id` to be a primitive type in the JSON string but got " + data['resource_id']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

ResourceUnauthorizedProblem.RequiredProperties = ["parameter", "resource_id", "resource_type", "section", "value", "title", "type"];

/**
 * @member {String} parameter
 */
ResourceUnauthorizedProblem.prototype['parameter'] = undefined;

/**
 * @member {String} resource_id
 */
ResourceUnauthorizedProblem.prototype['resource_id'] = undefined;

/**
 * @member {module:model/ResourceUnauthorizedProblem.ResourceTypeEnum} resource_type
 */
ResourceUnauthorizedProblem.prototype['resource_type'] = undefined;

/**
 * @member {module:model/ResourceUnauthorizedProblem.SectionEnum} section
 */
ResourceUnauthorizedProblem.prototype['section'] = undefined;

/**
 * @member {String} value
 */
ResourceUnauthorizedProblem.prototype['value'] = undefined;


// Implement Problem interface:
/**
 * @member {String} detail
 */
Problem.prototype['detail'] = undefined;
/**
 * @member {Number} status
 */
Problem.prototype['status'] = undefined;
/**
 * @member {String} title
 */
Problem.prototype['title'] = undefined;
/**
 * @member {String} type
 */
Problem.prototype['type'] = undefined;



/**
 * Allowed values for the <code>resource_type</code> property.
 * @enum {String}
 * @readonly
 */
ResourceUnauthorizedProblem['ResourceTypeEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "tweet"
     * @const
     */
    "tweet": "tweet",

    /**
     * value: "media"
     * @const
     */
    "media": "media",

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "space"
     * @const
     */
    "space": "space"
};


/**
 * Allowed values for the <code>section</code> property.
 * @enum {String}
 * @readonly
 */
ResourceUnauthorizedProblem['SectionEnum'] = {

    /**
     * value: "data"
     * @const
     */
    "data": "data",

    /**
     * value: "includes"
     * @const
     */
    "includes": "includes"
};



export default ResourceUnauthorizedProblem;

