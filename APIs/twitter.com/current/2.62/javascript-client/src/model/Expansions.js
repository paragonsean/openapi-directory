/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Media from './Media';
import Place from './Place';
import Poll from './Poll';
import Topic from './Topic';
import Tweet from './Tweet';
import User from './User';

/**
 * The Expansions model module.
 * @module model/Expansions
 * @version 2.62
 */
class Expansions {
    /**
     * Constructs a new <code>Expansions</code>.
     * @alias module:model/Expansions
     */
    constructor() { 
        
        Expansions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Expansions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Expansions} obj Optional instance to populate.
     * @return {module:model/Expansions} The populated <code>Expansions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Expansions();

            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [Media]);
            }
            if (data.hasOwnProperty('places')) {
                obj['places'] = ApiClient.convertToType(data['places'], [Place]);
            }
            if (data.hasOwnProperty('polls')) {
                obj['polls'] = ApiClient.convertToType(data['polls'], [Poll]);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [Topic]);
            }
            if (data.hasOwnProperty('tweets')) {
                obj['tweets'] = ApiClient.convertToType(data['tweets'], [Tweet]);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [User]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Expansions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Expansions</code>.
     */
    static validateJSON(data) {
        if (data['media']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media'])) {
                throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
            }
            // validate the optional field `media` (array)
            for (const item of data['media']) {
                Media.validateJSON(item);
            };
        }
        if (data['places']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['places'])) {
                throw new Error("Expected the field `places` to be an array in the JSON data but got " + data['places']);
            }
            // validate the optional field `places` (array)
            for (const item of data['places']) {
                Place.validateJSON(item);
            };
        }
        if (data['polls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['polls'])) {
                throw new Error("Expected the field `polls` to be an array in the JSON data but got " + data['polls']);
            }
            // validate the optional field `polls` (array)
            for (const item of data['polls']) {
                Poll.validateJSON(item);
            };
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                Topic.validateJSON(item);
            };
        }
        if (data['tweets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tweets'])) {
                throw new Error("Expected the field `tweets` to be an array in the JSON data but got " + data['tweets']);
            }
            // validate the optional field `tweets` (array)
            for (const item of data['tweets']) {
                Tweet.validateJSON(item);
            };
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                User.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Media>} media
 */
Expansions.prototype['media'] = undefined;

/**
 * @member {Array.<module:model/Place>} places
 */
Expansions.prototype['places'] = undefined;

/**
 * @member {Array.<module:model/Poll>} polls
 */
Expansions.prototype['polls'] = undefined;

/**
 * @member {Array.<module:model/Topic>} topics
 */
Expansions.prototype['topics'] = undefined;

/**
 * @member {Array.<module:model/Tweet>} tweets
 */
Expansions.prototype['tweets'] = undefined;

/**
 * @member {Array.<module:model/User>} users
 */
Expansions.prototype['users'] = undefined;






export default Expansions;

