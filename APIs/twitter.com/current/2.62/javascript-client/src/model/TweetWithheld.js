/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TweetWithheld model module.
 * @module model/TweetWithheld
 * @version 2.62
 */
class TweetWithheld {
    /**
     * Constructs a new <code>TweetWithheld</code>.
     * Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
     * @alias module:model/TweetWithheld
     * @param copyright {Boolean} Indicates if the content is being withheld for on the basis of copyright infringement.
     * @param countryCodes {Array.<String>} Provides a list of countries where this content is not available.
     */
    constructor(copyright, countryCodes) { 
        
        TweetWithheld.initialize(this, copyright, countryCodes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, copyright, countryCodes) { 
        obj['copyright'] = copyright;
        obj['country_codes'] = countryCodes;
    }

    /**
     * Constructs a <code>TweetWithheld</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TweetWithheld} obj Optional instance to populate.
     * @return {module:model/TweetWithheld} The populated <code>TweetWithheld</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TweetWithheld();

            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'Boolean');
            }
            if (data.hasOwnProperty('country_codes')) {
                obj['country_codes'] = ApiClient.convertToType(data['country_codes'], ['String']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TweetWithheld</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TweetWithheld</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TweetWithheld.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country_codes'])) {
            throw new Error("Expected the field `country_codes` to be an array in the JSON data but got " + data['country_codes']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}

TweetWithheld.RequiredProperties = ["copyright", "country_codes"];

/**
 * Indicates if the content is being withheld for on the basis of copyright infringement.
 * @member {Boolean} copyright
 */
TweetWithheld.prototype['copyright'] = undefined;

/**
 * Provides a list of countries where this content is not available.
 * @member {Array.<String>} country_codes
 */
TweetWithheld.prototype['country_codes'] = undefined;

/**
 * Indicates whether the content being withheld is the `tweet` or a `user`.
 * @member {module:model/TweetWithheld.ScopeEnum} scope
 */
TweetWithheld.prototype['scope'] = undefined;





/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
TweetWithheld['ScopeEnum'] = {

    /**
     * value: "tweet"
     * @const
     */
    "tweet": "tweet",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default TweetWithheld;

