/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Problem from './Problem';

/**
 * The ClientDisconnectedProblem model module.
 * @module model/ClientDisconnectedProblem
 * @version 2.62
 */
class ClientDisconnectedProblem {
    /**
     * Constructs a new <code>ClientDisconnectedProblem</code>.
     * Your client has gone away.
     * @alias module:model/ClientDisconnectedProblem
     * @extends module:model/Problem
     * @implements module:model/Problem
     * @param title {String} 
     * @param type {String} 
     */
    constructor(title, type) { 
        Problem.initialize(this, title, type);
        ClientDisconnectedProblem.initialize(this, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, type) { 
    }

    /**
     * Constructs a <code>ClientDisconnectedProblem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientDisconnectedProblem} obj Optional instance to populate.
     * @return {module:model/ClientDisconnectedProblem} The populated <code>ClientDisconnectedProblem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientDisconnectedProblem();
            Problem.constructFromObject(data, obj);
            Problem.constructFromObject(data, obj);

        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientDisconnectedProblem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientDisconnectedProblem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClientDisconnectedProblem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ClientDisconnectedProblem.RequiredProperties = ["title", "type"];


// Implement Problem interface:
/**
 * @member {String} detail
 */
Problem.prototype['detail'] = undefined;
/**
 * @member {Number} status
 */
Problem.prototype['status'] = undefined;
/**
 * @member {String} title
 */
Problem.prototype['title'] = undefined;
/**
 * @member {String} type
 */
Problem.prototype['type'] = undefined;




export default ClientDisconnectedProblem;

