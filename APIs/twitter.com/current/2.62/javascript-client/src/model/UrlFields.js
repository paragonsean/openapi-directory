/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UrlImage from './UrlImage';

/**
 * The UrlFields model module.
 * @module model/UrlFields
 * @version 2.62
 */
class UrlFields {
    /**
     * Constructs a new <code>UrlFields</code>.
     * Represent the portion of text recognized as a URL.
     * @alias module:model/UrlFields
     * @param url {String} A validly formatted URL.
     */
    constructor(url) { 
        
        UrlFields.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>UrlFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UrlFields} obj Optional instance to populate.
     * @return {module:model/UrlFields} The populated <code>UrlFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UrlFields();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display_url')) {
                obj['display_url'] = ApiClient.convertToType(data['display_url'], 'String');
            }
            if (data.hasOwnProperty('expanded_url')) {
                obj['expanded_url'] = ApiClient.convertToType(data['expanded_url'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [UrlImage]);
            }
            if (data.hasOwnProperty('media_key')) {
                obj['media_key'] = ApiClient.convertToType(data['media_key'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('unwound_url')) {
                obj['unwound_url'] = ApiClient.convertToType(data['unwound_url'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UrlFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UrlFields</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UrlFields.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display_url'] && !(typeof data['display_url'] === 'string' || data['display_url'] instanceof String)) {
            throw new Error("Expected the field `display_url` to be a primitive type in the JSON string but got " + data['display_url']);
        }
        // ensure the json data is a string
        if (data['expanded_url'] && !(typeof data['expanded_url'] === 'string' || data['expanded_url'] instanceof String)) {
            throw new Error("Expected the field `expanded_url` to be a primitive type in the JSON string but got " + data['expanded_url']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                UrlImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['media_key'] && !(typeof data['media_key'] === 'string' || data['media_key'] instanceof String)) {
            throw new Error("Expected the field `media_key` to be a primitive type in the JSON string but got " + data['media_key']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['unwound_url'] && !(typeof data['unwound_url'] === 'string' || data['unwound_url'] instanceof String)) {
            throw new Error("Expected the field `unwound_url` to be a primitive type in the JSON string but got " + data['unwound_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

UrlFields.RequiredProperties = ["url"];

/**
 * Description of the URL landing page.
 * @member {String} description
 */
UrlFields.prototype['description'] = undefined;

/**
 * The URL as displayed in the Twitter client.
 * @member {String} display_url
 */
UrlFields.prototype['display_url'] = undefined;

/**
 * A validly formatted URL.
 * @member {String} expanded_url
 */
UrlFields.prototype['expanded_url'] = undefined;

/**
 * @member {Array.<module:model/UrlImage>} images
 */
UrlFields.prototype['images'] = undefined;

/**
 * The Media Key identifier for this attachment.
 * @member {String} media_key
 */
UrlFields.prototype['media_key'] = undefined;

/**
 * HTTP Status Code.
 * @member {Number} status
 */
UrlFields.prototype['status'] = undefined;

/**
 * Title of the page the URL points to.
 * @member {String} title
 */
UrlFields.prototype['title'] = undefined;

/**
 * Fully resolved url.
 * @member {String} unwound_url
 */
UrlFields.prototype['unwound_url'] = undefined;

/**
 * A validly formatted URL.
 * @member {String} url
 */
UrlFields.prototype['url'] = undefined;






export default UrlFields;

