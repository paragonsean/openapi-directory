/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpaceTopicsInner from './SpaceTopicsInner';

/**
 * The Space model module.
 * @module model/Space
 * @version 2.62
 */
class Space {
    /**
     * Constructs a new <code>Space</code>.
     * 
     * @alias module:model/Space
     * @param id {String} The unique identifier of this Space.
     * @param state {module:model/Space.StateEnum} The current state of the Space.
     */
    constructor(id, state) { 
        
        Space.initialize(this, id, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, state) { 
        obj['id'] = id;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>Space</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Space} obj Optional instance to populate.
     * @return {module:model/Space} The populated <code>Space</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Space();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('creator_id')) {
                obj['creator_id'] = ApiClient.convertToType(data['creator_id'], 'String');
            }
            if (data.hasOwnProperty('ended_at')) {
                obj['ended_at'] = ApiClient.convertToType(data['ended_at'], 'Date');
            }
            if (data.hasOwnProperty('host_ids')) {
                obj['host_ids'] = ApiClient.convertToType(data['host_ids'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invited_user_ids')) {
                obj['invited_user_ids'] = ApiClient.convertToType(data['invited_user_ids'], ['String']);
            }
            if (data.hasOwnProperty('is_ticketed')) {
                obj['is_ticketed'] = ApiClient.convertToType(data['is_ticketed'], 'Boolean');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('participant_count')) {
                obj['participant_count'] = ApiClient.convertToType(data['participant_count'], 'Number');
            }
            if (data.hasOwnProperty('scheduled_start')) {
                obj['scheduled_start'] = ApiClient.convertToType(data['scheduled_start'], 'Date');
            }
            if (data.hasOwnProperty('speaker_ids')) {
                obj['speaker_ids'] = ApiClient.convertToType(data['speaker_ids'], ['String']);
            }
            if (data.hasOwnProperty('started_at')) {
                obj['started_at'] = ApiClient.convertToType(data['started_at'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subscriber_count')) {
                obj['subscriber_count'] = ApiClient.convertToType(data['subscriber_count'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [SpaceTopicsInner]);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Space</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Space</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Space.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creator_id'] && !(typeof data['creator_id'] === 'string' || data['creator_id'] instanceof String)) {
            throw new Error("Expected the field `creator_id` to be a primitive type in the JSON string but got " + data['creator_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['host_ids'])) {
            throw new Error("Expected the field `host_ids` to be an array in the JSON data but got " + data['host_ids']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['invited_user_ids'])) {
            throw new Error("Expected the field `invited_user_ids` to be an array in the JSON data but got " + data['invited_user_ids']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['speaker_ids'])) {
            throw new Error("Expected the field `speaker_ids` to be an array in the JSON data but got " + data['speaker_ids']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                SpaceTopicsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Space.RequiredProperties = ["id", "state"];

/**
 * Creation time of the Space.
 * @member {Date} created_at
 */
Space.prototype['created_at'] = undefined;

/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} creator_id
 */
Space.prototype['creator_id'] = undefined;

/**
 * End time of the Space.
 * @member {Date} ended_at
 */
Space.prototype['ended_at'] = undefined;

/**
 * The user ids for the hosts of the Space.
 * @member {Array.<String>} host_ids
 */
Space.prototype['host_ids'] = undefined;

/**
 * The unique identifier of this Space.
 * @member {String} id
 */
Space.prototype['id'] = undefined;

/**
 * An array of user ids for people who were invited to a Space.
 * @member {Array.<String>} invited_user_ids
 */
Space.prototype['invited_user_ids'] = undefined;

/**
 * Denotes if the Space is a ticketed Space.
 * @member {Boolean} is_ticketed
 */
Space.prototype['is_ticketed'] = undefined;

/**
 * The language of the Space.
 * @member {String} lang
 */
Space.prototype['lang'] = undefined;

/**
 * The number of participants in a Space.
 * @member {Number} participant_count
 */
Space.prototype['participant_count'] = undefined;

/**
 * A date time stamp for when a Space is scheduled to begin.
 * @member {Date} scheduled_start
 */
Space.prototype['scheduled_start'] = undefined;

/**
 * An array of user ids for people who were speakers in a Space.
 * @member {Array.<String>} speaker_ids
 */
Space.prototype['speaker_ids'] = undefined;

/**
 * When the Space was started as a date string.
 * @member {Date} started_at
 */
Space.prototype['started_at'] = undefined;

/**
 * The current state of the Space.
 * @member {module:model/Space.StateEnum} state
 */
Space.prototype['state'] = undefined;

/**
 * The number of people who have either purchased a ticket or set a reminder for this Space.
 * @member {Number} subscriber_count
 */
Space.prototype['subscriber_count'] = undefined;

/**
 * The title of the Space.
 * @member {String} title
 */
Space.prototype['title'] = undefined;

/**
 * The topics of a Space, as selected by its creator.
 * @member {Array.<module:model/SpaceTopicsInner>} topics
 */
Space.prototype['topics'] = undefined;

/**
 * When the Space was last updated.
 * @member {Date} updated_at
 */
Space.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Space['StateEnum'] = {

    /**
     * value: "live"
     * @const
     */
    "live": "live",

    /**
     * value: "scheduled"
     * @const
     */
    "scheduled": "scheduled",

    /**
     * value: "ended"
     * @const
     */
    "ended": "ended"
};



export default Space;

