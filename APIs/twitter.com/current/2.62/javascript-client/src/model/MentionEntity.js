/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityIndicesInclusiveExclusive from './EntityIndicesInclusiveExclusive';
import MentionFields from './MentionFields';

/**
 * The MentionEntity model module.
 * @module model/MentionEntity
 * @version 2.62
 */
class MentionEntity {
    /**
     * Constructs a new <code>MentionEntity</code>.
     * @alias module:model/MentionEntity
     * @implements module:model/EntityIndicesInclusiveExclusive
     * @implements module:model/MentionFields
     * @param end {Number} Index (zero-based) at which position this entity ends.  The index is exclusive.
     * @param start {Number} Index (zero-based) at which position this entity starts.  The index is inclusive.
     * @param username {String} The Twitter handle (screen name) of this user.
     */
    constructor(end, start, username) { 
        EntityIndicesInclusiveExclusive.initialize(this, end, start);MentionFields.initialize(this, username);
        MentionEntity.initialize(this, end, start, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, end, start, username) { 
        obj['end'] = end;
        obj['start'] = start;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>MentionEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MentionEntity} obj Optional instance to populate.
     * @return {module:model/MentionEntity} The populated <code>MentionEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MentionEntity();
            EntityIndicesInclusiveExclusive.constructFromObject(data, obj);
            MentionFields.constructFromObject(data, obj);

            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MentionEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MentionEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MentionEntity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

MentionEntity.RequiredProperties = ["end", "start", "username"];

/**
 * Index (zero-based) at which position this entity ends.  The index is exclusive.
 * @member {Number} end
 */
MentionEntity.prototype['end'] = undefined;

/**
 * Index (zero-based) at which position this entity starts.  The index is inclusive.
 * @member {Number} start
 */
MentionEntity.prototype['start'] = undefined;

/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} id
 */
MentionEntity.prototype['id'] = undefined;

/**
 * The Twitter handle (screen name) of this user.
 * @member {String} username
 */
MentionEntity.prototype['username'] = undefined;


// Implement EntityIndicesInclusiveExclusive interface:
/**
 * Index (zero-based) at which position this entity ends.  The index is exclusive.
 * @member {Number} end
 */
EntityIndicesInclusiveExclusive.prototype['end'] = undefined;
/**
 * Index (zero-based) at which position this entity starts.  The index is inclusive.
 * @member {Number} start
 */
EntityIndicesInclusiveExclusive.prototype['start'] = undefined;
// Implement MentionFields interface:
/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} id
 */
MentionFields.prototype['id'] = undefined;
/**
 * The Twitter handle (screen name) of this user.
 * @member {String} username
 */
MentionFields.prototype['username'] = undefined;




export default MentionEntity;

