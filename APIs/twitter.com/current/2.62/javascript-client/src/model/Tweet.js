/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContextAnnotation from './ContextAnnotation';
import FullTextEntities from './FullTextEntities';
import ReplySettings from './ReplySettings';
import TweetAttachments from './TweetAttachments';
import TweetEditControls from './TweetEditControls';
import TweetGeo from './TweetGeo';
import TweetNonPublicMetrics from './TweetNonPublicMetrics';
import TweetOrganicMetrics from './TweetOrganicMetrics';
import TweetPromotedMetrics from './TweetPromotedMetrics';
import TweetPublicMetrics from './TweetPublicMetrics';
import TweetReferencedTweetsInner from './TweetReferencedTweetsInner';
import TweetWithheld from './TweetWithheld';

/**
 * The Tweet model module.
 * @module model/Tweet
 * @version 2.62
 */
class Tweet {
    /**
     * Constructs a new <code>Tweet</code>.
     * @alias module:model/Tweet
     * @param editHistoryTweetIds {Array.<String>} A list of Tweet Ids in this Tweet chain.
     * @param id {String} Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @param text {String} The content of the Tweet.
     */
    constructor(editHistoryTweetIds, id, text) { 
        
        Tweet.initialize(this, editHistoryTweetIds, id, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, editHistoryTweetIds, id, text) { 
        obj['edit_history_tweet_ids'] = editHistoryTweetIds;
        obj['id'] = id;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>Tweet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tweet} obj Optional instance to populate.
     * @return {module:model/Tweet} The populated <code>Tweet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tweet();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = TweetAttachments.constructFromObject(data['attachments']);
            }
            if (data.hasOwnProperty('author_id')) {
                obj['author_id'] = ApiClient.convertToType(data['author_id'], 'String');
            }
            if (data.hasOwnProperty('context_annotations')) {
                obj['context_annotations'] = ApiClient.convertToType(data['context_annotations'], [ContextAnnotation]);
            }
            if (data.hasOwnProperty('conversation_id')) {
                obj['conversation_id'] = ApiClient.convertToType(data['conversation_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('edit_controls')) {
                obj['edit_controls'] = TweetEditControls.constructFromObject(data['edit_controls']);
            }
            if (data.hasOwnProperty('edit_history_tweet_ids')) {
                obj['edit_history_tweet_ids'] = ApiClient.convertToType(data['edit_history_tweet_ids'], ['String']);
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = FullTextEntities.constructFromObject(data['entities']);
            }
            if (data.hasOwnProperty('geo')) {
                obj['geo'] = TweetGeo.constructFromObject(data['geo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('in_reply_to_user_id')) {
                obj['in_reply_to_user_id'] = ApiClient.convertToType(data['in_reply_to_user_id'], 'String');
            }
            if (data.hasOwnProperty('lang')) {
                obj['lang'] = ApiClient.convertToType(data['lang'], 'String');
            }
            if (data.hasOwnProperty('non_public_metrics')) {
                obj['non_public_metrics'] = TweetNonPublicMetrics.constructFromObject(data['non_public_metrics']);
            }
            if (data.hasOwnProperty('organic_metrics')) {
                obj['organic_metrics'] = TweetOrganicMetrics.constructFromObject(data['organic_metrics']);
            }
            if (data.hasOwnProperty('possibly_sensitive')) {
                obj['possibly_sensitive'] = ApiClient.convertToType(data['possibly_sensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('promoted_metrics')) {
                obj['promoted_metrics'] = TweetPromotedMetrics.constructFromObject(data['promoted_metrics']);
            }
            if (data.hasOwnProperty('public_metrics')) {
                obj['public_metrics'] = TweetPublicMetrics.constructFromObject(data['public_metrics']);
            }
            if (data.hasOwnProperty('referenced_tweets')) {
                obj['referenced_tweets'] = ApiClient.convertToType(data['referenced_tweets'], [TweetReferencedTweetsInner]);
            }
            if (data.hasOwnProperty('reply_settings')) {
                obj['reply_settings'] = ReplySettings.constructFromObject(data['reply_settings']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('withheld')) {
                obj['withheld'] = TweetWithheld.constructFromObject(data['withheld']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tweet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tweet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tweet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `attachments`
        if (data['attachments']) { // data not null
          TweetAttachments.validateJSON(data['attachments']);
        }
        // ensure the json data is a string
        if (data['author_id'] && !(typeof data['author_id'] === 'string' || data['author_id'] instanceof String)) {
            throw new Error("Expected the field `author_id` to be a primitive type in the JSON string but got " + data['author_id']);
        }
        if (data['context_annotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['context_annotations'])) {
                throw new Error("Expected the field `context_annotations` to be an array in the JSON data but got " + data['context_annotations']);
            }
            // validate the optional field `context_annotations` (array)
            for (const item of data['context_annotations']) {
                ContextAnnotation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['conversation_id'] && !(typeof data['conversation_id'] === 'string' || data['conversation_id'] instanceof String)) {
            throw new Error("Expected the field `conversation_id` to be a primitive type in the JSON string but got " + data['conversation_id']);
        }
        // validate the optional field `edit_controls`
        if (data['edit_controls']) { // data not null
          TweetEditControls.validateJSON(data['edit_controls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['edit_history_tweet_ids'])) {
            throw new Error("Expected the field `edit_history_tweet_ids` to be an array in the JSON data but got " + data['edit_history_tweet_ids']);
        }
        // validate the optional field `entities`
        if (data['entities']) { // data not null
          FullTextEntities.validateJSON(data['entities']);
        }
        // validate the optional field `geo`
        if (data['geo']) { // data not null
          TweetGeo.validateJSON(data['geo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['in_reply_to_user_id'] && !(typeof data['in_reply_to_user_id'] === 'string' || data['in_reply_to_user_id'] instanceof String)) {
            throw new Error("Expected the field `in_reply_to_user_id` to be a primitive type in the JSON string but got " + data['in_reply_to_user_id']);
        }
        // ensure the json data is a string
        if (data['lang'] && !(typeof data['lang'] === 'string' || data['lang'] instanceof String)) {
            throw new Error("Expected the field `lang` to be a primitive type in the JSON string but got " + data['lang']);
        }
        // validate the optional field `non_public_metrics`
        if (data['non_public_metrics']) { // data not null
          TweetNonPublicMetrics.validateJSON(data['non_public_metrics']);
        }
        // validate the optional field `organic_metrics`
        if (data['organic_metrics']) { // data not null
          TweetOrganicMetrics.validateJSON(data['organic_metrics']);
        }
        // validate the optional field `promoted_metrics`
        if (data['promoted_metrics']) { // data not null
          TweetPromotedMetrics.validateJSON(data['promoted_metrics']);
        }
        // validate the optional field `public_metrics`
        if (data['public_metrics']) { // data not null
          TweetPublicMetrics.validateJSON(data['public_metrics']);
        }
        if (data['referenced_tweets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referenced_tweets'])) {
                throw new Error("Expected the field `referenced_tweets` to be an array in the JSON data but got " + data['referenced_tweets']);
            }
            // validate the optional field `referenced_tweets` (array)
            for (const item of data['referenced_tweets']) {
                TweetReferencedTweetsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `withheld`
        if (data['withheld']) { // data not null
          TweetWithheld.validateJSON(data['withheld']);
        }

        return true;
    }


}

Tweet.RequiredProperties = ["edit_history_tweet_ids", "id", "text"];

/**
 * @member {module:model/TweetAttachments} attachments
 */
Tweet.prototype['attachments'] = undefined;

/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} author_id
 */
Tweet.prototype['author_id'] = undefined;

/**
 * @member {Array.<module:model/ContextAnnotation>} context_annotations
 */
Tweet.prototype['context_annotations'] = undefined;

/**
 * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} conversation_id
 */
Tweet.prototype['conversation_id'] = undefined;

/**
 * Creation time of the Tweet.
 * @member {Date} created_at
 */
Tweet.prototype['created_at'] = undefined;

/**
 * @member {module:model/TweetEditControls} edit_controls
 */
Tweet.prototype['edit_controls'] = undefined;

/**
 * A list of Tweet Ids in this Tweet chain.
 * @member {Array.<String>} edit_history_tweet_ids
 */
Tweet.prototype['edit_history_tweet_ids'] = undefined;

/**
 * @member {module:model/FullTextEntities} entities
 */
Tweet.prototype['entities'] = undefined;

/**
 * @member {module:model/TweetGeo} geo
 */
Tweet.prototype['geo'] = undefined;

/**
 * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} id
 */
Tweet.prototype['id'] = undefined;

/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} in_reply_to_user_id
 */
Tweet.prototype['in_reply_to_user_id'] = undefined;

/**
 * Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
 * @member {String} lang
 */
Tweet.prototype['lang'] = undefined;

/**
 * @member {module:model/TweetNonPublicMetrics} non_public_metrics
 */
Tweet.prototype['non_public_metrics'] = undefined;

/**
 * @member {module:model/TweetOrganicMetrics} organic_metrics
 */
Tweet.prototype['organic_metrics'] = undefined;

/**
 * Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
 * @member {Boolean} possibly_sensitive
 */
Tweet.prototype['possibly_sensitive'] = undefined;

/**
 * @member {module:model/TweetPromotedMetrics} promoted_metrics
 */
Tweet.prototype['promoted_metrics'] = undefined;

/**
 * @member {module:model/TweetPublicMetrics} public_metrics
 */
Tweet.prototype['public_metrics'] = undefined;

/**
 * A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
 * @member {Array.<module:model/TweetReferencedTweetsInner>} referenced_tweets
 */
Tweet.prototype['referenced_tweets'] = undefined;

/**
 * @member {module:model/ReplySettings} reply_settings
 */
Tweet.prototype['reply_settings'] = undefined;

/**
 * This is deprecated.
 * @member {String} source
 */
Tweet.prototype['source'] = undefined;

/**
 * The content of the Tweet.
 * @member {String} text
 */
Tweet.prototype['text'] = undefined;

/**
 * @member {module:model/TweetWithheld} withheld
 */
Tweet.prototype['withheld'] = undefined;






export default Tweet;

