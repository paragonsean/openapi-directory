/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserEntities from './UserEntities';
import UserPublicMetrics from './UserPublicMetrics';
import UserWithheld from './UserWithheld';

/**
 * The User model module.
 * @module model/User
 * @version 2.62
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * The Twitter User object.
     * @alias module:model/User
     * @param id {String} Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
     * @param name {String} The friendly name of this User, as shown on their profile.
     * @param username {String} The Twitter handle (screen name) of this user.
     */
    constructor(id, name, username) { 
        
        User.initialize(this, id, name, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, username) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = UserEntities.constructFromObject(data['entities']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pinned_tweet_id')) {
                obj['pinned_tweet_id'] = ApiClient.convertToType(data['pinned_tweet_id'], 'String');
            }
            if (data.hasOwnProperty('profile_image_url')) {
                obj['profile_image_url'] = ApiClient.convertToType(data['profile_image_url'], 'String');
            }
            if (data.hasOwnProperty('protected')) {
                obj['protected'] = ApiClient.convertToType(data['protected'], 'Boolean');
            }
            if (data.hasOwnProperty('public_metrics')) {
                obj['public_metrics'] = UserPublicMetrics.constructFromObject(data['public_metrics']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
            if (data.hasOwnProperty('verified_type')) {
                obj['verified_type'] = ApiClient.convertToType(data['verified_type'], 'String');
            }
            if (data.hasOwnProperty('withheld')) {
                obj['withheld'] = UserWithheld.constructFromObject(data['withheld']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `entities`
        if (data['entities']) { // data not null
          UserEntities.validateJSON(data['entities']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pinned_tweet_id'] && !(typeof data['pinned_tweet_id'] === 'string' || data['pinned_tweet_id'] instanceof String)) {
            throw new Error("Expected the field `pinned_tweet_id` to be a primitive type in the JSON string but got " + data['pinned_tweet_id']);
        }
        // ensure the json data is a string
        if (data['profile_image_url'] && !(typeof data['profile_image_url'] === 'string' || data['profile_image_url'] instanceof String)) {
            throw new Error("Expected the field `profile_image_url` to be a primitive type in the JSON string but got " + data['profile_image_url']);
        }
        // validate the optional field `public_metrics`
        if (data['public_metrics']) { // data not null
          UserPublicMetrics.validateJSON(data['public_metrics']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['verified_type'] && !(typeof data['verified_type'] === 'string' || data['verified_type'] instanceof String)) {
            throw new Error("Expected the field `verified_type` to be a primitive type in the JSON string but got " + data['verified_type']);
        }
        // validate the optional field `withheld`
        if (data['withheld']) { // data not null
          UserWithheld.validateJSON(data['withheld']);
        }

        return true;
    }


}

User.RequiredProperties = ["id", "name", "username"];

/**
 * Creation time of this User.
 * @member {Date} created_at
 */
User.prototype['created_at'] = undefined;

/**
 * The text of this User's profile description (also known as bio), if the User provided one.
 * @member {String} description
 */
User.prototype['description'] = undefined;

/**
 * @member {module:model/UserEntities} entities
 */
User.prototype['entities'] = undefined;

/**
 * Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} id
 */
User.prototype['id'] = undefined;

/**
 * The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
 * @member {String} location
 */
User.prototype['location'] = undefined;

/**
 * The friendly name of this User, as shown on their profile.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @member {String} pinned_tweet_id
 */
User.prototype['pinned_tweet_id'] = undefined;

/**
 * The URL to the profile image for this User.
 * @member {String} profile_image_url
 */
User.prototype['profile_image_url'] = undefined;

/**
 * Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).
 * @member {Boolean} protected
 */
User.prototype['protected'] = undefined;

/**
 * @member {module:model/UserPublicMetrics} public_metrics
 */
User.prototype['public_metrics'] = undefined;

/**
 * The URL specified in the User's profile.
 * @member {String} url
 */
User.prototype['url'] = undefined;

/**
 * The Twitter handle (screen name) of this user.
 * @member {String} username
 */
User.prototype['username'] = undefined;

/**
 * Indicate if this User is a verified Twitter User.
 * @member {Boolean} verified
 */
User.prototype['verified'] = undefined;

/**
 * The Twitter Blue verified type of the user, eg: blue, government, business or none.
 * @member {String} verified_type
 */
User.prototype['verified_type'] = undefined;

/**
 * @member {module:model/UserWithheld} withheld
 */
User.prototype['withheld'] = undefined;






export default User;

