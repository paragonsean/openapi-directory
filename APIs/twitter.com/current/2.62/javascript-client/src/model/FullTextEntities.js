/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CashtagEntity from './CashtagEntity';
import FullTextEntitiesAnnotationsInner from './FullTextEntitiesAnnotationsInner';
import HashtagEntity from './HashtagEntity';
import MentionEntity from './MentionEntity';
import UrlEntity from './UrlEntity';

/**
 * The FullTextEntities model module.
 * @module model/FullTextEntities
 * @version 2.62
 */
class FullTextEntities {
    /**
     * Constructs a new <code>FullTextEntities</code>.
     * @alias module:model/FullTextEntities
     */
    constructor() { 
        
        FullTextEntities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FullTextEntities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FullTextEntities} obj Optional instance to populate.
     * @return {module:model/FullTextEntities} The populated <code>FullTextEntities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FullTextEntities();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], [FullTextEntitiesAnnotationsInner]);
            }
            if (data.hasOwnProperty('cashtags')) {
                obj['cashtags'] = ApiClient.convertToType(data['cashtags'], [CashtagEntity]);
            }
            if (data.hasOwnProperty('hashtags')) {
                obj['hashtags'] = ApiClient.convertToType(data['hashtags'], [HashtagEntity]);
            }
            if (data.hasOwnProperty('mentions')) {
                obj['mentions'] = ApiClient.convertToType(data['mentions'], [MentionEntity]);
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [UrlEntity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FullTextEntities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FullTextEntities</code>.
     */
    static validateJSON(data) {
        if (data['annotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['annotations'])) {
                throw new Error("Expected the field `annotations` to be an array in the JSON data but got " + data['annotations']);
            }
            // validate the optional field `annotations` (array)
            for (const item of data['annotations']) {
                FullTextEntitiesAnnotationsInner.validateJSON(item);
            };
        }
        if (data['cashtags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cashtags'])) {
                throw new Error("Expected the field `cashtags` to be an array in the JSON data but got " + data['cashtags']);
            }
            // validate the optional field `cashtags` (array)
            for (const item of data['cashtags']) {
                CashtagEntity.validateJSON(item);
            };
        }
        if (data['hashtags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hashtags'])) {
                throw new Error("Expected the field `hashtags` to be an array in the JSON data but got " + data['hashtags']);
            }
            // validate the optional field `hashtags` (array)
            for (const item of data['hashtags']) {
                HashtagEntity.validateJSON(item);
            };
        }
        if (data['mentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mentions'])) {
                throw new Error("Expected the field `mentions` to be an array in the JSON data but got " + data['mentions']);
            }
            // validate the optional field `mentions` (array)
            for (const item of data['mentions']) {
                MentionEntity.validateJSON(item);
            };
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                UrlEntity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/FullTextEntitiesAnnotationsInner>} annotations
 */
FullTextEntities.prototype['annotations'] = undefined;

/**
 * @member {Array.<module:model/CashtagEntity>} cashtags
 */
FullTextEntities.prototype['cashtags'] = undefined;

/**
 * @member {Array.<module:model/HashtagEntity>} hashtags
 */
FullTextEntities.prototype['hashtags'] = undefined;

/**
 * @member {Array.<module:model/MentionEntity>} mentions
 */
FullTextEntities.prototype['mentions'] = undefined;

/**
 * @member {Array.<module:model/UrlEntity>} urls
 */
FullTextEntities.prototype['urls'] = undefined;






export default FullTextEntities;

