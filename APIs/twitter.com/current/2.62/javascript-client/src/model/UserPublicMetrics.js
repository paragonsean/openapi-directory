/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserPublicMetrics model module.
 * @module model/UserPublicMetrics
 * @version 2.62
 */
class UserPublicMetrics {
    /**
     * Constructs a new <code>UserPublicMetrics</code>.
     * A list of metrics for this User.
     * @alias module:model/UserPublicMetrics
     * @param followersCount {Number} Number of Users who are following this User.
     * @param followingCount {Number} Number of Users this User is following.
     * @param listedCount {Number} The number of lists that include this User.
     * @param tweetCount {Number} The number of Tweets (including Retweets) posted by this User.
     */
    constructor(followersCount, followingCount, listedCount, tweetCount) { 
        
        UserPublicMetrics.initialize(this, followersCount, followingCount, listedCount, tweetCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, followersCount, followingCount, listedCount, tweetCount) { 
        obj['followers_count'] = followersCount;
        obj['following_count'] = followingCount;
        obj['listed_count'] = listedCount;
        obj['tweet_count'] = tweetCount;
    }

    /**
     * Constructs a <code>UserPublicMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserPublicMetrics} obj Optional instance to populate.
     * @return {module:model/UserPublicMetrics} The populated <code>UserPublicMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPublicMetrics();

            if (data.hasOwnProperty('followers_count')) {
                obj['followers_count'] = ApiClient.convertToType(data['followers_count'], 'Number');
            }
            if (data.hasOwnProperty('following_count')) {
                obj['following_count'] = ApiClient.convertToType(data['following_count'], 'Number');
            }
            if (data.hasOwnProperty('listed_count')) {
                obj['listed_count'] = ApiClient.convertToType(data['listed_count'], 'Number');
            }
            if (data.hasOwnProperty('tweet_count')) {
                obj['tweet_count'] = ApiClient.convertToType(data['tweet_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserPublicMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPublicMetrics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserPublicMetrics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

UserPublicMetrics.RequiredProperties = ["followers_count", "following_count", "listed_count", "tweet_count"];

/**
 * Number of Users who are following this User.
 * @member {Number} followers_count
 */
UserPublicMetrics.prototype['followers_count'] = undefined;

/**
 * Number of Users this User is following.
 * @member {Number} following_count
 */
UserPublicMetrics.prototype['following_count'] = undefined;

/**
 * The number of lists that include this User.
 * @member {Number} listed_count
 */
UserPublicMetrics.prototype['listed_count'] = undefined;

/**
 * The number of Tweets (including Retweets) posted by this User.
 * @member {Number} tweet_count
 */
UserPublicMetrics.prototype['tweet_count'] = undefined;






export default UserPublicMetrics;

