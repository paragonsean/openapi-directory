/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Get2SpacesByCreatorIdsResponse from '../model/Get2SpacesByCreatorIdsResponse';
import Get2SpacesIdBuyersResponse from '../model/Get2SpacesIdBuyersResponse';
import Get2SpacesIdResponse from '../model/Get2SpacesIdResponse';
import Get2SpacesIdTweetsResponse from '../model/Get2SpacesIdTweetsResponse';
import Get2SpacesResponse from '../model/Get2SpacesResponse';
import Get2SpacesSearchResponse from '../model/Get2SpacesSearchResponse';
import Problem from '../model/Problem';

/**
* Spaces service.
* @module api/SpacesApi
* @version 2.62
*/
export default class SpacesApi {

    /**
    * Constructs a new SpacesApi. 
    * @alias module:api/SpacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findSpaceById operation.
     * @callback module:api/SpacesApi~findSpaceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Space lookup by Space ID
     * Returns a variety of information about the Space specified by the requested ID
     * @param {String} id The ID of the Space to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [spaceFields] A comma separated list of Space fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [topicFields] A comma separated list of Topic fields to display.
     * @param {module:api/SpacesApi~findSpaceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesIdResponse}
     */
    findSpaceById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findSpaceById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'space.fields': this.apiClient.buildCollectionParam(opts['spaceFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'topic.fields': this.apiClient.buildCollectionParam(opts['topicFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesIdResponse;
      return this.apiClient.callApi(
        '/2/spaces/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSpacesByCreatorIds operation.
     * @callback module:api/SpacesApi~findSpacesByCreatorIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesByCreatorIdsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Space lookup by their creators
     * Returns a variety of information about the Spaces created by the provided User IDs
     * @param {Array.<String>} userIds The IDs of Users to search through.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [spaceFields] A comma separated list of Space fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [topicFields] A comma separated list of Topic fields to display.
     * @param {module:api/SpacesApi~findSpacesByCreatorIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesByCreatorIdsResponse}
     */
    findSpacesByCreatorIds(userIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling findSpacesByCreatorIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_ids': this.apiClient.buildCollectionParam(userIds, 'multi'),
        'space.fields': this.apiClient.buildCollectionParam(opts['spaceFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'topic.fields': this.apiClient.buildCollectionParam(opts['topicFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesByCreatorIdsResponse;
      return this.apiClient.callApi(
        '/2/spaces/by/creator_ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSpacesByIds operation.
     * @callback module:api/SpacesApi~findSpacesByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Space lookup up Space IDs
     * Returns a variety of information about the Spaces specified by the requested IDs
     * @param {Array.<String>} ids The list of Space IDs to return.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [spaceFields] A comma separated list of Space fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [topicFields] A comma separated list of Topic fields to display.
     * @param {module:api/SpacesApi~findSpacesByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesResponse}
     */
    findSpacesByIds(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling findSpacesByIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi'),
        'space.fields': this.apiClient.buildCollectionParam(opts['spaceFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'topic.fields': this.apiClient.buildCollectionParam(opts['topicFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesResponse;
      return this.apiClient.callApi(
        '/2/spaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSpaces operation.
     * @callback module:api/SpacesApi~searchSpacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Spaces
     * Returns Spaces that match the provided query.
     * @param {String} query The search query.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'all')] The state of Spaces to search for.
     * @param {Number} [maxResults = 100)] The number of results to return.
     * @param {Array.<module:model/String>} [spaceFields] A comma separated list of Space fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [topicFields] A comma separated list of Topic fields to display.
     * @param {module:api/SpacesApi~searchSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesSearchResponse}
     */
    searchSpaces(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchSpaces");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'state': opts['state'],
        'max_results': opts['maxResults'],
        'space.fields': this.apiClient.buildCollectionParam(opts['spaceFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'topic.fields': this.apiClient.buildCollectionParam(opts['topicFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesSearchResponse;
      return this.apiClient.callApi(
        '/2/spaces/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spaceBuyers operation.
     * @callback module:api/SpacesApi~spaceBuyersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesIdBuyersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     * Retrieves the list of Users who purchased a ticket to the given space
     * @param {String} id The ID of the Space to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/SpacesApi~spaceBuyersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesIdBuyersResponse}
     */
    spaceBuyers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spaceBuyers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagination_token': opts['paginationToken'],
        'max_results': opts['maxResults'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesIdBuyersResponse;
      return this.apiClient.callApi(
        '/2/spaces/{id}/buyers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spaceTweets operation.
     * @callback module:api/SpacesApi~spaceTweetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesIdTweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Tweets from a Space.
     * Retrieves Tweets shared in the specified Space.
     * @param {String} id The ID of the Space to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/SpacesApi~spaceTweetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesIdTweetsResponse}
     */
    spaceTweets(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spaceTweets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesIdTweetsResponse;
      return this.apiClient.callApi(
        '/2/spaces/{id}/tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
