/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlockUserMutationResponse from '../model/BlockUserMutationResponse';
import BlockUserRequest from '../model/BlockUserRequest';
import Error from '../model/Error';
import Get2ListsIdFollowersResponse from '../model/Get2ListsIdFollowersResponse';
import Get2ListsIdMembersResponse from '../model/Get2ListsIdMembersResponse';
import Get2TweetsIdLikingUsersResponse from '../model/Get2TweetsIdLikingUsersResponse';
import Get2TweetsIdRetweetedByResponse from '../model/Get2TweetsIdRetweetedByResponse';
import Get2UsersByResponse from '../model/Get2UsersByResponse';
import Get2UsersByUsernameUsernameResponse from '../model/Get2UsersByUsernameUsernameResponse';
import Get2UsersIdBlockingResponse from '../model/Get2UsersIdBlockingResponse';
import Get2UsersIdFollowersResponse from '../model/Get2UsersIdFollowersResponse';
import Get2UsersIdFollowingResponse from '../model/Get2UsersIdFollowingResponse';
import Get2UsersIdMutingResponse from '../model/Get2UsersIdMutingResponse';
import Get2UsersIdResponse from '../model/Get2UsersIdResponse';
import Get2UsersMeResponse from '../model/Get2UsersMeResponse';
import Get2UsersResponse from '../model/Get2UsersResponse';
import MuteUserMutationResponse from '../model/MuteUserMutationResponse';
import MuteUserRequest from '../model/MuteUserRequest';
import Problem from '../model/Problem';
import UsersFollowingCreateRequest from '../model/UsersFollowingCreateRequest';
import UsersFollowingCreateResponse from '../model/UsersFollowingCreateResponse';
import UsersFollowingDeleteResponse from '../model/UsersFollowingDeleteResponse';

/**
* Users service.
* @module api/UsersApi
* @version 2.62
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findMyUser operation.
     * @callback module:api/UsersApi~findMyUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersMeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User lookup me
     * This endpoint returns information about the requesting User.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~findMyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersMeResponse}
     */
    findMyUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersMeResponse;
      return this.apiClient.callApi(
        '/2/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserById operation.
     * @callback module:api/UsersApi~findUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User lookup by ID
     * This endpoint returns information about a User. Specify User by ID.
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~findUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdResponse}
     */
    findUserById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdResponse;
      return this.apiClient.callApi(
        '/2/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUserByUsername operation.
     * @callback module:api/UsersApi~findUserByUsernameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersByUsernameUsernameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User lookup by username
     * This endpoint returns information about a User. Specify User by username.
     * @param {String} username A username.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~findUserByUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersByUsernameUsernameResponse}
     */
    findUserByUsername(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling findUserByUsername");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersByUsernameUsernameResponse;
      return this.apiClient.callApi(
        '/2/users/by/username/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsersById operation.
     * @callback module:api/UsersApi~findUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User lookup by IDs
     * This endpoint returns information about Users. Specify Users by their ID.
     * @param {Array.<String>} ids A list of User IDs, comma-separated. You can specify up to 100 IDs.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~findUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersResponse}
     */
    findUsersById(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling findUsersById");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersResponse;
      return this.apiClient.callApi(
        '/2/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findUsersByUsername operation.
     * @callback module:api/UsersApi~findUsersByUsernameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersByResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User lookup by usernames
     * This endpoint returns information about Users. Specify Users by their username.
     * @param {Array.<String>} usernames A list of usernames, comma-separated.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~findUsersByUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersByResponse}
     */
    findUsersByUsername(usernames, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usernames' is set
      if (usernames === undefined || usernames === null) {
        throw new Error("Missing the required parameter 'usernames' when calling findUsersByUsername");
      }

      let pathParams = {
      };
      let queryParams = {
        'usernames': this.apiClient.buildCollectionParam(usernames, 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersByResponse;
      return this.apiClient.callApi(
        '/2/users/by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGetFollowers operation.
     * @callback module:api/UsersApi~listGetFollowersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2ListsIdFollowersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns User objects that follow a List by the provided List ID
     * Returns a list of Users that follow a List by the provided List ID
     * @param {String} id The ID of the List.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~listGetFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2ListsIdFollowersResponse}
     */
    listGetFollowers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listGetFollowers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2ListsIdFollowersResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGetMembers operation.
     * @callback module:api/UsersApi~listGetMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2ListsIdMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns User objects that are members of a List by the provided List ID.
     * Returns a list of Users that are members of a List by the provided List ID.
     * @param {String} id The ID of the List.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~listGetMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2ListsIdMembersResponse}
     */
    listGetMembers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listGetMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2ListsIdMembersResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetsIdLikingUsers operation.
     * @callback module:api/UsersApi~tweetsIdLikingUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsIdLikingUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns User objects that have liked the provided Tweet ID
     * Returns a list of Users that have liked the provided Tweet ID
     * @param {String} id A single Tweet ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~tweetsIdLikingUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsIdLikingUsersResponse}
     */
    tweetsIdLikingUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tweetsIdLikingUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsIdLikingUsersResponse;
      return this.apiClient.callApi(
        '/2/tweets/{id}/liking_users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetsIdRetweetingUsers operation.
     * @callback module:api/UsersApi~tweetsIdRetweetingUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsIdRetweetedByResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns User objects that have retweeted the provided Tweet ID
     * Returns a list of Users that have retweeted the provided Tweet ID
     * @param {String} id A single Tweet ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~tweetsIdRetweetingUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsIdRetweetedByResponse}
     */
    tweetsIdRetweetingUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tweetsIdRetweetingUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsIdRetweetedByResponse;
      return this.apiClient.callApi(
        '/2/tweets/{id}/retweeted_by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdBlock operation.
     * @callback module:api/UsersApi~usersIdBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockUserMutationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block User by User ID
     * Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
     * @param {String} id The ID of the authenticated source User that is requesting to block the target User.
     * @param {module:model/BlockUserRequest} blockUserRequest 
     * @param {module:api/UsersApi~usersIdBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockUserMutationResponse}
     */
    usersIdBlock(id, blockUserRequest, callback) {
      let postBody = blockUserRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdBlock");
      }
      // verify the required parameter 'blockUserRequest' is set
      if (blockUserRequest === undefined || blockUserRequest === null) {
        throw new Error("Missing the required parameter 'blockUserRequest' when calling usersIdBlock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = BlockUserMutationResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/blocking', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdBlocking operation.
     * @callback module:api/UsersApi~usersIdBlockingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdBlockingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns User objects that are blocked by provided User ID
     * Returns a list of Users that are blocked by the provided User ID
     * @param {String} id The ID of the authenticated source User for whom to return results.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~usersIdBlockingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdBlockingResponse}
     */
    usersIdBlocking(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdBlocking");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdBlockingResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/blocking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdFollow operation.
     * @callback module:api/UsersApi~usersIdFollowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersFollowingCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow User
     * Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
     * @param {String} id The ID of the authenticated source User that is requesting to follow the target User.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersFollowingCreateRequest} [usersFollowingCreateRequest] 
     * @param {module:api/UsersApi~usersIdFollowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersFollowingCreateResponse}
     */
    usersIdFollow(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersFollowingCreateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdFollow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UsersFollowingCreateResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/following', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdFollowers operation.
     * @callback module:api/UsersApi~usersIdFollowersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdFollowersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followers by User ID
     * Returns a list of Users who are followers of the specified User ID.
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~usersIdFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdFollowersResponse}
     */
    usersIdFollowers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdFollowers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdFollowersResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdFollowing operation.
     * @callback module:api/UsersApi~usersIdFollowingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdFollowingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Following by User ID
     * Returns a list of Users that are being followed by the provided User ID
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~usersIdFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdFollowingResponse}
     */
    usersIdFollowing(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdFollowing");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdFollowingResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdMute operation.
     * @callback module:api/UsersApi~usersIdMuteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MuteUserMutationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute User by User ID.
     * Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
     * @param {String} id The ID of the authenticated source User that is requesting to mute the target User.
     * @param {Object} opts Optional parameters
     * @param {module:model/MuteUserRequest} [muteUserRequest] 
     * @param {module:api/UsersApi~usersIdMuteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MuteUserMutationResponse}
     */
    usersIdMute(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['muteUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdMute");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = MuteUserMutationResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/muting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdMuting operation.
     * @callback module:api/UsersApi~usersIdMutingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdMutingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns User objects that are muted by the provided User ID
     * Returns a list of Users that are muted by the provided User ID
     * @param {String} id The ID of the authenticated source User for whom to return results.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/UsersApi~usersIdMutingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdMutingResponse}
     */
    usersIdMuting(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdMuting");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdMutingResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/muting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdUnblock operation.
     * @callback module:api/UsersApi~usersIdUnblockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlockUserMutationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock User by User ID
     * Causes the source User to unblock the target User. The source User must match the User context authorizing the request
     * @param {String} sourceUserId The ID of the authenticated source User that is requesting to unblock the target User.
     * @param {String} targetUserId The ID of the User that the source User is requesting to unblock.
     * @param {module:api/UsersApi~usersIdUnblockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlockUserMutationResponse}
     */
    usersIdUnblock(sourceUserId, targetUserId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceUserId' is set
      if (sourceUserId === undefined || sourceUserId === null) {
        throw new Error("Missing the required parameter 'sourceUserId' when calling usersIdUnblock");
      }
      // verify the required parameter 'targetUserId' is set
      if (targetUserId === undefined || targetUserId === null) {
        throw new Error("Missing the required parameter 'targetUserId' when calling usersIdUnblock");
      }

      let pathParams = {
        'source_user_id': sourceUserId,
        'target_user_id': targetUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = BlockUserMutationResponse;
      return this.apiClient.callApi(
        '/2/users/{source_user_id}/blocking/{target_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdUnfollow operation.
     * @callback module:api/UsersApi~usersIdUnfollowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersFollowingDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow User
     * Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
     * @param {String} sourceUserId The ID of the authenticated source User that is requesting to unfollow the target User.
     * @param {String} targetUserId The ID of the User that the source User is requesting to unfollow.
     * @param {module:api/UsersApi~usersIdUnfollowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersFollowingDeleteResponse}
     */
    usersIdUnfollow(sourceUserId, targetUserId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceUserId' is set
      if (sourceUserId === undefined || sourceUserId === null) {
        throw new Error("Missing the required parameter 'sourceUserId' when calling usersIdUnfollow");
      }
      // verify the required parameter 'targetUserId' is set
      if (targetUserId === undefined || targetUserId === null) {
        throw new Error("Missing the required parameter 'targetUserId' when calling usersIdUnfollow");
      }

      let pathParams = {
        'source_user_id': sourceUserId,
        'target_user_id': targetUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UsersFollowingDeleteResponse;
      return this.apiClient.callApi(
        '/2/users/{source_user_id}/following/{target_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdUnmute operation.
     * @callback module:api/UsersApi~usersIdUnmuteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MuteUserMutationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute User by User ID
     * Causes the source User to unmute the target User. The source User must match the User context authorizing the request
     * @param {String} sourceUserId The ID of the authenticated source User that is requesting to unmute the target User.
     * @param {String} targetUserId The ID of the User that the source User is requesting to unmute.
     * @param {module:api/UsersApi~usersIdUnmuteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MuteUserMutationResponse}
     */
    usersIdUnmute(sourceUserId, targetUserId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceUserId' is set
      if (sourceUserId === undefined || sourceUserId === null) {
        throw new Error("Missing the required parameter 'sourceUserId' when calling usersIdUnmute");
      }
      // verify the required parameter 'targetUserId' is set
      if (targetUserId === undefined || targetUserId === null) {
        throw new Error("Missing the required parameter 'targetUserId' when calling usersIdUnmute");
      }

      let pathParams = {
        'source_user_id': sourceUserId,
        'target_user_id': targetUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = MuteUserMutationResponse;
      return this.apiClient.callApi(
        '/2/users/{source_user_id}/muting/{target_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
