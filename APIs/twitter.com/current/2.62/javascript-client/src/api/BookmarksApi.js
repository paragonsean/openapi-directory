/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookmarkAddRequest from '../model/BookmarkAddRequest';
import BookmarkMutationResponse from '../model/BookmarkMutationResponse';
import Error from '../model/Error';
import Get2UsersIdBookmarksResponse from '../model/Get2UsersIdBookmarksResponse';
import Problem from '../model/Problem';

/**
* Bookmarks service.
* @module api/BookmarksApi
* @version 2.62
*/
export default class BookmarksApi {

    /**
    * Constructs a new BookmarksApi. 
    * @alias module:api/BookmarksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUsersIdBookmarks operation.
     * @callback module:api/BookmarksApi~getUsersIdBookmarksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdBookmarksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmarks by User
     * Returns Tweet objects that have been bookmarked by the requesting User
     * @param {String} id The ID of the authenticated source User for whom to return results.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/BookmarksApi~getUsersIdBookmarksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdBookmarksResponse}
     */
    getUsersIdBookmarks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUsersIdBookmarks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdBookmarksResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/bookmarks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUsersIdBookmarks operation.
     * @callback module:api/BookmarksApi~postUsersIdBookmarksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookmarkMutationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Tweet to Bookmarks
     * Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks
     * @param {String} id The ID of the authenticated source User for whom to add bookmarks.
     * @param {module:model/BookmarkAddRequest} bookmarkAddRequest 
     * @param {module:api/BookmarksApi~postUsersIdBookmarksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookmarkMutationResponse}
     */
    postUsersIdBookmarks(id, bookmarkAddRequest, callback) {
      let postBody = bookmarkAddRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postUsersIdBookmarks");
      }
      // verify the required parameter 'bookmarkAddRequest' is set
      if (bookmarkAddRequest === undefined || bookmarkAddRequest === null) {
        throw new Error("Missing the required parameter 'bookmarkAddRequest' when calling postUsersIdBookmarks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = BookmarkMutationResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/bookmarks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdBookmarksDelete operation.
     * @callback module:api/BookmarksApi~usersIdBookmarksDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookmarkMutationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a bookmarked Tweet
     * Removes a Tweet from the requesting User's bookmarked Tweets.
     * @param {String} id The ID of the authenticated source User whose bookmark is to be removed.
     * @param {String} tweetId The ID of the Tweet that the source User is removing from bookmarks.
     * @param {module:api/BookmarksApi~usersIdBookmarksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookmarkMutationResponse}
     */
    usersIdBookmarksDelete(id, tweetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdBookmarksDelete");
      }
      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling usersIdBookmarksDelete");
      }

      let pathParams = {
        'id': id,
        'tweet_id': tweetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = BookmarkMutationResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/bookmarks/{tweet_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
