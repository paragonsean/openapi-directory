/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDmConversationRequest from '../model/CreateDmConversationRequest';
import CreateDmEventResponse from '../model/CreateDmEventResponse';
import CreateMessageRequest from '../model/CreateMessageRequest';
import Error from '../model/Error';
import Get2DmConversationsIdDmEventsResponse from '../model/Get2DmConversationsIdDmEventsResponse';
import Get2DmConversationsWithParticipantIdDmEventsResponse from '../model/Get2DmConversationsWithParticipantIdDmEventsResponse';
import Get2DmEventsResponse from '../model/Get2DmEventsResponse';
import Problem from '../model/Problem';

/**
* DirectMessages service.
* @module api/DirectMessagesApi
* @version 2.62
*/
export default class DirectMessagesApi {

    /**
    * Constructs a new DirectMessagesApi. 
    * @alias module:api/DirectMessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dmConversationByIdEventIdCreate operation.
     * @callback module:api/DirectMessagesApi~dmConversationByIdEventIdCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDmEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new message to a DM Conversation
     * Creates a new message for a DM Conversation specified by DM Conversation ID
     * @param {String} dmConversationId The DM Conversation ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMessageRequest} [createMessageRequest] 
     * @param {module:api/DirectMessagesApi~dmConversationByIdEventIdCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDmEventResponse}
     */
    dmConversationByIdEventIdCreate(dmConversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createMessageRequest'];
      // verify the required parameter 'dmConversationId' is set
      if (dmConversationId === undefined || dmConversationId === null) {
        throw new Error("Missing the required parameter 'dmConversationId' when calling dmConversationByIdEventIdCreate");
      }

      let pathParams = {
        'dm_conversation_id': dmConversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CreateDmEventResponse;
      return this.apiClient.callApi(
        '/2/dm_conversations/{dm_conversation_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dmConversationIdCreate operation.
     * @callback module:api/DirectMessagesApi~dmConversationIdCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDmEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new DM Conversation
     * Creates a new DM Conversation.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDmConversationRequest} [createDmConversationRequest] 
     * @param {module:api/DirectMessagesApi~dmConversationIdCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDmEventResponse}
     */
    dmConversationIdCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['createDmConversationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CreateDmEventResponse;
      return this.apiClient.callApi(
        '/2/dm_conversations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dmConversationWithUserEventIdCreate operation.
     * @callback module:api/DirectMessagesApi~dmConversationWithUserEventIdCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDmEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a new message to a user
     * Creates a new message for a DM Conversation with a participant user by ID
     * @param {String} participantId The ID of the recipient user that will receive the DM.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMessageRequest} [createMessageRequest] 
     * @param {module:api/DirectMessagesApi~dmConversationWithUserEventIdCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDmEventResponse}
     */
    dmConversationWithUserEventIdCreate(participantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createMessageRequest'];
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling dmConversationWithUserEventIdCreate");
      }

      let pathParams = {
        'participant_id': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CreateDmEventResponse;
      return this.apiClient.callApi(
        '/2/dm_conversations/with/{participant_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDmConversationsIdDmEvents operation.
     * @callback module:api/DirectMessagesApi~getDmConversationsIdDmEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2DmConversationsIdDmEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param {String} id The DM Conversation ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [eventTypes] The set of event_types to include in the results.
     * @param {Array.<module:model/String>} [dmEventFields] A comma separated list of DmEvent fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/DirectMessagesApi~getDmConversationsIdDmEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2DmConversationsIdDmEventsResponse}
     */
    getDmConversationsIdDmEvents(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDmConversationsIdDmEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'csv'),
        'dm_event.fields': this.apiClient.buildCollectionParam(opts['dmEventFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2DmConversationsIdDmEventsResponse;
      return this.apiClient.callApi(
        '/2/dm_conversations/{id}/dm_events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDmConversationsWithParticipantIdDmEvents operation.
     * @callback module:api/DirectMessagesApi~getDmConversationsWithParticipantIdDmEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2DmConversationsWithParticipantIdDmEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DM Events for a DM Conversation
     * Returns DM Events for a DM Conversation
     * @param {String} participantId The ID of the participant user for the One to One DM conversation.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [eventTypes] The set of event_types to include in the results.
     * @param {Array.<module:model/String>} [dmEventFields] A comma separated list of DmEvent fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/DirectMessagesApi~getDmConversationsWithParticipantIdDmEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2DmConversationsWithParticipantIdDmEventsResponse}
     */
    getDmConversationsWithParticipantIdDmEvents(participantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling getDmConversationsWithParticipantIdDmEvents");
      }

      let pathParams = {
        'participant_id': participantId
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'csv'),
        'dm_event.fields': this.apiClient.buildCollectionParam(opts['dmEventFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2DmConversationsWithParticipantIdDmEventsResponse;
      return this.apiClient.callApi(
        '/2/dm_conversations/with/{participant_id}/dm_events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDmEvents operation.
     * @callback module:api/DirectMessagesApi~getDmEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2DmEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recent DM Events
     * Returns recent DM Events across DM conversations
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [eventTypes] The set of event_types to include in the results.
     * @param {Array.<module:model/String>} [dmEventFields] A comma separated list of DmEvent fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/DirectMessagesApi~getDmEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2DmEventsResponse}
     */
    getDmEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'csv'),
        'dm_event.fields': this.apiClient.buildCollectionParam(opts['dmEventFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2DmEventsResponse;
      return this.apiClient.callApi(
        '/2/dm_events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
