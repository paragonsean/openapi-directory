/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateComplianceJobRequest from '../model/CreateComplianceJobRequest';
import CreateComplianceJobResponse from '../model/CreateComplianceJobResponse';
import Error from '../model/Error';
import Get2ComplianceJobsIdResponse from '../model/Get2ComplianceJobsIdResponse';
import Get2ComplianceJobsResponse from '../model/Get2ComplianceJobsResponse';
import Problem from '../model/Problem';
import TweetComplianceStreamResponse from '../model/TweetComplianceStreamResponse';
import TweetLabelStreamResponse from '../model/TweetLabelStreamResponse';
import UserComplianceStreamResponse from '../model/UserComplianceStreamResponse';

/**
* Compliance service.
* @module api/ComplianceApi
* @version 2.62
*/
export default class ComplianceApi {

    /**
    * Constructs a new ComplianceApi. 
    * @alias module:api/ComplianceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBatchComplianceJob operation.
     * @callback module:api/ComplianceApi~createBatchComplianceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateComplianceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create compliance job
     * Creates a compliance for the given job type
     * @param {module:model/CreateComplianceJobRequest} createComplianceJobRequest 
     * @param {module:api/ComplianceApi~createBatchComplianceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateComplianceJobResponse}
     */
    createBatchComplianceJob(createComplianceJobRequest, callback) {
      let postBody = createComplianceJobRequest;
      // verify the required parameter 'createComplianceJobRequest' is set
      if (createComplianceJobRequest === undefined || createComplianceJobRequest === null) {
        throw new Error("Missing the required parameter 'createComplianceJobRequest' when calling createBatchComplianceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CreateComplianceJobResponse;
      return this.apiClient.callApi(
        '/2/compliance/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchComplianceJob operation.
     * @callback module:api/ComplianceApi~getBatchComplianceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2ComplianceJobsIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Compliance Job
     * Returns a single Compliance Job by ID
     * @param {String} id The ID of the Compliance Job to retrieve.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [complianceJobFields] A comma separated list of ComplianceJob fields to display.
     * @param {module:api/ComplianceApi~getBatchComplianceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2ComplianceJobsIdResponse}
     */
    getBatchComplianceJob(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBatchComplianceJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'compliance_job.fields': this.apiClient.buildCollectionParam(opts['complianceJobFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2ComplianceJobsIdResponse;
      return this.apiClient.callApi(
        '/2/compliance/jobs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTweetsComplianceStream operation.
     * @callback module:api/ComplianceApi~getTweetsComplianceStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TweetComplianceStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tweets Compliance stream
     * Streams 100% of compliance data for Tweets
     * @param {Number} partition The partition number.
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.
     * @param {module:api/ComplianceApi~getTweetsComplianceStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TweetComplianceStreamResponse}
     */
    getTweetsComplianceStream(partition, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partition' is set
      if (partition === undefined || partition === null) {
        throw new Error("Missing the required parameter 'partition' when calling getTweetsComplianceStream");
      }

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'partition': partition,
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TweetComplianceStreamResponse;
      return this.apiClient.callApi(
        '/2/tweets/compliance/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTweetsLabelStream operation.
     * @callback module:api/ComplianceApi~getTweetsLabelStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TweetLabelStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tweets Label stream
     * Streams 100% of labeling events applied to Tweets
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided.
     * @param {module:api/ComplianceApi~getTweetsLabelStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TweetLabelStreamResponse}
     */
    getTweetsLabelStream(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TweetLabelStreamResponse;
      return this.apiClient.callApi(
        '/2/tweets/label/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersComplianceStream operation.
     * @callback module:api/ComplianceApi~getUsersComplianceStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserComplianceStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users Compliance stream
     * Streams 100% of compliance data for Users
     * @param {Number} partition The partition number.
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.
     * @param {module:api/ComplianceApi~getUsersComplianceStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserComplianceStreamResponse}
     */
    getUsersComplianceStream(partition, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partition' is set
      if (partition === undefined || partition === null) {
        throw new Error("Missing the required parameter 'partition' when calling getUsersComplianceStream");
      }

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'partition': partition,
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UserComplianceStreamResponse;
      return this.apiClient.callApi(
        '/2/users/compliance/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchComplianceJobs operation.
     * @callback module:api/ComplianceApi~listBatchComplianceJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2ComplianceJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Compliance Jobs
     * Returns recent Compliance Jobs for a given job type and optional job status
     * @param {module:model/String} type Type of Compliance Job to list.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Status of Compliance Job to list.
     * @param {Array.<module:model/String>} [complianceJobFields] A comma separated list of ComplianceJob fields to display.
     * @param {module:api/ComplianceApi~listBatchComplianceJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2ComplianceJobsResponse}
     */
    listBatchComplianceJobs(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listBatchComplianceJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'status': opts['status'],
        'compliance_job.fields': this.apiClient.buildCollectionParam(opts['complianceJobFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2ComplianceJobsResponse;
      return this.apiClient.callApi(
        '/2/compliance/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
