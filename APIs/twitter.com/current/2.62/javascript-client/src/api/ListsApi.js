/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Get2ListsIdResponse from '../model/Get2ListsIdResponse';
import Get2UsersIdFollowedListsResponse from '../model/Get2UsersIdFollowedListsResponse';
import Get2UsersIdListMembershipsResponse from '../model/Get2UsersIdListMembershipsResponse';
import Get2UsersIdOwnedListsResponse from '../model/Get2UsersIdOwnedListsResponse';
import Get2UsersIdPinnedListsResponse from '../model/Get2UsersIdPinnedListsResponse';
import ListAddUserRequest from '../model/ListAddUserRequest';
import ListCreateRequest from '../model/ListCreateRequest';
import ListCreateResponse from '../model/ListCreateResponse';
import ListDeleteResponse from '../model/ListDeleteResponse';
import ListFollowedRequest from '../model/ListFollowedRequest';
import ListFollowedResponse from '../model/ListFollowedResponse';
import ListMutateResponse from '../model/ListMutateResponse';
import ListPinnedRequest from '../model/ListPinnedRequest';
import ListPinnedResponse from '../model/ListPinnedResponse';
import ListUnpinResponse from '../model/ListUnpinResponse';
import ListUpdateRequest from '../model/ListUpdateRequest';
import ListUpdateResponse from '../model/ListUpdateResponse';
import Problem from '../model/Problem';

/**
* Lists service.
* @module api/ListsApi
* @version 2.62
*/
export default class ListsApi {

    /**
    * Constructs a new ListsApi. 
    * @alias module:api/ListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUserListMemberships operation.
     * @callback module:api/ListsApi~getUserListMembershipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdListMembershipsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User's List Memberships
     * Get a User's List Memberships.
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [listFields] A comma separated list of List fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {module:api/ListsApi~getUserListMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdListMembershipsResponse}
     */
    getUserListMemberships(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserListMemberships");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'list.fields': this.apiClient.buildCollectionParam(opts['listFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdListMembershipsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/list_memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAddMember operation.
     * @callback module:api/ListsApi~listAddMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMutateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a List member
     * Causes a User to become a member of a List.
     * @param {String} id The ID of the List for which to add a member.
     * @param {Object} opts Optional parameters
     * @param {module:model/ListAddUserRequest} [listAddUserRequest] 
     * @param {module:api/ListsApi~listAddMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMutateResponse}
     */
    listAddMember(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['listAddUserRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listAddMember");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListMutateResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdCreate operation.
     * @callback module:api/ListsApi~listIdCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create List
     * Creates a new List.
     * @param {Object} opts Optional parameters
     * @param {module:model/ListCreateRequest} [listCreateRequest] 
     * @param {module:api/ListsApi~listIdCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreateResponse}
     */
    listIdCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['listCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListCreateResponse;
      return this.apiClient.callApi(
        '/2/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdDelete operation.
     * @callback module:api/ListsApi~listIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete List
     * Delete a List that you own.
     * @param {String} id The ID of the List to delete.
     * @param {module:api/ListsApi~listIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeleteResponse}
     */
    listIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListDeleteResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdGet operation.
     * @callback module:api/ListsApi~listIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2ListsIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List lookup by List ID.
     * Returns a List.
     * @param {String} id The ID of the List.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [listFields] A comma separated list of List fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {module:api/ListsApi~listIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2ListsIdResponse}
     */
    listIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'list.fields': this.apiClient.buildCollectionParam(opts['listFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2ListsIdResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdUpdate operation.
     * @callback module:api/ListsApi~listIdUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update List.
     * Update a List that you own.
     * @param {String} id The ID of the List to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/ListUpdateRequest} [listUpdateRequest] 
     * @param {module:api/ListsApi~listIdUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUpdateResponse}
     */
    listIdUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['listUpdateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listIdUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListUpdateResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRemoveMember operation.
     * @callback module:api/ListsApi~listRemoveMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMutateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a List member
     * Causes a User to be removed from the members of a List.
     * @param {String} id The ID of the List to remove a member.
     * @param {String} userId The ID of User that will be removed from the List.
     * @param {module:api/ListsApi~listRemoveMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMutateResponse}
     */
    listRemoveMember(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listRemoveMember");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listRemoveMember");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListMutateResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}/members/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserFollow operation.
     * @callback module:api/ListsApi~listUserFollowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFollowedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a List
     * Causes a User to follow a List.
     * @param {String} id The ID of the authenticated source User that will follow the List.
     * @param {Object} opts Optional parameters
     * @param {module:model/ListFollowedRequest} [listFollowedRequest] 
     * @param {module:api/ListsApi~listUserFollowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFollowedResponse}
     */
    listUserFollow(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['listFollowedRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserFollow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListFollowedResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/followed_lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserOwnedLists operation.
     * @callback module:api/ListsApi~listUserOwnedListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdOwnedListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User's Owned Lists.
     * Get a User's Owned Lists.
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [listFields] A comma separated list of List fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {module:api/ListsApi~listUserOwnedListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdOwnedListsResponse}
     */
    listUserOwnedLists(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserOwnedLists");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'list.fields': this.apiClient.buildCollectionParam(opts['listFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdOwnedListsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/owned_lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserPin operation.
     * @callback module:api/ListsApi~listUserPinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPinnedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pin a List
     * Causes a User to pin a List.
     * @param {String} id The ID of the authenticated source User that will pin the List.
     * @param {module:model/ListPinnedRequest} listPinnedRequest 
     * @param {module:api/ListsApi~listUserPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPinnedResponse}
     */
    listUserPin(id, listPinnedRequest, callback) {
      let postBody = listPinnedRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserPin");
      }
      // verify the required parameter 'listPinnedRequest' is set
      if (listPinnedRequest === undefined || listPinnedRequest === null) {
        throw new Error("Missing the required parameter 'listPinnedRequest' when calling listUserPin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListPinnedResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/pinned_lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserPinnedLists operation.
     * @callback module:api/ListsApi~listUserPinnedListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdPinnedListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User's Pinned Lists
     * Get a User's Pinned Lists.
     * @param {String} id The ID of the authenticated source User for whom to return results.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [listFields] A comma separated list of List fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {module:api/ListsApi~listUserPinnedListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdPinnedListsResponse}
     */
    listUserPinnedLists(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserPinnedLists");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'list.fields': this.apiClient.buildCollectionParam(opts['listFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdPinnedListsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/pinned_lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserUnfollow operation.
     * @callback module:api/ListsApi~listUserUnfollowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFollowedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a List
     * Causes a User to unfollow a List.
     * @param {String} id The ID of the authenticated source User that will unfollow the List.
     * @param {String} listId The ID of the List to unfollow.
     * @param {module:api/ListsApi~listUserUnfollowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFollowedResponse}
     */
    listUserUnfollow(id, listId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserUnfollow");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listUserUnfollow");
      }

      let pathParams = {
        'id': id,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListFollowedResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/followed_lists/{list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserUnpin operation.
     * @callback module:api/ListsApi~listUserUnpinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUnpinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpin a List
     * Causes a User to remove a pinned List.
     * @param {String} id The ID of the authenticated source User for whom to return results.
     * @param {String} listId The ID of the List to unpin.
     * @param {module:api/ListsApi~listUserUnpinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUnpinResponse}
     */
    listUserUnpin(id, listId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserUnpin");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listUserUnpin");
      }

      let pathParams = {
        'id': id,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ListUnpinResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/pinned_lists/{list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userFollowedLists operation.
     * @callback module:api/ListsApi~userFollowedListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdFollowedListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User's Followed Lists
     * Returns a User's followed Lists.
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [listFields] A comma separated list of List fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {module:api/ListsApi~userFollowedListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdFollowedListsResponse}
     */
    userFollowedLists(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userFollowedLists");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'list.fields': this.apiClient.buildCollectionParam(opts['listFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdFollowedListsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/followed_lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
