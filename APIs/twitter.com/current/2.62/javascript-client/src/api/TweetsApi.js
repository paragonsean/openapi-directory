/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrDeleteRulesRequest from '../model/AddOrDeleteRulesRequest';
import AddOrDeleteRulesResponse from '../model/AddOrDeleteRulesResponse';
import Error from '../model/Error';
import FilteredStreamingTweetResponse from '../model/FilteredStreamingTweetResponse';
import Get2ListsIdTweetsResponse from '../model/Get2ListsIdTweetsResponse';
import Get2SpacesIdBuyersResponse from '../model/Get2SpacesIdBuyersResponse';
import Get2SpacesIdTweetsResponse from '../model/Get2SpacesIdTweetsResponse';
import Get2TweetsCountsAllResponse from '../model/Get2TweetsCountsAllResponse';
import Get2TweetsCountsRecentResponse from '../model/Get2TweetsCountsRecentResponse';
import Get2TweetsIdQuoteTweetsResponse from '../model/Get2TweetsIdQuoteTweetsResponse';
import Get2TweetsIdResponse from '../model/Get2TweetsIdResponse';
import Get2TweetsResponse from '../model/Get2TweetsResponse';
import Get2TweetsSample10StreamResponse from '../model/Get2TweetsSample10StreamResponse';
import Get2TweetsSearchAllResponse from '../model/Get2TweetsSearchAllResponse';
import Get2TweetsSearchRecentResponse from '../model/Get2TweetsSearchRecentResponse';
import Get2UsersIdLikedTweetsResponse from '../model/Get2UsersIdLikedTweetsResponse';
import Get2UsersIdMentionsResponse from '../model/Get2UsersIdMentionsResponse';
import Get2UsersIdTimelinesReverseChronologicalResponse from '../model/Get2UsersIdTimelinesReverseChronologicalResponse';
import Get2UsersIdTweetsResponse from '../model/Get2UsersIdTweetsResponse';
import Problem from '../model/Problem';
import RulesLookupResponse from '../model/RulesLookupResponse';
import StreamingTweetResponse from '../model/StreamingTweetResponse';
import TweetCreateRequest from '../model/TweetCreateRequest';
import TweetCreateResponse from '../model/TweetCreateResponse';
import TweetDeleteResponse from '../model/TweetDeleteResponse';
import TweetHideRequest from '../model/TweetHideRequest';
import TweetHideResponse from '../model/TweetHideResponse';
import UsersLikesCreateRequest from '../model/UsersLikesCreateRequest';
import UsersLikesCreateResponse from '../model/UsersLikesCreateResponse';
import UsersLikesDeleteResponse from '../model/UsersLikesDeleteResponse';
import UsersRetweetsCreateRequest from '../model/UsersRetweetsCreateRequest';
import UsersRetweetsCreateResponse from '../model/UsersRetweetsCreateResponse';
import UsersRetweetsDeleteResponse from '../model/UsersRetweetsDeleteResponse';

/**
* Tweets service.
* @module api/TweetsApi
* @version 2.62
*/
export default class TweetsApi {

    /**
    * Constructs a new TweetsApi. 
    * @alias module:api/TweetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrDeleteRules operation.
     * @callback module:api/TweetsApi~addOrDeleteRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddOrDeleteRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add/Delete rules
     * Add or delete rules from a User's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     * @param {module:model/AddOrDeleteRulesRequest} addOrDeleteRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [dryRun] Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.
     * @param {module:api/TweetsApi~addOrDeleteRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddOrDeleteRulesResponse}
     */
    addOrDeleteRules(addOrDeleteRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = addOrDeleteRulesRequest;
      // verify the required parameter 'addOrDeleteRulesRequest' is set
      if (addOrDeleteRulesRequest === undefined || addOrDeleteRulesRequest === null) {
        throw new Error("Missing the required parameter 'addOrDeleteRulesRequest' when calling addOrDeleteRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'dry_run': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = AddOrDeleteRulesResponse;
      return this.apiClient.callApi(
        '/2/tweets/search/stream/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTweet operation.
     * @callback module:api/TweetsApi~createTweetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TweetCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creation of a Tweet
     * Causes the User to create a Tweet under the authorized account.
     * @param {module:model/TweetCreateRequest} tweetCreateRequest 
     * @param {module:api/TweetsApi~createTweetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TweetCreateResponse}
     */
    createTweet(tweetCreateRequest, callback) {
      let postBody = tweetCreateRequest;
      // verify the required parameter 'tweetCreateRequest' is set
      if (tweetCreateRequest === undefined || tweetCreateRequest === null) {
        throw new Error("Missing the required parameter 'tweetCreateRequest' when calling createTweet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TweetCreateResponse;
      return this.apiClient.callApi(
        '/2/tweets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTweetById operation.
     * @callback module:api/TweetsApi~deleteTweetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TweetDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tweet delete by Tweet ID
     * Delete specified Tweet (in the path) by ID.
     * @param {String} id The ID of the Tweet to be deleted.
     * @param {module:api/TweetsApi~deleteTweetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TweetDeleteResponse}
     */
    deleteTweetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTweetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TweetDeleteResponse;
      return this.apiClient.callApi(
        '/2/tweets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTweetById operation.
     * @callback module:api/TweetsApi~findTweetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tweet lookup by Tweet ID
     * Returns a variety of information about the Tweet specified by the requested ID.
     * @param {String} id A single Tweet ID.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~findTweetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsIdResponse}
     */
    findTweetById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findTweetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsIdResponse;
      return this.apiClient.callApi(
        '/2/tweets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTweetsById operation.
     * @callback module:api/TweetsApi~findTweetsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tweet lookup by Tweet IDs
     * Returns a variety of information about the Tweet specified by the requested ID.
     * @param {Array.<String>} ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~findTweetsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsResponse}
     */
    findTweetsById(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling findTweetsById");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsResponse;
      return this.apiClient.callApi(
        '/2/tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTweetsThatQuoteATweet operation.
     * @callback module:api/TweetsApi~findTweetsThatQuoteATweetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsIdQuoteTweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Tweets that quote a Tweet.
     * Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
     * @param {String} id A single Tweet ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 10)] The maximum number of results to be returned.
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Array.<module:model/String>} [exclude] The set of entities to exclude (e.g. 'replies' or 'retweets').
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~findTweetsThatQuoteATweetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsIdQuoteTweetsResponse}
     */
    findTweetsThatQuoteATweet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findTweetsThatQuoteATweet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsIdQuoteTweetsResponse;
      return this.apiClient.callApi(
        '/2/tweets/{id}/quote_tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRules operation.
     * @callback module:api/TweetsApi~getRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RulesLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rules lookup
     * Returns rules from a User's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] A comma-separated list of Rule IDs.
     * @param {Number} [maxResults = 1000)] The maximum number of results.
     * @param {String} [paginationToken] This value is populated by passing the 'next_token' returned in a request to paginate through results.
     * @param {module:api/TweetsApi~getRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RulesLookupResponse}
     */
    getRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = RulesLookupResponse;
      return this.apiClient.callApi(
        '/2/tweets/search/stream/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTweetsFirehoseStream operation.
     * @callback module:api/TweetsApi~getTweetsFirehoseStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingTweetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Firehose stream
     * Streams 100% of public Tweets.
     * @param {Number} partition The partition number.
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~getTweetsFirehoseStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingTweetResponse}
     */
    getTweetsFirehoseStream(partition, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partition' is set
      if (partition === undefined || partition === null) {
        throw new Error("Missing the required parameter 'partition' when calling getTweetsFirehoseStream");
      }

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'partition': partition,
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = StreamingTweetResponse;
      return this.apiClient.callApi(
        '/2/tweets/firehose/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTweetsSample10Stream operation.
     * @callback module:api/TweetsApi~getTweetsSample10StreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsSample10StreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample 10% stream
     * Streams a deterministic 10% of public Tweets.
     * @param {Number} partition The partition number.
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~getTweetsSample10StreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsSample10StreamResponse}
     */
    getTweetsSample10Stream(partition, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partition' is set
      if (partition === undefined || partition === null) {
        throw new Error("Missing the required parameter 'partition' when calling getTweetsSample10Stream");
      }

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'partition': partition,
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsSample10StreamResponse;
      return this.apiClient.callApi(
        '/2/tweets/sample10/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hideReplyById operation.
     * @callback module:api/TweetsApi~hideReplyByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TweetHideResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hide replies
     * Hides or unhides a reply to an owned conversation.
     * @param {String} tweetId The ID of the reply that you want to hide or unhide.
     * @param {Object} opts Optional parameters
     * @param {module:model/TweetHideRequest} [tweetHideRequest] 
     * @param {module:api/TweetsApi~hideReplyByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TweetHideResponse}
     */
    hideReplyById(tweetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['tweetHideRequest'];
      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling hideReplyById");
      }

      let pathParams = {
        'tweet_id': tweetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = TweetHideResponse;
      return this.apiClient.callApi(
        '/2/tweets/{tweet_id}/hidden', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listsIdTweets operation.
     * @callback module:api/TweetsApi~listsIdTweetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2ListsIdTweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tweets timeline by List ID.
     * Returns a list of Tweets associated with the provided List ID.
     * @param {String} id The ID of the List.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~listsIdTweetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2ListsIdTweetsResponse}
     */
    listsIdTweets(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listsIdTweets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2ListsIdTweetsResponse;
      return this.apiClient.callApi(
        '/2/lists/{id}/tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sampleStream operation.
     * @callback module:api/TweetsApi~sampleStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingTweetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample stream
     * Streams a deterministic 1% of public Tweets.
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~sampleStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingTweetResponse}
     */
    sampleStream(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = StreamingTweetResponse;
      return this.apiClient.callApi(
        '/2/tweets/sample/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchStream operation.
     * @callback module:api/TweetsApi~searchStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilteredStreamingTweetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filtered stream
     * Streams Tweets matching the stream's active rule set.
     * @param {Object} opts Optional parameters
     * @param {Number} [backfillMinutes] The number of minutes of backfill requested.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~searchStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilteredStreamingTweetResponse}
     */
    searchStream(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'backfill_minutes': opts['backfillMinutes'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = FilteredStreamingTweetResponse;
      return this.apiClient.callApi(
        '/2/tweets/search/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spaceBuyers_0 operation.
     * @callback module:api/TweetsApi~spaceBuyers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesIdBuyersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of Users who purchased a ticket to the given space
     * Retrieves the list of Users who purchased a ticket to the given space
     * @param {String} id The ID of the Space to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [paginationToken] This parameter is used to get a specified 'page' of results.
     * @param {Number} [maxResults = 100)] The maximum number of results.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {module:api/TweetsApi~spaceBuyers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesIdBuyersResponse}
     */
    spaceBuyers_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spaceBuyers_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagination_token': opts['paginationToken'],
        'max_results': opts['maxResults'],
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesIdBuyersResponse;
      return this.apiClient.callApi(
        '/2/spaces/{id}/buyers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spaceTweets_0 operation.
     * @callback module:api/TweetsApi~spaceTweets_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2SpacesIdTweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Tweets from a Space.
     * Retrieves Tweets shared in the specified Space.
     * @param {String} id The ID of the Space to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults = 100)] The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~spaceTweets_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2SpacesIdTweetsResponse}
     */
    spaceTweets_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spaceTweets_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2SpacesIdTweetsResponse;
      return this.apiClient.callApi(
        '/2/spaces/{id}/tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetCountsFullArchiveSearch operation.
     * @callback module:api/TweetsApi~tweetCountsFullArchiveSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsCountsAllResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Full archive search counts
     * Returns Tweet Counts that match a search query.
     * @param {String} query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param {String} [sinceId] Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param {String} [untilId] Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param {String} [nextToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {module:model/String} [granularity = 'hour')] The granularity for the search counts results.
     * @param {Array.<module:model/String>} [searchCountFields] A comma separated list of SearchCount fields to display.
     * @param {module:api/TweetsApi~tweetCountsFullArchiveSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsCountsAllResponse}
     */
    tweetCountsFullArchiveSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tweetCountsFullArchiveSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'next_token': opts['nextToken'],
        'pagination_token': opts['paginationToken'],
        'granularity': opts['granularity'],
        'search_count.fields': this.apiClient.buildCollectionParam(opts['searchCountFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsCountsAllResponse;
      return this.apiClient.callApi(
        '/2/tweets/counts/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetCountsRecentSearch operation.
     * @callback module:api/TweetsApi~tweetCountsRecentSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsCountsRecentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recent search counts
     * Returns Tweet Counts from the last 7 days that match a search query.
     * @param {String} query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param {String} [sinceId] Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param {String} [untilId] Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param {String} [nextToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {module:model/String} [granularity = 'hour')] The granularity for the search counts results.
     * @param {Array.<module:model/String>} [searchCountFields] A comma separated list of SearchCount fields to display.
     * @param {module:api/TweetsApi~tweetCountsRecentSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsCountsRecentResponse}
     */
    tweetCountsRecentSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tweetCountsRecentSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'next_token': opts['nextToken'],
        'pagination_token': opts['paginationToken'],
        'granularity': opts['granularity'],
        'search_count.fields': this.apiClient.buildCollectionParam(opts['searchCountFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsCountsRecentResponse;
      return this.apiClient.callApi(
        '/2/tweets/counts/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetsFullarchiveSearch operation.
     * @callback module:api/TweetsApi~tweetsFullarchiveSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsSearchAllResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Full-archive search
     * Returns Tweets that match a search query.
     * @param {String} query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param {String} [sinceId] Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param {String} [untilId] Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param {Number} [maxResults = 10)] The maximum number of search results to be returned by a request.
     * @param {String} [nextToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {module:model/String} [sortOrder] This order in which to return results.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~tweetsFullarchiveSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsSearchAllResponse}
     */
    tweetsFullarchiveSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tweetsFullarchiveSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'max_results': opts['maxResults'],
        'next_token': opts['nextToken'],
        'pagination_token': opts['paginationToken'],
        'sort_order': opts['sortOrder'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsSearchAllResponse;
      return this.apiClient.callApi(
        '/2/tweets/search/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetsRecentSearch operation.
     * @callback module:api/TweetsApi~tweetsRecentSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2TweetsSearchRecentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recent search
     * Returns Tweets from the last 7 days that match a search query.
     * @param {String} query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
     * @param {String} [sinceId] Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
     * @param {String} [untilId] Returns results with a Tweet ID less than (that is, older than) the specified ID.
     * @param {Number} [maxResults = 10)] The maximum number of search results to be returned by a request.
     * @param {String} [nextToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
     * @param {module:model/String} [sortOrder] This order in which to return results.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~tweetsRecentSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2TweetsSearchRecentResponse}
     */
    tweetsRecentSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tweetsRecentSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'max_results': opts['maxResults'],
        'next_token': opts['nextToken'],
        'pagination_token': opts['paginationToken'],
        'sort_order': opts['sortOrder'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2TweetsSearchRecentResponse;
      return this.apiClient.callApi(
        '/2/tweets/search/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdLike operation.
     * @callback module:api/TweetsApi~usersIdLikeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersLikesCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Causes the User (in the path) to like the specified Tweet
     * Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
     * @param {String} id The ID of the authenticated source User that is requesting to like the Tweet.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersLikesCreateRequest} [usersLikesCreateRequest] 
     * @param {module:api/TweetsApi~usersIdLikeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersLikesCreateResponse}
     */
    usersIdLike(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersLikesCreateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdLike");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UsersLikesCreateResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/likes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdLikedTweets operation.
     * @callback module:api/TweetsApi~usersIdLikedTweetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdLikedTweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Tweet objects liked by the provided User ID
     * Returns a list of Tweets liked by the provided User ID
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~usersIdLikedTweetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdLikedTweetsResponse}
     */
    usersIdLikedTweets(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdLikedTweets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdLikedTweetsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/liked_tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdMentions operation.
     * @callback module:api/TweetsApi~usersIdMentionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdMentionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User mention timeline by User ID
     * Returns Tweet objects that mention username associated to the provided User ID
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {String} [sinceId] The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
     * @param {String} [untilId] The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~usersIdMentionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdMentionsResponse}
     */
    usersIdMentions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdMentions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdMentionsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/mentions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdRetweets operation.
     * @callback module:api/TweetsApi~usersIdRetweetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersRetweetsCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Causes the User (in the path) to retweet the specified Tweet.
     * Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
     * @param {String} id The ID of the authenticated source User that is requesting to retweet the Tweet.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersRetweetsCreateRequest} [usersRetweetsCreateRequest] 
     * @param {module:api/TweetsApi~usersIdRetweetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersRetweetsCreateResponse}
     */
    usersIdRetweets(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersRetweetsCreateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdRetweets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UsersRetweetsCreateResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/retweets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTimeline operation.
     * @callback module:api/TweetsApi~usersIdTimelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdTimelinesReverseChronologicalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User home timeline by User ID
     * Returns Tweet objects that appears in the provided User ID's home timeline
     * @param {String} id The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of.
     * @param {Object} opts Optional parameters
     * @param {String} [sinceId] The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
     * @param {String} [untilId] The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [exclude] The set of entities to exclude (e.g. 'replies' or 'retweets').
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~usersIdTimelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdTimelinesReverseChronologicalResponse}
     */
    usersIdTimeline(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTimeline");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdTimelinesReverseChronologicalResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/timelines/reverse_chronological', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTweets operation.
     * @callback module:api/TweetsApi~usersIdTweetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get2UsersIdTweetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Tweets timeline by User ID
     * Returns a list of Tweets authored by the provided User ID
     * @param {String} id The ID of the User to lookup.
     * @param {Object} opts Optional parameters
     * @param {String} [sinceId] The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
     * @param {String} [untilId] The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
     * @param {Number} [maxResults] The maximum number of results.
     * @param {String} [paginationToken] This parameter is used to get the next 'page' of results.
     * @param {Array.<module:model/String>} [exclude] The set of entities to exclude (e.g. 'replies' or 'retweets').
     * @param {Date} [startTime] YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
     * @param {Date} [endTime] YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
     * @param {Array.<module:model/String>} [tweetFields] A comma separated list of Tweet fields to display.
     * @param {Array.<module:model/String>} [expansions] A comma separated list of fields to expand.
     * @param {Array.<module:model/String>} [mediaFields] A comma separated list of Media fields to display.
     * @param {Array.<module:model/String>} [pollFields] A comma separated list of Poll fields to display.
     * @param {Array.<module:model/String>} [userFields] A comma separated list of User fields to display.
     * @param {Array.<module:model/String>} [placeFields] A comma separated list of Place fields to display.
     * @param {module:api/TweetsApi~usersIdTweetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get2UsersIdTweetsResponse}
     */
    usersIdTweets(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTweets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'since_id': opts['sinceId'],
        'until_id': opts['untilId'],
        'max_results': opts['maxResults'],
        'pagination_token': opts['paginationToken'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'tweet.fields': this.apiClient.buildCollectionParam(opts['tweetFields'], 'csv'),
        'expansions': this.apiClient.buildCollectionParam(opts['expansions'], 'csv'),
        'media.fields': this.apiClient.buildCollectionParam(opts['mediaFields'], 'csv'),
        'poll.fields': this.apiClient.buildCollectionParam(opts['pollFields'], 'csv'),
        'user.fields': this.apiClient.buildCollectionParam(opts['userFields'], 'csv'),
        'place.fields': this.apiClient.buildCollectionParam(opts['placeFields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'BearerToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Get2UsersIdTweetsResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/tweets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdUnlike operation.
     * @callback module:api/TweetsApi~usersIdUnlikeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersLikesDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Causes the User (in the path) to unlike the specified Tweet
     * Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
     * @param {String} id The ID of the authenticated source User that is requesting to unlike the Tweet.
     * @param {String} tweetId The ID of the Tweet that the User is requesting to unlike.
     * @param {module:api/TweetsApi~usersIdUnlikeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersLikesDeleteResponse}
     */
    usersIdUnlike(id, tweetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdUnlike");
      }
      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling usersIdUnlike");
      }

      let pathParams = {
        'id': id,
        'tweet_id': tweetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UsersLikesDeleteResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/likes/{tweet_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdUnretweets operation.
     * @callback module:api/TweetsApi~usersIdUnretweetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersRetweetsDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Causes the User (in the path) to unretweet the specified Tweet
     * Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
     * @param {String} id The ID of the authenticated source User that is requesting to retweet the Tweet.
     * @param {String} sourceTweetId The ID of the Tweet that the User is requesting to unretweet.
     * @param {module:api/TweetsApi~usersIdUnretweetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersRetweetsDeleteResponse}
     */
    usersIdUnretweets(id, sourceTweetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdUnretweets");
      }
      // verify the required parameter 'sourceTweetId' is set
      if (sourceTweetId === undefined || sourceTweetId === null) {
        throw new Error("Missing the required parameter 'sourceTweetId' when calling usersIdUnretweets");
      }

      let pathParams = {
        'id': id,
        'source_tweet_id': sourceTweetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2UserToken', 'UserToken'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UsersRetweetsDeleteResponse;
      return this.apiClient.callApi(
        '/2/users/{id}/retweets/{source_tweet_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
