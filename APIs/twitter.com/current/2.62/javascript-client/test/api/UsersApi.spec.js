/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TwitterApiV2);
  }
}(this, function(expect, TwitterApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TwitterApiV2.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('findMyUser', function() {
      it('should call findMyUser successfully', function(done) {
        //uncomment below and update the code to test findMyUser
        //instance.findMyUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUserById', function() {
      it('should call findUserById successfully', function(done) {
        //uncomment below and update the code to test findUserById
        //instance.findUserById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUserByUsername', function() {
      it('should call findUserByUsername successfully', function(done) {
        //uncomment below and update the code to test findUserByUsername
        //instance.findUserByUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsersById', function() {
      it('should call findUsersById successfully', function(done) {
        //uncomment below and update the code to test findUsersById
        //instance.findUsersById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findUsersByUsername', function() {
      it('should call findUsersByUsername successfully', function(done) {
        //uncomment below and update the code to test findUsersByUsername
        //instance.findUsersByUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGetFollowers', function() {
      it('should call listGetFollowers successfully', function(done) {
        //uncomment below and update the code to test listGetFollowers
        //instance.listGetFollowers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGetMembers', function() {
      it('should call listGetMembers successfully', function(done) {
        //uncomment below and update the code to test listGetMembers
        //instance.listGetMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tweetsIdLikingUsers', function() {
      it('should call tweetsIdLikingUsers successfully', function(done) {
        //uncomment below and update the code to test tweetsIdLikingUsers
        //instance.tweetsIdLikingUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tweetsIdRetweetingUsers', function() {
      it('should call tweetsIdRetweetingUsers successfully', function(done) {
        //uncomment below and update the code to test tweetsIdRetweetingUsers
        //instance.tweetsIdRetweetingUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdBlock', function() {
      it('should call usersIdBlock successfully', function(done) {
        //uncomment below and update the code to test usersIdBlock
        //instance.usersIdBlock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdBlocking', function() {
      it('should call usersIdBlocking successfully', function(done) {
        //uncomment below and update the code to test usersIdBlocking
        //instance.usersIdBlocking(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdFollow', function() {
      it('should call usersIdFollow successfully', function(done) {
        //uncomment below and update the code to test usersIdFollow
        //instance.usersIdFollow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdFollowers', function() {
      it('should call usersIdFollowers successfully', function(done) {
        //uncomment below and update the code to test usersIdFollowers
        //instance.usersIdFollowers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdFollowing', function() {
      it('should call usersIdFollowing successfully', function(done) {
        //uncomment below and update the code to test usersIdFollowing
        //instance.usersIdFollowing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdMute', function() {
      it('should call usersIdMute successfully', function(done) {
        //uncomment below and update the code to test usersIdMute
        //instance.usersIdMute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdMuting', function() {
      it('should call usersIdMuting successfully', function(done) {
        //uncomment below and update the code to test usersIdMuting
        //instance.usersIdMuting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdUnblock', function() {
      it('should call usersIdUnblock successfully', function(done) {
        //uncomment below and update the code to test usersIdUnblock
        //instance.usersIdUnblock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdUnfollow', function() {
      it('should call usersIdUnfollow successfully', function(done) {
        //uncomment below and update the code to test usersIdUnfollow
        //instance.usersIdUnfollow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdUnmute', function() {
      it('should call usersIdUnmute successfully', function(done) {
        //uncomment below and update the code to test usersIdUnmute
        //instance.usersIdUnmute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
