/**
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.62
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TwitterApiV2);
  }
}(this, function(expect, TwitterApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TwitterApiV2.Tweet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Tweet', function() {
    it('should create an instance of Tweet', function() {
      // uncomment below and update the code to test Tweet
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be.a(TwitterApiV2.Tweet);
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property authorId (base name: "author_id")', function() {
      // uncomment below and update the code to test the property authorId
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property contextAnnotations (base name: "context_annotations")', function() {
      // uncomment below and update the code to test the property contextAnnotations
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property conversationId (base name: "conversation_id")', function() {
      // uncomment below and update the code to test the property conversationId
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property editControls (base name: "edit_controls")', function() {
      // uncomment below and update the code to test the property editControls
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property editHistoryTweetIds (base name: "edit_history_tweet_ids")', function() {
      // uncomment below and update the code to test the property editHistoryTweetIds
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property entities (base name: "entities")', function() {
      // uncomment below and update the code to test the property entities
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property geo (base name: "geo")', function() {
      // uncomment below and update the code to test the property geo
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property inReplyToUserId (base name: "in_reply_to_user_id")', function() {
      // uncomment below and update the code to test the property inReplyToUserId
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property lang (base name: "lang")', function() {
      // uncomment below and update the code to test the property lang
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property nonPublicMetrics (base name: "non_public_metrics")', function() {
      // uncomment below and update the code to test the property nonPublicMetrics
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property organicMetrics (base name: "organic_metrics")', function() {
      // uncomment below and update the code to test the property organicMetrics
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property possiblySensitive (base name: "possibly_sensitive")', function() {
      // uncomment below and update the code to test the property possiblySensitive
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property promotedMetrics (base name: "promoted_metrics")', function() {
      // uncomment below and update the code to test the property promotedMetrics
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property publicMetrics (base name: "public_metrics")', function() {
      // uncomment below and update the code to test the property publicMetrics
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property referencedTweets (base name: "referenced_tweets")', function() {
      // uncomment below and update the code to test the property referencedTweets
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property replySettings (base name: "reply_settings")', function() {
      // uncomment below and update the code to test the property replySettings
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

    it('should have the property withheld (base name: "withheld")', function() {
      // uncomment below and update the code to test the property withheld
      //var instance = new TwitterApiV2.Tweet();
      //expect(instance).to.be();
    });

  });

}));
