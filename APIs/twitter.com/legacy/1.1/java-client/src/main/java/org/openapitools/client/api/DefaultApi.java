/*
 * Twitter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@twitter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountSettingsGet
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/account/settings"> Documentation</a>
     */
    public okhttp3.Call accountSettingsGetCall(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/settings.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trendLocationWoeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trend_location_woeid", trendLocationWoeid));
        }

        if (sleepTimeEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sleep_time_enabled", sleepTimeEnabled));
        }

        if (startSleepTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_sleep_time", startSleepTime));
        }

        if (endSleepTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_sleep_time", endSleepTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_zone", timeZone));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSettingsGetValidateBeforeCall(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang, final ApiCallback _callback) throws ApiException {
        return accountSettingsGetCall(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang, _callback);

    }

    /**
     * 
     * Returns settings (including current trend, geo and sleep time information) for the authenticating user.
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/account/settings"> Documentation</a>
     */
    public void accountSettingsGet(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang) throws ApiException {
        accountSettingsGetWithHttpInfo(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang);
    }

    /**
     * 
     * Returns settings (including current trend, geo and sleep time information) for the authenticating user.
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/account/settings"> Documentation</a>
     */
    public ApiResponse<Void> accountSettingsGetWithHttpInfo(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang) throws ApiException {
        okhttp3.Call localVarCall = accountSettingsGetValidateBeforeCall(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns settings (including current trend, geo and sleep time information) for the authenticating user.
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/account/settings"> Documentation</a>
     */
    public okhttp3.Call accountSettingsGetAsync(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSettingsGetValidateBeforeCall(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountSettingsPost
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/settings"> Documentation</a>
     */
    public okhttp3.Call accountSettingsPostCall(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/settings.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trendLocationWoeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trend_location_woeid", trendLocationWoeid));
        }

        if (sleepTimeEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sleep_time_enabled", sleepTimeEnabled));
        }

        if (startSleepTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_sleep_time", startSleepTime));
        }

        if (endSleepTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_sleep_time", endSleepTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_zone", timeZone));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSettingsPostValidateBeforeCall(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang, final ApiCallback _callback) throws ApiException {
        return accountSettingsPostCall(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang, _callback);

    }

    /**
     * 
     * Updates the authenticating user&#39;s settings.
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/settings"> Documentation</a>
     */
    public void accountSettingsPost(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang) throws ApiException {
        accountSettingsPostWithHttpInfo(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang);
    }

    /**
     * 
     * Updates the authenticating user&#39;s settings.
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/settings"> Documentation</a>
     */
    public ApiResponse<Void> accountSettingsPostWithHttpInfo(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang) throws ApiException {
        okhttp3.Call localVarCall = accountSettingsPostValidateBeforeCall(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the authenticating user&#39;s settings.
     * @param trendLocationWoeid The Yahoo! Where On Earth ID to use as the user&#39;s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by GET trends/available.  Example Values: 1 (optional)
     * @param sleepTimeEnabled When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.  Example Values: true (optional)
     * @param startSleepTime The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param endSleepTime The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user&#39;s time_zone setting.  Example Values: 13 (optional)
     * @param timeZone The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.  Example Values: Europe/Copenhagen, Pacific/Tongatapu (optional)
     * @param lang The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET help/languages.  Example Values: it, en, es (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/settings"> Documentation</a>
     */
    public okhttp3.Call accountSettingsPostAsync(String trendLocationWoeid, String sleepTimeEnabled, String startSleepTime, String endSleepTime, String timeZone, String lang, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSettingsPostValidateBeforeCall(trendLocationWoeid, sleepTimeEnabled, startSleepTime, endSleepTime, timeZone, lang, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountUpdateDeliveryDevice
     * @param device Must be one of: sms, none.  Example Values: sms (required)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities,\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities.  Example Values: true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device"> Documentation</a>
     */
    public okhttp3.Call accountUpdateDeliveryDeviceCall(String device, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/update_delivery_device.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountUpdateDeliveryDeviceValidateBeforeCall(String device, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'device' is set
        if (device == null) {
            throw new ApiException("Missing the required parameter 'device' when calling accountUpdateDeliveryDevice(Async)");
        }

        return accountUpdateDeliveryDeviceCall(device, includeEntities, _callback);

    }

    /**
     * 
     * Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.
     * @param device Must be one of: sms, none.  Example Values: sms (required)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities,\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities.  Example Values: true (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device"> Documentation</a>
     */
    public void accountUpdateDeliveryDevice(String device, String includeEntities) throws ApiException {
        accountUpdateDeliveryDeviceWithHttpInfo(device, includeEntities);
    }

    /**
     * 
     * Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.
     * @param device Must be one of: sms, none.  Example Values: sms (required)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities,\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities.  Example Values: true (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device"> Documentation</a>
     */
    public ApiResponse<Void> accountUpdateDeliveryDeviceWithHttpInfo(String device, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = accountUpdateDeliveryDeviceValidateBeforeCall(device, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.
     * @param device Must be one of: sms, none.  Example Values: sms (required)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities,\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more detail on entities.  Example Values: true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device"> Documentation</a>
     */
    public okhttp3.Call accountUpdateDeliveryDeviceAsync(String device, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountUpdateDeliveryDeviceValidateBeforeCall(device, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountUpdateProfile
     * @param name Full name associated with the profile. Maximum of 20 characters.  Example Values: Marcel Molina (optional)
     * @param url URL associated with the profile. Will be prepended with \&quot;http://\&quot; if not present. Maximum of 100 characters.  Example Values: http://project.ioni.st (optional)
     * @param location The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.  Example Values: San Francisco, CA (optional)
     * @param description A description of the user owning the account. Maximum of 160 characters.  Example Values: Flipped my wig at age 22 and it never grew back. Also: I work at Twitter. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile"> Documentation</a>
     */
    public okhttp3.Call accountUpdateProfileCall(String name, String url, String location, String description, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/update_profile.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountUpdateProfileValidateBeforeCall(String name, String url, String location, String description, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return accountUpdateProfileCall(name, url, location, description, includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Sets values that users are able to set under the Account tab of their settings page. Only the parameters specified will be updated.
     * @param name Full name associated with the profile. Maximum of 20 characters.  Example Values: Marcel Molina (optional)
     * @param url URL associated with the profile. Will be prepended with \&quot;http://\&quot; if not present. Maximum of 100 characters.  Example Values: http://project.ioni.st (optional)
     * @param location The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.  Example Values: San Francisco, CA (optional)
     * @param description A description of the user owning the account. Maximum of 160 characters.  Example Values: Flipped my wig at age 22 and it never grew back. Also: I work at Twitter. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile"> Documentation</a>
     */
    public void accountUpdateProfile(String name, String url, String location, String description, String includeEntities, String skipStatus) throws ApiException {
        accountUpdateProfileWithHttpInfo(name, url, location, description, includeEntities, skipStatus);
    }

    /**
     * 
     * Sets values that users are able to set under the Account tab of their settings page. Only the parameters specified will be updated.
     * @param name Full name associated with the profile. Maximum of 20 characters.  Example Values: Marcel Molina (optional)
     * @param url URL associated with the profile. Will be prepended with \&quot;http://\&quot; if not present. Maximum of 100 characters.  Example Values: http://project.ioni.st (optional)
     * @param location The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.  Example Values: San Francisco, CA (optional)
     * @param description A description of the user owning the account. Maximum of 160 characters.  Example Values: Flipped my wig at age 22 and it never grew back. Also: I work at Twitter. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile"> Documentation</a>
     */
    public ApiResponse<Void> accountUpdateProfileWithHttpInfo(String name, String url, String location, String description, String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = accountUpdateProfileValidateBeforeCall(name, url, location, description, includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets values that users are able to set under the Account tab of their settings page. Only the parameters specified will be updated.
     * @param name Full name associated with the profile. Maximum of 20 characters.  Example Values: Marcel Molina (optional)
     * @param url URL associated with the profile. Will be prepended with \&quot;http://\&quot; if not present. Maximum of 100 characters.  Example Values: http://project.ioni.st (optional)
     * @param location The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.  Example Values: San Francisco, CA (optional)
     * @param description A description of the user owning the account. Maximum of 160 characters.  Example Values: Flipped my wig at age 22 and it never grew back. Also: I work at Twitter. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile"> Documentation</a>
     */
    public okhttp3.Call accountUpdateProfileAsync(String name, String url, String location, String description, String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountUpdateProfileValidateBeforeCall(name, url, location, description, includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsUpdateProfileBackgroundImage
     * @param contentType Content type header (required)
     * @param tile Whether or not to tile the background image. If set to true, t or 1 the background image will be displayed tiled. The image will not be tiled otherwise. (optional)
     * @param use Determines whether to display the profile background image or not. When set to true, t or 1 the background image will be displayed if an image is being uploaded with the request, or has been uploaded previously. An error will be returned if you try to use a background image when one is not being uploaded or does not exist. If this parameter is defined but set to anything other than true, t or 1, the background image will stop being used. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image"> Documentation</a>
     */
    public okhttp3.Call accountsUpdateProfileBackgroundImageCall(String contentType, String tile, String use, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/update_profile_background_image.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tile", tile));
        }

        if (use != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use", use));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsUpdateProfileBackgroundImageValidateBeforeCall(String contentType, String tile, String use, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling accountsUpdateProfileBackgroundImage(Async)");
        }

        return accountsUpdateProfileBackgroundImageCall(contentType, tile, use, includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Updates the authenticating user&#39;s profile background image. This method can also be used to enable or disable the profile background image. Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.
     * @param contentType Content type header (required)
     * @param tile Whether or not to tile the background image. If set to true, t or 1 the background image will be displayed tiled. The image will not be tiled otherwise. (optional)
     * @param use Determines whether to display the profile background image or not. When set to true, t or 1 the background image will be displayed if an image is being uploaded with the request, or has been uploaded previously. An error will be returned if you try to use a background image when one is not being uploaded or does not exist. If this parameter is defined but set to anything other than true, t or 1, the background image will stop being used. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image"> Documentation</a>
     */
    public void accountsUpdateProfileBackgroundImage(String contentType, String tile, String use, String includeEntities, String skipStatus) throws ApiException {
        accountsUpdateProfileBackgroundImageWithHttpInfo(contentType, tile, use, includeEntities, skipStatus);
    }

    /**
     * 
     * Updates the authenticating user&#39;s profile background image. This method can also be used to enable or disable the profile background image. Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.
     * @param contentType Content type header (required)
     * @param tile Whether or not to tile the background image. If set to true, t or 1 the background image will be displayed tiled. The image will not be tiled otherwise. (optional)
     * @param use Determines whether to display the profile background image or not. When set to true, t or 1 the background image will be displayed if an image is being uploaded with the request, or has been uploaded previously. An error will be returned if you try to use a background image when one is not being uploaded or does not exist. If this parameter is defined but set to anything other than true, t or 1, the background image will stop being used. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image"> Documentation</a>
     */
    public ApiResponse<Void> accountsUpdateProfileBackgroundImageWithHttpInfo(String contentType, String tile, String use, String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = accountsUpdateProfileBackgroundImageValidateBeforeCall(contentType, tile, use, includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the authenticating user&#39;s profile background image. This method can also be used to enable or disable the profile background image. Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.
     * @param contentType Content type header (required)
     * @param tile Whether or not to tile the background image. If set to true, t or 1 the background image will be displayed tiled. The image will not be tiled otherwise. (optional)
     * @param use Determines whether to display the profile background image or not. When set to true, t or 1 the background image will be displayed if an image is being uploaded with the request, or has been uploaded previously. An error will be returned if you try to use a background image when one is not being uploaded or does not exist. If this parameter is defined but set to anything other than true, t or 1, the background image will stop being used. (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image"> Documentation</a>
     */
    public okhttp3.Call accountsUpdateProfileBackgroundImageAsync(String contentType, String tile, String use, String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsUpdateProfileBackgroundImageValidateBeforeCall(contentType, tile, use, includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsUpdateProfileColors
     * @param profileBackgroundColor Profile background color. Example Values: 3D3D3D (optional)
     * @param profileLinkColor Profile link color.Example Values: 0000FF (optional)
     * @param profileSidebarBorderColor Profile sidebar&#39;s border color. Example Values: 0F0F0F (optional)
     * @param profileSidebarFillColor Profile sidebar&#39;s background color. Example Values: 00FF00 (optional)
     * @param profileTextColor Profile text color. Example Values: 000000 (optional)
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors"> Documentation</a>
     */
    public okhttp3.Call accountsUpdateProfileColorsCall(String profileBackgroundColor, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/update_profile_colors.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (profileBackgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_background_color", profileBackgroundColor));
        }

        if (profileLinkColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_link_color", profileLinkColor));
        }

        if (profileSidebarBorderColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_sidebar_border_color", profileSidebarBorderColor));
        }

        if (profileSidebarFillColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_sidebar_fill_color", profileSidebarFillColor));
        }

        if (profileTextColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("profile_text_color", profileTextColor));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsUpdateProfileColorsValidateBeforeCall(String profileBackgroundColor, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return accountsUpdateProfileColorsCall(profileBackgroundColor, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Sets one or more hex values that control the color scheme of the authenticating user&#39;s profile page on twitter.com. Each parameter&#39;s value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).
     * @param profileBackgroundColor Profile background color. Example Values: 3D3D3D (optional)
     * @param profileLinkColor Profile link color.Example Values: 0000FF (optional)
     * @param profileSidebarBorderColor Profile sidebar&#39;s border color. Example Values: 0F0F0F (optional)
     * @param profileSidebarFillColor Profile sidebar&#39;s background color. Example Values: 00FF00 (optional)
     * @param profileTextColor Profile text color. Example Values: 000000 (optional)
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors"> Documentation</a>
     */
    public void accountsUpdateProfileColors(String profileBackgroundColor, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, String includeEntities, String skipStatus) throws ApiException {
        accountsUpdateProfileColorsWithHttpInfo(profileBackgroundColor, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, includeEntities, skipStatus);
    }

    /**
     * 
     * Sets one or more hex values that control the color scheme of the authenticating user&#39;s profile page on twitter.com. Each parameter&#39;s value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).
     * @param profileBackgroundColor Profile background color. Example Values: 3D3D3D (optional)
     * @param profileLinkColor Profile link color.Example Values: 0000FF (optional)
     * @param profileSidebarBorderColor Profile sidebar&#39;s border color. Example Values: 0F0F0F (optional)
     * @param profileSidebarFillColor Profile sidebar&#39;s background color. Example Values: 00FF00 (optional)
     * @param profileTextColor Profile text color. Example Values: 000000 (optional)
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors"> Documentation</a>
     */
    public ApiResponse<Void> accountsUpdateProfileColorsWithHttpInfo(String profileBackgroundColor, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = accountsUpdateProfileColorsValidateBeforeCall(profileBackgroundColor, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets one or more hex values that control the color scheme of the authenticating user&#39;s profile page on twitter.com. Each parameter&#39;s value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff).
     * @param profileBackgroundColor Profile background color. Example Values: 3D3D3D (optional)
     * @param profileLinkColor Profile link color.Example Values: 0000FF (optional)
     * @param profileSidebarBorderColor Profile sidebar&#39;s border color. Example Values: 0F0F0F (optional)
     * @param profileSidebarFillColor Profile sidebar&#39;s background color. Example Values: 00FF00 (optional)
     * @param profileTextColor Profile text color. Example Values: 000000 (optional)
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors"> Documentation</a>
     */
    public okhttp3.Call accountsUpdateProfileColorsAsync(String profileBackgroundColor, String profileLinkColor, String profileSidebarBorderColor, String profileSidebarFillColor, String profileTextColor, String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsUpdateProfileColorsValidateBeforeCall(profileBackgroundColor, profileLinkColor, profileSidebarBorderColor, profileSidebarFillColor, profileTextColor, includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsUpdateProfileImage
     * @param contentType Content type header (required)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_image"> Documentation</a>
     */
    public okhttp3.Call accountsUpdateProfileImageCall(String contentType, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/update_profile_image.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsUpdateProfileImageValidateBeforeCall(String contentType, String skipStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling accountsUpdateProfileImage(Async)");
        }

        return accountsUpdateProfileImageCall(contentType, skipStatus, _callback);

    }

    /**
     * 
     * Updates the authenticating user&#39;s profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user&#39;s profile image URL. You can either update your local cache the next time you request the user&#39;s information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/profile_image/:screen_name (https://dev.twitter.com/docs/api/1/get/users/profile_image/:screen_name).
     * @param contentType Content type header (required)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_image"> Documentation</a>
     */
    public void accountsUpdateProfileImage(String contentType, String skipStatus) throws ApiException {
        accountsUpdateProfileImageWithHttpInfo(contentType, skipStatus);
    }

    /**
     * 
     * Updates the authenticating user&#39;s profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user&#39;s profile image URL. You can either update your local cache the next time you request the user&#39;s information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/profile_image/:screen_name (https://dev.twitter.com/docs/api/1/get/users/profile_image/:screen_name).
     * @param contentType Content type header (required)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_image"> Documentation</a>
     */
    public ApiResponse<Void> accountsUpdateProfileImageWithHttpInfo(String contentType, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = accountsUpdateProfileImageValidateBeforeCall(contentType, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the authenticating user&#39;s profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user&#39;s profile image URL. You can either update your local cache the next time you request the user&#39;s information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/profile_image/:screen_name (https://dev.twitter.com/docs/api/1/get/users/profile_image/:screen_name).
     * @param contentType Content type header (required)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/account/update_profile_image"> Documentation</a>
     */
    public okhttp3.Call accountsUpdateProfileImageAsync(String contentType, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsUpdateProfileImageValidateBeforeCall(contentType, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationRateLimitStatus
     * @param resources A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.Example Values: statuses,friends,trends,help (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/application/rate_limit_status"> Documentation</a>
     */
    public okhttp3.Call applicationRateLimitStatusCall(String resources, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/rate_limit_status.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resources", resources));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationRateLimitStatusValidateBeforeCall(String resources, final ApiCallback _callback) throws ApiException {
        return applicationRateLimitStatusCall(resources, _callback);

    }

    /**
     * 
     * Returns the current rate limits for methods belonging to the specified resource families.  Each 1.1 API resource belongs to a \&quot;resource family\&quot; which is indicated in its method documentation. You can typically determine a method&#39;s resource family from the first component of the path after the resource version.  This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context.  You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with.
     * @param resources A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.Example Values: statuses,friends,trends,help (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/application/rate_limit_status"> Documentation</a>
     */
    public void applicationRateLimitStatus(String resources) throws ApiException {
        applicationRateLimitStatusWithHttpInfo(resources);
    }

    /**
     * 
     * Returns the current rate limits for methods belonging to the specified resource families.  Each 1.1 API resource belongs to a \&quot;resource family\&quot; which is indicated in its method documentation. You can typically determine a method&#39;s resource family from the first component of the path after the resource version.  This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context.  You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with.
     * @param resources A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.Example Values: statuses,friends,trends,help (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/application/rate_limit_status"> Documentation</a>
     */
    public ApiResponse<Void> applicationRateLimitStatusWithHttpInfo(String resources) throws ApiException {
        okhttp3.Call localVarCall = applicationRateLimitStatusValidateBeforeCall(resources, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the current rate limits for methods belonging to the specified resource families.  Each 1.1 API resource belongs to a \&quot;resource family\&quot; which is indicated in its method documentation. You can typically determine a method&#39;s resource family from the first component of the path after the resource version.  This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context.  You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with.
     * @param resources A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.Example Values: statuses,friends,trends,help (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/application/rate_limit_status"> Documentation</a>
     */
    public okhttp3.Call applicationRateLimitStatusAsync(String resources, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationRateLimitStatusValidateBeforeCall(resources, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksCreate
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/create"> Documentation</a>
     */
    public okhttp3.Call blocksCreateCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blocks/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksCreateValidateBeforeCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return blocksCreateCall(includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/create"> Documentation</a>
     */
    public void blocksCreate(String includeEntities, String skipStatus) throws ApiException {
        blocksCreateWithHttpInfo(includeEntities, skipStatus);
    }

    /**
     * 
     * Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/create"> Documentation</a>
     */
    public ApiResponse<Void> blocksCreateWithHttpInfo(String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = blocksCreateValidateBeforeCall(includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/create"> Documentation</a>
     */
    public okhttp3.Call blocksCreateAsync(String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksCreateValidateBeforeCall(includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksDestroy
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/destroy"> Documentation</a>
     */
    public okhttp3.Call blocksDestroyCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blocks/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksDestroyValidateBeforeCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return blocksDestroyCall(includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored.
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/destroy"> Documentation</a>
     */
    public void blocksDestroy(String includeEntities, String skipStatus) throws ApiException {
        blocksDestroyWithHttpInfo(includeEntities, skipStatus);
    }

    /**
     * 
     * Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored.
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/destroy"> Documentation</a>
     */
    public ApiResponse<Void> blocksDestroyWithHttpInfo(String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = blocksDestroyValidateBeforeCall(includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored.
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/blocks/destroy"> Documentation</a>
     */
    public okhttp3.Call blocksDestroyAsync(String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksDestroyValidateBeforeCall(includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksIds
     * @param stringifyIds Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake.  Example Values: true (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/ids"> Documentation</a>
     */
    public okhttp3.Call blocksIdsCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blocks/ids.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stringifyIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stringify_ids", stringifyIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksIdsValidateBeforeCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        return blocksIdsCall(stringifyIds, cursor, _callback);

    }

    /**
     * 
     * Returns an array of numeric user ids the authenticating user is blocking.
     * @param stringifyIds Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake.  Example Values: true (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/ids"> Documentation</a>
     */
    public void blocksIds(String stringifyIds, String cursor) throws ApiException {
        blocksIdsWithHttpInfo(stringifyIds, cursor);
    }

    /**
     * 
     * Returns an array of numeric user ids the authenticating user is blocking.
     * @param stringifyIds Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake.  Example Values: true (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/ids"> Documentation</a>
     */
    public ApiResponse<Void> blocksIdsWithHttpInfo(String stringifyIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = blocksIdsValidateBeforeCall(stringifyIds, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns an array of numeric user ids the authenticating user is blocking.
     * @param stringifyIds Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake.  Example Values: true (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/ids"> Documentation</a>
     */
    public okhttp3.Call blocksIdsAsync(String stringifyIds, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksIdsValidateBeforeCall(stringifyIds, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocksList
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/list"> Documentation</a>
     */
    public okhttp3.Call blocksListCall(String includeEntities, String skipStatus, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blocks/list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocksListValidateBeforeCall(String includeEntities, String skipStatus, String cursor, final ApiCallback _callback) throws ApiException {
        return blocksListCall(includeEntities, skipStatus, cursor, _callback);

    }

    /**
     * 
     * Allows one to enable or disable retweets and device notifications from the specified user.
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/list"> Documentation</a>
     */
    public void blocksList(String includeEntities, String skipStatus, String cursor) throws ApiException {
        blocksListWithHttpInfo(includeEntities, skipStatus, cursor);
    }

    /**
     * 
     * Allows one to enable or disable retweets and device notifications from the specified user.
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/list"> Documentation</a>
     */
    public ApiResponse<Void> blocksListWithHttpInfo(String includeEntities, String skipStatus, String cursor) throws ApiException {
        okhttp3.Call localVarCall = blocksListValidateBeforeCall(includeEntities, skipStatus, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows one to enable or disable retweets and device notifications from the specified user.
     * @param includeEntities The entities node will not be included when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/blocks/list"> Documentation</a>
     */
    public okhttp3.Call blocksListAsync(String includeEntities, String skipStatus, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocksListValidateBeforeCall(includeEntities, skipStatus, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directMessages
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages"> Documentation</a>
     */
    public okhttp3.Call directMessagesCall(String count, String sinceId, String maxId, String includeEntities, String page, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct_messages.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directMessagesValidateBeforeCall(String count, String sinceId, String maxId, String includeEntities, String page, String skipStatus, final ApiCallback _callback) throws ApiException {
        return directMessagesCall(count, sinceId, maxId, includeEntities, page, skipStatus, _callback);

    }

    /**
     * 
     * Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages"> Documentation</a>
     */
    public void directMessages(String count, String sinceId, String maxId, String includeEntities, String page, String skipStatus) throws ApiException {
        directMessagesWithHttpInfo(count, sinceId, maxId, includeEntities, page, skipStatus);
    }

    /**
     * 
     * Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages"> Documentation</a>
     */
    public ApiResponse<Void> directMessagesWithHttpInfo(String count, String sinceId, String maxId, String includeEntities, String page, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = directMessagesValidateBeforeCall(count, sinceId, maxId, includeEntities, page, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming DMs.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages"> Documentation</a>
     */
    public okhttp3.Call directMessagesAsync(String count, String sinceId, String maxId, String includeEntities, String page, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directMessagesValidateBeforeCall(count, sinceId, maxId, includeEntities, page, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directMessagesDestroy
     * @param id The ID of the direct message to delete.  Example Values: 1270516771 (required)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/destroy"> Documentation</a>
     */
    public okhttp3.Call directMessagesDestroyCall(String id, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct_messages/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directMessagesDestroyValidateBeforeCall(String id, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling directMessagesDestroy(Async)");
        }

        return directMessagesDestroyCall(id, includeEntities, _callback);

    }

    /**
     * 
     * Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param id The ID of the direct message to delete.  Example Values: 1270516771 (required)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/destroy"> Documentation</a>
     */
    public void directMessagesDestroy(String id, String includeEntities) throws ApiException {
        directMessagesDestroyWithHttpInfo(id, includeEntities);
    }

    /**
     * 
     * Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param id The ID of the direct message to delete.  Example Values: 1270516771 (required)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/destroy"> Documentation</a>
     */
    public ApiResponse<Void> directMessagesDestroyWithHttpInfo(String id, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = directMessagesDestroyValidateBeforeCall(id, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param id The ID of the direct message to delete.  Example Values: 1270516771 (required)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/destroy"> Documentation</a>
     */
    public okhttp3.Call directMessagesDestroyAsync(String id, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directMessagesDestroyValidateBeforeCall(id, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directMessagesNew
     * @param text The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters.  Example Values: Meet me behind the cafeteria after school (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/new"> Documentation</a>
     */
    public okhttp3.Call directMessagesNewCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct_messages/new.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directMessagesNewValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling directMessagesNew(Async)");
        }

        return directMessagesNewCall(text, _callback);

    }

    /**
     * 
     * Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.
     * @param text The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters.  Example Values: Meet me behind the cafeteria after school (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/new"> Documentation</a>
     */
    public void directMessagesNew(String text) throws ApiException {
        directMessagesNewWithHttpInfo(text);
    }

    /**
     * 
     * Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.
     * @param text The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters.  Example Values: Meet me behind the cafeteria after school (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/new"> Documentation</a>
     */
    public ApiResponse<Void> directMessagesNewWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = directMessagesNewValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.
     * @param text The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140 characters.  Example Values: Meet me behind the cafeteria after school (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/direct_messages/new"> Documentation</a>
     */
    public okhttp3.Call directMessagesNewAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directMessagesNewValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directMessagesSent
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent"> Documentation</a>
     */
    public okhttp3.Call directMessagesSentCall(String count, String sinceId, String maxId, String includeEntities, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct_messages/sent.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directMessagesSentValidateBeforeCall(String count, String sinceId, String maxId, String includeEntities, String page, final ApiCallback _callback) throws ApiException {
        return directMessagesSentCall(count, sinceId, maxId, includeEntities, page, _callback);

    }

    /**
     * 
     * Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent"> Documentation</a>
     */
    public void directMessagesSent(String count, String sinceId, String maxId, String includeEntities, String page) throws ApiException {
        directMessagesSentWithHttpInfo(count, sinceId, maxId, includeEntities, page);
    }

    /**
     * 
     * Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent"> Documentation</a>
     */
    public ApiResponse<Void> directMessagesSentWithHttpInfo(String count, String sinceId, String maxId, String includeEntities, String page) throws ApiException {
        okhttp3.Call localVarCall = directMessagesSentValidateBeforeCall(count, sinceId, maxId, includeEntities, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param count Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will not be included when set to false.  Example Values: false (optional)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent"> Documentation</a>
     */
    public okhttp3.Call directMessagesSentAsync(String count, String sinceId, String maxId, String includeEntities, String page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directMessagesSentValidateBeforeCall(count, sinceId, maxId, includeEntities, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directMessagesShow
     * @param id The ID of the direct message.  Example Values: 587424932 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/show"> Documentation</a>
     */
    public okhttp3.Call directMessagesShowCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct_messages/show.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directMessagesShowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling directMessagesShow(Async)");
        }

        return directMessagesShowCall(id, _callback);

    }

    /**
     * 
     * Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param id The ID of the direct message.  Example Values: 587424932 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/show"> Documentation</a>
     */
    public void directMessagesShow(String id) throws ApiException {
        directMessagesShowWithHttpInfo(id);
    }

    /**
     * 
     * Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param id The ID of the direct message.  Example Values: 587424932 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/show"> Documentation</a>
     */
    public ApiResponse<Void> directMessagesShowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = directMessagesShowValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient.  Important: This method requires an access token with RWD (read, write and direct message) permissions. Consult The Application Permission Model for more information.
     * @param id The ID of the direct message.  Example Values: 587424932 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/direct_messages/show"> Documentation</a>
     */
    public okhttp3.Call directMessagesShowAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directMessagesShowValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesCreate
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/create"> Documentation</a>
     */
    public okhttp3.Call favoritesCreateCall(String id, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorites/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesCreateValidateBeforeCall(String id, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling favoritesCreate(Async)");
        }

        return favoritesCreateCall(id, includeEntities, _callback);

    }

    /**
     * 
     * Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.  This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/create"> Documentation</a>
     */
    public void favoritesCreate(String id, String includeEntities) throws ApiException {
        favoritesCreateWithHttpInfo(id, includeEntities);
    }

    /**
     * 
     * Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.  This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/create"> Documentation</a>
     */
    public ApiResponse<Void> favoritesCreateWithHttpInfo(String id, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = favoritesCreateValidateBeforeCall(id, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.  This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/create"> Documentation</a>
     */
    public okhttp3.Call favoritesCreateAsync(String id, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesCreateValidateBeforeCall(id, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesDestroy
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/destroy"> Documentation</a>
     */
    public okhttp3.Call favoritesDestroyCall(String id, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorites/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesDestroyValidateBeforeCall(String id, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling favoritesDestroy(Async)");
        }

        return favoritesDestroyCall(id, includeEntities, _callback);

    }

    /**
     * 
     * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.  This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/destroy"> Documentation</a>
     */
    public void favoritesDestroy(String id, String includeEntities) throws ApiException {
        favoritesDestroyWithHttpInfo(id, includeEntities);
    }

    /**
     * 
     * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.  This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/destroy"> Documentation</a>
     */
    public ApiResponse<Void> favoritesDestroyWithHttpInfo(String id, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = favoritesDestroyValidateBeforeCall(id, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.  This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.
     * @param id The numerical ID of the desired status.  Example Values: 123 (required)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/favorites/destroy"> Documentation</a>
     */
    public okhttp3.Call favoritesDestroyAsync(String id, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesDestroyValidateBeforeCall(id, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesList
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/favorites/list"> Documentation</a>
     */
    public okhttp3.Call favoritesListCall(String count, String sinceId, String maxId, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorites/list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesListValidateBeforeCall(String count, String sinceId, String maxId, String includeEntities, final ApiCallback _callback) throws ApiException {
        return favoritesListCall(count, sinceId, maxId, includeEntities, _callback);

    }

    /**
     * 
     * Returns the 20 most recent Tweets favorited by the authenticating or specified user.
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/favorites/list"> Documentation</a>
     */
    public void favoritesList(String count, String sinceId, String maxId, String includeEntities) throws ApiException {
        favoritesListWithHttpInfo(count, sinceId, maxId, includeEntities);
    }

    /**
     * 
     * Returns the 20 most recent Tweets favorited by the authenticating or specified user.
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/favorites/list"> Documentation</a>
     */
    public ApiResponse<Void> favoritesListWithHttpInfo(String count, String sinceId, String maxId, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = favoritesListValidateBeforeCall(count, sinceId, maxId, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the 20 most recent Tweets favorited by the authenticating or specified user.
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.  Example Values: 5 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.  Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.  Example Values: 54321 (optional)
     * @param includeEntities The entities node will be omitted when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/favorites/list"> Documentation</a>
     */
    public okhttp3.Call favoritesListAsync(String count, String sinceId, String maxId, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesListValidateBeforeCall(count, sinceId, maxId, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for followersIds
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/followers/ids"> Documentation</a>
     */
    public okhttp3.Call followersIdsCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/followers/ids.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stringifyIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stringify_ids", stringifyIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followersIdsValidateBeforeCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        return followersIdsCall(stringifyIds, cursor, _callback);

    }

    /**
     * 
     * Returns a cursored collection of user IDs for every user following the specified user.  At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \&quot;pages\&quot; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.  This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/followers/ids"> Documentation</a>
     */
    public void followersIds(String stringifyIds, String cursor) throws ApiException {
        followersIdsWithHttpInfo(stringifyIds, cursor);
    }

    /**
     * 
     * Returns a cursored collection of user IDs for every user following the specified user.  At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \&quot;pages\&quot; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.  This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/followers/ids"> Documentation</a>
     */
    public ApiResponse<Void> followersIdsWithHttpInfo(String stringifyIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = followersIdsValidateBeforeCall(stringifyIds, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a cursored collection of user IDs for every user following the specified user.  At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \&quot;pages\&quot; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.  This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/followers/ids"> Documentation</a>
     */
    public okhttp3.Call followersIdsAsync(String stringifyIds, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followersIdsValidateBeforeCall(stringifyIds, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendsIds
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friends/ids"> Documentation</a>
     */
    public okhttp3.Call friendsIdsCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friends/ids.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stringifyIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stringify_ids", stringifyIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendsIdsValidateBeforeCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        return friendsIdsCall(stringifyIds, cursor, _callback);

    }

    /**
     * 
     * Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \&quot;friends\&quot;).  At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \&quot;pages\&quot; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.  This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friends/ids"> Documentation</a>
     */
    public void friendsIds(String stringifyIds, String cursor) throws ApiException {
        friendsIdsWithHttpInfo(stringifyIds, cursor);
    }

    /**
     * 
     * Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \&quot;friends\&quot;).  At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \&quot;pages\&quot; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.  This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friends/ids"> Documentation</a>
     */
    public ApiResponse<Void> friendsIdsWithHttpInfo(String stringifyIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = friendsIdsValidateBeforeCall(stringifyIds, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \&quot;friends\&quot;).  At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \&quot;pages\&quot; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.  This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friends/ids"> Documentation</a>
     */
    public okhttp3.Call friendsIdsAsync(String stringifyIds, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendsIdsValidateBeforeCall(stringifyIds, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsCreate
     * @param follow Enable notifications for the target user. Example Values: true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/create"> Documentation</a>
     */
    public okhttp3.Call friendshipsCreateCall(String follow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (follow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("follow", follow));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsCreateValidateBeforeCall(String follow, final ApiCallback _callback) throws ApiException {
        return friendshipsCreateCall(follow, _callback);

    }

    /**
     * 
     * Allows the authenticating users to follow the user specified in the ID parameter.  Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.  Actions taken in this method are asynchronous and changes will be eventually consistent.
     * @param follow Enable notifications for the target user. Example Values: true (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/create"> Documentation</a>
     */
    public void friendshipsCreate(String follow) throws ApiException {
        friendshipsCreateWithHttpInfo(follow);
    }

    /**
     * 
     * Allows the authenticating users to follow the user specified in the ID parameter.  Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.  Actions taken in this method are asynchronous and changes will be eventually consistent.
     * @param follow Enable notifications for the target user. Example Values: true (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/create"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsCreateWithHttpInfo(String follow) throws ApiException {
        okhttp3.Call localVarCall = friendshipsCreateValidateBeforeCall(follow, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows the authenticating users to follow the user specified in the ID parameter.  Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.  Actions taken in this method are asynchronous and changes will be eventually consistent.
     * @param follow Enable notifications for the target user. Example Values: true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/create"> Documentation</a>
     */
    public okhttp3.Call friendshipsCreateAsync(String follow, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsCreateValidateBeforeCall(follow, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsDestroy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/destroy"> Documentation</a>
     */
    public okhttp3.Call friendshipsDestroyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsDestroyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return friendshipsDestroyCall(_callback);

    }

    /**
     * 
     * Allows the authenticating user to unfollow the user specified in the ID parameter.  Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.  Actions taken in this method are asynchronous and changes will be eventually consistent.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/destroy"> Documentation</a>
     */
    public void friendshipsDestroy() throws ApiException {
        friendshipsDestroyWithHttpInfo();
    }

    /**
     * 
     * Allows the authenticating user to unfollow the user specified in the ID parameter.  Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.  Actions taken in this method are asynchronous and changes will be eventually consistent.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/destroy"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsDestroyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = friendshipsDestroyValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows the authenticating user to unfollow the user specified in the ID parameter.  Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.  Actions taken in this method are asynchronous and changes will be eventually consistent.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/destroy"> Documentation</a>
     */
    public okhttp3.Call friendshipsDestroyAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsDestroyValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsIncoming
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/incoming"> Documentation</a>
     */
    public okhttp3.Call friendshipsIncomingCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/incoming.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stringifyIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stringify_ids", stringifyIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsIncomingValidateBeforeCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        return friendshipsIncomingCall(stringifyIds, cursor, _callback);

    }

    /**
     * 
     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/incoming"> Documentation</a>
     */
    public void friendshipsIncoming(String stringifyIds, String cursor) throws ApiException {
        friendshipsIncomingWithHttpInfo(stringifyIds, cursor);
    }

    /**
     * 
     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/incoming"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsIncomingWithHttpInfo(String stringifyIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = friendshipsIncomingValidateBeforeCall(stringifyIds, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/incoming"> Documentation</a>
     */
    public okhttp3.Call friendshipsIncomingAsync(String stringifyIds, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsIncomingValidateBeforeCall(stringifyIds, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsLookup
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/lookup"> Documentation</a>
     */
    public okhttp3.Call friendshipsLookupCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/lookup.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsLookupValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return friendshipsLookupCall(_callback);

    }

    /**
     * 
     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/lookup"> Documentation</a>
     */
    public void friendshipsLookup() throws ApiException {
        friendshipsLookupWithHttpInfo();
    }

    /**
     * 
     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/lookup"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsLookupWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = friendshipsLookupValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/lookup"> Documentation</a>
     */
    public okhttp3.Call friendshipsLookupAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsLookupValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsOutgoing
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing"> Documentation</a>
     */
    public okhttp3.Call friendshipsOutgoingCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/outgoing.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stringifyIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stringify_ids", stringifyIds));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsOutgoingValidateBeforeCall(String stringifyIds, String cursor, final ApiCallback _callback) throws ApiException {
        return friendshipsOutgoingCall(stringifyIds, cursor, _callback);

    }

    /**
     * 
     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing"> Documentation</a>
     */
    public void friendshipsOutgoing(String stringifyIds, String cursor) throws ApiException {
        friendshipsOutgoingWithHttpInfo(stringifyIds, cursor);
    }

    /**
     * 
     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsOutgoingWithHttpInfo(String stringifyIds, String cursor) throws ApiException {
        okhttp3.Call localVarCall = friendshipsOutgoingValidateBeforeCall(stringifyIds, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.
     * @param stringifyIds Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. Example Values: true (optional)
     * @param cursor Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing"> Documentation</a>
     */
    public okhttp3.Call friendshipsOutgoingAsync(String stringifyIds, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsOutgoingValidateBeforeCall(stringifyIds, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsShow
     * @param targetId The user_id of the target user.  Example Values: 20 (required)
     * @param targetScreenName The screen_name of the target user.  Example Values: noradio (required)
     * @param sourceId The user_id of the subject user.  Example Values: 3191321 (optional)
     * @param sourceScreenName The screen_name of the subject user.  Example Values: raffi (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/show"> Documentation</a>
     */
    public okhttp3.Call friendshipsShowCall(String targetId, String targetScreenName, String sourceId, String sourceScreenName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/show.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_id", sourceId));
        }

        if (sourceScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_screen_name", sourceScreenName));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_id", targetId));
        }

        if (targetScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_screen_name", targetScreenName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsShowValidateBeforeCall(String targetId, String targetScreenName, String sourceId, String sourceScreenName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling friendshipsShow(Async)");
        }

        // verify the required parameter 'targetScreenName' is set
        if (targetScreenName == null) {
            throw new ApiException("Missing the required parameter 'targetScreenName' when calling friendshipsShow(Async)");
        }

        return friendshipsShowCall(targetId, targetScreenName, sourceId, sourceScreenName, _callback);

    }

    /**
     * 
     * Returns detailed information about the relationship between two arbitrary users.
     * @param targetId The user_id of the target user.  Example Values: 20 (required)
     * @param targetScreenName The screen_name of the target user.  Example Values: noradio (required)
     * @param sourceId The user_id of the subject user.  Example Values: 3191321 (optional)
     * @param sourceScreenName The screen_name of the subject user.  Example Values: raffi (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/show"> Documentation</a>
     */
    public void friendshipsShow(String targetId, String targetScreenName, String sourceId, String sourceScreenName) throws ApiException {
        friendshipsShowWithHttpInfo(targetId, targetScreenName, sourceId, sourceScreenName);
    }

    /**
     * 
     * Returns detailed information about the relationship between two arbitrary users.
     * @param targetId The user_id of the target user.  Example Values: 20 (required)
     * @param targetScreenName The screen_name of the target user.  Example Values: noradio (required)
     * @param sourceId The user_id of the subject user.  Example Values: 3191321 (optional)
     * @param sourceScreenName The screen_name of the subject user.  Example Values: raffi (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/show"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsShowWithHttpInfo(String targetId, String targetScreenName, String sourceId, String sourceScreenName) throws ApiException {
        okhttp3.Call localVarCall = friendshipsShowValidateBeforeCall(targetId, targetScreenName, sourceId, sourceScreenName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns detailed information about the relationship between two arbitrary users.
     * @param targetId The user_id of the target user.  Example Values: 20 (required)
     * @param targetScreenName The screen_name of the target user.  Example Values: noradio (required)
     * @param sourceId The user_id of the subject user.  Example Values: 3191321 (optional)
     * @param sourceScreenName The screen_name of the subject user.  Example Values: raffi (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/friendships/show"> Documentation</a>
     */
    public okhttp3.Call friendshipsShowAsync(String targetId, String targetScreenName, String sourceId, String sourceScreenName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsShowValidateBeforeCall(targetId, targetScreenName, sourceId, sourceScreenName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for friendshipsUpdate
     * @param device Enable/disable device notifications from the target user. Example Values: true, false (required)
     * @param retweets Enable/disable retweets from the target user. Example Values: true, false (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/update"> Documentation</a>
     */
    public okhttp3.Call friendshipsUpdateCall(String device, String retweets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/friendships/update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (retweets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retweets", retweets));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call friendshipsUpdateValidateBeforeCall(String device, String retweets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'device' is set
        if (device == null) {
            throw new ApiException("Missing the required parameter 'device' when calling friendshipsUpdate(Async)");
        }

        // verify the required parameter 'retweets' is set
        if (retweets == null) {
            throw new ApiException("Missing the required parameter 'retweets' when calling friendshipsUpdate(Async)");
        }

        return friendshipsUpdateCall(device, retweets, _callback);

    }

    /**
     * 
     * Allows one to enable or disable retweets and device notifications from the specified user.
     * @param device Enable/disable device notifications from the target user. Example Values: true, false (required)
     * @param retweets Enable/disable retweets from the target user. Example Values: true, false (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/update"> Documentation</a>
     */
    public void friendshipsUpdate(String device, String retweets) throws ApiException {
        friendshipsUpdateWithHttpInfo(device, retweets);
    }

    /**
     * 
     * Allows one to enable or disable retweets and device notifications from the specified user.
     * @param device Enable/disable device notifications from the target user. Example Values: true, false (required)
     * @param retweets Enable/disable retweets from the target user. Example Values: true, false (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/update"> Documentation</a>
     */
    public ApiResponse<Void> friendshipsUpdateWithHttpInfo(String device, String retweets) throws ApiException {
        okhttp3.Call localVarCall = friendshipsUpdateValidateBeforeCall(device, retweets, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows one to enable or disable retweets and device notifications from the specified user.
     * @param device Enable/disable device notifications from the target user. Example Values: true, false (required)
     * @param retweets Enable/disable retweets from the target user. Example Values: true, false (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/friendships/update"> Documentation</a>
     */
    public okhttp3.Call friendshipsUpdateAsync(String device, String retweets, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = friendshipsUpdateValidateBeforeCall(device, retweets, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoPlaceId
     * @param placeId A place in the world. These IDs can be retrieved from geo/reverse_geocode.  Example Values: df51dec6f4ee2b2c (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/id/%3Aplace_id"> Documentation</a>
     */
    public okhttp3.Call geoPlaceIdCall(String placeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo/id/{place_id}.json"
            .replace("{" + "place_id" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoPlaceIdValidateBeforeCall(String placeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling geoPlaceId(Async)");
        }

        return geoPlaceIdCall(placeId, _callback);

    }

    /**
     * 
     * Returns all the information about a known place.Example Values: df51dec6f4ee2b2c
     * @param placeId A place in the world. These IDs can be retrieved from geo/reverse_geocode.  Example Values: df51dec6f4ee2b2c (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/id/%3Aplace_id"> Documentation</a>
     */
    public void geoPlaceId(String placeId) throws ApiException {
        geoPlaceIdWithHttpInfo(placeId);
    }

    /**
     * 
     * Returns all the information about a known place.Example Values: df51dec6f4ee2b2c
     * @param placeId A place in the world. These IDs can be retrieved from geo/reverse_geocode.  Example Values: df51dec6f4ee2b2c (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/id/%3Aplace_id"> Documentation</a>
     */
    public ApiResponse<Void> geoPlaceIdWithHttpInfo(String placeId) throws ApiException {
        okhttp3.Call localVarCall = geoPlaceIdValidateBeforeCall(placeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns all the information about a known place.Example Values: df51dec6f4ee2b2c
     * @param placeId A place in the world. These IDs can be retrieved from geo/reverse_geocode.  Example Values: df51dec6f4ee2b2c (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/id/%3Aplace_id"> Documentation</a>
     */
    public okhttp3.Call geoPlaceIdAsync(String placeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoPlaceIdValidateBeforeCall(placeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoPlaces
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/geo/place"> Documentation</a>
     */
    public okhttp3.Call geoPlacesCall(String attributeColonStreetAddress, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo/places.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributeColonStreetAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute:street_address", attributeColonStreetAddress));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoPlacesValidateBeforeCall(String attributeColonStreetAddress, String paramCallback, final ApiCallback _callback) throws ApiException {
        return geoPlacesCall(attributeColonStreetAddress, paramCallback, _callback);

    }

    /**
     * 
     * Creates a new place object at the given latitude and longitude.  Before creating a place you need to query GET geo/similar_places with the latitude, longitude and name of the place you wish to create. The query will return an array of places which are similar to the one you wish to create, and a token. If the place you wish to create isn&#39;t in the returned array you can use the token with this method to create a new one.
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/geo/place"> Documentation</a>
     */
    public void geoPlaces(String attributeColonStreetAddress, String paramCallback) throws ApiException {
        geoPlacesWithHttpInfo(attributeColonStreetAddress, paramCallback);
    }

    /**
     * 
     * Creates a new place object at the given latitude and longitude.  Before creating a place you need to query GET geo/similar_places with the latitude, longitude and name of the place you wish to create. The query will return an array of places which are similar to the one you wish to create, and a token. If the place you wish to create isn&#39;t in the returned array you can use the token with this method to create a new one.
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/geo/place"> Documentation</a>
     */
    public ApiResponse<Void> geoPlacesWithHttpInfo(String attributeColonStreetAddress, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = geoPlacesValidateBeforeCall(attributeColonStreetAddress, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a new place object at the given latitude and longitude.  Before creating a place you need to query GET geo/similar_places with the latitude, longitude and name of the place you wish to create. The query will return an array of places which are similar to the one you wish to create, and a token. If the place you wish to create isn&#39;t in the returned array you can use the token with this method to create a new one.
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/geo/place"> Documentation</a>
     */
    public okhttp3.Call geoPlacesAsync(String attributeColonStreetAddress, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoPlacesValidateBeforeCall(attributeColonStreetAddress, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoReverseGeocode
     * @param lat The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter.  Example Values: 37.7821120598956 (required)
     * @param _long The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.  Example Values: -122.400612831116 (required)
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param maxResults A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \&quot;nearby\&quot; results to return. Ideally, only pass in the number of places you intend to display to the user here.  Example Values: 3 (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode"> Documentation</a>
     */
    public okhttp3.Call geoReverseGeocodeCall(String lat, String _long, String accuracy, String granularity, String maxResults, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo/reverse_geocode.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (_long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("long", _long));
        }

        if (accuracy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accuracy", accuracy));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("granularity", granularity));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_results", maxResults));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoReverseGeocodeValidateBeforeCall(String lat, String _long, String accuracy, String granularity, String maxResults, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling geoReverseGeocode(Async)");
        }

        // verify the required parameter '_long' is set
        if (_long == null) {
            throw new ApiException("Missing the required parameter '_long' when calling geoReverseGeocode(Async)");
        }

        return geoReverseGeocodeCall(lat, _long, accuracy, granularity, maxResults, paramCallback, _callback);

    }

    /**
     * 
     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.  This request is an informative call and will deliver generalized results about geography
     * @param lat The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter.  Example Values: 37.7821120598956 (required)
     * @param _long The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.  Example Values: -122.400612831116 (required)
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param maxResults A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \&quot;nearby\&quot; results to return. Ideally, only pass in the number of places you intend to display to the user here.  Example Values: 3 (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode"> Documentation</a>
     */
    public void geoReverseGeocode(String lat, String _long, String accuracy, String granularity, String maxResults, String paramCallback) throws ApiException {
        geoReverseGeocodeWithHttpInfo(lat, _long, accuracy, granularity, maxResults, paramCallback);
    }

    /**
     * 
     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.  This request is an informative call and will deliver generalized results about geography
     * @param lat The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter.  Example Values: 37.7821120598956 (required)
     * @param _long The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.  Example Values: -122.400612831116 (required)
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param maxResults A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \&quot;nearby\&quot; results to return. Ideally, only pass in the number of places you intend to display to the user here.  Example Values: 3 (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode"> Documentation</a>
     */
    public ApiResponse<Void> geoReverseGeocodeWithHttpInfo(String lat, String _long, String accuracy, String granularity, String maxResults, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = geoReverseGeocodeValidateBeforeCall(lat, _long, accuracy, granularity, maxResults, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.  This request is an informative call and will deliver generalized results about geography
     * @param lat The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter.  Example Values: 37.7821120598956 (required)
     * @param _long The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.  Example Values: -122.400612831116 (required)
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param maxResults A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \&quot;nearby\&quot; results to return. Ideally, only pass in the number of places you intend to display to the user here.  Example Values: 3 (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode"> Documentation</a>
     */
    public okhttp3.Call geoReverseGeocodeAsync(String lat, String _long, String accuracy, String granularity, String maxResults, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoReverseGeocodeValidateBeforeCall(lat, _long, accuracy, granularity, maxResults, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoSearch
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/search"> Documentation</a>
     */
    public okhttp3.Call geoSearchCall(String accuracy, String granularity, String containedWithin, String attributeColonStreetAddress, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accuracy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accuracy", accuracy));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("granularity", granularity));
        }

        if (containedWithin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contained_within", containedWithin));
        }

        if (attributeColonStreetAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute:street_address", attributeColonStreetAddress));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoSearchValidateBeforeCall(String accuracy, String granularity, String containedWithin, String attributeColonStreetAddress, String paramCallback, final ApiCallback _callback) throws ApiException {
        return geoSearchCall(accuracy, granularity, containedWithin, attributeColonStreetAddress, paramCallback, _callback);

    }

    /**
     * 
     * Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.  Conceptually, a query can be made from the user&#39;s location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.  This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/search"> Documentation</a>
     */
    public void geoSearch(String accuracy, String granularity, String containedWithin, String attributeColonStreetAddress, String paramCallback) throws ApiException {
        geoSearchWithHttpInfo(accuracy, granularity, containedWithin, attributeColonStreetAddress, paramCallback);
    }

    /**
     * 
     * Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.  Conceptually, a query can be made from the user&#39;s location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.  This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/search"> Documentation</a>
     */
    public ApiResponse<Void> geoSearchWithHttpInfo(String accuracy, String granularity, String containedWithin, String attributeColonStreetAddress, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = geoSearchValidateBeforeCall(accuracy, granularity, containedWithin, attributeColonStreetAddress, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.  Conceptually, a query can be made from the user&#39;s location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.  This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.
     * @param accuracy A hint on the \&quot;region\&quot; in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).  Example Values: 5ft (optional)
     * @param granularity This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.  Example Values: city (optional)
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/search"> Documentation</a>
     */
    public okhttp3.Call geoSearchAsync(String accuracy, String granularity, String containedWithin, String attributeColonStreetAddress, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoSearchValidateBeforeCall(accuracy, granularity, containedWithin, attributeColonStreetAddress, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geoSimilarPlaces
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/similar_places"> Documentation</a>
     */
    public okhttp3.Call geoSimilarPlacesCall(String containedWithin, String attributeColonStreetAddress, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo/similar_places.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containedWithin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contained_within", containedWithin));
        }

        if (attributeColonStreetAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute:street_address", attributeColonStreetAddress));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geoSimilarPlacesValidateBeforeCall(String containedWithin, String attributeColonStreetAddress, String paramCallback, final ApiCallback _callback) throws ApiException {
        return geoSimilarPlacesCall(containedWithin, attributeColonStreetAddress, paramCallback, _callback);

    }

    /**
     * 
     * Locates places near the given coordinates which are similar in name.  Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn&#39;t exist, make a request to POST geo/place to create a new one.  The token contained in the response is the token needed to be able to create a new place.
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/similar_places"> Documentation</a>
     */
    public void geoSimilarPlaces(String containedWithin, String attributeColonStreetAddress, String paramCallback) throws ApiException {
        geoSimilarPlacesWithHttpInfo(containedWithin, attributeColonStreetAddress, paramCallback);
    }

    /**
     * 
     * Locates places near the given coordinates which are similar in name.  Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn&#39;t exist, make a request to POST geo/place to create a new one.  The token contained in the response is the token needed to be able to create a new place.
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/similar_places"> Documentation</a>
     */
    public ApiResponse<Void> geoSimilarPlacesWithHttpInfo(String containedWithin, String attributeColonStreetAddress, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = geoSimilarPlacesValidateBeforeCall(containedWithin, attributeColonStreetAddress, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Locates places near the given coordinates which are similar in name.  Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn&#39;t exist, make a request to POST geo/place to create a new one.  The token contained in the response is the token needed to be able to create a new place.
     * @param containedWithin This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.  Specify a place_id. For example, to scope all results to places within \&quot;San Francisco, CA USA\&quot;, you would specify a place_id of \&quot;5a110d312052166f\&quot;  Example Values: 247f43d441defc03 (optional)
     * @param attributeColonStreetAddress This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes.  Example Values: 795%20Folsom%20St (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/geo/similar_places"> Documentation</a>
     */
    public okhttp3.Call geoSimilarPlacesAsync(String containedWithin, String attributeColonStreetAddress, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geoSimilarPlacesValidateBeforeCall(containedWithin, attributeColonStreetAddress, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for helpConfigurations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/configuration"> Documentation</a>
     */
    public okhttp3.Call helpConfigurationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/help/configuration.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call helpConfigurationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return helpConfigurationsCall(_callback);

    }

    /**
     * 
     * Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.  It is recommended applications request this endpoint when they are loaded, but no more than once a day.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/configuration"> Documentation</a>
     */
    public void helpConfigurations() throws ApiException {
        helpConfigurationsWithHttpInfo();
    }

    /**
     * 
     * Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.  It is recommended applications request this endpoint when they are loaded, but no more than once a day.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/configuration"> Documentation</a>
     */
    public ApiResponse<Void> helpConfigurationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = helpConfigurationsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.  It is recommended applications request this endpoint when they are loaded, but no more than once a day.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/configuration"> Documentation</a>
     */
    public okhttp3.Call helpConfigurationsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = helpConfigurationsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for helpLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/languages"> Documentation</a>
     */
    public okhttp3.Call helpLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/help/languages.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call helpLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return helpLanguagesCall(_callback);

    }

    /**
     * 
     * Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/languages"> Documentation</a>
     */
    public void helpLanguages() throws ApiException {
        helpLanguagesWithHttpInfo();
    }

    /**
     * 
     * Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/languages"> Documentation</a>
     */
    public ApiResponse<Void> helpLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = helpLanguagesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/languages"> Documentation</a>
     */
    public okhttp3.Call helpLanguagesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = helpLanguagesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for helpPrivacy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/privacy"> Documentation</a>
     */
    public okhttp3.Call helpPrivacyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/help/privacy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call helpPrivacyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return helpPrivacyCall(_callback);

    }

    /**
     * 
     * Returns Twitter&#39;s Privacy Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/privacy"> Documentation</a>
     */
    public void helpPrivacy() throws ApiException {
        helpPrivacyWithHttpInfo();
    }

    /**
     * 
     * Returns Twitter&#39;s Privacy Policy
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/privacy"> Documentation</a>
     */
    public ApiResponse<Void> helpPrivacyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = helpPrivacyValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns Twitter&#39;s Privacy Policy
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/privacy"> Documentation</a>
     */
    public okhttp3.Call helpPrivacyAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = helpPrivacyValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for helpTos
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/tos"> Documentation</a>
     */
    public okhttp3.Call helpTosCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/help/tos.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call helpTosValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return helpTosCall(_callback);

    }

    /**
     * 
     * Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/tos"> Documentation</a>
     */
    public void helpTos() throws ApiException {
        helpTosWithHttpInfo();
    }

    /**
     * 
     * Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/tos"> Documentation</a>
     */
    public ApiResponse<Void> helpTosWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = helpTosValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/help/tos"> Documentation</a>
     */
    public okhttp3.Call helpTosAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = helpTosValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsCreate
     * @param name The name for the list.A list&#39;s name must start with a letter and can consist only of 25 or fewer letters, numbers, \&quot;-\&quot;, or \&quot;_\&quot; characters. (required)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/create"> Documentation</a>
     */
    public okhttp3.Call listsCreateCall(String name, String mode, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsCreateValidateBeforeCall(String name, String mode, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listsCreate(Async)");
        }

        return listsCreateCall(name, mode, description, _callback);

    }

    /**
     * 
     * Creates a new list for the authenticated user. Note that you can&#39;t create more than 20 lists per account.
     * @param name The name for the list.A list&#39;s name must start with a letter and can consist only of 25 or fewer letters, numbers, \&quot;-\&quot;, or \&quot;_\&quot; characters. (required)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/create"> Documentation</a>
     */
    public void listsCreate(String name, String mode, String description) throws ApiException {
        listsCreateWithHttpInfo(name, mode, description);
    }

    /**
     * 
     * Creates a new list for the authenticated user. Note that you can&#39;t create more than 20 lists per account.
     * @param name The name for the list.A list&#39;s name must start with a letter and can consist only of 25 or fewer letters, numbers, \&quot;-\&quot;, or \&quot;_\&quot; characters. (required)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/create"> Documentation</a>
     */
    public ApiResponse<Void> listsCreateWithHttpInfo(String name, String mode, String description) throws ApiException {
        okhttp3.Call localVarCall = listsCreateValidateBeforeCall(name, mode, description, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a new list for the authenticated user. Note that you can&#39;t create more than 20 lists per account.
     * @param name The name for the list.A list&#39;s name must start with a letter and can consist only of 25 or fewer letters, numbers, \&quot;-\&quot;, or \&quot;_\&quot; characters. (required)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/create"> Documentation</a>
     */
    public okhttp3.Call listsCreateAsync(String name, String mode, String description, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsCreateValidateBeforeCall(name, mode, description, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsDestroy
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/destroy"> Documentation</a>
     */
    public okhttp3.Call listsDestroyCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsDestroyValidateBeforeCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        return listsDestroyCall(ownerScreenName, ownerId, _callback);

    }

    /**
     * 
     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/destroy"> Documentation</a>
     */
    public void listsDestroy(String ownerScreenName, String ownerId) throws ApiException {
        listsDestroyWithHttpInfo(ownerScreenName, ownerId);
    }

    /**
     * 
     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/destroy"> Documentation</a>
     */
    public ApiResponse<Void> listsDestroyWithHttpInfo(String ownerScreenName, String ownerId) throws ApiException {
        okhttp3.Call localVarCall = listsDestroyValidateBeforeCall(ownerScreenName, ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/destroy"> Documentation</a>
     */
    public okhttp3.Call listsDestroyAsync(String ownerScreenName, String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsDestroyValidateBeforeCall(ownerScreenName, ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsList
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.  Example Values: 12345  Note:: Specifies the ID of the user to get lists from. Helpful for disambiguating when a valid user ID is also a valid screen name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list"> Documentation</a>
     */
    public okhttp3.Call listsListCall(String screenName, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsListValidateBeforeCall(String screenName, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling listsList(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listsList(Async)");
        }

        return listsListCall(screenName, userId, _callback);

    }

    /**
     * 
     * Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.  This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.  Example Values: 12345  Note:: Specifies the ID of the user to get lists from. Helpful for disambiguating when a valid user ID is also a valid screen name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list"> Documentation</a>
     */
    public void listsList(String screenName, String userId) throws ApiException {
        listsListWithHttpInfo(screenName, userId);
    }

    /**
     * 
     * Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.  This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.  Example Values: 12345  Note:: Specifies the ID of the user to get lists from. Helpful for disambiguating when a valid user ID is also a valid screen name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list"> Documentation</a>
     */
    public ApiResponse<Void> listsListWithHttpInfo(String screenName, String userId) throws ApiException {
        okhttp3.Call localVarCall = listsListValidateBeforeCall(screenName, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.  This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.  Example Values: 12345  Note:: Specifies the ID of the user to get lists from. Helpful for disambiguating when a valid user ID is also a valid screen name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/list"> Documentation</a>
     */
    public okhttp3.Call listsListAsync(String screenName, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsListValidateBeforeCall(screenName, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMembers
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the collection of list members to be broken into \&quot;pages\&quot; of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members"> Documentation</a>
     */
    public okhttp3.Call listsMembersCall(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/members.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembersValidateBeforeCall(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, String cursor, final ApiCallback _callback) throws ApiException {
        return listsMembersCall(ownerScreenName, ownerId, includeEntities, skipStatus, cursor, _callback);

    }

    /**
     * 
     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the collection of list members to be broken into \&quot;pages\&quot; of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members"> Documentation</a>
     */
    public void listsMembers(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, String cursor) throws ApiException {
        listsMembersWithHttpInfo(ownerScreenName, ownerId, includeEntities, skipStatus, cursor);
    }

    /**
     * 
     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the collection of list members to be broken into \&quot;pages\&quot; of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members"> Documentation</a>
     */
    public ApiResponse<Void> listsMembersWithHttpInfo(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listsMembersValidateBeforeCall(ownerScreenName, ownerId, includeEntities, skipStatus, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param cursor Causes the collection of list members to be broken into \&quot;pages\&quot; of somewhat consistent size. If no cursor is provided, a value of -1 will be assumed, which is the first \&quot;page.\&quot;  The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.  Example Values: 12893764510938 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members"> Documentation</a>
     */
    public okhttp3.Call listsMembersAsync(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembersValidateBeforeCall(ownerScreenName, ownerId, includeEntities, skipStatus, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMembersCreate
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create"> Documentation</a>
     */
    public okhttp3.Call listsMembersCreateCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/members/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembersCreateValidateBeforeCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        return listsMembersCreateCall(ownerScreenName, ownerId, _callback);

    }

    /**
     * 
     * Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can&#39;t have more than 500 members.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create"> Documentation</a>
     */
    public void listsMembersCreate(String ownerScreenName, String ownerId) throws ApiException {
        listsMembersCreateWithHttpInfo(ownerScreenName, ownerId);
    }

    /**
     * 
     * Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can&#39;t have more than 500 members.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create"> Documentation</a>
     */
    public ApiResponse<Void> listsMembersCreateWithHttpInfo(String ownerScreenName, String ownerId) throws ApiException {
        okhttp3.Call localVarCall = listsMembersCreateValidateBeforeCall(ownerScreenName, ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists can&#39;t have more than 500 members.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create"> Documentation</a>
     */
    public okhttp3.Call listsMembersCreateAsync(String ownerScreenName, String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembersCreateValidateBeforeCall(ownerScreenName, ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMembersCreateAll
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all"> Documentation</a>
     */
    public okhttp3.Call listsMembersCreateAllCall(String ownerScreenName, String ownerId, String userId, String screenName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/members/create_all.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembersCreateAllValidateBeforeCall(String ownerScreenName, String ownerId, String userId, String screenName, final ApiCallback _callback) throws ApiException {
        return listsMembersCreateAllCall(ownerScreenName, ownerId, userId, screenName, _callback);

    }

    /**
     * 
     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can&#39;t have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.  Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all"> Documentation</a>
     */
    public void listsMembersCreateAll(String ownerScreenName, String ownerId, String userId, String screenName) throws ApiException {
        listsMembersCreateAllWithHttpInfo(ownerScreenName, ownerId, userId, screenName);
    }

    /**
     * 
     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can&#39;t have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.  Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all"> Documentation</a>
     */
    public ApiResponse<Void> listsMembersCreateAllWithHttpInfo(String ownerScreenName, String ownerId, String userId, String screenName) throws ApiException {
        okhttp3.Call localVarCall = listsMembersCreateAllValidateBeforeCall(ownerScreenName, ownerId, userId, screenName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can&#39;t have more than 500 members, and you are limited to adding up to 100 members to a list at a time with this method.  Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all"> Documentation</a>
     */
    public okhttp3.Call listsMembersCreateAllAsync(String ownerScreenName, String ownerId, String userId, String screenName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembersCreateAllValidateBeforeCall(ownerScreenName, ownerId, userId, screenName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMembersDestroy
     * @param listId The numerical id of the list. (required)
     * @param slug You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you&#39;ll also have to specify the list owner using the owner_id or owner_screen_name parameters. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy"> Documentation</a>
     */
    public okhttp3.Call listsMembersDestroyCall(String listId, String slug, String ownerScreenName, String ownerId, String userId, String screenName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/members/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_id", listId));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembersDestroyValidateBeforeCall(String listId, String slug, String ownerScreenName, String ownerId, String userId, String screenName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listsMembersDestroy(Async)");
        }

        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listsMembersDestroy(Async)");
        }

        return listsMembersDestroyCall(listId, slug, ownerScreenName, ownerId, userId, screenName, _callback);

    }

    /**
     * 
     * Removes the specified member from the list. The authenticated user must be the list&#39;s owner to remove members from the list.
     * @param listId The numerical id of the list. (required)
     * @param slug You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you&#39;ll also have to specify the list owner using the owner_id or owner_screen_name parameters. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy"> Documentation</a>
     */
    public void listsMembersDestroy(String listId, String slug, String ownerScreenName, String ownerId, String userId, String screenName) throws ApiException {
        listsMembersDestroyWithHttpInfo(listId, slug, ownerScreenName, ownerId, userId, screenName);
    }

    /**
     * 
     * Removes the specified member from the list. The authenticated user must be the list&#39;s owner to remove members from the list.
     * @param listId The numerical id of the list. (required)
     * @param slug You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you&#39;ll also have to specify the list owner using the owner_id or owner_screen_name parameters. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy"> Documentation</a>
     */
    public ApiResponse<Void> listsMembersDestroyWithHttpInfo(String listId, String slug, String ownerScreenName, String ownerId, String userId, String screenName) throws ApiException {
        okhttp3.Call localVarCall = listsMembersDestroyValidateBeforeCall(listId, slug, ownerScreenName, ownerId, userId, screenName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes the specified member from the list. The authenticated user must be the list&#39;s owner to remove members from the list.
     * @param listId The numerical id of the list. (required)
     * @param slug You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you&#39;ll also have to specify the list owner using the owner_id or owner_screen_name parameters. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param userId The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy"> Documentation</a>
     */
    public okhttp3.Call listsMembersDestroyAsync(String listId, String slug, String ownerScreenName, String ownerId, String userId, String screenName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembersDestroyValidateBeforeCall(listId, slug, ownerScreenName, ownerId, userId, screenName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMembersDestroyAll
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all"> Documentation</a>
     */
    public okhttp3.Call listsMembersDestroyAllCall(String ownerScreenName, String ownerId, String screenName, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/members/destroy_all.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembersDestroyAllValidateBeforeCall(String ownerScreenName, String ownerId, String screenName, String userId, final ApiCallback _callback) throws ApiException {
        return listsMembersDestroyAllCall(ownerScreenName, ownerId, screenName, userId, _callback);

    }

    /**
     * 
     * Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can&#39;t have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.  Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all"> Documentation</a>
     */
    public void listsMembersDestroyAll(String ownerScreenName, String ownerId, String screenName, String userId) throws ApiException {
        listsMembersDestroyAllWithHttpInfo(ownerScreenName, ownerId, screenName, userId);
    }

    /**
     * 
     * Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can&#39;t have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.  Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all"> Documentation</a>
     */
    public ApiResponse<Void> listsMembersDestroyAllWithHttpInfo(String ownerScreenName, String ownerId, String screenName, String userId) throws ApiException {
        okhttp3.Call localVarCall = listsMembersDestroyAllValidateBeforeCall(ownerScreenName, ownerId, screenName, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can&#39;t have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.  Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all"> Documentation</a>
     */
    public okhttp3.Call listsMembersDestroyAllAsync(String ownerScreenName, String ownerId, String screenName, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembersDestroyAllValidateBeforeCall(ownerScreenName, ownerId, screenName, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMembersShow
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members/show"> Documentation</a>
     */
    public okhttp3.Call listsMembersShowCall(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/members/show.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembersShowValidateBeforeCall(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return listsMembersShowCall(ownerScreenName, ownerId, includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Check if the specified user is a member of the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members/show"> Documentation</a>
     */
    public void listsMembersShow(String ownerScreenName, String ownerId, String includeEntities, String skipStatus) throws ApiException {
        listsMembersShowWithHttpInfo(ownerScreenName, ownerId, includeEntities, skipStatus);
    }

    /**
     * 
     * Check if the specified user is a member of the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members/show"> Documentation</a>
     */
    public ApiResponse<Void> listsMembersShowWithHttpInfo(String ownerScreenName, String ownerId, String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = listsMembersShowValidateBeforeCall(ownerScreenName, ownerId, includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Check if the specified user is a member of the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/members/show"> Documentation</a>
     */
    public okhttp3.Call listsMembersShowAsync(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembersShowValidateBeforeCall(ownerScreenName, ownerId, includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsMemberships
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param filterToOwnedLists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/memberships"> Documentation</a>
     */
    public okhttp3.Call listsMembershipsCall(String userId, String screenName, String cursor, String filterToOwnedLists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/memberships.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (filterToOwnedLists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_to_owned_lists", filterToOwnedLists));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsMembershipsValidateBeforeCall(String userId, String screenName, String cursor, String filterToOwnedLists, final ApiCallback _callback) throws ApiException {
        return listsMembershipsCall(userId, screenName, cursor, filterToOwnedLists, _callback);

    }

    /**
     * 
     * Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param filterToOwnedLists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/memberships"> Documentation</a>
     */
    public void listsMemberships(String userId, String screenName, String cursor, String filterToOwnedLists) throws ApiException {
        listsMembershipsWithHttpInfo(userId, screenName, cursor, filterToOwnedLists);
    }

    /**
     * 
     * Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param filterToOwnedLists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/memberships"> Documentation</a>
     */
    public ApiResponse<Void> listsMembershipsWithHttpInfo(String userId, String screenName, String cursor, String filterToOwnedLists) throws ApiException {
        okhttp3.Call localVarCall = listsMembershipsValidateBeforeCall(userId, screenName, cursor, filterToOwnedLists, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.
     * @param userId The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name. (optional)
     * @param screenName The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param filterToOwnedLists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/memberships"> Documentation</a>
     */
    public okhttp3.Call listsMembershipsAsync(String userId, String screenName, String cursor, String filterToOwnedLists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsMembershipsValidateBeforeCall(userId, screenName, cursor, filterToOwnedLists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsShow
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/show"> Documentation</a>
     */
    public okhttp3.Call listsShowCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/show.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsShowValidateBeforeCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        return listsShowCall(ownerScreenName, ownerId, _callback);

    }

    /**
     * 
     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/show"> Documentation</a>
     */
    public void listsShow(String ownerScreenName, String ownerId) throws ApiException {
        listsShowWithHttpInfo(ownerScreenName, ownerId);
    }

    /**
     * 
     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/show"> Documentation</a>
     */
    public ApiResponse<Void> listsShowWithHttpInfo(String ownerScreenName, String ownerId) throws ApiException {
        okhttp3.Call localVarCall = listsShowValidateBeforeCall(ownerScreenName, ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/show"> Documentation</a>
     */
    public okhttp3.Call listsShowAsync(String ownerScreenName, String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsShowValidateBeforeCall(ownerScreenName, ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsStatuses
     * @param includeRts When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param count Specifies the number of results to retrieve per \&quot;page. (optional)
     * @param includeEntities Entities are ON by default in API 1.1, each tweet includes a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities&#x3D;false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/statuses"> Documentation</a>
     */
    public okhttp3.Call listsStatusesCall(String includeRts, String ownerScreenName, String ownerId, String sinceId, String maxId, String count, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/statuses.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (includeRts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_rts", includeRts));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsStatusesValidateBeforeCall(String includeRts, String ownerScreenName, String ownerId, String sinceId, String maxId, String count, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'includeRts' is set
        if (includeRts == null) {
            throw new ApiException("Missing the required parameter 'includeRts' when calling listsStatuses(Async)");
        }

        return listsStatusesCall(includeRts, ownerScreenName, ownerId, sinceId, maxId, count, includeEntities, _callback);

    }

    /**
     * 
     * Returns tweet timeline for members of the specified list. Retweets are included by default. You can use the include_rts&#x3D;false parameter to omit retweet objects.
     * @param includeRts When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param count Specifies the number of results to retrieve per \&quot;page. (optional)
     * @param includeEntities Entities are ON by default in API 1.1, each tweet includes a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities&#x3D;false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/statuses"> Documentation</a>
     */
    public void listsStatuses(String includeRts, String ownerScreenName, String ownerId, String sinceId, String maxId, String count, String includeEntities) throws ApiException {
        listsStatusesWithHttpInfo(includeRts, ownerScreenName, ownerId, sinceId, maxId, count, includeEntities);
    }

    /**
     * 
     * Returns tweet timeline for members of the specified list. Retweets are included by default. You can use the include_rts&#x3D;false parameter to omit retweet objects.
     * @param includeRts When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param count Specifies the number of results to retrieve per \&quot;page. (optional)
     * @param includeEntities Entities are ON by default in API 1.1, each tweet includes a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities&#x3D;false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/statuses"> Documentation</a>
     */
    public ApiResponse<Void> listsStatusesWithHttpInfo(String includeRts, String ownerScreenName, String ownerId, String sinceId, String maxId, String count, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = listsStatusesValidateBeforeCall(includeRts, ownerScreenName, ownerId, sinceId, maxId, count, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns tweet timeline for members of the specified list. Retweets are included by default. You can use the include_rts&#x3D;false parameter to omit retweet objects.
     * @param includeRts When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline. (required)
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param count Specifies the number of results to retrieve per \&quot;page. (optional)
     * @param includeEntities Entities are ON by default in API 1.1, each tweet includes a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities&#x3D;false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/statuses"> Documentation</a>
     */
    public okhttp3.Call listsStatusesAsync(String includeRts, String ownerScreenName, String ownerId, String sinceId, String maxId, String count, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsStatusesValidateBeforeCall(includeRts, ownerScreenName, ownerId, sinceId, maxId, count, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsSubscribers
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersCall(String ownerScreenName, String ownerId, String cursor, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/subscribers.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsSubscribersValidateBeforeCall(String ownerScreenName, String ownerId, String cursor, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return listsSubscribersCall(ownerScreenName, ownerId, cursor, includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers"> Documentation</a>
     */
    public void listsSubscribers(String ownerScreenName, String ownerId, String cursor, String includeEntities, String skipStatus) throws ApiException {
        listsSubscribersWithHttpInfo(ownerScreenName, ownerId, cursor, includeEntities, skipStatus);
    }

    /**
     * 
     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers"> Documentation</a>
     */
    public ApiResponse<Void> listsSubscribersWithHttpInfo(String ownerScreenName, String ownerId, String cursor, String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = listsSubscribersValidateBeforeCall(ownerScreenName, ownerId, cursor, includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersAsync(String ownerScreenName, String ownerId, String cursor, String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsSubscribersValidateBeforeCall(ownerScreenName, ownerId, cursor, includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsSubscribersCreate
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersCreateCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/subscribers/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsSubscribersCreateValidateBeforeCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        return listsSubscribersCreateCall(ownerScreenName, ownerId, _callback);

    }

    /**
     * 
     * Subscribes the authenticated user to the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create"> Documentation</a>
     */
    public void listsSubscribersCreate(String ownerScreenName, String ownerId) throws ApiException {
        listsSubscribersCreateWithHttpInfo(ownerScreenName, ownerId);
    }

    /**
     * 
     * Subscribes the authenticated user to the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create"> Documentation</a>
     */
    public ApiResponse<Void> listsSubscribersCreateWithHttpInfo(String ownerScreenName, String ownerId) throws ApiException {
        okhttp3.Call localVarCall = listsSubscribersCreateValidateBeforeCall(ownerScreenName, ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Subscribes the authenticated user to the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersCreateAsync(String ownerScreenName, String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsSubscribersCreateValidateBeforeCall(ownerScreenName, ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsSubscribersDestroy
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersDestroyCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/subscribers/destroy.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsSubscribersDestroyValidateBeforeCall(String ownerScreenName, String ownerId, final ApiCallback _callback) throws ApiException {
        return listsSubscribersDestroyCall(ownerScreenName, ownerId, _callback);

    }

    /**
     * 
     * Unsubscribes the authenticated user from the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy"> Documentation</a>
     */
    public void listsSubscribersDestroy(String ownerScreenName, String ownerId) throws ApiException {
        listsSubscribersDestroyWithHttpInfo(ownerScreenName, ownerId);
    }

    /**
     * 
     * Unsubscribes the authenticated user from the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy"> Documentation</a>
     */
    public ApiResponse<Void> listsSubscribersDestroyWithHttpInfo(String ownerScreenName, String ownerId) throws ApiException {
        okhttp3.Call localVarCall = listsSubscribersDestroyValidateBeforeCall(ownerScreenName, ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Unsubscribes the authenticated user from the specified list.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersDestroyAsync(String ownerScreenName, String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsSubscribersDestroyValidateBeforeCall(ownerScreenName, ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsSubscribersShow
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersShowCall(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/subscribers/show.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsSubscribersShowValidateBeforeCall(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return listsSubscribersShowCall(ownerScreenName, ownerId, includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show"> Documentation</a>
     */
    public void listsSubscribersShow(String ownerScreenName, String ownerId, String includeEntities, String skipStatus) throws ApiException {
        listsSubscribersShowWithHttpInfo(ownerScreenName, ownerId, includeEntities, skipStatus);
    }

    /**
     * 
     * Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show"> Documentation</a>
     */
    public ApiResponse<Void> listsSubscribersShowWithHttpInfo(String ownerScreenName, String ownerId, String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = listsSubscribersShowValidateBeforeCall(ownerScreenName, ownerId, includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param includeEntities When set to either true, t or 1, each tweet will include a node called \&quot;entities\&quot;. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details. (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show"> Documentation</a>
     */
    public okhttp3.Call listsSubscribersShowAsync(String ownerScreenName, String ownerId, String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsSubscribersShowValidateBeforeCall(ownerScreenName, ownerId, includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsSubscriptions
     * @param count The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions"> Documentation</a>
     */
    public okhttp3.Call listsSubscriptionsCall(String count, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/subscriptions.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsSubscriptionsValidateBeforeCall(String count, String cursor, final ApiCallback _callback) throws ApiException {
        return listsSubscriptionsCall(count, cursor, _callback);

    }

    /**
     * 
     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user&#39;s own lists.
     * @param count The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions"> Documentation</a>
     */
    public void listsSubscriptions(String count, String cursor) throws ApiException {
        listsSubscriptionsWithHttpInfo(count, cursor);
    }

    /**
     * 
     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user&#39;s own lists.
     * @param count The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions"> Documentation</a>
     */
    public ApiResponse<Void> listsSubscriptionsWithHttpInfo(String count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listsSubscriptionsValidateBeforeCall(count, cursor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user&#39;s own lists.
     * @param count The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors. (optional)
     * @param cursor Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body&#39;s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions"> Documentation</a>
     */
    public okhttp3.Call listsSubscriptionsAsync(String count, String cursor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsSubscriptionsValidateBeforeCall(count, cursor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listsUpdate
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param name The name for the list. (optional)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/update"> Documentation</a>
     */
    public okhttp3.Call listsUpdateCall(String ownerScreenName, String ownerId, String name, String mode, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ownerScreenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_screen_name", ownerScreenName));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_id", ownerId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listsUpdateValidateBeforeCall(String ownerScreenName, String ownerId, String name, String mode, String description, final ApiCallback _callback) throws ApiException {
        return listsUpdateCall(ownerScreenName, ownerId, name, mode, description, _callback);

    }

    /**
     * 
     * Updates the specified list. The authenticated user must own the list to be able to update it.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param name The name for the list. (optional)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/update"> Documentation</a>
     */
    public void listsUpdate(String ownerScreenName, String ownerId, String name, String mode, String description) throws ApiException {
        listsUpdateWithHttpInfo(ownerScreenName, ownerId, name, mode, description);
    }

    /**
     * 
     * Updates the specified list. The authenticated user must own the list to be able to update it.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param name The name for the list. (optional)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/update"> Documentation</a>
     */
    public ApiResponse<Void> listsUpdateWithHttpInfo(String ownerScreenName, String ownerId, String name, String mode, String description) throws ApiException {
        okhttp3.Call localVarCall = listsUpdateValidateBeforeCall(ownerScreenName, ownerId, name, mode, description, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the specified list. The authenticated user must own the list to be able to update it.
     * @param ownerScreenName The screen name of the user who owns the list being requested by a slug. (optional)
     * @param ownerId The user ID of the user who owns the list being requested by a slug. (optional)
     * @param name The name for the list. (optional)
     * @param mode Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public. (optional)
     * @param description The description to give the list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/lists/update"> Documentation</a>
     */
    public okhttp3.Call listsUpdateAsync(String ownerScreenName, String ownerId, String name, String mode, String description, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listsUpdateValidateBeforeCall(ownerScreenName, ownerId, name, mode, description, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savedSearchesCreate
     * @param query The query of the search the user would like to save. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/create"> Documentation</a>
     */
    public okhttp3.Call savedSearchesCreateCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_searches/create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savedSearchesCreateValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling savedSearchesCreate(Async)");
        }

        return savedSearchesCreateCall(query, _callback);

    }

    /**
     * 
     * Create a new saved search for the authenticated user. A user may only have 25 saved searches.
     * @param query The query of the search the user would like to save. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/create"> Documentation</a>
     */
    public void savedSearchesCreate(String query) throws ApiException {
        savedSearchesCreateWithHttpInfo(query);
    }

    /**
     * 
     * Create a new saved search for the authenticated user. A user may only have 25 saved searches.
     * @param query The query of the search the user would like to save. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/create"> Documentation</a>
     */
    public ApiResponse<Void> savedSearchesCreateWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = savedSearchesCreateValidateBeforeCall(query, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new saved search for the authenticated user. A user may only have 25 saved searches.
     * @param query The query of the search the user would like to save. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/create"> Documentation</a>
     */
    public okhttp3.Call savedSearchesCreateAsync(String query, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savedSearchesCreateValidateBeforeCall(query, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savedSearchesDestroy
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/destroy/%3Aid"> Documentation</a>
     */
    public okhttp3.Call savedSearchesDestroyCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_searches/destroy/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savedSearchesDestroyValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling savedSearchesDestroy(Async)");
        }

        return savedSearchesDestroyCall(id, _callback);

    }

    /**
     * 
     * Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/destroy/%3Aid"> Documentation</a>
     */
    public void savedSearchesDestroy(String id) throws ApiException {
        savedSearchesDestroyWithHttpInfo(id);
    }

    /**
     * 
     * Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/destroy/%3Aid"> Documentation</a>
     */
    public ApiResponse<Void> savedSearchesDestroyWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = savedSearchesDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/saved_searches/destroy/%3Aid"> Documentation</a>
     */
    public okhttp3.Call savedSearchesDestroyAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savedSearchesDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savedSearchesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/list"> Documentation</a>
     */
    public okhttp3.Call savedSearchesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_searches/list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savedSearchesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return savedSearchesListCall(_callback);

    }

    /**
     * 
     * Returns the authenticated user&#39;s saved search queries.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/list"> Documentation</a>
     */
    public void savedSearchesList() throws ApiException {
        savedSearchesListWithHttpInfo();
    }

    /**
     * 
     * Returns the authenticated user&#39;s saved search queries.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/list"> Documentation</a>
     */
    public ApiResponse<Void> savedSearchesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = savedSearchesListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the authenticated user&#39;s saved search queries.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/list"> Documentation</a>
     */
    public okhttp3.Call savedSearchesListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savedSearchesListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for savedsearchesid
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/%3Aid"> Documentation</a>
     */
    public okhttp3.Call savedsearchesidCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saved_searches/show/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savedsearchesidValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling savedsearchesid(Async)");
        }

        return savedsearchesidCall(id, _callback);

    }

    /**
     * 
     * Returns the authenticated user&#39;s saved search queries.
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/%3Aid"> Documentation</a>
     */
    public void savedsearchesid(String id) throws ApiException {
        savedsearchesidWithHttpInfo(id);
    }

    /**
     * 
     * Returns the authenticated user&#39;s saved search queries.
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/%3Aid"> Documentation</a>
     */
    public ApiResponse<Void> savedsearchesidWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = savedsearchesidValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the authenticated user&#39;s saved search queries.
     * @param id The ID of the saved search.  Example Values: 313006 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/%3Aid"> Documentation</a>
     */
    public okhttp3.Call savedsearchesidAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savedsearchesidValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTweets
     * @param q A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may additionally be limited by complexity.Example: @noradio. (required)
     * @param geocode Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \&quot;latitude,longitude,radius\&quot;, where radius units must be specified as either \&quot;mi\&quot; (miles) or \&quot;km\&quot; (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \&quot;sub-regions\&quot; will be considered when using the radius modifier. (optional)
     * @param lang Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.Example Values: eu (optional)
     * @param locale Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.Example Values: ja (optional)
     * @param resultType Optional. Specifies what type of search results you would prefer to receive. The current default is \&quot;mixed.\&quot; Valid values include: * mixed: Include both popular and real time results in the response. * recent: return only the most recent results in the response * popular: return only the most popular results in the response. Example Values: mixed, recent, popular (optional)
     * @param count The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \&quot;rpp\&quot; parameter in the old Search API. Example Values: 100 (optional)
     * @param until Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here. Example Values: 2012-09-01 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. Example Values: 12345 (optional)
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint. Example Values: processTweets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/search/tweets"> Documentation</a>
     */
    public okhttp3.Call searchTweetsCall(String q, String geocode, String lang, String locale, String resultType, String count, String until, String sinceId, String maxId, String includeEntities, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/tweets.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (geocode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geocode", geocode));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (resultType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("result_type", resultType));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTweetsValidateBeforeCall(String q, String geocode, String lang, String locale, String resultType, String count, String until, String sinceId, String maxId, String includeEntities, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchTweets(Async)");
        }

        return searchTweetsCall(q, geocode, lang, locale, resultType, count, until, sinceId, maxId, includeEntities, paramCallback, _callback);

    }

    /**
     * 
     * Returns a collection of relevant Tweets matching a specified query.  Please note that Twitter&#39;s search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.  In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you&#39;ll find across the REST API and platform. You may need to tolerate some inconsistencies and variance in perspectival values (fields that pertain to the perspective of the authenticating user) and embedded user objects.
     * @param q A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may additionally be limited by complexity.Example: @noradio. (required)
     * @param geocode Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \&quot;latitude,longitude,radius\&quot;, where radius units must be specified as either \&quot;mi\&quot; (miles) or \&quot;km\&quot; (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \&quot;sub-regions\&quot; will be considered when using the radius modifier. (optional)
     * @param lang Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.Example Values: eu (optional)
     * @param locale Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.Example Values: ja (optional)
     * @param resultType Optional. Specifies what type of search results you would prefer to receive. The current default is \&quot;mixed.\&quot; Valid values include: * mixed: Include both popular and real time results in the response. * recent: return only the most recent results in the response * popular: return only the most popular results in the response. Example Values: mixed, recent, popular (optional)
     * @param count The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \&quot;rpp\&quot; parameter in the old Search API. Example Values: 100 (optional)
     * @param until Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here. Example Values: 2012-09-01 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. Example Values: 12345 (optional)
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint. Example Values: processTweets (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/search/tweets"> Documentation</a>
     */
    public void searchTweets(String q, String geocode, String lang, String locale, String resultType, String count, String until, String sinceId, String maxId, String includeEntities, String paramCallback) throws ApiException {
        searchTweetsWithHttpInfo(q, geocode, lang, locale, resultType, count, until, sinceId, maxId, includeEntities, paramCallback);
    }

    /**
     * 
     * Returns a collection of relevant Tweets matching a specified query.  Please note that Twitter&#39;s search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.  In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you&#39;ll find across the REST API and platform. You may need to tolerate some inconsistencies and variance in perspectival values (fields that pertain to the perspective of the authenticating user) and embedded user objects.
     * @param q A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may additionally be limited by complexity.Example: @noradio. (required)
     * @param geocode Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \&quot;latitude,longitude,radius\&quot;, where radius units must be specified as either \&quot;mi\&quot; (miles) or \&quot;km\&quot; (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \&quot;sub-regions\&quot; will be considered when using the radius modifier. (optional)
     * @param lang Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.Example Values: eu (optional)
     * @param locale Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.Example Values: ja (optional)
     * @param resultType Optional. Specifies what type of search results you would prefer to receive. The current default is \&quot;mixed.\&quot; Valid values include: * mixed: Include both popular and real time results in the response. * recent: return only the most recent results in the response * popular: return only the most popular results in the response. Example Values: mixed, recent, popular (optional)
     * @param count The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \&quot;rpp\&quot; parameter in the old Search API. Example Values: 100 (optional)
     * @param until Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here. Example Values: 2012-09-01 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. Example Values: 12345 (optional)
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint. Example Values: processTweets (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/search/tweets"> Documentation</a>
     */
    public ApiResponse<Void> searchTweetsWithHttpInfo(String q, String geocode, String lang, String locale, String resultType, String count, String until, String sinceId, String maxId, String includeEntities, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = searchTweetsValidateBeforeCall(q, geocode, lang, locale, resultType, count, until, sinceId, maxId, includeEntities, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a collection of relevant Tweets matching a specified query.  Please note that Twitter&#39;s search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.  In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you&#39;ll find across the REST API and platform. You may need to tolerate some inconsistencies and variance in perspectival values (fields that pertain to the perspective of the authenticating user) and embedded user objects.
     * @param q A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may additionally be limited by complexity.Example: @noradio. (required)
     * @param geocode Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \&quot;latitude,longitude,radius\&quot;, where radius units must be specified as either \&quot;mi\&quot; (miles) or \&quot;km\&quot; (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \&quot;sub-regions\&quot; will be considered when using the radius modifier. (optional)
     * @param lang Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.Example Values: eu (optional)
     * @param locale Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.Example Values: ja (optional)
     * @param resultType Optional. Specifies what type of search results you would prefer to receive. The current default is \&quot;mixed.\&quot; Valid values include: * mixed: Include both popular and real time results in the response. * recent: return only the most recent results in the response * popular: return only the most popular results in the response. Example Values: mixed, recent, popular (optional)
     * @param count The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \&quot;rpp\&quot; parameter in the old Search API. Example Values: 100 (optional)
     * @param until Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index may not go back as far as the date you specify here. Example Values: 2012-09-01 (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. Example Values: 12345 (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. Example Values: 12345 (optional)
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param paramCallback If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint. Example Values: processTweets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/search/tweets"> Documentation</a>
     */
    public okhttp3.Call searchTweetsAsync(String q, String geocode, String lang, String locale, String resultType, String count, String until, String sinceId, String maxId, String includeEntities, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTweetsValidateBeforeCall(q, geocode, lang, locale, resultType, count, until, sinceId, maxId, includeEntities, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesDestroy
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/destroy/:id"> Documentation</a>
     */
    public okhttp3.Call statusesDestroyCall(String id, String trimUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/destroy/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesDestroyValidateBeforeCall(String id, String trimUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling statusesDestroy(Async)");
        }

        return statusesDestroyCall(id, trimUser, _callback);

    }

    /**
     * 
     * Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/destroy/:id"> Documentation</a>
     */
    public void statusesDestroy(String id, String trimUser) throws ApiException {
        statusesDestroyWithHttpInfo(id, trimUser);
    }

    /**
     * 
     * Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/destroy/:id"> Documentation</a>
     */
    public ApiResponse<Void> statusesDestroyWithHttpInfo(String id, String trimUser) throws ApiException {
        okhttp3.Call localVarCall = statusesDestroyValidateBeforeCall(id, trimUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/destroy/:id"> Documentation</a>
     */
    public okhttp3.Call statusesDestroyAsync(String id, String trimUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesDestroyValidateBeforeCall(id, trimUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesHomeTimeline
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline"> Documentation</a>
     */
    public okhttp3.Call statusesHomeTimelineCall(Integer count, Long maxId, Long sinceId, String trimUser, String excludeReplies, String contributorDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/home_timeline.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        if (excludeReplies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_replies", excludeReplies));
        }

        if (contributorDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_details", contributorDetails));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesHomeTimelineValidateBeforeCall(Integer count, Long maxId, Long sinceId, String trimUser, String excludeReplies, String contributorDetails, final ApiCallback _callback) throws ApiException {
        return statusesHomeTimelineCall(count, maxId, sinceId, trimUser, excludeReplies, contributorDetails, _callback);

    }

    /**
     * 
     * Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service.  Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline"> Documentation</a>
     */
    public void statusesHomeTimeline(Integer count, Long maxId, Long sinceId, String trimUser, String excludeReplies, String contributorDetails) throws ApiException {
        statusesHomeTimelineWithHttpInfo(count, maxId, sinceId, trimUser, excludeReplies, contributorDetails);
    }

    /**
     * 
     * Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service.  Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline"> Documentation</a>
     */
    public ApiResponse<Void> statusesHomeTimelineWithHttpInfo(Integer count, Long maxId, Long sinceId, String trimUser, String excludeReplies, String contributorDetails) throws ApiException {
        okhttp3.Call localVarCall = statusesHomeTimelineValidateBeforeCall(count, maxId, sinceId, trimUser, excludeReplies, contributorDetails, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service.  Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 200. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline"> Documentation</a>
     */
    public okhttp3.Call statusesHomeTimelineAsync(Integer count, Long maxId, Long sinceId, String trimUser, String excludeReplies, String contributorDetails, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesHomeTimelineValidateBeforeCall(count, maxId, sinceId, trimUser, excludeReplies, contributorDetails, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesMentionsTimeline
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline"> Documentation</a>
     */
    public okhttp3.Call statusesMentionsTimelineCall(Integer count, Long sinceId, Long maxId, String trimUser, String contributorDetails, Boolean includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/mentions_timeline.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        if (contributorDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_details", contributorDetails));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesMentionsTimelineValidateBeforeCall(Integer count, Long sinceId, Long maxId, String trimUser, String contributorDetails, Boolean includeEntities, final ApiCallback _callback) throws ApiException {
        return statusesMentionsTimelineCall(count, sinceId, maxId, trimUser, contributorDetails, includeEntities, _callback);

    }

    /**
     * 
     * Returns the 20 most recent mentions (tweets containing a users&#39;s @screen_name) for the authenticating user.The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.This method can only return up to 800 statuses.This method will include retweets in the JSON response regardless of whether the include_rts parameter is set.
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline"> Documentation</a>
     */
    public void statusesMentionsTimeline(Integer count, Long sinceId, Long maxId, String trimUser, String contributorDetails, Boolean includeEntities) throws ApiException {
        statusesMentionsTimelineWithHttpInfo(count, sinceId, maxId, trimUser, contributorDetails, includeEntities);
    }

    /**
     * 
     * Returns the 20 most recent mentions (tweets containing a users&#39;s @screen_name) for the authenticating user.The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.This method can only return up to 800 statuses.This method will include retweets in the JSON response regardless of whether the include_rts parameter is set.
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline"> Documentation</a>
     */
    public ApiResponse<Void> statusesMentionsTimelineWithHttpInfo(Integer count, Long sinceId, Long maxId, String trimUser, String contributorDetails, Boolean includeEntities) throws ApiException {
        okhttp3.Call localVarCall = statusesMentionsTimelineValidateBeforeCall(count, sinceId, maxId, trimUser, contributorDetails, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the 20 most recent mentions (tweets containing a users&#39;s @screen_name) for the authenticating user.The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.This method can only return up to 800 statuses.This method will include retweets in the JSON response regardless of whether the include_rts parameter is set.
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline"> Documentation</a>
     */
    public okhttp3.Call statusesMentionsTimelineAsync(Integer count, Long sinceId, Long maxId, String trimUser, String contributorDetails, Boolean includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesMentionsTimelineValidateBeforeCall(count, sinceId, maxId, trimUser, contributorDetails, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesOembed
     * @param maxwidth The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below. (optional)
     * @param hideMedia Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false. (optional)
     * @param hideThread Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false. (optional)
     * @param omitScript Specifies whether the embedded Tweet HTML should include a &#39;script&#39; element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the &#39;script&#39;element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false. (optional)
     * @param align Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet. (optional)
     * @param related A value for the TWT related parameter, as described in Web Intents (https://dev.twitter.com/docs/intents). This value will be forwarded to all Web Intents calls. Example values: twitterapi, twittermedia, twitter. (optional)
     * @param lang Language code for the rendered embed. This will affect the text and localization of the rendered HTML. Example value: fr (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/oembed"> Documentation</a>
     */
    public okhttp3.Call statusesOembedCall(Integer maxwidth, String hideMedia, String hideThread, String omitScript, String align, String related, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/oembed.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxwidth", maxwidth));
        }

        if (hideMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_media", hideMedia));
        }

        if (hideThread != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_thread", hideThread));
        }

        if (omitScript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("omit_script", omitScript));
        }

        if (align != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("align", align));
        }

        if (related != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("related", related));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesOembedValidateBeforeCall(Integer maxwidth, String hideMedia, String hideThread, String omitScript, String align, String related, String lang, final ApiCallback _callback) throws ApiException {
        return statusesOembedCall(maxwidth, hideMedia, hideThread, omitScript, align, related, lang, _callback);

    }

    /**
     * 
     * Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification (http://oembed.com) for information about the response format. Either the id or url parameters must be specified in a request, it is not necessary to include both. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter&#39;s Display Guidelines (https://dev.twitter.com/terms/display-guidelines). Do not rely on any class or id parameters to stay constant in the returned markup.
     * @param maxwidth The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below. (optional)
     * @param hideMedia Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false. (optional)
     * @param hideThread Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false. (optional)
     * @param omitScript Specifies whether the embedded Tweet HTML should include a &#39;script&#39; element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the &#39;script&#39;element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false. (optional)
     * @param align Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet. (optional)
     * @param related A value for the TWT related parameter, as described in Web Intents (https://dev.twitter.com/docs/intents). This value will be forwarded to all Web Intents calls. Example values: twitterapi, twittermedia, twitter. (optional)
     * @param lang Language code for the rendered embed. This will affect the text and localization of the rendered HTML. Example value: fr (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/oembed"> Documentation</a>
     */
    public void statusesOembed(Integer maxwidth, String hideMedia, String hideThread, String omitScript, String align, String related, String lang) throws ApiException {
        statusesOembedWithHttpInfo(maxwidth, hideMedia, hideThread, omitScript, align, related, lang);
    }

    /**
     * 
     * Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification (http://oembed.com) for information about the response format. Either the id or url parameters must be specified in a request, it is not necessary to include both. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter&#39;s Display Guidelines (https://dev.twitter.com/terms/display-guidelines). Do not rely on any class or id parameters to stay constant in the returned markup.
     * @param maxwidth The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below. (optional)
     * @param hideMedia Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false. (optional)
     * @param hideThread Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false. (optional)
     * @param omitScript Specifies whether the embedded Tweet HTML should include a &#39;script&#39; element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the &#39;script&#39;element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false. (optional)
     * @param align Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet. (optional)
     * @param related A value for the TWT related parameter, as described in Web Intents (https://dev.twitter.com/docs/intents). This value will be forwarded to all Web Intents calls. Example values: twitterapi, twittermedia, twitter. (optional)
     * @param lang Language code for the rendered embed. This will affect the text and localization of the rendered HTML. Example value: fr (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/oembed"> Documentation</a>
     */
    public ApiResponse<Void> statusesOembedWithHttpInfo(Integer maxwidth, String hideMedia, String hideThread, String omitScript, String align, String related, String lang) throws ApiException {
        okhttp3.Call localVarCall = statusesOembedValidateBeforeCall(maxwidth, hideMedia, hideThread, omitScript, align, related, lang, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification (http://oembed.com) for information about the response format. Either the id or url parameters must be specified in a request, it is not necessary to include both. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter&#39;s Display Guidelines (https://dev.twitter.com/terms/display-guidelines). Do not rely on any class or id parameters to stay constant in the returned markup.
     * @param maxwidth The maximum width in pixels that the embed should be rendered at. This value is constrained to be between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter. Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like an image or video. Relatedly, the oEmbed response will not provide a value for height. Implementations that need consistent heights for Tweets should refer to the hide_thread and hide_media parameters below. (optional)
     * @param hideMedia Specifies whether the embedded Tweet should automatically expand images which were uploaded via POST statuses/update_with_media. When set to either true, t or 1 images will not be expanded. Defaults to false. (optional)
     * @param hideThread Specifies whether the embedded Tweet should automatically show the original message in the case that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be shown. Defaults to false. (optional)
     * @param omitScript Specifies whether the embedded Tweet HTML should include a &#39;script&#39; element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the &#39;script&#39;element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false. (optional)
     * @param align Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet. (optional)
     * @param related A value for the TWT related parameter, as described in Web Intents (https://dev.twitter.com/docs/intents). This value will be forwarded to all Web Intents calls. Example values: twitterapi, twittermedia, twitter. (optional)
     * @param lang Language code for the rendered embed. This will affect the text and localization of the rendered HTML. Example value: fr (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/oembed"> Documentation</a>
     */
    public okhttp3.Call statusesOembedAsync(Integer maxwidth, String hideMedia, String hideThread, String omitScript, String align, String related, String lang, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesOembedValidateBeforeCall(maxwidth, hideMedia, hideThread, omitScript, align, related, lang, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesRetweets
     * @param id The numerical ID of the desired status. (required)
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 100. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id"> Documentation</a>
     */
    public okhttp3.Call statusesRetweetsCall(String id, String count, String trimUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/retweets/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesRetweetsValidateBeforeCall(String id, String count, String trimUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling statusesRetweets(Async)");
        }

        return statusesRetweetsCall(id, count, trimUser, _callback);

    }

    /**
     * 
     * Returns up to 100 of the first retweets of a given tweet.
     * @param id The numerical ID of the desired status. (required)
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 100. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id"> Documentation</a>
     */
    public void statusesRetweets(String id, String count, String trimUser) throws ApiException {
        statusesRetweetsWithHttpInfo(id, count, trimUser);
    }

    /**
     * 
     * Returns up to 100 of the first retweets of a given tweet.
     * @param id The numerical ID of the desired status. (required)
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 100. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id"> Documentation</a>
     */
    public ApiResponse<Void> statusesRetweetsWithHttpInfo(String id, String count, String trimUser) throws ApiException {
        okhttp3.Call localVarCall = statusesRetweetsValidateBeforeCall(id, count, trimUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns up to 100 of the first retweets of a given tweet.
     * @param id The numerical ID of the desired status. (required)
     * @param count Specifies the number of records to retrieve. Must be less than or equal to 100. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id"> Documentation</a>
     */
    public okhttp3.Call statusesRetweetsAsync(String id, String count, String trimUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesRetweetsValidateBeforeCall(id, count, trimUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesShow
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param includeMyRetweet When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id"> Documentation</a>
     */
    public okhttp3.Call statusesShowCall(String id, String trimUser, String includeMyRetweet, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/show/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        if (includeMyRetweet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_my_retweet", includeMyRetweet));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesShowValidateBeforeCall(String id, String trimUser, String includeMyRetweet, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling statusesShow(Async)");
        }

        return statusesShowCall(id, trimUser, includeMyRetweet, includeEntities, _callback);

    }

    /**
     * 
     * Returns a single status, specified by the id parameter below. The status&#39;s author will be returned inline.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param includeMyRetweet When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id"> Documentation</a>
     */
    public void statusesShow(String id, String trimUser, String includeMyRetweet, String includeEntities) throws ApiException {
        statusesShowWithHttpInfo(id, trimUser, includeMyRetweet, includeEntities);
    }

    /**
     * 
     * Returns a single status, specified by the id parameter below. The status&#39;s author will be returned inline.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param includeMyRetweet When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id"> Documentation</a>
     */
    public ApiResponse<Void> statusesShowWithHttpInfo(String id, String trimUser, String includeMyRetweet, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = statusesShowValidateBeforeCall(id, trimUser, includeMyRetweet, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a single status, specified by the id parameter below. The status&#39;s author will be returned inline.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param includeMyRetweet When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet. (optional)
     * @param includeEntities The entities node will be disincluded when set to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id"> Documentation</a>
     */
    public okhttp3.Call statusesShowAsync(String id, String trimUser, String includeMyRetweet, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesShowValidateBeforeCall(id, trimUser, includeMyRetweet, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesUpdate
     * @param status The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link short-url wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may effect character counts. (required)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. (optional, default to 37.426363)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter. (optional, default to -122.141114)
     * @param placeId A place in the world. These IDs can be retrieved from GET geo/reverse_geocode (https://dev.twitter.com/docs/api/1/get/geo/reverse_geocode). (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional, default to false)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update"> Documentation</a>
     */
    public okhttp3.Call statusesUpdateCall(String status, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, String trimUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (inReplyToStatusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_reply_to_status_id", inReplyToStatusId));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (_long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("long", _long));
        }

        if (placeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("place_id", placeId));
        }

        if (displayCoordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_coordinates", displayCoordinates));
        }

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesUpdateValidateBeforeCall(String status, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, String trimUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling statusesUpdate(Async)");
        }

        return statusesUpdateCall(status, inReplyToStatusId, lat, _long, placeId, displayCoordinates, trimUser, _callback);

    }

    /**
     * 
     * Updates the authenticating user&#39;s status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). For each update attempt, the update text is compared with the authenticating user&#39;s recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row. While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.
     * @param status The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link short-url wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may effect character counts. (required)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. (optional, default to 37.426363)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter. (optional, default to -122.141114)
     * @param placeId A place in the world. These IDs can be retrieved from GET geo/reverse_geocode (https://dev.twitter.com/docs/api/1/get/geo/reverse_geocode). (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional, default to false)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update"> Documentation</a>
     */
    public void statusesUpdate(String status, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, String trimUser) throws ApiException {
        statusesUpdateWithHttpInfo(status, inReplyToStatusId, lat, _long, placeId, displayCoordinates, trimUser);
    }

    /**
     * 
     * Updates the authenticating user&#39;s status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). For each update attempt, the update text is compared with the authenticating user&#39;s recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row. While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.
     * @param status The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link short-url wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may effect character counts. (required)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. (optional, default to 37.426363)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter. (optional, default to -122.141114)
     * @param placeId A place in the world. These IDs can be retrieved from GET geo/reverse_geocode (https://dev.twitter.com/docs/api/1/get/geo/reverse_geocode). (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional, default to false)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update"> Documentation</a>
     */
    public ApiResponse<Void> statusesUpdateWithHttpInfo(String status, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, String trimUser) throws ApiException {
        okhttp3.Call localVarCall = statusesUpdateValidateBeforeCall(status, inReplyToStatusId, lat, _long, placeId, displayCoordinates, trimUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the authenticating user&#39;s status, also known as tweeting. To upload an image to accompany the tweet, use POST statuses/update_with_media (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). For each update attempt, the update text is compared with the authenticating user&#39;s recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row. While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.
     * @param status The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link short-url wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may effect character counts. (required)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. (optional, default to 37.426363)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter. (optional, default to -122.141114)
     * @param placeId A place in the world. These IDs can be retrieved from GET geo/reverse_geocode (https://dev.twitter.com/docs/api/1/get/geo/reverse_geocode). (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional, default to false)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update"> Documentation</a>
     */
    public okhttp3.Call statusesUpdateAsync(String status, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, String trimUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesUpdateValidateBeforeCall(status, inReplyToStatusId, lat, _long, placeId, displayCoordinates, trimUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesUpdateWithMedia
     * @param status The text of your status update. URL encode as necessary. t.co link wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current characters_reserved_per_media and max_media_per_upload values. (required)
     * @param media Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF. Animated GIFs are not supported. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current max_media_per_upload and photo_size_limit values. (required)
     * @param contentType Content type. (required)
     * @param possiblySensitive Set to true for content which may not be suitable for every audience. (optional)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. Example value: 37.7821120598956. (optional)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter. Example value: -122.400612831116. (optional)
     * @param placeId A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode. (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update_with_media"> Documentation</a>
     */
    public okhttp3.Call statusesUpdateWithMediaCall(String status, String media, String contentType, String possiblySensitive, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/update_with_media.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (media != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media", media));
        }

        if (possiblySensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("possibly_sensitive", possiblySensitive));
        }

        if (inReplyToStatusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_reply_to_status_id", inReplyToStatusId));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (_long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("long", _long));
        }

        if (placeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("place_id", placeId));
        }

        if (displayCoordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_coordinates", displayCoordinates));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesUpdateWithMediaValidateBeforeCall(String status, String media, String contentType, String possiblySensitive, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling statusesUpdateWithMedia(Async)");
        }

        // verify the required parameter 'media' is set
        if (media == null) {
            throw new ApiException("Missing the required parameter 'media' when calling statusesUpdateWithMedia(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling statusesUpdateWithMedia(Async)");
        }

        return statusesUpdateWithMediaCall(status, media, contentType, possiblySensitive, inReplyToStatusId, lat, _long, placeId, displayCoordinates, _callback);

    }

    /**
     * 
     * Updates the authenticating user&#39;s status and attaches media for upload. Unlike POST statuses/update (https://dev.twitter.com/docs/api/1.1/post/statuses/update), this method expects raw multipart data. Your POST request&#39;s Content-Type should be set to multipart/form-data with the media[] parameter. The Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error. Important: Make sure that you&#39;re using upload.twitter.com as your host while posting statuses with media. It is strongly recommended to use SSL with this method.
     * @param status The text of your status update. URL encode as necessary. t.co link wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current characters_reserved_per_media and max_media_per_upload values. (required)
     * @param media Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF. Animated GIFs are not supported. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current max_media_per_upload and photo_size_limit values. (required)
     * @param contentType Content type. (required)
     * @param possiblySensitive Set to true for content which may not be suitable for every audience. (optional)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. Example value: 37.7821120598956. (optional)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter. Example value: -122.400612831116. (optional)
     * @param placeId A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode. (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update_with_media"> Documentation</a>
     */
    public void statusesUpdateWithMedia(String status, String media, String contentType, String possiblySensitive, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates) throws ApiException {
        statusesUpdateWithMediaWithHttpInfo(status, media, contentType, possiblySensitive, inReplyToStatusId, lat, _long, placeId, displayCoordinates);
    }

    /**
     * 
     * Updates the authenticating user&#39;s status and attaches media for upload. Unlike POST statuses/update (https://dev.twitter.com/docs/api/1.1/post/statuses/update), this method expects raw multipart data. Your POST request&#39;s Content-Type should be set to multipart/form-data with the media[] parameter. The Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error. Important: Make sure that you&#39;re using upload.twitter.com as your host while posting statuses with media. It is strongly recommended to use SSL with this method.
     * @param status The text of your status update. URL encode as necessary. t.co link wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current characters_reserved_per_media and max_media_per_upload values. (required)
     * @param media Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF. Animated GIFs are not supported. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current max_media_per_upload and photo_size_limit values. (required)
     * @param contentType Content type. (required)
     * @param possiblySensitive Set to true for content which may not be suitable for every audience. (optional)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. Example value: 37.7821120598956. (optional)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter. Example value: -122.400612831116. (optional)
     * @param placeId A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode. (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update_with_media"> Documentation</a>
     */
    public ApiResponse<Void> statusesUpdateWithMediaWithHttpInfo(String status, String media, String contentType, String possiblySensitive, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates) throws ApiException {
        okhttp3.Call localVarCall = statusesUpdateWithMediaValidateBeforeCall(status, media, contentType, possiblySensitive, inReplyToStatusId, lat, _long, placeId, displayCoordinates, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the authenticating user&#39;s status and attaches media for upload. Unlike POST statuses/update (https://dev.twitter.com/docs/api/1.1/post/statuses/update), this method expects raw multipart data. Your POST request&#39;s Content-Type should be set to multipart/form-data with the media[] parameter. The Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error. Important: Make sure that you&#39;re using upload.twitter.com as your host while posting statuses with media. It is strongly recommended to use SSL with this method.
     * @param status The text of your status update. URL encode as necessary. t.co link wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current characters_reserved_per_media and max_media_per_upload values. (required)
     * @param media Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF. Animated GIFs are not supported. Note: Request the GET help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the current max_media_per_upload and photo_size_limit values. (required)
     * @param contentType Content type. (required)
     * @param possiblySensitive Set to true for content which may not be suitable for every audience. (optional)
     * @param inReplyToStatusId The ID of an existing status that the update is in reply to. Note: This parameter will be ignored unless the author of the tweet this parameter references is mentioned within the status text. Therefore, you must include @username, where username is the author of the referenced tweet, within the update. (optional)
     * @param lat The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn&#39;t a corresponding long parameter. Example value: 37.7821120598956. (optional)
     * @param _long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter. Example value: -122.400612831116. (optional)
     * @param placeId A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode. (optional)
     * @param displayCoordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/update_with_media"> Documentation</a>
     */
    public okhttp3.Call statusesUpdateWithMediaAsync(String status, String media, String contentType, String possiblySensitive, String inReplyToStatusId, String lat, String _long, String placeId, String displayCoordinates, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesUpdateWithMediaValidateBeforeCall(status, media, contentType, possiblySensitive, inReplyToStatusId, lat, _long, placeId, displayCoordinates, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesUserTimeline
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeRts When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you&#39;re using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline"> Documentation</a>
     */
    public okhttp3.Call statusesUserTimelineCall(Integer count, Long sinceId, Long maxId, String trimUser, Boolean excludeReplies, Boolean contributorDetails, Boolean includeRts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/user_timeline.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        if (excludeReplies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_replies", excludeReplies));
        }

        if (contributorDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_details", contributorDetails));
        }

        if (includeRts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_rts", includeRts));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesUserTimelineValidateBeforeCall(Integer count, Long sinceId, Long maxId, String trimUser, Boolean excludeReplies, Boolean contributorDetails, Boolean includeRts, final ApiCallback _callback) throws ApiException {
        return statusesUserTimelineCall(count, sinceId, maxId, trimUser, excludeReplies, contributorDetails, includeRts, _callback);

    }

    /**
     * 
     * Returns the 20 most recent statuses posted by the authenticating user. It is also possible to request another user&#39;s timeline by using the screen_name or user_id parameter. The other users timeline will only be visible if they are not protected, or if the authenticating user&#39;s follow request was accepted by the protected user. The timeline returned is the equivalent of the one seen when you view a user&#39;s profile on twitter.com. This method can only return up to 3,200 of a user&#39;s most recent statuses. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is specified when requesting this resource. This method will not include retweets in the XML and JSON responses unless the include_rts parameter is set. The RSS and Atom responses will always include retweets as statuses prefixed with RT, regardless of provided parameters. Always specify either an user_id or screen_name when requesting a user timeline.
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeRts When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you&#39;re using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline"> Documentation</a>
     */
    public void statusesUserTimeline(Integer count, Long sinceId, Long maxId, String trimUser, Boolean excludeReplies, Boolean contributorDetails, Boolean includeRts) throws ApiException {
        statusesUserTimelineWithHttpInfo(count, sinceId, maxId, trimUser, excludeReplies, contributorDetails, includeRts);
    }

    /**
     * 
     * Returns the 20 most recent statuses posted by the authenticating user. It is also possible to request another user&#39;s timeline by using the screen_name or user_id parameter. The other users timeline will only be visible if they are not protected, or if the authenticating user&#39;s follow request was accepted by the protected user. The timeline returned is the equivalent of the one seen when you view a user&#39;s profile on twitter.com. This method can only return up to 3,200 of a user&#39;s most recent statuses. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is specified when requesting this resource. This method will not include retweets in the XML and JSON responses unless the include_rts parameter is set. The RSS and Atom responses will always include retweets as statuses prefixed with RT, regardless of provided parameters. Always specify either an user_id or screen_name when requesting a user timeline.
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeRts When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you&#39;re using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline"> Documentation</a>
     */
    public ApiResponse<Void> statusesUserTimelineWithHttpInfo(Integer count, Long sinceId, Long maxId, String trimUser, Boolean excludeReplies, Boolean contributorDetails, Boolean includeRts) throws ApiException {
        okhttp3.Call localVarCall = statusesUserTimelineValidateBeforeCall(count, sinceId, maxId, trimUser, excludeReplies, contributorDetails, includeRts, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the 20 most recent statuses posted by the authenticating user. It is also possible to request another user&#39;s timeline by using the screen_name or user_id parameter. The other users timeline will only be visible if they are not protected, or if the authenticating user&#39;s follow request was accepted by the protected user. The timeline returned is the equivalent of the one seen when you view a user&#39;s profile on twitter.com. This method can only return up to 3,200 of a user&#39;s most recent statuses. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is specified when requesting this resource. This method will not include retweets in the XML and JSON responses unless the include_rts parameter is set. The RSS and Atom responses will always include retweets as statuses prefixed with RT, regardless of provided parameters. Always specify either an user_id or screen_name when requesting a user timeline.
     * @param count Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts&#x3D;1 when using this API method. (optional)
     * @param sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)
     * @param maxId Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param excludeReplies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets — this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses. (optional)
     * @param contributorDetails This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included. (optional)
     * @param includeRts When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you&#39;re using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline"> Documentation</a>
     */
    public okhttp3.Call statusesUserTimelineAsync(Integer count, Long sinceId, Long maxId, String trimUser, Boolean excludeReplies, Boolean contributorDetails, Boolean includeRts, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesUserTimelineValidateBeforeCall(count, sinceId, maxId, trimUser, excludeReplies, contributorDetails, includeRts, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusesretweetid
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id"> Documentation</a>
     */
    public okhttp3.Call statusesretweetidCall(String id, String trimUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statuses/retweet/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trimUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trim_user", trimUser));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusesretweetidValidateBeforeCall(String id, String trimUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling statusesretweetid(Async)");
        }

        return statusesretweetidCall(id, trimUser, _callback);

    }

    /**
     * 
     * Retweets a tweet. Returns the original tweet with retweet details embedded.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id"> Documentation</a>
     */
    public void statusesretweetid(String id, String trimUser) throws ApiException {
        statusesretweetidWithHttpInfo(id, trimUser);
    }

    /**
     * 
     * Retweets a tweet. Returns the original tweet with retweet details embedded.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id"> Documentation</a>
     */
    public ApiResponse<Void> statusesretweetidWithHttpInfo(String id, String trimUser) throws ApiException {
        okhttp3.Call localVarCall = statusesretweetidValidateBeforeCall(id, trimUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retweets a tweet. Returns the original tweet with retweet details embedded.
     * @param id The numerical ID of the desired status. (required)
     * @param trimUser When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id"> Documentation</a>
     */
    public okhttp3.Call statusesretweetidAsync(String id, String trimUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusesretweetidValidateBeforeCall(id, trimUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for trendsAvailable
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/available"> Documentation</a>
     */
    public okhttp3.Call trendsAvailableCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trends/available.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trendsAvailableValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return trendsAvailableCall(_callback);

    }

    /**
     * 
     * Returns the locations that Twitter has trending topic information for.  The response is an array of \&quot;locations\&quot; that encode the location&#39;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.  A WOEID is a Yahoo! Where On Earth ID.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/available"> Documentation</a>
     */
    public void trendsAvailable() throws ApiException {
        trendsAvailableWithHttpInfo();
    }

    /**
     * 
     * Returns the locations that Twitter has trending topic information for.  The response is an array of \&quot;locations\&quot; that encode the location&#39;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.  A WOEID is a Yahoo! Where On Earth ID.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/available"> Documentation</a>
     */
    public ApiResponse<Void> trendsAvailableWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = trendsAvailableValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the locations that Twitter has trending topic information for.  The response is an array of \&quot;locations\&quot; that encode the location&#39;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.  A WOEID is a Yahoo! Where On Earth ID.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/available"> Documentation</a>
     */
    public okhttp3.Call trendsAvailableAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trendsAvailableValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for trendsClosest
     * @param lat If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: 37.781157 (optional)
     * @param _long If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: -122.400612831116 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/closest"> Documentation</a>
     */
    public okhttp3.Call trendsClosestCall(String lat, String _long, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trends/closest.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (_long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("long", _long));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trendsClosestValidateBeforeCall(String lat, String _long, final ApiCallback _callback) throws ApiException {
        return trendsClosestCall(lat, _long, _callback);

    }

    /**
     * 
     * Returns the locations that Twitter has trending topic information for, closest to a specified location.  The response is an array of \&quot;locations\&quot; that encode the location&#39;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.  A WOEID is a Yahoo! Where On Earth ID.
     * @param lat If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: 37.781157 (optional)
     * @param _long If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: -122.400612831116 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/closest"> Documentation</a>
     */
    public void trendsClosest(String lat, String _long) throws ApiException {
        trendsClosestWithHttpInfo(lat, _long);
    }

    /**
     * 
     * Returns the locations that Twitter has trending topic information for, closest to a specified location.  The response is an array of \&quot;locations\&quot; that encode the location&#39;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.  A WOEID is a Yahoo! Where On Earth ID.
     * @param lat If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: 37.781157 (optional)
     * @param _long If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: -122.400612831116 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/closest"> Documentation</a>
     */
    public ApiResponse<Void> trendsClosestWithHttpInfo(String lat, String _long) throws ApiException {
        okhttp3.Call localVarCall = trendsClosestValidateBeforeCall(lat, _long, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the locations that Twitter has trending topic information for, closest to a specified location.  The response is an array of \&quot;locations\&quot; that encode the location&#39;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.  A WOEID is a Yahoo! Where On Earth ID.
     * @param lat If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: 37.781157 (optional)
     * @param _long If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.  Example Values: -122.400612831116 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/closest"> Documentation</a>
     */
    public okhttp3.Call trendsClosestAsync(String lat, String _long, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trendsClosestValidateBeforeCall(lat, _long, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for trendsPlace
     * @param id The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. (required)
     * @param exclude Setting this equal to hashtags will remove all hashtags from the trends list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/place"> Documentation</a>
     */
    public okhttp3.Call trendsPlaceCall(String id, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trends/place.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trendsPlaceValidateBeforeCall(String id, String exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trendsPlace(Async)");
        }

        return trendsPlaceCall(id, exclude, _callback);

    }

    /**
     * 
     * Returns the top 10 trending topics for a specific WOEID, if trending information is available for it.  The response is an array of \&quot;trend\&quot; objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.  This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.
     * @param id The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. (required)
     * @param exclude Setting this equal to hashtags will remove all hashtags from the trends list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/place"> Documentation</a>
     */
    public void trendsPlace(String id, String exclude) throws ApiException {
        trendsPlaceWithHttpInfo(id, exclude);
    }

    /**
     * 
     * Returns the top 10 trending topics for a specific WOEID, if trending information is available for it.  The response is an array of \&quot;trend\&quot; objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.  This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.
     * @param id The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. (required)
     * @param exclude Setting this equal to hashtags will remove all hashtags from the trends list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/place"> Documentation</a>
     */
    public ApiResponse<Void> trendsPlaceWithHttpInfo(String id, String exclude) throws ApiException {
        okhttp3.Call localVarCall = trendsPlaceValidateBeforeCall(id, exclude, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the top 10 trending topics for a specific WOEID, if trending information is available for it.  The response is an array of \&quot;trend\&quot; objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.  This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.
     * @param id The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. (required)
     * @param exclude Setting this equal to hashtags will remove all hashtags from the trends list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/trends/place"> Documentation</a>
     */
    public okhttp3.Call trendsPlaceAsync(String id, String exclude, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trendsPlaceValidateBeforeCall(id, exclude, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersContributees
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributees"> Documentation</a>
     */
    public okhttp3.Call usersContributeesCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/contributees.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersContributeesValidateBeforeCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return usersContributeesCall(includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Returns a collection of users that the specified user can contribute to.
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributees"> Documentation</a>
     */
    public void usersContributees(String includeEntities, String skipStatus) throws ApiException {
        usersContributeesWithHttpInfo(includeEntities, skipStatus);
    }

    /**
     * 
     * Returns a collection of users that the specified user can contribute to.
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributees"> Documentation</a>
     */
    public ApiResponse<Void> usersContributeesWithHttpInfo(String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = usersContributeesValidateBeforeCall(includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a collection of users that the specified user can contribute to.
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributees"> Documentation</a>
     */
    public okhttp3.Call usersContributeesAsync(String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersContributeesValidateBeforeCall(includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersContributors
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributors"> Documentation</a>
     */
    public okhttp3.Call usersContributorsCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/contributors.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        if (skipStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_status", skipStatus));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersContributorsValidateBeforeCall(String includeEntities, String skipStatus, final ApiCallback _callback) throws ApiException {
        return usersContributorsCall(includeEntities, skipStatus, _callback);

    }

    /**
     * 
     * Returns a collection of users who can contribute to the specified account.
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributors"> Documentation</a>
     */
    public void usersContributors(String includeEntities, String skipStatus) throws ApiException {
        usersContributorsWithHttpInfo(includeEntities, skipStatus);
    }

    /**
     * 
     * Returns a collection of users who can contribute to the specified account.
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributors"> Documentation</a>
     */
    public ApiResponse<Void> usersContributorsWithHttpInfo(String includeEntities, String skipStatus) throws ApiException {
        okhttp3.Call localVarCall = usersContributorsValidateBeforeCall(includeEntities, skipStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a collection of users who can contribute to the specified account.
     * @param includeEntities The entities node will be disincluded when set to false. Example Values: false (optional)
     * @param skipStatus When set to either true, t or 1 statuses will not be included in the returned user objects. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/contributors"> Documentation</a>
     */
    public okhttp3.Call usersContributorsAsync(String includeEntities, String skipStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersContributorsValidateBeforeCall(includeEntities, skipStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersLookup
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests.  Example Values: twitterapi,twitter (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests.  Example Values: 783214,6253282 (optional)
     * @param includeEntities The entities node that may appear within embedded statuses will be disincluded when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/lookup"> Documentation</a>
     */
    public okhttp3.Call usersLookupCall(String screenName, String userId, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/lookup.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersLookupValidateBeforeCall(String screenName, String userId, String includeEntities, final ApiCallback _callback) throws ApiException {
        return usersLookupCall(screenName, userId, includeEntities, _callback);

    }

    /**
     * 
     * Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.  This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.  GET users/show is used to retrieve a single user object.
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests.  Example Values: twitterapi,twitter (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests.  Example Values: 783214,6253282 (optional)
     * @param includeEntities The entities node that may appear within embedded statuses will be disincluded when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/lookup"> Documentation</a>
     */
    public void usersLookup(String screenName, String userId, String includeEntities) throws ApiException {
        usersLookupWithHttpInfo(screenName, userId, includeEntities);
    }

    /**
     * 
     * Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.  This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.  GET users/show is used to retrieve a single user object.
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests.  Example Values: twitterapi,twitter (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests.  Example Values: 783214,6253282 (optional)
     * @param includeEntities The entities node that may appear within embedded statuses will be disincluded when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/lookup"> Documentation</a>
     */
    public ApiResponse<Void> usersLookupWithHttpInfo(String screenName, String userId, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = usersLookupValidateBeforeCall(screenName, userId, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.  This method is especially useful when used in conjunction with collections of user IDs returned from GET friends/ids and GET followers/ids.  GET users/show is used to retrieve a single user object.
     * @param screenName A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests.  Example Values: twitterapi,twitter (optional)
     * @param userId A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests.  Example Values: 783214,6253282 (optional)
     * @param includeEntities The entities node that may appear within embedded statuses will be disincluded when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/lookup"> Documentation</a>
     */
    public okhttp3.Call usersLookupAsync(String screenName, String userId, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersLookupValidateBeforeCall(screenName, userId, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersReportSpam
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/report_spam"> Documentation</a>
     */
    public okhttp3.Call usersReportSpamCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/report_spam.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersReportSpamValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersReportSpamCall(_callback);

    }

    /**
     * 
     * The user specified in the id is blocked by the authenticated user and reported as a spammer.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/report_spam"> Documentation</a>
     */
    public void usersReportSpam() throws ApiException {
        usersReportSpamWithHttpInfo();
    }

    /**
     * 
     * The user specified in the id is blocked by the authenticated user and reported as a spammer.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/report_spam"> Documentation</a>
     */
    public ApiResponse<Void> usersReportSpamWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersReportSpamValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The user specified in the id is blocked by the authenticated user and reported as a spammer.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/post/report_spam"> Documentation</a>
     */
    public okhttp3.Call usersReportSpamAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersReportSpamValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSearch
     * @param q The search query to run against people search.  Example Values: Twitter%20API (required)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param count The number of potential user results to retrieve per page. This value has a maximum of 20.  Example Values: 5 (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/search"> Documentation</a>
     */
    public okhttp3.Call usersSearchCall(String q, String page, String count, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSearchValidateBeforeCall(String q, String page, String count, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling usersSearch(Async)");
        }

        return usersSearchCall(q, page, count, includeEntities, _callback);

    }

    /**
     * 
     * Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.  Only the first 1,000 matching results are available.
     * @param q The search query to run against people search.  Example Values: Twitter%20API (required)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param count The number of potential user results to retrieve per page. This value has a maximum of 20.  Example Values: 5 (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/search"> Documentation</a>
     */
    public void usersSearch(String q, String page, String count, String includeEntities) throws ApiException {
        usersSearchWithHttpInfo(q, page, count, includeEntities);
    }

    /**
     * 
     * Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.  Only the first 1,000 matching results are available.
     * @param q The search query to run against people search.  Example Values: Twitter%20API (required)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param count The number of potential user results to retrieve per page. This value has a maximum of 20.  Example Values: 5 (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/search"> Documentation</a>
     */
    public ApiResponse<Void> usersSearchWithHttpInfo(String q, String page, String count, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = usersSearchValidateBeforeCall(q, page, count, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.  Only the first 1,000 matching results are available.
     * @param q The search query to run against people search.  Example Values: Twitter%20API (required)
     * @param page Specifies the page of results to retrieve.  Example Values: 3 (optional)
     * @param count The number of potential user results to retrieve per page. This value has a maximum of 20.  Example Values: 5 (optional)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/search"> Documentation</a>
     */
    public okhttp3.Call usersSearchAsync(String q, String page, String count, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSearchValidateBeforeCall(q, page, count, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersShow
     * @param screenName The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Either an id or screen_name is required for this method.  Example Values: 12345 (required)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/show"> Documentation</a>
     */
    public okhttp3.Call usersShowCall(String screenName, String userId, String includeEntities, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/show.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (includeEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_entities", includeEntities));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersShowValidateBeforeCall(String screenName, String userId, String includeEntities, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling usersShow(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersShow(Async)");
        }

        return usersShowCall(screenName, userId, includeEntities, _callback);

    }

    /**
     * 
     * Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author&#39;s most recent Tweet will be returned inline when possible.  GET users/lookup is used to retrieve a bulk collection of user objects.
     * @param screenName The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Either an id or screen_name is required for this method.  Example Values: 12345 (required)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/show"> Documentation</a>
     */
    public void usersShow(String screenName, String userId, String includeEntities) throws ApiException {
        usersShowWithHttpInfo(screenName, userId, includeEntities);
    }

    /**
     * 
     * Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author&#39;s most recent Tweet will be returned inline when possible.  GET users/lookup is used to retrieve a bulk collection of user objects.
     * @param screenName The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Either an id or screen_name is required for this method.  Example Values: 12345 (required)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/show"> Documentation</a>
     */
    public ApiResponse<Void> usersShowWithHttpInfo(String screenName, String userId, String includeEntities) throws ApiException {
        okhttp3.Call localVarCall = usersShowValidateBeforeCall(screenName, userId, includeEntities, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author&#39;s most recent Tweet will be returned inline when possible.  GET users/lookup is used to retrieve a bulk collection of user objects.
     * @param screenName The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.  Example Values: noradio (required)
     * @param userId The ID of the user for whom to return results for. Either an id or screen_name is required for this method.  Example Values: 12345 (required)
     * @param includeEntities The entities node will be disincluded when set to false.  Example Values: false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/show"> Documentation</a>
     */
    public okhttp3.Call usersShowAsync(String screenName, String userId, String includeEntities, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersShowValidateBeforeCall(screenName, userId, includeEntities, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSuggestions
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions"> Documentation</a>
     */
    public okhttp3.Call usersSuggestionsCall(String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/suggestions.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSuggestionsValidateBeforeCall(String lang, final ApiCallback _callback) throws ApiException {
        return usersSuggestionsCall(lang, _callback);

    }

    /**
     * 
     * Access to Twitter&#39;s suggested user list. This returns the list of suggested user categories. The category can be used in GET users/suggestions/:slug to get the users in that category.
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions"> Documentation</a>
     */
    public void usersSuggestions(String lang) throws ApiException {
        usersSuggestionsWithHttpInfo(lang);
    }

    /**
     * 
     * Access to Twitter&#39;s suggested user list. This returns the list of suggested user categories. The category can be used in GET users/suggestions/:slug to get the users in that category.
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions"> Documentation</a>
     */
    public ApiResponse<Void> usersSuggestionsWithHttpInfo(String lang) throws ApiException {
        okhttp3.Call localVarCall = usersSuggestionsValidateBeforeCall(lang, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Access to Twitter&#39;s suggested user list. This returns the list of suggested user categories. The category can be used in GET users/suggestions/:slug to get the users in that category.
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions"> Documentation</a>
     */
    public okhttp3.Call usersSuggestionsAsync(String lang, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSuggestionsValidateBeforeCall(lang, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSuggestionsSlug
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug"> Documentation</a>
     */
    public okhttp3.Call usersSuggestionsSlugCall(String slug, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/suggestions/{slug}.json"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSuggestionsSlugValidateBeforeCall(String slug, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling usersSuggestionsSlug(Async)");
        }

        return usersSuggestionsSlugCall(slug, lang, _callback);

    }

    /**
     * 
     * Access the users in a given category of the Twitter suggested user list. It is recommended that applications cache this data for no more than one hour.
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug"> Documentation</a>
     */
    public void usersSuggestionsSlug(String slug, String lang) throws ApiException {
        usersSuggestionsSlugWithHttpInfo(slug, lang);
    }

    /**
     * 
     * Access the users in a given category of the Twitter suggested user list. It is recommended that applications cache this data for no more than one hour.
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug"> Documentation</a>
     */
    public ApiResponse<Void> usersSuggestionsSlugWithHttpInfo(String slug, String lang) throws ApiException {
        okhttp3.Call localVarCall = usersSuggestionsSlugValidateBeforeCall(slug, lang, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Access the users in a given category of the Twitter suggested user list. It is recommended that applications cache this data for no more than one hour.
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @param lang Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help/languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug"> Documentation</a>
     */
    public okhttp3.Call usersSuggestionsSlugAsync(String slug, String lang, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSuggestionsSlugValidateBeforeCall(slug, lang, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSuggestionsslugmembers
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug/members"> Documentation</a>
     */
    public okhttp3.Call usersSuggestionsslugmembersCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/suggestions/{slug}/members.json"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSuggestionsslugmembersValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling usersSuggestionsslugmembers(Async)");
        }

        return usersSuggestionsslugmembersCall(slug, _callback);

    }

    /**
     * 
     * Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug/members"> Documentation</a>
     */
    public void usersSuggestionsslugmembers(String slug) throws ApiException {
        usersSuggestionsslugmembersWithHttpInfo(slug);
    }

    /**
     * 
     * Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug/members"> Documentation</a>
     */
    public ApiResponse<Void> usersSuggestionsslugmembersWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = usersSuggestionsslugmembersValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.
     * @param slug The short name of list or a category  Example Values: twitter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://dev.twitter.com/docs/api/1.1/get/users/suggestions/%3Aslug/members"> Documentation</a>
     */
    public okhttp3.Call usersSuggestionsslugmembersAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSuggestionsslugmembersValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
