/**
 * Twitter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@twitter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  trend_location_woeid QString [optional]
    * @param[in]  sleep_time_enabled QString [optional]
    * @param[in]  start_sleep_time QString [optional]
    * @param[in]  end_sleep_time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void account_settings_get(const ::OpenAPI::OptionalParam<QString> &trend_location_woeid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sleep_time_enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_sleep_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_sleep_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  trend_location_woeid QString [optional]
    * @param[in]  sleep_time_enabled QString [optional]
    * @param[in]  start_sleep_time QString [optional]
    * @param[in]  end_sleep_time QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void account_settings_post(const ::OpenAPI::OptionalParam<QString> &trend_location_woeid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sleep_time_enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_sleep_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_sleep_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device QString [required]
    * @param[in]  include_entities QString [optional]
    */
    virtual void account_updateDeliveryDevice(const QString &device, const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void account_updateProfile(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  tile QString [optional]
    * @param[in]  use QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void accounts_updateProfileBackgroundImage(const QString &content_type, const ::OpenAPI::OptionalParam<QString> &tile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  profile_background_color QString [optional]
    * @param[in]  profile_link_color QString [optional]
    * @param[in]  profile_sidebar_border_color QString [optional]
    * @param[in]  profile_sidebar_fill_color QString [optional]
    * @param[in]  profile_text_color QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void accounts_updateProfileColors(const ::OpenAPI::OptionalParam<QString> &profile_background_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_link_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_sidebar_border_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_sidebar_fill_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_text_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  skip_status QString [optional]
    */
    virtual void accounts_updateProfileImage(const QString &content_type, const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resources QString [optional]
    */
    virtual void application_rateLimitStatus(const ::OpenAPI::OptionalParam<QString> &resources = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void blocks_create(const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void blocks_destroy(const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stringify_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void blocks_ids(const ::OpenAPI::OptionalParam<QString> &stringify_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void blocks_list(const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void directMessages(const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_entities QString [optional]
    */
    virtual void directMessages_destroy(const QString &id, const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  text QString [required]
    */
    virtual void directMessages_new(const QString &text);

    /**
    * @param[in]  count QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  page QString [optional]
    */
    virtual void directMessages_sent(const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void directMessages_show(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_entities QString [optional]
    */
    virtual void favorites_create(const QString &id, const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_entities QString [optional]
    */
    virtual void favorites_destroy(const QString &id, const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  include_entities QString [optional]
    */
    virtual void favorites_list(const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stringify_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void followers_ids(const ::OpenAPI::OptionalParam<QString> &stringify_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stringify_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void friends_ids(const ::OpenAPI::OptionalParam<QString> &stringify_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  follow QString [optional]
    */
    virtual void friendships_create(const ::OpenAPI::OptionalParam<QString> &follow = ::OpenAPI::OptionalParam<QString>());


    virtual void friendships_destroy();

    /**
    * @param[in]  stringify_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void friendships_incoming(const ::OpenAPI::OptionalParam<QString> &stringify_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());


    virtual void friendships_lookup();

    /**
    * @param[in]  stringify_ids QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void friendships_outgoing(const ::OpenAPI::OptionalParam<QString> &stringify_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  target_id QString [required]
    * @param[in]  target_screen_name QString [required]
    * @param[in]  source_id QString [optional]
    * @param[in]  source_screen_name QString [optional]
    */
    virtual void friendships_show(const QString &target_id, const QString &target_screen_name, const ::OpenAPI::OptionalParam<QString> &source_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_screen_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device QString [required]
    * @param[in]  retweets QString [required]
    */
    virtual void friendships_update(const QString &device, const QString &retweets);

    /**
    * @param[in]  place_id QString [required]
    */
    virtual void geo_placeId(const QString &place_id);

    /**
    * @param[in]  attributestreet_address QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void geo_places(const ::OpenAPI::OptionalParam<QString> &attributestreet_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat QString [required]
    * @param[in]  r_long QString [required]
    * @param[in]  accuracy QString [optional]
    * @param[in]  granularity QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void geo_reverseGeocode(const QString &lat, const QString &r_long, const ::OpenAPI::OptionalParam<QString> &accuracy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &granularity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accuracy QString [optional]
    * @param[in]  granularity QString [optional]
    * @param[in]  contained_within QString [optional]
    * @param[in]  attributestreet_address QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void geo_search(const ::OpenAPI::OptionalParam<QString> &accuracy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &granularity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contained_within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributestreet_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contained_within QString [optional]
    * @param[in]  attributestreet_address QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void geo_similarPlaces(const ::OpenAPI::OptionalParam<QString> &contained_within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributestreet_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());


    virtual void help_configurations();


    virtual void help_languages();


    virtual void help_privacy();


    virtual void help_tos();

    /**
    * @param[in]  name QString [required]
    * @param[in]  mode QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void lists_create(const QString &name, const ::OpenAPI::OptionalParam<QString> &mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    */
    virtual void lists_destroy(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_name QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void lists_list(const QString &screen_name, const QString &user_id);

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void lists_members(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    */
    virtual void lists_members_create(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  screen_name QString [optional]
    */
    virtual void lists_members_createAll(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  slug QString [required]
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  screen_name QString [optional]
    */
    virtual void lists_members_destroy(const QString &list_id, const QString &slug, const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  screen_name QString [optional]
    * @param[in]  user_id QString [optional]
    */
    virtual void lists_members_destroyAll(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void lists_members_show(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  screen_name QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  filter_to_owned_lists QString [optional]
    */
    virtual void lists_memberships(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_to_owned_lists = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    */
    virtual void lists_show(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_rts QString [required]
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  include_entities QString [optional]
    */
    virtual void lists_statuses(const QString &include_rts, const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void lists_subscribers(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    */
    virtual void lists_subscribers_create(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    */
    virtual void lists_subscribers_destroy(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void lists_subscribers_show(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count QString [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void lists_subscriptions(const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_screen_name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  mode QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void lists_update(const ::OpenAPI::OptionalParam<QString> &owner_screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [required]
    */
    virtual void savedSearches_create(const QString &query);

    /**
    * @param[in]  id QString [required]
    */
    virtual void savedSearches_destroy(const QString &id);


    virtual void savedSearches_list();

    /**
    * @param[in]  id QString [required]
    */
    virtual void savedsearchesid(const QString &id);

    /**
    * @param[in]  q QString [required]
    * @param[in]  geocode QString [optional]
    * @param[in]  lang QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  result_type QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  include_entities QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void search_tweets(const QString &q, const ::OpenAPI::OptionalParam<QString> &geocode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &result_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  trim_user QString [optional]
    */
    virtual void statuses_destroy(const QString &id, const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count qint32 [optional]
    * @param[in]  max_id qint64 [optional]
    * @param[in]  since_id qint64 [optional]
    * @param[in]  trim_user QString [optional]
    * @param[in]  exclude_replies QString [optional]
    * @param[in]  contributor_details QString [optional]
    */
    virtual void statuses_homeTimeline(const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &max_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &since_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_replies = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor_details = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count qint32 [optional]
    * @param[in]  since_id qint64 [optional]
    * @param[in]  max_id qint64 [optional]
    * @param[in]  trim_user QString [optional]
    * @param[in]  contributor_details QString [optional]
    * @param[in]  include_entities bool [optional]
    */
    virtual void statuses_mentions_timeline(const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &since_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contributor_details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_entities = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  maxwidth qint32 [optional]
    * @param[in]  hide_media QString [optional]
    * @param[in]  hide_thread QString [optional]
    * @param[in]  omit_script QString [optional]
    * @param[in]  align QString [optional]
    * @param[in]  related QString [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void statuses_oembed(const ::OpenAPI::OptionalParam<qint32> &maxwidth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hide_media = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hide_thread = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &omit_script = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &align = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &related = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  count QString [optional]
    * @param[in]  trim_user QString [optional]
    */
    virtual void statuses_retweets(const QString &id, const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  trim_user QString [optional]
    * @param[in]  include_my_retweet QString [optional]
    * @param[in]  include_entities QString [optional]
    */
    virtual void statuses_show(const QString &id, const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_my_retweet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  status QString [required]
    * @param[in]  in_reply_to_status_id QString [optional]
    * @param[in]  lat QString [optional]
    * @param[in]  r_long QString [optional]
    * @param[in]  place_id QString [optional]
    * @param[in]  display_coordinates QString [optional]
    * @param[in]  trim_user QString [optional]
    */
    virtual void statuses_update(const QString &status, const ::OpenAPI::OptionalParam<QString> &in_reply_to_status_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &place_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  status QString [required]
    * @param[in]  media QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  possibly_sensitive QString [optional]
    * @param[in]  in_reply_to_status_id QString [optional]
    * @param[in]  lat QString [optional]
    * @param[in]  r_long QString [optional]
    * @param[in]  place_id QString [optional]
    * @param[in]  display_coordinates QString [optional]
    */
    virtual void statuses_updateWithMedia(const QString &status, const QString &media, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &possibly_sensitive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &in_reply_to_status_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_long = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &place_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_coordinates = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count qint32 [optional]
    * @param[in]  since_id qint64 [optional]
    * @param[in]  max_id qint64 [optional]
    * @param[in]  trim_user QString [optional]
    * @param[in]  exclude_replies bool [optional]
    * @param[in]  contributor_details bool [optional]
    * @param[in]  include_rts bool [optional]
    */
    virtual void statuses_userTimeline(const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &since_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_replies = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &contributor_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_rts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  trim_user QString [optional]
    */
    virtual void statusesretweetid(const QString &id, const ::OpenAPI::OptionalParam<QString> &trim_user = ::OpenAPI::OptionalParam<QString>());


    virtual void trends_available();

    /**
    * @param[in]  lat QString [optional]
    * @param[in]  r_long QString [optional]
    */
    virtual void trends_closest(const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_long = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  exclude QString [optional]
    */
    virtual void trends_place(const QString &id, const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void users_contributees(const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_entities QString [optional]
    * @param[in]  skip_status QString [optional]
    */
    virtual void users_contributors(const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_name QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  include_entities QString [optional]
    */
    virtual void users_lookup(const ::OpenAPI::OptionalParam<QString> &screen_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());


    virtual void users_reportSpam();

    /**
    * @param[in]  q QString [required]
    * @param[in]  page QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  include_entities QString [optional]
    */
    virtual void users_search(const QString &q, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  screen_name QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  include_entities QString [optional]
    */
    virtual void users_show(const QString &screen_name, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &include_entities = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void users_suggestions(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  slug QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void users_suggestions_slug(const QString &slug, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void users_suggestionsslugmembers(const QString &slug);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void account_settings_getCallback(OAIHttpRequestWorker *worker);
    void account_settings_postCallback(OAIHttpRequestWorker *worker);
    void account_updateDeliveryDeviceCallback(OAIHttpRequestWorker *worker);
    void account_updateProfileCallback(OAIHttpRequestWorker *worker);
    void accounts_updateProfileBackgroundImageCallback(OAIHttpRequestWorker *worker);
    void accounts_updateProfileColorsCallback(OAIHttpRequestWorker *worker);
    void accounts_updateProfileImageCallback(OAIHttpRequestWorker *worker);
    void application_rateLimitStatusCallback(OAIHttpRequestWorker *worker);
    void blocks_createCallback(OAIHttpRequestWorker *worker);
    void blocks_destroyCallback(OAIHttpRequestWorker *worker);
    void blocks_idsCallback(OAIHttpRequestWorker *worker);
    void blocks_listCallback(OAIHttpRequestWorker *worker);
    void directMessagesCallback(OAIHttpRequestWorker *worker);
    void directMessages_destroyCallback(OAIHttpRequestWorker *worker);
    void directMessages_newCallback(OAIHttpRequestWorker *worker);
    void directMessages_sentCallback(OAIHttpRequestWorker *worker);
    void directMessages_showCallback(OAIHttpRequestWorker *worker);
    void favorites_createCallback(OAIHttpRequestWorker *worker);
    void favorites_destroyCallback(OAIHttpRequestWorker *worker);
    void favorites_listCallback(OAIHttpRequestWorker *worker);
    void followers_idsCallback(OAIHttpRequestWorker *worker);
    void friends_idsCallback(OAIHttpRequestWorker *worker);
    void friendships_createCallback(OAIHttpRequestWorker *worker);
    void friendships_destroyCallback(OAIHttpRequestWorker *worker);
    void friendships_incomingCallback(OAIHttpRequestWorker *worker);
    void friendships_lookupCallback(OAIHttpRequestWorker *worker);
    void friendships_outgoingCallback(OAIHttpRequestWorker *worker);
    void friendships_showCallback(OAIHttpRequestWorker *worker);
    void friendships_updateCallback(OAIHttpRequestWorker *worker);
    void geo_placeIdCallback(OAIHttpRequestWorker *worker);
    void geo_placesCallback(OAIHttpRequestWorker *worker);
    void geo_reverseGeocodeCallback(OAIHttpRequestWorker *worker);
    void geo_searchCallback(OAIHttpRequestWorker *worker);
    void geo_similarPlacesCallback(OAIHttpRequestWorker *worker);
    void help_configurationsCallback(OAIHttpRequestWorker *worker);
    void help_languagesCallback(OAIHttpRequestWorker *worker);
    void help_privacyCallback(OAIHttpRequestWorker *worker);
    void help_tosCallback(OAIHttpRequestWorker *worker);
    void lists_createCallback(OAIHttpRequestWorker *worker);
    void lists_destroyCallback(OAIHttpRequestWorker *worker);
    void lists_listCallback(OAIHttpRequestWorker *worker);
    void lists_membersCallback(OAIHttpRequestWorker *worker);
    void lists_members_createCallback(OAIHttpRequestWorker *worker);
    void lists_members_createAllCallback(OAIHttpRequestWorker *worker);
    void lists_members_destroyCallback(OAIHttpRequestWorker *worker);
    void lists_members_destroyAllCallback(OAIHttpRequestWorker *worker);
    void lists_members_showCallback(OAIHttpRequestWorker *worker);
    void lists_membershipsCallback(OAIHttpRequestWorker *worker);
    void lists_showCallback(OAIHttpRequestWorker *worker);
    void lists_statusesCallback(OAIHttpRequestWorker *worker);
    void lists_subscribersCallback(OAIHttpRequestWorker *worker);
    void lists_subscribers_createCallback(OAIHttpRequestWorker *worker);
    void lists_subscribers_destroyCallback(OAIHttpRequestWorker *worker);
    void lists_subscribers_showCallback(OAIHttpRequestWorker *worker);
    void lists_subscriptionsCallback(OAIHttpRequestWorker *worker);
    void lists_updateCallback(OAIHttpRequestWorker *worker);
    void savedSearches_createCallback(OAIHttpRequestWorker *worker);
    void savedSearches_destroyCallback(OAIHttpRequestWorker *worker);
    void savedSearches_listCallback(OAIHttpRequestWorker *worker);
    void savedsearchesidCallback(OAIHttpRequestWorker *worker);
    void search_tweetsCallback(OAIHttpRequestWorker *worker);
    void statuses_destroyCallback(OAIHttpRequestWorker *worker);
    void statuses_homeTimelineCallback(OAIHttpRequestWorker *worker);
    void statuses_mentions_timelineCallback(OAIHttpRequestWorker *worker);
    void statuses_oembedCallback(OAIHttpRequestWorker *worker);
    void statuses_retweetsCallback(OAIHttpRequestWorker *worker);
    void statuses_showCallback(OAIHttpRequestWorker *worker);
    void statuses_updateCallback(OAIHttpRequestWorker *worker);
    void statuses_updateWithMediaCallback(OAIHttpRequestWorker *worker);
    void statuses_userTimelineCallback(OAIHttpRequestWorker *worker);
    void statusesretweetidCallback(OAIHttpRequestWorker *worker);
    void trends_availableCallback(OAIHttpRequestWorker *worker);
    void trends_closestCallback(OAIHttpRequestWorker *worker);
    void trends_placeCallback(OAIHttpRequestWorker *worker);
    void users_contributeesCallback(OAIHttpRequestWorker *worker);
    void users_contributorsCallback(OAIHttpRequestWorker *worker);
    void users_lookupCallback(OAIHttpRequestWorker *worker);
    void users_reportSpamCallback(OAIHttpRequestWorker *worker);
    void users_searchCallback(OAIHttpRequestWorker *worker);
    void users_showCallback(OAIHttpRequestWorker *worker);
    void users_suggestionsCallback(OAIHttpRequestWorker *worker);
    void users_suggestions_slugCallback(OAIHttpRequestWorker *worker);
    void users_suggestionsslugmembersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void account_settings_getSignal();
    void account_settings_postSignal();
    void account_updateDeliveryDeviceSignal();
    void account_updateProfileSignal();
    void accounts_updateProfileBackgroundImageSignal();
    void accounts_updateProfileColorsSignal();
    void accounts_updateProfileImageSignal();
    void application_rateLimitStatusSignal();
    void blocks_createSignal();
    void blocks_destroySignal();
    void blocks_idsSignal();
    void blocks_listSignal();
    void directMessagesSignal();
    void directMessages_destroySignal();
    void directMessages_newSignal();
    void directMessages_sentSignal();
    void directMessages_showSignal();
    void favorites_createSignal();
    void favorites_destroySignal();
    void favorites_listSignal();
    void followers_idsSignal();
    void friends_idsSignal();
    void friendships_createSignal();
    void friendships_destroySignal();
    void friendships_incomingSignal();
    void friendships_lookupSignal();
    void friendships_outgoingSignal();
    void friendships_showSignal();
    void friendships_updateSignal();
    void geo_placeIdSignal();
    void geo_placesSignal();
    void geo_reverseGeocodeSignal();
    void geo_searchSignal();
    void geo_similarPlacesSignal();
    void help_configurationsSignal();
    void help_languagesSignal();
    void help_privacySignal();
    void help_tosSignal();
    void lists_createSignal();
    void lists_destroySignal();
    void lists_listSignal();
    void lists_membersSignal();
    void lists_members_createSignal();
    void lists_members_createAllSignal();
    void lists_members_destroySignal();
    void lists_members_destroyAllSignal();
    void lists_members_showSignal();
    void lists_membershipsSignal();
    void lists_showSignal();
    void lists_statusesSignal();
    void lists_subscribersSignal();
    void lists_subscribers_createSignal();
    void lists_subscribers_destroySignal();
    void lists_subscribers_showSignal();
    void lists_subscriptionsSignal();
    void lists_updateSignal();
    void savedSearches_createSignal();
    void savedSearches_destroySignal();
    void savedSearches_listSignal();
    void savedsearchesidSignal();
    void search_tweetsSignal();
    void statuses_destroySignal();
    void statuses_homeTimelineSignal();
    void statuses_mentions_timelineSignal();
    void statuses_oembedSignal();
    void statuses_retweetsSignal();
    void statuses_showSignal();
    void statuses_updateSignal();
    void statuses_updateWithMediaSignal();
    void statuses_userTimelineSignal();
    void statusesretweetidSignal();
    void trends_availableSignal();
    void trends_closestSignal();
    void trends_placeSignal();
    void users_contributeesSignal();
    void users_contributorsSignal();
    void users_lookupSignal();
    void users_reportSpamSignal();
    void users_searchSignal();
    void users_showSignal();
    void users_suggestionsSignal();
    void users_suggestions_slugSignal();
    void users_suggestionsslugmembersSignal();


    void account_settings_getSignalFull(OAIHttpRequestWorker *worker);
    void account_settings_postSignalFull(OAIHttpRequestWorker *worker);
    void account_updateDeliveryDeviceSignalFull(OAIHttpRequestWorker *worker);
    void account_updateProfileSignalFull(OAIHttpRequestWorker *worker);
    void accounts_updateProfileBackgroundImageSignalFull(OAIHttpRequestWorker *worker);
    void accounts_updateProfileColorsSignalFull(OAIHttpRequestWorker *worker);
    void accounts_updateProfileImageSignalFull(OAIHttpRequestWorker *worker);
    void application_rateLimitStatusSignalFull(OAIHttpRequestWorker *worker);
    void blocks_createSignalFull(OAIHttpRequestWorker *worker);
    void blocks_destroySignalFull(OAIHttpRequestWorker *worker);
    void blocks_idsSignalFull(OAIHttpRequestWorker *worker);
    void blocks_listSignalFull(OAIHttpRequestWorker *worker);
    void directMessagesSignalFull(OAIHttpRequestWorker *worker);
    void directMessages_destroySignalFull(OAIHttpRequestWorker *worker);
    void directMessages_newSignalFull(OAIHttpRequestWorker *worker);
    void directMessages_sentSignalFull(OAIHttpRequestWorker *worker);
    void directMessages_showSignalFull(OAIHttpRequestWorker *worker);
    void favorites_createSignalFull(OAIHttpRequestWorker *worker);
    void favorites_destroySignalFull(OAIHttpRequestWorker *worker);
    void favorites_listSignalFull(OAIHttpRequestWorker *worker);
    void followers_idsSignalFull(OAIHttpRequestWorker *worker);
    void friends_idsSignalFull(OAIHttpRequestWorker *worker);
    void friendships_createSignalFull(OAIHttpRequestWorker *worker);
    void friendships_destroySignalFull(OAIHttpRequestWorker *worker);
    void friendships_incomingSignalFull(OAIHttpRequestWorker *worker);
    void friendships_lookupSignalFull(OAIHttpRequestWorker *worker);
    void friendships_outgoingSignalFull(OAIHttpRequestWorker *worker);
    void friendships_showSignalFull(OAIHttpRequestWorker *worker);
    void friendships_updateSignalFull(OAIHttpRequestWorker *worker);
    void geo_placeIdSignalFull(OAIHttpRequestWorker *worker);
    void geo_placesSignalFull(OAIHttpRequestWorker *worker);
    void geo_reverseGeocodeSignalFull(OAIHttpRequestWorker *worker);
    void geo_searchSignalFull(OAIHttpRequestWorker *worker);
    void geo_similarPlacesSignalFull(OAIHttpRequestWorker *worker);
    void help_configurationsSignalFull(OAIHttpRequestWorker *worker);
    void help_languagesSignalFull(OAIHttpRequestWorker *worker);
    void help_privacySignalFull(OAIHttpRequestWorker *worker);
    void help_tosSignalFull(OAIHttpRequestWorker *worker);
    void lists_createSignalFull(OAIHttpRequestWorker *worker);
    void lists_destroySignalFull(OAIHttpRequestWorker *worker);
    void lists_listSignalFull(OAIHttpRequestWorker *worker);
    void lists_membersSignalFull(OAIHttpRequestWorker *worker);
    void lists_members_createSignalFull(OAIHttpRequestWorker *worker);
    void lists_members_createAllSignalFull(OAIHttpRequestWorker *worker);
    void lists_members_destroySignalFull(OAIHttpRequestWorker *worker);
    void lists_members_destroyAllSignalFull(OAIHttpRequestWorker *worker);
    void lists_members_showSignalFull(OAIHttpRequestWorker *worker);
    void lists_membershipsSignalFull(OAIHttpRequestWorker *worker);
    void lists_showSignalFull(OAIHttpRequestWorker *worker);
    void lists_statusesSignalFull(OAIHttpRequestWorker *worker);
    void lists_subscribersSignalFull(OAIHttpRequestWorker *worker);
    void lists_subscribers_createSignalFull(OAIHttpRequestWorker *worker);
    void lists_subscribers_destroySignalFull(OAIHttpRequestWorker *worker);
    void lists_subscribers_showSignalFull(OAIHttpRequestWorker *worker);
    void lists_subscriptionsSignalFull(OAIHttpRequestWorker *worker);
    void lists_updateSignalFull(OAIHttpRequestWorker *worker);
    void savedSearches_createSignalFull(OAIHttpRequestWorker *worker);
    void savedSearches_destroySignalFull(OAIHttpRequestWorker *worker);
    void savedSearches_listSignalFull(OAIHttpRequestWorker *worker);
    void savedsearchesidSignalFull(OAIHttpRequestWorker *worker);
    void search_tweetsSignalFull(OAIHttpRequestWorker *worker);
    void statuses_destroySignalFull(OAIHttpRequestWorker *worker);
    void statuses_homeTimelineSignalFull(OAIHttpRequestWorker *worker);
    void statuses_mentions_timelineSignalFull(OAIHttpRequestWorker *worker);
    void statuses_oembedSignalFull(OAIHttpRequestWorker *worker);
    void statuses_retweetsSignalFull(OAIHttpRequestWorker *worker);
    void statuses_showSignalFull(OAIHttpRequestWorker *worker);
    void statuses_updateSignalFull(OAIHttpRequestWorker *worker);
    void statuses_updateWithMediaSignalFull(OAIHttpRequestWorker *worker);
    void statuses_userTimelineSignalFull(OAIHttpRequestWorker *worker);
    void statusesretweetidSignalFull(OAIHttpRequestWorker *worker);
    void trends_availableSignalFull(OAIHttpRequestWorker *worker);
    void trends_closestSignalFull(OAIHttpRequestWorker *worker);
    void trends_placeSignalFull(OAIHttpRequestWorker *worker);
    void users_contributeesSignalFull(OAIHttpRequestWorker *worker);
    void users_contributorsSignalFull(OAIHttpRequestWorker *worker);
    void users_lookupSignalFull(OAIHttpRequestWorker *worker);
    void users_reportSpamSignalFull(OAIHttpRequestWorker *worker);
    void users_searchSignalFull(OAIHttpRequestWorker *worker);
    void users_showSignalFull(OAIHttpRequestWorker *worker);
    void users_suggestionsSignalFull(OAIHttpRequestWorker *worker);
    void users_suggestions_slugSignalFull(OAIHttpRequestWorker *worker);
    void users_suggestionsslugmembersSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use account_settings_getSignalError() instead")
    void account_settings_getSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_settings_getSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_settings_postSignalError() instead")
    void account_settings_postSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_settings_postSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_updateDeliveryDeviceSignalError() instead")
    void account_updateDeliveryDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_updateDeliveryDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_updateProfileSignalError() instead")
    void account_updateProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_updateProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accounts_updateProfileBackgroundImageSignalError() instead")
    void accounts_updateProfileBackgroundImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accounts_updateProfileBackgroundImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accounts_updateProfileColorsSignalError() instead")
    void accounts_updateProfileColorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accounts_updateProfileColorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accounts_updateProfileImageSignalError() instead")
    void accounts_updateProfileImageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accounts_updateProfileImageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use application_rateLimitStatusSignalError() instead")
    void application_rateLimitStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void application_rateLimitStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_createSignalError() instead")
    void blocks_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_destroySignalError() instead")
    void blocks_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_idsSignalError() instead")
    void blocks_idsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_idsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_listSignalError() instead")
    void blocks_listSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_listSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessagesSignalError() instead")
    void directMessagesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directMessagesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_destroySignalError() instead")
    void directMessages_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_newSignalError() instead")
    void directMessages_newSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_newSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_sentSignalError() instead")
    void directMessages_sentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_sentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_showSignalError() instead")
    void directMessages_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use favorites_createSignalError() instead")
    void favorites_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void favorites_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use favorites_destroySignalError() instead")
    void favorites_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void favorites_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use favorites_listSignalError() instead")
    void favorites_listSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void favorites_listSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followers_idsSignalError() instead")
    void followers_idsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followers_idsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friends_idsSignalError() instead")
    void friends_idsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friends_idsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_createSignalError() instead")
    void friendships_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_destroySignalError() instead")
    void friendships_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_incomingSignalError() instead")
    void friendships_incomingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_incomingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_lookupSignalError() instead")
    void friendships_lookupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_lookupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_outgoingSignalError() instead")
    void friendships_outgoingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_outgoingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_showSignalError() instead")
    void friendships_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_updateSignalError() instead")
    void friendships_updateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_updateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_placeIdSignalError() instead")
    void geo_placeIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geo_placeIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_placesSignalError() instead")
    void geo_placesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geo_placesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_reverseGeocodeSignalError() instead")
    void geo_reverseGeocodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geo_reverseGeocodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_searchSignalError() instead")
    void geo_searchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geo_searchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_similarPlacesSignalError() instead")
    void geo_similarPlacesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geo_similarPlacesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_configurationsSignalError() instead")
    void help_configurationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void help_configurationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_languagesSignalError() instead")
    void help_languagesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void help_languagesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_privacySignalError() instead")
    void help_privacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void help_privacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_tosSignalError() instead")
    void help_tosSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void help_tosSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_createSignalError() instead")
    void lists_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_destroySignalError() instead")
    void lists_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_listSignalError() instead")
    void lists_listSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_listSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_membersSignalError() instead")
    void lists_membersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_membersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_createSignalError() instead")
    void lists_members_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_createAllSignalError() instead")
    void lists_members_createAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_createAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_destroySignalError() instead")
    void lists_members_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_destroyAllSignalError() instead")
    void lists_members_destroyAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_destroyAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_showSignalError() instead")
    void lists_members_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_membershipsSignalError() instead")
    void lists_membershipsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_membershipsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_showSignalError() instead")
    void lists_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_statusesSignalError() instead")
    void lists_statusesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_statusesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribersSignalError() instead")
    void lists_subscribersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribers_createSignalError() instead")
    void lists_subscribers_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribers_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribers_destroySignalError() instead")
    void lists_subscribers_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribers_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribers_showSignalError() instead")
    void lists_subscribers_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribers_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscriptionsSignalError() instead")
    void lists_subscriptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscriptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_updateSignalError() instead")
    void lists_updateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lists_updateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearches_createSignalError() instead")
    void savedSearches_createSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearches_createSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearches_destroySignalError() instead")
    void savedSearches_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearches_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearches_listSignalError() instead")
    void savedSearches_listSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearches_listSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedsearchesidSignalError() instead")
    void savedsearchesidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savedsearchesidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_tweetsSignalError() instead")
    void search_tweetsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void search_tweetsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_destroySignalError() instead")
    void statuses_destroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_destroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_homeTimelineSignalError() instead")
    void statuses_homeTimelineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_homeTimelineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_mentions_timelineSignalError() instead")
    void statuses_mentions_timelineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_mentions_timelineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_oembedSignalError() instead")
    void statuses_oembedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_oembedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_retweetsSignalError() instead")
    void statuses_retweetsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_retweetsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_showSignalError() instead")
    void statuses_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_updateSignalError() instead")
    void statuses_updateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_updateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_updateWithMediaSignalError() instead")
    void statuses_updateWithMediaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_updateWithMediaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_userTimelineSignalError() instead")
    void statuses_userTimelineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_userTimelineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusesretweetidSignalError() instead")
    void statusesretweetidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void statusesretweetidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trends_availableSignalError() instead")
    void trends_availableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void trends_availableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trends_closestSignalError() instead")
    void trends_closestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void trends_closestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trends_placeSignalError() instead")
    void trends_placeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void trends_placeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_contributeesSignalError() instead")
    void users_contributeesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_contributeesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_contributorsSignalError() instead")
    void users_contributorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_contributorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_lookupSignalError() instead")
    void users_lookupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_lookupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_reportSpamSignalError() instead")
    void users_reportSpamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_reportSpamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_searchSignalError() instead")
    void users_searchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_searchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_showSignalError() instead")
    void users_showSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_showSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_suggestionsSignalError() instead")
    void users_suggestionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_suggestionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_suggestions_slugSignalError() instead")
    void users_suggestions_slugSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_suggestions_slugSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_suggestionsslugmembersSignalError() instead")
    void users_suggestionsslugmembersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_suggestionsslugmembersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use account_settings_getSignalErrorFull() instead")
    void account_settings_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_settings_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_settings_postSignalErrorFull() instead")
    void account_settings_postSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_settings_postSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_updateDeliveryDeviceSignalErrorFull() instead")
    void account_updateDeliveryDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_updateDeliveryDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_updateProfileSignalErrorFull() instead")
    void account_updateProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_updateProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accounts_updateProfileBackgroundImageSignalErrorFull() instead")
    void accounts_updateProfileBackgroundImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accounts_updateProfileBackgroundImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accounts_updateProfileColorsSignalErrorFull() instead")
    void accounts_updateProfileColorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accounts_updateProfileColorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accounts_updateProfileImageSignalErrorFull() instead")
    void accounts_updateProfileImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accounts_updateProfileImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use application_rateLimitStatusSignalErrorFull() instead")
    void application_rateLimitStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void application_rateLimitStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_createSignalErrorFull() instead")
    void blocks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_destroySignalErrorFull() instead")
    void blocks_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_idsSignalErrorFull() instead")
    void blocks_idsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_idsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blocks_listSignalErrorFull() instead")
    void blocks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blocks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessagesSignalErrorFull() instead")
    void directMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_destroySignalErrorFull() instead")
    void directMessages_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_newSignalErrorFull() instead")
    void directMessages_newSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_newSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_sentSignalErrorFull() instead")
    void directMessages_sentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_sentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directMessages_showSignalErrorFull() instead")
    void directMessages_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directMessages_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use favorites_createSignalErrorFull() instead")
    void favorites_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void favorites_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use favorites_destroySignalErrorFull() instead")
    void favorites_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void favorites_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use favorites_listSignalErrorFull() instead")
    void favorites_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void favorites_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followers_idsSignalErrorFull() instead")
    void followers_idsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followers_idsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friends_idsSignalErrorFull() instead")
    void friends_idsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friends_idsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_createSignalErrorFull() instead")
    void friendships_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_destroySignalErrorFull() instead")
    void friendships_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_incomingSignalErrorFull() instead")
    void friendships_incomingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_incomingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_lookupSignalErrorFull() instead")
    void friendships_lookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_lookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_outgoingSignalErrorFull() instead")
    void friendships_outgoingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_outgoingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_showSignalErrorFull() instead")
    void friendships_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use friendships_updateSignalErrorFull() instead")
    void friendships_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void friendships_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_placeIdSignalErrorFull() instead")
    void geo_placeIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geo_placeIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_placesSignalErrorFull() instead")
    void geo_placesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geo_placesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_reverseGeocodeSignalErrorFull() instead")
    void geo_reverseGeocodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geo_reverseGeocodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_searchSignalErrorFull() instead")
    void geo_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geo_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geo_similarPlacesSignalErrorFull() instead")
    void geo_similarPlacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geo_similarPlacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_configurationsSignalErrorFull() instead")
    void help_configurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void help_configurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_languagesSignalErrorFull() instead")
    void help_languagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void help_languagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_privacySignalErrorFull() instead")
    void help_privacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void help_privacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use help_tosSignalErrorFull() instead")
    void help_tosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void help_tosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_createSignalErrorFull() instead")
    void lists_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_destroySignalErrorFull() instead")
    void lists_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_listSignalErrorFull() instead")
    void lists_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_membersSignalErrorFull() instead")
    void lists_membersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_membersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_createSignalErrorFull() instead")
    void lists_members_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_createAllSignalErrorFull() instead")
    void lists_members_createAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_createAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_destroySignalErrorFull() instead")
    void lists_members_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_destroyAllSignalErrorFull() instead")
    void lists_members_destroyAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_destroyAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_members_showSignalErrorFull() instead")
    void lists_members_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_members_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_membershipsSignalErrorFull() instead")
    void lists_membershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_membershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_showSignalErrorFull() instead")
    void lists_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_statusesSignalErrorFull() instead")
    void lists_statusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_statusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribersSignalErrorFull() instead")
    void lists_subscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribers_createSignalErrorFull() instead")
    void lists_subscribers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribers_destroySignalErrorFull() instead")
    void lists_subscribers_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribers_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscribers_showSignalErrorFull() instead")
    void lists_subscribers_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscribers_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_subscriptionsSignalErrorFull() instead")
    void lists_subscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_subscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lists_updateSignalErrorFull() instead")
    void lists_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lists_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearches_createSignalErrorFull() instead")
    void savedSearches_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearches_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearches_destroySignalErrorFull() instead")
    void savedSearches_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearches_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedSearches_listSignalErrorFull() instead")
    void savedSearches_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedSearches_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savedsearchesidSignalErrorFull() instead")
    void savedsearchesidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savedsearchesidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_tweetsSignalErrorFull() instead")
    void search_tweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_tweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_destroySignalErrorFull() instead")
    void statuses_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_homeTimelineSignalErrorFull() instead")
    void statuses_homeTimelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_homeTimelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_mentions_timelineSignalErrorFull() instead")
    void statuses_mentions_timelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_mentions_timelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_oembedSignalErrorFull() instead")
    void statuses_oembedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_oembedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_retweetsSignalErrorFull() instead")
    void statuses_retweetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_retweetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_showSignalErrorFull() instead")
    void statuses_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_updateSignalErrorFull() instead")
    void statuses_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_updateWithMediaSignalErrorFull() instead")
    void statuses_updateWithMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_updateWithMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statuses_userTimelineSignalErrorFull() instead")
    void statuses_userTimelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statuses_userTimelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusesretweetidSignalErrorFull() instead")
    void statusesretweetidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statusesretweetidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trends_availableSignalErrorFull() instead")
    void trends_availableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trends_availableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trends_closestSignalErrorFull() instead")
    void trends_closestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trends_closestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use trends_placeSignalErrorFull() instead")
    void trends_placeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void trends_placeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_contributeesSignalErrorFull() instead")
    void users_contributeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_contributeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_contributorsSignalErrorFull() instead")
    void users_contributorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_contributorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_lookupSignalErrorFull() instead")
    void users_lookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_lookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_reportSpamSignalErrorFull() instead")
    void users_reportSpamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_reportSpamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_searchSignalErrorFull() instead")
    void users_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_showSignalErrorFull() instead")
    void users_showSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_showSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_suggestionsSignalErrorFull() instead")
    void users_suggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_suggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_suggestions_slugSignalErrorFull() instead")
    void users_suggestions_slugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_suggestions_slugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_suggestionsslugmembersSignalErrorFull() instead")
    void users_suggestionsslugmembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_suggestionsslugmembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
