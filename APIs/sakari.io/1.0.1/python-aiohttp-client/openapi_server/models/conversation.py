# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_identifiers import ContactIdentifiers
from openapi_server.models.message import Message
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.updated import Updated
from openapi_server import util


class Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed: bool=None, contact: ContactIdentifiers=None, created: Updated=None, id: str=None, last_message: Message=None, phone_number: PhoneNumber=None, unread: List[str]=None, updated: Updated=None):
        """Conversation - a model defined in OpenAPI

        :param closed: The closed of this Conversation.
        :param contact: The contact of this Conversation.
        :param created: The created of this Conversation.
        :param id: The id of this Conversation.
        :param last_message: The last_message of this Conversation.
        :param phone_number: The phone_number of this Conversation.
        :param unread: The unread of this Conversation.
        :param updated: The updated of this Conversation.
        """
        self.openapi_types = {
            'closed': bool,
            'contact': ContactIdentifiers,
            'created': Updated,
            'id': str,
            'last_message': Message,
            'phone_number': PhoneNumber,
            'unread': List[str],
            'updated': Updated
        }

        self.attribute_map = {
            'closed': 'closed',
            'contact': 'contact',
            'created': 'created',
            'id': 'id',
            'last_message': 'lastMessage',
            'phone_number': 'phoneNumber',
            'unread': 'unread',
            'updated': 'updated'
        }

        self._closed = closed
        self._contact = contact
        self._created = created
        self._id = id
        self._last_message = last_message
        self._phone_number = phone_number
        self._unread = unread
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation of this Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed(self):
        """Gets the closed of this Conversation.


        :return: The closed of this Conversation.
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Conversation.


        :param closed: The closed of this Conversation.
        :type closed: bool
        """

        self._closed = closed

    @property
    def contact(self):
        """Gets the contact of this Conversation.


        :return: The contact of this Conversation.
        :rtype: ContactIdentifiers
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Conversation.


        :param contact: The contact of this Conversation.
        :type contact: ContactIdentifiers
        """

        self._contact = contact

    @property
    def created(self):
        """Gets the created of this Conversation.


        :return: The created of this Conversation.
        :rtype: Updated
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Conversation.


        :param created: The created of this Conversation.
        :type created: Updated
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Conversation.


        :return: The id of this Conversation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.


        :param id: The id of this Conversation.
        :type id: str
        """

        self._id = id

    @property
    def last_message(self):
        """Gets the last_message of this Conversation.


        :return: The last_message of this Conversation.
        :rtype: Message
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this Conversation.


        :param last_message: The last_message of this Conversation.
        :type last_message: Message
        """

        self._last_message = last_message

    @property
    def phone_number(self):
        """Gets the phone_number of this Conversation.


        :return: The phone_number of this Conversation.
        :rtype: PhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Conversation.


        :param phone_number: The phone_number of this Conversation.
        :type phone_number: PhoneNumber
        """

        self._phone_number = phone_number

    @property
    def unread(self):
        """Gets the unread of this Conversation.


        :return: The unread of this Conversation.
        :rtype: List[str]
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Conversation.


        :param unread: The unread of this Conversation.
        :type unread: List[str]
        """

        self._unread = unread

    @property
    def updated(self):
        """Gets the updated of this Conversation.


        :return: The updated of this Conversation.
        :rtype: Updated
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Conversation.


        :param updated: The updated of this Conversation.
        :type updated: Updated
        """

        self._updated = updated
