# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_request import ContactRequest
from openapi_server.models.send_messages_request_filters import SendMessagesRequestFilters
from openapi_server.models.send_messages_request_media_inner import SendMessagesRequestMediaInner
from openapi_server.models.send_messages_request_phone_number_filter import SendMessagesRequestPhoneNumberFilter
from openapi_server import util


class SendMessagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts: List[ContactRequest]=None, conversation_strategy: str=None, conversations: List[str]=None, filters: SendMessagesRequestFilters=None, media: List[SendMessagesRequestMediaInner]=None, phone_number_filter: SendMessagesRequestPhoneNumberFilter=None, template: str=None, type: str=None):
        """SendMessagesRequest - a model defined in OpenAPI

        :param contacts: The contacts of this SendMessagesRequest.
        :param conversation_strategy: The conversation_strategy of this SendMessagesRequest.
        :param conversations: The conversations of this SendMessagesRequest.
        :param filters: The filters of this SendMessagesRequest.
        :param media: The media of this SendMessagesRequest.
        :param phone_number_filter: The phone_number_filter of this SendMessagesRequest.
        :param template: The template of this SendMessagesRequest.
        :param type: The type of this SendMessagesRequest.
        """
        self.openapi_types = {
            'contacts': List[ContactRequest],
            'conversation_strategy': str,
            'conversations': List[str],
            'filters': SendMessagesRequestFilters,
            'media': List[SendMessagesRequestMediaInner],
            'phone_number_filter': SendMessagesRequestPhoneNumberFilter,
            'template': str,
            'type': str
        }

        self.attribute_map = {
            'contacts': 'contacts',
            'conversation_strategy': 'conversationStrategy',
            'conversations': 'conversations',
            'filters': 'filters',
            'media': 'media',
            'phone_number_filter': 'phoneNumberFilter',
            'template': 'template',
            'type': 'type'
        }

        self._contacts = contacts
        self._conversation_strategy = conversation_strategy
        self._conversations = conversations
        self._filters = filters
        self._media = media
        self._phone_number_filter = phone_number_filter
        self._template = template
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessagesRequest of this SendMessagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this SendMessagesRequest.


        :return: The contacts of this SendMessagesRequest.
        :rtype: List[ContactRequest]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this SendMessagesRequest.


        :param contacts: The contacts of this SendMessagesRequest.
        :type contacts: List[ContactRequest]
        """

        self._contacts = contacts

    @property
    def conversation_strategy(self):
        """Gets the conversation_strategy of this SendMessagesRequest.


        :return: The conversation_strategy of this SendMessagesRequest.
        :rtype: str
        """
        return self._conversation_strategy

    @conversation_strategy.setter
    def conversation_strategy(self, conversation_strategy):
        """Sets the conversation_strategy of this SendMessagesRequest.


        :param conversation_strategy: The conversation_strategy of this SendMessagesRequest.
        :type conversation_strategy: str
        """

        self._conversation_strategy = conversation_strategy

    @property
    def conversations(self):
        """Gets the conversations of this SendMessagesRequest.

        List of conversation ids to send messages to

        :return: The conversations of this SendMessagesRequest.
        :rtype: List[str]
        """
        return self._conversations

    @conversations.setter
    def conversations(self, conversations):
        """Sets the conversations of this SendMessagesRequest.

        List of conversation ids to send messages to

        :param conversations: The conversations of this SendMessagesRequest.
        :type conversations: List[str]
        """

        self._conversations = conversations

    @property
    def filters(self):
        """Gets the filters of this SendMessagesRequest.


        :return: The filters of this SendMessagesRequest.
        :rtype: SendMessagesRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SendMessagesRequest.


        :param filters: The filters of this SendMessagesRequest.
        :type filters: SendMessagesRequestFilters
        """

        self._filters = filters

    @property
    def media(self):
        """Gets the media of this SendMessagesRequest.

        List of media objects to attach to message

        :return: The media of this SendMessagesRequest.
        :rtype: List[SendMessagesRequestMediaInner]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this SendMessagesRequest.

        List of media objects to attach to message

        :param media: The media of this SendMessagesRequest.
        :type media: List[SendMessagesRequestMediaInner]
        """

        self._media = media

    @property
    def phone_number_filter(self):
        """Gets the phone_number_filter of this SendMessagesRequest.


        :return: The phone_number_filter of this SendMessagesRequest.
        :rtype: SendMessagesRequestPhoneNumberFilter
        """
        return self._phone_number_filter

    @phone_number_filter.setter
    def phone_number_filter(self, phone_number_filter):
        """Sets the phone_number_filter of this SendMessagesRequest.


        :param phone_number_filter: The phone_number_filter of this SendMessagesRequest.
        :type phone_number_filter: SendMessagesRequestPhoneNumberFilter
        """

        self._phone_number_filter = phone_number_filter

    @property
    def template(self):
        """Gets the template of this SendMessagesRequest.


        :return: The template of this SendMessagesRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this SendMessagesRequest.


        :param template: The template of this SendMessagesRequest.
        :type template: str
        """

        self._template = template

    @property
    def type(self):
        """Gets the type of this SendMessagesRequest.


        :return: The type of this SendMessagesRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendMessagesRequest.


        :param type: The type of this SendMessagesRequest.
        :type type: str
        """
        allowed_values = ["SMS", "MMS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
