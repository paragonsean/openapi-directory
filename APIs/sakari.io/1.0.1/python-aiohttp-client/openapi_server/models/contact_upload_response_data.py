# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server import util


class ContactUploadResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts: List[Contact]=None, errors: List[Contact]=None, inserted: int=None, submitted: int=None, success: int=None, updated: int=None):
        """ContactUploadResponseData - a model defined in OpenAPI

        :param contacts: The contacts of this ContactUploadResponseData.
        :param errors: The errors of this ContactUploadResponseData.
        :param inserted: The inserted of this ContactUploadResponseData.
        :param submitted: The submitted of this ContactUploadResponseData.
        :param success: The success of this ContactUploadResponseData.
        :param updated: The updated of this ContactUploadResponseData.
        """
        self.openapi_types = {
            'contacts': List[Contact],
            'errors': List[Contact],
            'inserted': int,
            'submitted': int,
            'success': int,
            'updated': int
        }

        self.attribute_map = {
            'contacts': 'contacts',
            'errors': 'errors',
            'inserted': 'inserted',
            'submitted': 'submitted',
            'success': 'success',
            'updated': 'updated'
        }

        self._contacts = contacts
        self._errors = errors
        self._inserted = inserted
        self._submitted = submitted
        self._success = success
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactUploadResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactUploadResponse_data of this ContactUploadResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this ContactUploadResponseData.

        Uploaded contacts

        :return: The contacts of this ContactUploadResponseData.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ContactUploadResponseData.

        Uploaded contacts

        :param contacts: The contacts of this ContactUploadResponseData.
        :type contacts: List[Contact]
        """

        self._contacts = contacts

    @property
    def errors(self):
        """Gets the errors of this ContactUploadResponseData.

        Contacts that failed validation

        :return: The errors of this ContactUploadResponseData.
        :rtype: List[Contact]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ContactUploadResponseData.

        Contacts that failed validation

        :param errors: The errors of this ContactUploadResponseData.
        :type errors: List[Contact]
        """

        self._errors = errors

    @property
    def inserted(self):
        """Gets the inserted of this ContactUploadResponseData.


        :return: The inserted of this ContactUploadResponseData.
        :rtype: int
        """
        return self._inserted

    @inserted.setter
    def inserted(self, inserted):
        """Sets the inserted of this ContactUploadResponseData.


        :param inserted: The inserted of this ContactUploadResponseData.
        :type inserted: int
        """

        self._inserted = inserted

    @property
    def submitted(self):
        """Gets the submitted of this ContactUploadResponseData.


        :return: The submitted of this ContactUploadResponseData.
        :rtype: int
        """
        return self._submitted

    @submitted.setter
    def submitted(self, submitted):
        """Sets the submitted of this ContactUploadResponseData.


        :param submitted: The submitted of this ContactUploadResponseData.
        :type submitted: int
        """

        self._submitted = submitted

    @property
    def success(self):
        """Gets the success of this ContactUploadResponseData.


        :return: The success of this ContactUploadResponseData.
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ContactUploadResponseData.


        :param success: The success of this ContactUploadResponseData.
        :type success: int
        """

        self._success = success

    @property
    def updated(self):
        """Gets the updated of this ContactUploadResponseData.


        :return: The updated of this ContactUploadResponseData.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ContactUploadResponseData.


        :param updated: The updated of this ContactUploadResponseData.
        :type updated: int
        """

        self._updated = updated
