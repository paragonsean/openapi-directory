# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_identifiers_mobile import ContactIdentifiersMobile
from openapi_server.models.error import Error
from openapi_server.models.tag import Tag
from openapi_server.models.updated import Updated
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, id: str=None, last_name: str=None, mobile: ContactIdentifiersMobile=None, attributes: object=None, tags: List[Tag]=None, created: Updated=None, error: Error=None, updated: Updated=None, valid: bool=None):
        """Contact - a model defined in OpenAPI

        :param email: The email of this Contact.
        :param first_name: The first_name of this Contact.
        :param id: The id of this Contact.
        :param last_name: The last_name of this Contact.
        :param mobile: The mobile of this Contact.
        :param attributes: The attributes of this Contact.
        :param tags: The tags of this Contact.
        :param created: The created of this Contact.
        :param error: The error of this Contact.
        :param updated: The updated of this Contact.
        :param valid: The valid of this Contact.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'mobile': ContactIdentifiersMobile,
            'attributes': object,
            'tags': List[Tag],
            'created': Updated,
            'error': Error,
            'updated': Updated,
            'valid': bool
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'mobile': 'mobile',
            'attributes': 'attributes',
            'tags': 'tags',
            'created': 'created',
            'error': 'error',
            'updated': 'updated',
            'valid': 'valid'
        }

        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._mobile = mobile
        self._attributes = attributes
        self._tags = tags
        self._created = created
        self._error = error
        self._updated = updated
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Contact.


        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Contact.


        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.


        :param first_name: The first_name of this Contact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Contact.


        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Contact.


        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.


        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def mobile(self):
        """Gets the mobile of this Contact.


        :return: The mobile of this Contact.
        :rtype: ContactIdentifiersMobile
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Contact.


        :param mobile: The mobile of this Contact.
        :type mobile: ContactIdentifiersMobile
        """

        self._mobile = mobile

    @property
    def attributes(self):
        """Gets the attributes of this Contact.


        :return: The attributes of this Contact.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Contact.


        :param attributes: The attributes of this Contact.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def tags(self):
        """Gets the tags of this Contact.


        :return: The tags of this Contact.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Contact.


        :param tags: The tags of this Contact.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def created(self):
        """Gets the created of this Contact.


        :return: The created of this Contact.
        :rtype: Updated
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Contact.


        :param created: The created of this Contact.
        :type created: Updated
        """

        self._created = created

    @property
    def error(self):
        """Gets the error of this Contact.


        :return: The error of this Contact.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Contact.


        :param error: The error of this Contact.
        :type error: Error
        """

        self._error = error

    @property
    def updated(self):
        """Gets the updated of this Contact.


        :return: The updated of this Contact.
        :rtype: Updated
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Contact.


        :param updated: The updated of this Contact.
        :type updated: Updated
        """

        self._updated = updated

    @property
    def valid(self):
        """Gets the valid of this Contact.


        :return: The valid of this Contact.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Contact.


        :param valid: The valid of this Contact.
        :type valid: bool
        """

        self._valid = valid
