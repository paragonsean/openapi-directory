# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_identifiers import ContactIdentifiers
from openapi_server.models.error import Error
from openapi_server.models.message_conversation import MessageConversation
from openapi_server.models.message_media_inner import MessageMediaInner
from openapi_server.models.updated import Updated
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact: ContactIdentifiers=None, conversation: MessageConversation=None, created: Updated=None, error: Error=None, id: str=None, media: List[MessageMediaInner]=None, message: str=None, outgoing: bool=None, phone_number: str=None, price: float=None, read: bool=None, segments: float=None, status: str=None, template: str=None, updated: Updated=None):
        """Message - a model defined in OpenAPI

        :param contact: The contact of this Message.
        :param conversation: The conversation of this Message.
        :param created: The created of this Message.
        :param error: The error of this Message.
        :param id: The id of this Message.
        :param media: The media of this Message.
        :param message: The message of this Message.
        :param outgoing: The outgoing of this Message.
        :param phone_number: The phone_number of this Message.
        :param price: The price of this Message.
        :param read: The read of this Message.
        :param segments: The segments of this Message.
        :param status: The status of this Message.
        :param template: The template of this Message.
        :param updated: The updated of this Message.
        """
        self.openapi_types = {
            'contact': ContactIdentifiers,
            'conversation': MessageConversation,
            'created': Updated,
            'error': Error,
            'id': str,
            'media': List[MessageMediaInner],
            'message': str,
            'outgoing': bool,
            'phone_number': str,
            'price': float,
            'read': bool,
            'segments': float,
            'status': str,
            'template': str,
            'updated': Updated
        }

        self.attribute_map = {
            'contact': 'contact',
            'conversation': 'conversation',
            'created': 'created',
            'error': 'error',
            'id': 'id',
            'media': 'media',
            'message': 'message',
            'outgoing': 'outgoing',
            'phone_number': 'phoneNumber',
            'price': 'price',
            'read': 'read',
            'segments': 'segments',
            'status': 'status',
            'template': 'template',
            'updated': 'updated'
        }

        self._contact = contact
        self._conversation = conversation
        self._created = created
        self._error = error
        self._id = id
        self._media = media
        self._message = message
        self._outgoing = outgoing
        self._phone_number = phone_number
        self._price = price
        self._read = read
        self._segments = segments
        self._status = status
        self._template = template
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact(self):
        """Gets the contact of this Message.


        :return: The contact of this Message.
        :rtype: ContactIdentifiers
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Message.


        :param contact: The contact of this Message.
        :type contact: ContactIdentifiers
        """

        self._contact = contact

    @property
    def conversation(self):
        """Gets the conversation of this Message.


        :return: The conversation of this Message.
        :rtype: MessageConversation
        """
        return self._conversation

    @conversation.setter
    def conversation(self, conversation):
        """Sets the conversation of this Message.


        :param conversation: The conversation of this Message.
        :type conversation: MessageConversation
        """

        self._conversation = conversation

    @property
    def created(self):
        """Gets the created of this Message.


        :return: The created of this Message.
        :rtype: Updated
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Message.


        :param created: The created of this Message.
        :type created: Updated
        """

        self._created = created

    @property
    def error(self):
        """Gets the error of this Message.


        :return: The error of this Message.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Message.


        :param error: The error of this Message.
        :type error: Error
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this Message.


        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.


        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def media(self):
        """Gets the media of this Message.

        List of media objects attached to message

        :return: The media of this Message.
        :rtype: List[MessageMediaInner]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Message.

        List of media objects attached to message

        :param media: The media of this Message.
        :type media: List[MessageMediaInner]
        """

        self._media = media

    @property
    def message(self):
        """Gets the message of this Message.


        :return: The message of this Message.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Message.


        :param message: The message of this Message.
        :type message: str
        """

        self._message = message

    @property
    def outgoing(self):
        """Gets the outgoing of this Message.


        :return: The outgoing of this Message.
        :rtype: bool
        """
        return self._outgoing

    @outgoing.setter
    def outgoing(self, outgoing):
        """Sets the outgoing of this Message.


        :param outgoing: The outgoing of this Message.
        :type outgoing: bool
        """

        self._outgoing = outgoing

    @property
    def phone_number(self):
        """Gets the phone_number of this Message.


        :return: The phone_number of this Message.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Message.


        :param phone_number: The phone_number of this Message.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def price(self):
        """Gets the price of this Message.


        :return: The price of this Message.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Message.


        :param price: The price of this Message.
        :type price: float
        """

        self._price = price

    @property
    def read(self):
        """Gets the read of this Message.


        :return: The read of this Message.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Message.


        :param read: The read of this Message.
        :type read: bool
        """

        self._read = read

    @property
    def segments(self):
        """Gets the segments of this Message.


        :return: The segments of this Message.
        :rtype: float
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Message.


        :param segments: The segments of this Message.
        :type segments: float
        """

        self._segments = segments

    @property
    def status(self):
        """Gets the status of this Message.


        :return: The status of this Message.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Message.


        :param status: The status of this Message.
        :type status: str
        """

        self._status = status

    @property
    def template(self):
        """Gets the template of this Message.


        :return: The template of this Message.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Message.


        :param template: The template of this Message.
        :type template: str
        """

        self._template = template

    @property
    def updated(self):
        """Gets the updated of this Message.


        :return: The updated of this Message.
        :rtype: Updated
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Message.


        :param updated: The updated of this Message.
        :type updated: Updated
        """

        self._updated = updated
