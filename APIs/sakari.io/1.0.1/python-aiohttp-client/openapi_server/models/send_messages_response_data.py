# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.message import Message
from openapi_server import util


class SendMessagesResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_price: float=None, invalid: List[Contact]=None, job_id: str=None, messages: List[Message]=None, requested: int=None, valid: int=None):
        """SendMessagesResponseData - a model defined in OpenAPI

        :param estimated_price: The estimated_price of this SendMessagesResponseData.
        :param invalid: The invalid of this SendMessagesResponseData.
        :param job_id: The job_id of this SendMessagesResponseData.
        :param messages: The messages of this SendMessagesResponseData.
        :param requested: The requested of this SendMessagesResponseData.
        :param valid: The valid of this SendMessagesResponseData.
        """
        self.openapi_types = {
            'estimated_price': float,
            'invalid': List[Contact],
            'job_id': str,
            'messages': List[Message],
            'requested': int,
            'valid': int
        }

        self.attribute_map = {
            'estimated_price': 'estimatedPrice',
            'invalid': 'invalid',
            'job_id': 'jobId',
            'messages': 'messages',
            'requested': 'requested',
            'valid': 'valid'
        }

        self._estimated_price = estimated_price
        self._invalid = invalid
        self._job_id = job_id
        self._messages = messages
        self._requested = requested
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessagesResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessagesResponse_data of this SendMessagesResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_price(self):
        """Gets the estimated_price of this SendMessagesResponseData.


        :return: The estimated_price of this SendMessagesResponseData.
        :rtype: float
        """
        return self._estimated_price

    @estimated_price.setter
    def estimated_price(self, estimated_price):
        """Sets the estimated_price of this SendMessagesResponseData.


        :param estimated_price: The estimated_price of this SendMessagesResponseData.
        :type estimated_price: float
        """

        self._estimated_price = estimated_price

    @property
    def invalid(self):
        """Gets the invalid of this SendMessagesResponseData.


        :return: The invalid of this SendMessagesResponseData.
        :rtype: List[Contact]
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this SendMessagesResponseData.


        :param invalid: The invalid of this SendMessagesResponseData.
        :type invalid: List[Contact]
        """

        self._invalid = invalid

    @property
    def job_id(self):
        """Gets the job_id of this SendMessagesResponseData.


        :return: The job_id of this SendMessagesResponseData.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this SendMessagesResponseData.


        :param job_id: The job_id of this SendMessagesResponseData.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def messages(self):
        """Gets the messages of this SendMessagesResponseData.


        :return: The messages of this SendMessagesResponseData.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this SendMessagesResponseData.


        :param messages: The messages of this SendMessagesResponseData.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def requested(self):
        """Gets the requested of this SendMessagesResponseData.


        :return: The requested of this SendMessagesResponseData.
        :rtype: int
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this SendMessagesResponseData.


        :param requested: The requested of this SendMessagesResponseData.
        :type requested: int
        """

        self._requested = requested

    @property
    def valid(self):
        """Gets the valid of this SendMessagesResponseData.


        :return: The valid of this SendMessagesResponseData.
        :rtype: int
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this SendMessagesResponseData.


        :param valid: The valid of this SendMessagesResponseData.
        :type valid: int
        """

        self._valid = valid
