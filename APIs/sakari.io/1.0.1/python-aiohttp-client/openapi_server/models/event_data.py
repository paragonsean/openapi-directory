# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_event_payload import AccountEventPayload
from openapi_server.models.contact_identifiers import ContactIdentifiers
from openapi_server.models.message_event_payload import MessageEventPayload
from openapi_server import util


class EventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, contact: ContactIdentifiers=None, error: str=None, message: str=None, status: str=None):
        """EventData - a model defined in OpenAPI

        :param balance: The balance of this EventData.
        :param contact: The contact of this EventData.
        :param error: The error of this EventData.
        :param message: The message of this EventData.
        :param status: The status of this EventData.
        """
        self.openapi_types = {
            'balance': float,
            'contact': ContactIdentifiers,
            'error': str,
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'contact': 'contact',
            'error': 'error',
            'message': 'message',
            'status': 'status'
        }

        self._balance = balance
        self._contact = contact
        self._error = error
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_data of this EventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this EventData.


        :return: The balance of this EventData.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this EventData.


        :param balance: The balance of this EventData.
        :type balance: float
        """

        self._balance = balance

    @property
    def contact(self):
        """Gets the contact of this EventData.


        :return: The contact of this EventData.
        :rtype: ContactIdentifiers
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this EventData.


        :param contact: The contact of this EventData.
        :type contact: ContactIdentifiers
        """

        self._contact = contact

    @property
    def error(self):
        """Gets the error of this EventData.


        :return: The error of this EventData.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EventData.


        :param error: The error of this EventData.
        :type error: str
        """

        self._error = error

    @property
    def message(self):
        """Gets the message of this EventData.


        :return: The message of this EventData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventData.


        :param message: The message of this EventData.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this EventData.


        :return: The status of this EventData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventData.


        :param status: The status of this EventData.
        :type status: str
        """

        self._status = status
