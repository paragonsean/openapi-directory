/**
 * Sakari
 * # Introduction  Welcome to the documentation for the Sakari Messaging REST API.   Sakari provides an advanced platform to drive large scale customized SMS communication  REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.  To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).  # Quickstart  For your convenience we have created a quickstart guide to get you up and running in 5 minutes.   [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)  # PostMan Collection  We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)  # Finding your client id, client secret and account id  To authenticate against the API's you will need three key pieces of data  - client id  - client secret  - account id  To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"  # Versioning  With any breaking changes we will introduce a new version of the API. The latest version is v1.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.  # Testing  There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.  # Throttling / Limits  Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"success\": false,   \"error\": {     \"code\": \"CONT-001\",     \"message\": \"Invalid mobile number\"   } } ```  # Pagination  For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:  ``` {   \"pagination\": {     \"offset\": 0,     \"limit\": 10     \"totalCount\": 21   }   } ```  When making calls to the API, you can adjust the slice of data returned using query parameters such as:  `` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``  This will return 25 contacts with an offset of 20. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sakari.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_conversation_isSet = false;
    m_conversation_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_outgoing_isSet = false;
    m_outgoing_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_conversation_isValid = ::OpenAPI::fromJsonValue(m_conversation, json[QString("conversation")]);
    m_conversation_isSet = !json[QString("conversation")].isNull() && m_conversation_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_outgoing_isValid = ::OpenAPI::fromJsonValue(m_outgoing, json[QString("outgoing")]);
    m_outgoing_isSet = !json[QString("outgoing")].isNull() && m_outgoing_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_conversation.isSet()) {
        obj.insert(QString("conversation"), ::OpenAPI::toJsonValue(m_conversation));
    }
    if (m_created.isSet()) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_outgoing_isSet) {
        obj.insert(QString("outgoing"), ::OpenAPI::toJsonValue(m_outgoing));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_segments_isSet) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_updated.isSet()) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

OAIContactIdentifiers OAIMessage::getContact() const {
    return m_contact;
}
void OAIMessage::setContact(const OAIContactIdentifiers &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIMessage::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIMessage::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIMessage_conversation OAIMessage::getConversation() const {
    return m_conversation;
}
void OAIMessage::setConversation(const OAIMessage_conversation &conversation) {
    m_conversation = conversation;
    m_conversation_isSet = true;
}

bool OAIMessage::is_conversation_Set() const{
    return m_conversation_isSet;
}

bool OAIMessage::is_conversation_Valid() const{
    return m_conversation_isValid;
}

OAIUpdated OAIMessage::getCreated() const {
    return m_created;
}
void OAIMessage::setCreated(const OAIUpdated &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIMessage::is_created_Set() const{
    return m_created_isSet;
}

bool OAIMessage::is_created_Valid() const{
    return m_created_isValid;
}

OAIError OAIMessage::getError() const {
    return m_error;
}
void OAIMessage::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIMessage::is_error_Set() const{
    return m_error_isSet;
}

bool OAIMessage::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIMessage::getId() const {
    return m_id;
}
void OAIMessage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessage::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMessage_media_inner> OAIMessage::getMedia() const {
    return m_media;
}
void OAIMessage::setMedia(const QList<OAIMessage_media_inner> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIMessage::is_media_Set() const{
    return m_media_isSet;
}

bool OAIMessage::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIMessage::getMessage() const {
    return m_message;
}
void OAIMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMessage::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIMessage::isOutgoing() const {
    return m_outgoing;
}
void OAIMessage::setOutgoing(const bool &outgoing) {
    m_outgoing = outgoing;
    m_outgoing_isSet = true;
}

bool OAIMessage::is_outgoing_Set() const{
    return m_outgoing_isSet;
}

bool OAIMessage::is_outgoing_Valid() const{
    return m_outgoing_isValid;
}

QString OAIMessage::getPhoneNumber() const {
    return m_phone_number;
}
void OAIMessage::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIMessage::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIMessage::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

double OAIMessage::getPrice() const {
    return m_price;
}
void OAIMessage::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIMessage::is_price_Set() const{
    return m_price_isSet;
}

bool OAIMessage::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIMessage::isRead() const {
    return m_read;
}
void OAIMessage::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIMessage::is_read_Set() const{
    return m_read_isSet;
}

bool OAIMessage::is_read_Valid() const{
    return m_read_isValid;
}

double OAIMessage::getSegments() const {
    return m_segments;
}
void OAIMessage::setSegments(const double &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIMessage::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIMessage::is_segments_Valid() const{
    return m_segments_isValid;
}

QString OAIMessage::getStatus() const {
    return m_status;
}
void OAIMessage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMessage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMessage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMessage::getRTemplate() const {
    return m_r_template;
}
void OAIMessage::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIMessage::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIMessage::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIUpdated OAIMessage::getUpdated() const {
    return m_updated;
}
void OAIMessage::setUpdated(const OAIUpdated &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIMessage::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIMessage::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outgoing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
