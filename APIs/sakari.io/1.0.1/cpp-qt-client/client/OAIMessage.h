/**
 * Sakari
 * # Introduction  Welcome to the documentation for the Sakari Messaging REST API.   Sakari provides an advanced platform to drive large scale customized SMS communication  REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.  To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).  # Quickstart  For your convenience we have created a quickstart guide to get you up and running in 5 minutes.   [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)  # PostMan Collection  We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)  # Finding your client id, client secret and account id  To authenticate against the API's you will need three key pieces of data  - client id  - client secret  - account id  To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"  # Versioning  With any breaking changes we will introduce a new version of the API. The latest version is v1.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.  # Testing  There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.  # Throttling / Limits  Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"success\": false,   \"error\": {     \"code\": \"CONT-001\",     \"message\": \"Invalid mobile number\"   } } ```  # Pagination  For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:  ``` {   \"pagination\": {     \"offset\": 0,     \"limit\": 10     \"totalCount\": 21   }   } ```  When making calls to the API, you can adjust the slice of data returned using query parameters such as:  `` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``  This will return 25 contacts with an offset of 20. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sakari.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessage.h
 *
 * 
 */

#ifndef OAIMessage_H
#define OAIMessage_H

#include <QJsonObject>

#include "OAIContactIdentifiers.h"
#include "OAIError.h"
#include "OAIMessage_conversation.h"
#include "OAIMessage_media_inner.h"
#include "OAIUpdated.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContactIdentifiers;
class OAIMessage_conversation;
class OAIUpdated;
class OAIError;
class OAIMessage_media_inner;

class OAIMessage : public OAIObject {
public:
    OAIMessage();
    OAIMessage(QString json);
    ~OAIMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIContactIdentifiers getContact() const;
    void setContact(const OAIContactIdentifiers &contact);
    bool is_contact_Set() const;
    bool is_contact_Valid() const;

    OAIMessage_conversation getConversation() const;
    void setConversation(const OAIMessage_conversation &conversation);
    bool is_conversation_Set() const;
    bool is_conversation_Valid() const;

    OAIUpdated getCreated() const;
    void setCreated(const OAIUpdated &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIError getError() const;
    void setError(const OAIError &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIMessage_media_inner> getMedia() const;
    void setMedia(const QList<OAIMessage_media_inner> &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    bool isOutgoing() const;
    void setOutgoing(const bool &outgoing);
    bool is_outgoing_Set() const;
    bool is_outgoing_Valid() const;

    QString getPhoneNumber() const;
    void setPhoneNumber(const QString &phone_number);
    bool is_phone_number_Set() const;
    bool is_phone_number_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    bool isRead() const;
    void setRead(const bool &read);
    bool is_read_Set() const;
    bool is_read_Valid() const;

    double getSegments() const;
    void setSegments(const double &segments);
    bool is_segments_Set() const;
    bool is_segments_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getRTemplate() const;
    void setRTemplate(const QString &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    OAIUpdated getUpdated() const;
    void setUpdated(const OAIUpdated &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIContactIdentifiers m_contact;
    bool m_contact_isSet;
    bool m_contact_isValid;

    OAIMessage_conversation m_conversation;
    bool m_conversation_isSet;
    bool m_conversation_isValid;

    OAIUpdated m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIError m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIMessage_media_inner> m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    bool m_outgoing;
    bool m_outgoing_isSet;
    bool m_outgoing_isValid;

    QString m_phone_number;
    bool m_phone_number_isSet;
    bool m_phone_number_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    bool m_read;
    bool m_read_isSet;
    bool m_read_isValid;

    double m_segments;
    bool m_segments_isSet;
    bool m_segments_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    OAIUpdated m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessage)

#endif // OAIMessage_H
