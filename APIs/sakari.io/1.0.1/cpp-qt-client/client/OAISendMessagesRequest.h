/**
 * Sakari
 * # Introduction  Welcome to the documentation for the Sakari Messaging REST API.   Sakari provides an advanced platform to drive large scale customized SMS communication  REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.  To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).  # Quickstart  For your convenience we have created a quickstart guide to get you up and running in 5 minutes.   [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)  # PostMan Collection  We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)  # Finding your client id, client secret and account id  To authenticate against the API's you will need three key pieces of data  - client id  - client secret  - account id  To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"  # Versioning  With any breaking changes we will introduce a new version of the API. The latest version is v1.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.  # Testing  There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.  # Throttling / Limits  Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"success\": false,   \"error\": {     \"code\": \"CONT-001\",     \"message\": \"Invalid mobile number\"   } } ```  # Pagination  For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:  ``` {   \"pagination\": {     \"offset\": 0,     \"limit\": 10     \"totalCount\": 21   }   } ```  When making calls to the API, you can adjust the slice of data returned using query parameters such as:  `` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``  This will return 25 contacts with an offset of 20. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sakari.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISendMessagesRequest.h
 *
 * 
 */

#ifndef OAISendMessagesRequest_H
#define OAISendMessagesRequest_H

#include <QJsonObject>

#include "OAIContactRequest.h"
#include "OAISendMessagesRequest_filters.h"
#include "OAISendMessagesRequest_media_inner.h"
#include "OAISendMessagesRequest_phoneNumberFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContactRequest;
class OAISendMessagesRequest_filters;
class OAISendMessagesRequest_media_inner;
class OAISendMessagesRequest_phoneNumberFilter;

class OAISendMessagesRequest : public OAIObject {
public:
    OAISendMessagesRequest();
    OAISendMessagesRequest(QString json);
    ~OAISendMessagesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIContactRequest> getContacts() const;
    void setContacts(const QList<OAIContactRequest> &contacts);
    bool is_contacts_Set() const;
    bool is_contacts_Valid() const;

    QString getConversationStrategy() const;
    void setConversationStrategy(const QString &conversation_strategy);
    bool is_conversation_strategy_Set() const;
    bool is_conversation_strategy_Valid() const;

    QList<QString> getConversations() const;
    void setConversations(const QList<QString> &conversations);
    bool is_conversations_Set() const;
    bool is_conversations_Valid() const;

    OAISendMessagesRequest_filters getFilters() const;
    void setFilters(const OAISendMessagesRequest_filters &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    QList<OAISendMessagesRequest_media_inner> getMedia() const;
    void setMedia(const QList<OAISendMessagesRequest_media_inner> &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    OAISendMessagesRequest_phoneNumberFilter getPhoneNumberFilter() const;
    void setPhoneNumberFilter(const OAISendMessagesRequest_phoneNumberFilter &phone_number_filter);
    bool is_phone_number_filter_Set() const;
    bool is_phone_number_filter_Valid() const;

    QString getRTemplate() const;
    void setRTemplate(const QString &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIContactRequest> m_contacts;
    bool m_contacts_isSet;
    bool m_contacts_isValid;

    QString m_conversation_strategy;
    bool m_conversation_strategy_isSet;
    bool m_conversation_strategy_isValid;

    QList<QString> m_conversations;
    bool m_conversations_isSet;
    bool m_conversations_isValid;

    OAISendMessagesRequest_filters m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    QList<OAISendMessagesRequest_media_inner> m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    OAISendMessagesRequest_phoneNumberFilter m_phone_number_filter;
    bool m_phone_number_filter_isSet;
    bool m_phone_number_filter_isValid;

    QString m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISendMessagesRequest)

#endif // OAISendMessagesRequest_H
