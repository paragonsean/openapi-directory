/*
 * Sakari
 * # Introduction  Welcome to the documentation for the Sakari Messaging REST API.   Sakari provides an advanced platform to drive large scale customized SMS communication  REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.  To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).  # Quickstart  For your convenience we have created a quickstart guide to get you up and running in 5 minutes.   [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)  # PostMan Collection  We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)  # Finding your client id, client secret and account id  To authenticate against the API's you will need three key pieces of data  - client id  - client secret  - account id  To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"  # Versioning  With any breaking changes we will introduce a new version of the API. The latest version is v1.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.  # Testing  There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.  # Throttling / Limits  Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"success\": false,   \"error\": {     \"code\": \"CONT-001\",     \"message\": \"Invalid mobile number\"   } } ```  # Pagination  For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:  ``` {   \"pagination\": {     \"offset\": 0,     \"limit\": 10     \"totalCount\": 21   }   } ```  When making calls to the API, you can adjust the slice of data returned using query parameters such as:  `` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``  This will return 25 contacts with an offset of 20. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sakari.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactRequest;
import org.openapitools.client.model.SendMessagesRequestFilters;
import org.openapitools.client.model.SendMessagesRequestMediaInner;
import org.openapitools.client.model.SendMessagesRequestPhoneNumberFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SendMessagesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:41.630200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendMessagesRequest {
  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<ContactRequest> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONVERSATION_STRATEGY = "conversationStrategy";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_STRATEGY)
  private String conversationStrategy;

  public static final String SERIALIZED_NAME_CONVERSATIONS = "conversations";
  @SerializedName(SERIALIZED_NAME_CONVERSATIONS)
  private List<String> conversations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private SendMessagesRequestFilters filters;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<SendMessagesRequestMediaInner> media = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER_FILTER = "phoneNumberFilter";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_FILTER)
  private SendMessagesRequestPhoneNumberFilter phoneNumberFilter;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SMS("SMS"),
    
    MMS("MMS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public SendMessagesRequest() {
  }

  public SendMessagesRequest contacts(List<ContactRequest> contacts) {
    this.contacts = contacts;
    return this;
  }

  public SendMessagesRequest addContactsItem(ContactRequest contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<ContactRequest> getContacts() {
    return contacts;
  }

  public void setContacts(List<ContactRequest> contacts) {
    this.contacts = contacts;
  }


  public SendMessagesRequest conversationStrategy(String conversationStrategy) {
    this.conversationStrategy = conversationStrategy;
    return this;
  }

  /**
   * Get conversationStrategy
   * @return conversationStrategy
   */
  @javax.annotation.Nullable
  public String getConversationStrategy() {
    return conversationStrategy;
  }

  public void setConversationStrategy(String conversationStrategy) {
    this.conversationStrategy = conversationStrategy;
  }


  public SendMessagesRequest conversations(List<String> conversations) {
    this.conversations = conversations;
    return this;
  }

  public SendMessagesRequest addConversationsItem(String conversationsItem) {
    if (this.conversations == null) {
      this.conversations = new ArrayList<>();
    }
    this.conversations.add(conversationsItem);
    return this;
  }

  /**
   * List of conversation ids to send messages to
   * @return conversations
   */
  @javax.annotation.Nullable
  public List<String> getConversations() {
    return conversations;
  }

  public void setConversations(List<String> conversations) {
    this.conversations = conversations;
  }


  public SendMessagesRequest filters(SendMessagesRequestFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public SendMessagesRequestFilters getFilters() {
    return filters;
  }

  public void setFilters(SendMessagesRequestFilters filters) {
    this.filters = filters;
  }


  public SendMessagesRequest media(List<SendMessagesRequestMediaInner> media) {
    this.media = media;
    return this;
  }

  public SendMessagesRequest addMediaItem(SendMessagesRequestMediaInner mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

  /**
   * List of media objects to attach to message
   * @return media
   */
  @javax.annotation.Nullable
  public List<SendMessagesRequestMediaInner> getMedia() {
    return media;
  }

  public void setMedia(List<SendMessagesRequestMediaInner> media) {
    this.media = media;
  }


  public SendMessagesRequest phoneNumberFilter(SendMessagesRequestPhoneNumberFilter phoneNumberFilter) {
    this.phoneNumberFilter = phoneNumberFilter;
    return this;
  }

  /**
   * Get phoneNumberFilter
   * @return phoneNumberFilter
   */
  @javax.annotation.Nullable
  public SendMessagesRequestPhoneNumberFilter getPhoneNumberFilter() {
    return phoneNumberFilter;
  }

  public void setPhoneNumberFilter(SendMessagesRequestPhoneNumberFilter phoneNumberFilter) {
    this.phoneNumberFilter = phoneNumberFilter;
  }


  public SendMessagesRequest template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public SendMessagesRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessagesRequest sendMessagesRequest = (SendMessagesRequest) o;
    return Objects.equals(this.contacts, sendMessagesRequest.contacts) &&
        Objects.equals(this.conversationStrategy, sendMessagesRequest.conversationStrategy) &&
        Objects.equals(this.conversations, sendMessagesRequest.conversations) &&
        Objects.equals(this.filters, sendMessagesRequest.filters) &&
        Objects.equals(this.media, sendMessagesRequest.media) &&
        Objects.equals(this.phoneNumberFilter, sendMessagesRequest.phoneNumberFilter) &&
        Objects.equals(this.template, sendMessagesRequest.template) &&
        Objects.equals(this.type, sendMessagesRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contacts, conversationStrategy, conversations, filters, media, phoneNumberFilter, template, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessagesRequest {\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    conversationStrategy: ").append(toIndentedString(conversationStrategy)).append("\n");
    sb.append("    conversations: ").append(toIndentedString(conversations)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    phoneNumberFilter: ").append(toIndentedString(phoneNumberFilter)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contacts");
    openapiFields.add("conversationStrategy");
    openapiFields.add("conversations");
    openapiFields.add("filters");
    openapiFields.add("media");
    openapiFields.add("phoneNumberFilter");
    openapiFields.add("template");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendMessagesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendMessagesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendMessagesRequest is not found in the empty JSON string", SendMessagesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendMessagesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendMessagesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            ContactRequest.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      if ((jsonObj.get("conversationStrategy") != null && !jsonObj.get("conversationStrategy").isJsonNull()) && !jsonObj.get("conversationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationStrategy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("conversations") != null && !jsonObj.get("conversations").isJsonNull() && !jsonObj.get("conversations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversations` to be an array in the JSON string but got `%s`", jsonObj.get("conversations").toString()));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        SendMessagesRequestFilters.validateJsonElement(jsonObj.get("filters"));
      }
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
        if (jsonArraymedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("media").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
          }

          // validate the optional field `media` (array)
          for (int i = 0; i < jsonArraymedia.size(); i++) {
            SendMessagesRequestMediaInner.validateJsonElement(jsonArraymedia.get(i));
          };
        }
      }
      // validate the optional field `phoneNumberFilter`
      if (jsonObj.get("phoneNumberFilter") != null && !jsonObj.get("phoneNumberFilter").isJsonNull()) {
        SendMessagesRequestPhoneNumberFilter.validateJsonElement(jsonObj.get("phoneNumberFilter"));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendMessagesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendMessagesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendMessagesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendMessagesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendMessagesRequest>() {
           @Override
           public void write(JsonWriter out, SendMessagesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendMessagesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendMessagesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendMessagesRequest
   * @throws IOException if the JSON string is invalid with respect to SendMessagesRequest
   */
  public static SendMessagesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendMessagesRequest.class);
  }

  /**
   * Convert an instance of SendMessagesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

