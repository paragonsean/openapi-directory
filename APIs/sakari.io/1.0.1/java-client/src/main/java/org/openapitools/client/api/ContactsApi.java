/*
 * Sakari
 * # Introduction  Welcome to the documentation for the Sakari Messaging REST API.   Sakari provides an advanced platform to drive large scale customized SMS communication  REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.  To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).  # Quickstart  For your convenience we have created a quickstart guide to get you up and running in 5 minutes.   [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)  # PostMan Collection  We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)  # Finding your client id, client secret and account id  To authenticate against the API's you will need three key pieces of data  - client id  - client secret  - account id  To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"  # Versioning  With any breaking changes we will introduce a new version of the API. The latest version is v1.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.  # Testing  There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.  # Throttling / Limits  Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"success\": false,   \"error\": {     \"code\": \"CONT-001\",     \"message\": \"Invalid mobile number\"   } } ```  # Pagination  For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:  ``` {   \"pagination\": {     \"offset\": 0,     \"limit\": 10     \"totalCount\": 21   }   } ```  When making calls to the API, you can adjust the slice of data returned using query parameters such as:  `` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``  This will return 25 contacts with an offset of 20. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sakari.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CampaignsRemove200Response;
import org.openapitools.client.model.ContactRequest;
import org.openapitools.client.model.ContactResponse;
import org.openapitools.client.model.ContactsCreate201Response;
import org.openapitools.client.model.ContactsResponse;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contactsCreate
     * @param accountId Account to apply operations to (required)
     * @param mergeStrategy Determines how existing contacts with matching mobile numbers are treated (optional)
     * @param contactRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsCreateCall(String accountId, String mergeStrategy, ContactRequest contactRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactRequest;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/contacts"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mergeStrategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mergeStrategy", mergeStrategy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/csv"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sakari_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsCreateValidateBeforeCall(String accountId, String mergeStrategy, ContactRequest contactRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling contactsCreate(Async)");
        }

        return contactsCreateCall(accountId, mergeStrategy, contactRequest, _callback);

    }

    /**
     * Create contact
     * 
     * @param accountId Account to apply operations to (required)
     * @param mergeStrategy Determines how existing contacts with matching mobile numbers are treated (optional)
     * @param contactRequest  (optional)
     * @return ContactsCreate201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContactsCreate201Response contactsCreate(String accountId, String mergeStrategy, ContactRequest contactRequest) throws ApiException {
        ApiResponse<ContactsCreate201Response> localVarResp = contactsCreateWithHttpInfo(accountId, mergeStrategy, contactRequest);
        return localVarResp.getData();
    }

    /**
     * Create contact
     * 
     * @param accountId Account to apply operations to (required)
     * @param mergeStrategy Determines how existing contacts with matching mobile numbers are treated (optional)
     * @param contactRequest  (optional)
     * @return ApiResponse&lt;ContactsCreate201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactsCreate201Response> contactsCreateWithHttpInfo(String accountId, String mergeStrategy, ContactRequest contactRequest) throws ApiException {
        okhttp3.Call localVarCall = contactsCreateValidateBeforeCall(accountId, mergeStrategy, contactRequest, null);
        Type localVarReturnType = new TypeToken<ContactsCreate201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create contact (asynchronously)
     * 
     * @param accountId Account to apply operations to (required)
     * @param mergeStrategy Determines how existing contacts with matching mobile numbers are treated (optional)
     * @param contactRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsCreateAsync(String accountId, String mergeStrategy, ContactRequest contactRequest, final ApiCallback<ContactsCreate201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsCreateValidateBeforeCall(accountId, mergeStrategy, contactRequest, _callback);
        Type localVarReturnType = new TypeToken<ContactsCreate201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsFetch
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsFetchCall(String accountId, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/contacts/{contactId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sakari_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsFetchValidateBeforeCall(String accountId, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling contactsFetch(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling contactsFetch(Async)");
        }

        return contactsFetchCall(accountId, contactId, _callback);

    }

    /**
     * Fetch contact by ID
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact to return (required)
     * @return ContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContactResponse contactsFetch(String accountId, String contactId) throws ApiException {
        ApiResponse<ContactResponse> localVarResp = contactsFetchWithHttpInfo(accountId, contactId);
        return localVarResp.getData();
    }

    /**
     * Fetch contact by ID
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact to return (required)
     * @return ApiResponse&lt;ContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactResponse> contactsFetchWithHttpInfo(String accountId, String contactId) throws ApiException {
        okhttp3.Call localVarCall = contactsFetchValidateBeforeCall(accountId, contactId, null);
        Type localVarReturnType = new TypeToken<ContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch contact by ID (asynchronously)
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsFetchAsync(String accountId, String contactId, final ApiCallback<ContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsFetchValidateBeforeCall(accountId, contactId, _callback);
        Type localVarReturnType = new TypeToken<ContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsFetchAll
     * @param accountId Account to apply operations to (required)
     * @param offset Results to skip when paginating through a result set (optional)
     * @param limit Maximum number of results to return (optional)
     * @param firstName Filter by first name or part of (optional)
     * @param lastName Filter by last name or part of (optional)
     * @param mobile Filter by mobile or part of (optional)
     * @param email Filter by email or part of (optional)
     * @param tags Filter by tag(s) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsFetchAllCall(String accountId, Long offset, Long limit, String firstName, String lastName, String mobile, String email, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/contacts"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (mobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile", mobile));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sakari_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsFetchAllValidateBeforeCall(String accountId, Long offset, Long limit, String firstName, String lastName, String mobile, String email, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling contactsFetchAll(Async)");
        }

        return contactsFetchAllCall(accountId, offset, limit, firstName, lastName, mobile, email, tags, _callback);

    }

    /**
     * Fetch contacts
     * 
     * @param accountId Account to apply operations to (required)
     * @param offset Results to skip when paginating through a result set (optional)
     * @param limit Maximum number of results to return (optional)
     * @param firstName Filter by first name or part of (optional)
     * @param lastName Filter by last name or part of (optional)
     * @param mobile Filter by mobile or part of (optional)
     * @param email Filter by email or part of (optional)
     * @param tags Filter by tag(s) (optional)
     * @return ContactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ContactsResponse contactsFetchAll(String accountId, Long offset, Long limit, String firstName, String lastName, String mobile, String email, String tags) throws ApiException {
        ApiResponse<ContactsResponse> localVarResp = contactsFetchAllWithHttpInfo(accountId, offset, limit, firstName, lastName, mobile, email, tags);
        return localVarResp.getData();
    }

    /**
     * Fetch contacts
     * 
     * @param accountId Account to apply operations to (required)
     * @param offset Results to skip when paginating through a result set (optional)
     * @param limit Maximum number of results to return (optional)
     * @param firstName Filter by first name or part of (optional)
     * @param lastName Filter by last name or part of (optional)
     * @param mobile Filter by mobile or part of (optional)
     * @param email Filter by email or part of (optional)
     * @param tags Filter by tag(s) (optional)
     * @return ApiResponse&lt;ContactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactsResponse> contactsFetchAllWithHttpInfo(String accountId, Long offset, Long limit, String firstName, String lastName, String mobile, String email, String tags) throws ApiException {
        okhttp3.Call localVarCall = contactsFetchAllValidateBeforeCall(accountId, offset, limit, firstName, lastName, mobile, email, tags, null);
        Type localVarReturnType = new TypeToken<ContactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch contacts (asynchronously)
     * 
     * @param accountId Account to apply operations to (required)
     * @param offset Results to skip when paginating through a result set (optional)
     * @param limit Maximum number of results to return (optional)
     * @param firstName Filter by first name or part of (optional)
     * @param lastName Filter by last name or part of (optional)
     * @param mobile Filter by mobile or part of (optional)
     * @param email Filter by email or part of (optional)
     * @param tags Filter by tag(s) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> invalid request </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> invalid request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsFetchAllAsync(String accountId, Long offset, Long limit, String firstName, String lastName, String mobile, String email, String tags, final ApiCallback<ContactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsFetchAllValidateBeforeCall(accountId, offset, limit, firstName, lastName, mobile, email, tags, _callback);
        Type localVarReturnType = new TypeToken<ContactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsRemove
     * @param accountId Account to apply operations to (required)
     * @param contactId Contact id to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsRemoveCall(String accountId, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/contacts/{contactId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sakari_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsRemoveValidateBeforeCall(String accountId, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling contactsRemove(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling contactsRemove(Async)");
        }

        return contactsRemoveCall(accountId, contactId, _callback);

    }

    /**
     * Deletes a contact
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId Contact id to delete (required)
     * @return CampaignsRemove200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CampaignsRemove200Response contactsRemove(String accountId, String contactId) throws ApiException {
        ApiResponse<CampaignsRemove200Response> localVarResp = contactsRemoveWithHttpInfo(accountId, contactId);
        return localVarResp.getData();
    }

    /**
     * Deletes a contact
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId Contact id to delete (required)
     * @return ApiResponse&lt;CampaignsRemove200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CampaignsRemove200Response> contactsRemoveWithHttpInfo(String accountId, String contactId) throws ApiException {
        okhttp3.Call localVarCall = contactsRemoveValidateBeforeCall(accountId, contactId, null);
        Type localVarReturnType = new TypeToken<CampaignsRemove200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a contact (asynchronously)
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId Contact id to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsRemoveAsync(String accountId, String contactId, final ApiCallback<CampaignsRemove200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsRemoveValidateBeforeCall(accountId, contactId, _callback);
        Type localVarReturnType = new TypeToken<CampaignsRemove200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsUpdate
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsUpdateCall(String accountId, String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{accountId}/contacts/{contactId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sakari_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsUpdateValidateBeforeCall(String accountId, String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling contactsUpdate(Async)");
        }

        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling contactsUpdate(Async)");
        }

        return contactsUpdateCall(accountId, contactId, _callback);

    }

    /**
     * Updates a contact
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact (required)
     * @return ContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContactResponse contactsUpdate(String accountId, String contactId) throws ApiException {
        ApiResponse<ContactResponse> localVarResp = contactsUpdateWithHttpInfo(accountId, contactId);
        return localVarResp.getData();
    }

    /**
     * Updates a contact
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact (required)
     * @return ApiResponse&lt;ContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactResponse> contactsUpdateWithHttpInfo(String accountId, String contactId) throws ApiException {
        okhttp3.Call localVarCall = contactsUpdateValidateBeforeCall(accountId, contactId, null);
        Type localVarReturnType = new TypeToken<ContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a contact (asynchronously)
     * 
     * @param accountId Account to apply operations to (required)
     * @param contactId ID of contact (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsUpdateAsync(String accountId, String contactId, final ApiCallback<ContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsUpdateValidateBeforeCall(accountId, contactId, _callback);
        Type localVarReturnType = new TypeToken<ContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
