/*
 * Sakari
 * # Introduction  Welcome to the documentation for the Sakari Messaging REST API.   Sakari provides an advanced platform to drive large scale customized SMS communication  REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.  To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).  # Quickstart  For your convenience we have created a quickstart guide to get you up and running in 5 minutes.   [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)  # PostMan Collection  We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)  # Finding your client id, client secret and account id  To authenticate against the API's you will need three key pieces of data  - client id  - client secret  - account id  To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"  # Versioning  With any breaking changes we will introduce a new version of the API. The latest version is v1.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.  # Testing  There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.  # Throttling / Limits  Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"success\": false,   \"error\": {     \"code\": \"CONT-001\",     \"message\": \"Invalid mobile number\"   } } ```  # Pagination  For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:  ``` {   \"pagination\": {     \"offset\": 0,     \"limit\": 10     \"totalCount\": 21   }   } ```  When making calls to the API, you can adjust the slice of data returned using query parameters such as:  `` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``  This will return 25 contacts with an offset of 20. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sakari.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountEventPayload;
import org.openapitools.client.model.ContactIdentifiers;
import org.openapitools.client.model.MessageEventPayload;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:41.630200-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(EventData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EventData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EventData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountEventPayload> adapterAccountEventPayload = gson.getDelegateAdapter(this, TypeToken.get(AccountEventPayload.class));
            final TypeAdapter<MessageEventPayload> adapterMessageEventPayload = gson.getDelegateAdapter(this, TypeToken.get(MessageEventPayload.class));

            return (TypeAdapter<T>) new TypeAdapter<EventData>() {
                @Override
                public void write(JsonWriter out, EventData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AccountEventPayload`
                    if (value.getActualInstance() instanceof AccountEventPayload) {
                        JsonElement element = adapterAccountEventPayload.toJsonTree((AccountEventPayload)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageEventPayload`
                    if (value.getActualInstance() instanceof MessageEventPayload) {
                        JsonElement element = adapterMessageEventPayload.toJsonTree((MessageEventPayload)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AccountEventPayload, MessageEventPayload");
                }

                @Override
                public EventData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AccountEventPayload
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccountEventPayload.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccountEventPayload;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccountEventPayload'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccountEventPayload failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccountEventPayload'", e);
                    }
                    // deserialize MessageEventPayload
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageEventPayload.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageEventPayload;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageEventPayload'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageEventPayload failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageEventPayload'", e);
                    }

                    if (match == 1) {
                        EventData ret = new EventData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for EventData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public EventData() {
        super("oneOf", Boolean.FALSE);
    }

    public EventData(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccountEventPayload", AccountEventPayload.class);
        schemas.put("MessageEventPayload", MessageEventPayload.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return EventData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AccountEventPayload, MessageEventPayload
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccountEventPayload) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageEventPayload) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccountEventPayload, MessageEventPayload");
    }

    /**
     * Get the actual instance, which can be the following:
     * AccountEventPayload, MessageEventPayload
     *
     * @return The actual instance (AccountEventPayload, MessageEventPayload)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccountEventPayload`. If the actual instance is not `AccountEventPayload`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountEventPayload`
     * @throws ClassCastException if the instance is not `AccountEventPayload`
     */
    public AccountEventPayload getAccountEventPayload() throws ClassCastException {
        return (AccountEventPayload)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageEventPayload`. If the actual instance is not `MessageEventPayload`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageEventPayload`
     * @throws ClassCastException if the instance is not `MessageEventPayload`
     */
    public MessageEventPayload getMessageEventPayload() throws ClassCastException {
        return (MessageEventPayload)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EventData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AccountEventPayload
        try {
            AccountEventPayload.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccountEventPayload failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageEventPayload
        try {
            MessageEventPayload.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageEventPayload failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for EventData with oneOf schemas: AccountEventPayload, MessageEventPayload. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of EventData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EventData
     * @throws IOException if the JSON string is invalid with respect to EventData
     */
    public static EventData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EventData.class);
    }

    /**
     * Convert an instance of EventData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

