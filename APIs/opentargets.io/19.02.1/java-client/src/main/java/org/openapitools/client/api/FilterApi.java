/*
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAssociationFilter_0
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param therapeuticArea An EFO code of a therapeutic area. (optional)
     * @param datasource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A Reactome pathway identifier (returning only those targets linked to the specified pathway). (optional)
     * @param targetClass A ChEMBL target class identifier (returning only those targets belonging to the specified class). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param direct If &#x60;true&#x60;, it returns associations that have at least one direct evidence connecting the target and the disease. If &#x60;false&#x60; it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology. (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields Fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param facets Returns facets (optional, default to false)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param scorevalueTypes Score types to apply the score value min and max filters. The default is &#x60;overall&#x60;. (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @param sort Sort by the given score type. Defaults to &#39;overall&#39; and descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~overall&#39;. You will call a data type score like: &#39;datatypes.literature&#39;, and a data source as &#39;datasources.gwas&#39;. Supports multiple entries.  (optional)
     * @param search Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationFilter_0Call(String target, String disease, String therapeuticArea, String datasource, String datatype, String pathway, String targetClass, String uniprotkw, Boolean direct, String datastructure, String fields, Boolean facets, Float scorevalueMin, Float scorevalueMax, String scorevalueTypes, BigDecimal size, BigDecimal from, String format, String sort, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/public/association/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (disease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disease", disease));
        }

        if (therapeuticArea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("therapeutic_area", therapeuticArea));
        }

        if (datasource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasource", datasource));
        }

        if (datatype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datatype", datatype));
        }

        if (pathway != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pathway", pathway));
        }

        if (targetClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_class", targetClass));
        }

        if (uniprotkw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniprotkw", uniprotkw));
        }

        if (direct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direct", direct));
        }

        if (datastructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datastructure", datastructure));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (scorevalueMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scorevalue_min", scorevalueMin));
        }

        if (scorevalueMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scorevalue_max", scorevalueMax));
        }

        if (scorevalueTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scorevalue_types", scorevalueTypes));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationFilter_0ValidateBeforeCall(String target, String disease, String therapeuticArea, String datasource, String datatype, String pathway, String targetClass, String uniprotkw, Boolean direct, String datastructure, String fields, Boolean facets, Float scorevalueMin, Float scorevalueMax, String scorevalueTypes, BigDecimal size, BigDecimal from, String format, String sort, String search, final ApiCallback _callback) throws ApiException {
        return getAssociationFilter_0Call(target, disease, therapeuticArea, datasource, datatype, pathway, targetClass, uniprotkw, direct, datastructure, fields, facets, scorevalueMin, scorevalueMax, scorevalueTypes, size, from, format, sort, search, _callback);

    }

    /**
     * Filter available associations
     * More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param therapeuticArea An EFO code of a therapeutic area. (optional)
     * @param datasource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A Reactome pathway identifier (returning only those targets linked to the specified pathway). (optional)
     * @param targetClass A ChEMBL target class identifier (returning only those targets belonging to the specified class). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param direct If &#x60;true&#x60;, it returns associations that have at least one direct evidence connecting the target and the disease. If &#x60;false&#x60; it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology. (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields Fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param facets Returns facets (optional, default to false)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param scorevalueTypes Score types to apply the score value min and max filters. The default is &#x60;overall&#x60;. (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @param sort Sort by the given score type. Defaults to &#39;overall&#39; and descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~overall&#39;. You will call a data type score like: &#39;datatypes.literature&#39;, and a data source as &#39;datasources.gwas&#39;. Supports multiple entries.  (optional)
     * @param search Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void getAssociationFilter_0(String target, String disease, String therapeuticArea, String datasource, String datatype, String pathway, String targetClass, String uniprotkw, Boolean direct, String datastructure, String fields, Boolean facets, Float scorevalueMin, Float scorevalueMax, String scorevalueTypes, BigDecimal size, BigDecimal from, String format, String sort, String search) throws ApiException {
        getAssociationFilter_0WithHttpInfo(target, disease, therapeuticArea, datasource, datatype, pathway, targetClass, uniprotkw, direct, datastructure, fields, facets, scorevalueMin, scorevalueMax, scorevalueTypes, size, from, format, sort, search);
    }

    /**
     * Filter available associations
     * More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param therapeuticArea An EFO code of a therapeutic area. (optional)
     * @param datasource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A Reactome pathway identifier (returning only those targets linked to the specified pathway). (optional)
     * @param targetClass A ChEMBL target class identifier (returning only those targets belonging to the specified class). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param direct If &#x60;true&#x60;, it returns associations that have at least one direct evidence connecting the target and the disease. If &#x60;false&#x60; it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology. (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields Fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param facets Returns facets (optional, default to false)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param scorevalueTypes Score types to apply the score value min and max filters. The default is &#x60;overall&#x60;. (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @param sort Sort by the given score type. Defaults to &#39;overall&#39; and descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~overall&#39;. You will call a data type score like: &#39;datatypes.literature&#39;, and a data source as &#39;datasources.gwas&#39;. Supports multiple entries.  (optional)
     * @param search Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAssociationFilter_0WithHttpInfo(String target, String disease, String therapeuticArea, String datasource, String datatype, String pathway, String targetClass, String uniprotkw, Boolean direct, String datastructure, String fields, Boolean facets, Float scorevalueMin, Float scorevalueMax, String scorevalueTypes, BigDecimal size, BigDecimal from, String format, String sort, String search) throws ApiException {
        okhttp3.Call localVarCall = getAssociationFilter_0ValidateBeforeCall(target, disease, therapeuticArea, datasource, datatype, pathway, targetClass, uniprotkw, direct, datastructure, fields, facets, scorevalueMin, scorevalueMax, scorevalueTypes, size, from, format, sort, search, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Filter available associations (asynchronously)
     * More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param therapeuticArea An EFO code of a therapeutic area. (optional)
     * @param datasource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A Reactome pathway identifier (returning only those targets linked to the specified pathway). (optional)
     * @param targetClass A ChEMBL target class identifier (returning only those targets belonging to the specified class). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param direct If &#x60;true&#x60;, it returns associations that have at least one direct evidence connecting the target and the disease. If &#x60;false&#x60; it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology. (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields Fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param facets Returns facets (optional, default to false)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param scorevalueTypes Score types to apply the score value min and max filters. The default is &#x60;overall&#x60;. (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @param sort Sort by the given score type. Defaults to &#39;overall&#39; and descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~overall&#39;. You will call a data type score like: &#39;datatypes.literature&#39;, and a data source as &#39;datasources.gwas&#39;. Supports multiple entries.  (optional)
     * @param search Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssociationFilter_0Async(String target, String disease, String therapeuticArea, String datasource, String datatype, String pathway, String targetClass, String uniprotkw, Boolean direct, String datastructure, String fields, Boolean facets, Float scorevalueMin, Float scorevalueMax, String scorevalueTypes, BigDecimal size, BigDecimal from, String format, String sort, String search, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationFilter_0ValidateBeforeCall(target, disease, therapeuticArea, datasource, datatype, pathway, targetClass, uniprotkw, direct, datastructure, fields, facets, scorevalueMin, scorevalueMax, scorevalueTypes, size, from, format, sort, search, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvidenceFilter_0
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param dataSource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A pathway identifier (meaning all the targets linked to that pathway). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields The fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param sort Sort by the given field. The default is &#39;scores.association_score&#39; in descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~scores.association_score&#39;. It supports multiple entries.  (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvidenceFilter_0Call(String target, String disease, String dataSource, String datatype, String pathway, String uniprotkw, String datastructure, String fields, Float scorevalueMin, Float scorevalueMax, String sort, BigDecimal size, BigDecimal from, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/public/evidence/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (disease != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disease", disease));
        }

        if (dataSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("data source", dataSource));
        }

        if (datatype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datatype", datatype));
        }

        if (pathway != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pathway", pathway));
        }

        if (uniprotkw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniprotkw", uniprotkw));
        }

        if (datastructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datastructure", datastructure));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (scorevalueMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scorevalue_min", scorevalueMin));
        }

        if (scorevalueMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scorevalue_max", scorevalueMax));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvidenceFilter_0ValidateBeforeCall(String target, String disease, String dataSource, String datatype, String pathway, String uniprotkw, String datastructure, String fields, Float scorevalueMin, Float scorevalueMax, String sort, BigDecimal size, BigDecimal from, String format, final ApiCallback _callback) throws ApiException {
        return getEvidenceFilter_0Call(target, disease, dataSource, datatype, pathway, uniprotkw, datastructure, fields, scorevalueMin, scorevalueMax, sort, size, from, format, _callback);

    }

    /**
     * Filter available evidence
     * The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param dataSource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A pathway identifier (meaning all the targets linked to that pathway). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields The fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param sort Sort by the given field. The default is &#39;scores.association_score&#39; in descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~scores.association_score&#39;. It supports multiple entries.  (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void getEvidenceFilter_0(String target, String disease, String dataSource, String datatype, String pathway, String uniprotkw, String datastructure, String fields, Float scorevalueMin, Float scorevalueMax, String sort, BigDecimal size, BigDecimal from, String format) throws ApiException {
        getEvidenceFilter_0WithHttpInfo(target, disease, dataSource, datatype, pathway, uniprotkw, datastructure, fields, scorevalueMin, scorevalueMax, sort, size, from, format);
    }

    /**
     * Filter available evidence
     * The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param dataSource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A pathway identifier (meaning all the targets linked to that pathway). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields The fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param sort Sort by the given field. The default is &#39;scores.association_score&#39; in descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~scores.association_score&#39;. It supports multiple entries.  (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEvidenceFilter_0WithHttpInfo(String target, String disease, String dataSource, String datatype, String pathway, String uniprotkw, String datastructure, String fields, Float scorevalueMin, Float scorevalueMax, String sort, BigDecimal size, BigDecimal from, String format) throws ApiException {
        okhttp3.Call localVarCall = getEvidenceFilter_0ValidateBeforeCall(target, disease, dataSource, datatype, pathway, uniprotkw, datastructure, fields, scorevalueMin, scorevalueMax, sort, size, from, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Filter available evidence (asynchronously)
     * The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 
     * @param target A target identifier listed as target.id. (optional)
     * @param disease An EFO code listed as disease.id. (optional)
     * @param dataSource Data source to consider. (optional)
     * @param datatype Data type to consider. (optional)
     * @param pathway A pathway identifier (meaning all the targets linked to that pathway). (optional)
     * @param uniprotkw A UniProt keyword (meaning all the targets linked to that keyword). (optional)
     * @param datastructure Type of data structure to return. Can be &#39;full&#39;, &#39;simple&#39;, &#39;ids&#39;, or &#39;count&#39;. (optional)
     * @param fields The fields you want to retrieve. This will get priority over the data structure requested. (optional)
     * @param scorevalueMin Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points. (optional, default to 0)
     * @param scorevalueMax Filter by maximum score value. (optional)
     * @param sort Sort by the given field. The default is &#39;scores.association_score&#39; in descending order. Use &#39;~&#39; prefix to do ascending order e.g. &#39;~scores.association_score&#39;. It supports multiple entries.  (optional)
     * @param size Maximum amount of results to return. Defaults to 10, max is 10000. (optional)
     * @param from How many initial results should be skipped. Defaults to 0. (optional)
     * @param format Format to get the data back. Can be &#39;json&#39;, &#39;xml&#39;, &#39;tab&#39; or &#39;csv&#39;. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvidenceFilter_0Async(String target, String disease, String dataSource, String datatype, String pathway, String uniprotkw, String datastructure, String fields, Float scorevalueMin, Float scorevalueMax, String sort, BigDecimal size, BigDecimal from, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvidenceFilter_0ValidateBeforeCall(target, disease, dataSource, datatype, pathway, uniprotkw, datastructure, fields, scorevalueMin, scorevalueMax, sort, size, from, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAssociationFilter_0
     * @param body Filters to apply when retrieving association objects. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAssociationFilter_0Call(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/platform/public/association/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAssociationFilter_0ValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAssociationFilter_0(Async)");
        }

        return postAssociationFilter_0Call(body, _callback);

    }

    /**
     * Batch query available associations
     * Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 
     * @param body Filters to apply when retrieving association objects. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void postAssociationFilter_0(String body) throws ApiException {
        postAssociationFilter_0WithHttpInfo(body);
    }

    /**
     * Batch query available associations
     * Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 
     * @param body Filters to apply when retrieving association objects. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postAssociationFilter_0WithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = postAssociationFilter_0ValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Batch query available associations (asynchronously)
     * Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 
     * @param body Filters to apply when retrieving association objects. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAssociationFilter_0Async(String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAssociationFilter_0ValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postEvidenceFilter_0
     * @param body Filters to apply when retrieving evidence string objects. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postEvidenceFilter_0Call(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/platform/public/evidence/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postEvidenceFilter_0ValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postEvidenceFilter_0(Async)");
        }

        return postEvidenceFilter_0Call(body, _callback);

    }

    /**
     * Batch filter available evidence
     * POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a &#x60;json&#x60; object in the body, simplifying the submission of queries. 
     * @param body Filters to apply when retrieving evidence string objects. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void postEvidenceFilter_0(String body) throws ApiException {
        postEvidenceFilter_0WithHttpInfo(body);
    }

    /**
     * Batch filter available evidence
     * POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a &#x60;json&#x60; object in the body, simplifying the submission of queries. 
     * @param body Filters to apply when retrieving evidence string objects. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postEvidenceFilter_0WithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = postEvidenceFilter_0ValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Batch filter available evidence (asynchronously)
     * POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a &#x60;json&#x60; object in the body, simplifying the submission of queries. 
     * @param body Filters to apply when retrieving evidence string objects. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postEvidenceFilter_0Async(String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postEvidenceFilter_0ValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
