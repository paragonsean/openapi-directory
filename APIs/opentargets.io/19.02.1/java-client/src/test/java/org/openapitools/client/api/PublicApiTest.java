/*
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Disabled
public class PublicApiTest {

    private final PublicApi api = new PublicApi();

    /**
     * Get association by id
     *
     * Once we integrate all evidence connecting a target to a specific disease, we  compute an association score by the means of an harmonic sum. This *association score* provides  an indication of how strong the evidence behind each connection is and can be  used to rank genes in order of likelihood as drug targets.  The association ID is constructed by using the Ensembl ID of the gene and the  EFO ID for the disease (e.g. ENSG00000073756-EFO_0003767).  The method returns an association object, which contains the data and summary  on each evidence type included in the calculation of the score, as well as the score itself. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationByIdTest() throws ApiException {
        String id = null;
        api.getAssociationById(id);
        // TODO: test validations
    }

    /**
     * Filter available associations
     *
     * More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociationFilterTest() throws ApiException {
        String target = null;
        String disease = null;
        String therapeuticArea = null;
        String datasource = null;
        String datatype = null;
        String pathway = null;
        String targetClass = null;
        String uniprotkw = null;
        Boolean direct = null;
        String datastructure = null;
        String fields = null;
        Boolean facets = null;
        Float scorevalueMin = null;
        Float scorevalueMax = null;
        String scorevalueTypes = null;
        BigDecimal size = null;
        BigDecimal from = null;
        String format = null;
        String sort = null;
        String search = null;
        api.getAssociationFilter(target, disease, therapeuticArea, datasource, datatype, pathway, targetClass, uniprotkw, direct, datastructure, fields, facets, scorevalueMin, scorevalueMax, scorevalueTypes, size, from, format, sort, search);
        // TODO: test validations
    }

    /**
     * Get metrics about the current data release
     *
     * Returns the metrics about associations and evidences, divided by datasource, genes and so on. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataMetricsTest() throws ApiException {
        api.getDataMetrics();
        // TODO: test validations
    }

    /**
     * Get statistics about the current data release
     *
     * Returns the number of associations and evidences, divided by datasource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataStatsTest() throws ApiException {
        api.getDataStats();
        // TODO: test validations
    }

    /**
     * Get evidence by ID
     *
     * We call **evidence** a unit of data that support a connection between a target and a disease. The Open Targets Platform integrates multiple types of evidence including genetic associations, somatic mutations, RNA expression and target-disease associations mined from the literature. This method allows you to retrieve a single evidence item or a list of pieces of evidence by using their targetvalidation.org ID.  Evidence IDs are unique within each data release (e.g. &#x60;8ed3d7568a8c6cac9c95cfb869bac762&#x60; for release 1.2). You can obtain a list of evidence and their IDs from other API calls such as [/public/evidence/filter](#!/public/get_public_evidence_filter).  **Please note** that a specific evidence ID may change between data releases. We can not guarantee that a specific evidence ID will refer to the same piece of evidence connecting a target and its diseases. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceByIdTest() throws ApiException {
        String id = null;
        api.getEvidenceById(id);
        // TODO: test validations
    }

    /**
     * Filter available evidence
     *
     * The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvidenceFilterTest() throws ApiException {
        String target = null;
        String disease = null;
        String dataSource = null;
        String datatype = null;
        String pathway = null;
        String uniprotkw = null;
        String datastructure = null;
        String fields = null;
        Float scorevalueMin = null;
        Float scorevalueMax = null;
        String sort = null;
        BigDecimal size = null;
        BigDecimal from = null;
        String format = null;
        api.getEvidenceFilter(target, disease, dataSource, datatype, pathway, uniprotkw, datastructure, fields, scorevalueMin, scorevalueMax, sort, size, from, format);
        // TODO: test validations
    }

    /**
     * Ping service
     *
     * Check if the API is up 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPingTest() throws ApiException {
        api.getPing();
        // TODO: test validations
    }

    /**
     * Search for a disease or a target
     *
     * This method allows you to look for gene or diseases of interest using a free text search, replicating the functionality of the search box on our homepage. It should be used to identify the best match for a disease or target of interest, rather than gathering a specific set of evidence. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchTest() throws ApiException {
        String q = null;
        String size = null;
        String from = null;
        String filter = null;
        api.getSearch(q, size, from, filter);
        // TODO: test validations
    }

    /**
     * Get the list of therapeutic areas about the current data release
     *
     * Returns the list of therapeutic areas for the current data release 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTherapeuticAreasTest() throws ApiException {
        api.getTherapeuticAreas();
        // TODO: test validations
    }

    /**
     * Get API version
     *
     * Returns current API version. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVersionTest() throws ApiException {
        api.getVersion();
        // TODO: test validations
    }

    /**
     * Batch query available associations
     *
     * Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAssociationFilterTest() throws ApiException {
        String body = null;
        api.postAssociationFilter(body);
        // TODO: test validations
    }

    /**
     * Get evidence for a list of IDs
     *
     * This is the POST version of [/public/evidence](#!/public/get_public_evidence). It allows to query for a list of evidence strings encoded in a &#x60;json&#x60; object to be passed in the body. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEvidenceByIdTest() throws ApiException {
        String body = null;
        api.postEvidenceById(body);
        // TODO: test validations
    }

    /**
     * Batch filter available evidence
     *
     * POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a &#x60;json&#x60; object in the body, simplifying the submission of queries. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEvidenceFilterTest() throws ApiException {
        String body = null;
        api.postEvidenceFilter(body);
        // TODO: test validations
    }

}
