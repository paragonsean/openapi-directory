/*
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrivateApi
 */
@Disabled
public class PrivateApiTest {

    private final PrivateApi api = new PrivateApi();

    /**
     * Browse API documentation
     *
     * Access api docs as served by Redoc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiDocsTest() throws ApiException {
        api.getApiDocs();
        // TODO: test validations
    }

    /**
     * Browse interactive API documentation
     *
     * Interactive API docs using swagger-ui
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiSwaggerUITest() throws ApiException {
        api.getApiSwaggerUI();
        // TODO: test validations
    }

    /**
     * Get &#x60;autocomplete&#x60; objects.
     *
     * Search for the closest term to autocomplete in the search box. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutocompleteTest() throws ApiException {
        String q = null;
        String size = null;
        api.getAutocomplete(q, size);
        // TODO: test validations
    }

    /**
     * Find information about a disease
     *
     * Get &#x60;disease&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiseaseByIdTest() throws ApiException {
        String disease = null;
        api.getDiseaseById(disease);
        // TODO: test validations
    }

    /**
     * Get drug by ID
     *
     * Get &#x60;drug&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDrugByIDTest() throws ApiException {
        String drugId = null;
        String DRUG_ID = null;
        api.getDrugByID(drugId, DRUG_ID);
        // TODO: test validations
    }

    /**
     * Get evidence code by ID
     *
     * Get &#x60;ECO&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getECObyIDTest() throws ApiException {
        String ECO_ID = null;
        api.getECObyID(ECO_ID);
        // TODO: test validations
    }

    /**
     * Search most relevant results
     *
     * Get &#x60;search-result&#x60; objects. Enables search bar functionality. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuickSearchTest() throws ApiException {
        String q = null;
        String size = null;
        api.getQuickSearch(q, size);
        // TODO: test validations
    }

    /**
     * Find related entities by disease
     *
     * Get &#x60;relation&#x60; objects starting from diseases. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationByEFOIDTest() throws ApiException {
        String disease = null;
        api.getRelationByEFOID(disease);
        // TODO: test validations
    }

    /**
     * Find related entities by target
     *
     * Get &#x60;relation&#x60; objects starting from diseases. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationByENSGIDTest() throws ApiException {
        String target = null;
        api.getRelationByENSGID(target);
        // TODO: test validations
    }

    /**
     * Get OpenAPI schema
     *
     * Get swagger.yaml specs for the API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwaggerTest() throws ApiException {
        api.getSwagger();
        // TODO: test validations
    }

    /**
     * Find information about a target
     *
     * Get &#x60;target&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTargetByENSGIDTest() throws ApiException {
        String target = null;
        api.getTargetByENSGID(target);
        // TODO: test validations
    }

    /**
     * Query expression levels
     *
     * Get &#x60;gene-expression&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTargetExpressionByENSGIDTest() throws ApiException {
        String gene = null;
        api.getTargetExpressionByENSGID(gene);
        // TODO: test validations
    }

    /**
     * Find the best hit
     *
     * Fire the search method for multiple strings 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBestHitSearchTest() throws ApiException {
        String body = null;
        api.postBestHitSearch(body);
        // TODO: test validations
    }

    /**
     * Find information about a list of diseases
     *
     * Get &#x60;disease&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDiseaseByIdTest() throws ApiException {
        String body = null;
        api.postDiseaseById(body);
        // TODO: test validations
    }

    /**
     * Enrichment analysis
     *
     * Returns an enrichment analysis for a list of targets passed in the body 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEnrichmentTargetTest() throws ApiException {
        String body = null;
        api.postEnrichmentTarget(body);
        // TODO: test validations
    }

    /**
     * Find related entities
     *
     * Get &#x60;relation&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRelationTest() throws ApiException {
        String body = null;
        api.postRelation(body);
        // TODO: test validations
    }

    /**
     * Find information about a list of targets
     *
     * Get &#x60;target&#x60; objects. Used for the target profile page. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTargetByENSGIDTest() throws ApiException {
        String body = null;
        api.postTargetByENSGID(body);
        // TODO: test validations
    }

    /**
     * Batch query expression levels
     *
     * Get &#x60;gene-expression&#x60; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTargetExpressionByENSGIDTest() throws ApiException {
        String body = null;
        api.postTargetExpressionByENSGID(body);
        // TODO: test validations
    }

}
