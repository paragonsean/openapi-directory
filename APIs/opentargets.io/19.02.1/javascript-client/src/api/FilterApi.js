/**
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Filter service.
* @module api/FilterApi
* @version 19.02.1
*/
export default class FilterApi {

    /**
    * Constructs a new FilterApi. 
    * @alias module:api/FilterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAssociationFilter_0 operation.
     * @callback module:api/FilterApi~getAssociationFilter_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter available associations
     * More complex queries for associations scores and objects can be done using this method, which allows to sort in different order, restrict to a specific class of diseases or targets, as well as filtering results by score and associated pathways. 
     * @param {Object} opts Optional parameters
     * @param {String} [target] A target identifier listed as target.id.
     * @param {String} [disease] An EFO code listed as disease.id.
     * @param {String} [therapeuticArea] An EFO code of a therapeutic area.
     * @param {String} [datasource] Data source to consider.
     * @param {String} [datatype] Data type to consider.
     * @param {String} [pathway] A Reactome pathway identifier (returning only those targets linked to the specified pathway).
     * @param {String} [targetClass] A ChEMBL target class identifier (returning only those targets belonging to the specified class).
     * @param {String} [uniprotkw] A UniProt keyword (meaning all the targets linked to that keyword).
     * @param {Boolean} [direct] If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology.
     * @param {String} [datastructure] Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
     * @param {String} [fields] Fields you want to retrieve. This will get priority over the data structure requested.
     * @param {Boolean} [facets = false)] Returns facets
     * @param {Number} [scorevalueMin = 0)] Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
     * @param {Number} [scorevalueMax] Filter by maximum score value.
     * @param {String} [scorevalueTypes] Score types to apply the score value min and max filters. The default is `overall`.
     * @param {Number} [size] Maximum amount of results to return. Defaults to 10, max is 10000.
     * @param {Number} [from] How many initial results should be skipped. Defaults to 0.
     * @param {String} [format] Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
     * @param {String} [sort] Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending order e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as 'datasources.gwas'. Supports multiple entries. 
     * @param {String} [search] Restrict the filtered results to those matching the passed string. The matching is done with a phrase match prefix. 
     * @param {module:api/FilterApi~getAssociationFilter_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getAssociationFilter_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'target': opts['target'],
        'disease': opts['disease'],
        'therapeutic_area': opts['therapeuticArea'],
        'datasource': opts['datasource'],
        'datatype': opts['datatype'],
        'pathway': opts['pathway'],
        'target_class': opts['targetClass'],
        'uniprotkw': opts['uniprotkw'],
        'direct': opts['direct'],
        'datastructure': opts['datastructure'],
        'fields': opts['fields'],
        'facets': opts['facets'],
        'scorevalue_min': opts['scorevalueMin'],
        'scorevalue_max': opts['scorevalueMax'],
        'scorevalue_types': opts['scorevalueTypes'],
        'size': opts['size'],
        'from': opts['from'],
        'format': opts['format'],
        'sort': opts['sort'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/public/association/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvidenceFilter_0 operation.
     * @callback module:api/FilterApi~getEvidenceFilter_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter available evidence
     * The filter method allows to retrieve the specific data that supports a connection between targets and diseases. Filters can be used to restrict the results by source and type of data, or limit results to targets which are part of a particular pathway. Minimum and maximum scores can be specified as well as the type of evidence linking target and disease. **Note** that multiple genes and diseases can be specified in the same request. 
     * @param {Object} opts Optional parameters
     * @param {String} [target] A target identifier listed as target.id.
     * @param {String} [disease] An EFO code listed as disease.id.
     * @param {String} [dataSource] Data source to consider.
     * @param {String} [datatype] Data type to consider.
     * @param {String} [pathway] A pathway identifier (meaning all the targets linked to that pathway).
     * @param {String} [uniprotkw] A UniProt keyword (meaning all the targets linked to that keyword).
     * @param {String} [datastructure] Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'.
     * @param {String} [fields] The fields you want to retrieve. This will get priority over the data structure requested.
     * @param {Number} [scorevalueMin = 0)] Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points.
     * @param {Number} [scorevalueMax] Filter by maximum score value.
     * @param {String} [sort] Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending order e.g. '~scores.association_score'. It supports multiple entries. 
     * @param {Number} [size] Maximum amount of results to return. Defaults to 10, max is 10000.
     * @param {Number} [from] How many initial results should be skipped. Defaults to 0.
     * @param {String} [format] Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON.
     * @param {module:api/FilterApi~getEvidenceFilter_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getEvidenceFilter_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'target': opts['target'],
        'disease': opts['disease'],
        'data source': opts['dataSource'],
        'datatype': opts['datatype'],
        'pathway': opts['pathway'],
        'uniprotkw': opts['uniprotkw'],
        'datastructure': opts['datastructure'],
        'fields': opts['fields'],
        'scorevalue_min': opts['scorevalueMin'],
        'scorevalue_max': opts['scorevalueMax'],
        'sort': opts['sort'],
        'size': opts['size'],
        'from': opts['from'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/public/evidence/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAssociationFilter_0 operation.
     * @callback module:api/FilterApi~postAssociationFilter_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch query available associations
     * Complex queries and filters for association objects can also be submitted using a JSON object and the equivalent POST method. 
     * @param {String} body Filters to apply when retrieving association objects.
     * @param {module:api/FilterApi~postAssociationFilter_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postAssociationFilter_0(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAssociationFilter_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/public/association/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEvidenceFilter_0 operation.
     * @callback module:api/FilterApi~postEvidenceFilter_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch filter available evidence
     * POST version of [/public/evidence/filter](#!/public/get_public_evidence_filter). Filters can be specified as part of a `json` object in the body, simplifying the submission of queries. 
     * @param {String} body Filters to apply when retrieving evidence string objects.
     * @param {module:api/FilterApi~postEvidenceFilter_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postEvidenceFilter_0(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEvidenceFilter_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/public/evidence/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
