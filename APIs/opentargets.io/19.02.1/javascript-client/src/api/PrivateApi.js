/**
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Private service.
* @module api/PrivateApi
* @version 19.02.1
*/
export default class PrivateApi {

    /**
    * Constructs a new PrivateApi. 
    * @alias module:api/PrivateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getApiDocs operation.
     * @callback module:api/PrivateApi~getApiDocsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Browse API documentation
     * Access api docs as served by Redoc
     * @param {module:api/PrivateApi~getApiDocsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApiDocs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/docs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiSwaggerUI operation.
     * @callback module:api/PrivateApi~getApiSwaggerUICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Browse interactive API documentation
     * Interactive API docs using swagger-ui
     * @param {module:api/PrivateApi~getApiSwaggerUICallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApiSwaggerUI(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/docs/swagger-ui', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutocomplete operation.
     * @callback module:api/PrivateApi~getAutocompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get `autocomplete` objects.
     * Search for the closest term to autocomplete in the search box. 
     * @param {String} q A full text query.
     * @param {Object} opts Optional parameters
     * @param {String} [size] Maximum amount of results to return. Defaults to 5.
     * @param {module:api/PrivateApi~getAutocompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAutocomplete(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling getAutocomplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiseaseById operation.
     * @callback module:api/PrivateApi~getDiseaseByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find information about a disease
     * Get `disease` objects. 
     * @param {String} disease An EFO identifier.
     * @param {module:api/PrivateApi~getDiseaseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDiseaseById(disease, callback) {
      let postBody = null;
      // verify the required parameter 'disease' is set
      if (disease === undefined || disease === null) {
        throw new Error("Missing the required parameter 'disease' when calling getDiseaseById");
      }

      let pathParams = {
        'disease': disease
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/disease/{disease}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDrugByID operation.
     * @callback module:api/PrivateApi~getDrugByIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get drug by ID
     * Get `drug` objects. 
     * @param {String} drugId An ID in the drug index.
     * @param {String} DRUG_ID Automatically added
     * @param {module:api/PrivateApi~getDrugByIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDrugByID(drugId, DRUG_ID, callback) {
      let postBody = null;
      // verify the required parameter 'drugId' is set
      if (drugId === undefined || drugId === null) {
        throw new Error("Missing the required parameter 'drugId' when calling getDrugByID");
      }
      // verify the required parameter 'DRUG_ID' is set
      if (DRUG_ID === undefined || DRUG_ID === null) {
        throw new Error("Missing the required parameter 'DRUG_ID' when calling getDrugByID");
      }

      let pathParams = {
        'DRUG_ID': DRUG_ID
      };
      let queryParams = {
        'drug_id': drugId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/drug/{DRUG_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getECObyID operation.
     * @callback module:api/PrivateApi~getECObyIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get evidence code by ID
     * Get `ECO` objects. 
     * @param {String} ECO_ID An [evidence code ontology](http://www.ebi.ac.uk/ols/v2/browse.do?ontName=ECO) ID.
     * @param {module:api/PrivateApi~getECObyIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getECObyID(ECO_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ECO_ID' is set
      if (ECO_ID === undefined || ECO_ID === null) {
        throw new Error("Missing the required parameter 'ECO_ID' when calling getECObyID");
      }

      let pathParams = {
        'ECO_ID': ECO_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/eco/{ECO_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuickSearch operation.
     * @callback module:api/PrivateApi~getQuickSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search most relevant results
     * Get `search-result` objects. Enables search bar functionality. 
     * @param {String} q A full text query.
     * @param {Object} opts Optional parameters
     * @param {String} [size] Maximum amount of results to return. Defaults to 5.
     * @param {module:api/PrivateApi~getQuickSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getQuickSearch(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling getQuickSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/quicksearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationByEFOID operation.
     * @callback module:api/PrivateApi~getRelationByEFOIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find related entities by disease
     * Get `relation` objects starting from diseases. 
     * @param {String} disease An EFO gene identifier.
     * @param {module:api/PrivateApi~getRelationByEFOIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRelationByEFOID(disease, callback) {
      let postBody = null;
      // verify the required parameter 'disease' is set
      if (disease === undefined || disease === null) {
        throw new Error("Missing the required parameter 'disease' when calling getRelationByEFOID");
      }

      let pathParams = {
        'disease': disease
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/relation/disease/{disease}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationByENSGID operation.
     * @callback module:api/PrivateApi~getRelationByENSGIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find related entities by target
     * Get `relation` objects starting from diseases. 
     * @param {String} target An Ensembl gene identifier.
     * @param {module:api/PrivateApi~getRelationByENSGIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRelationByENSGID(target, callback) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling getRelationByENSGID");
      }

      let pathParams = {
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/relation/target/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSwagger operation.
     * @callback module:api/PrivateApi~getSwaggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OpenAPI schema
     * Get swagger.yaml specs for the API
     * @param {module:api/PrivateApi~getSwaggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSwagger(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/swagger', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTargetByENSGID operation.
     * @callback module:api/PrivateApi~getTargetByENSGIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find information about a target
     * Get `target` objects. 
     * @param {String} target An Ensembl gene ID for the target of interest.
     * @param {module:api/PrivateApi~getTargetByENSGIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTargetByENSGID(target, callback) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling getTargetByENSGID");
      }

      let pathParams = {
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/target/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTargetExpressionByENSGID operation.
     * @callback module:api/PrivateApi~getTargetExpressionByENSGIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query expression levels
     * Get `gene-expression` objects. 
     * @param {String} gene An Ensembl gene identifier.
     * @param {module:api/PrivateApi~getTargetExpressionByENSGIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTargetExpressionByENSGID(gene, callback) {
      let postBody = null;
      // verify the required parameter 'gene' is set
      if (gene === undefined || gene === null) {
        throw new Error("Missing the required parameter 'gene' when calling getTargetExpressionByENSGID");
      }

      let pathParams = {
      };
      let queryParams = {
        'gene': gene
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/target/expression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBestHitSearch operation.
     * @callback module:api/PrivateApi~postBestHitSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the best hit
     * Fire the search method for multiple strings 
     * @param {String} body list of strings to search for
     * @param {module:api/PrivateApi~postBestHitSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBestHitSearch(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postBestHitSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/besthitsearch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDiseaseById operation.
     * @callback module:api/PrivateApi~postDiseaseByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find information about a list of diseases
     * Get `disease` objects. 
     * @param {String} body An EFO identifier.
     * @param {module:api/PrivateApi~postDiseaseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postDiseaseById(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postDiseaseById");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/disease', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postEnrichmentTarget operation.
     * @callback module:api/PrivateApi~postEnrichmentTargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enrichment analysis
     * Returns an enrichment analysis for a list of targets passed in the body 
     * @param {String} body IDs of the targets to do the enrichment analysis for.
     * @param {module:api/PrivateApi~postEnrichmentTargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postEnrichmentTarget(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEnrichmentTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/enrichment/targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRelation operation.
     * @callback module:api/PrivateApi~postRelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find related entities
     * Get `relation` objects. 
     * @param {String} body An Ensembl gene identifier.
     * @param {module:api/PrivateApi~postRelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postRelation(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRelation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/relation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTargetByENSGID operation.
     * @callback module:api/PrivateApi~postTargetByENSGIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find information about a list of targets
     * Get `target` objects. Used for the target profile page. 
     * @param {String} body An Ensembl gene identifier.
     * @param {module:api/PrivateApi~postTargetByENSGIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTargetByENSGID(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTargetByENSGID");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/target', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTargetExpressionByENSGID operation.
     * @callback module:api/PrivateApi~postTargetExpressionByENSGIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch query expression levels
     * Get `gene-expression` objects. 
     * @param {String} body An Ensembl gene identifier.
     * @param {module:api/PrivateApi~postTargetExpressionByENSGIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTargetExpressionByENSGID(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTargetExpressionByENSGID");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/platform/private/target/expression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
