/**
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicApi_H
#define OAI_OAIPublicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicApi : public QObject {
    Q_OBJECT

public:
    OAIPublicApi(const int timeOut = 0);
    ~OAIPublicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAssociationById(const QString &id);

    /**
    * @param[in]  target QString [optional]
    * @param[in]  disease QString [optional]
    * @param[in]  therapeutic_area QString [optional]
    * @param[in]  datasource QString [optional]
    * @param[in]  datatype QString [optional]
    * @param[in]  pathway QString [optional]
    * @param[in]  target_class QString [optional]
    * @param[in]  uniprotkw QString [optional]
    * @param[in]  direct bool [optional]
    * @param[in]  datastructure QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  facets bool [optional]
    * @param[in]  scorevalue_min float [optional]
    * @param[in]  scorevalue_max float [optional]
    * @param[in]  scorevalue_types QString [optional]
    * @param[in]  size double [optional]
    * @param[in]  from double [optional]
    * @param[in]  format QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  search QString [optional]
    */
    virtual void getAssociationFilter(const ::OpenAPI::OptionalParam<QString> &target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disease = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &therapeutic_area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datatype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pathway = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uniprotkw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &direct = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &datastructure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &facets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<float> &scorevalue_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &scorevalue_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &scorevalue_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());


    virtual void getDataMetrics();


    virtual void getDataStats();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getEvidenceById(const QString &id);

    /**
    * @param[in]  target QString [optional]
    * @param[in]  disease QString [optional]
    * @param[in]  data_source QString [optional]
    * @param[in]  datatype QString [optional]
    * @param[in]  pathway QString [optional]
    * @param[in]  uniprotkw QString [optional]
    * @param[in]  datastructure QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  scorevalue_min float [optional]
    * @param[in]  scorevalue_max float [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  size double [optional]
    * @param[in]  from double [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getEvidenceFilter(const ::OpenAPI::OptionalParam<QString> &target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disease = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datatype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pathway = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uniprotkw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datastructure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &scorevalue_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &scorevalue_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


    virtual void getPing();

    /**
    * @param[in]  q QString [required]
    * @param[in]  size QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getSearch(const QString &q, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


    virtual void getTherapeuticAreas();


    virtual void getVersion();

    /**
    * @param[in]  body QString [required]
    */
    virtual void postAssociationFilter(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postEvidenceById(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postEvidenceFilter(const QString &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAssociationByIdCallback(OAIHttpRequestWorker *worker);
    void getAssociationFilterCallback(OAIHttpRequestWorker *worker);
    void getDataMetricsCallback(OAIHttpRequestWorker *worker);
    void getDataStatsCallback(OAIHttpRequestWorker *worker);
    void getEvidenceByIdCallback(OAIHttpRequestWorker *worker);
    void getEvidenceFilterCallback(OAIHttpRequestWorker *worker);
    void getPingCallback(OAIHttpRequestWorker *worker);
    void getSearchCallback(OAIHttpRequestWorker *worker);
    void getTherapeuticAreasCallback(OAIHttpRequestWorker *worker);
    void getVersionCallback(OAIHttpRequestWorker *worker);
    void postAssociationFilterCallback(OAIHttpRequestWorker *worker);
    void postEvidenceByIdCallback(OAIHttpRequestWorker *worker);
    void postEvidenceFilterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAssociationByIdSignal();
    void getAssociationFilterSignal();
    void getDataMetricsSignal();
    void getDataStatsSignal();
    void getEvidenceByIdSignal();
    void getEvidenceFilterSignal();
    void getPingSignal();
    void getSearchSignal();
    void getTherapeuticAreasSignal();
    void getVersionSignal();
    void postAssociationFilterSignal();
    void postEvidenceByIdSignal();
    void postEvidenceFilterSignal();


    void getAssociationByIdSignalFull(OAIHttpRequestWorker *worker);
    void getAssociationFilterSignalFull(OAIHttpRequestWorker *worker);
    void getDataMetricsSignalFull(OAIHttpRequestWorker *worker);
    void getDataStatsSignalFull(OAIHttpRequestWorker *worker);
    void getEvidenceByIdSignalFull(OAIHttpRequestWorker *worker);
    void getEvidenceFilterSignalFull(OAIHttpRequestWorker *worker);
    void getPingSignalFull(OAIHttpRequestWorker *worker);
    void getSearchSignalFull(OAIHttpRequestWorker *worker);
    void getTherapeuticAreasSignalFull(OAIHttpRequestWorker *worker);
    void getVersionSignalFull(OAIHttpRequestWorker *worker);
    void postAssociationFilterSignalFull(OAIHttpRequestWorker *worker);
    void postEvidenceByIdSignalFull(OAIHttpRequestWorker *worker);
    void postEvidenceFilterSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getAssociationByIdSignalError() instead")
    void getAssociationByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationFilterSignalError() instead")
    void getAssociationFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataMetricsSignalError() instead")
    void getDataMetricsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDataMetricsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataStatsSignalError() instead")
    void getDataStatsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDataStatsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceByIdSignalError() instead")
    void getEvidenceByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFilterSignalError() instead")
    void getEvidenceFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPingSignalError() instead")
    void getPingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchSignalError() instead")
    void getSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTherapeuticAreasSignalError() instead")
    void getTherapeuticAreasSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTherapeuticAreasSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalError() instead")
    void getVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAssociationFilterSignalError() instead")
    void postAssociationFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAssociationFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEvidenceByIdSignalError() instead")
    void postEvidenceByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postEvidenceByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEvidenceFilterSignalError() instead")
    void postEvidenceFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postEvidenceFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAssociationByIdSignalErrorFull() instead")
    void getAssociationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssociationFilterSignalErrorFull() instead")
    void getAssociationFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssociationFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataMetricsSignalErrorFull() instead")
    void getDataMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataStatsSignalErrorFull() instead")
    void getDataStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceByIdSignalErrorFull() instead")
    void getEvidenceByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEvidenceFilterSignalErrorFull() instead")
    void getEvidenceFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEvidenceFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPingSignalErrorFull() instead")
    void getPingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchSignalErrorFull() instead")
    void getSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTherapeuticAreasSignalErrorFull() instead")
    void getTherapeuticAreasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTherapeuticAreasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVersionSignalErrorFull() instead")
    void getVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAssociationFilterSignalErrorFull() instead")
    void postAssociationFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAssociationFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEvidenceByIdSignalErrorFull() instead")
    void postEvidenceByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEvidenceByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEvidenceFilterSignalErrorFull() instead")
    void postEvidenceFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEvidenceFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
