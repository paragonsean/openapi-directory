/**
 * Open Targets Platform REST API
 * ### The Open Targets Platform REST API  The Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.  You can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.  We list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.  For every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow.   Check our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.  ### Available Methods  The available methods can be grouped in three types:  * __public__ - Methods that serve the core set of our data. These are stable and we fully supported them. * __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods may change without notice and should be used with caution. * __utils__ - Methods to get statistics and technical data about our API.  ### Supported formats  The methods above are all available via a `GET` request, and will serve outputs as `JSON`.  Alternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.  If you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`.  `POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:  ```sh curl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter ``` ### How to interpret a response  Each HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.  In the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.  ```sh curl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq ```  We do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API. Read more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).  How can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented? Please [get in touch](mailto:support@targetvalidation.org) and send your suggestions. 
 *
 * The version of the OpenAPI document: 19.02.1
 * Contact: support@targetvalidation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateApi_H
#define OAI_OAIPrivateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateApi(const int timeOut = 0);
    ~OAIPrivateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getApiDocs();


    virtual void getApiSwaggerUI();

    /**
    * @param[in]  q QString [required]
    * @param[in]  size QString [optional]
    */
    virtual void getAutocomplete(const QString &q, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  disease QString [required]
    */
    virtual void getDiseaseById(const QString &disease);

    /**
    * @param[in]  drug_id QString [required]
    * @param[in]  drug_id2 QString [required]
    */
    virtual void getDrugByID(const QString &drug_id, const QString &drug_id2);

    /**
    * @param[in]  eco_id QString [required]
    */
    virtual void getECObyID(const QString &eco_id);

    /**
    * @param[in]  q QString [required]
    * @param[in]  size QString [optional]
    */
    virtual void getQuickSearch(const QString &q, const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  disease QString [required]
    */
    virtual void getRelationByEFOID(const QString &disease);

    /**
    * @param[in]  target QString [required]
    */
    virtual void getRelationByENSGID(const QString &target);


    virtual void getSwagger();

    /**
    * @param[in]  target QString [required]
    */
    virtual void getTargetByENSGID(const QString &target);

    /**
    * @param[in]  gene QString [required]
    */
    virtual void getTargetExpressionByENSGID(const QString &gene);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postBestHitSearch(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postDiseaseById(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postEnrichmentTarget(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postRelation(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postTargetByENSGID(const QString &body);

    /**
    * @param[in]  body QString [required]
    */
    virtual void postTargetExpressionByENSGID(const QString &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getApiDocsCallback(OAIHttpRequestWorker *worker);
    void getApiSwaggerUICallback(OAIHttpRequestWorker *worker);
    void getAutocompleteCallback(OAIHttpRequestWorker *worker);
    void getDiseaseByIdCallback(OAIHttpRequestWorker *worker);
    void getDrugByIDCallback(OAIHttpRequestWorker *worker);
    void getECObyIDCallback(OAIHttpRequestWorker *worker);
    void getQuickSearchCallback(OAIHttpRequestWorker *worker);
    void getRelationByEFOIDCallback(OAIHttpRequestWorker *worker);
    void getRelationByENSGIDCallback(OAIHttpRequestWorker *worker);
    void getSwaggerCallback(OAIHttpRequestWorker *worker);
    void getTargetByENSGIDCallback(OAIHttpRequestWorker *worker);
    void getTargetExpressionByENSGIDCallback(OAIHttpRequestWorker *worker);
    void postBestHitSearchCallback(OAIHttpRequestWorker *worker);
    void postDiseaseByIdCallback(OAIHttpRequestWorker *worker);
    void postEnrichmentTargetCallback(OAIHttpRequestWorker *worker);
    void postRelationCallback(OAIHttpRequestWorker *worker);
    void postTargetByENSGIDCallback(OAIHttpRequestWorker *worker);
    void postTargetExpressionByENSGIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getApiDocsSignal();
    void getApiSwaggerUISignal();
    void getAutocompleteSignal();
    void getDiseaseByIdSignal();
    void getDrugByIDSignal();
    void getECObyIDSignal();
    void getQuickSearchSignal();
    void getRelationByEFOIDSignal();
    void getRelationByENSGIDSignal();
    void getSwaggerSignal();
    void getTargetByENSGIDSignal();
    void getTargetExpressionByENSGIDSignal();
    void postBestHitSearchSignal();
    void postDiseaseByIdSignal();
    void postEnrichmentTargetSignal();
    void postRelationSignal();
    void postTargetByENSGIDSignal();
    void postTargetExpressionByENSGIDSignal();


    void getApiDocsSignalFull(OAIHttpRequestWorker *worker);
    void getApiSwaggerUISignalFull(OAIHttpRequestWorker *worker);
    void getAutocompleteSignalFull(OAIHttpRequestWorker *worker);
    void getDiseaseByIdSignalFull(OAIHttpRequestWorker *worker);
    void getDrugByIDSignalFull(OAIHttpRequestWorker *worker);
    void getECObyIDSignalFull(OAIHttpRequestWorker *worker);
    void getQuickSearchSignalFull(OAIHttpRequestWorker *worker);
    void getRelationByEFOIDSignalFull(OAIHttpRequestWorker *worker);
    void getRelationByENSGIDSignalFull(OAIHttpRequestWorker *worker);
    void getSwaggerSignalFull(OAIHttpRequestWorker *worker);
    void getTargetByENSGIDSignalFull(OAIHttpRequestWorker *worker);
    void getTargetExpressionByENSGIDSignalFull(OAIHttpRequestWorker *worker);
    void postBestHitSearchSignalFull(OAIHttpRequestWorker *worker);
    void postDiseaseByIdSignalFull(OAIHttpRequestWorker *worker);
    void postEnrichmentTargetSignalFull(OAIHttpRequestWorker *worker);
    void postRelationSignalFull(OAIHttpRequestWorker *worker);
    void postTargetByENSGIDSignalFull(OAIHttpRequestWorker *worker);
    void postTargetExpressionByENSGIDSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getApiDocsSignalError() instead")
    void getApiDocsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getApiDocsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiSwaggerUISignalError() instead")
    void getApiSwaggerUISignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getApiSwaggerUISignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutocompleteSignalError() instead")
    void getAutocompleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAutocompleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseByIdSignalError() instead")
    void getDiseaseByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDrugByIDSignalError() instead")
    void getDrugByIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDrugByIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getECObyIDSignalError() instead")
    void getECObyIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getECObyIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuickSearchSignalError() instead")
    void getQuickSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getQuickSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationByEFOIDSignalError() instead")
    void getRelationByEFOIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationByEFOIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationByENSGIDSignalError() instead")
    void getRelationByENSGIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationByENSGIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSwaggerSignalError() instead")
    void getSwaggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSwaggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTargetByENSGIDSignalError() instead")
    void getTargetByENSGIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTargetByENSGIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTargetExpressionByENSGIDSignalError() instead")
    void getTargetExpressionByENSGIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTargetExpressionByENSGIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBestHitSearchSignalError() instead")
    void postBestHitSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postBestHitSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDiseaseByIdSignalError() instead")
    void postDiseaseByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postDiseaseByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEnrichmentTargetSignalError() instead")
    void postEnrichmentTargetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postEnrichmentTargetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRelationSignalError() instead")
    void postRelationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postRelationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTargetByENSGIDSignalError() instead")
    void postTargetByENSGIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postTargetByENSGIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTargetExpressionByENSGIDSignalError() instead")
    void postTargetExpressionByENSGIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postTargetExpressionByENSGIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getApiDocsSignalErrorFull() instead")
    void getApiDocsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiDocsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiSwaggerUISignalErrorFull() instead")
    void getApiSwaggerUISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiSwaggerUISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutocompleteSignalErrorFull() instead")
    void getAutocompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutocompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDiseaseByIdSignalErrorFull() instead")
    void getDiseaseByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDiseaseByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDrugByIDSignalErrorFull() instead")
    void getDrugByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDrugByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getECObyIDSignalErrorFull() instead")
    void getECObyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getECObyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuickSearchSignalErrorFull() instead")
    void getQuickSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuickSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationByEFOIDSignalErrorFull() instead")
    void getRelationByEFOIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationByEFOIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelationByENSGIDSignalErrorFull() instead")
    void getRelationByENSGIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelationByENSGIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSwaggerSignalErrorFull() instead")
    void getSwaggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSwaggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTargetByENSGIDSignalErrorFull() instead")
    void getTargetByENSGIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTargetByENSGIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTargetExpressionByENSGIDSignalErrorFull() instead")
    void getTargetExpressionByENSGIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTargetExpressionByENSGIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBestHitSearchSignalErrorFull() instead")
    void postBestHitSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBestHitSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDiseaseByIdSignalErrorFull() instead")
    void postDiseaseByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDiseaseByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postEnrichmentTargetSignalErrorFull() instead")
    void postEnrichmentTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postEnrichmentTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRelationSignalErrorFull() instead")
    void postRelationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRelationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTargetByENSGIDSignalErrorFull() instead")
    void postTargetByENSGIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTargetByENSGIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTargetExpressionByENSGIDSignalErrorFull() instead")
    void postTargetExpressionByENSGIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTargetExpressionByENSGIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
