/*
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LatLng;
import org.openapitools.client.model.ResponseResultsInnerBounds;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:40.906769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseResultsInner {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Object annotations;

  public static final String SERIALIZED_NAME_BOUNDS = "bounds";
  @SerializedName(SERIALIZED_NAME_BOUNDS)
  private ResponseResultsInnerBounds bounds;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private Object components;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Integer confidence;

  public static final String SERIALIZED_NAME_FORMATTED = "formatted";
  @SerializedName(SERIALIZED_NAME_FORMATTED)
  private String formatted;

  public static final String SERIALIZED_NAME_GEOMETRY = "geometry";
  @SerializedName(SERIALIZED_NAME_GEOMETRY)
  private LatLng geometry;

  public ResponseResultsInner() {
  }

  public ResponseResultsInner annotations(Object annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public Object getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Object annotations) {
    this.annotations = annotations;
  }


  public ResponseResultsInner bounds(ResponseResultsInnerBounds bounds) {
    this.bounds = bounds;
    return this;
  }

  /**
   * Get bounds
   * @return bounds
   */
  @javax.annotation.Nullable
  public ResponseResultsInnerBounds getBounds() {
    return bounds;
  }

  public void setBounds(ResponseResultsInnerBounds bounds) {
    this.bounds = bounds;
  }


  public ResponseResultsInner components(Object components) {
    this.components = components;
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nullable
  public Object getComponents() {
    return components;
  }

  public void setComponents(Object components) {
    this.components = components;
  }


  public ResponseResultsInner confidence(Integer confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public Integer getConfidence() {
    return confidence;
  }

  public void setConfidence(Integer confidence) {
    this.confidence = confidence;
  }


  public ResponseResultsInner formatted(String formatted) {
    this.formatted = formatted;
    return this;
  }

  /**
   * Get formatted
   * @return formatted
   */
  @javax.annotation.Nullable
  public String getFormatted() {
    return formatted;
  }

  public void setFormatted(String formatted) {
    this.formatted = formatted;
  }


  public ResponseResultsInner geometry(LatLng geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Get geometry
   * @return geometry
   */
  @javax.annotation.Nullable
  public LatLng getGeometry() {
    return geometry;
  }

  public void setGeometry(LatLng geometry) {
    this.geometry = geometry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseResultsInner responseResultsInner = (ResponseResultsInner) o;
    return Objects.equals(this.annotations, responseResultsInner.annotations) &&
        Objects.equals(this.bounds, responseResultsInner.bounds) &&
        Objects.equals(this.components, responseResultsInner.components) &&
        Objects.equals(this.confidence, responseResultsInner.confidence) &&
        Objects.equals(this.formatted, responseResultsInner.formatted) &&
        Objects.equals(this.geometry, responseResultsInner.geometry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, bounds, components, confidence, formatted, geometry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseResultsInner {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    bounds: ").append(toIndentedString(bounds)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    formatted: ").append(toIndentedString(formatted)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("bounds");
    openapiFields.add("components");
    openapiFields.add("confidence");
    openapiFields.add("formatted");
    openapiFields.add("geometry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseResultsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseResultsInner is not found in the empty JSON string", ResponseResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bounds`
      if (jsonObj.get("bounds") != null && !jsonObj.get("bounds").isJsonNull()) {
        ResponseResultsInnerBounds.validateJsonElement(jsonObj.get("bounds"));
      }
      if ((jsonObj.get("formatted") != null && !jsonObj.get("formatted").isJsonNull()) && !jsonObj.get("formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatted").toString()));
      }
      // validate the optional field `geometry`
      if (jsonObj.get("geometry") != null && !jsonObj.get("geometry").isJsonNull()) {
        LatLng.validateJsonElement(jsonObj.get("geometry"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, ResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseResultsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseResultsInner
   * @throws IOException if the JSON string is invalid with respect to ResponseResultsInner
   */
  public static ResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseResultsInner.class);
  }

  /**
   * Convert an instance of ResponseResultsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

