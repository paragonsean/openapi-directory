# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=None, remaining: int=None, reset: int=None):
        """ResponseRate - a model defined in OpenAPI

        :param limit: The limit of this ResponseRate.
        :param remaining: The remaining of this ResponseRate.
        :param reset: The reset of this ResponseRate.
        """
        self.openapi_types = {
            'limit': int,
            'remaining': int,
            'reset': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'remaining': 'remaining',
            'reset': 'reset'
        }

        self._limit = limit
        self._remaining = remaining
        self._reset = reset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response_rate of this ResponseRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this ResponseRate.


        :return: The limit of this ResponseRate.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ResponseRate.


        :param limit: The limit of this ResponseRate.
        :type limit: int
        """

        self._limit = limit

    @property
    def remaining(self):
        """Gets the remaining of this ResponseRate.


        :return: The remaining of this ResponseRate.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this ResponseRate.


        :param remaining: The remaining of this ResponseRate.
        :type remaining: int
        """

        self._remaining = remaining

    @property
    def reset(self):
        """Gets the reset of this ResponseRate.


        :return: The reset of this ResponseRate.
        :rtype: int
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this ResponseRate.


        :param reset: The reset of this ResponseRate.
        :type reset: int
        """

        self._reset = reset
