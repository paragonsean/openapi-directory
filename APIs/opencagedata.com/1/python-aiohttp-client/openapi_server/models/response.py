# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response_licenses_inner import ResponseLicensesInner
from openapi_server.models.response_rate import ResponseRate
from openapi_server.models.response_results_inner import ResponseResultsInner
from openapi_server.models.response_status import ResponseStatus
from openapi_server.models.response_stay_informed import ResponseStayInformed
from openapi_server.models.response_timestamp import ResponseTimestamp
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documentation: str=None, licenses: List[ResponseLicensesInner]=None, rate: ResponseRate=None, results: List[ResponseResultsInner]=None, status: ResponseStatus=None, stay_informed: ResponseStayInformed=None, thanks: str=None, timestamp: ResponseTimestamp=None, total_results: int=None):
        """Response - a model defined in OpenAPI

        :param documentation: The documentation of this Response.
        :param licenses: The licenses of this Response.
        :param rate: The rate of this Response.
        :param results: The results of this Response.
        :param status: The status of this Response.
        :param stay_informed: The stay_informed of this Response.
        :param thanks: The thanks of this Response.
        :param timestamp: The timestamp of this Response.
        :param total_results: The total_results of this Response.
        """
        self.openapi_types = {
            'documentation': str,
            'licenses': List[ResponseLicensesInner],
            'rate': ResponseRate,
            'results': List[ResponseResultsInner],
            'status': ResponseStatus,
            'stay_informed': ResponseStayInformed,
            'thanks': str,
            'timestamp': ResponseTimestamp,
            'total_results': int
        }

        self.attribute_map = {
            'documentation': 'documentation',
            'licenses': 'licenses',
            'rate': 'rate',
            'results': 'results',
            'status': 'status',
            'stay_informed': 'stay_informed',
            'thanks': 'thanks',
            'timestamp': 'timestamp',
            'total_results': 'total_results'
        }

        self._documentation = documentation
        self._licenses = licenses
        self._rate = rate
        self._results = results
        self._status = status
        self._stay_informed = stay_informed
        self._thanks = thanks
        self._timestamp = timestamp
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documentation(self):
        """Gets the documentation of this Response.


        :return: The documentation of this Response.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Response.


        :param documentation: The documentation of this Response.
        :type documentation: str
        """

        self._documentation = documentation

    @property
    def licenses(self):
        """Gets the licenses of this Response.


        :return: The licenses of this Response.
        :rtype: List[ResponseLicensesInner]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this Response.


        :param licenses: The licenses of this Response.
        :type licenses: List[ResponseLicensesInner]
        """

        self._licenses = licenses

    @property
    def rate(self):
        """Gets the rate of this Response.


        :return: The rate of this Response.
        :rtype: ResponseRate
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Response.


        :param rate: The rate of this Response.
        :type rate: ResponseRate
        """

        self._rate = rate

    @property
    def results(self):
        """Gets the results of this Response.


        :return: The results of this Response.
        :rtype: List[ResponseResultsInner]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Response.


        :param results: The results of this Response.
        :type results: List[ResponseResultsInner]
        """

        self._results = results

    @property
    def status(self):
        """Gets the status of this Response.


        :return: The status of this Response.
        :rtype: ResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.


        :param status: The status of this Response.
        :type status: ResponseStatus
        """

        self._status = status

    @property
    def stay_informed(self):
        """Gets the stay_informed of this Response.


        :return: The stay_informed of this Response.
        :rtype: ResponseStayInformed
        """
        return self._stay_informed

    @stay_informed.setter
    def stay_informed(self, stay_informed):
        """Sets the stay_informed of this Response.


        :param stay_informed: The stay_informed of this Response.
        :type stay_informed: ResponseStayInformed
        """

        self._stay_informed = stay_informed

    @property
    def thanks(self):
        """Gets the thanks of this Response.


        :return: The thanks of this Response.
        :rtype: str
        """
        return self._thanks

    @thanks.setter
    def thanks(self, thanks):
        """Sets the thanks of this Response.


        :param thanks: The thanks of this Response.
        :type thanks: str
        """

        self._thanks = thanks

    @property
    def timestamp(self):
        """Gets the timestamp of this Response.


        :return: The timestamp of this Response.
        :rtype: ResponseTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Response.


        :param timestamp: The timestamp of this Response.
        :type timestamp: ResponseTimestamp
        """

        self._timestamp = timestamp

    @property
    def total_results(self):
        """Gets the total_results of this Response.


        :return: The total_results of this Response.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this Response.


        :param total_results: The total_results of this Response.
        :type total_results: int
        """

        self._total_results = total_results
