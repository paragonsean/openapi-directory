/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseLicensesInner from './ResponseLicensesInner';
import ResponseRate from './ResponseRate';
import ResponseResultsInner from './ResponseResultsInner';
import ResponseStatus from './ResponseStatus';
import ResponseStayInformed from './ResponseStayInformed';
import ResponseTimestamp from './ResponseTimestamp';

/**
 * The Response model module.
 * @module model/Response
 * @version 1
 */
class Response {
    /**
     * Constructs a new <code>Response</code>.
     * @alias module:model/Response
     */
    constructor() { 
        
        Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response} obj Optional instance to populate.
     * @return {module:model/Response} The populated <code>Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response();

            if (data.hasOwnProperty('documentation')) {
                obj['documentation'] = ApiClient.convertToType(data['documentation'], 'String');
            }
            if (data.hasOwnProperty('licenses')) {
                obj['licenses'] = ApiClient.convertToType(data['licenses'], [ResponseLicensesInner]);
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ResponseRate.constructFromObject(data['rate']);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [ResponseResultsInner]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ResponseStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('stay_informed')) {
                obj['stay_informed'] = ResponseStayInformed.constructFromObject(data['stay_informed']);
            }
            if (data.hasOwnProperty('thanks')) {
                obj['thanks'] = ApiClient.convertToType(data['thanks'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ResponseTimestamp.constructFromObject(data['timestamp']);
            }
            if (data.hasOwnProperty('total_results')) {
                obj['total_results'] = ApiClient.convertToType(data['total_results'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['documentation'] && !(typeof data['documentation'] === 'string' || data['documentation'] instanceof String)) {
            throw new Error("Expected the field `documentation` to be a primitive type in the JSON string but got " + data['documentation']);
        }
        if (data['licenses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['licenses'])) {
                throw new Error("Expected the field `licenses` to be an array in the JSON data but got " + data['licenses']);
            }
            // validate the optional field `licenses` (array)
            for (const item of data['licenses']) {
                ResponseLicensesInner.validateJSON(item);
            };
        }
        // validate the optional field `rate`
        if (data['rate']) { // data not null
          ResponseRate.validateJSON(data['rate']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                ResponseResultsInner.validateJSON(item);
            };
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ResponseStatus.validateJSON(data['status']);
        }
        // validate the optional field `stay_informed`
        if (data['stay_informed']) { // data not null
          ResponseStayInformed.validateJSON(data['stay_informed']);
        }
        // ensure the json data is a string
        if (data['thanks'] && !(typeof data['thanks'] === 'string' || data['thanks'] instanceof String)) {
            throw new Error("Expected the field `thanks` to be a primitive type in the JSON string but got " + data['thanks']);
        }
        // validate the optional field `timestamp`
        if (data['timestamp']) { // data not null
          ResponseTimestamp.validateJSON(data['timestamp']);
        }

        return true;
    }


}



/**
 * @member {String} documentation
 */
Response.prototype['documentation'] = undefined;

/**
 * @member {Array.<module:model/ResponseLicensesInner>} licenses
 */
Response.prototype['licenses'] = undefined;

/**
 * @member {module:model/ResponseRate} rate
 */
Response.prototype['rate'] = undefined;

/**
 * @member {Array.<module:model/ResponseResultsInner>} results
 */
Response.prototype['results'] = undefined;

/**
 * @member {module:model/ResponseStatus} status
 */
Response.prototype['status'] = undefined;

/**
 * @member {module:model/ResponseStayInformed} stay_informed
 */
Response.prototype['stay_informed'] = undefined;

/**
 * @member {String} thanks
 */
Response.prototype['thanks'] = undefined;

/**
 * @member {module:model/ResponseTimestamp} timestamp
 */
Response.prototype['timestamp'] = undefined;

/**
 * @member {Number} total_results
 */
Response.prototype['total_results'] = undefined;






export default Response;

