/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Response from '../model/Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the vversionFormatGet operation.
     * @callback module:api/DefaultApi~vversionFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * geocode a query
     * @param {Number} version API version.
     * @param {String} format format of the response. One of 'json', 'xml' or 'map'.
     * @param {String} q string or lat,lng to be geocoded.
     * @param {String} key an application key.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [abbrv] when true we attempt to abbreviate the formatted field of results.
     * @param {Boolean} [addressOnly] when true we include only address details in the formatted field of results.
     * @param {Boolean} [addRequest] if true the request is included in the response.
     * @param {String} [bounds] four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat).
     * @param {String} [countrycode] two letter code ISO 3166-1 Alpha 2 code to limit results to that country.
     * @param {String} [jsonp] wraps the returned JSON with a function name.
     * @param {String} [language] an IETF format language code (ex: 'es' or 'pt-BR').
     * @param {Number} [limit] maximum number of results to return. Default is 10. Maximum is 100.
     * @param {Number} [minConfidence] integer from 1-10. Only results with at least this confidence are returned.
     * @param {Boolean} [noAnnotations] when true annotations are not added to results.
     * @param {Boolean} [noDedupe] when true results are not deduplicated.
     * @param {Boolean} [noRecord] when true query content is not logged.
     * @param {Boolean} [pretty] when true results are pretty printed. Useful for debugging.
     * @param {String} [proximity] lat,lng to bias results.
     * @param {Boolean} [roadinfo] match nearest road, include roadinfo annotation
     * @param {module:api/DefaultApi~vversionFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    vversionFormatGet(version, format, q, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling vversionFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling vversionFormatGet");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling vversionFormatGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling vversionFormatGet");
      }

      let pathParams = {
        'version': version,
        'format': format
      };
      let queryParams = {
        'q': q,
        'key': key,
        'abbrv': opts['abbrv'],
        'address_only': opts['addressOnly'],
        'add_request': opts['addRequest'],
        'bounds': opts['bounds'],
        'countrycode': opts['countrycode'],
        'jsonp': opts['jsonp'],
        'language': opts['language'],
        'limit': opts['limit'],
        'min_confidence': opts['minConfidence'],
        'no_annotations': opts['noAnnotations'],
        'no_dedupe': opts['noDedupe'],
        'no_record': opts['noRecord'],
        'pretty': opts['pretty'],
        'proximity': opts['proximity'],
        'roadinfo': opts['roadinfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/html'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/v{version}/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
