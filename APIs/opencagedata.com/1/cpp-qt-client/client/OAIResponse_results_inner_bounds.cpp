/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse_results_inner_bounds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse_results_inner_bounds::OAIResponse_results_inner_bounds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse_results_inner_bounds::OAIResponse_results_inner_bounds() {
    this->initializeModel();
}

OAIResponse_results_inner_bounds::~OAIResponse_results_inner_bounds() {}

void OAIResponse_results_inner_bounds::initializeModel() {

    m_northeast_isSet = false;
    m_northeast_isValid = false;

    m_southwest_isSet = false;
    m_southwest_isValid = false;
}

void OAIResponse_results_inner_bounds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse_results_inner_bounds::fromJsonObject(QJsonObject json) {

    m_northeast_isValid = ::OpenAPI::fromJsonValue(m_northeast, json[QString("northeast")]);
    m_northeast_isSet = !json[QString("northeast")].isNull() && m_northeast_isValid;

    m_southwest_isValid = ::OpenAPI::fromJsonValue(m_southwest, json[QString("southwest")]);
    m_southwest_isSet = !json[QString("southwest")].isNull() && m_southwest_isValid;
}

QString OAIResponse_results_inner_bounds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse_results_inner_bounds::asJsonObject() const {
    QJsonObject obj;
    if (m_northeast.isSet()) {
        obj.insert(QString("northeast"), ::OpenAPI::toJsonValue(m_northeast));
    }
    if (m_southwest.isSet()) {
        obj.insert(QString("southwest"), ::OpenAPI::toJsonValue(m_southwest));
    }
    return obj;
}

OAILatLng OAIResponse_results_inner_bounds::getNortheast() const {
    return m_northeast;
}
void OAIResponse_results_inner_bounds::setNortheast(const OAILatLng &northeast) {
    m_northeast = northeast;
    m_northeast_isSet = true;
}

bool OAIResponse_results_inner_bounds::is_northeast_Set() const{
    return m_northeast_isSet;
}

bool OAIResponse_results_inner_bounds::is_northeast_Valid() const{
    return m_northeast_isValid;
}

OAILatLng OAIResponse_results_inner_bounds::getSouthwest() const {
    return m_southwest;
}
void OAIResponse_results_inner_bounds::setSouthwest(const OAILatLng &southwest) {
    m_southwest = southwest;
    m_southwest_isSet = true;
}

bool OAIResponse_results_inner_bounds::is_southwest_Set() const{
    return m_southwest_isSet;
}

bool OAIResponse_results_inner_bounds::is_southwest_Valid() const{
    return m_southwest_isValid;
}

bool OAIResponse_results_inner_bounds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_northeast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_southwest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse_results_inner_bounds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
