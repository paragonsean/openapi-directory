/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse_rate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse_rate::OAIResponse_rate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse_rate::OAIResponse_rate() {
    this->initializeModel();
}

OAIResponse_rate::~OAIResponse_rate() {}

void OAIResponse_rate::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_remaining_isSet = false;
    m_remaining_isValid = false;

    m_reset_isSet = false;
    m_reset_isValid = false;
}

void OAIResponse_rate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse_rate::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_remaining_isValid = ::OpenAPI::fromJsonValue(m_remaining, json[QString("remaining")]);
    m_remaining_isSet = !json[QString("remaining")].isNull() && m_remaining_isValid;

    m_reset_isValid = ::OpenAPI::fromJsonValue(m_reset, json[QString("reset")]);
    m_reset_isSet = !json[QString("reset")].isNull() && m_reset_isValid;
}

QString OAIResponse_rate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse_rate::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_remaining_isSet) {
        obj.insert(QString("remaining"), ::OpenAPI::toJsonValue(m_remaining));
    }
    if (m_reset_isSet) {
        obj.insert(QString("reset"), ::OpenAPI::toJsonValue(m_reset));
    }
    return obj;
}

qint32 OAIResponse_rate::getLimit() const {
    return m_limit;
}
void OAIResponse_rate::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIResponse_rate::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIResponse_rate::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIResponse_rate::getRemaining() const {
    return m_remaining;
}
void OAIResponse_rate::setRemaining(const qint32 &remaining) {
    m_remaining = remaining;
    m_remaining_isSet = true;
}

bool OAIResponse_rate::is_remaining_Set() const{
    return m_remaining_isSet;
}

bool OAIResponse_rate::is_remaining_Valid() const{
    return m_remaining_isValid;
}

qint32 OAIResponse_rate::getReset() const {
    return m_reset;
}
void OAIResponse_rate::setReset(const qint32 &reset) {
    m_reset = reset;
    m_reset_isSet = true;
}

bool OAIResponse_rate::is_reset_Set() const{
    return m_reset_isSet;
}

bool OAIResponse_rate::is_reset_Valid() const{
    return m_reset_isValid;
}

bool OAIResponse_rate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse_rate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
