/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  q QString [required]
    * @param[in]  key QString [required]
    * @param[in]  abbrv bool [optional]
    * @param[in]  address_only bool [optional]
    * @param[in]  add_request bool [optional]
    * @param[in]  bounds QString [optional]
    * @param[in]  countrycode QString [optional]
    * @param[in]  jsonp QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  min_confidence qint32 [optional]
    * @param[in]  no_annotations bool [optional]
    * @param[in]  no_dedupe bool [optional]
    * @param[in]  no_record bool [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  proximity QString [optional]
    * @param[in]  roadinfo bool [optional]
    */
    virtual void vversionFormatGet(const qint32 &version, const QString &format, const QString &q, const QString &key, const ::OpenAPI::OptionalParam<bool> &abbrv = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &address_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_request = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bounds = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jsonp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_confidence = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &no_annotations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &no_dedupe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &no_record = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &proximity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &roadinfo = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void vversionFormatGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void vversionFormatGetSignal(OAIResponse summary);


    void vversionFormatGetSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);

    Q_DECL_DEPRECATED_X("Use vversionFormatGetSignalError() instead")
    void vversionFormatGetSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vversionFormatGetSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use vversionFormatGetSignalErrorFull() instead")
    void vversionFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vversionFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
