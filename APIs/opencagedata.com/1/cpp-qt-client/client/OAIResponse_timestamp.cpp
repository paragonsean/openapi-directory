/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse_timestamp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse_timestamp::OAIResponse_timestamp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse_timestamp::OAIResponse_timestamp() {
    this->initializeModel();
}

OAIResponse_timestamp::~OAIResponse_timestamp() {}

void OAIResponse_timestamp::initializeModel() {

    m_created_http_isSet = false;
    m_created_http_isValid = false;

    m_created_unix_isSet = false;
    m_created_unix_isValid = false;
}

void OAIResponse_timestamp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse_timestamp::fromJsonObject(QJsonObject json) {

    m_created_http_isValid = ::OpenAPI::fromJsonValue(m_created_http, json[QString("created_http")]);
    m_created_http_isSet = !json[QString("created_http")].isNull() && m_created_http_isValid;

    m_created_unix_isValid = ::OpenAPI::fromJsonValue(m_created_unix, json[QString("created_unix")]);
    m_created_unix_isSet = !json[QString("created_unix")].isNull() && m_created_unix_isValid;
}

QString OAIResponse_timestamp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse_timestamp::asJsonObject() const {
    QJsonObject obj;
    if (m_created_http_isSet) {
        obj.insert(QString("created_http"), ::OpenAPI::toJsonValue(m_created_http));
    }
    if (m_created_unix_isSet) {
        obj.insert(QString("created_unix"), ::OpenAPI::toJsonValue(m_created_unix));
    }
    return obj;
}

QString OAIResponse_timestamp::getCreatedHttp() const {
    return m_created_http;
}
void OAIResponse_timestamp::setCreatedHttp(const QString &created_http) {
    m_created_http = created_http;
    m_created_http_isSet = true;
}

bool OAIResponse_timestamp::is_created_http_Set() const{
    return m_created_http_isSet;
}

bool OAIResponse_timestamp::is_created_http_Valid() const{
    return m_created_http_isValid;
}

qint32 OAIResponse_timestamp::getCreatedUnix() const {
    return m_created_unix;
}
void OAIResponse_timestamp::setCreatedUnix(const qint32 &created_unix) {
    m_created_unix = created_unix;
    m_created_unix_isSet = true;
}

bool OAIResponse_timestamp::is_created_unix_Set() const{
    return m_created_unix_isSet;
}

bool OAIResponse_timestamp::is_created_unix_Valid() const{
    return m_created_unix_isValid;
}

bool OAIResponse_timestamp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_http_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_unix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse_timestamp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
