/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse_stay_informed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse_stay_informed::OAIResponse_stay_informed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse_stay_informed::OAIResponse_stay_informed() {
    this->initializeModel();
}

OAIResponse_stay_informed::~OAIResponse_stay_informed() {}

void OAIResponse_stay_informed::initializeModel() {

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;
}

void OAIResponse_stay_informed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse_stay_informed::fromJsonObject(QJsonObject json) {

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;
}

QString OAIResponse_stay_informed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse_stay_informed::asJsonObject() const {
    QJsonObject obj;
    if (m_blog_isSet) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    return obj;
}

QString OAIResponse_stay_informed::getBlog() const {
    return m_blog;
}
void OAIResponse_stay_informed::setBlog(const QString &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIResponse_stay_informed::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIResponse_stay_informed::is_blog_Valid() const{
    return m_blog_isValid;
}

QString OAIResponse_stay_informed::getTwitter() const {
    return m_twitter;
}
void OAIResponse_stay_informed::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIResponse_stay_informed::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIResponse_stay_informed::is_twitter_Valid() const{
    return m_twitter_isValid;
}

bool OAIResponse_stay_informed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse_stay_informed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
