/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stay_informed_isSet = false;
    m_stay_informed_isValid = false;

    m_thanks_isSet = false;
    m_thanks_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stay_informed_isValid = ::OpenAPI::fromJsonValue(m_stay_informed, json[QString("stay_informed")]);
    m_stay_informed_isSet = !json[QString("stay_informed")].isNull() && m_stay_informed_isValid;

    m_thanks_isValid = ::OpenAPI::fromJsonValue(m_thanks, json[QString("thanks")]);
    m_thanks_isSet = !json[QString("thanks")].isNull() && m_thanks_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("total_results")]);
    m_total_results_isSet = !json[QString("total_results")].isNull() && m_total_results_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_documentation_isSet) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_rate.isSet()) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stay_informed.isSet()) {
        obj.insert(QString("stay_informed"), ::OpenAPI::toJsonValue(m_stay_informed));
    }
    if (m_thanks_isSet) {
        obj.insert(QString("thanks"), ::OpenAPI::toJsonValue(m_thanks));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("total_results"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QString OAIResponse::getDocumentation() const {
    return m_documentation;
}
void OAIResponse::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIResponse::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIResponse::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QList<OAIResponse_licenses_inner> OAIResponse::getLicenses() const {
    return m_licenses;
}
void OAIResponse::setLicenses(const QList<OAIResponse_licenses_inner> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIResponse::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIResponse::is_licenses_Valid() const{
    return m_licenses_isValid;
}

OAIResponse_rate OAIResponse::getRate() const {
    return m_rate;
}
void OAIResponse::setRate(const OAIResponse_rate &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIResponse::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIResponse::is_rate_Valid() const{
    return m_rate_isValid;
}

QList<OAIResponse_results_inner> OAIResponse::getResults() const {
    return m_results;
}
void OAIResponse::setResults(const QList<OAIResponse_results_inner> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIResponse::is_results_Valid() const{
    return m_results_isValid;
}

OAIResponse_status OAIResponse::getStatus() const {
    return m_status;
}
void OAIResponse::setStatus(const OAIResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIResponse_stay_informed OAIResponse::getStayInformed() const {
    return m_stay_informed;
}
void OAIResponse::setStayInformed(const OAIResponse_stay_informed &stay_informed) {
    m_stay_informed = stay_informed;
    m_stay_informed_isSet = true;
}

bool OAIResponse::is_stay_informed_Set() const{
    return m_stay_informed_isSet;
}

bool OAIResponse::is_stay_informed_Valid() const{
    return m_stay_informed_isValid;
}

QString OAIResponse::getThanks() const {
    return m_thanks;
}
void OAIResponse::setThanks(const QString &thanks) {
    m_thanks = thanks;
    m_thanks_isSet = true;
}

bool OAIResponse::is_thanks_Set() const{
    return m_thanks_isSet;
}

bool OAIResponse::is_thanks_Valid() const{
    return m_thanks_isValid;
}

OAIResponse_timestamp OAIResponse::getTimestamp() const {
    return m_timestamp;
}
void OAIResponse::setTimestamp(const OAIResponse_timestamp &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIResponse::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIResponse::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAIResponse::getTotalResults() const {
    return m_total_results;
}
void OAIResponse::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIResponse::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIResponse::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stay_informed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thanks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
