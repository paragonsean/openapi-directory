/**
 * OpenCage Geocoder
 * Worldwide forward and reverse geocoding
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse_results_inner::OAIResponse_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse_results_inner::OAIResponse_results_inner() {
    this->initializeModel();
}

OAIResponse_results_inner::~OAIResponse_results_inner() {}

void OAIResponse_results_inner::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_bounds_isSet = false;
    m_bounds_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_formatted_isSet = false;
    m_formatted_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;
}

void OAIResponse_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse_results_inner::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_bounds_isValid = ::OpenAPI::fromJsonValue(m_bounds, json[QString("bounds")]);
    m_bounds_isSet = !json[QString("bounds")].isNull() && m_bounds_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_formatted_isValid = ::OpenAPI::fromJsonValue(m_formatted, json[QString("formatted")]);
    m_formatted_isSet = !json[QString("formatted")].isNull() && m_formatted_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;
}

QString OAIResponse_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_bounds.isSet()) {
        obj.insert(QString("bounds"), ::OpenAPI::toJsonValue(m_bounds));
    }
    if (m_components_isSet) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_formatted_isSet) {
        obj.insert(QString("formatted"), ::OpenAPI::toJsonValue(m_formatted));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    return obj;
}

OAIObject OAIResponse_results_inner::getAnnotations() const {
    return m_annotations;
}
void OAIResponse_results_inner::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIResponse_results_inner::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIResponse_results_inner::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIResponse_results_inner_bounds OAIResponse_results_inner::getBounds() const {
    return m_bounds;
}
void OAIResponse_results_inner::setBounds(const OAIResponse_results_inner_bounds &bounds) {
    m_bounds = bounds;
    m_bounds_isSet = true;
}

bool OAIResponse_results_inner::is_bounds_Set() const{
    return m_bounds_isSet;
}

bool OAIResponse_results_inner::is_bounds_Valid() const{
    return m_bounds_isValid;
}

OAIObject OAIResponse_results_inner::getComponents() const {
    return m_components;
}
void OAIResponse_results_inner::setComponents(const OAIObject &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIResponse_results_inner::is_components_Set() const{
    return m_components_isSet;
}

bool OAIResponse_results_inner::is_components_Valid() const{
    return m_components_isValid;
}

qint32 OAIResponse_results_inner::getConfidence() const {
    return m_confidence;
}
void OAIResponse_results_inner::setConfidence(const qint32 &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIResponse_results_inner::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIResponse_results_inner::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIResponse_results_inner::getFormatted() const {
    return m_formatted;
}
void OAIResponse_results_inner::setFormatted(const QString &formatted) {
    m_formatted = formatted;
    m_formatted_isSet = true;
}

bool OAIResponse_results_inner::is_formatted_Set() const{
    return m_formatted_isSet;
}

bool OAIResponse_results_inner::is_formatted_Valid() const{
    return m_formatted_isValid;
}

OAILatLng OAIResponse_results_inner::getGeometry() const {
    return m_geometry;
}
void OAIResponse_results_inner::setGeometry(const OAILatLng &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIResponse_results_inner::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIResponse_results_inner::is_geometry_Valid() const{
    return m_geometry_isValid;
}

bool OAIResponse_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_components_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
