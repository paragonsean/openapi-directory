# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_http_target import AppEngineHttpTarget
from openapi_server.models.http_target import HttpTarget
from openapi_server.models.pubsub_target import PubsubTarget
from openapi_server.models.retry_config import RetryConfig
from openapi_server.models.status import Status
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_http_target: AppEngineHttpTarget=None, attempt_deadline: str=None, description: str=None, http_target: HttpTarget=None, last_attempt_time: str=None, legacy_app_engine_cron: bool=None, name: str=None, pubsub_target: PubsubTarget=None, retry_config: RetryConfig=None, schedule: str=None, schedule_time: str=None, state: str=None, status: Status=None, time_zone: str=None, user_update_time: str=None):
        """Job - a model defined in OpenAPI

        :param app_engine_http_target: The app_engine_http_target of this Job.
        :param attempt_deadline: The attempt_deadline of this Job.
        :param description: The description of this Job.
        :param http_target: The http_target of this Job.
        :param last_attempt_time: The last_attempt_time of this Job.
        :param legacy_app_engine_cron: The legacy_app_engine_cron of this Job.
        :param name: The name of this Job.
        :param pubsub_target: The pubsub_target of this Job.
        :param retry_config: The retry_config of this Job.
        :param schedule: The schedule of this Job.
        :param schedule_time: The schedule_time of this Job.
        :param state: The state of this Job.
        :param status: The status of this Job.
        :param time_zone: The time_zone of this Job.
        :param user_update_time: The user_update_time of this Job.
        """
        self.openapi_types = {
            'app_engine_http_target': AppEngineHttpTarget,
            'attempt_deadline': str,
            'description': str,
            'http_target': HttpTarget,
            'last_attempt_time': str,
            'legacy_app_engine_cron': bool,
            'name': str,
            'pubsub_target': PubsubTarget,
            'retry_config': RetryConfig,
            'schedule': str,
            'schedule_time': str,
            'state': str,
            'status': Status,
            'time_zone': str,
            'user_update_time': str
        }

        self.attribute_map = {
            'app_engine_http_target': 'appEngineHttpTarget',
            'attempt_deadline': 'attemptDeadline',
            'description': 'description',
            'http_target': 'httpTarget',
            'last_attempt_time': 'lastAttemptTime',
            'legacy_app_engine_cron': 'legacyAppEngineCron',
            'name': 'name',
            'pubsub_target': 'pubsubTarget',
            'retry_config': 'retryConfig',
            'schedule': 'schedule',
            'schedule_time': 'scheduleTime',
            'state': 'state',
            'status': 'status',
            'time_zone': 'timeZone',
            'user_update_time': 'userUpdateTime'
        }

        self._app_engine_http_target = app_engine_http_target
        self._attempt_deadline = attempt_deadline
        self._description = description
        self._http_target = http_target
        self._last_attempt_time = last_attempt_time
        self._legacy_app_engine_cron = legacy_app_engine_cron
        self._name = name
        self._pubsub_target = pubsub_target
        self._retry_config = retry_config
        self._schedule = schedule
        self._schedule_time = schedule_time
        self._state = state
        self._status = status
        self._time_zone = time_zone
        self._user_update_time = user_update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_http_target(self):
        """Gets the app_engine_http_target of this Job.


        :return: The app_engine_http_target of this Job.
        :rtype: AppEngineHttpTarget
        """
        return self._app_engine_http_target

    @app_engine_http_target.setter
    def app_engine_http_target(self, app_engine_http_target):
        """Sets the app_engine_http_target of this Job.


        :param app_engine_http_target: The app_engine_http_target of this Job.
        :type app_engine_http_target: AppEngineHttpTarget
        """

        self._app_engine_http_target = app_engine_http_target

    @property
    def attempt_deadline(self):
        """Gets the attempt_deadline of this Job.

        The deadline for job attempts. If the request handler does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in execution logs. Cloud Scheduler will retry the job according to the RetryConfig. The default and the allowed values depend on the type of target: * For HTTP targets, the default is 3 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine HTTP targets, 0 indicates that the request has the default deadline. The default deadline depends on the scaling type of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. * For Pub/Sub targets, this field is ignored.

        :return: The attempt_deadline of this Job.
        :rtype: str
        """
        return self._attempt_deadline

    @attempt_deadline.setter
    def attempt_deadline(self, attempt_deadline):
        """Sets the attempt_deadline of this Job.

        The deadline for job attempts. If the request handler does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in execution logs. Cloud Scheduler will retry the job according to the RetryConfig. The default and the allowed values depend on the type of target: * For HTTP targets, the default is 3 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine HTTP targets, 0 indicates that the request has the default deadline. The default deadline depends on the scaling type of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. * For Pub/Sub targets, this field is ignored.

        :param attempt_deadline: The attempt_deadline of this Job.
        :type attempt_deadline: str
        """

        self._attempt_deadline = attempt_deadline

    @property
    def description(self):
        """Gets the description of this Job.

        Optionally caller-specified in CreateJob or UpdateJob. A human-readable description for the job. This string must not contain more than 500 characters.

        :return: The description of this Job.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        Optionally caller-specified in CreateJob or UpdateJob. A human-readable description for the job. This string must not contain more than 500 characters.

        :param description: The description of this Job.
        :type description: str
        """

        self._description = description

    @property
    def http_target(self):
        """Gets the http_target of this Job.


        :return: The http_target of this Job.
        :rtype: HttpTarget
        """
        return self._http_target

    @http_target.setter
    def http_target(self, http_target):
        """Sets the http_target of this Job.


        :param http_target: The http_target of this Job.
        :type http_target: HttpTarget
        """

        self._http_target = http_target

    @property
    def last_attempt_time(self):
        """Gets the last_attempt_time of this Job.

        Output only. The time the last job attempt started.

        :return: The last_attempt_time of this Job.
        :rtype: str
        """
        return self._last_attempt_time

    @last_attempt_time.setter
    def last_attempt_time(self, last_attempt_time):
        """Sets the last_attempt_time of this Job.

        Output only. The time the last job attempt started.

        :param last_attempt_time: The last_attempt_time of this Job.
        :type last_attempt_time: str
        """

        self._last_attempt_time = last_attempt_time

    @property
    def legacy_app_engine_cron(self):
        """Gets the legacy_app_engine_cron of this Job.

        Immutable. This field is used to manage the legacy App Engine Cron jobs using the Cloud Scheduler API. If the field is set to true, the job will be considered a legacy job. Note that App Engine Cron jobs have fewer features than Cloud Scheduler jobs, e.g., are only limited to App Engine targets.

        :return: The legacy_app_engine_cron of this Job.
        :rtype: bool
        """
        return self._legacy_app_engine_cron

    @legacy_app_engine_cron.setter
    def legacy_app_engine_cron(self, legacy_app_engine_cron):
        """Sets the legacy_app_engine_cron of this Job.

        Immutable. This field is used to manage the legacy App Engine Cron jobs using the Cloud Scheduler API. If the field is set to true, the job will be considered a legacy job. Note that App Engine Cron jobs have fewer features than Cloud Scheduler jobs, e.g., are only limited to App Engine targets.

        :param legacy_app_engine_cron: The legacy_app_engine_cron of this Job.
        :type legacy_app_engine_cron: bool
        """

        self._legacy_app_engine_cron = legacy_app_engine_cron

    @property
    def name(self):
        """Gets the name of this Job.

        Optionally caller-specified in CreateJob, after which it becomes output only. The job name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the job's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        Optionally caller-specified in CreateJob, after which it becomes output only. The job name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the job's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def pubsub_target(self):
        """Gets the pubsub_target of this Job.


        :return: The pubsub_target of this Job.
        :rtype: PubsubTarget
        """
        return self._pubsub_target

    @pubsub_target.setter
    def pubsub_target(self, pubsub_target):
        """Sets the pubsub_target of this Job.


        :param pubsub_target: The pubsub_target of this Job.
        :type pubsub_target: PubsubTarget
        """

        self._pubsub_target = pubsub_target

    @property
    def retry_config(self):
        """Gets the retry_config of this Job.


        :return: The retry_config of this Job.
        :rtype: RetryConfig
        """
        return self._retry_config

    @retry_config.setter
    def retry_config(self, retry_config):
        """Sets the retry_config of this Job.


        :param retry_config: The retry_config of this Job.
        :type retry_config: RetryConfig
        """

        self._retry_config = retry_config

    @property
    def schedule(self):
        """Gets the schedule of this Job.

        Required, except when used with UpdateJob. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](https://en.wikipedia.org/wiki/Cron#Overview) * English-like [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules) As a general rule, execution `n + 1` of a job will not begin until execution `n` has finished. Cloud Scheduler will never allow two simultaneously outstanding executions. For example, this implies that if the `n+1`th execution is scheduled to run at 16:00 but the `n`th execution takes until 16:15, the `n+1`th execution will not start until `16:15`. A scheduled start time will be delayed if the previous execution has not ended when its scheduled time occurs. If retry_count > 0 and a job attempt fails, the job will be tried a total of retry_count times, with exponential backoff, until the next scheduled start time. If retry_count is 0, a job attempt will not be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. Setting retry_count to 0 does not prevent failed jobs from running according to schedule after the failure.

        :return: The schedule of this Job.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Job.

        Required, except when used with UpdateJob. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](https://en.wikipedia.org/wiki/Cron#Overview) * English-like [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules) As a general rule, execution `n + 1` of a job will not begin until execution `n` has finished. Cloud Scheduler will never allow two simultaneously outstanding executions. For example, this implies that if the `n+1`th execution is scheduled to run at 16:00 but the `n`th execution takes until 16:15, the `n+1`th execution will not start until `16:15`. A scheduled start time will be delayed if the previous execution has not ended when its scheduled time occurs. If retry_count > 0 and a job attempt fails, the job will be tried a total of retry_count times, with exponential backoff, until the next scheduled start time. If retry_count is 0, a job attempt will not be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. Setting retry_count to 0 does not prevent failed jobs from running according to schedule after the failure.

        :param schedule: The schedule of this Job.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def schedule_time(self):
        """Gets the schedule_time of this Job.

        Output only. The next time the job is scheduled. Note that this may be a retry of a previously failed attempt or the next execution time according to the schedule.

        :return: The schedule_time of this Job.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this Job.

        Output only. The next time the job is scheduled. Note that this may be a retry of a previously failed attempt or the next execution time according to the schedule.

        :param schedule_time: The schedule_time of this Job.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time

    @property
    def state(self):
        """Gets the state of this Job.

        Output only. State of the job.

        :return: The state of this Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.

        Output only. State of the job.

        :param state: The state of this Job.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED", "PAUSED", "DISABLED", "UPDATE_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: Status
        """

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this Job.

        Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string \"utc\". If a time zone is not specified, the default will be in UTC (also known as GMT).

        :return: The time_zone of this Job.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Job.

        Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the [tz database](http://en.wikipedia.org/wiki/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string \"utc\". If a time zone is not specified, the default will be in UTC (also known as GMT).

        :param time_zone: The time_zone of this Job.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def user_update_time(self):
        """Gets the user_update_time of this Job.

        Output only. The creation time of the job.

        :return: The user_update_time of this Job.
        :rtype: str
        """
        return self._user_update_time

    @user_update_time.setter
    def user_update_time(self, user_update_time):
        """Sets the user_update_time of this Job.

        Output only. The creation time of the job.

        :param user_update_time: The user_update_time of this Job.
        :type user_update_time: str
        """

        self._user_update_time = user_update_time
