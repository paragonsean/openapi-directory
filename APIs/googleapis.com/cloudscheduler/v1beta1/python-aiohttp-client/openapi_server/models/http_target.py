# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.o_auth_token import OAuthToken
from openapi_server.models.oidc_token import OidcToken
from openapi_server import util


class HttpTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, headers: Dict[str, str]=None, http_method: str=None, oauth_token: OAuthToken=None, oidc_token: OidcToken=None, uri: str=None):
        """HttpTarget - a model defined in OpenAPI

        :param body: The body of this HttpTarget.
        :param headers: The headers of this HttpTarget.
        :param http_method: The http_method of this HttpTarget.
        :param oauth_token: The oauth_token of this HttpTarget.
        :param oidc_token: The oidc_token of this HttpTarget.
        :param uri: The uri of this HttpTarget.
        """
        self.openapi_types = {
            'body': str,
            'headers': Dict[str, str],
            'http_method': str,
            'oauth_token': OAuthToken,
            'oidc_token': OidcToken,
            'uri': str
        }

        self.attribute_map = {
            'body': 'body',
            'headers': 'headers',
            'http_method': 'httpMethod',
            'oauth_token': 'oauthToken',
            'oidc_token': 'oidcToken',
            'uri': 'uri'
        }

        self._body = body
        self._headers = headers
        self._http_method = http_method
        self._oauth_token = oauth_token
        self._oidc_token = oidc_token
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpTarget of this HttpTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this HttpTarget.

        HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.

        :return: The body of this HttpTarget.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this HttpTarget.

        HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.

        :param body: The body of this HttpTarget.
        :type body: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this HttpTarget.

        HTTP request headers. This map contains the header field names and values. The user can specify HTTP request headers to send with the job's HTTP request. Repeated headers are not supported, but a header value can contain commas. The following headers represent a subset of the headers that accompany the job's HTTP request. Some HTTP request headers are ignored or replaced. A partial list of headers that are ignored or replaced is below: * Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `\"Google-Cloud-Scheduler\"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule as an offset of UTC parsed according to RFC3339. If the job has a body and the following headers are not set by the user, Cloud Scheduler sets default values: * `Content-Type`: This will be set to `\"application/octet-stream\"`. You can override this default by explicitly setting `Content-Type` to a particular media type when creating the job. For example, you can set `Content-Type` to `\"application/json\"`. The total size of headers must be less than 80KB.

        :return: The headers of this HttpTarget.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpTarget.

        HTTP request headers. This map contains the header field names and values. The user can specify HTTP request headers to send with the job's HTTP request. Repeated headers are not supported, but a header value can contain commas. The following headers represent a subset of the headers that accompany the job's HTTP request. Some HTTP request headers are ignored or replaced. A partial list of headers that are ignored or replaced is below: * Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `\"Google-Cloud-Scheduler\"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule as an offset of UTC parsed according to RFC3339. If the job has a body and the following headers are not set by the user, Cloud Scheduler sets default values: * `Content-Type`: This will be set to `\"application/octet-stream\"`. You can override this default by explicitly setting `Content-Type` to a particular media type when creating the job. For example, you can set `Content-Type` to `\"application/json\"`. The total size of headers must be less than 80KB.

        :param headers: The headers of this HttpTarget.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def http_method(self):
        """Gets the http_method of this HttpTarget.

        Which HTTP method to use for the request.

        :return: The http_method of this HttpTarget.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this HttpTarget.

        Which HTTP method to use for the request.

        :param http_method: The http_method of this HttpTarget.
        :type http_method: str
        """
        allowed_values = ["HTTP_METHOD_UNSPECIFIED", "POST", "GET", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def oauth_token(self):
        """Gets the oauth_token of this HttpTarget.


        :return: The oauth_token of this HttpTarget.
        :rtype: OAuthToken
        """
        return self._oauth_token

    @oauth_token.setter
    def oauth_token(self, oauth_token):
        """Sets the oauth_token of this HttpTarget.


        :param oauth_token: The oauth_token of this HttpTarget.
        :type oauth_token: OAuthToken
        """

        self._oauth_token = oauth_token

    @property
    def oidc_token(self):
        """Gets the oidc_token of this HttpTarget.


        :return: The oidc_token of this HttpTarget.
        :rtype: OidcToken
        """
        return self._oidc_token

    @oidc_token.setter
    def oidc_token(self, oidc_token):
        """Sets the oidc_token of this HttpTarget.


        :param oidc_token: The oidc_token of this HttpTarget.
        :type oidc_token: OidcToken
        """

        self._oidc_token = oidc_token

    @property
    def uri(self):
        """Gets the uri of this HttpTarget.

        Required. The full URI path that the request will be sent to. This string must begin with either \"http://\" or \"https://\". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.

        :return: The uri of this HttpTarget.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this HttpTarget.

        Required. The full URI path that the request will be sent to. This string must begin with either \"http://\" or \"https://\". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.

        :param uri: The uri of this HttpTarget.
        :type uri: str
        """

        self._uri = uri
