# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_routing import AppEngineRouting
from openapi_server import util


class AppEngineHttpTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_routing: AppEngineRouting=None, body: str=None, headers: Dict[str, str]=None, http_method: str=None, relative_uri: str=None):
        """AppEngineHttpTarget - a model defined in OpenAPI

        :param app_engine_routing: The app_engine_routing of this AppEngineHttpTarget.
        :param body: The body of this AppEngineHttpTarget.
        :param headers: The headers of this AppEngineHttpTarget.
        :param http_method: The http_method of this AppEngineHttpTarget.
        :param relative_uri: The relative_uri of this AppEngineHttpTarget.
        """
        self.openapi_types = {
            'app_engine_routing': AppEngineRouting,
            'body': str,
            'headers': Dict[str, str],
            'http_method': str,
            'relative_uri': str
        }

        self.attribute_map = {
            'app_engine_routing': 'appEngineRouting',
            'body': 'body',
            'headers': 'headers',
            'http_method': 'httpMethod',
            'relative_uri': 'relativeUri'
        }

        self._app_engine_routing = app_engine_routing
        self._body = body
        self._headers = headers
        self._http_method = http_method
        self._relative_uri = relative_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppEngineHttpTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppEngineHttpTarget of this AppEngineHttpTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_routing(self):
        """Gets the app_engine_routing of this AppEngineHttpTarget.


        :return: The app_engine_routing of this AppEngineHttpTarget.
        :rtype: AppEngineRouting
        """
        return self._app_engine_routing

    @app_engine_routing.setter
    def app_engine_routing(self, app_engine_routing):
        """Sets the app_engine_routing of this AppEngineHttpTarget.


        :param app_engine_routing: The app_engine_routing of this AppEngineHttpTarget.
        :type app_engine_routing: AppEngineRouting
        """

        self._app_engine_routing = app_engine_routing

    @property
    def body(self):
        """Gets the body of this AppEngineHttpTarget.

        Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.

        :return: The body of this AppEngineHttpTarget.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AppEngineHttpTarget.

        Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.

        :param body: The body of this AppEngineHttpTarget.
        :type body: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this AppEngineHttpTarget.

        HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `\"AppEngine-Google; (+http://code.google.com/appengine)\"`. This header can be modified, but Cloud Scheduler will append `\"AppEngine-Google; (+http://code.google.com/appengine)\"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule as an offset of UTC parsed according to RFC3339. If the job has a body and the following headers are not set by the user, Cloud Scheduler sets default values: * `Content-Type`: This will be set to `\"application/octet-stream\"`. You can override this default by explicitly setting `Content-Type` to a particular media type when creating the job. For example, you can set `Content-Type` to `\"application/json\"`. The headers below are output only. They cannot be set or overridden: * `Content-Length`: This is computed by Cloud Scheduler. * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.

        :return: The headers of this AppEngineHttpTarget.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AppEngineHttpTarget.

        HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `\"AppEngine-Google; (+http://code.google.com/appengine)\"`. This header can be modified, but Cloud Scheduler will append `\"AppEngine-Google; (+http://code.google.com/appengine)\"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule as an offset of UTC parsed according to RFC3339. If the job has a body and the following headers are not set by the user, Cloud Scheduler sets default values: * `Content-Type`: This will be set to `\"application/octet-stream\"`. You can override this default by explicitly setting `Content-Type` to a particular media type when creating the job. For example, you can set `Content-Type` to `\"application/json\"`. The headers below are output only. They cannot be set or overridden: * `Content-Length`: This is computed by Cloud Scheduler. * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.

        :param headers: The headers of this AppEngineHttpTarget.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def http_method(self):
        """Gets the http_method of this AppEngineHttpTarget.

        The HTTP method to use for the request. PATCH and OPTIONS are not permitted.

        :return: The http_method of this AppEngineHttpTarget.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this AppEngineHttpTarget.

        The HTTP method to use for the request. PATCH and OPTIONS are not permitted.

        :param http_method: The http_method of this AppEngineHttpTarget.
        :type http_method: str
        """
        allowed_values = ["HTTP_METHOD_UNSPECIFIED", "POST", "GET", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def relative_uri(self):
        """Gets the relative_uri of this AppEngineHttpTarget.

        The relative URI. The relative URL must begin with \"/\" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path \"/\" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.

        :return: The relative_uri of this AppEngineHttpTarget.
        :rtype: str
        """
        return self._relative_uri

    @relative_uri.setter
    def relative_uri(self, relative_uri):
        """Sets the relative_uri of this AppEngineHttpTarget.

        The relative URI. The relative URL must begin with \"/\" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path \"/\" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.

        :param relative_uri: The relative_uri of this AppEngineHttpTarget.
        :type relative_uri: str
        """

        self._relative_uri = relative_uri
