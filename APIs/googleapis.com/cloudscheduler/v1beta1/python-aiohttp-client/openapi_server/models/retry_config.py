# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_backoff_duration: str=None, max_doublings: int=None, max_retry_duration: str=None, min_backoff_duration: str=None, retry_count: int=None):
        """RetryConfig - a model defined in OpenAPI

        :param max_backoff_duration: The max_backoff_duration of this RetryConfig.
        :param max_doublings: The max_doublings of this RetryConfig.
        :param max_retry_duration: The max_retry_duration of this RetryConfig.
        :param min_backoff_duration: The min_backoff_duration of this RetryConfig.
        :param retry_count: The retry_count of this RetryConfig.
        """
        self.openapi_types = {
            'max_backoff_duration': str,
            'max_doublings': int,
            'max_retry_duration': str,
            'min_backoff_duration': str,
            'retry_count': int
        }

        self.attribute_map = {
            'max_backoff_duration': 'maxBackoffDuration',
            'max_doublings': 'maxDoublings',
            'max_retry_duration': 'maxRetryDuration',
            'min_backoff_duration': 'minBackoffDuration',
            'retry_count': 'retryCount'
        }

        self._max_backoff_duration = max_backoff_duration
        self._max_doublings = max_doublings
        self._max_retry_duration = max_retry_duration
        self._min_backoff_duration = min_backoff_duration
        self._retry_count = retry_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryConfig of this RetryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_backoff_duration(self):
        """Gets the max_backoff_duration of this RetryConfig.

        The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.

        :return: The max_backoff_duration of this RetryConfig.
        :rtype: str
        """
        return self._max_backoff_duration

    @max_backoff_duration.setter
    def max_backoff_duration(self, max_backoff_duration):
        """Sets the max_backoff_duration of this RetryConfig.

        The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.

        :param max_backoff_duration: The max_backoff_duration of this RetryConfig.
        :type max_backoff_duration: str
        """

        self._max_backoff_duration = max_backoff_duration

    @property
    def max_doublings(self):
        """Gets the max_doublings of this RetryConfig.

        The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.

        :return: The max_doublings of this RetryConfig.
        :rtype: int
        """
        return self._max_doublings

    @max_doublings.setter
    def max_doublings(self, max_doublings):
        """Sets the max_doublings of this RetryConfig.

        The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.

        :param max_doublings: The max_doublings of this RetryConfig.
        :type max_doublings: int
        """

        self._max_doublings = max_doublings

    @property
    def max_retry_duration(self):
        """Gets the max_retry_duration of this RetryConfig.

        The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.

        :return: The max_retry_duration of this RetryConfig.
        :rtype: str
        """
        return self._max_retry_duration

    @max_retry_duration.setter
    def max_retry_duration(self, max_retry_duration):
        """Sets the max_retry_duration of this RetryConfig.

        The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.

        :param max_retry_duration: The max_retry_duration of this RetryConfig.
        :type max_retry_duration: str
        """

        self._max_retry_duration = max_retry_duration

    @property
    def min_backoff_duration(self):
        """Gets the min_backoff_duration of this RetryConfig.

        The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.

        :return: The min_backoff_duration of this RetryConfig.
        :rtype: str
        """
        return self._min_backoff_duration

    @min_backoff_duration.setter
    def min_backoff_duration(self, min_backoff_duration):
        """Sets the min_backoff_duration of this RetryConfig.

        The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.

        :param min_backoff_duration: The min_backoff_duration of this RetryConfig.
        :type min_backoff_duration: str
        """

        self._min_backoff_duration = min_backoff_duration

    @property
    def retry_count(self):
        """Gets the retry_count of this RetryConfig.

        The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is 0, a job attempt will not be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. Setting retry_count to 0 does not prevent failed jobs from running according to schedule after the failure. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.

        :return: The retry_count of this RetryConfig.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this RetryConfig.

        The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is 0, a job attempt will not be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. Setting retry_count to 0 does not prevent failed jobs from running according to schedule after the failure. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.

        :param retry_count: The retry_count of this RetryConfig.
        :type retry_count: int
        """

        self._retry_count = retry_count
