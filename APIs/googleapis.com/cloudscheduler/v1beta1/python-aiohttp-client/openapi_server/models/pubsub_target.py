# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PubsubTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, data: str=None, topic_name: str=None):
        """PubsubTarget - a model defined in OpenAPI

        :param attributes: The attributes of this PubsubTarget.
        :param data: The data of this PubsubTarget.
        :param topic_name: The topic_name of this PubsubTarget.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'data': str,
            'topic_name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'data': 'data',
            'topic_name': 'topicName'
        }

        self._attributes = attributes
        self._data = data
        self._topic_name = topic_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubsubTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubsubTarget of this PubsubTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this PubsubTarget.

        Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.

        :return: The attributes of this PubsubTarget.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PubsubTarget.

        Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.

        :param attributes: The attributes of this PubsubTarget.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def data(self):
        """Gets the data of this PubsubTarget.

        The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.

        :return: The data of this PubsubTarget.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PubsubTarget.

        The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.

        :param data: The data of this PubsubTarget.
        :type data: str
        """

        self._data = data

    @property
    def topic_name(self):
        """Gets the topic_name of this PubsubTarget.

        Required. The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by Pub/Sub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.

        :return: The topic_name of this PubsubTarget.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this PubsubTarget.

        Required. The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by Pub/Sub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.

        :param topic_name: The topic_name of this PubsubTarget.
        :type topic_name: str
        """

        self._topic_name = topic_name
