/**
 * Cloud Scheduler API
 * Creates and manages jobs run on a regular recurring schedule.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppEngineRouting from './AppEngineRouting';

/**
 * The AppEngineHttpTarget model module.
 * @module model/AppEngineHttpTarget
 * @version v1beta1
 */
class AppEngineHttpTarget {
    /**
     * Constructs a new <code>AppEngineHttpTarget</code>.
     * App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
     * @alias module:model/AppEngineHttpTarget
     */
    constructor() { 
        
        AppEngineHttpTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppEngineHttpTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppEngineHttpTarget} obj Optional instance to populate.
     * @return {module:model/AppEngineHttpTarget} The populated <code>AppEngineHttpTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppEngineHttpTarget();

            if (data.hasOwnProperty('appEngineRouting')) {
                obj['appEngineRouting'] = AppEngineRouting.constructFromObject(data['appEngineRouting']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'Blob');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('relativeUri')) {
                obj['relativeUri'] = ApiClient.convertToType(data['relativeUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppEngineHttpTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppEngineHttpTarget</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appEngineRouting`
        if (data['appEngineRouting']) { // data not null
          AppEngineRouting.validateJSON(data['appEngineRouting']);
        }
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // ensure the json data is a string
        if (data['relativeUri'] && !(typeof data['relativeUri'] === 'string' || data['relativeUri'] instanceof String)) {
            throw new Error("Expected the field `relativeUri` to be a primitive type in the JSON string but got " + data['relativeUri']);
        }

        return true;
    }


}



/**
 * @member {module:model/AppEngineRouting} appEngineRouting
 */
AppEngineHttpTarget.prototype['appEngineRouting'] = undefined;

/**
 * Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
 * @member {Blob} body
 */
AppEngineHttpTarget.prototype['body'] = undefined;

/**
 * HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `\"AppEngine-Google; (+http://code.google.com/appengine)\"`. This header can be modified, but Cloud Scheduler will append `\"AppEngine-Google; (+http://code.google.com/appengine)\"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. * `X-CloudScheduler-JobName`: This header will contain the job name. * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in the unix-cron format, this header will contain the job schedule as an offset of UTC parsed according to RFC3339. If the job has a body and the following headers are not set by the user, Cloud Scheduler sets default values: * `Content-Type`: This will be set to `\"application/octet-stream\"`. You can override this default by explicitly setting `Content-Type` to a particular media type when creating the job. For example, you can set `Content-Type` to `\"application/json\"`. The headers below are output only. They cannot be set or overridden: * `Content-Length`: This is computed by Cloud Scheduler. * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
 * @member {Object.<String, String>} headers
 */
AppEngineHttpTarget.prototype['headers'] = undefined;

/**
 * The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
 * @member {module:model/AppEngineHttpTarget.HttpMethodEnum} httpMethod
 */
AppEngineHttpTarget.prototype['httpMethod'] = undefined;

/**
 * The relative URI. The relative URL must begin with \"/\" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path \"/\" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
 * @member {String} relativeUri
 */
AppEngineHttpTarget.prototype['relativeUri'] = undefined;





/**
 * Allowed values for the <code>httpMethod</code> property.
 * @enum {String}
 * @readonly
 */
AppEngineHttpTarget['HttpMethodEnum'] = {

    /**
     * value: "HTTP_METHOD_UNSPECIFIED"
     * @const
     */
    "HTTP_METHOD_UNSPECIFIED": "HTTP_METHOD_UNSPECIFIED",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "OPTIONS"
     * @const
     */
    "OPTIONS": "OPTIONS"
};



export default AppEngineHttpTarget;

