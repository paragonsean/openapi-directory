# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_encryption_configuration import DiskEncryptionConfiguration
from openapi_server.models.disk_encryption_status import DiskEncryptionStatus
from openapi_server.models.operation_error import OperationError
from openapi_server import util


class BackupRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_kind: str=None, description: str=None, disk_encryption_configuration: DiskEncryptionConfiguration=None, disk_encryption_status: DiskEncryptionStatus=None, end_time: str=None, enqueued_time: str=None, error: OperationError=None, id: str=None, instance: str=None, kind: str=None, location: str=None, self_link: str=None, start_time: str=None, status: str=None, time_zone: str=None, type: str=None, window_start_time: str=None):
        """BackupRun - a model defined in OpenAPI

        :param backup_kind: The backup_kind of this BackupRun.
        :param description: The description of this BackupRun.
        :param disk_encryption_configuration: The disk_encryption_configuration of this BackupRun.
        :param disk_encryption_status: The disk_encryption_status of this BackupRun.
        :param end_time: The end_time of this BackupRun.
        :param enqueued_time: The enqueued_time of this BackupRun.
        :param error: The error of this BackupRun.
        :param id: The id of this BackupRun.
        :param instance: The instance of this BackupRun.
        :param kind: The kind of this BackupRun.
        :param location: The location of this BackupRun.
        :param self_link: The self_link of this BackupRun.
        :param start_time: The start_time of this BackupRun.
        :param status: The status of this BackupRun.
        :param time_zone: The time_zone of this BackupRun.
        :param type: The type of this BackupRun.
        :param window_start_time: The window_start_time of this BackupRun.
        """
        self.openapi_types = {
            'backup_kind': str,
            'description': str,
            'disk_encryption_configuration': DiskEncryptionConfiguration,
            'disk_encryption_status': DiskEncryptionStatus,
            'end_time': str,
            'enqueued_time': str,
            'error': OperationError,
            'id': str,
            'instance': str,
            'kind': str,
            'location': str,
            'self_link': str,
            'start_time': str,
            'status': str,
            'time_zone': str,
            'type': str,
            'window_start_time': str
        }

        self.attribute_map = {
            'backup_kind': 'backupKind',
            'description': 'description',
            'disk_encryption_configuration': 'diskEncryptionConfiguration',
            'disk_encryption_status': 'diskEncryptionStatus',
            'end_time': 'endTime',
            'enqueued_time': 'enqueuedTime',
            'error': 'error',
            'id': 'id',
            'instance': 'instance',
            'kind': 'kind',
            'location': 'location',
            'self_link': 'selfLink',
            'start_time': 'startTime',
            'status': 'status',
            'time_zone': 'timeZone',
            'type': 'type',
            'window_start_time': 'windowStartTime'
        }

        self._backup_kind = backup_kind
        self._description = description
        self._disk_encryption_configuration = disk_encryption_configuration
        self._disk_encryption_status = disk_encryption_status
        self._end_time = end_time
        self._enqueued_time = enqueued_time
        self._error = error
        self._id = id
        self._instance = instance
        self._kind = kind
        self._location = location
        self._self_link = self_link
        self._start_time = start_time
        self._status = status
        self._time_zone = time_zone
        self._type = type
        self._window_start_time = window_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupRun of this BackupRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_kind(self):
        """Gets the backup_kind of this BackupRun.

        Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.

        :return: The backup_kind of this BackupRun.
        :rtype: str
        """
        return self._backup_kind

    @backup_kind.setter
    def backup_kind(self, backup_kind):
        """Sets the backup_kind of this BackupRun.

        Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.

        :param backup_kind: The backup_kind of this BackupRun.
        :type backup_kind: str
        """
        allowed_values = ["SQL_BACKUP_KIND_UNSPECIFIED", "SNAPSHOT", "PHYSICAL"]  # noqa: E501
        if backup_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_kind` ({0}), must be one of {1}"
                .format(backup_kind, allowed_values)
            )

        self._backup_kind = backup_kind

    @property
    def description(self):
        """Gets the description of this BackupRun.

        The description of this run, only applicable to on-demand backups.

        :return: The description of this BackupRun.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupRun.

        The description of this run, only applicable to on-demand backups.

        :param description: The description of this BackupRun.
        :type description: str
        """

        self._description = description

    @property
    def disk_encryption_configuration(self):
        """Gets the disk_encryption_configuration of this BackupRun.


        :return: The disk_encryption_configuration of this BackupRun.
        :rtype: DiskEncryptionConfiguration
        """
        return self._disk_encryption_configuration

    @disk_encryption_configuration.setter
    def disk_encryption_configuration(self, disk_encryption_configuration):
        """Sets the disk_encryption_configuration of this BackupRun.


        :param disk_encryption_configuration: The disk_encryption_configuration of this BackupRun.
        :type disk_encryption_configuration: DiskEncryptionConfiguration
        """

        self._disk_encryption_configuration = disk_encryption_configuration

    @property
    def disk_encryption_status(self):
        """Gets the disk_encryption_status of this BackupRun.


        :return: The disk_encryption_status of this BackupRun.
        :rtype: DiskEncryptionStatus
        """
        return self._disk_encryption_status

    @disk_encryption_status.setter
    def disk_encryption_status(self, disk_encryption_status):
        """Sets the disk_encryption_status of this BackupRun.


        :param disk_encryption_status: The disk_encryption_status of this BackupRun.
        :type disk_encryption_status: DiskEncryptionStatus
        """

        self._disk_encryption_status = disk_encryption_status

    @property
    def end_time(self):
        """Gets the end_time of this BackupRun.

        The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The end_time of this BackupRun.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BackupRun.

        The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param end_time: The end_time of this BackupRun.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def enqueued_time(self):
        """Gets the enqueued_time of this BackupRun.

        The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The enqueued_time of this BackupRun.
        :rtype: str
        """
        return self._enqueued_time

    @enqueued_time.setter
    def enqueued_time(self, enqueued_time):
        """Sets the enqueued_time of this BackupRun.

        The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param enqueued_time: The enqueued_time of this BackupRun.
        :type enqueued_time: str
        """

        self._enqueued_time = enqueued_time

    @property
    def error(self):
        """Gets the error of this BackupRun.


        :return: The error of this BackupRun.
        :rtype: OperationError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BackupRun.


        :param error: The error of this BackupRun.
        :type error: OperationError
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this BackupRun.

        The identifier for this backup run. Unique only for a specific Cloud SQL instance.

        :return: The id of this BackupRun.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackupRun.

        The identifier for this backup run. Unique only for a specific Cloud SQL instance.

        :param id: The id of this BackupRun.
        :type id: str
        """

        self._id = id

    @property
    def instance(self):
        """Gets the instance of this BackupRun.

        Name of the database instance.

        :return: The instance of this BackupRun.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this BackupRun.

        Name of the database instance.

        :param instance: The instance of this BackupRun.
        :type instance: str
        """

        self._instance = instance

    @property
    def kind(self):
        """Gets the kind of this BackupRun.

        This is always `sql#backupRun`.

        :return: The kind of this BackupRun.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BackupRun.

        This is always `sql#backupRun`.

        :param kind: The kind of this BackupRun.
        :type kind: str
        """

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this BackupRun.

        Location of the backups.

        :return: The location of this BackupRun.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BackupRun.

        Location of the backups.

        :param location: The location of this BackupRun.
        :type location: str
        """

        self._location = location

    @property
    def self_link(self):
        """Gets the self_link of this BackupRun.

        The URI of this resource.

        :return: The self_link of this BackupRun.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this BackupRun.

        The URI of this resource.

        :param self_link: The self_link of this BackupRun.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def start_time(self):
        """Gets the start_time of this BackupRun.

        The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The start_time of this BackupRun.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackupRun.

        The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param start_time: The start_time of this BackupRun.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this BackupRun.

        The status of this run.

        :return: The status of this BackupRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupRun.

        The status of this run.

        :param status: The status of this BackupRun.
        :type status: str
        """
        allowed_values = ["SQL_BACKUP_RUN_STATUS_UNSPECIFIED", "ENQUEUED", "OVERDUE", "RUNNING", "FAILED", "SUCCESSFUL", "SKIPPED", "DELETION_PENDING", "DELETION_FAILED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this BackupRun.

        Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.

        :return: The time_zone of this BackupRun.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this BackupRun.

        Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.

        :param time_zone: The time_zone of this BackupRun.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def type(self):
        """Gets the type of this BackupRun.

        The type of this run; can be either \"AUTOMATED\" or \"ON_DEMAND\" or \"FINAL\". This field defaults to \"ON_DEMAND\" and is ignored, when specified for insert requests.

        :return: The type of this BackupRun.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BackupRun.

        The type of this run; can be either \"AUTOMATED\" or \"ON_DEMAND\" or \"FINAL\". This field defaults to \"ON_DEMAND\" and is ignored, when specified for insert requests.

        :param type: The type of this BackupRun.
        :type type: str
        """
        allowed_values = ["SQL_BACKUP_RUN_TYPE_UNSPECIFIED", "AUTOMATED", "ON_DEMAND"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def window_start_time(self):
        """Gets the window_start_time of this BackupRun.

        The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The window_start_time of this BackupRun.
        :rtype: str
        """
        return self._window_start_time

    @window_start_time.setter
    def window_start_time(self, window_start_time):
        """Sets the window_start_time of this BackupRun.

        The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param window_start_time: The window_start_time of this BackupRun.
        :type window_start_time: str
        """

        self._window_start_time = window_start_time
