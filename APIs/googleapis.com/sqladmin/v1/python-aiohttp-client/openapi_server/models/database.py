# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_server_database_details import SqlServerDatabaseDetails
from openapi_server import util


class Database(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charset: str=None, collation: str=None, etag: str=None, instance: str=None, kind: str=None, name: str=None, project: str=None, self_link: str=None, sqlserver_database_details: SqlServerDatabaseDetails=None):
        """Database - a model defined in OpenAPI

        :param charset: The charset of this Database.
        :param collation: The collation of this Database.
        :param etag: The etag of this Database.
        :param instance: The instance of this Database.
        :param kind: The kind of this Database.
        :param name: The name of this Database.
        :param project: The project of this Database.
        :param self_link: The self_link of this Database.
        :param sqlserver_database_details: The sqlserver_database_details of this Database.
        """
        self.openapi_types = {
            'charset': str,
            'collation': str,
            'etag': str,
            'instance': str,
            'kind': str,
            'name': str,
            'project': str,
            'self_link': str,
            'sqlserver_database_details': SqlServerDatabaseDetails
        }

        self.attribute_map = {
            'charset': 'charset',
            'collation': 'collation',
            'etag': 'etag',
            'instance': 'instance',
            'kind': 'kind',
            'name': 'name',
            'project': 'project',
            'self_link': 'selfLink',
            'sqlserver_database_details': 'sqlserverDatabaseDetails'
        }

        self._charset = charset
        self._collation = collation
        self._etag = etag
        self._instance = instance
        self._kind = kind
        self._name = name
        self._project = project
        self._self_link = self_link
        self._sqlserver_database_details = sqlserver_database_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Database':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Database of this Database.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charset(self):
        """Gets the charset of this Database.

        The Cloud SQL charset value.

        :return: The charset of this Database.
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this Database.

        The Cloud SQL charset value.

        :param charset: The charset of this Database.
        :type charset: str
        """

        self._charset = charset

    @property
    def collation(self):
        """Gets the collation of this Database.

        The Cloud SQL collation value.

        :return: The collation of this Database.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this Database.

        The Cloud SQL collation value.

        :param collation: The collation of this Database.
        :type collation: str
        """

        self._collation = collation

    @property
    def etag(self):
        """Gets the etag of this Database.

        This field is deprecated and will be removed from a future version of the API.

        :return: The etag of this Database.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Database.

        This field is deprecated and will be removed from a future version of the API.

        :param etag: The etag of this Database.
        :type etag: str
        """

        self._etag = etag

    @property
    def instance(self):
        """Gets the instance of this Database.

        The name of the Cloud SQL instance. This does not include the project ID.

        :return: The instance of this Database.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Database.

        The name of the Cloud SQL instance. This does not include the project ID.

        :param instance: The instance of this Database.
        :type instance: str
        """

        self._instance = instance

    @property
    def kind(self):
        """Gets the kind of this Database.

        This is always `sql#database`.

        :return: The kind of this Database.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Database.

        This is always `sql#database`.

        :param kind: The kind of this Database.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Database.

        The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.

        :return: The name of this Database.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Database.

        The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.

        :param name: The name of this Database.
        :type name: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this Database.

        The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.

        :return: The project of this Database.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Database.

        The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.

        :param project: The project of this Database.
        :type project: str
        """

        self._project = project

    @property
    def self_link(self):
        """Gets the self_link of this Database.

        The URI of this resource.

        :return: The self_link of this Database.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Database.

        The URI of this resource.

        :param self_link: The self_link of this Database.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def sqlserver_database_details(self):
        """Gets the sqlserver_database_details of this Database.


        :return: The sqlserver_database_details of this Database.
        :rtype: SqlServerDatabaseDetails
        """
        return self._sqlserver_database_details

    @sqlserver_database_details.setter
    def sqlserver_database_details(self, sqlserver_database_details):
        """Sets the sqlserver_database_details of this Database.


        :param sqlserver_database_details: The sqlserver_database_details of this Database.
        :type sqlserver_database_details: SqlServerDatabaseDetails
        """

        self._sqlserver_database_details = sqlserver_database_details
