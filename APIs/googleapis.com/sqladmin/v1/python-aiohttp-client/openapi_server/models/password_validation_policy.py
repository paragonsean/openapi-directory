# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordValidationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complexity: str=None, disallow_compromised_credentials: bool=None, disallow_username_substring: bool=None, enable_password_policy: bool=None, min_length: int=None, password_change_interval: str=None, reuse_interval: int=None):
        """PasswordValidationPolicy - a model defined in OpenAPI

        :param complexity: The complexity of this PasswordValidationPolicy.
        :param disallow_compromised_credentials: The disallow_compromised_credentials of this PasswordValidationPolicy.
        :param disallow_username_substring: The disallow_username_substring of this PasswordValidationPolicy.
        :param enable_password_policy: The enable_password_policy of this PasswordValidationPolicy.
        :param min_length: The min_length of this PasswordValidationPolicy.
        :param password_change_interval: The password_change_interval of this PasswordValidationPolicy.
        :param reuse_interval: The reuse_interval of this PasswordValidationPolicy.
        """
        self.openapi_types = {
            'complexity': str,
            'disallow_compromised_credentials': bool,
            'disallow_username_substring': bool,
            'enable_password_policy': bool,
            'min_length': int,
            'password_change_interval': str,
            'reuse_interval': int
        }

        self.attribute_map = {
            'complexity': 'complexity',
            'disallow_compromised_credentials': 'disallowCompromisedCredentials',
            'disallow_username_substring': 'disallowUsernameSubstring',
            'enable_password_policy': 'enablePasswordPolicy',
            'min_length': 'minLength',
            'password_change_interval': 'passwordChangeInterval',
            'reuse_interval': 'reuseInterval'
        }

        self._complexity = complexity
        self._disallow_compromised_credentials = disallow_compromised_credentials
        self._disallow_username_substring = disallow_username_substring
        self._enable_password_policy = enable_password_policy
        self._min_length = min_length
        self._password_change_interval = password_change_interval
        self._reuse_interval = reuse_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordValidationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordValidationPolicy of this PasswordValidationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complexity(self):
        """Gets the complexity of this PasswordValidationPolicy.

        The complexity of the password.

        :return: The complexity of this PasswordValidationPolicy.
        :rtype: str
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this PasswordValidationPolicy.

        The complexity of the password.

        :param complexity: The complexity of this PasswordValidationPolicy.
        :type complexity: str
        """
        allowed_values = ["COMPLEXITY_UNSPECIFIED", "COMPLEXITY_DEFAULT"]  # noqa: E501
        if complexity not in allowed_values:
            raise ValueError(
                "Invalid value for `complexity` ({0}), must be one of {1}"
                .format(complexity, allowed_values)
            )

        self._complexity = complexity

    @property
    def disallow_compromised_credentials(self):
        """Gets the disallow_compromised_credentials of this PasswordValidationPolicy.

        This field is deprecated and will be removed in a future version of the API.

        :return: The disallow_compromised_credentials of this PasswordValidationPolicy.
        :rtype: bool
        """
        return self._disallow_compromised_credentials

    @disallow_compromised_credentials.setter
    def disallow_compromised_credentials(self, disallow_compromised_credentials):
        """Sets the disallow_compromised_credentials of this PasswordValidationPolicy.

        This field is deprecated and will be removed in a future version of the API.

        :param disallow_compromised_credentials: The disallow_compromised_credentials of this PasswordValidationPolicy.
        :type disallow_compromised_credentials: bool
        """

        self._disallow_compromised_credentials = disallow_compromised_credentials

    @property
    def disallow_username_substring(self):
        """Gets the disallow_username_substring of this PasswordValidationPolicy.

        Disallow username as a part of the password.

        :return: The disallow_username_substring of this PasswordValidationPolicy.
        :rtype: bool
        """
        return self._disallow_username_substring

    @disallow_username_substring.setter
    def disallow_username_substring(self, disallow_username_substring):
        """Sets the disallow_username_substring of this PasswordValidationPolicy.

        Disallow username as a part of the password.

        :param disallow_username_substring: The disallow_username_substring of this PasswordValidationPolicy.
        :type disallow_username_substring: bool
        """

        self._disallow_username_substring = disallow_username_substring

    @property
    def enable_password_policy(self):
        """Gets the enable_password_policy of this PasswordValidationPolicy.

        Whether the password policy is enabled or not.

        :return: The enable_password_policy of this PasswordValidationPolicy.
        :rtype: bool
        """
        return self._enable_password_policy

    @enable_password_policy.setter
    def enable_password_policy(self, enable_password_policy):
        """Sets the enable_password_policy of this PasswordValidationPolicy.

        Whether the password policy is enabled or not.

        :param enable_password_policy: The enable_password_policy of this PasswordValidationPolicy.
        :type enable_password_policy: bool
        """

        self._enable_password_policy = enable_password_policy

    @property
    def min_length(self):
        """Gets the min_length of this PasswordValidationPolicy.

        Minimum number of characters allowed.

        :return: The min_length of this PasswordValidationPolicy.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this PasswordValidationPolicy.

        Minimum number of characters allowed.

        :param min_length: The min_length of this PasswordValidationPolicy.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def password_change_interval(self):
        """Gets the password_change_interval of this PasswordValidationPolicy.

        Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.

        :return: The password_change_interval of this PasswordValidationPolicy.
        :rtype: str
        """
        return self._password_change_interval

    @password_change_interval.setter
    def password_change_interval(self, password_change_interval):
        """Sets the password_change_interval of this PasswordValidationPolicy.

        Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.

        :param password_change_interval: The password_change_interval of this PasswordValidationPolicy.
        :type password_change_interval: str
        """

        self._password_change_interval = password_change_interval

    @property
    def reuse_interval(self):
        """Gets the reuse_interval of this PasswordValidationPolicy.

        Number of previous passwords that cannot be reused.

        :return: The reuse_interval of this PasswordValidationPolicy.
        :rtype: int
        """
        return self._reuse_interval

    @reuse_interval.setter
    def reuse_interval(self, reuse_interval):
        """Sets the reuse_interval of this PasswordValidationPolicy.

        Number of previous passwords that cannot be reused.

        :param reuse_interval: The reuse_interval of this PasswordValidationPolicy.
        :type reuse_interval: int
        """

        self._reuse_interval = reuse_interval
