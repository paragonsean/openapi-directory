# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Flag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_int_values: List[str]=None, allowed_string_values: List[str]=None, applies_to: List[str]=None, in_beta: bool=None, kind: str=None, max_value: str=None, min_value: str=None, name: str=None, requires_restart: bool=None, type: str=None):
        """Flag - a model defined in OpenAPI

        :param allowed_int_values: The allowed_int_values of this Flag.
        :param allowed_string_values: The allowed_string_values of this Flag.
        :param applies_to: The applies_to of this Flag.
        :param in_beta: The in_beta of this Flag.
        :param kind: The kind of this Flag.
        :param max_value: The max_value of this Flag.
        :param min_value: The min_value of this Flag.
        :param name: The name of this Flag.
        :param requires_restart: The requires_restart of this Flag.
        :param type: The type of this Flag.
        """
        self.openapi_types = {
            'allowed_int_values': List[str],
            'allowed_string_values': List[str],
            'applies_to': List[str],
            'in_beta': bool,
            'kind': str,
            'max_value': str,
            'min_value': str,
            'name': str,
            'requires_restart': bool,
            'type': str
        }

        self.attribute_map = {
            'allowed_int_values': 'allowedIntValues',
            'allowed_string_values': 'allowedStringValues',
            'applies_to': 'appliesTo',
            'in_beta': 'inBeta',
            'kind': 'kind',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'name': 'name',
            'requires_restart': 'requiresRestart',
            'type': 'type'
        }

        self._allowed_int_values = allowed_int_values
        self._allowed_string_values = allowed_string_values
        self._applies_to = applies_to
        self._in_beta = in_beta
        self._kind = kind
        self._max_value = max_value
        self._min_value = min_value
        self._name = name
        self._requires_restart = requires_restart
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Flag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Flag of this Flag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_int_values(self):
        """Gets the allowed_int_values of this Flag.

        Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.

        :return: The allowed_int_values of this Flag.
        :rtype: List[str]
        """
        return self._allowed_int_values

    @allowed_int_values.setter
    def allowed_int_values(self, allowed_int_values):
        """Sets the allowed_int_values of this Flag.

        Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.

        :param allowed_int_values: The allowed_int_values of this Flag.
        :type allowed_int_values: List[str]
        """

        self._allowed_int_values = allowed_int_values

    @property
    def allowed_string_values(self):
        """Gets the allowed_string_values of this Flag.

        For `STRING` flags, a list of strings that the value can be set to.

        :return: The allowed_string_values of this Flag.
        :rtype: List[str]
        """
        return self._allowed_string_values

    @allowed_string_values.setter
    def allowed_string_values(self, allowed_string_values):
        """Sets the allowed_string_values of this Flag.

        For `STRING` flags, a list of strings that the value can be set to.

        :param allowed_string_values: The allowed_string_values of this Flag.
        :type allowed_string_values: List[str]
        """

        self._allowed_string_values = allowed_string_values

    @property
    def applies_to(self):
        """Gets the applies_to of this Flag.

        The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).

        :return: The applies_to of this Flag.
        :rtype: List[str]
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this Flag.

        The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).

        :param applies_to: The applies_to of this Flag.
        :type applies_to: List[str]
        """
        allowed_values = ["SQL_DATABASE_VERSION_UNSPECIFIED", "MYSQL_5_1", "MYSQL_5_5", "MYSQL_5_6", "MYSQL_5_7", "SQLSERVER_2017_STANDARD", "SQLSERVER_2017_ENTERPRISE", "SQLSERVER_2017_EXPRESS", "SQLSERVER_2017_WEB", "POSTGRES_9_6", "POSTGRES_10", "POSTGRES_11", "POSTGRES_12", "POSTGRES_13", "POSTGRES_14", "POSTGRES_15", "MYSQL_8_0", "MYSQL_8_0_18", "MYSQL_8_0_26", "MYSQL_8_0_27", "MYSQL_8_0_28", "MYSQL_8_0_29", "MYSQL_8_0_30", "MYSQL_8_0_31", "MYSQL_8_0_32", "MYSQL_8_0_33", "MYSQL_8_0_34", "MYSQL_8_0_35", "MYSQL_8_0_36", "SQLSERVER_2019_STANDARD", "SQLSERVER_2019_ENTERPRISE", "SQLSERVER_2019_EXPRESS", "SQLSERVER_2019_WEB", "SQLSERVER_2022_STANDARD", "SQLSERVER_2022_ENTERPRISE", "SQLSERVER_2022_EXPRESS", "SQLSERVER_2022_WEB"]  # noqa: E501
        if not set(applies_to).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `applies_to` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(applies_to) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._applies_to = applies_to

    @property
    def in_beta(self):
        """Gets the in_beta of this Flag.

        Whether or not the flag is considered in beta.

        :return: The in_beta of this Flag.
        :rtype: bool
        """
        return self._in_beta

    @in_beta.setter
    def in_beta(self, in_beta):
        """Sets the in_beta of this Flag.

        Whether or not the flag is considered in beta.

        :param in_beta: The in_beta of this Flag.
        :type in_beta: bool
        """

        self._in_beta = in_beta

    @property
    def kind(self):
        """Gets the kind of this Flag.

        This is always `sql#flag`.

        :return: The kind of this Flag.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Flag.

        This is always `sql#flag`.

        :param kind: The kind of this Flag.
        :type kind: str
        """

        self._kind = kind

    @property
    def max_value(self):
        """Gets the max_value of this Flag.

        For `INTEGER` flags, the maximum allowed value.

        :return: The max_value of this Flag.
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this Flag.

        For `INTEGER` flags, the maximum allowed value.

        :param max_value: The max_value of this Flag.
        :type max_value: str
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this Flag.

        For `INTEGER` flags, the minimum allowed value.

        :return: The min_value of this Flag.
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this Flag.

        For `INTEGER` flags, the minimum allowed value.

        :param min_value: The min_value of this Flag.
        :type min_value: str
        """

        self._min_value = min_value

    @property
    def name(self):
        """Gets the name of this Flag.

        This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`

        :return: The name of this Flag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Flag.

        This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`

        :param name: The name of this Flag.
        :type name: str
        """

        self._name = name

    @property
    def requires_restart(self):
        """Gets the requires_restart of this Flag.

        Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.

        :return: The requires_restart of this Flag.
        :rtype: bool
        """
        return self._requires_restart

    @requires_restart.setter
    def requires_restart(self, requires_restart):
        """Sets the requires_restart of this Flag.

        Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.

        :param requires_restart: The requires_restart of this Flag.
        :type requires_restart: bool
        """

        self._requires_restart = requires_restart

    @property
    def type(self):
        """Gets the type of this Flag.

        The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags that do not take a value, such as `skip_grant_tables`.

        :return: The type of this Flag.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Flag.

        The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags that do not take a value, such as `skip_grant_tables`.

        :param type: The type of this Flag.
        :type type: str
        """
        allowed_values = ["SQL_FLAG_TYPE_UNSPECIFIED", "BOOLEAN", "STRING", "INTEGER", "NONE", "MYSQL_TIMEZONE_OFFSET", "FLOAT", "REPEATED_STRING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
