# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlOutOfDiskReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sql_min_recommended_increase_size_gb: int=None, sql_out_of_disk_state: str=None):
        """SqlOutOfDiskReport - a model defined in OpenAPI

        :param sql_min_recommended_increase_size_gb: The sql_min_recommended_increase_size_gb of this SqlOutOfDiskReport.
        :param sql_out_of_disk_state: The sql_out_of_disk_state of this SqlOutOfDiskReport.
        """
        self.openapi_types = {
            'sql_min_recommended_increase_size_gb': int,
            'sql_out_of_disk_state': str
        }

        self.attribute_map = {
            'sql_min_recommended_increase_size_gb': 'sqlMinRecommendedIncreaseSizeGb',
            'sql_out_of_disk_state': 'sqlOutOfDiskState'
        }

        self._sql_min_recommended_increase_size_gb = sql_min_recommended_increase_size_gb
        self._sql_out_of_disk_state = sql_out_of_disk_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlOutOfDiskReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlOutOfDiskReport of this SqlOutOfDiskReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sql_min_recommended_increase_size_gb(self):
        """Gets the sql_min_recommended_increase_size_gb of this SqlOutOfDiskReport.

        The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:

        :return: The sql_min_recommended_increase_size_gb of this SqlOutOfDiskReport.
        :rtype: int
        """
        return self._sql_min_recommended_increase_size_gb

    @sql_min_recommended_increase_size_gb.setter
    def sql_min_recommended_increase_size_gb(self, sql_min_recommended_increase_size_gb):
        """Sets the sql_min_recommended_increase_size_gb of this SqlOutOfDiskReport.

        The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:

        :param sql_min_recommended_increase_size_gb: The sql_min_recommended_increase_size_gb of this SqlOutOfDiskReport.
        :type sql_min_recommended_increase_size_gb: int
        """

        self._sql_min_recommended_increase_size_gb = sql_min_recommended_increase_size_gb

    @property
    def sql_out_of_disk_state(self):
        """Gets the sql_out_of_disk_state of this SqlOutOfDiskReport.

        This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job

        :return: The sql_out_of_disk_state of this SqlOutOfDiskReport.
        :rtype: str
        """
        return self._sql_out_of_disk_state

    @sql_out_of_disk_state.setter
    def sql_out_of_disk_state(self, sql_out_of_disk_state):
        """Sets the sql_out_of_disk_state of this SqlOutOfDiskReport.

        This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job

        :param sql_out_of_disk_state: The sql_out_of_disk_state of this SqlOutOfDiskReport.
        :type sql_out_of_disk_state: str
        """
        allowed_values = ["SQL_OUT_OF_DISK_STATE_UNSPECIFIED", "NORMAL", "SOFT_SHUTDOWN"]  # noqa: E501
        if sql_out_of_disk_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sql_out_of_disk_state` ({0}), must be one of {1}"
                .format(sql_out_of_disk_state, allowed_values)
            )

        self._sql_out_of_disk_state = sql_out_of_disk_state
