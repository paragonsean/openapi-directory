# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.demote_master_configuration import DemoteMasterConfiguration
from openapi_server import util


class DemoteMasterContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, master_instance_name: str=None, replica_configuration: DemoteMasterConfiguration=None, skip_replication_setup: bool=None, verify_gtid_consistency: bool=None):
        """DemoteMasterContext - a model defined in OpenAPI

        :param kind: The kind of this DemoteMasterContext.
        :param master_instance_name: The master_instance_name of this DemoteMasterContext.
        :param replica_configuration: The replica_configuration of this DemoteMasterContext.
        :param skip_replication_setup: The skip_replication_setup of this DemoteMasterContext.
        :param verify_gtid_consistency: The verify_gtid_consistency of this DemoteMasterContext.
        """
        self.openapi_types = {
            'kind': str,
            'master_instance_name': str,
            'replica_configuration': DemoteMasterConfiguration,
            'skip_replication_setup': bool,
            'verify_gtid_consistency': bool
        }

        self.attribute_map = {
            'kind': 'kind',
            'master_instance_name': 'masterInstanceName',
            'replica_configuration': 'replicaConfiguration',
            'skip_replication_setup': 'skipReplicationSetup',
            'verify_gtid_consistency': 'verifyGtidConsistency'
        }

        self._kind = kind
        self._master_instance_name = master_instance_name
        self._replica_configuration = replica_configuration
        self._skip_replication_setup = skip_replication_setup
        self._verify_gtid_consistency = verify_gtid_consistency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DemoteMasterContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DemoteMasterContext of this DemoteMasterContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this DemoteMasterContext.

        This is always `sql#demoteMasterContext`.

        :return: The kind of this DemoteMasterContext.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DemoteMasterContext.

        This is always `sql#demoteMasterContext`.

        :param kind: The kind of this DemoteMasterContext.
        :type kind: str
        """

        self._kind = kind

    @property
    def master_instance_name(self):
        """Gets the master_instance_name of this DemoteMasterContext.

        The name of the instance which will act as on-premises primary instance in the replication setup.

        :return: The master_instance_name of this DemoteMasterContext.
        :rtype: str
        """
        return self._master_instance_name

    @master_instance_name.setter
    def master_instance_name(self, master_instance_name):
        """Sets the master_instance_name of this DemoteMasterContext.

        The name of the instance which will act as on-premises primary instance in the replication setup.

        :param master_instance_name: The master_instance_name of this DemoteMasterContext.
        :type master_instance_name: str
        """

        self._master_instance_name = master_instance_name

    @property
    def replica_configuration(self):
        """Gets the replica_configuration of this DemoteMasterContext.


        :return: The replica_configuration of this DemoteMasterContext.
        :rtype: DemoteMasterConfiguration
        """
        return self._replica_configuration

    @replica_configuration.setter
    def replica_configuration(self, replica_configuration):
        """Sets the replica_configuration of this DemoteMasterContext.


        :param replica_configuration: The replica_configuration of this DemoteMasterContext.
        :type replica_configuration: DemoteMasterConfiguration
        """

        self._replica_configuration = replica_configuration

    @property
    def skip_replication_setup(self):
        """Gets the skip_replication_setup of this DemoteMasterContext.

        Flag to skip replication setup on the instance.

        :return: The skip_replication_setup of this DemoteMasterContext.
        :rtype: bool
        """
        return self._skip_replication_setup

    @skip_replication_setup.setter
    def skip_replication_setup(self, skip_replication_setup):
        """Sets the skip_replication_setup of this DemoteMasterContext.

        Flag to skip replication setup on the instance.

        :param skip_replication_setup: The skip_replication_setup of this DemoteMasterContext.
        :type skip_replication_setup: bool
        """

        self._skip_replication_setup = skip_replication_setup

    @property
    def verify_gtid_consistency(self):
        """Gets the verify_gtid_consistency of this DemoteMasterContext.

        Verify the GTID consistency for demote operation. Default value: `True`. Setting this flag to `false` enables you to bypass the GTID consistency check between on-premises primary instance and Cloud SQL instance during the demotion operation but also exposes you to the risk of future replication failures. Change the value only if you know the reason for the GTID divergence and are confident that doing so will not cause any replication issues.

        :return: The verify_gtid_consistency of this DemoteMasterContext.
        :rtype: bool
        """
        return self._verify_gtid_consistency

    @verify_gtid_consistency.setter
    def verify_gtid_consistency(self, verify_gtid_consistency):
        """Sets the verify_gtid_consistency of this DemoteMasterContext.

        Verify the GTID consistency for demote operation. Default value: `True`. Setting this flag to `false` enables you to bypass the GTID consistency check between on-premises primary instance and Cloud SQL instance during the demotion operation but also exposes you to the risk of future replication failures. Change the value only if you know the reason for the GTID divergence and are confident that doing so will not cause any replication issues.

        :param verify_gtid_consistency: The verify_gtid_consistency of this DemoteMasterContext.
        :type verify_gtid_consistency: bool
        """

        self._verify_gtid_consistency = verify_gtid_consistency
