# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DenyMaintenancePeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: str=None, start_date: str=None, time: str=None):
        """DenyMaintenancePeriod - a model defined in OpenAPI

        :param end_date: The end_date of this DenyMaintenancePeriod.
        :param start_date: The start_date of this DenyMaintenancePeriod.
        :param time: The time of this DenyMaintenancePeriod.
        """
        self.openapi_types = {
            'end_date': str,
            'start_date': str,
            'time': str
        }

        self.attribute_map = {
            'end_date': 'endDate',
            'start_date': 'startDate',
            'time': 'time'
        }

        self._end_date = end_date
        self._start_date = start_date
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DenyMaintenancePeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DenyMaintenancePeriod of this DenyMaintenancePeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this DenyMaintenancePeriod.

        \"deny maintenance period\" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01

        :return: The end_date of this DenyMaintenancePeriod.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DenyMaintenancePeriod.

        \"deny maintenance period\" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01

        :param end_date: The end_date of this DenyMaintenancePeriod.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this DenyMaintenancePeriod.

        \"deny maintenance period\" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01

        :return: The start_date of this DenyMaintenancePeriod.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DenyMaintenancePeriod.

        \"deny maintenance period\" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01

        :param start_date: The start_date of this DenyMaintenancePeriod.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def time(self):
        """Gets the time of this DenyMaintenancePeriod.

        Time in UTC when the \"deny maintenance period\" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00

        :return: The time of this DenyMaintenancePeriod.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DenyMaintenancePeriod.

        Time in UTC when the \"deny maintenance period\" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00

        :param time: The time of this DenyMaintenancePeriod.
        :type time: str
        """

        self._time = time
