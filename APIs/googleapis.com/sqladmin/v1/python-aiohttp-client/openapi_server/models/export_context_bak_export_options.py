# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportContextBakExportOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bak_type: str=None, copy_only: bool=None, differential_base: bool=None, stripe_count: int=None, striped: bool=None):
        """ExportContextBakExportOptions - a model defined in OpenAPI

        :param bak_type: The bak_type of this ExportContextBakExportOptions.
        :param copy_only: The copy_only of this ExportContextBakExportOptions.
        :param differential_base: The differential_base of this ExportContextBakExportOptions.
        :param stripe_count: The stripe_count of this ExportContextBakExportOptions.
        :param striped: The striped of this ExportContextBakExportOptions.
        """
        self.openapi_types = {
            'bak_type': str,
            'copy_only': bool,
            'differential_base': bool,
            'stripe_count': int,
            'striped': bool
        }

        self.attribute_map = {
            'bak_type': 'bakType',
            'copy_only': 'copyOnly',
            'differential_base': 'differentialBase',
            'stripe_count': 'stripeCount',
            'striped': 'striped'
        }

        self._bak_type = bak_type
        self._copy_only = copy_only
        self._differential_base = differential_base
        self._stripe_count = stripe_count
        self._striped = striped

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportContextBakExportOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportContext_bakExportOptions of this ExportContextBakExportOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bak_type(self):
        """Gets the bak_type of this ExportContextBakExportOptions.

        Type of this bak file will be export, FULL or DIFF, SQL Server only

        :return: The bak_type of this ExportContextBakExportOptions.
        :rtype: str
        """
        return self._bak_type

    @bak_type.setter
    def bak_type(self, bak_type):
        """Sets the bak_type of this ExportContextBakExportOptions.

        Type of this bak file will be export, FULL or DIFF, SQL Server only

        :param bak_type: The bak_type of this ExportContextBakExportOptions.
        :type bak_type: str
        """
        allowed_values = ["BAK_TYPE_UNSPECIFIED", "FULL", "DIFF", "TLOG"]  # noqa: E501
        if bak_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bak_type` ({0}), must be one of {1}"
                .format(bak_type, allowed_values)
            )

        self._bak_type = bak_type

    @property
    def copy_only(self):
        """Gets the copy_only of this ExportContextBakExportOptions.

        Deprecated: copy_only is deprecated. Use differential_base instead

        :return: The copy_only of this ExportContextBakExportOptions.
        :rtype: bool
        """
        return self._copy_only

    @copy_only.setter
    def copy_only(self, copy_only):
        """Sets the copy_only of this ExportContextBakExportOptions.

        Deprecated: copy_only is deprecated. Use differential_base instead

        :param copy_only: The copy_only of this ExportContextBakExportOptions.
        :type copy_only: bool
        """

        self._copy_only = copy_only

    @property
    def differential_base(self):
        """Gets the differential_base of this ExportContextBakExportOptions.

        Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base

        :return: The differential_base of this ExportContextBakExportOptions.
        :rtype: bool
        """
        return self._differential_base

    @differential_base.setter
    def differential_base(self, differential_base):
        """Sets the differential_base of this ExportContextBakExportOptions.

        Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base

        :param differential_base: The differential_base of this ExportContextBakExportOptions.
        :type differential_base: bool
        """

        self._differential_base = differential_base

    @property
    def stripe_count(self):
        """Gets the stripe_count of this ExportContextBakExportOptions.

        Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.

        :return: The stripe_count of this ExportContextBakExportOptions.
        :rtype: int
        """
        return self._stripe_count

    @stripe_count.setter
    def stripe_count(self, stripe_count):
        """Sets the stripe_count of this ExportContextBakExportOptions.

        Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.

        :param stripe_count: The stripe_count of this ExportContextBakExportOptions.
        :type stripe_count: int
        """

        self._stripe_count = stripe_count

    @property
    def striped(self):
        """Gets the striped of this ExportContextBakExportOptions.

        Whether or not the export should be striped.

        :return: The striped of this ExportContextBakExportOptions.
        :rtype: bool
        """
        return self._striped

    @striped.setter
    def striped(self, striped):
        """Sets the striped of this ExportContextBakExportOptions.

        Whether or not the export should be striped.

        :param striped: The striped of this ExportContextBakExportOptions.
        :type striped: bool
        """

        self._striped = striped
