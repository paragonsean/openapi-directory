# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_server_user_details import SqlServerUserDetails
from openapi_server.models.user_password_validation_policy import UserPasswordValidationPolicy
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dual_password_type: str=None, etag: str=None, host: str=None, instance: str=None, kind: str=None, name: str=None, password: str=None, password_policy: UserPasswordValidationPolicy=None, project: str=None, sqlserver_user_details: SqlServerUserDetails=None, type: str=None):
        """User - a model defined in OpenAPI

        :param dual_password_type: The dual_password_type of this User.
        :param etag: The etag of this User.
        :param host: The host of this User.
        :param instance: The instance of this User.
        :param kind: The kind of this User.
        :param name: The name of this User.
        :param password: The password of this User.
        :param password_policy: The password_policy of this User.
        :param project: The project of this User.
        :param sqlserver_user_details: The sqlserver_user_details of this User.
        :param type: The type of this User.
        """
        self.openapi_types = {
            'dual_password_type': str,
            'etag': str,
            'host': str,
            'instance': str,
            'kind': str,
            'name': str,
            'password': str,
            'password_policy': UserPasswordValidationPolicy,
            'project': str,
            'sqlserver_user_details': SqlServerUserDetails,
            'type': str
        }

        self.attribute_map = {
            'dual_password_type': 'dualPasswordType',
            'etag': 'etag',
            'host': 'host',
            'instance': 'instance',
            'kind': 'kind',
            'name': 'name',
            'password': 'password',
            'password_policy': 'passwordPolicy',
            'project': 'project',
            'sqlserver_user_details': 'sqlserverUserDetails',
            'type': 'type'
        }

        self._dual_password_type = dual_password_type
        self._etag = etag
        self._host = host
        self._instance = instance
        self._kind = kind
        self._name = name
        self._password = password
        self._password_policy = password_policy
        self._project = project
        self._sqlserver_user_details = sqlserver_user_details
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dual_password_type(self):
        """Gets the dual_password_type of this User.

        Dual password status for the user.

        :return: The dual_password_type of this User.
        :rtype: str
        """
        return self._dual_password_type

    @dual_password_type.setter
    def dual_password_type(self, dual_password_type):
        """Sets the dual_password_type of this User.

        Dual password status for the user.

        :param dual_password_type: The dual_password_type of this User.
        :type dual_password_type: str
        """
        allowed_values = ["DUAL_PASSWORD_TYPE_UNSPECIFIED", "NO_MODIFY_DUAL_PASSWORD", "NO_DUAL_PASSWORD", "DUAL_PASSWORD"]  # noqa: E501
        if dual_password_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dual_password_type` ({0}), must be one of {1}"
                .format(dual_password_type, allowed_values)
            )

        self._dual_password_type = dual_password_type

    @property
    def etag(self):
        """Gets the etag of this User.

        This field is deprecated and will be removed from a future version of the API.

        :return: The etag of this User.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this User.

        This field is deprecated and will be removed from a future version of the API.

        :param etag: The etag of this User.
        :type etag: str
        """

        self._etag = etag

    @property
    def host(self):
        """Gets the host of this User.

        Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.

        :return: The host of this User.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this User.

        Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.

        :param host: The host of this User.
        :type host: str
        """

        self._host = host

    @property
    def instance(self):
        """Gets the instance of this User.

        The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.

        :return: The instance of this User.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this User.

        The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.

        :param instance: The instance of this User.
        :type instance: str
        """

        self._instance = instance

    @property
    def kind(self):
        """Gets the kind of this User.

        This is always `sql#user`.

        :return: The kind of this User.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this User.

        This is always `sql#user`.

        :param kind: The kind of this User.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this User.

        The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this User.

        The password for the user.

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        The password for the user.

        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def password_policy(self):
        """Gets the password_policy of this User.


        :return: The password_policy of this User.
        :rtype: UserPasswordValidationPolicy
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this User.


        :param password_policy: The password_policy of this User.
        :type password_policy: UserPasswordValidationPolicy
        """

        self._password_policy = password_policy

    @property
    def project(self):
        """Gets the project of this User.

        The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.

        :return: The project of this User.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this User.

        The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.

        :param project: The project of this User.
        :type project: str
        """

        self._project = project

    @property
    def sqlserver_user_details(self):
        """Gets the sqlserver_user_details of this User.


        :return: The sqlserver_user_details of this User.
        :rtype: SqlServerUserDetails
        """
        return self._sqlserver_user_details

    @sqlserver_user_details.setter
    def sqlserver_user_details(self, sqlserver_user_details):
        """Sets the sqlserver_user_details of this User.


        :param sqlserver_user_details: The sqlserver_user_details of this User.
        :type sqlserver_user_details: SqlServerUserDetails
        """

        self._sqlserver_user_details = sqlserver_user_details

    @property
    def type(self):
        """Gets the type of this User.

        The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.

        :return: The type of this User.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.

        The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.

        :param type: The type of this User.
        :type type: str
        """
        allowed_values = ["BUILT_IN", "CLOUD_IAM_USER", "CLOUD_IAM_SERVICE_ACCOUNT", "CLOUD_IAM_GROUP", "CLOUD_IAM_GROUP_USER", "CLOUD_IAM_GROUP_SERVICE_ACCOUNT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
