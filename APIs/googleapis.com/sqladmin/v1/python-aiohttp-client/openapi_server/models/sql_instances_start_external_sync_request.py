# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.my_sql_sync_config import MySqlSyncConfig
from openapi_server import util


class SqlInstancesStartExternalSyncRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mysql_sync_config: MySqlSyncConfig=None, skip_verification: bool=None, sync_mode: str=None, sync_parallel_level: str=None):
        """SqlInstancesStartExternalSyncRequest - a model defined in OpenAPI

        :param mysql_sync_config: The mysql_sync_config of this SqlInstancesStartExternalSyncRequest.
        :param skip_verification: The skip_verification of this SqlInstancesStartExternalSyncRequest.
        :param sync_mode: The sync_mode of this SqlInstancesStartExternalSyncRequest.
        :param sync_parallel_level: The sync_parallel_level of this SqlInstancesStartExternalSyncRequest.
        """
        self.openapi_types = {
            'mysql_sync_config': MySqlSyncConfig,
            'skip_verification': bool,
            'sync_mode': str,
            'sync_parallel_level': str
        }

        self.attribute_map = {
            'mysql_sync_config': 'mysqlSyncConfig',
            'skip_verification': 'skipVerification',
            'sync_mode': 'syncMode',
            'sync_parallel_level': 'syncParallelLevel'
        }

        self._mysql_sync_config = mysql_sync_config
        self._skip_verification = skip_verification
        self._sync_mode = sync_mode
        self._sync_parallel_level = sync_parallel_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlInstancesStartExternalSyncRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlInstancesStartExternalSyncRequest of this SqlInstancesStartExternalSyncRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mysql_sync_config(self):
        """Gets the mysql_sync_config of this SqlInstancesStartExternalSyncRequest.


        :return: The mysql_sync_config of this SqlInstancesStartExternalSyncRequest.
        :rtype: MySqlSyncConfig
        """
        return self._mysql_sync_config

    @mysql_sync_config.setter
    def mysql_sync_config(self, mysql_sync_config):
        """Sets the mysql_sync_config of this SqlInstancesStartExternalSyncRequest.


        :param mysql_sync_config: The mysql_sync_config of this SqlInstancesStartExternalSyncRequest.
        :type mysql_sync_config: MySqlSyncConfig
        """

        self._mysql_sync_config = mysql_sync_config

    @property
    def skip_verification(self):
        """Gets the skip_verification of this SqlInstancesStartExternalSyncRequest.

        Whether to skip the verification step (VESS).

        :return: The skip_verification of this SqlInstancesStartExternalSyncRequest.
        :rtype: bool
        """
        return self._skip_verification

    @skip_verification.setter
    def skip_verification(self, skip_verification):
        """Sets the skip_verification of this SqlInstancesStartExternalSyncRequest.

        Whether to skip the verification step (VESS).

        :param skip_verification: The skip_verification of this SqlInstancesStartExternalSyncRequest.
        :type skip_verification: bool
        """

        self._skip_verification = skip_verification

    @property
    def sync_mode(self):
        """Gets the sync_mode of this SqlInstancesStartExternalSyncRequest.

        External sync mode.

        :return: The sync_mode of this SqlInstancesStartExternalSyncRequest.
        :rtype: str
        """
        return self._sync_mode

    @sync_mode.setter
    def sync_mode(self, sync_mode):
        """Sets the sync_mode of this SqlInstancesStartExternalSyncRequest.

        External sync mode.

        :param sync_mode: The sync_mode of this SqlInstancesStartExternalSyncRequest.
        :type sync_mode: str
        """
        allowed_values = ["EXTERNAL_SYNC_MODE_UNSPECIFIED", "ONLINE", "OFFLINE"]  # noqa: E501
        if sync_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_mode` ({0}), must be one of {1}"
                .format(sync_mode, allowed_values)
            )

        self._sync_mode = sync_mode

    @property
    def sync_parallel_level(self):
        """Gets the sync_parallel_level of this SqlInstancesStartExternalSyncRequest.

        Optional. Parallel level for initial data sync. Currently only applicable for MySQL.

        :return: The sync_parallel_level of this SqlInstancesStartExternalSyncRequest.
        :rtype: str
        """
        return self._sync_parallel_level

    @sync_parallel_level.setter
    def sync_parallel_level(self, sync_parallel_level):
        """Sets the sync_parallel_level of this SqlInstancesStartExternalSyncRequest.

        Optional. Parallel level for initial data sync. Currently only applicable for MySQL.

        :param sync_parallel_level: The sync_parallel_level of this SqlInstancesStartExternalSyncRequest.
        :type sync_parallel_level: str
        """
        allowed_values = ["EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED", "MIN", "OPTIMAL", "MAX"]  # noqa: E501
        if sync_parallel_level not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_parallel_level` ({0}), must be one of {1}"
                .format(sync_parallel_level, allowed_values)
            )

        self._sync_parallel_level = sync_parallel_level
