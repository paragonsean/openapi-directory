# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlServerAuditConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, kind: str=None, retention_interval: str=None, upload_interval: str=None):
        """SqlServerAuditConfig - a model defined in OpenAPI

        :param bucket: The bucket of this SqlServerAuditConfig.
        :param kind: The kind of this SqlServerAuditConfig.
        :param retention_interval: The retention_interval of this SqlServerAuditConfig.
        :param upload_interval: The upload_interval of this SqlServerAuditConfig.
        """
        self.openapi_types = {
            'bucket': str,
            'kind': str,
            'retention_interval': str,
            'upload_interval': str
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'kind': 'kind',
            'retention_interval': 'retentionInterval',
            'upload_interval': 'uploadInterval'
        }

        self._bucket = bucket
        self._kind = kind
        self._retention_interval = retention_interval
        self._upload_interval = upload_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlServerAuditConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlServerAuditConfig of this SqlServerAuditConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this SqlServerAuditConfig.

        The name of the destination bucket (e.g., gs://mybucket).

        :return: The bucket of this SqlServerAuditConfig.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this SqlServerAuditConfig.

        The name of the destination bucket (e.g., gs://mybucket).

        :param bucket: The bucket of this SqlServerAuditConfig.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def kind(self):
        """Gets the kind of this SqlServerAuditConfig.

        This is always sql#sqlServerAuditConfig

        :return: The kind of this SqlServerAuditConfig.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SqlServerAuditConfig.

        This is always sql#sqlServerAuditConfig

        :param kind: The kind of this SqlServerAuditConfig.
        :type kind: str
        """

        self._kind = kind

    @property
    def retention_interval(self):
        """Gets the retention_interval of this SqlServerAuditConfig.

        How long to keep generated audit files.

        :return: The retention_interval of this SqlServerAuditConfig.
        :rtype: str
        """
        return self._retention_interval

    @retention_interval.setter
    def retention_interval(self, retention_interval):
        """Sets the retention_interval of this SqlServerAuditConfig.

        How long to keep generated audit files.

        :param retention_interval: The retention_interval of this SqlServerAuditConfig.
        :type retention_interval: str
        """

        self._retention_interval = retention_interval

    @property
    def upload_interval(self):
        """Gets the upload_interval of this SqlServerAuditConfig.

        How often to upload generated audit files.

        :return: The upload_interval of this SqlServerAuditConfig.
        :rtype: str
        """
        return self._upload_interval

    @upload_interval.setter
    def upload_interval(self, upload_interval):
        """Sets the upload_interval of this SqlServerAuditConfig.

        How often to upload generated audit files.

        :param upload_interval: The upload_interval of this SqlServerAuditConfig.
        :type upload_interval: str
        """

        self._upload_interval = upload_interval
