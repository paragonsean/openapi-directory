# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sync_flags import SyncFlags
from openapi_server import util


class MySqlSyncConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, initial_sync_flags: List[SyncFlags]=None):
        """MySqlSyncConfig - a model defined in OpenAPI

        :param initial_sync_flags: The initial_sync_flags of this MySqlSyncConfig.
        """
        self.openapi_types = {
            'initial_sync_flags': List[SyncFlags]
        }

        self.attribute_map = {
            'initial_sync_flags': 'initialSyncFlags'
        }

        self._initial_sync_flags = initial_sync_flags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MySqlSyncConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MySqlSyncConfig of this MySqlSyncConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initial_sync_flags(self):
        """Gets the initial_sync_flags of this MySqlSyncConfig.

        Flags to use for the initial dump.

        :return: The initial_sync_flags of this MySqlSyncConfig.
        :rtype: List[SyncFlags]
        """
        return self._initial_sync_flags

    @initial_sync_flags.setter
    def initial_sync_flags(self, initial_sync_flags):
        """Sets the initial_sync_flags of this MySqlSyncConfig.

        Flags to use for the initial dump.

        :param initial_sync_flags: The initial_sync_flags of this MySqlSyncConfig.
        :type initial_sync_flags: List[SyncFlags]
        """

        self._initial_sync_flags = initial_sync_flags
