# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupReencryptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_limit: int=None, backup_type: str=None):
        """BackupReencryptionConfig - a model defined in OpenAPI

        :param backup_limit: The backup_limit of this BackupReencryptionConfig.
        :param backup_type: The backup_type of this BackupReencryptionConfig.
        """
        self.openapi_types = {
            'backup_limit': int,
            'backup_type': str
        }

        self.attribute_map = {
            'backup_limit': 'backupLimit',
            'backup_type': 'backupType'
        }

        self._backup_limit = backup_limit
        self._backup_type = backup_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupReencryptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupReencryptionConfig of this BackupReencryptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_limit(self):
        """Gets the backup_limit of this BackupReencryptionConfig.

        Backup re-encryption limit

        :return: The backup_limit of this BackupReencryptionConfig.
        :rtype: int
        """
        return self._backup_limit

    @backup_limit.setter
    def backup_limit(self, backup_limit):
        """Sets the backup_limit of this BackupReencryptionConfig.

        Backup re-encryption limit

        :param backup_limit: The backup_limit of this BackupReencryptionConfig.
        :type backup_limit: int
        """

        self._backup_limit = backup_limit

    @property
    def backup_type(self):
        """Gets the backup_type of this BackupReencryptionConfig.

        Type of backups users want to re-encrypt.

        :return: The backup_type of this BackupReencryptionConfig.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this BackupReencryptionConfig.

        Type of backups users want to re-encrypt.

        :param backup_type: The backup_type of this BackupReencryptionConfig.
        :type backup_type: str
        """
        allowed_values = ["BACKUP_TYPE_UNSPECIFIED", "AUTOMATED", "ON_DEMAND"]  # noqa: E501
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type
