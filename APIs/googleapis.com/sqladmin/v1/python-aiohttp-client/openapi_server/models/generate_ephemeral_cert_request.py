# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateEphemeralCertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, public_key: str=None, read_time: str=None, valid_duration: str=None):
        """GenerateEphemeralCertRequest - a model defined in OpenAPI

        :param access_token: The access_token of this GenerateEphemeralCertRequest.
        :param public_key: The public_key of this GenerateEphemeralCertRequest.
        :param read_time: The read_time of this GenerateEphemeralCertRequest.
        :param valid_duration: The valid_duration of this GenerateEphemeralCertRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'public_key': str,
            'read_time': str,
            'valid_duration': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'public_key': 'public_key',
            'read_time': 'readTime',
            'valid_duration': 'validDuration'
        }

        self._access_token = access_token
        self._public_key = public_key
        self._read_time = read_time
        self._valid_duration = valid_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateEphemeralCertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateEphemeralCertRequest of this GenerateEphemeralCertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this GenerateEphemeralCertRequest.

        Optional. Access token to include in the signed certificate.

        :return: The access_token of this GenerateEphemeralCertRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this GenerateEphemeralCertRequest.

        Optional. Access token to include in the signed certificate.

        :param access_token: The access_token of this GenerateEphemeralCertRequest.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def public_key(self):
        """Gets the public_key of this GenerateEphemeralCertRequest.

        PEM encoded public key to include in the signed certificate.

        :return: The public_key of this GenerateEphemeralCertRequest.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this GenerateEphemeralCertRequest.

        PEM encoded public key to include in the signed certificate.

        :param public_key: The public_key of this GenerateEphemeralCertRequest.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def read_time(self):
        """Gets the read_time of this GenerateEphemeralCertRequest.

        Optional. Optional snapshot read timestamp to trade freshness for performance.

        :return: The read_time of this GenerateEphemeralCertRequest.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this GenerateEphemeralCertRequest.

        Optional. Optional snapshot read timestamp to trade freshness for performance.

        :param read_time: The read_time of this GenerateEphemeralCertRequest.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def valid_duration(self):
        """Gets the valid_duration of this GenerateEphemeralCertRequest.

        Optional. If set, it will contain the cert valid duration.

        :return: The valid_duration of this GenerateEphemeralCertRequest.
        :rtype: str
        """
        return self._valid_duration

    @valid_duration.setter
    def valid_duration(self, valid_duration):
        """Sets the valid_duration of this GenerateEphemeralCertRequest.

        Optional. If set, it will contain the cert valid duration.

        :param valid_duration: The valid_duration of this GenerateEphemeralCertRequest.
        :type valid_duration: str
        """

        self._valid_duration = valid_duration
