# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.password_status import PasswordStatus
from openapi_server import util


class UserPasswordValidationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_failed_attempts: int=None, enable_failed_attempts_check: bool=None, enable_password_verification: bool=None, password_expiration_duration: str=None, status: PasswordStatus=None):
        """UserPasswordValidationPolicy - a model defined in OpenAPI

        :param allowed_failed_attempts: The allowed_failed_attempts of this UserPasswordValidationPolicy.
        :param enable_failed_attempts_check: The enable_failed_attempts_check of this UserPasswordValidationPolicy.
        :param enable_password_verification: The enable_password_verification of this UserPasswordValidationPolicy.
        :param password_expiration_duration: The password_expiration_duration of this UserPasswordValidationPolicy.
        :param status: The status of this UserPasswordValidationPolicy.
        """
        self.openapi_types = {
            'allowed_failed_attempts': int,
            'enable_failed_attempts_check': bool,
            'enable_password_verification': bool,
            'password_expiration_duration': str,
            'status': PasswordStatus
        }

        self.attribute_map = {
            'allowed_failed_attempts': 'allowedFailedAttempts',
            'enable_failed_attempts_check': 'enableFailedAttemptsCheck',
            'enable_password_verification': 'enablePasswordVerification',
            'password_expiration_duration': 'passwordExpirationDuration',
            'status': 'status'
        }

        self._allowed_failed_attempts = allowed_failed_attempts
        self._enable_failed_attempts_check = enable_failed_attempts_check
        self._enable_password_verification = enable_password_verification
        self._password_expiration_duration = password_expiration_duration
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPasswordValidationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserPasswordValidationPolicy of this UserPasswordValidationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_failed_attempts(self):
        """Gets the allowed_failed_attempts of this UserPasswordValidationPolicy.

        Number of failed login attempts allowed before user get locked.

        :return: The allowed_failed_attempts of this UserPasswordValidationPolicy.
        :rtype: int
        """
        return self._allowed_failed_attempts

    @allowed_failed_attempts.setter
    def allowed_failed_attempts(self, allowed_failed_attempts):
        """Sets the allowed_failed_attempts of this UserPasswordValidationPolicy.

        Number of failed login attempts allowed before user get locked.

        :param allowed_failed_attempts: The allowed_failed_attempts of this UserPasswordValidationPolicy.
        :type allowed_failed_attempts: int
        """

        self._allowed_failed_attempts = allowed_failed_attempts

    @property
    def enable_failed_attempts_check(self):
        """Gets the enable_failed_attempts_check of this UserPasswordValidationPolicy.

        If true, failed login attempts check will be enabled.

        :return: The enable_failed_attempts_check of this UserPasswordValidationPolicy.
        :rtype: bool
        """
        return self._enable_failed_attempts_check

    @enable_failed_attempts_check.setter
    def enable_failed_attempts_check(self, enable_failed_attempts_check):
        """Sets the enable_failed_attempts_check of this UserPasswordValidationPolicy.

        If true, failed login attempts check will be enabled.

        :param enable_failed_attempts_check: The enable_failed_attempts_check of this UserPasswordValidationPolicy.
        :type enable_failed_attempts_check: bool
        """

        self._enable_failed_attempts_check = enable_failed_attempts_check

    @property
    def enable_password_verification(self):
        """Gets the enable_password_verification of this UserPasswordValidationPolicy.

        If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.

        :return: The enable_password_verification of this UserPasswordValidationPolicy.
        :rtype: bool
        """
        return self._enable_password_verification

    @enable_password_verification.setter
    def enable_password_verification(self, enable_password_verification):
        """Sets the enable_password_verification of this UserPasswordValidationPolicy.

        If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.

        :param enable_password_verification: The enable_password_verification of this UserPasswordValidationPolicy.
        :type enable_password_verification: bool
        """

        self._enable_password_verification = enable_password_verification

    @property
    def password_expiration_duration(self):
        """Gets the password_expiration_duration of this UserPasswordValidationPolicy.

        Expiration duration after password is updated.

        :return: The password_expiration_duration of this UserPasswordValidationPolicy.
        :rtype: str
        """
        return self._password_expiration_duration

    @password_expiration_duration.setter
    def password_expiration_duration(self, password_expiration_duration):
        """Sets the password_expiration_duration of this UserPasswordValidationPolicy.

        Expiration duration after password is updated.

        :param password_expiration_duration: The password_expiration_duration of this UserPasswordValidationPolicy.
        :type password_expiration_duration: str
        """

        self._password_expiration_duration = password_expiration_duration

    @property
    def status(self):
        """Gets the status of this UserPasswordValidationPolicy.


        :return: The status of this UserPasswordValidationPolicy.
        :rtype: PasswordStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserPasswordValidationPolicy.


        :param status: The status of this UserPasswordValidationPolicy.
        :type status: PasswordStatus
        """

        self._status = status
