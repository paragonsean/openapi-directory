# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlExternalSyncSettingError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, kind: str=None, type: str=None):
        """SqlExternalSyncSettingError - a model defined in OpenAPI

        :param detail: The detail of this SqlExternalSyncSettingError.
        :param kind: The kind of this SqlExternalSyncSettingError.
        :param type: The type of this SqlExternalSyncSettingError.
        """
        self.openapi_types = {
            'detail': str,
            'kind': str,
            'type': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'kind': 'kind',
            'type': 'type'
        }

        self._detail = detail
        self._kind = kind
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlExternalSyncSettingError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlExternalSyncSettingError of this SqlExternalSyncSettingError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this SqlExternalSyncSettingError.

        Additional information about the error encountered.

        :return: The detail of this SqlExternalSyncSettingError.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this SqlExternalSyncSettingError.

        Additional information about the error encountered.

        :param detail: The detail of this SqlExternalSyncSettingError.
        :type detail: str
        """

        self._detail = detail

    @property
    def kind(self):
        """Gets the kind of this SqlExternalSyncSettingError.

        Can be `sql#externalSyncSettingError` or `sql#externalSyncSettingWarning`.

        :return: The kind of this SqlExternalSyncSettingError.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SqlExternalSyncSettingError.

        Can be `sql#externalSyncSettingError` or `sql#externalSyncSettingWarning`.

        :param kind: The kind of this SqlExternalSyncSettingError.
        :type kind: str
        """

        self._kind = kind

    @property
    def type(self):
        """Gets the type of this SqlExternalSyncSettingError.

        Identifies the specific error that occurred.

        :return: The type of this SqlExternalSyncSettingError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SqlExternalSyncSettingError.

        Identifies the specific error that occurred.

        :param type: The type of this SqlExternalSyncSettingError.
        :type type: str
        """
        allowed_values = ["SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED", "CONNECTION_FAILURE", "BINLOG_NOT_ENABLED", "INCOMPATIBLE_DATABASE_VERSION", "REPLICA_ALREADY_SETUP", "INSUFFICIENT_PRIVILEGE", "UNSUPPORTED_MIGRATION_TYPE", "NO_PGLOGICAL_INSTALLED", "PGLOGICAL_NODE_ALREADY_EXISTS", "INVALID_WAL_LEVEL", "INVALID_SHARED_PRELOAD_LIBRARY", "INSUFFICIENT_MAX_REPLICATION_SLOTS", "INSUFFICIENT_MAX_WAL_SENDERS", "INSUFFICIENT_MAX_WORKER_PROCESSES", "UNSUPPORTED_EXTENSIONS", "INVALID_RDS_LOGICAL_REPLICATION", "INVALID_LOGGING_SETUP", "INVALID_DB_PARAM", "UNSUPPORTED_GTID_MODE", "SQLSERVER_AGENT_NOT_RUNNING", "UNSUPPORTED_TABLE_DEFINITION", "UNSUPPORTED_DEFINER", "SQLSERVER_SERVERNAME_MISMATCH", "PRIMARY_ALREADY_SETUP", "UNSUPPORTED_BINLOG_FORMAT", "BINLOG_RETENTION_SETTING", "UNSUPPORTED_STORAGE_ENGINE", "LIMITED_SUPPORT_TABLES", "EXISTING_DATA_IN_REPLICA", "MISSING_OPTIONAL_PRIVILEGES", "RISKY_BACKUP_ADMIN_PRIVILEGE", "INSUFFICIENT_GCS_PERMISSIONS", "INVALID_FILE_INFO", "UNSUPPORTED_DATABASE_SETTINGS", "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE", "LOCAL_INFILE_OFF", "TURN_ON_PITR_AFTER_PROMOTE", "INCOMPATIBLE_DATABASE_MINOR_VERSION", "SOURCE_MAX_SUBSCRIPTIONS", "UNABLE_TO_VERIFY_DEFINERS", "SUBSCRIPTION_CALCULATION_STATUS", "PG_SUBSCRIPTION_COUNT", "PG_SYNC_PARALLEL_LEVEL", "INSUFFICIENT_DISK_SIZE", "INSUFFICIENT_MACHINE_TIER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
