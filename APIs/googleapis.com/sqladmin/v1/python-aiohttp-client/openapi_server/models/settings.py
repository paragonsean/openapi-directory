# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_machine_features import AdvancedMachineFeatures
from openapi_server.models.backup_configuration import BackupConfiguration
from openapi_server.models.data_cache_config import DataCacheConfig
from openapi_server.models.database_flags import DatabaseFlags
from openapi_server.models.deny_maintenance_period import DenyMaintenancePeriod
from openapi_server.models.insights_config import InsightsConfig
from openapi_server.models.ip_configuration import IpConfiguration
from openapi_server.models.location_preference import LocationPreference
from openapi_server.models.maintenance_window import MaintenanceWindow
from openapi_server.models.password_validation_policy import PasswordValidationPolicy
from openapi_server.models.sql_active_directory_config import SqlActiveDirectoryConfig
from openapi_server.models.sql_server_audit_config import SqlServerAuditConfig
from openapi_server import util


class Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_policy: str=None, active_directory_config: SqlActiveDirectoryConfig=None, advanced_machine_features: AdvancedMachineFeatures=None, authorized_gae_applications: List[str]=None, availability_type: str=None, backup_configuration: BackupConfiguration=None, collation: str=None, connector_enforcement: str=None, crash_safe_replication_enabled: bool=None, data_cache_config: DataCacheConfig=None, data_disk_size_gb: str=None, data_disk_type: str=None, database_flags: List[DatabaseFlags]=None, database_replication_enabled: bool=None, deletion_protection_enabled: bool=None, deny_maintenance_periods: List[DenyMaintenancePeriod]=None, edition: str=None, insights_config: InsightsConfig=None, ip_configuration: IpConfiguration=None, kind: str=None, location_preference: LocationPreference=None, maintenance_window: MaintenanceWindow=None, password_validation_policy: PasswordValidationPolicy=None, pricing_plan: str=None, replication_type: str=None, settings_version: str=None, sql_server_audit_config: SqlServerAuditConfig=None, storage_auto_resize: bool=None, storage_auto_resize_limit: str=None, tier: str=None, time_zone: str=None, user_labels: Dict[str, str]=None):
        """Settings - a model defined in OpenAPI

        :param activation_policy: The activation_policy of this Settings.
        :param active_directory_config: The active_directory_config of this Settings.
        :param advanced_machine_features: The advanced_machine_features of this Settings.
        :param authorized_gae_applications: The authorized_gae_applications of this Settings.
        :param availability_type: The availability_type of this Settings.
        :param backup_configuration: The backup_configuration of this Settings.
        :param collation: The collation of this Settings.
        :param connector_enforcement: The connector_enforcement of this Settings.
        :param crash_safe_replication_enabled: The crash_safe_replication_enabled of this Settings.
        :param data_cache_config: The data_cache_config of this Settings.
        :param data_disk_size_gb: The data_disk_size_gb of this Settings.
        :param data_disk_type: The data_disk_type of this Settings.
        :param database_flags: The database_flags of this Settings.
        :param database_replication_enabled: The database_replication_enabled of this Settings.
        :param deletion_protection_enabled: The deletion_protection_enabled of this Settings.
        :param deny_maintenance_periods: The deny_maintenance_periods of this Settings.
        :param edition: The edition of this Settings.
        :param insights_config: The insights_config of this Settings.
        :param ip_configuration: The ip_configuration of this Settings.
        :param kind: The kind of this Settings.
        :param location_preference: The location_preference of this Settings.
        :param maintenance_window: The maintenance_window of this Settings.
        :param password_validation_policy: The password_validation_policy of this Settings.
        :param pricing_plan: The pricing_plan of this Settings.
        :param replication_type: The replication_type of this Settings.
        :param settings_version: The settings_version of this Settings.
        :param sql_server_audit_config: The sql_server_audit_config of this Settings.
        :param storage_auto_resize: The storage_auto_resize of this Settings.
        :param storage_auto_resize_limit: The storage_auto_resize_limit of this Settings.
        :param tier: The tier of this Settings.
        :param time_zone: The time_zone of this Settings.
        :param user_labels: The user_labels of this Settings.
        """
        self.openapi_types = {
            'activation_policy': str,
            'active_directory_config': SqlActiveDirectoryConfig,
            'advanced_machine_features': AdvancedMachineFeatures,
            'authorized_gae_applications': List[str],
            'availability_type': str,
            'backup_configuration': BackupConfiguration,
            'collation': str,
            'connector_enforcement': str,
            'crash_safe_replication_enabled': bool,
            'data_cache_config': DataCacheConfig,
            'data_disk_size_gb': str,
            'data_disk_type': str,
            'database_flags': List[DatabaseFlags],
            'database_replication_enabled': bool,
            'deletion_protection_enabled': bool,
            'deny_maintenance_periods': List[DenyMaintenancePeriod],
            'edition': str,
            'insights_config': InsightsConfig,
            'ip_configuration': IpConfiguration,
            'kind': str,
            'location_preference': LocationPreference,
            'maintenance_window': MaintenanceWindow,
            'password_validation_policy': PasswordValidationPolicy,
            'pricing_plan': str,
            'replication_type': str,
            'settings_version': str,
            'sql_server_audit_config': SqlServerAuditConfig,
            'storage_auto_resize': bool,
            'storage_auto_resize_limit': str,
            'tier': str,
            'time_zone': str,
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'activation_policy': 'activationPolicy',
            'active_directory_config': 'activeDirectoryConfig',
            'advanced_machine_features': 'advancedMachineFeatures',
            'authorized_gae_applications': 'authorizedGaeApplications',
            'availability_type': 'availabilityType',
            'backup_configuration': 'backupConfiguration',
            'collation': 'collation',
            'connector_enforcement': 'connectorEnforcement',
            'crash_safe_replication_enabled': 'crashSafeReplicationEnabled',
            'data_cache_config': 'dataCacheConfig',
            'data_disk_size_gb': 'dataDiskSizeGb',
            'data_disk_type': 'dataDiskType',
            'database_flags': 'databaseFlags',
            'database_replication_enabled': 'databaseReplicationEnabled',
            'deletion_protection_enabled': 'deletionProtectionEnabled',
            'deny_maintenance_periods': 'denyMaintenancePeriods',
            'edition': 'edition',
            'insights_config': 'insightsConfig',
            'ip_configuration': 'ipConfiguration',
            'kind': 'kind',
            'location_preference': 'locationPreference',
            'maintenance_window': 'maintenanceWindow',
            'password_validation_policy': 'passwordValidationPolicy',
            'pricing_plan': 'pricingPlan',
            'replication_type': 'replicationType',
            'settings_version': 'settingsVersion',
            'sql_server_audit_config': 'sqlServerAuditConfig',
            'storage_auto_resize': 'storageAutoResize',
            'storage_auto_resize_limit': 'storageAutoResizeLimit',
            'tier': 'tier',
            'time_zone': 'timeZone',
            'user_labels': 'userLabels'
        }

        self._activation_policy = activation_policy
        self._active_directory_config = active_directory_config
        self._advanced_machine_features = advanced_machine_features
        self._authorized_gae_applications = authorized_gae_applications
        self._availability_type = availability_type
        self._backup_configuration = backup_configuration
        self._collation = collation
        self._connector_enforcement = connector_enforcement
        self._crash_safe_replication_enabled = crash_safe_replication_enabled
        self._data_cache_config = data_cache_config
        self._data_disk_size_gb = data_disk_size_gb
        self._data_disk_type = data_disk_type
        self._database_flags = database_flags
        self._database_replication_enabled = database_replication_enabled
        self._deletion_protection_enabled = deletion_protection_enabled
        self._deny_maintenance_periods = deny_maintenance_periods
        self._edition = edition
        self._insights_config = insights_config
        self._ip_configuration = ip_configuration
        self._kind = kind
        self._location_preference = location_preference
        self._maintenance_window = maintenance_window
        self._password_validation_policy = password_validation_policy
        self._pricing_plan = pricing_plan
        self._replication_type = replication_type
        self._settings_version = settings_version
        self._sql_server_audit_config = sql_server_audit_config
        self._storage_auto_resize = storage_auto_resize
        self._storage_auto_resize_limit = storage_auto_resize_limit
        self._tier = tier
        self._time_zone = time_zone
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings of this Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_policy(self):
        """Gets the activation_policy of this Settings.

        The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.

        :return: The activation_policy of this Settings.
        :rtype: str
        """
        return self._activation_policy

    @activation_policy.setter
    def activation_policy(self, activation_policy):
        """Sets the activation_policy of this Settings.

        The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.

        :param activation_policy: The activation_policy of this Settings.
        :type activation_policy: str
        """
        allowed_values = ["SQL_ACTIVATION_POLICY_UNSPECIFIED", "ALWAYS", "NEVER", "ON_DEMAND"]  # noqa: E501
        if activation_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `activation_policy` ({0}), must be one of {1}"
                .format(activation_policy, allowed_values)
            )

        self._activation_policy = activation_policy

    @property
    def active_directory_config(self):
        """Gets the active_directory_config of this Settings.


        :return: The active_directory_config of this Settings.
        :rtype: SqlActiveDirectoryConfig
        """
        return self._active_directory_config

    @active_directory_config.setter
    def active_directory_config(self, active_directory_config):
        """Sets the active_directory_config of this Settings.


        :param active_directory_config: The active_directory_config of this Settings.
        :type active_directory_config: SqlActiveDirectoryConfig
        """

        self._active_directory_config = active_directory_config

    @property
    def advanced_machine_features(self):
        """Gets the advanced_machine_features of this Settings.


        :return: The advanced_machine_features of this Settings.
        :rtype: AdvancedMachineFeatures
        """
        return self._advanced_machine_features

    @advanced_machine_features.setter
    def advanced_machine_features(self, advanced_machine_features):
        """Sets the advanced_machine_features of this Settings.


        :param advanced_machine_features: The advanced_machine_features of this Settings.
        :type advanced_machine_features: AdvancedMachineFeatures
        """

        self._advanced_machine_features = advanced_machine_features

    @property
    def authorized_gae_applications(self):
        """Gets the authorized_gae_applications of this Settings.

        The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.

        :return: The authorized_gae_applications of this Settings.
        :rtype: List[str]
        """
        return self._authorized_gae_applications

    @authorized_gae_applications.setter
    def authorized_gae_applications(self, authorized_gae_applications):
        """Sets the authorized_gae_applications of this Settings.

        The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.

        :param authorized_gae_applications: The authorized_gae_applications of this Settings.
        :type authorized_gae_applications: List[str]
        """

        self._authorized_gae_applications = authorized_gae_applications

    @property
    def availability_type(self):
        """Gets the availability_type of this Settings.

        Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).

        :return: The availability_type of this Settings.
        :rtype: str
        """
        return self._availability_type

    @availability_type.setter
    def availability_type(self, availability_type):
        """Sets the availability_type of this Settings.

        Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).

        :param availability_type: The availability_type of this Settings.
        :type availability_type: str
        """
        allowed_values = ["SQL_AVAILABILITY_TYPE_UNSPECIFIED", "ZONAL", "REGIONAL"]  # noqa: E501
        if availability_type not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_type` ({0}), must be one of {1}"
                .format(availability_type, allowed_values)
            )

        self._availability_type = availability_type

    @property
    def backup_configuration(self):
        """Gets the backup_configuration of this Settings.


        :return: The backup_configuration of this Settings.
        :rtype: BackupConfiguration
        """
        return self._backup_configuration

    @backup_configuration.setter
    def backup_configuration(self, backup_configuration):
        """Sets the backup_configuration of this Settings.


        :param backup_configuration: The backup_configuration of this Settings.
        :type backup_configuration: BackupConfiguration
        """

        self._backup_configuration = backup_configuration

    @property
    def collation(self):
        """Gets the collation of this Settings.

        The name of server Instance collation.

        :return: The collation of this Settings.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this Settings.

        The name of server Instance collation.

        :param collation: The collation of this Settings.
        :type collation: str
        """

        self._collation = collation

    @property
    def connector_enforcement(self):
        """Gets the connector_enforcement of this Settings.

        Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors). Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.

        :return: The connector_enforcement of this Settings.
        :rtype: str
        """
        return self._connector_enforcement

    @connector_enforcement.setter
    def connector_enforcement(self, connector_enforcement):
        """Sets the connector_enforcement of this Settings.

        Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors). Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.

        :param connector_enforcement: The connector_enforcement of this Settings.
        :type connector_enforcement: str
        """
        allowed_values = ["CONNECTOR_ENFORCEMENT_UNSPECIFIED", "NOT_REQUIRED", "REQUIRED"]  # noqa: E501
        if connector_enforcement not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_enforcement` ({0}), must be one of {1}"
                .format(connector_enforcement, allowed_values)
            )

        self._connector_enforcement = connector_enforcement

    @property
    def crash_safe_replication_enabled(self):
        """Gets the crash_safe_replication_enabled of this Settings.

        Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.

        :return: The crash_safe_replication_enabled of this Settings.
        :rtype: bool
        """
        return self._crash_safe_replication_enabled

    @crash_safe_replication_enabled.setter
    def crash_safe_replication_enabled(self, crash_safe_replication_enabled):
        """Sets the crash_safe_replication_enabled of this Settings.

        Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.

        :param crash_safe_replication_enabled: The crash_safe_replication_enabled of this Settings.
        :type crash_safe_replication_enabled: bool
        """

        self._crash_safe_replication_enabled = crash_safe_replication_enabled

    @property
    def data_cache_config(self):
        """Gets the data_cache_config of this Settings.


        :return: The data_cache_config of this Settings.
        :rtype: DataCacheConfig
        """
        return self._data_cache_config

    @data_cache_config.setter
    def data_cache_config(self, data_cache_config):
        """Sets the data_cache_config of this Settings.


        :param data_cache_config: The data_cache_config of this Settings.
        :type data_cache_config: DataCacheConfig
        """

        self._data_cache_config = data_cache_config

    @property
    def data_disk_size_gb(self):
        """Gets the data_disk_size_gb of this Settings.

        The size of data disk, in GB. The data disk size minimum is 10GB.

        :return: The data_disk_size_gb of this Settings.
        :rtype: str
        """
        return self._data_disk_size_gb

    @data_disk_size_gb.setter
    def data_disk_size_gb(self, data_disk_size_gb):
        """Sets the data_disk_size_gb of this Settings.

        The size of data disk, in GB. The data disk size minimum is 10GB.

        :param data_disk_size_gb: The data_disk_size_gb of this Settings.
        :type data_disk_size_gb: str
        """

        self._data_disk_size_gb = data_disk_size_gb

    @property
    def data_disk_type(self):
        """Gets the data_disk_type of this Settings.

        The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.

        :return: The data_disk_type of this Settings.
        :rtype: str
        """
        return self._data_disk_type

    @data_disk_type.setter
    def data_disk_type(self, data_disk_type):
        """Sets the data_disk_type of this Settings.

        The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.

        :param data_disk_type: The data_disk_type of this Settings.
        :type data_disk_type: str
        """
        allowed_values = ["SQL_DATA_DISK_TYPE_UNSPECIFIED", "PD_SSD", "PD_HDD", "OBSOLETE_LOCAL_SSD"]  # noqa: E501
        if data_disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_disk_type` ({0}), must be one of {1}"
                .format(data_disk_type, allowed_values)
            )

        self._data_disk_type = data_disk_type

    @property
    def database_flags(self):
        """Gets the database_flags of this Settings.

        The database flags passed to the instance at startup.

        :return: The database_flags of this Settings.
        :rtype: List[DatabaseFlags]
        """
        return self._database_flags

    @database_flags.setter
    def database_flags(self, database_flags):
        """Sets the database_flags of this Settings.

        The database flags passed to the instance at startup.

        :param database_flags: The database_flags of this Settings.
        :type database_flags: List[DatabaseFlags]
        """

        self._database_flags = database_flags

    @property
    def database_replication_enabled(self):
        """Gets the database_replication_enabled of this Settings.

        Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.

        :return: The database_replication_enabled of this Settings.
        :rtype: bool
        """
        return self._database_replication_enabled

    @database_replication_enabled.setter
    def database_replication_enabled(self, database_replication_enabled):
        """Sets the database_replication_enabled of this Settings.

        Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.

        :param database_replication_enabled: The database_replication_enabled of this Settings.
        :type database_replication_enabled: bool
        """

        self._database_replication_enabled = database_replication_enabled

    @property
    def deletion_protection_enabled(self):
        """Gets the deletion_protection_enabled of this Settings.

        Configuration to protect against accidental instance deletion.

        :return: The deletion_protection_enabled of this Settings.
        :rtype: bool
        """
        return self._deletion_protection_enabled

    @deletion_protection_enabled.setter
    def deletion_protection_enabled(self, deletion_protection_enabled):
        """Sets the deletion_protection_enabled of this Settings.

        Configuration to protect against accidental instance deletion.

        :param deletion_protection_enabled: The deletion_protection_enabled of this Settings.
        :type deletion_protection_enabled: bool
        """

        self._deletion_protection_enabled = deletion_protection_enabled

    @property
    def deny_maintenance_periods(self):
        """Gets the deny_maintenance_periods of this Settings.

        Deny maintenance periods

        :return: The deny_maintenance_periods of this Settings.
        :rtype: List[DenyMaintenancePeriod]
        """
        return self._deny_maintenance_periods

    @deny_maintenance_periods.setter
    def deny_maintenance_periods(self, deny_maintenance_periods):
        """Sets the deny_maintenance_periods of this Settings.

        Deny maintenance periods

        :param deny_maintenance_periods: The deny_maintenance_periods of this Settings.
        :type deny_maintenance_periods: List[DenyMaintenancePeriod]
        """

        self._deny_maintenance_periods = deny_maintenance_periods

    @property
    def edition(self):
        """Gets the edition of this Settings.

        Optional. The edition of the instance.

        :return: The edition of this Settings.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this Settings.

        Optional. The edition of the instance.

        :param edition: The edition of this Settings.
        :type edition: str
        """
        allowed_values = ["EDITION_UNSPECIFIED", "ENTERPRISE", "ENTERPRISE_PLUS"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def insights_config(self):
        """Gets the insights_config of this Settings.


        :return: The insights_config of this Settings.
        :rtype: InsightsConfig
        """
        return self._insights_config

    @insights_config.setter
    def insights_config(self, insights_config):
        """Sets the insights_config of this Settings.


        :param insights_config: The insights_config of this Settings.
        :type insights_config: InsightsConfig
        """

        self._insights_config = insights_config

    @property
    def ip_configuration(self):
        """Gets the ip_configuration of this Settings.


        :return: The ip_configuration of this Settings.
        :rtype: IpConfiguration
        """
        return self._ip_configuration

    @ip_configuration.setter
    def ip_configuration(self, ip_configuration):
        """Sets the ip_configuration of this Settings.


        :param ip_configuration: The ip_configuration of this Settings.
        :type ip_configuration: IpConfiguration
        """

        self._ip_configuration = ip_configuration

    @property
    def kind(self):
        """Gets the kind of this Settings.

        This is always `sql#settings`.

        :return: The kind of this Settings.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Settings.

        This is always `sql#settings`.

        :param kind: The kind of this Settings.
        :type kind: str
        """

        self._kind = kind

    @property
    def location_preference(self):
        """Gets the location_preference of this Settings.


        :return: The location_preference of this Settings.
        :rtype: LocationPreference
        """
        return self._location_preference

    @location_preference.setter
    def location_preference(self, location_preference):
        """Sets the location_preference of this Settings.


        :param location_preference: The location_preference of this Settings.
        :type location_preference: LocationPreference
        """

        self._location_preference = location_preference

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this Settings.


        :return: The maintenance_window of this Settings.
        :rtype: MaintenanceWindow
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this Settings.


        :param maintenance_window: The maintenance_window of this Settings.
        :type maintenance_window: MaintenanceWindow
        """

        self._maintenance_window = maintenance_window

    @property
    def password_validation_policy(self):
        """Gets the password_validation_policy of this Settings.


        :return: The password_validation_policy of this Settings.
        :rtype: PasswordValidationPolicy
        """
        return self._password_validation_policy

    @password_validation_policy.setter
    def password_validation_policy(self, password_validation_policy):
        """Sets the password_validation_policy of this Settings.


        :param password_validation_policy: The password_validation_policy of this Settings.
        :type password_validation_policy: PasswordValidationPolicy
        """

        self._password_validation_policy = password_validation_policy

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this Settings.

        The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.

        :return: The pricing_plan of this Settings.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this Settings.

        The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.

        :param pricing_plan: The pricing_plan of this Settings.
        :type pricing_plan: str
        """
        allowed_values = ["SQL_PRICING_PLAN_UNSPECIFIED", "PACKAGE", "PER_USE"]  # noqa: E501
        if pricing_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_plan` ({0}), must be one of {1}"
                .format(pricing_plan, allowed_values)
            )

        self._pricing_plan = pricing_plan

    @property
    def replication_type(self):
        """Gets the replication_type of this Settings.

        The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.

        :return: The replication_type of this Settings.
        :rtype: str
        """
        return self._replication_type

    @replication_type.setter
    def replication_type(self, replication_type):
        """Sets the replication_type of this Settings.

        The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.

        :param replication_type: The replication_type of this Settings.
        :type replication_type: str
        """
        allowed_values = ["SQL_REPLICATION_TYPE_UNSPECIFIED", "SYNCHRONOUS", "ASYNCHRONOUS"]  # noqa: E501
        if replication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_type` ({0}), must be one of {1}"
                .format(replication_type, allowed_values)
            )

        self._replication_type = replication_type

    @property
    def settings_version(self):
        """Gets the settings_version of this Settings.

        The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.

        :return: The settings_version of this Settings.
        :rtype: str
        """
        return self._settings_version

    @settings_version.setter
    def settings_version(self, settings_version):
        """Sets the settings_version of this Settings.

        The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.

        :param settings_version: The settings_version of this Settings.
        :type settings_version: str
        """

        self._settings_version = settings_version

    @property
    def sql_server_audit_config(self):
        """Gets the sql_server_audit_config of this Settings.


        :return: The sql_server_audit_config of this Settings.
        :rtype: SqlServerAuditConfig
        """
        return self._sql_server_audit_config

    @sql_server_audit_config.setter
    def sql_server_audit_config(self, sql_server_audit_config):
        """Sets the sql_server_audit_config of this Settings.


        :param sql_server_audit_config: The sql_server_audit_config of this Settings.
        :type sql_server_audit_config: SqlServerAuditConfig
        """

        self._sql_server_audit_config = sql_server_audit_config

    @property
    def storage_auto_resize(self):
        """Gets the storage_auto_resize of this Settings.

        Configuration to increase storage size automatically. The default value is true.

        :return: The storage_auto_resize of this Settings.
        :rtype: bool
        """
        return self._storage_auto_resize

    @storage_auto_resize.setter
    def storage_auto_resize(self, storage_auto_resize):
        """Sets the storage_auto_resize of this Settings.

        Configuration to increase storage size automatically. The default value is true.

        :param storage_auto_resize: The storage_auto_resize of this Settings.
        :type storage_auto_resize: bool
        """

        self._storage_auto_resize = storage_auto_resize

    @property
    def storage_auto_resize_limit(self):
        """Gets the storage_auto_resize_limit of this Settings.

        The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.

        :return: The storage_auto_resize_limit of this Settings.
        :rtype: str
        """
        return self._storage_auto_resize_limit

    @storage_auto_resize_limit.setter
    def storage_auto_resize_limit(self, storage_auto_resize_limit):
        """Sets the storage_auto_resize_limit of this Settings.

        The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.

        :param storage_auto_resize_limit: The storage_auto_resize_limit of this Settings.
        :type storage_auto_resize_limit: str
        """

        self._storage_auto_resize_limit = storage_auto_resize_limit

    @property
    def tier(self):
        """Gets the tier of this Settings.

        The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.

        :return: The tier of this Settings.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Settings.

        The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.

        :param tier: The tier of this Settings.
        :type tier: str
        """

        self._tier = tier

    @property
    def time_zone(self):
        """Gets the time_zone of this Settings.

        Server timezone, relevant only for Cloud SQL for SQL Server.

        :return: The time_zone of this Settings.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Settings.

        Server timezone, relevant only for Cloud SQL for SQL Server.

        :param time_zone: The time_zone of this Settings.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def user_labels(self):
        """Gets the user_labels of this Settings.

        User-provided labels, represented as a dictionary where each label is a single key value pair.

        :return: The user_labels of this Settings.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this Settings.

        User-provided labels, represented as a dictionary where each label is a single key value pair.

        :param user_labels: The user_labels of this Settings.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
