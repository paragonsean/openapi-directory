# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InsightsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_insights_enabled: bool=None, query_plans_per_minute: int=None, query_string_length: int=None, record_application_tags: bool=None, record_client_address: bool=None):
        """InsightsConfig - a model defined in OpenAPI

        :param query_insights_enabled: The query_insights_enabled of this InsightsConfig.
        :param query_plans_per_minute: The query_plans_per_minute of this InsightsConfig.
        :param query_string_length: The query_string_length of this InsightsConfig.
        :param record_application_tags: The record_application_tags of this InsightsConfig.
        :param record_client_address: The record_client_address of this InsightsConfig.
        """
        self.openapi_types = {
            'query_insights_enabled': bool,
            'query_plans_per_minute': int,
            'query_string_length': int,
            'record_application_tags': bool,
            'record_client_address': bool
        }

        self.attribute_map = {
            'query_insights_enabled': 'queryInsightsEnabled',
            'query_plans_per_minute': 'queryPlansPerMinute',
            'query_string_length': 'queryStringLength',
            'record_application_tags': 'recordApplicationTags',
            'record_client_address': 'recordClientAddress'
        }

        self._query_insights_enabled = query_insights_enabled
        self._query_plans_per_minute = query_plans_per_minute
        self._query_string_length = query_string_length
        self._record_application_tags = record_application_tags
        self._record_client_address = record_client_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsightsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsightsConfig of this InsightsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_insights_enabled(self):
        """Gets the query_insights_enabled of this InsightsConfig.

        Whether Query Insights feature is enabled.

        :return: The query_insights_enabled of this InsightsConfig.
        :rtype: bool
        """
        return self._query_insights_enabled

    @query_insights_enabled.setter
    def query_insights_enabled(self, query_insights_enabled):
        """Sets the query_insights_enabled of this InsightsConfig.

        Whether Query Insights feature is enabled.

        :param query_insights_enabled: The query_insights_enabled of this InsightsConfig.
        :type query_insights_enabled: bool
        """

        self._query_insights_enabled = query_insights_enabled

    @property
    def query_plans_per_minute(self):
        """Gets the query_plans_per_minute of this InsightsConfig.

        Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.

        :return: The query_plans_per_minute of this InsightsConfig.
        :rtype: int
        """
        return self._query_plans_per_minute

    @query_plans_per_minute.setter
    def query_plans_per_minute(self, query_plans_per_minute):
        """Sets the query_plans_per_minute of this InsightsConfig.

        Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.

        :param query_plans_per_minute: The query_plans_per_minute of this InsightsConfig.
        :type query_plans_per_minute: int
        """

        self._query_plans_per_minute = query_plans_per_minute

    @property
    def query_string_length(self):
        """Gets the query_string_length of this InsightsConfig.

        Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.

        :return: The query_string_length of this InsightsConfig.
        :rtype: int
        """
        return self._query_string_length

    @query_string_length.setter
    def query_string_length(self, query_string_length):
        """Sets the query_string_length of this InsightsConfig.

        Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.

        :param query_string_length: The query_string_length of this InsightsConfig.
        :type query_string_length: int
        """

        self._query_string_length = query_string_length

    @property
    def record_application_tags(self):
        """Gets the record_application_tags of this InsightsConfig.

        Whether Query Insights will record application tags from query when enabled.

        :return: The record_application_tags of this InsightsConfig.
        :rtype: bool
        """
        return self._record_application_tags

    @record_application_tags.setter
    def record_application_tags(self, record_application_tags):
        """Sets the record_application_tags of this InsightsConfig.

        Whether Query Insights will record application tags from query when enabled.

        :param record_application_tags: The record_application_tags of this InsightsConfig.
        :type record_application_tags: bool
        """

        self._record_application_tags = record_application_tags

    @property
    def record_client_address(self):
        """Gets the record_client_address of this InsightsConfig.

        Whether Query Insights will record client address when enabled.

        :return: The record_client_address of this InsightsConfig.
        :rtype: bool
        """
        return self._record_client_address

    @record_client_address.setter
    def record_client_address(self, record_client_address):
        """Sets the record_client_address of this InsightsConfig.

        Whether Query Insights will record client address when enabled.

        :param record_client_address: The record_client_address of this InsightsConfig.
        :type record_client_address: bool
        """

        self._record_client_address = record_client_address
