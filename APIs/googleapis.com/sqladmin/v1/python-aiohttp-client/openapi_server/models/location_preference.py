# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationPreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, follow_gae_application: str=None, kind: str=None, secondary_zone: str=None, zone: str=None):
        """LocationPreference - a model defined in OpenAPI

        :param follow_gae_application: The follow_gae_application of this LocationPreference.
        :param kind: The kind of this LocationPreference.
        :param secondary_zone: The secondary_zone of this LocationPreference.
        :param zone: The zone of this LocationPreference.
        """
        self.openapi_types = {
            'follow_gae_application': str,
            'kind': str,
            'secondary_zone': str,
            'zone': str
        }

        self.attribute_map = {
            'follow_gae_application': 'followGaeApplication',
            'kind': 'kind',
            'secondary_zone': 'secondaryZone',
            'zone': 'zone'
        }

        self._follow_gae_application = follow_gae_application
        self._kind = kind
        self._secondary_zone = secondary_zone
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationPreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationPreference of this LocationPreference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def follow_gae_application(self):
        """Gets the follow_gae_application of this LocationPreference.

        The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.

        :return: The follow_gae_application of this LocationPreference.
        :rtype: str
        """
        return self._follow_gae_application

    @follow_gae_application.setter
    def follow_gae_application(self, follow_gae_application):
        """Sets the follow_gae_application of this LocationPreference.

        The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.

        :param follow_gae_application: The follow_gae_application of this LocationPreference.
        :type follow_gae_application: str
        """

        self._follow_gae_application = follow_gae_application

    @property
    def kind(self):
        """Gets the kind of this LocationPreference.

        This is always `sql#locationPreference`.

        :return: The kind of this LocationPreference.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LocationPreference.

        This is always `sql#locationPreference`.

        :param kind: The kind of this LocationPreference.
        :type kind: str
        """

        self._kind = kind

    @property
    def secondary_zone(self):
        """Gets the secondary_zone of this LocationPreference.

        The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). To disable this field, set it to 'no_secondary_zone'.

        :return: The secondary_zone of this LocationPreference.
        :rtype: str
        """
        return self._secondary_zone

    @secondary_zone.setter
    def secondary_zone(self, secondary_zone):
        """Sets the secondary_zone of this LocationPreference.

        The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). To disable this field, set it to 'no_secondary_zone'.

        :param secondary_zone: The secondary_zone of this LocationPreference.
        :type secondary_zone: str
        """

        self._secondary_zone = secondary_zone

    @property
    def zone(self):
        """Gets the zone of this LocationPreference.

        The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.

        :return: The zone of this LocationPreference.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this LocationPreference.

        The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.

        :param zone: The zone of this LocationPreference.
        :type zone: str
        """

        self._zone = zone
