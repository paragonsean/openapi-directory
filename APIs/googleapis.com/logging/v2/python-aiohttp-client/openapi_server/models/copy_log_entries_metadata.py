# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_log_entries_request import CopyLogEntriesRequest
from openapi_server import util


class CopyLogEntriesMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_requested: bool=None, destination: str=None, end_time: str=None, progress: int=None, request: CopyLogEntriesRequest=None, source: str=None, start_time: str=None, state: str=None, verb: str=None, writer_identity: str=None):
        """CopyLogEntriesMetadata - a model defined in OpenAPI

        :param cancellation_requested: The cancellation_requested of this CopyLogEntriesMetadata.
        :param destination: The destination of this CopyLogEntriesMetadata.
        :param end_time: The end_time of this CopyLogEntriesMetadata.
        :param progress: The progress of this CopyLogEntriesMetadata.
        :param request: The request of this CopyLogEntriesMetadata.
        :param source: The source of this CopyLogEntriesMetadata.
        :param start_time: The start_time of this CopyLogEntriesMetadata.
        :param state: The state of this CopyLogEntriesMetadata.
        :param verb: The verb of this CopyLogEntriesMetadata.
        :param writer_identity: The writer_identity of this CopyLogEntriesMetadata.
        """
        self.openapi_types = {
            'cancellation_requested': bool,
            'destination': str,
            'end_time': str,
            'progress': int,
            'request': CopyLogEntriesRequest,
            'source': str,
            'start_time': str,
            'state': str,
            'verb': str,
            'writer_identity': str
        }

        self.attribute_map = {
            'cancellation_requested': 'cancellationRequested',
            'destination': 'destination',
            'end_time': 'endTime',
            'progress': 'progress',
            'request': 'request',
            'source': 'source',
            'start_time': 'startTime',
            'state': 'state',
            'verb': 'verb',
            'writer_identity': 'writerIdentity'
        }

        self._cancellation_requested = cancellation_requested
        self._destination = destination
        self._end_time = end_time
        self._progress = progress
        self._request = request
        self._source = source
        self._start_time = start_time
        self._state = state
        self._verb = verb
        self._writer_identity = writer_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyLogEntriesMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyLogEntriesMetadata of this CopyLogEntriesMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_requested(self):
        """Gets the cancellation_requested of this CopyLogEntriesMetadata.

        Identifies whether the user has requested cancellation of the operation.

        :return: The cancellation_requested of this CopyLogEntriesMetadata.
        :rtype: bool
        """
        return self._cancellation_requested

    @cancellation_requested.setter
    def cancellation_requested(self, cancellation_requested):
        """Sets the cancellation_requested of this CopyLogEntriesMetadata.

        Identifies whether the user has requested cancellation of the operation.

        :param cancellation_requested: The cancellation_requested of this CopyLogEntriesMetadata.
        :type cancellation_requested: bool
        """

        self._cancellation_requested = cancellation_requested

    @property
    def destination(self):
        """Gets the destination of this CopyLogEntriesMetadata.

        Destination to which to copy log entries.For example, a Cloud Storage bucket:\"storage.googleapis.com/my-cloud-storage-bucket\"

        :return: The destination of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CopyLogEntriesMetadata.

        Destination to which to copy log entries.For example, a Cloud Storage bucket:\"storage.googleapis.com/my-cloud-storage-bucket\"

        :param destination: The destination of this CopyLogEntriesMetadata.
        :type destination: str
        """

        self._destination = destination

    @property
    def end_time(self):
        """Gets the end_time of this CopyLogEntriesMetadata.

        The end time of an operation.

        :return: The end_time of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CopyLogEntriesMetadata.

        The end time of an operation.

        :param end_time: The end_time of this CopyLogEntriesMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def progress(self):
        """Gets the progress of this CopyLogEntriesMetadata.

        Estimated progress of the operation (0 - 100%).

        :return: The progress of this CopyLogEntriesMetadata.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CopyLogEntriesMetadata.

        Estimated progress of the operation (0 - 100%).

        :param progress: The progress of this CopyLogEntriesMetadata.
        :type progress: int
        """

        self._progress = progress

    @property
    def request(self):
        """Gets the request of this CopyLogEntriesMetadata.


        :return: The request of this CopyLogEntriesMetadata.
        :rtype: CopyLogEntriesRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this CopyLogEntriesMetadata.


        :param request: The request of this CopyLogEntriesMetadata.
        :type request: CopyLogEntriesRequest
        """

        self._request = request

    @property
    def source(self):
        """Gets the source of this CopyLogEntriesMetadata.

        Source from which to copy log entries.For example, a log bucket:\"projects/my-project/locations/global/buckets/my-source-bucket\"

        :return: The source of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CopyLogEntriesMetadata.

        Source from which to copy log entries.For example, a log bucket:\"projects/my-project/locations/global/buckets/my-source-bucket\"

        :param source: The source of this CopyLogEntriesMetadata.
        :type source: str
        """

        self._source = source

    @property
    def start_time(self):
        """Gets the start_time of this CopyLogEntriesMetadata.

        The create time of an operation.

        :return: The start_time of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CopyLogEntriesMetadata.

        The create time of an operation.

        :param start_time: The start_time of this CopyLogEntriesMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this CopyLogEntriesMetadata.

        Output only. State of an operation.

        :return: The state of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CopyLogEntriesMetadata.

        Output only. State of an operation.

        :param state: The state of this CopyLogEntriesMetadata.
        :type state: str
        """
        allowed_values = ["OPERATION_STATE_UNSPECIFIED", "OPERATION_STATE_SCHEDULED", "OPERATION_STATE_WAITING_FOR_PERMISSIONS", "OPERATION_STATE_RUNNING", "OPERATION_STATE_SUCCEEDED", "OPERATION_STATE_FAILED", "OPERATION_STATE_CANCELLED", "OPERATION_STATE_PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def verb(self):
        """Gets the verb of this CopyLogEntriesMetadata.

        Name of the verb executed by the operation.For example,\"copy\"

        :return: The verb of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this CopyLogEntriesMetadata.

        Name of the verb executed by the operation.For example,\"copy\"

        :param verb: The verb of this CopyLogEntriesMetadata.
        :type verb: str
        """

        self._verb = verb

    @property
    def writer_identity(self):
        """Gets the writer_identity of this CopyLogEntriesMetadata.

        The IAM identity of a service account that must be granted access to the destination.If the service account is not granted permission to the destination within an hour, the operation will be cancelled.For example: \"serviceAccount:foo@bar.com\"

        :return: The writer_identity of this CopyLogEntriesMetadata.
        :rtype: str
        """
        return self._writer_identity

    @writer_identity.setter
    def writer_identity(self, writer_identity):
        """Sets the writer_identity of this CopyLogEntriesMetadata.

        The IAM identity of a service account that must be granted access to the destination.If the service account is not granted permission to the destination within an hour, the operation will be cancelled.For example: \"serviceAccount:foo@bar.com\"

        :param writer_identity: The writer_identity of this CopyLogEntriesMetadata.
        :type writer_identity: str
        """

        self._writer_identity = writer_identity
