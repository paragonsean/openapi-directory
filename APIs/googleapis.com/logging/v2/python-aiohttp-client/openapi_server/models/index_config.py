# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IndexConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, field_path: str=None, type: str=None):
        """IndexConfig - a model defined in OpenAPI

        :param create_time: The create_time of this IndexConfig.
        :param field_path: The field_path of this IndexConfig.
        :param type: The type of this IndexConfig.
        """
        self.openapi_types = {
            'create_time': str,
            'field_path': str,
            'type': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'field_path': 'fieldPath',
            'type': 'type'
        }

        self._create_time = create_time
        self._field_path = field_path
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexConfig of this IndexConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this IndexConfig.

        Output only. The timestamp when the index was last modified.This is used to return the timestamp, and will be ignored if supplied during update.

        :return: The create_time of this IndexConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this IndexConfig.

        Output only. The timestamp when the index was last modified.This is used to return the timestamp, and will be ignored if supplied during update.

        :param create_time: The create_time of this IndexConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def field_path(self):
        """Gets the field_path of this IndexConfig.

        Required. The LogEntry field path to index.Note that some paths are automatically indexed, and other paths are not eligible for indexing. See indexing documentation( https://cloud.google.com/logging/docs/view/advanced-queries#indexed-fields) for details.For example: jsonPayload.request.status

        :return: The field_path of this IndexConfig.
        :rtype: str
        """
        return self._field_path

    @field_path.setter
    def field_path(self, field_path):
        """Sets the field_path of this IndexConfig.

        Required. The LogEntry field path to index.Note that some paths are automatically indexed, and other paths are not eligible for indexing. See indexing documentation( https://cloud.google.com/logging/docs/view/advanced-queries#indexed-fields) for details.For example: jsonPayload.request.status

        :param field_path: The field_path of this IndexConfig.
        :type field_path: str
        """

        self._field_path = field_path

    @property
    def type(self):
        """Gets the type of this IndexConfig.

        Required. The type of data in this index.

        :return: The type of this IndexConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IndexConfig.

        Required. The type of data in this index.

        :param type: The type of this IndexConfig.
        :type type: str
        """
        allowed_values = ["INDEX_TYPE_UNSPECIFIED", "INDEX_TYPE_STRING", "INDEX_TYPE_INTEGER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
