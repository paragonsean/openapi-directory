# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logging_query import LoggingQuery
from openapi_server.models.ops_analytics_query import OpsAnalyticsQuery
from openapi_server import util


class SavedQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, logging_query: LoggingQuery=None, name: str=None, ops_analytics_query: OpsAnalyticsQuery=None, update_time: str=None, visibility: str=None):
        """SavedQuery - a model defined in OpenAPI

        :param create_time: The create_time of this SavedQuery.
        :param description: The description of this SavedQuery.
        :param display_name: The display_name of this SavedQuery.
        :param logging_query: The logging_query of this SavedQuery.
        :param name: The name of this SavedQuery.
        :param ops_analytics_query: The ops_analytics_query of this SavedQuery.
        :param update_time: The update_time of this SavedQuery.
        :param visibility: The visibility of this SavedQuery.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'logging_query': LoggingQuery,
            'name': str,
            'ops_analytics_query': OpsAnalyticsQuery,
            'update_time': str,
            'visibility': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'logging_query': 'loggingQuery',
            'name': 'name',
            'ops_analytics_query': 'opsAnalyticsQuery',
            'update_time': 'updateTime',
            'visibility': 'visibility'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._logging_query = logging_query
        self._name = name
        self._ops_analytics_query = ops_analytics_query
        self._update_time = update_time
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavedQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavedQuery of this SavedQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this SavedQuery.

        Output only. The timestamp when the saved query was created.

        :return: The create_time of this SavedQuery.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this SavedQuery.

        Output only. The timestamp when the saved query was created.

        :param create_time: The create_time of this SavedQuery.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this SavedQuery.

        Optional. A human readable description of the saved query.

        :return: The description of this SavedQuery.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SavedQuery.

        Optional. A human readable description of the saved query.

        :param description: The description of this SavedQuery.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this SavedQuery.

        Optional. The user specified title for the SavedQuery.

        :return: The display_name of this SavedQuery.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SavedQuery.

        Optional. The user specified title for the SavedQuery.

        :param display_name: The display_name of this SavedQuery.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def logging_query(self):
        """Gets the logging_query of this SavedQuery.


        :return: The logging_query of this SavedQuery.
        :rtype: LoggingQuery
        """
        return self._logging_query

    @logging_query.setter
    def logging_query(self, logging_query):
        """Sets the logging_query of this SavedQuery.


        :param logging_query: The logging_query of this SavedQuery.
        :type logging_query: LoggingQuery
        """

        self._logging_query = logging_query

    @property
    def name(self):
        """Gets the name of this SavedQuery.

        Output only. Resource name of the saved query.In the format: \"projects/[PROJECT_ID]/locations/[LOCATION_ID]/savedQueries/[QUERY_ID]\" For a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support#bucket-regions)After the saved query is created, the location cannot be changed.If the user doesn't provide a QUERY_ID, the system will generate an alphanumeric ID.

        :return: The name of this SavedQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedQuery.

        Output only. Resource name of the saved query.In the format: \"projects/[PROJECT_ID]/locations/[LOCATION_ID]/savedQueries/[QUERY_ID]\" For a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support#bucket-regions)After the saved query is created, the location cannot be changed.If the user doesn't provide a QUERY_ID, the system will generate an alphanumeric ID.

        :param name: The name of this SavedQuery.
        :type name: str
        """

        self._name = name

    @property
    def ops_analytics_query(self):
        """Gets the ops_analytics_query of this SavedQuery.


        :return: The ops_analytics_query of this SavedQuery.
        :rtype: OpsAnalyticsQuery
        """
        return self._ops_analytics_query

    @ops_analytics_query.setter
    def ops_analytics_query(self, ops_analytics_query):
        """Sets the ops_analytics_query of this SavedQuery.


        :param ops_analytics_query: The ops_analytics_query of this SavedQuery.
        :type ops_analytics_query: OpsAnalyticsQuery
        """

        self._ops_analytics_query = ops_analytics_query

    @property
    def update_time(self):
        """Gets the update_time of this SavedQuery.

        Output only. The timestamp when the saved query was last updated.

        :return: The update_time of this SavedQuery.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SavedQuery.

        Output only. The timestamp when the saved query was last updated.

        :param update_time: The update_time of this SavedQuery.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def visibility(self):
        """Gets the visibility of this SavedQuery.

        Required. The visibility status of this query, which determines its ownership.

        :return: The visibility of this SavedQuery.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this SavedQuery.

        Required. The visibility status of this query, which determines its ownership.

        :param visibility: The visibility of this SavedQuery.
        :type visibility: str
        """
        allowed_values = ["VISIBILITY_UNSPECIFIED", "PRIVATE", "SHARED"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
