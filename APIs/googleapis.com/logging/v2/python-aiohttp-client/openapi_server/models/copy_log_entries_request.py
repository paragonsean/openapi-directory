# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyLogEntriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, filter: str=None, name: str=None):
        """CopyLogEntriesRequest - a model defined in OpenAPI

        :param destination: The destination of this CopyLogEntriesRequest.
        :param filter: The filter of this CopyLogEntriesRequest.
        :param name: The name of this CopyLogEntriesRequest.
        """
        self.openapi_types = {
            'destination': str,
            'filter': str,
            'name': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'filter': 'filter',
            'name': 'name'
        }

        self._destination = destination
        self._filter = filter
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyLogEntriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyLogEntriesRequest of this CopyLogEntriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this CopyLogEntriesRequest.

        Required. Destination to which to copy log entries.

        :return: The destination of this CopyLogEntriesRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CopyLogEntriesRequest.

        Required. Destination to which to copy log entries.

        :param destination: The destination of this CopyLogEntriesRequest.
        :type destination: str
        """

        self._destination = destination

    @property
    def filter(self):
        """Gets the filter of this CopyLogEntriesRequest.

        Optional. A filter specifying which log entries to copy. The filter must be no more than 20k characters. An empty filter matches all log entries.

        :return: The filter of this CopyLogEntriesRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CopyLogEntriesRequest.

        Optional. A filter specifying which log entries to copy. The filter must be no more than 20k characters. An empty filter matches all log entries.

        :param filter: The filter of this CopyLogEntriesRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def name(self):
        """Gets the name of this CopyLogEntriesRequest.

        Required. Log bucket from which to copy log entries.For example:\"projects/my-project/locations/global/buckets/my-source-bucket\"

        :return: The name of this CopyLogEntriesRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CopyLogEntriesRequest.

        Required. Log bucket from which to copy log entries.For example:\"projects/my-project/locations/global/buckets/my-source-bucket\"

        :param name: The name of this CopyLogEntriesRequest.
        :type name: str
        """

        self._name = name
