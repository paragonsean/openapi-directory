# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_entry import LogEntry
from openapi_server.models.monitored_resource import MonitoredResource
from openapi_server import util


class WriteLogEntriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dry_run: bool=None, entries: List[LogEntry]=None, labels: Dict[str, str]=None, log_name: str=None, partial_success: bool=None, resource: MonitoredResource=None):
        """WriteLogEntriesRequest - a model defined in OpenAPI

        :param dry_run: The dry_run of this WriteLogEntriesRequest.
        :param entries: The entries of this WriteLogEntriesRequest.
        :param labels: The labels of this WriteLogEntriesRequest.
        :param log_name: The log_name of this WriteLogEntriesRequest.
        :param partial_success: The partial_success of this WriteLogEntriesRequest.
        :param resource: The resource of this WriteLogEntriesRequest.
        """
        self.openapi_types = {
            'dry_run': bool,
            'entries': List[LogEntry],
            'labels': Dict[str, str],
            'log_name': str,
            'partial_success': bool,
            'resource': MonitoredResource
        }

        self.attribute_map = {
            'dry_run': 'dryRun',
            'entries': 'entries',
            'labels': 'labels',
            'log_name': 'logName',
            'partial_success': 'partialSuccess',
            'resource': 'resource'
        }

        self._dry_run = dry_run
        self._entries = entries
        self._labels = labels
        self._log_name = log_name
        self._partial_success = partial_success
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WriteLogEntriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WriteLogEntriesRequest of this WriteLogEntriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dry_run(self):
        """Gets the dry_run of this WriteLogEntriesRequest.

        Optional. If true, the request should expect normal response, but the entries won't be persisted nor exported. Useful for checking whether the logging API endpoints are working properly before sending valuable data.

        :return: The dry_run of this WriteLogEntriesRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this WriteLogEntriesRequest.

        Optional. If true, the request should expect normal response, but the entries won't be persisted nor exported. Useful for checking whether the logging API endpoints are working properly before sending valuable data.

        :param dry_run: The dry_run of this WriteLogEntriesRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def entries(self):
        """Gets the entries of this WriteLogEntriesRequest.

        Required. The log entries to send to Logging. The order of log entries in this list does not matter. Values supplied in this method's log_name, resource, and labels fields are copied into those log entries in this list that do not include values for their corresponding fields. For more information, see the LogEntry type.If the timestamp or insert_id fields are missing in log entries, then this method supplies the current time or a unique identifier, respectively. The supplied values are chosen so that, among the log entries that did not supply their own values, the entries earlier in the list will sort before the entries later in the list. See the entries.list method.Log entries with timestamps that are more than the logs retention period (https://cloud.google.com/logging/quotas) in the past or more than 24 hours in the future will not be available when calling entries.list. However, those log entries can still be exported with LogSinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).To improve throughput and to avoid exceeding the quota limit (https://cloud.google.com/logging/quotas) for calls to entries.write, you should try to include several log entries in this list, rather than calling this method for each individual log entry.

        :return: The entries of this WriteLogEntriesRequest.
        :rtype: List[LogEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this WriteLogEntriesRequest.

        Required. The log entries to send to Logging. The order of log entries in this list does not matter. Values supplied in this method's log_name, resource, and labels fields are copied into those log entries in this list that do not include values for their corresponding fields. For more information, see the LogEntry type.If the timestamp or insert_id fields are missing in log entries, then this method supplies the current time or a unique identifier, respectively. The supplied values are chosen so that, among the log entries that did not supply their own values, the entries earlier in the list will sort before the entries later in the list. See the entries.list method.Log entries with timestamps that are more than the logs retention period (https://cloud.google.com/logging/quotas) in the past or more than 24 hours in the future will not be available when calling entries.list. However, those log entries can still be exported with LogSinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).To improve throughput and to avoid exceeding the quota limit (https://cloud.google.com/logging/quotas) for calls to entries.write, you should try to include several log entries in this list, rather than calling this method for each individual log entry.

        :param entries: The entries of this WriteLogEntriesRequest.
        :type entries: List[LogEntry]
        """

        self._entries = entries

    @property
    def labels(self):
        """Gets the labels of this WriteLogEntriesRequest.

        Optional. Default labels that are added to the labels field of all log entries in entries. If a log entry already has a label with the same key as a label in this parameter, then the log entry's label is not changed. See LogEntry.

        :return: The labels of this WriteLogEntriesRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WriteLogEntriesRequest.

        Optional. Default labels that are added to the labels field of all log entries in entries. If a log entry already has a label with the same key as a label in this parameter, then the log entry's label is not changed. See LogEntry.

        :param labels: The labels of this WriteLogEntriesRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def log_name(self):
        """Gets the log_name of this WriteLogEntriesRequest.

        Optional. A default log resource name that is assigned to all log entries in entries that do not specify a value for log_name: projects/[PROJECT_ID]/logs/[LOG_ID] organizations/[ORGANIZATION_ID]/logs/[LOG_ID] billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID] folders/[FOLDER_ID]/logs/[LOG_ID][LOG_ID] must be URL-encoded. For example: \"projects/my-project-id/logs/syslog\" \"organizations/123/logs/cloudaudit.googleapis.com%2Factivity\" The permission logging.logEntries.create is needed on each project, organization, billing account, or folder that is receiving new log entries, whether the resource is specified in logName or in an individual log entry.

        :return: The log_name of this WriteLogEntriesRequest.
        :rtype: str
        """
        return self._log_name

    @log_name.setter
    def log_name(self, log_name):
        """Sets the log_name of this WriteLogEntriesRequest.

        Optional. A default log resource name that is assigned to all log entries in entries that do not specify a value for log_name: projects/[PROJECT_ID]/logs/[LOG_ID] organizations/[ORGANIZATION_ID]/logs/[LOG_ID] billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID] folders/[FOLDER_ID]/logs/[LOG_ID][LOG_ID] must be URL-encoded. For example: \"projects/my-project-id/logs/syslog\" \"organizations/123/logs/cloudaudit.googleapis.com%2Factivity\" The permission logging.logEntries.create is needed on each project, organization, billing account, or folder that is receiving new log entries, whether the resource is specified in logName or in an individual log entry.

        :param log_name: The log_name of this WriteLogEntriesRequest.
        :type log_name: str
        """

        self._log_name = log_name

    @property
    def partial_success(self):
        """Gets the partial_success of this WriteLogEntriesRequest.

        Optional. Whether a batch's valid entries should be written even if some other entry failed due to a permanent error such as INVALID_ARGUMENT or PERMISSION_DENIED. If any entry failed, then the response status is the response status of one of the failed entries. The response will include error details in WriteLogEntriesPartialErrors.log_entry_errors keyed by the entries' zero-based index in the entries. Failed requests for which no entries are written will not include per-entry errors.

        :return: The partial_success of this WriteLogEntriesRequest.
        :rtype: bool
        """
        return self._partial_success

    @partial_success.setter
    def partial_success(self, partial_success):
        """Sets the partial_success of this WriteLogEntriesRequest.

        Optional. Whether a batch's valid entries should be written even if some other entry failed due to a permanent error such as INVALID_ARGUMENT or PERMISSION_DENIED. If any entry failed, then the response status is the response status of one of the failed entries. The response will include error details in WriteLogEntriesPartialErrors.log_entry_errors keyed by the entries' zero-based index in the entries. Failed requests for which no entries are written will not include per-entry errors.

        :param partial_success: The partial_success of this WriteLogEntriesRequest.
        :type partial_success: bool
        """

        self._partial_success = partial_success

    @property
    def resource(self):
        """Gets the resource of this WriteLogEntriesRequest.


        :return: The resource of this WriteLogEntriesRequest.
        :rtype: MonitoredResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this WriteLogEntriesRequest.


        :param resource: The resource of this WriteLogEntriesRequest.
        :type resource: MonitoredResource
        """

        self._resource = resource
