# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TailLogEntriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buffer_window: str=None, filter: str=None, resource_names: List[str]=None):
        """TailLogEntriesRequest - a model defined in OpenAPI

        :param buffer_window: The buffer_window of this TailLogEntriesRequest.
        :param filter: The filter of this TailLogEntriesRequest.
        :param resource_names: The resource_names of this TailLogEntriesRequest.
        """
        self.openapi_types = {
            'buffer_window': str,
            'filter': str,
            'resource_names': List[str]
        }

        self.attribute_map = {
            'buffer_window': 'bufferWindow',
            'filter': 'filter',
            'resource_names': 'resourceNames'
        }

        self._buffer_window = buffer_window
        self._filter = filter
        self._resource_names = resource_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TailLogEntriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TailLogEntriesRequest of this TailLogEntriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buffer_window(self):
        """Gets the buffer_window of this TailLogEntriesRequest.

        Optional. The amount of time to buffer log entries at the server before being returned to prevent out of order results due to late arriving log entries. Valid values are between 0-60000 milliseconds. Defaults to 2000 milliseconds.

        :return: The buffer_window of this TailLogEntriesRequest.
        :rtype: str
        """
        return self._buffer_window

    @buffer_window.setter
    def buffer_window(self, buffer_window):
        """Sets the buffer_window of this TailLogEntriesRequest.

        Optional. The amount of time to buffer log entries at the server before being returned to prevent out of order results due to late arriving log entries. Valid values are between 0-60000 milliseconds. Defaults to 2000 milliseconds.

        :param buffer_window: The buffer_window of this TailLogEntriesRequest.
        :type buffer_window: str
        """

        self._buffer_window = buffer_window

    @property
    def filter(self):
        """Gets the filter of this TailLogEntriesRequest.

        Optional. Only log entries that match the filter are returned. An empty filter matches all log entries in the resources listed in resource_names. Referencing a parent resource that is not listed in resource_names will cause the filter to return no results. The maximum length of a filter is 20,000 characters.

        :return: The filter of this TailLogEntriesRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this TailLogEntriesRequest.

        Optional. Only log entries that match the filter are returned. An empty filter matches all log entries in the resources listed in resource_names. Referencing a parent resource that is not listed in resource_names will cause the filter to return no results. The maximum length of a filter is 20,000 characters.

        :param filter: The filter of this TailLogEntriesRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def resource_names(self):
        """Gets the resource_names of this TailLogEntriesRequest.

        Required. Name of a parent resource from which to retrieve log entries: projects/[PROJECT_ID] organizations/[ORGANIZATION_ID] billingAccounts/[BILLING_ACCOUNT_ID] folders/[FOLDER_ID]May alternatively be one or more views: projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID] organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID] billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID] folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]

        :return: The resource_names of this TailLogEntriesRequest.
        :rtype: List[str]
        """
        return self._resource_names

    @resource_names.setter
    def resource_names(self, resource_names):
        """Sets the resource_names of this TailLogEntriesRequest.

        Required. Name of a parent resource from which to retrieve log entries: projects/[PROJECT_ID] organizations/[ORGANIZATION_ID] billingAccounts/[BILLING_ACCOUNT_ID] folders/[FOLDER_ID]May alternatively be one or more views: projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID] organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID] billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID] folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]

        :param resource_names: The resource_names of this TailLogEntriesRequest.
        :type resource_names: List[str]
        """

        self._resource_names = resource_names
