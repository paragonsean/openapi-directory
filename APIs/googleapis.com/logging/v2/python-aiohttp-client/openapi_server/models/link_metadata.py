# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_link_request import CreateLinkRequest
from openapi_server.models.delete_link_request import DeleteLinkRequest
from openapi_server import util


class LinkMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_link_request: CreateLinkRequest=None, delete_link_request: DeleteLinkRequest=None, end_time: str=None, start_time: str=None, state: str=None):
        """LinkMetadata - a model defined in OpenAPI

        :param create_link_request: The create_link_request of this LinkMetadata.
        :param delete_link_request: The delete_link_request of this LinkMetadata.
        :param end_time: The end_time of this LinkMetadata.
        :param start_time: The start_time of this LinkMetadata.
        :param state: The state of this LinkMetadata.
        """
        self.openapi_types = {
            'create_link_request': CreateLinkRequest,
            'delete_link_request': DeleteLinkRequest,
            'end_time': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'create_link_request': 'createLinkRequest',
            'delete_link_request': 'deleteLinkRequest',
            'end_time': 'endTime',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._create_link_request = create_link_request
        self._delete_link_request = delete_link_request
        self._end_time = end_time
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkMetadata of this LinkMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_link_request(self):
        """Gets the create_link_request of this LinkMetadata.


        :return: The create_link_request of this LinkMetadata.
        :rtype: CreateLinkRequest
        """
        return self._create_link_request

    @create_link_request.setter
    def create_link_request(self, create_link_request):
        """Sets the create_link_request of this LinkMetadata.


        :param create_link_request: The create_link_request of this LinkMetadata.
        :type create_link_request: CreateLinkRequest
        """

        self._create_link_request = create_link_request

    @property
    def delete_link_request(self):
        """Gets the delete_link_request of this LinkMetadata.


        :return: The delete_link_request of this LinkMetadata.
        :rtype: DeleteLinkRequest
        """
        return self._delete_link_request

    @delete_link_request.setter
    def delete_link_request(self, delete_link_request):
        """Sets the delete_link_request of this LinkMetadata.


        :param delete_link_request: The delete_link_request of this LinkMetadata.
        :type delete_link_request: DeleteLinkRequest
        """

        self._delete_link_request = delete_link_request

    @property
    def end_time(self):
        """Gets the end_time of this LinkMetadata.

        The end time of an operation.

        :return: The end_time of this LinkMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this LinkMetadata.

        The end time of an operation.

        :param end_time: The end_time of this LinkMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this LinkMetadata.

        The start time of an operation.

        :return: The start_time of this LinkMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LinkMetadata.

        The start time of an operation.

        :param start_time: The start_time of this LinkMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this LinkMetadata.

        Output only. State of an operation.

        :return: The state of this LinkMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LinkMetadata.

        Output only. State of an operation.

        :param state: The state of this LinkMetadata.
        :type state: str
        """
        allowed_values = ["OPERATION_STATE_UNSPECIFIED", "OPERATION_STATE_SCHEDULED", "OPERATION_STATE_WAITING_FOR_PERMISSIONS", "OPERATION_STATE_RUNNING", "OPERATION_STATE_SUCCEEDED", "OPERATION_STATE_FAILED", "OPERATION_STATE_CANCELLED", "OPERATION_STATE_PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
