# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file: str=None, function_name: str=None, line: str=None):
        """SourceLocation - a model defined in OpenAPI

        :param file: The file of this SourceLocation.
        :param function_name: The function_name of this SourceLocation.
        :param line: The line of this SourceLocation.
        """
        self.openapi_types = {
            'file': str,
            'function_name': str,
            'line': str
        }

        self.attribute_map = {
            'file': 'file',
            'function_name': 'functionName',
            'line': 'line'
        }

        self._file = file
        self._function_name = function_name
        self._line = line

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceLocation of this SourceLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this SourceLocation.

        Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.

        :return: The file of this SourceLocation.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this SourceLocation.

        Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.

        :param file: The file of this SourceLocation.
        :type file: str
        """

        self._file = file

    @property
    def function_name(self):
        """Gets the function_name of this SourceLocation.

        Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information is used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).

        :return: The function_name of this SourceLocation.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this SourceLocation.

        Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information is used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).

        :param function_name: The function_name of this SourceLocation.
        :type function_name: str
        """

        self._function_name = function_name

    @property
    def line(self):
        """Gets the line of this SourceLocation.

        Line within the source file.

        :return: The line of this SourceLocation.
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this SourceLocation.

        Line within the source file.

        :param line: The line of this SourceLocation.
        :type line: str
        """

        self._line = line
