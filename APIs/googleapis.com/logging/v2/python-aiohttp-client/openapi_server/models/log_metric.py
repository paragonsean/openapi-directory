# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_options import BucketOptions
from openapi_server.models.metric_descriptor import MetricDescriptor
from openapi_server import util


class LogMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, bucket_options: BucketOptions=None, create_time: str=None, description: str=None, disabled: bool=None, filter: str=None, label_extractors: Dict[str, str]=None, metric_descriptor: MetricDescriptor=None, name: str=None, update_time: str=None, value_extractor: str=None, version: str=None):
        """LogMetric - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this LogMetric.
        :param bucket_options: The bucket_options of this LogMetric.
        :param create_time: The create_time of this LogMetric.
        :param description: The description of this LogMetric.
        :param disabled: The disabled of this LogMetric.
        :param filter: The filter of this LogMetric.
        :param label_extractors: The label_extractors of this LogMetric.
        :param metric_descriptor: The metric_descriptor of this LogMetric.
        :param name: The name of this LogMetric.
        :param update_time: The update_time of this LogMetric.
        :param value_extractor: The value_extractor of this LogMetric.
        :param version: The version of this LogMetric.
        """
        self.openapi_types = {
            'bucket_name': str,
            'bucket_options': BucketOptions,
            'create_time': str,
            'description': str,
            'disabled': bool,
            'filter': str,
            'label_extractors': Dict[str, str],
            'metric_descriptor': MetricDescriptor,
            'name': str,
            'update_time': str,
            'value_extractor': str,
            'version': str
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'bucket_options': 'bucketOptions',
            'create_time': 'createTime',
            'description': 'description',
            'disabled': 'disabled',
            'filter': 'filter',
            'label_extractors': 'labelExtractors',
            'metric_descriptor': 'metricDescriptor',
            'name': 'name',
            'update_time': 'updateTime',
            'value_extractor': 'valueExtractor',
            'version': 'version'
        }

        self._bucket_name = bucket_name
        self._bucket_options = bucket_options
        self._create_time = create_time
        self._description = description
        self._disabled = disabled
        self._filter = filter
        self._label_extractors = label_extractors
        self._metric_descriptor = metric_descriptor
        self._name = name
        self._update_time = update_time
        self._value_extractor = value_extractor
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogMetric of this LogMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this LogMetric.

        Optional. The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has to be in the same project as the metric.For example:projects/my-project/locations/global/buckets/my-bucketIf empty, then the Log Metric is considered a non-Bucket Log Metric.

        :return: The bucket_name of this LogMetric.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this LogMetric.

        Optional. The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has to be in the same project as the metric.For example:projects/my-project/locations/global/buckets/my-bucketIf empty, then the Log Metric is considered a non-Bucket Log Metric.

        :param bucket_name: The bucket_name of this LogMetric.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def bucket_options(self):
        """Gets the bucket_options of this LogMetric.


        :return: The bucket_options of this LogMetric.
        :rtype: BucketOptions
        """
        return self._bucket_options

    @bucket_options.setter
    def bucket_options(self, bucket_options):
        """Sets the bucket_options of this LogMetric.


        :param bucket_options: The bucket_options of this LogMetric.
        :type bucket_options: BucketOptions
        """

        self._bucket_options = bucket_options

    @property
    def create_time(self):
        """Gets the create_time of this LogMetric.

        Output only. The creation timestamp of the metric.This field may not be present for older metrics.

        :return: The create_time of this LogMetric.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LogMetric.

        Output only. The creation timestamp of the metric.This field may not be present for older metrics.

        :param create_time: The create_time of this LogMetric.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this LogMetric.

        Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.

        :return: The description of this LogMetric.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogMetric.

        Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.

        :param description: The description of this LogMetric.
        :type description: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this LogMetric.

        Optional. If set to True, then this metric is disabled and it does not generate any points.

        :return: The disabled of this LogMetric.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this LogMetric.

        Optional. If set to True, then this metric is disabled and it does not generate any points.

        :param disabled: The disabled of this LogMetric.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def filter(self):
        """Gets the filter of this LogMetric.

        Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: \"resource.type=gae_app AND severity>=ERROR\" The maximum length of the filter is 20000 characters.

        :return: The filter of this LogMetric.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LogMetric.

        Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: \"resource.type=gae_app AND severity>=ERROR\" The maximum length of the filter is 20000 characters.

        :param filter: The filter of this LogMetric.
        :type filter: str
        """

        self._filter = filter

    @property
    def label_extractors(self):
        """Gets the label_extractors of this LogMetric.

        Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.

        :return: The label_extractors of this LogMetric.
        :rtype: Dict[str, str]
        """
        return self._label_extractors

    @label_extractors.setter
    def label_extractors(self, label_extractors):
        """Sets the label_extractors of this LogMetric.

        Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.

        :param label_extractors: The label_extractors of this LogMetric.
        :type label_extractors: Dict[str, str]
        """

        self._label_extractors = label_extractors

    @property
    def metric_descriptor(self):
        """Gets the metric_descriptor of this LogMetric.


        :return: The metric_descriptor of this LogMetric.
        :rtype: MetricDescriptor
        """
        return self._metric_descriptor

    @metric_descriptor.setter
    def metric_descriptor(self, metric_descriptor):
        """Sets the metric_descriptor of this LogMetric.


        :param metric_descriptor: The metric_descriptor of this LogMetric.
        :type metric_descriptor: MetricDescriptor
        """

        self._metric_descriptor = metric_descriptor

    @property
    def name(self):
        """Gets the name of this LogMetric.

        Required. The client-assigned metric identifier. Examples: \"error_count\", \"nginx/requests\".Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format \"projects/PROJECT_ID/metrics/METRIC_ID\". Example: If the resource name of a metric is \"projects/my-project/metrics/nginx%2Frequests\", this field's value is \"nginx/requests\".

        :return: The name of this LogMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogMetric.

        Required. The client-assigned metric identifier. Examples: \"error_count\", \"nginx/requests\".Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*',()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format \"projects/PROJECT_ID/metrics/METRIC_ID\". Example: If the resource name of a metric is \"projects/my-project/metrics/nginx%2Frequests\", this field's value is \"nginx/requests\".

        :param name: The name of this LogMetric.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this LogMetric.

        Output only. The last update timestamp of the metric.This field may not be present for older metrics.

        :return: The update_time of this LogMetric.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LogMetric.

        Output only. The last update timestamp of the metric.This field may not be present for older metrics.

        :param update_time: The update_time of this LogMetric.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def value_extractor(self):
        """Gets the value_extractor of this LogMetric.

        Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The arguments are: field: The name of the log entry field from which the value is to be extracted. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, \".*quantity=(\\d+).*\")

        :return: The value_extractor of this LogMetric.
        :rtype: str
        """
        return self._value_extractor

    @value_extractor.setter
    def value_extractor(self, value_extractor):
        """Sets the value_extractor of this LogMetric.

        Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The arguments are: field: The name of the log entry field from which the value is to be extracted. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, \".*quantity=(\\d+).*\")

        :param value_extractor: The value_extractor of this LogMetric.
        :type value_extractor: str
        """

        self._value_extractor = value_extractor

    @property
    def version(self):
        """Gets the version of this LogMetric.

        Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.

        :return: The version of this LogMetric.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LogMetric.

        Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.

        :param version: The version of this LogMetric.
        :type version: str
        """
        allowed_values = ["V2", "V1"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
