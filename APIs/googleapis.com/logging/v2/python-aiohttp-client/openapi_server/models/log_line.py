# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_location import SourceLocation
from openapi_server import util


class LogLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_message: str=None, severity: str=None, source_location: SourceLocation=None, time: str=None):
        """LogLine - a model defined in OpenAPI

        :param log_message: The log_message of this LogLine.
        :param severity: The severity of this LogLine.
        :param source_location: The source_location of this LogLine.
        :param time: The time of this LogLine.
        """
        self.openapi_types = {
            'log_message': str,
            'severity': str,
            'source_location': SourceLocation,
            'time': str
        }

        self.attribute_map = {
            'log_message': 'logMessage',
            'severity': 'severity',
            'source_location': 'sourceLocation',
            'time': 'time'
        }

        self._log_message = log_message
        self._severity = severity
        self._source_location = source_location
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogLine of this LogLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_message(self):
        """Gets the log_message of this LogLine.

        App-provided log message.

        :return: The log_message of this LogLine.
        :rtype: str
        """
        return self._log_message

    @log_message.setter
    def log_message(self, log_message):
        """Sets the log_message of this LogLine.

        App-provided log message.

        :param log_message: The log_message of this LogLine.
        :type log_message: str
        """

        self._log_message = log_message

    @property
    def severity(self):
        """Gets the severity of this LogLine.

        Severity of this log entry.

        :return: The severity of this LogLine.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LogLine.

        Severity of this log entry.

        :param severity: The severity of this LogLine.
        :type severity: str
        """
        allowed_values = ["DEFAULT", "DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_location(self):
        """Gets the source_location of this LogLine.


        :return: The source_location of this LogLine.
        :rtype: SourceLocation
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this LogLine.


        :param source_location: The source_location of this LogLine.
        :type source_location: SourceLocation
        """

        self._source_location = source_location

    @property
    def time(self):
        """Gets the time of this LogLine.

        Approximate time when this log entry was made.

        :return: The time of this LogLine.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this LogLine.

        Approximate time when this log entry was made.

        :param time: The time of this LogLine.
        :type time: str
        """

        self._time = time
