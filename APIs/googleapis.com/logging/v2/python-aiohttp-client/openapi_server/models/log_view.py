# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, filter: str=None, name: str=None, update_time: str=None):
        """LogView - a model defined in OpenAPI

        :param create_time: The create_time of this LogView.
        :param description: The description of this LogView.
        :param filter: The filter of this LogView.
        :param name: The name of this LogView.
        :param update_time: The update_time of this LogView.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'filter': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'filter': 'filter',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._filter = filter
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogView of this LogView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this LogView.

        Output only. The creation timestamp of the view.

        :return: The create_time of this LogView.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LogView.

        Output only. The creation timestamp of the view.

        :param create_time: The create_time of this LogView.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this LogView.

        Optional. Describes this view.

        :return: The description of this LogView.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogView.

        Optional. Describes this view.

        :param description: The description of this LogView.
        :type description: str
        """

        self._description = description

    @property
    def filter(self):
        """Gets the filter of this LogView.

        Optional. Filter that restricts which log entries in a bucket are visible in this view.Filters must be logical conjunctions that use the AND operator, and they can use any of the following qualifiers: SOURCE(), which specifies a project, folder, organization, or billing account of origin. resource.type, which specifies the resource type. LOG_ID(), which identifies the log.They can also use the negations of these qualifiers with the NOT operator.For example:SOURCE(\"projects/myproject\") AND resource.type = \"gce_instance\" AND NOT LOG_ID(\"stdout\")

        :return: The filter of this LogView.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LogView.

        Optional. Filter that restricts which log entries in a bucket are visible in this view.Filters must be logical conjunctions that use the AND operator, and they can use any of the following qualifiers: SOURCE(), which specifies a project, folder, organization, or billing account of origin. resource.type, which specifies the resource type. LOG_ID(), which identifies the log.They can also use the negations of these qualifiers with the NOT operator.For example:SOURCE(\"projects/myproject\") AND resource.type = \"gce_instance\" AND NOT LOG_ID(\"stdout\")

        :param filter: The filter of this LogView.
        :type filter: str
        """

        self._filter = filter

    @property
    def name(self):
        """Gets the name of this LogView.

        Output only. The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view

        :return: The name of this LogView.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogView.

        Output only. The resource name of the view.For example:projects/my-project/locations/global/buckets/my-bucket/views/my-view

        :param name: The name of this LogView.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this LogView.

        Output only. The last update timestamp of the view.

        :return: The update_time of this LogView.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LogView.

        Output only. The last update timestamp of the view.

        :param update_time: The update_time of this LogView.
        :type update_time: str
        """

        self._update_time = update_time
