# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cmek_settings import CmekSettings
from openapi_server.models.index_config import IndexConfig
from openapi_server import util


class LogBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics_enabled: bool=None, cmek_settings: CmekSettings=None, create_time: str=None, description: str=None, index_configs: List[IndexConfig]=None, lifecycle_state: str=None, locked: bool=None, name: str=None, restricted_fields: List[str]=None, retention_days: int=None, update_time: str=None):
        """LogBucket - a model defined in OpenAPI

        :param analytics_enabled: The analytics_enabled of this LogBucket.
        :param cmek_settings: The cmek_settings of this LogBucket.
        :param create_time: The create_time of this LogBucket.
        :param description: The description of this LogBucket.
        :param index_configs: The index_configs of this LogBucket.
        :param lifecycle_state: The lifecycle_state of this LogBucket.
        :param locked: The locked of this LogBucket.
        :param name: The name of this LogBucket.
        :param restricted_fields: The restricted_fields of this LogBucket.
        :param retention_days: The retention_days of this LogBucket.
        :param update_time: The update_time of this LogBucket.
        """
        self.openapi_types = {
            'analytics_enabled': bool,
            'cmek_settings': CmekSettings,
            'create_time': str,
            'description': str,
            'index_configs': List[IndexConfig],
            'lifecycle_state': str,
            'locked': bool,
            'name': str,
            'restricted_fields': List[str],
            'retention_days': int,
            'update_time': str
        }

        self.attribute_map = {
            'analytics_enabled': 'analyticsEnabled',
            'cmek_settings': 'cmekSettings',
            'create_time': 'createTime',
            'description': 'description',
            'index_configs': 'indexConfigs',
            'lifecycle_state': 'lifecycleState',
            'locked': 'locked',
            'name': 'name',
            'restricted_fields': 'restrictedFields',
            'retention_days': 'retentionDays',
            'update_time': 'updateTime'
        }

        self._analytics_enabled = analytics_enabled
        self._cmek_settings = cmek_settings
        self._create_time = create_time
        self._description = description
        self._index_configs = index_configs
        self._lifecycle_state = lifecycle_state
        self._locked = locked
        self._name = name
        self._restricted_fields = restricted_fields
        self._retention_days = retention_days
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogBucket of this LogBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics_enabled(self):
        """Gets the analytics_enabled of this LogBucket.

        Optional. Whether log analytics is enabled for this bucket.Once enabled, log analytics features cannot be disabled.

        :return: The analytics_enabled of this LogBucket.
        :rtype: bool
        """
        return self._analytics_enabled

    @analytics_enabled.setter
    def analytics_enabled(self, analytics_enabled):
        """Sets the analytics_enabled of this LogBucket.

        Optional. Whether log analytics is enabled for this bucket.Once enabled, log analytics features cannot be disabled.

        :param analytics_enabled: The analytics_enabled of this LogBucket.
        :type analytics_enabled: bool
        """

        self._analytics_enabled = analytics_enabled

    @property
    def cmek_settings(self):
        """Gets the cmek_settings of this LogBucket.


        :return: The cmek_settings of this LogBucket.
        :rtype: CmekSettings
        """
        return self._cmek_settings

    @cmek_settings.setter
    def cmek_settings(self, cmek_settings):
        """Sets the cmek_settings of this LogBucket.


        :param cmek_settings: The cmek_settings of this LogBucket.
        :type cmek_settings: CmekSettings
        """

        self._cmek_settings = cmek_settings

    @property
    def create_time(self):
        """Gets the create_time of this LogBucket.

        Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.

        :return: The create_time of this LogBucket.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LogBucket.

        Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.

        :param create_time: The create_time of this LogBucket.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this LogBucket.

        Optional. Describes this bucket.

        :return: The description of this LogBucket.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogBucket.

        Optional. Describes this bucket.

        :param description: The description of this LogBucket.
        :type description: str
        """

        self._description = description

    @property
    def index_configs(self):
        """Gets the index_configs of this LogBucket.

        Optional. A list of indexed fields and related configuration data.

        :return: The index_configs of this LogBucket.
        :rtype: List[IndexConfig]
        """
        return self._index_configs

    @index_configs.setter
    def index_configs(self, index_configs):
        """Sets the index_configs of this LogBucket.

        Optional. A list of indexed fields and related configuration data.

        :param index_configs: The index_configs of this LogBucket.
        :type index_configs: List[IndexConfig]
        """

        self._index_configs = index_configs

    @property
    def lifecycle_state(self):
        """Gets the lifecycle_state of this LogBucket.

        Output only. The bucket lifecycle state.

        :return: The lifecycle_state of this LogBucket.
        :rtype: str
        """
        return self._lifecycle_state

    @lifecycle_state.setter
    def lifecycle_state(self, lifecycle_state):
        """Sets the lifecycle_state of this LogBucket.

        Output only. The bucket lifecycle state.

        :param lifecycle_state: The lifecycle_state of this LogBucket.
        :type lifecycle_state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "ACTIVE", "DELETE_REQUESTED", "UPDATING", "CREATING", "FAILED"]  # noqa: E501
        if lifecycle_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lifecycle_state` ({0}), must be one of {1}"
                .format(lifecycle_state, allowed_values)
            )

        self._lifecycle_state = lifecycle_state

    @property
    def locked(self):
        """Gets the locked of this LogBucket.

        Optional. Whether the bucket is locked.The retention period on a locked bucket cannot be changed. Locked buckets may only be deleted if they are empty.

        :return: The locked of this LogBucket.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this LogBucket.

        Optional. Whether the bucket is locked.The retention period on a locked bucket cannot be changed. Locked buckets may only be deleted if they are empty.

        :param locked: The locked of this LogBucket.
        :type locked: bool
        """

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this LogBucket.

        Output only. The resource name of the bucket.For example:projects/my-project/locations/global/buckets/my-bucketFor a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support)For the location of global it is unspecified where log entries are actually stored.After a bucket has been created, the location cannot be changed.

        :return: The name of this LogBucket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogBucket.

        Output only. The resource name of the bucket.For example:projects/my-project/locations/global/buckets/my-bucketFor a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support)For the location of global it is unspecified where log entries are actually stored.After a bucket has been created, the location cannot be changed.

        :param name: The name of this LogBucket.
        :type name: str
        """

        self._name = name

    @property
    def restricted_fields(self):
        """Gets the restricted_fields of this LogBucket.

        Optional. Log entry field paths that are denied access in this bucket.The following fields and their children are eligible: textPayload, jsonPayload, protoPayload, httpRequest, labels, sourceLocation.Restricting a repeated field will restrict all values. Adding a parent will block all child fields. (e.g. foo.bar will block foo.bar.baz)

        :return: The restricted_fields of this LogBucket.
        :rtype: List[str]
        """
        return self._restricted_fields

    @restricted_fields.setter
    def restricted_fields(self, restricted_fields):
        """Sets the restricted_fields of this LogBucket.

        Optional. Log entry field paths that are denied access in this bucket.The following fields and their children are eligible: textPayload, jsonPayload, protoPayload, httpRequest, labels, sourceLocation.Restricting a repeated field will restrict all values. Adding a parent will block all child fields. (e.g. foo.bar will block foo.bar.baz)

        :param restricted_fields: The restricted_fields of this LogBucket.
        :type restricted_fields: List[str]
        """

        self._restricted_fields = restricted_fields

    @property
    def retention_days(self):
        """Gets the retention_days of this LogBucket.

        Optional. Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.

        :return: The retention_days of this LogBucket.
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this LogBucket.

        Optional. Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.

        :param retention_days: The retention_days of this LogBucket.
        :type retention_days: int
        """

        self._retention_days = retention_days

    @property
    def update_time(self):
        """Gets the update_time of this LogBucket.

        Output only. The last update timestamp of the bucket.

        :return: The update_time of this LogBucket.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LogBucket.

        Output only. The last update timestamp of the bucket.

        :param update_time: The update_time of this LogBucket.
        :type update_time: str
        """

        self._update_time = update_time
