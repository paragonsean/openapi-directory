# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_line import LogLine
from openapi_server.models.source_reference import SourceReference
from openapi_server import util


class RequestLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_release: str=None, app_id: str=None, cost: float=None, end_time: str=None, finished: bool=None, first: bool=None, host: str=None, http_version: str=None, instance_id: str=None, instance_index: int=None, ip: str=None, latency: str=None, line: List[LogLine]=None, mega_cycles: str=None, method: str=None, module_id: str=None, nickname: str=None, pending_time: str=None, referrer: str=None, request_id: str=None, resource: str=None, response_size: str=None, source_reference: List[SourceReference]=None, span_id: str=None, start_time: str=None, status: int=None, task_name: str=None, task_queue_name: str=None, trace_id: str=None, trace_sampled: bool=None, url_map_entry: str=None, user_agent: str=None, version_id: str=None, was_loading_request: bool=None):
        """RequestLog - a model defined in OpenAPI

        :param app_engine_release: The app_engine_release of this RequestLog.
        :param app_id: The app_id of this RequestLog.
        :param cost: The cost of this RequestLog.
        :param end_time: The end_time of this RequestLog.
        :param finished: The finished of this RequestLog.
        :param first: The first of this RequestLog.
        :param host: The host of this RequestLog.
        :param http_version: The http_version of this RequestLog.
        :param instance_id: The instance_id of this RequestLog.
        :param instance_index: The instance_index of this RequestLog.
        :param ip: The ip of this RequestLog.
        :param latency: The latency of this RequestLog.
        :param line: The line of this RequestLog.
        :param mega_cycles: The mega_cycles of this RequestLog.
        :param method: The method of this RequestLog.
        :param module_id: The module_id of this RequestLog.
        :param nickname: The nickname of this RequestLog.
        :param pending_time: The pending_time of this RequestLog.
        :param referrer: The referrer of this RequestLog.
        :param request_id: The request_id of this RequestLog.
        :param resource: The resource of this RequestLog.
        :param response_size: The response_size of this RequestLog.
        :param source_reference: The source_reference of this RequestLog.
        :param span_id: The span_id of this RequestLog.
        :param start_time: The start_time of this RequestLog.
        :param status: The status of this RequestLog.
        :param task_name: The task_name of this RequestLog.
        :param task_queue_name: The task_queue_name of this RequestLog.
        :param trace_id: The trace_id of this RequestLog.
        :param trace_sampled: The trace_sampled of this RequestLog.
        :param url_map_entry: The url_map_entry of this RequestLog.
        :param user_agent: The user_agent of this RequestLog.
        :param version_id: The version_id of this RequestLog.
        :param was_loading_request: The was_loading_request of this RequestLog.
        """
        self.openapi_types = {
            'app_engine_release': str,
            'app_id': str,
            'cost': float,
            'end_time': str,
            'finished': bool,
            'first': bool,
            'host': str,
            'http_version': str,
            'instance_id': str,
            'instance_index': int,
            'ip': str,
            'latency': str,
            'line': List[LogLine],
            'mega_cycles': str,
            'method': str,
            'module_id': str,
            'nickname': str,
            'pending_time': str,
            'referrer': str,
            'request_id': str,
            'resource': str,
            'response_size': str,
            'source_reference': List[SourceReference],
            'span_id': str,
            'start_time': str,
            'status': int,
            'task_name': str,
            'task_queue_name': str,
            'trace_id': str,
            'trace_sampled': bool,
            'url_map_entry': str,
            'user_agent': str,
            'version_id': str,
            'was_loading_request': bool
        }

        self.attribute_map = {
            'app_engine_release': 'appEngineRelease',
            'app_id': 'appId',
            'cost': 'cost',
            'end_time': 'endTime',
            'finished': 'finished',
            'first': 'first',
            'host': 'host',
            'http_version': 'httpVersion',
            'instance_id': 'instanceId',
            'instance_index': 'instanceIndex',
            'ip': 'ip',
            'latency': 'latency',
            'line': 'line',
            'mega_cycles': 'megaCycles',
            'method': 'method',
            'module_id': 'moduleId',
            'nickname': 'nickname',
            'pending_time': 'pendingTime',
            'referrer': 'referrer',
            'request_id': 'requestId',
            'resource': 'resource',
            'response_size': 'responseSize',
            'source_reference': 'sourceReference',
            'span_id': 'spanId',
            'start_time': 'startTime',
            'status': 'status',
            'task_name': 'taskName',
            'task_queue_name': 'taskQueueName',
            'trace_id': 'traceId',
            'trace_sampled': 'traceSampled',
            'url_map_entry': 'urlMapEntry',
            'user_agent': 'userAgent',
            'version_id': 'versionId',
            'was_loading_request': 'wasLoadingRequest'
        }

        self._app_engine_release = app_engine_release
        self._app_id = app_id
        self._cost = cost
        self._end_time = end_time
        self._finished = finished
        self._first = first
        self._host = host
        self._http_version = http_version
        self._instance_id = instance_id
        self._instance_index = instance_index
        self._ip = ip
        self._latency = latency
        self._line = line
        self._mega_cycles = mega_cycles
        self._method = method
        self._module_id = module_id
        self._nickname = nickname
        self._pending_time = pending_time
        self._referrer = referrer
        self._request_id = request_id
        self._resource = resource
        self._response_size = response_size
        self._source_reference = source_reference
        self._span_id = span_id
        self._start_time = start_time
        self._status = status
        self._task_name = task_name
        self._task_queue_name = task_queue_name
        self._trace_id = trace_id
        self._trace_sampled = trace_sampled
        self._url_map_entry = url_map_entry
        self._user_agent = user_agent
        self._version_id = version_id
        self._was_loading_request = was_loading_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestLog of this RequestLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_release(self):
        """Gets the app_engine_release of this RequestLog.

        App Engine release version.

        :return: The app_engine_release of this RequestLog.
        :rtype: str
        """
        return self._app_engine_release

    @app_engine_release.setter
    def app_engine_release(self, app_engine_release):
        """Sets the app_engine_release of this RequestLog.

        App Engine release version.

        :param app_engine_release: The app_engine_release of this RequestLog.
        :type app_engine_release: str
        """

        self._app_engine_release = app_engine_release

    @property
    def app_id(self):
        """Gets the app_id of this RequestLog.

        Application that handled this request.

        :return: The app_id of this RequestLog.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this RequestLog.

        Application that handled this request.

        :param app_id: The app_id of this RequestLog.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def cost(self):
        """Gets the cost of this RequestLog.

        An indication of the relative cost of serving this request.

        :return: The cost of this RequestLog.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this RequestLog.

        An indication of the relative cost of serving this request.

        :param cost: The cost of this RequestLog.
        :type cost: float
        """

        self._cost = cost

    @property
    def end_time(self):
        """Gets the end_time of this RequestLog.

        Time when the request finished.

        :return: The end_time of this RequestLog.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RequestLog.

        Time when the request finished.

        :param end_time: The end_time of this RequestLog.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def finished(self):
        """Gets the finished of this RequestLog.

        Whether this request is finished or active.

        :return: The finished of this RequestLog.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this RequestLog.

        Whether this request is finished or active.

        :param finished: The finished of this RequestLog.
        :type finished: bool
        """

        self._finished = finished

    @property
    def first(self):
        """Gets the first of this RequestLog.

        Whether this is the first RequestLog entry for this request. If an active request has several RequestLog entries written to Stackdriver Logging, then this field will be set for one of them.

        :return: The first of this RequestLog.
        :rtype: bool
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this RequestLog.

        Whether this is the first RequestLog entry for this request. If an active request has several RequestLog entries written to Stackdriver Logging, then this field will be set for one of them.

        :param first: The first of this RequestLog.
        :type first: bool
        """

        self._first = first

    @property
    def host(self):
        """Gets the host of this RequestLog.

        Internet host and port number of the resource being requested.

        :return: The host of this RequestLog.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this RequestLog.

        Internet host and port number of the resource being requested.

        :param host: The host of this RequestLog.
        :type host: str
        """

        self._host = host

    @property
    def http_version(self):
        """Gets the http_version of this RequestLog.

        HTTP version of request. Example: \"HTTP/1.1\".

        :return: The http_version of this RequestLog.
        :rtype: str
        """
        return self._http_version

    @http_version.setter
    def http_version(self, http_version):
        """Sets the http_version of this RequestLog.

        HTTP version of request. Example: \"HTTP/1.1\".

        :param http_version: The http_version of this RequestLog.
        :type http_version: str
        """

        self._http_version = http_version

    @property
    def instance_id(self):
        """Gets the instance_id of this RequestLog.

        An identifier for the instance that handled the request.

        :return: The instance_id of this RequestLog.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this RequestLog.

        An identifier for the instance that handled the request.

        :param instance_id: The instance_id of this RequestLog.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_index(self):
        """Gets the instance_index of this RequestLog.

        If the instance processing this request belongs to a manually scaled module, then this is the 0-based index of the instance. Otherwise, this value is -1.

        :return: The instance_index of this RequestLog.
        :rtype: int
        """
        return self._instance_index

    @instance_index.setter
    def instance_index(self, instance_index):
        """Sets the instance_index of this RequestLog.

        If the instance processing this request belongs to a manually scaled module, then this is the 0-based index of the instance. Otherwise, this value is -1.

        :param instance_index: The instance_index of this RequestLog.
        :type instance_index: int
        """

        self._instance_index = instance_index

    @property
    def ip(self):
        """Gets the ip of this RequestLog.

        Origin IP address.

        :return: The ip of this RequestLog.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RequestLog.

        Origin IP address.

        :param ip: The ip of this RequestLog.
        :type ip: str
        """

        self._ip = ip

    @property
    def latency(self):
        """Gets the latency of this RequestLog.

        Latency of the request.

        :return: The latency of this RequestLog.
        :rtype: str
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this RequestLog.

        Latency of the request.

        :param latency: The latency of this RequestLog.
        :type latency: str
        """

        self._latency = latency

    @property
    def line(self):
        """Gets the line of this RequestLog.

        A list of log lines emitted by the application while serving this request.

        :return: The line of this RequestLog.
        :rtype: List[LogLine]
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this RequestLog.

        A list of log lines emitted by the application while serving this request.

        :param line: The line of this RequestLog.
        :type line: List[LogLine]
        """

        self._line = line

    @property
    def mega_cycles(self):
        """Gets the mega_cycles of this RequestLog.

        Number of CPU megacycles used to process request.

        :return: The mega_cycles of this RequestLog.
        :rtype: str
        """
        return self._mega_cycles

    @mega_cycles.setter
    def mega_cycles(self, mega_cycles):
        """Sets the mega_cycles of this RequestLog.

        Number of CPU megacycles used to process request.

        :param mega_cycles: The mega_cycles of this RequestLog.
        :type mega_cycles: str
        """

        self._mega_cycles = mega_cycles

    @property
    def method(self):
        """Gets the method of this RequestLog.

        Request method. Example: \"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\".

        :return: The method of this RequestLog.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this RequestLog.

        Request method. Example: \"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\".

        :param method: The method of this RequestLog.
        :type method: str
        """

        self._method = method

    @property
    def module_id(self):
        """Gets the module_id of this RequestLog.

        Module of the application that handled this request.

        :return: The module_id of this RequestLog.
        :rtype: str
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """Sets the module_id of this RequestLog.

        Module of the application that handled this request.

        :param module_id: The module_id of this RequestLog.
        :type module_id: str
        """

        self._module_id = module_id

    @property
    def nickname(self):
        """Gets the nickname of this RequestLog.

        The logged-in user who made the request.Most likely, this is the part of the user's email before the @ sign. The field value is the same for different requests from the same user, but different users can have similar names. This information is also available to the application via the App Engine Users API.This field will be populated starting with App Engine 1.9.21.

        :return: The nickname of this RequestLog.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this RequestLog.

        The logged-in user who made the request.Most likely, this is the part of the user's email before the @ sign. The field value is the same for different requests from the same user, but different users can have similar names. This information is also available to the application via the App Engine Users API.This field will be populated starting with App Engine 1.9.21.

        :param nickname: The nickname of this RequestLog.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def pending_time(self):
        """Gets the pending_time of this RequestLog.

        Time this request spent in the pending request queue.

        :return: The pending_time of this RequestLog.
        :rtype: str
        """
        return self._pending_time

    @pending_time.setter
    def pending_time(self, pending_time):
        """Sets the pending_time of this RequestLog.

        Time this request spent in the pending request queue.

        :param pending_time: The pending_time of this RequestLog.
        :type pending_time: str
        """

        self._pending_time = pending_time

    @property
    def referrer(self):
        """Gets the referrer of this RequestLog.

        Referrer URL of request.

        :return: The referrer of this RequestLog.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this RequestLog.

        Referrer URL of request.

        :param referrer: The referrer of this RequestLog.
        :type referrer: str
        """

        self._referrer = referrer

    @property
    def request_id(self):
        """Gets the request_id of this RequestLog.

        Globally unique identifier for a request, which is based on the request start time. Request IDs for requests which started later will compare greater as strings than those for requests which started earlier.

        :return: The request_id of this RequestLog.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RequestLog.

        Globally unique identifier for a request, which is based on the request start time. Request IDs for requests which started later will compare greater as strings than those for requests which started earlier.

        :param request_id: The request_id of this RequestLog.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def resource(self):
        """Gets the resource of this RequestLog.

        Contains the path and query portion of the URL that was requested. For example, if the URL was \"http://example.com/app?name=val\", the resource would be \"/app?name=val\". The fragment identifier, which is identified by the # character, is not included.

        :return: The resource of this RequestLog.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this RequestLog.

        Contains the path and query portion of the URL that was requested. For example, if the URL was \"http://example.com/app?name=val\", the resource would be \"/app?name=val\". The fragment identifier, which is identified by the # character, is not included.

        :param resource: The resource of this RequestLog.
        :type resource: str
        """

        self._resource = resource

    @property
    def response_size(self):
        """Gets the response_size of this RequestLog.

        Size in bytes sent back to client by request.

        :return: The response_size of this RequestLog.
        :rtype: str
        """
        return self._response_size

    @response_size.setter
    def response_size(self, response_size):
        """Sets the response_size of this RequestLog.

        Size in bytes sent back to client by request.

        :param response_size: The response_size of this RequestLog.
        :type response_size: str
        """

        self._response_size = response_size

    @property
    def source_reference(self):
        """Gets the source_reference of this RequestLog.

        Source code for the application that handled this request. There can be more than one source reference per deployed application if source code is distributed among multiple repositories.

        :return: The source_reference of this RequestLog.
        :rtype: List[SourceReference]
        """
        return self._source_reference

    @source_reference.setter
    def source_reference(self, source_reference):
        """Sets the source_reference of this RequestLog.

        Source code for the application that handled this request. There can be more than one source reference per deployed application if source code is distributed among multiple repositories.

        :param source_reference: The source_reference of this RequestLog.
        :type source_reference: List[SourceReference]
        """

        self._source_reference = source_reference

    @property
    def span_id(self):
        """Gets the span_id of this RequestLog.

        Stackdriver Trace span identifier for this request.

        :return: The span_id of this RequestLog.
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this RequestLog.

        Stackdriver Trace span identifier for this request.

        :param span_id: The span_id of this RequestLog.
        :type span_id: str
        """

        self._span_id = span_id

    @property
    def start_time(self):
        """Gets the start_time of this RequestLog.

        Time when the request started.

        :return: The start_time of this RequestLog.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RequestLog.

        Time when the request started.

        :param start_time: The start_time of this RequestLog.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this RequestLog.

        HTTP response status code. Example: 200, 404.

        :return: The status of this RequestLog.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RequestLog.

        HTTP response status code. Example: 200, 404.

        :param status: The status of this RequestLog.
        :type status: int
        """

        self._status = status

    @property
    def task_name(self):
        """Gets the task_name of this RequestLog.

        Task name of the request, in the case of an offline request.

        :return: The task_name of this RequestLog.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this RequestLog.

        Task name of the request, in the case of an offline request.

        :param task_name: The task_name of this RequestLog.
        :type task_name: str
        """

        self._task_name = task_name

    @property
    def task_queue_name(self):
        """Gets the task_queue_name of this RequestLog.

        Queue name of the request, in the case of an offline request.

        :return: The task_queue_name of this RequestLog.
        :rtype: str
        """
        return self._task_queue_name

    @task_queue_name.setter
    def task_queue_name(self, task_queue_name):
        """Sets the task_queue_name of this RequestLog.

        Queue name of the request, in the case of an offline request.

        :param task_queue_name: The task_queue_name of this RequestLog.
        :type task_queue_name: str
        """

        self._task_queue_name = task_queue_name

    @property
    def trace_id(self):
        """Gets the trace_id of this RequestLog.

        Stackdriver Trace identifier for this request.

        :return: The trace_id of this RequestLog.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this RequestLog.

        Stackdriver Trace identifier for this request.

        :param trace_id: The trace_id of this RequestLog.
        :type trace_id: str
        """

        self._trace_id = trace_id

    @property
    def trace_sampled(self):
        """Gets the trace_sampled of this RequestLog.

        If true, the value in the 'trace_id' field was sampled for storage in a trace backend.

        :return: The trace_sampled of this RequestLog.
        :rtype: bool
        """
        return self._trace_sampled

    @trace_sampled.setter
    def trace_sampled(self, trace_sampled):
        """Sets the trace_sampled of this RequestLog.

        If true, the value in the 'trace_id' field was sampled for storage in a trace backend.

        :param trace_sampled: The trace_sampled of this RequestLog.
        :type trace_sampled: bool
        """

        self._trace_sampled = trace_sampled

    @property
    def url_map_entry(self):
        """Gets the url_map_entry of this RequestLog.

        File or class that handled the request.

        :return: The url_map_entry of this RequestLog.
        :rtype: str
        """
        return self._url_map_entry

    @url_map_entry.setter
    def url_map_entry(self, url_map_entry):
        """Sets the url_map_entry of this RequestLog.

        File or class that handled the request.

        :param url_map_entry: The url_map_entry of this RequestLog.
        :type url_map_entry: str
        """

        self._url_map_entry = url_map_entry

    @property
    def user_agent(self):
        """Gets the user_agent of this RequestLog.

        User agent that made the request.

        :return: The user_agent of this RequestLog.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this RequestLog.

        User agent that made the request.

        :param user_agent: The user_agent of this RequestLog.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def version_id(self):
        """Gets the version_id of this RequestLog.

        Version of the application that handled this request.

        :return: The version_id of this RequestLog.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this RequestLog.

        Version of the application that handled this request.

        :param version_id: The version_id of this RequestLog.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def was_loading_request(self):
        """Gets the was_loading_request of this RequestLog.

        Whether this was a loading request for the instance.

        :return: The was_loading_request of this RequestLog.
        :rtype: bool
        """
        return self._was_loading_request

    @was_loading_request.setter
    def was_loading_request(self, was_loading_request):
        """Sets the was_loading_request of this RequestLog.

        Whether this was a loading request for the instance.

        :param was_loading_request: The was_loading_request of this RequestLog.
        :type was_loading_request: bool
        """

        self._was_loading_request = was_loading_request
