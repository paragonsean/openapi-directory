# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogExclusion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, disabled: bool=None, filter: str=None, name: str=None, update_time: str=None):
        """LogExclusion - a model defined in OpenAPI

        :param create_time: The create_time of this LogExclusion.
        :param description: The description of this LogExclusion.
        :param disabled: The disabled of this LogExclusion.
        :param filter: The filter of this LogExclusion.
        :param name: The name of this LogExclusion.
        :param update_time: The update_time of this LogExclusion.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'disabled': bool,
            'filter': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'disabled': 'disabled',
            'filter': 'filter',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._disabled = disabled
        self._filter = filter
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogExclusion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogExclusion of this LogExclusion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this LogExclusion.

        Output only. The creation timestamp of the exclusion.This field may not be present for older exclusions.

        :return: The create_time of this LogExclusion.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LogExclusion.

        Output only. The creation timestamp of the exclusion.This field may not be present for older exclusions.

        :param create_time: The create_time of this LogExclusion.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this LogExclusion.

        Optional. A description of this exclusion.

        :return: The description of this LogExclusion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogExclusion.

        Optional. A description of this exclusion.

        :param description: The description of this LogExclusion.
        :type description: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this LogExclusion.

        Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.

        :return: The disabled of this LogExclusion.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this LogExclusion.

        Optional. If set to True, then this exclusion is disabled and it does not exclude any log entries. You can update an exclusion to change the value of this field.

        :param disabled: The disabled of this LogExclusion.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def filter(self):
        """Gets the filter of this LogExclusion.

        Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)

        :return: The filter of this LogExclusion.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LogExclusion.

        Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries) that matches the log entries to be excluded. By using the sample function (https://cloud.google.com/logging/docs/view/advanced-queries#sample), you can exclude less than 100% of the matching log entries.For example, the following query matches 99% of low-severity log entries from Google Cloud Storage buckets:resource.type=gcs_bucket severity<ERROR sample(insertId, 0.99)

        :param filter: The filter of this LogExclusion.
        :type filter: str
        """

        self._filter = filter

    @property
    def name(self):
        """Gets the name of this LogExclusion.

        Output only. A client-assigned identifier, such as \"load-balancer-exclusion\". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.

        :return: The name of this LogExclusion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogExclusion.

        Output only. A client-assigned identifier, such as \"load-balancer-exclusion\". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.

        :param name: The name of this LogExclusion.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this LogExclusion.

        Output only. The last update timestamp of the exclusion.This field may not be present for older exclusions.

        :return: The update_time of this LogExclusion.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LogExclusion.

        Output only. The last update timestamp of the exclusion.This field may not be present for older exclusions.

        :param update_time: The update_time of this LogExclusion.
        :type update_time: str
        """

        self._update_time = update_time
