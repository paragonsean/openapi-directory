# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_analytics_enabled: bool=None):
        """LocationMetadata - a model defined in OpenAPI

        :param log_analytics_enabled: The log_analytics_enabled of this LocationMetadata.
        """
        self.openapi_types = {
            'log_analytics_enabled': bool
        }

        self.attribute_map = {
            'log_analytics_enabled': 'logAnalyticsEnabled'
        }

        self._log_analytics_enabled = log_analytics_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationMetadata of this LocationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_analytics_enabled(self):
        """Gets the log_analytics_enabled of this LocationMetadata.

        Indicates whether or not Log Analytics features are supported in the given location.

        :return: The log_analytics_enabled of this LocationMetadata.
        :rtype: bool
        """
        return self._log_analytics_enabled

    @log_analytics_enabled.setter
    def log_analytics_enabled(self, log_analytics_enabled):
        """Sets the log_analytics_enabled of this LocationMetadata.

        Indicates whether or not Log Analytics features are supported in the given location.

        :param log_analytics_enabled: The log_analytics_enabled of this LocationMetadata.
        :type log_analytics_enabled: bool
        """

        self._log_analytics_enabled = log_analytics_enabled
