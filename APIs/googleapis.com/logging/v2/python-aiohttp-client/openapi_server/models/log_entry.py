# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_request import HttpRequest
from openapi_server.models.log_entry_operation import LogEntryOperation
from openapi_server.models.log_entry_source_location import LogEntrySourceLocation
from openapi_server.models.log_error_group import LogErrorGroup
from openapi_server.models.log_split import LogSplit
from openapi_server.models.monitored_resource import MonitoredResource
from openapi_server.models.monitored_resource_metadata import MonitoredResourceMetadata
from openapi_server import util


class LogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_groups: List[LogErrorGroup]=None, http_request: HttpRequest=None, insert_id: str=None, json_payload: Dict[str, object]=None, labels: Dict[str, str]=None, log_name: str=None, metadata: MonitoredResourceMetadata=None, operation: LogEntryOperation=None, proto_payload: Dict[str, object]=None, receive_timestamp: str=None, resource: MonitoredResource=None, severity: str=None, source_location: LogEntrySourceLocation=None, span_id: str=None, split: LogSplit=None, text_payload: str=None, timestamp: str=None, trace: str=None, trace_sampled: bool=None):
        """LogEntry - a model defined in OpenAPI

        :param error_groups: The error_groups of this LogEntry.
        :param http_request: The http_request of this LogEntry.
        :param insert_id: The insert_id of this LogEntry.
        :param json_payload: The json_payload of this LogEntry.
        :param labels: The labels of this LogEntry.
        :param log_name: The log_name of this LogEntry.
        :param metadata: The metadata of this LogEntry.
        :param operation: The operation of this LogEntry.
        :param proto_payload: The proto_payload of this LogEntry.
        :param receive_timestamp: The receive_timestamp of this LogEntry.
        :param resource: The resource of this LogEntry.
        :param severity: The severity of this LogEntry.
        :param source_location: The source_location of this LogEntry.
        :param span_id: The span_id of this LogEntry.
        :param split: The split of this LogEntry.
        :param text_payload: The text_payload of this LogEntry.
        :param timestamp: The timestamp of this LogEntry.
        :param trace: The trace of this LogEntry.
        :param trace_sampled: The trace_sampled of this LogEntry.
        """
        self.openapi_types = {
            'error_groups': List[LogErrorGroup],
            'http_request': HttpRequest,
            'insert_id': str,
            'json_payload': Dict[str, object],
            'labels': Dict[str, str],
            'log_name': str,
            'metadata': MonitoredResourceMetadata,
            'operation': LogEntryOperation,
            'proto_payload': Dict[str, object],
            'receive_timestamp': str,
            'resource': MonitoredResource,
            'severity': str,
            'source_location': LogEntrySourceLocation,
            'span_id': str,
            'split': LogSplit,
            'text_payload': str,
            'timestamp': str,
            'trace': str,
            'trace_sampled': bool
        }

        self.attribute_map = {
            'error_groups': 'errorGroups',
            'http_request': 'httpRequest',
            'insert_id': 'insertId',
            'json_payload': 'jsonPayload',
            'labels': 'labels',
            'log_name': 'logName',
            'metadata': 'metadata',
            'operation': 'operation',
            'proto_payload': 'protoPayload',
            'receive_timestamp': 'receiveTimestamp',
            'resource': 'resource',
            'severity': 'severity',
            'source_location': 'sourceLocation',
            'span_id': 'spanId',
            'split': 'split',
            'text_payload': 'textPayload',
            'timestamp': 'timestamp',
            'trace': 'trace',
            'trace_sampled': 'traceSampled'
        }

        self._error_groups = error_groups
        self._http_request = http_request
        self._insert_id = insert_id
        self._json_payload = json_payload
        self._labels = labels
        self._log_name = log_name
        self._metadata = metadata
        self._operation = operation
        self._proto_payload = proto_payload
        self._receive_timestamp = receive_timestamp
        self._resource = resource
        self._severity = severity
        self._source_location = source_location
        self._span_id = span_id
        self._split = split
        self._text_payload = text_payload
        self._timestamp = timestamp
        self._trace = trace
        self._trace_sampled = trace_sampled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogEntry of this LogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_groups(self):
        """Gets the error_groups of this LogEntry.

        Output only. The Error Reporting (https://cloud.google.com/error-reporting) error groups associated with this LogEntry. Error Reporting sets the values for this field during error group creation.For more information, see View error details( https://cloud.google.com/error-reporting/docs/viewing-errors#view_error_details)This field isn't available during log routing (https://cloud.google.com/logging/docs/routing/overview)

        :return: The error_groups of this LogEntry.
        :rtype: List[LogErrorGroup]
        """
        return self._error_groups

    @error_groups.setter
    def error_groups(self, error_groups):
        """Sets the error_groups of this LogEntry.

        Output only. The Error Reporting (https://cloud.google.com/error-reporting) error groups associated with this LogEntry. Error Reporting sets the values for this field during error group creation.For more information, see View error details( https://cloud.google.com/error-reporting/docs/viewing-errors#view_error_details)This field isn't available during log routing (https://cloud.google.com/logging/docs/routing/overview)

        :param error_groups: The error_groups of this LogEntry.
        :type error_groups: List[LogErrorGroup]
        """

        self._error_groups = error_groups

    @property
    def http_request(self):
        """Gets the http_request of this LogEntry.


        :return: The http_request of this LogEntry.
        :rtype: HttpRequest
        """
        return self._http_request

    @http_request.setter
    def http_request(self, http_request):
        """Sets the http_request of this LogEntry.


        :param http_request: The http_request of this LogEntry.
        :type http_request: HttpRequest
        """

        self._http_request = http_request

    @property
    def insert_id(self):
        """Gets the insert_id of this LogEntry.

        Optional. A unique identifier for the log entry. If you provide a value, then Logging considers other log entries in the same project, with the same timestamp, and with the same insert_id to be duplicates which are removed in a single query result. However, there are no guarantees of de-duplication in the export of logs.If the insert_id is omitted when writing a log entry, the Logging API assigns its own unique identifier in this field.In queries, the insert_id is also used to order log entries that have the same log_name and timestamp values.

        :return: The insert_id of this LogEntry.
        :rtype: str
        """
        return self._insert_id

    @insert_id.setter
    def insert_id(self, insert_id):
        """Sets the insert_id of this LogEntry.

        Optional. A unique identifier for the log entry. If you provide a value, then Logging considers other log entries in the same project, with the same timestamp, and with the same insert_id to be duplicates which are removed in a single query result. However, there are no guarantees of de-duplication in the export of logs.If the insert_id is omitted when writing a log entry, the Logging API assigns its own unique identifier in this field.In queries, the insert_id is also used to order log entries that have the same log_name and timestamp values.

        :param insert_id: The insert_id of this LogEntry.
        :type insert_id: str
        """

        self._insert_id = insert_id

    @property
    def json_payload(self):
        """Gets the json_payload of this LogEntry.

        The log entry payload, represented as a structure that is expressed as a JSON object.

        :return: The json_payload of this LogEntry.
        :rtype: Dict[str, object]
        """
        return self._json_payload

    @json_payload.setter
    def json_payload(self, json_payload):
        """Sets the json_payload of this LogEntry.

        The log entry payload, represented as a structure that is expressed as a JSON object.

        :param json_payload: The json_payload of this LogEntry.
        :type json_payload: Dict[str, object]
        """

        self._json_payload = json_payload

    @property
    def labels(self):
        """Gets the labels of this LogEntry.

        Optional. A map of key, value pairs that provides additional information about the log entry. The labels can be user-defined or system-defined.User-defined labels are arbitrary key, value pairs that you can use to classify logs.System-defined labels are defined by GCP services for platform logs. They have two components - a service namespace component and the attribute name. For example: compute.googleapis.com/resource_name.Cloud Logging truncates label keys that exceed 512 B and label values that exceed 64 KB upon their associated log entry being written. The truncation is indicated by an ellipsis at the end of the character string.

        :return: The labels of this LogEntry.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this LogEntry.

        Optional. A map of key, value pairs that provides additional information about the log entry. The labels can be user-defined or system-defined.User-defined labels are arbitrary key, value pairs that you can use to classify logs.System-defined labels are defined by GCP services for platform logs. They have two components - a service namespace component and the attribute name. For example: compute.googleapis.com/resource_name.Cloud Logging truncates label keys that exceed 512 B and label values that exceed 64 KB upon their associated log entry being written. The truncation is indicated by an ellipsis at the end of the character string.

        :param labels: The labels of this LogEntry.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def log_name(self):
        """Gets the log_name of this LogEntry.

        Required. The resource name of the log to which this log entry belongs: \"projects/[PROJECT_ID]/logs/[LOG_ID]\" \"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\" \"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\" \"folders/[FOLDER_ID]/logs/[LOG_ID]\" A project number may be used in place of PROJECT_ID. The project number is translated to its corresponding PROJECT_ID internally and the log_name field will contain PROJECT_ID in queries and exports.[LOG_ID] must be URL-encoded within log_name. Example: \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\".[LOG_ID] must be less than 512 characters long and can only include the following characters: upper and lower case alphanumeric characters, forward-slash, underscore, hyphen, and period.For backward compatibility, if log_name begins with a forward-slash, such as /projects/..., then the log entry is processed as usual, but the forward-slash is removed. Listing the log entry will not show the leading slash and filtering for a log name with a leading slash will never return any results.

        :return: The log_name of this LogEntry.
        :rtype: str
        """
        return self._log_name

    @log_name.setter
    def log_name(self, log_name):
        """Sets the log_name of this LogEntry.

        Required. The resource name of the log to which this log entry belongs: \"projects/[PROJECT_ID]/logs/[LOG_ID]\" \"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\" \"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\" \"folders/[FOLDER_ID]/logs/[LOG_ID]\" A project number may be used in place of PROJECT_ID. The project number is translated to its corresponding PROJECT_ID internally and the log_name field will contain PROJECT_ID in queries and exports.[LOG_ID] must be URL-encoded within log_name. Example: \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\".[LOG_ID] must be less than 512 characters long and can only include the following characters: upper and lower case alphanumeric characters, forward-slash, underscore, hyphen, and period.For backward compatibility, if log_name begins with a forward-slash, such as /projects/..., then the log entry is processed as usual, but the forward-slash is removed. Listing the log entry will not show the leading slash and filtering for a log name with a leading slash will never return any results.

        :param log_name: The log_name of this LogEntry.
        :type log_name: str
        """

        self._log_name = log_name

    @property
    def metadata(self):
        """Gets the metadata of this LogEntry.


        :return: The metadata of this LogEntry.
        :rtype: MonitoredResourceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LogEntry.


        :param metadata: The metadata of this LogEntry.
        :type metadata: MonitoredResourceMetadata
        """

        self._metadata = metadata

    @property
    def operation(self):
        """Gets the operation of this LogEntry.


        :return: The operation of this LogEntry.
        :rtype: LogEntryOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this LogEntry.


        :param operation: The operation of this LogEntry.
        :type operation: LogEntryOperation
        """

        self._operation = operation

    @property
    def proto_payload(self):
        """Gets the proto_payload of this LogEntry.

        The log entry payload, represented as a protocol buffer. Some Google Cloud Platform services use this field for their log entry payloads.The following protocol buffer types are supported; user-defined types are not supported:\"type.googleapis.com/google.cloud.audit.AuditLog\" \"type.googleapis.com/google.appengine.logging.v1.RequestLog\"

        :return: The proto_payload of this LogEntry.
        :rtype: Dict[str, object]
        """
        return self._proto_payload

    @proto_payload.setter
    def proto_payload(self, proto_payload):
        """Sets the proto_payload of this LogEntry.

        The log entry payload, represented as a protocol buffer. Some Google Cloud Platform services use this field for their log entry payloads.The following protocol buffer types are supported; user-defined types are not supported:\"type.googleapis.com/google.cloud.audit.AuditLog\" \"type.googleapis.com/google.appengine.logging.v1.RequestLog\"

        :param proto_payload: The proto_payload of this LogEntry.
        :type proto_payload: Dict[str, object]
        """

        self._proto_payload = proto_payload

    @property
    def receive_timestamp(self):
        """Gets the receive_timestamp of this LogEntry.

        Output only. The time the log entry was received by Logging.

        :return: The receive_timestamp of this LogEntry.
        :rtype: str
        """
        return self._receive_timestamp

    @receive_timestamp.setter
    def receive_timestamp(self, receive_timestamp):
        """Sets the receive_timestamp of this LogEntry.

        Output only. The time the log entry was received by Logging.

        :param receive_timestamp: The receive_timestamp of this LogEntry.
        :type receive_timestamp: str
        """

        self._receive_timestamp = receive_timestamp

    @property
    def resource(self):
        """Gets the resource of this LogEntry.


        :return: The resource of this LogEntry.
        :rtype: MonitoredResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this LogEntry.


        :param resource: The resource of this LogEntry.
        :type resource: MonitoredResource
        """

        self._resource = resource

    @property
    def severity(self):
        """Gets the severity of this LogEntry.

        Optional. The severity of the log entry. The default value is LogSeverity.DEFAULT.

        :return: The severity of this LogEntry.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LogEntry.

        Optional. The severity of the log entry. The default value is LogSeverity.DEFAULT.

        :param severity: The severity of this LogEntry.
        :type severity: str
        """
        allowed_values = ["DEFAULT", "DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_location(self):
        """Gets the source_location of this LogEntry.


        :return: The source_location of this LogEntry.
        :rtype: LogEntrySourceLocation
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this LogEntry.


        :param source_location: The source_location of this LogEntry.
        :type source_location: LogEntrySourceLocation
        """

        self._source_location = source_location

    @property
    def span_id(self):
        """Gets the span_id of this LogEntry.

        Optional. The ID of the Cloud Trace (https://cloud.google.com/trace) span associated with the current operation in which the log is being written. For example, if a span has the REST resource name of \"projects/some-project/traces/some-trace/spans/some-span-id\", then the span_id field is \"some-span-id\".A Span (https://cloud.google.com/trace/docs/reference/v2/rest/v2/projects.traces/batchWrite#Span) represents a single operation within a trace. Whereas a trace may involve multiple different microservices running on multiple different machines, a span generally corresponds to a single logical operation being performed in a single instance of a microservice on one specific machine. Spans are the nodes within the tree that is a trace.Applications that are instrumented for tracing (https://cloud.google.com/trace/docs/setup) will generally assign a new, unique span ID on each incoming request. It is also common to create and record additional spans corresponding to internal processing elements as well as issuing requests to dependencies.The span ID is expected to be a 16-character, hexadecimal encoding of an 8-byte array and should not be zero. It should be unique within the trace and should, ideally, be generated in a manner that is uniformly random.Example values: 000000000000004a 7a2190356c3fc94b 0000f00300090021 d39223e101960076

        :return: The span_id of this LogEntry.
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this LogEntry.

        Optional. The ID of the Cloud Trace (https://cloud.google.com/trace) span associated with the current operation in which the log is being written. For example, if a span has the REST resource name of \"projects/some-project/traces/some-trace/spans/some-span-id\", then the span_id field is \"some-span-id\".A Span (https://cloud.google.com/trace/docs/reference/v2/rest/v2/projects.traces/batchWrite#Span) represents a single operation within a trace. Whereas a trace may involve multiple different microservices running on multiple different machines, a span generally corresponds to a single logical operation being performed in a single instance of a microservice on one specific machine. Spans are the nodes within the tree that is a trace.Applications that are instrumented for tracing (https://cloud.google.com/trace/docs/setup) will generally assign a new, unique span ID on each incoming request. It is also common to create and record additional spans corresponding to internal processing elements as well as issuing requests to dependencies.The span ID is expected to be a 16-character, hexadecimal encoding of an 8-byte array and should not be zero. It should be unique within the trace and should, ideally, be generated in a manner that is uniformly random.Example values: 000000000000004a 7a2190356c3fc94b 0000f00300090021 d39223e101960076

        :param span_id: The span_id of this LogEntry.
        :type span_id: str
        """

        self._span_id = span_id

    @property
    def split(self):
        """Gets the split of this LogEntry.


        :return: The split of this LogEntry.
        :rtype: LogSplit
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this LogEntry.


        :param split: The split of this LogEntry.
        :type split: LogSplit
        """

        self._split = split

    @property
    def text_payload(self):
        """Gets the text_payload of this LogEntry.

        The log entry payload, represented as a Unicode string (UTF-8).

        :return: The text_payload of this LogEntry.
        :rtype: str
        """
        return self._text_payload

    @text_payload.setter
    def text_payload(self, text_payload):
        """Sets the text_payload of this LogEntry.

        The log entry payload, represented as a Unicode string (UTF-8).

        :param text_payload: The text_payload of this LogEntry.
        :type text_payload: str
        """

        self._text_payload = text_payload

    @property
    def timestamp(self):
        """Gets the timestamp of this LogEntry.

        Optional. The time the event described by the log entry occurred. This time is used to compute the log entry's age and to enforce the logs retention period. If this field is omitted in a new log entry, then Logging assigns it the current time. Timestamps have nanosecond accuracy, but trailing zeros in the fractional seconds might be omitted when the timestamp is displayed.Incoming log entries must have timestamps that don't exceed the logs retention period (https://cloud.google.com/logging/quotas#logs_retention_periods) in the past, and that don't exceed 24 hours in the future. Log entries outside those time boundaries are rejected by Logging.

        :return: The timestamp of this LogEntry.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LogEntry.

        Optional. The time the event described by the log entry occurred. This time is used to compute the log entry's age and to enforce the logs retention period. If this field is omitted in a new log entry, then Logging assigns it the current time. Timestamps have nanosecond accuracy, but trailing zeros in the fractional seconds might be omitted when the timestamp is displayed.Incoming log entries must have timestamps that don't exceed the logs retention period (https://cloud.google.com/logging/quotas#logs_retention_periods) in the past, and that don't exceed 24 hours in the future. Log entries outside those time boundaries are rejected by Logging.

        :param timestamp: The timestamp of this LogEntry.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def trace(self):
        """Gets the trace of this LogEntry.

        Optional. The REST resource name of the trace being written to Cloud Trace (https://cloud.google.com/trace) in association with this log entry. For example, if your trace data is stored in the Cloud project \"my-trace-project\" and if the service that is creating the log entry receives a trace header that includes the trace ID \"12345\", then the service should use \"projects/my-trace-project/traces/12345\".The trace field provides the link between logs and traces. By using this field, you can navigate from a log entry to a trace.

        :return: The trace of this LogEntry.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this LogEntry.

        Optional. The REST resource name of the trace being written to Cloud Trace (https://cloud.google.com/trace) in association with this log entry. For example, if your trace data is stored in the Cloud project \"my-trace-project\" and if the service that is creating the log entry receives a trace header that includes the trace ID \"12345\", then the service should use \"projects/my-trace-project/traces/12345\".The trace field provides the link between logs and traces. By using this field, you can navigate from a log entry to a trace.

        :param trace: The trace of this LogEntry.
        :type trace: str
        """

        self._trace = trace

    @property
    def trace_sampled(self):
        """Gets the trace_sampled of this LogEntry.

        Optional. The sampling decision of the span associated with the log entry at the time the log entry was created. This field corresponds to the sampled flag in the W3C trace-context specification (https://www.w3.org/TR/trace-context/#sampled-flag). A non-sampled trace value is still useful as a request correlation identifier. The default is False.

        :return: The trace_sampled of this LogEntry.
        :rtype: bool
        """
        return self._trace_sampled

    @trace_sampled.setter
    def trace_sampled(self, trace_sampled):
        """Sets the trace_sampled of this LogEntry.

        Optional. The sampling decision of the span associated with the log entry at the time the log entry was created. This field corresponds to the sampled flag in the W3C trace-context specification (https://www.w3.org/TR/trace-context/#sampled-flag). A non-sampled trace value is still useful as a request correlation identifier. The default is False.

        :param trace_sampled: The trace_sampled of this LogEntry.
        :type trace_sampled: bool
        """

        self._trace_sampled = trace_sampled
