# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_exclusion import LogExclusion
from openapi_server import util


class DefaultSinkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclusions: List[LogExclusion]=None, filter: str=None, mode: str=None):
        """DefaultSinkConfig - a model defined in OpenAPI

        :param exclusions: The exclusions of this DefaultSinkConfig.
        :param filter: The filter of this DefaultSinkConfig.
        :param mode: The mode of this DefaultSinkConfig.
        """
        self.openapi_types = {
            'exclusions': List[LogExclusion],
            'filter': str,
            'mode': str
        }

        self.attribute_map = {
            'exclusions': 'exclusions',
            'filter': 'filter',
            'mode': 'mode'
        }

        self._exclusions = exclusions
        self._filter = filter
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultSinkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultSinkConfig of this DefaultSinkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclusions(self):
        """Gets the exclusions of this DefaultSinkConfig.

        Optional. Specifies the set of exclusions to be added to the _Default sink in newly created resource containers.

        :return: The exclusions of this DefaultSinkConfig.
        :rtype: List[LogExclusion]
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this DefaultSinkConfig.

        Optional. Specifies the set of exclusions to be added to the _Default sink in newly created resource containers.

        :param exclusions: The exclusions of this DefaultSinkConfig.
        :type exclusions: List[LogExclusion]
        """

        self._exclusions = exclusions

    @property
    def filter(self):
        """Gets the filter of this DefaultSinkConfig.

        Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERRORTo match all logs, don't add exclusions and use the following line as the value of filter:logName:*Cannot be empty or unset when the value of mode is OVERWRITE.

        :return: The filter of this DefaultSinkConfig.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DefaultSinkConfig.

        Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERRORTo match all logs, don't add exclusions and use the following line as the value of filter:logName:*Cannot be empty or unset when the value of mode is OVERWRITE.

        :param filter: The filter of this DefaultSinkConfig.
        :type filter: str
        """

        self._filter = filter

    @property
    def mode(self):
        """Gets the mode of this DefaultSinkConfig.

        Required. Determines the behavior to apply to the built-in _Default sink inclusion filter.Exclusions are always appended, as built-in _Default sinks have no exclusions.

        :return: The mode of this DefaultSinkConfig.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DefaultSinkConfig.

        Required. Determines the behavior to apply to the built-in _Default sink inclusion filter.Exclusions are always appended, as built-in _Default sinks have no exclusions.

        :param mode: The mode of this DefaultSinkConfig.
        :type mode: str
        """
        allowed_values = ["FILTER_WRITE_MODE_UNSPECIFIED", "APPEND", "OVERWRITE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
