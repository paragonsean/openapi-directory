# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogSplit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, total_splits: int=None, uid: str=None):
        """LogSplit - a model defined in OpenAPI

        :param index: The index of this LogSplit.
        :param total_splits: The total_splits of this LogSplit.
        :param uid: The uid of this LogSplit.
        """
        self.openapi_types = {
            'index': int,
            'total_splits': int,
            'uid': str
        }

        self.attribute_map = {
            'index': 'index',
            'total_splits': 'totalSplits',
            'uid': 'uid'
        }

        self._index = index
        self._total_splits = total_splits
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogSplit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogSplit of this LogSplit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this LogSplit.

        The index of this LogEntry in the sequence of split log entries. Log entries are given |index| values 0, 1, ..., n-1 for a sequence of n log entries.

        :return: The index of this LogSplit.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this LogSplit.

        The index of this LogEntry in the sequence of split log entries. Log entries are given |index| values 0, 1, ..., n-1 for a sequence of n log entries.

        :param index: The index of this LogSplit.
        :type index: int
        """

        self._index = index

    @property
    def total_splits(self):
        """Gets the total_splits of this LogSplit.

        The total number of log entries that the original LogEntry was split into.

        :return: The total_splits of this LogSplit.
        :rtype: int
        """
        return self._total_splits

    @total_splits.setter
    def total_splits(self, total_splits):
        """Sets the total_splits of this LogSplit.

        The total number of log entries that the original LogEntry was split into.

        :param total_splits: The total_splits of this LogSplit.
        :type total_splits: int
        """

        self._total_splits = total_splits

    @property
    def uid(self):
        """Gets the uid of this LogSplit.

        A globally unique identifier for all log entries in a sequence of split log entries. All log entries with the same |LogSplit.uid| are assumed to be part of the same sequence of split log entries.

        :return: The uid of this LogSplit.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LogSplit.

        A globally unique identifier for all log entries in a sequence of split log entries. All log entries with the same |LogSplit.uid| are assumed to be part of the same sequence of split log entries.

        :param uid: The uid of this LogSplit.
        :type uid: str
        """

        self._uid = uid
