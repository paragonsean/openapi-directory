# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_options import BigQueryOptions
from openapi_server.models.log_exclusion import LogExclusion
from openapi_server import util


class LogSink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_options: BigQueryOptions=None, create_time: str=None, description: str=None, destination: str=None, disabled: bool=None, exclusions: List[LogExclusion]=None, filter: str=None, include_children: bool=None, name: str=None, output_version_format: str=None, update_time: str=None, writer_identity: str=None):
        """LogSink - a model defined in OpenAPI

        :param bigquery_options: The bigquery_options of this LogSink.
        :param create_time: The create_time of this LogSink.
        :param description: The description of this LogSink.
        :param destination: The destination of this LogSink.
        :param disabled: The disabled of this LogSink.
        :param exclusions: The exclusions of this LogSink.
        :param filter: The filter of this LogSink.
        :param include_children: The include_children of this LogSink.
        :param name: The name of this LogSink.
        :param output_version_format: The output_version_format of this LogSink.
        :param update_time: The update_time of this LogSink.
        :param writer_identity: The writer_identity of this LogSink.
        """
        self.openapi_types = {
            'bigquery_options': BigQueryOptions,
            'create_time': str,
            'description': str,
            'destination': str,
            'disabled': bool,
            'exclusions': List[LogExclusion],
            'filter': str,
            'include_children': bool,
            'name': str,
            'output_version_format': str,
            'update_time': str,
            'writer_identity': str
        }

        self.attribute_map = {
            'bigquery_options': 'bigqueryOptions',
            'create_time': 'createTime',
            'description': 'description',
            'destination': 'destination',
            'disabled': 'disabled',
            'exclusions': 'exclusions',
            'filter': 'filter',
            'include_children': 'includeChildren',
            'name': 'name',
            'output_version_format': 'outputVersionFormat',
            'update_time': 'updateTime',
            'writer_identity': 'writerIdentity'
        }

        self._bigquery_options = bigquery_options
        self._create_time = create_time
        self._description = description
        self._destination = destination
        self._disabled = disabled
        self._exclusions = exclusions
        self._filter = filter
        self._include_children = include_children
        self._name = name
        self._output_version_format = output_version_format
        self._update_time = update_time
        self._writer_identity = writer_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogSink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogSink of this LogSink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_options(self):
        """Gets the bigquery_options of this LogSink.


        :return: The bigquery_options of this LogSink.
        :rtype: BigQueryOptions
        """
        return self._bigquery_options

    @bigquery_options.setter
    def bigquery_options(self, bigquery_options):
        """Sets the bigquery_options of this LogSink.


        :param bigquery_options: The bigquery_options of this LogSink.
        :type bigquery_options: BigQueryOptions
        """

        self._bigquery_options = bigquery_options

    @property
    def create_time(self):
        """Gets the create_time of this LogSink.

        Output only. The creation timestamp of the sink.This field may not be present for older sinks.

        :return: The create_time of this LogSink.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LogSink.

        Output only. The creation timestamp of the sink.This field may not be present for older sinks.

        :param create_time: The create_time of this LogSink.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this LogSink.

        Optional. A description of this sink.The maximum length of the description is 8000 characters.

        :return: The description of this LogSink.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogSink.

        Optional. A description of this sink.The maximum length of the description is 8000 characters.

        :param description: The description of this LogSink.
        :type description: str
        """

        self._description = description

    @property
    def destination(self):
        """Gets the destination of this LogSink.

        Required. The export destination: \"storage.googleapis.com/[GCS_BUCKET]\" \"bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]\" \"pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]\" \"logging.googleapis.com/projects/[PROJECT_ID]\" \"logging.googleapis.com/projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]\" The sink's writer_identity, set when the sink is created, must have permission to write to the destination or else the log entries are not exported. For more information, see Exporting Logs with Sinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).

        :return: The destination of this LogSink.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this LogSink.

        Required. The export destination: \"storage.googleapis.com/[GCS_BUCKET]\" \"bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]\" \"pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]\" \"logging.googleapis.com/projects/[PROJECT_ID]\" \"logging.googleapis.com/projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]\" The sink's writer_identity, set when the sink is created, must have permission to write to the destination or else the log entries are not exported. For more information, see Exporting Logs with Sinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).

        :param destination: The destination of this LogSink.
        :type destination: str
        """

        self._destination = destination

    @property
    def disabled(self):
        """Gets the disabled of this LogSink.

        Optional. If set to true, then this sink is disabled and it does not export any log entries.

        :return: The disabled of this LogSink.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this LogSink.

        Optional. If set to true, then this sink is disabled and it does not export any log entries.

        :param disabled: The disabled of this LogSink.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def exclusions(self):
        """Gets the exclusions of this LogSink.

        Optional. Log entries that match any of these exclusion filters will not be exported.If a log entry is matched by both filter and one of exclusion_filters it will not be exported.

        :return: The exclusions of this LogSink.
        :rtype: List[LogExclusion]
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this LogSink.

        Optional. Log entries that match any of these exclusion filters will not be exported.If a log entry is matched by both filter and one of exclusion_filters it will not be exported.

        :param exclusions: The exclusions of this LogSink.
        :type exclusions: List[LogExclusion]
        """

        self._exclusions = exclusions

    @property
    def filter(self):
        """Gets the filter of this LogSink.

        Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERROR

        :return: The filter of this LogSink.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LogSink.

        Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERROR

        :param filter: The filter of this LogSink.
        :type filter: str
        """

        self._filter = filter

    @property
    def include_children(self):
        """Gets the include_children of this LogSink.

        Optional. This field applies only to sinks owned by organizations and folders. If the field is false, the default, only the logs owned by the sink's parent resource are available for export. If the field is true, then log entries from all the projects, folders, and billing accounts contained in the sink's parent resource are also available for export. Whether a particular log entry from the children is exported depends on the sink's filter expression.For example, if this field is true, then the filter resource.type=gce_instance would export all Compute Engine VM instance log entries from all projects in the sink's parent.To only export entries from certain child projects, filter on the project part of the log name:logName:(\"projects/test-project1/\" OR \"projects/test-project2/\") AND resource.type=gce_instance

        :return: The include_children of this LogSink.
        :rtype: bool
        """
        return self._include_children

    @include_children.setter
    def include_children(self, include_children):
        """Sets the include_children of this LogSink.

        Optional. This field applies only to sinks owned by organizations and folders. If the field is false, the default, only the logs owned by the sink's parent resource are available for export. If the field is true, then log entries from all the projects, folders, and billing accounts contained in the sink's parent resource are also available for export. Whether a particular log entry from the children is exported depends on the sink's filter expression.For example, if this field is true, then the filter resource.type=gce_instance would export all Compute Engine VM instance log entries from all projects in the sink's parent.To only export entries from certain child projects, filter on the project part of the log name:logName:(\"projects/test-project1/\" OR \"projects/test-project2/\") AND resource.type=gce_instance

        :param include_children: The include_children of this LogSink.
        :type include_children: bool
        """

        self._include_children = include_children

    @property
    def name(self):
        """Gets the name of this LogSink.

        Output only. The client-assigned sink identifier, unique within the project.For example: \"my-syslog-errors-to-pubsub\".Sink identifiers are limited to 100 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, periods.First character has to be alphanumeric.

        :return: The name of this LogSink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogSink.

        Output only. The client-assigned sink identifier, unique within the project.For example: \"my-syslog-errors-to-pubsub\".Sink identifiers are limited to 100 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, periods.First character has to be alphanumeric.

        :param name: The name of this LogSink.
        :type name: str
        """

        self._name = name

    @property
    def output_version_format(self):
        """Gets the output_version_format of this LogSink.

        Deprecated. This field is unused.

        :return: The output_version_format of this LogSink.
        :rtype: str
        """
        return self._output_version_format

    @output_version_format.setter
    def output_version_format(self, output_version_format):
        """Sets the output_version_format of this LogSink.

        Deprecated. This field is unused.

        :param output_version_format: The output_version_format of this LogSink.
        :type output_version_format: str
        """
        allowed_values = ["VERSION_FORMAT_UNSPECIFIED", "V2", "V1"]  # noqa: E501
        if output_version_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_version_format` ({0}), must be one of {1}"
                .format(output_version_format, allowed_values)
            )

        self._output_version_format = output_version_format

    @property
    def update_time(self):
        """Gets the update_time of this LogSink.

        Output only. The last update timestamp of the sink.This field may not be present for older sinks.

        :return: The update_time of this LogSink.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LogSink.

        Output only. The last update timestamp of the sink.This field may not be present for older sinks.

        :param update_time: The update_time of this LogSink.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def writer_identity(self):
        """Gets the writer_identity of this LogSink.

        Output only. An IAM identity—a service account or group—under which Cloud Logging writes the exported log entries to the sink's destination. This field is either set by specifying custom_writer_identity or set automatically by sinks.create and sinks.update based on the value of unique_writer_identity in those methods.Until you grant this identity write-access to the destination, log entry exports from this sink will fail. For more information, see Granting Access for a Resource (https://cloud.google.com/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource). Consult the destination service's documentation to determine the appropriate IAM roles to assign to the identity.Sinks that have a destination that is a log bucket in the same project as the sink cannot have a writer_identity and no additional permissions are required.

        :return: The writer_identity of this LogSink.
        :rtype: str
        """
        return self._writer_identity

    @writer_identity.setter
    def writer_identity(self, writer_identity):
        """Sets the writer_identity of this LogSink.

        Output only. An IAM identity—a service account or group—under which Cloud Logging writes the exported log entries to the sink's destination. This field is either set by specifying custom_writer_identity or set automatically by sinks.create and sinks.update based on the value of unique_writer_identity in those methods.Until you grant this identity write-access to the destination, log entry exports from this sink will fail. For more information, see Granting Access for a Resource (https://cloud.google.com/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource). Consult the destination service's documentation to determine the appropriate IAM roles to assign to the identity.Sinks that have a destination that is a log bucket in the same project as the sink cannot have a writer_identity and no additional permissions are required.

        :param writer_identity: The writer_identity of this LogSink.
        :type writer_identity: str
        """

        self._writer_identity = writer_identity
