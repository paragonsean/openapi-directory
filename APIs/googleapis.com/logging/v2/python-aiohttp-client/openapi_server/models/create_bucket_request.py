# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_bucket import LogBucket
from openapi_server import util


class CreateBucketRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: LogBucket=None, bucket_id: str=None, parent: str=None):
        """CreateBucketRequest - a model defined in OpenAPI

        :param bucket: The bucket of this CreateBucketRequest.
        :param bucket_id: The bucket_id of this CreateBucketRequest.
        :param parent: The parent of this CreateBucketRequest.
        """
        self.openapi_types = {
            'bucket': LogBucket,
            'bucket_id': str,
            'parent': str
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'bucket_id': 'bucketId',
            'parent': 'parent'
        }

        self._bucket = bucket
        self._bucket_id = bucket_id
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBucketRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBucketRequest of this CreateBucketRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this CreateBucketRequest.


        :return: The bucket of this CreateBucketRequest.
        :rtype: LogBucket
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CreateBucketRequest.


        :param bucket: The bucket of this CreateBucketRequest.
        :type bucket: LogBucket
        """

        self._bucket = bucket

    @property
    def bucket_id(self):
        """Gets the bucket_id of this CreateBucketRequest.

        Required. A client-assigned identifier such as \"my-bucket\". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods.

        :return: The bucket_id of this CreateBucketRequest.
        :rtype: str
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this CreateBucketRequest.

        Required. A client-assigned identifier such as \"my-bucket\". Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods.

        :param bucket_id: The bucket_id of this CreateBucketRequest.
        :type bucket_id: str
        """

        self._bucket_id = bucket_id

    @property
    def parent(self):
        """Gets the parent of this CreateBucketRequest.

        Required. The resource in which to create the log bucket: \"projects/[PROJECT_ID]/locations/[LOCATION_ID]\" For example:\"projects/my-project/locations/global\"

        :return: The parent of this CreateBucketRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CreateBucketRequest.

        Required. The resource in which to create the log bucket: \"projects/[PROJECT_ID]/locations/[LOCATION_ID]\" For example:\"projects/my-project/locations/global\"

        :param parent: The parent of this CreateBucketRequest.
        :type parent: str
        """

        self._parent = parent
