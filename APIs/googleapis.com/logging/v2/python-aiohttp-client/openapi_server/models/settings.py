# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.default_sink_config import DefaultSinkConfig
from openapi_server import util


class Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_sink_config: DefaultSinkConfig=None, disable_default_sink: bool=None, kms_key_name: str=None, kms_service_account_id: str=None, logging_service_account_id: str=None, name: str=None, storage_location: str=None):
        """Settings - a model defined in OpenAPI

        :param default_sink_config: The default_sink_config of this Settings.
        :param disable_default_sink: The disable_default_sink of this Settings.
        :param kms_key_name: The kms_key_name of this Settings.
        :param kms_service_account_id: The kms_service_account_id of this Settings.
        :param logging_service_account_id: The logging_service_account_id of this Settings.
        :param name: The name of this Settings.
        :param storage_location: The storage_location of this Settings.
        """
        self.openapi_types = {
            'default_sink_config': DefaultSinkConfig,
            'disable_default_sink': bool,
            'kms_key_name': str,
            'kms_service_account_id': str,
            'logging_service_account_id': str,
            'name': str,
            'storage_location': str
        }

        self.attribute_map = {
            'default_sink_config': 'defaultSinkConfig',
            'disable_default_sink': 'disableDefaultSink',
            'kms_key_name': 'kmsKeyName',
            'kms_service_account_id': 'kmsServiceAccountId',
            'logging_service_account_id': 'loggingServiceAccountId',
            'name': 'name',
            'storage_location': 'storageLocation'
        }

        self._default_sink_config = default_sink_config
        self._disable_default_sink = disable_default_sink
        self._kms_key_name = kms_key_name
        self._kms_service_account_id = kms_service_account_id
        self._logging_service_account_id = logging_service_account_id
        self._name = name
        self._storage_location = storage_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings of this Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_sink_config(self):
        """Gets the default_sink_config of this Settings.


        :return: The default_sink_config of this Settings.
        :rtype: DefaultSinkConfig
        """
        return self._default_sink_config

    @default_sink_config.setter
    def default_sink_config(self, default_sink_config):
        """Sets the default_sink_config of this Settings.


        :param default_sink_config: The default_sink_config of this Settings.
        :type default_sink_config: DefaultSinkConfig
        """

        self._default_sink_config = default_sink_config

    @property
    def disable_default_sink(self):
        """Gets the disable_default_sink of this Settings.

        Optional. If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.

        :return: The disable_default_sink of this Settings.
        :rtype: bool
        """
        return self._disable_default_sink

    @disable_default_sink.setter
    def disable_default_sink(self, disable_default_sink):
        """Sets the disable_default_sink of this Settings.

        Optional. If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.

        :param disable_default_sink: The disable_default_sink of this Settings.
        :type disable_default_sink: bool
        """

        self._disable_default_sink = disable_default_sink

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this Settings.

        Optional. The resource name for the configured Cloud KMS key.KMS key name format: \"projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]\" For example:\"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key\"To enable CMEK, set this field to a valid kms_key_name for which the associated service account has the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key.The Cloud KMS key used by the Log Router can be updated by changing the kms_key_name to a new valid key name.To disable CMEK for the Log Router, set this field to an empty string.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.

        :return: The kms_key_name of this Settings.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this Settings.

        Optional. The resource name for the configured Cloud KMS key.KMS key name format: \"projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]\" For example:\"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key\"To enable CMEK, set this field to a valid kms_key_name for which the associated service account has the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key.The Cloud KMS key used by the Log Router can be updated by changing the kms_key_name to a new valid key name.To disable CMEK for the Log Router, set this field to an empty string.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.

        :param kms_key_name: The kms_key_name of this Settings.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def kms_service_account_id(self):
        """Gets the kms_service_account_id of this Settings.

        Output only. The service account that will be used by the Log Router to access your Cloud KMS key.Before enabling CMEK, you must first assign the role roles/cloudkms.cryptoKeyEncrypterDecrypter to the service account that will be used to access your Cloud KMS key. Use GetSettings to obtain the service account ID.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.

        :return: The kms_service_account_id of this Settings.
        :rtype: str
        """
        return self._kms_service_account_id

    @kms_service_account_id.setter
    def kms_service_account_id(self, kms_service_account_id):
        """Sets the kms_service_account_id of this Settings.

        Output only. The service account that will be used by the Log Router to access your Cloud KMS key.Before enabling CMEK, you must first assign the role roles/cloudkms.cryptoKeyEncrypterDecrypter to the service account that will be used to access your Cloud KMS key. Use GetSettings to obtain the service account ID.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.

        :param kms_service_account_id: The kms_service_account_id of this Settings.
        :type kms_service_account_id: str
        """

        self._kms_service_account_id = kms_service_account_id

    @property
    def logging_service_account_id(self):
        """Gets the logging_service_account_id of this Settings.

        Output only. The service account for the given resource container, such as project or folder. Log sinks use this service account as their writer_identity if no custom service account is provided in the request when calling the create sink method.

        :return: The logging_service_account_id of this Settings.
        :rtype: str
        """
        return self._logging_service_account_id

    @logging_service_account_id.setter
    def logging_service_account_id(self, logging_service_account_id):
        """Sets the logging_service_account_id of this Settings.

        Output only. The service account for the given resource container, such as project or folder. Log sinks use this service account as their writer_identity if no custom service account is provided in the request when calling the create sink method.

        :param logging_service_account_id: The logging_service_account_id of this Settings.
        :type logging_service_account_id: str
        """

        self._logging_service_account_id = logging_service_account_id

    @property
    def name(self):
        """Gets the name of this Settings.

        Output only. The resource name of the settings.

        :return: The name of this Settings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Settings.

        Output only. The resource name of the settings.

        :param name: The name of this Settings.
        :type name: str
        """

        self._name = name

    @property
    def storage_location(self):
        """Gets the storage_location of this Settings.

        Optional. The storage location for the _Default and _Required log buckets of newly created projects and folders, unless the storage location is explicitly provided.Example value: europe-west1.Note: this setting does not affect the location of resources where a location is explicitly provided when created, such as custom log buckets.

        :return: The storage_location of this Settings.
        :rtype: str
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this Settings.

        Optional. The storage location for the _Default and _Required log buckets of newly created projects and folders, unless the storage location is explicitly provided.Example value: europe-west1.Note: this setting does not affect the location of resources where a location is explicitly provided when created, such as custom log buckets.

        :param storage_location: The storage_location of this Settings.
        :type storage_location: str
        """

        self._storage_location = storage_location
