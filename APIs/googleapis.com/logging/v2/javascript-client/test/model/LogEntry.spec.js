/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudLoggingApi);
  }
}(this, function(expect, CloudLoggingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudLoggingApi.LogEntry();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LogEntry', function() {
    it('should create an instance of LogEntry', function() {
      // uncomment below and update the code to test LogEntry
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be.a(CloudLoggingApi.LogEntry);
    });

    it('should have the property errorGroups (base name: "errorGroups")', function() {
      // uncomment below and update the code to test the property errorGroups
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property httpRequest (base name: "httpRequest")', function() {
      // uncomment below and update the code to test the property httpRequest
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property insertId (base name: "insertId")', function() {
      // uncomment below and update the code to test the property insertId
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property jsonPayload (base name: "jsonPayload")', function() {
      // uncomment below and update the code to test the property jsonPayload
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property logName (base name: "logName")', function() {
      // uncomment below and update the code to test the property logName
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property operation (base name: "operation")', function() {
      // uncomment below and update the code to test the property operation
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property protoPayload (base name: "protoPayload")', function() {
      // uncomment below and update the code to test the property protoPayload
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property receiveTimestamp (base name: "receiveTimestamp")', function() {
      // uncomment below and update the code to test the property receiveTimestamp
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property resource (base name: "resource")', function() {
      // uncomment below and update the code to test the property resource
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property severity (base name: "severity")', function() {
      // uncomment below and update the code to test the property severity
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property sourceLocation (base name: "sourceLocation")', function() {
      // uncomment below and update the code to test the property sourceLocation
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property spanId (base name: "spanId")', function() {
      // uncomment below and update the code to test the property spanId
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property split (base name: "split")', function() {
      // uncomment below and update the code to test the property split
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property textPayload (base name: "textPayload")', function() {
      // uncomment below and update the code to test the property textPayload
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property trace (base name: "trace")', function() {
      // uncomment below and update the code to test the property trace
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

    it('should have the property traceSampled (base name: "traceSampled")', function() {
      // uncomment below and update the code to test the property traceSampled
      //var instance = new CloudLoggingApi.LogEntry();
      //expect(instance).to.be();
    });

  });

}));
