/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BigQueryOptions model module.
 * @module model/BigQueryOptions
 * @version v2
 */
class BigQueryOptions {
    /**
     * Constructs a new <code>BigQueryOptions</code>.
     * Options that change functionality of a sink exporting data to BigQuery.
     * @alias module:model/BigQueryOptions
     */
    constructor() { 
        
        BigQueryOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigQueryOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigQueryOptions} obj Optional instance to populate.
     * @return {module:model/BigQueryOptions} The populated <code>BigQueryOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigQueryOptions();

            if (data.hasOwnProperty('usePartitionedTables')) {
                obj['usePartitionedTables'] = ApiClient.convertToType(data['usePartitionedTables'], 'Boolean');
            }
            if (data.hasOwnProperty('usesTimestampColumnPartitioning')) {
                obj['usesTimestampColumnPartitioning'] = ApiClient.convertToType(data['usesTimestampColumnPartitioning'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigQueryOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigQueryOptions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Optional. Whether to use BigQuery's partition tables (https://cloud.google.com/bigquery/docs/partitioned-tables). By default, Cloud Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned tables the date suffix is no longer present and special query syntax (https://cloud.google.com/bigquery/docs/querying-partitioned-tables) has to be used instead. In both cases, tables are sharded based on UTC timezone.
 * @member {Boolean} usePartitionedTables
 */
BigQueryOptions.prototype['usePartitionedTables'] = undefined;

/**
 * Output only. True if new timestamp column based partitioning is in use, false if legacy ingress-time partitioning is in use.All new sinks will have this field set true and will use timestamp column based partitioning. If use_partitioned_tables is false, this value has no meaning and will be false. Legacy sinks using partitioned tables will have this field set to false.
 * @member {Boolean} usesTimestampColumnPartitioning
 */
BigQueryOptions.prototype['usesTimestampColumnPartitioning'] = undefined;






export default BigQueryOptions;

