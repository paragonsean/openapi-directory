/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogSplit model module.
 * @module model/LogSplit
 * @version v2
 */
class LogSplit {
    /**
     * Constructs a new <code>LogSplit</code>.
     * Additional information used to correlate multiple log entries. Used when a single LogEntry would exceed the Google Cloud Logging size limit and is split across multiple log entries.
     * @alias module:model/LogSplit
     */
    constructor() { 
        
        LogSplit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogSplit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogSplit} obj Optional instance to populate.
     * @return {module:model/LogSplit} The populated <code>LogSplit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogSplit();

            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('totalSplits')) {
                obj['totalSplits'] = ApiClient.convertToType(data['totalSplits'], 'Number');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogSplit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogSplit</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * The index of this LogEntry in the sequence of split log entries. Log entries are given |index| values 0, 1, ..., n-1 for a sequence of n log entries.
 * @member {Number} index
 */
LogSplit.prototype['index'] = undefined;

/**
 * The total number of log entries that the original LogEntry was split into.
 * @member {Number} totalSplits
 */
LogSplit.prototype['totalSplits'] = undefined;

/**
 * A globally unique identifier for all log entries in a sequence of split log entries. All log entries with the same |LogSplit.uid| are assumed to be part of the same sequence of split log entries.
 * @member {String} uid
 */
LogSplit.prototype['uid'] = undefined;






export default LogSplit;

