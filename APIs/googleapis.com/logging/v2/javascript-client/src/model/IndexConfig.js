/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IndexConfig model module.
 * @module model/IndexConfig
 * @version v2
 */
class IndexConfig {
    /**
     * Constructs a new <code>IndexConfig</code>.
     * Configuration for an indexed field.
     * @alias module:model/IndexConfig
     */
    constructor() { 
        
        IndexConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IndexConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexConfig} obj Optional instance to populate.
     * @return {module:model/IndexConfig} The populated <code>IndexConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexConfig();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('fieldPath')) {
                obj['fieldPath'] = ApiClient.convertToType(data['fieldPath'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['fieldPath'] && !(typeof data['fieldPath'] === 'string' || data['fieldPath'] instanceof String)) {
            throw new Error("Expected the field `fieldPath` to be a primitive type in the JSON string but got " + data['fieldPath']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the index was last modified.This is used to return the timestamp, and will be ignored if supplied during update.
 * @member {String} createTime
 */
IndexConfig.prototype['createTime'] = undefined;

/**
 * Required. The LogEntry field path to index.Note that some paths are automatically indexed, and other paths are not eligible for indexing. See indexing documentation( https://cloud.google.com/logging/docs/view/advanced-queries#indexed-fields) for details.For example: jsonPayload.request.status
 * @member {String} fieldPath
 */
IndexConfig.prototype['fieldPath'] = undefined;

/**
 * Required. The type of data in this index.
 * @member {module:model/IndexConfig.TypeEnum} type
 */
IndexConfig.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IndexConfig['TypeEnum'] = {

    /**
     * value: "INDEX_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "INDEX_TYPE_UNSPECIFIED",

    /**
     * value: "INDEX_TYPE_STRING"
     * @const
     */
    "STRING": "INDEX_TYPE_STRING",

    /**
     * value: "INDEX_TYPE_INTEGER"
     * @const
     */
    "INTEGER": "INDEX_TYPE_INTEGER"
};



export default IndexConfig;

