/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoggingQuery from './LoggingQuery';
import OpsAnalyticsQuery from './OpsAnalyticsQuery';

/**
 * The SavedQuery model module.
 * @module model/SavedQuery
 * @version v2
 */
class SavedQuery {
    /**
     * Constructs a new <code>SavedQuery</code>.
     * Describes a query that has been saved by a user.
     * @alias module:model/SavedQuery
     */
    constructor() { 
        
        SavedQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SavedQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SavedQuery} obj Optional instance to populate.
     * @return {module:model/SavedQuery} The populated <code>SavedQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SavedQuery();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('loggingQuery')) {
                obj['loggingQuery'] = LoggingQuery.constructFromObject(data['loggingQuery']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('opsAnalyticsQuery')) {
                obj['opsAnalyticsQuery'] = OpsAnalyticsQuery.constructFromObject(data['opsAnalyticsQuery']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SavedQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SavedQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `loggingQuery`
        if (data['loggingQuery']) { // data not null
          LoggingQuery.validateJSON(data['loggingQuery']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `opsAnalyticsQuery`
        if (data['opsAnalyticsQuery']) { // data not null
          OpsAnalyticsQuery.validateJSON(data['opsAnalyticsQuery']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the saved query was created.
 * @member {String} createTime
 */
SavedQuery.prototype['createTime'] = undefined;

/**
 * Optional. A human readable description of the saved query.
 * @member {String} description
 */
SavedQuery.prototype['description'] = undefined;

/**
 * Optional. The user specified title for the SavedQuery.
 * @member {String} displayName
 */
SavedQuery.prototype['displayName'] = undefined;

/**
 * @member {module:model/LoggingQuery} loggingQuery
 */
SavedQuery.prototype['loggingQuery'] = undefined;

/**
 * Output only. Resource name of the saved query.In the format: \"projects/[PROJECT_ID]/locations/[LOCATION_ID]/savedQueries/[QUERY_ID]\" For a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support#bucket-regions)After the saved query is created, the location cannot be changed.If the user doesn't provide a QUERY_ID, the system will generate an alphanumeric ID.
 * @member {String} name
 */
SavedQuery.prototype['name'] = undefined;

/**
 * @member {module:model/OpsAnalyticsQuery} opsAnalyticsQuery
 */
SavedQuery.prototype['opsAnalyticsQuery'] = undefined;

/**
 * Output only. The timestamp when the saved query was last updated.
 * @member {String} updateTime
 */
SavedQuery.prototype['updateTime'] = undefined;

/**
 * Required. The visibility status of this query, which determines its ownership.
 * @member {module:model/SavedQuery.VisibilityEnum} visibility
 */
SavedQuery.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
SavedQuery['VisibilityEnum'] = {

    /**
     * value: "VISIBILITY_UNSPECIFIED"
     * @const
     */
    "VISIBILITY_UNSPECIFIED": "VISIBILITY_UNSPECIFIED",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE",

    /**
     * value: "SHARED"
     * @const
     */
    "SHARED": "SHARED"
};



export default SavedQuery;

