/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DefaultSinkConfig from './DefaultSinkConfig';

/**
 * The Settings model module.
 * @module model/Settings
 * @version v2
 */
class Settings {
    /**
     * Constructs a new <code>Settings</code>.
     * Describes the settings associated with a project, folder, organization, or billing account.
     * @alias module:model/Settings
     */
    constructor() { 
        
        Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Settings} obj Optional instance to populate.
     * @return {module:model/Settings} The populated <code>Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Settings();

            if (data.hasOwnProperty('defaultSinkConfig')) {
                obj['defaultSinkConfig'] = DefaultSinkConfig.constructFromObject(data['defaultSinkConfig']);
            }
            if (data.hasOwnProperty('disableDefaultSink')) {
                obj['disableDefaultSink'] = ApiClient.convertToType(data['disableDefaultSink'], 'Boolean');
            }
            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('kmsServiceAccountId')) {
                obj['kmsServiceAccountId'] = ApiClient.convertToType(data['kmsServiceAccountId'], 'String');
            }
            if (data.hasOwnProperty('loggingServiceAccountId')) {
                obj['loggingServiceAccountId'] = ApiClient.convertToType(data['loggingServiceAccountId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('storageLocation')) {
                obj['storageLocation'] = ApiClient.convertToType(data['storageLocation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `defaultSinkConfig`
        if (data['defaultSinkConfig']) { // data not null
          DefaultSinkConfig.validateJSON(data['defaultSinkConfig']);
        }
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // ensure the json data is a string
        if (data['kmsServiceAccountId'] && !(typeof data['kmsServiceAccountId'] === 'string' || data['kmsServiceAccountId'] instanceof String)) {
            throw new Error("Expected the field `kmsServiceAccountId` to be a primitive type in the JSON string but got " + data['kmsServiceAccountId']);
        }
        // ensure the json data is a string
        if (data['loggingServiceAccountId'] && !(typeof data['loggingServiceAccountId'] === 'string' || data['loggingServiceAccountId'] instanceof String)) {
            throw new Error("Expected the field `loggingServiceAccountId` to be a primitive type in the JSON string but got " + data['loggingServiceAccountId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['storageLocation'] && !(typeof data['storageLocation'] === 'string' || data['storageLocation'] instanceof String)) {
            throw new Error("Expected the field `storageLocation` to be a primitive type in the JSON string but got " + data['storageLocation']);
        }

        return true;
    }


}



/**
 * @member {module:model/DefaultSinkConfig} defaultSinkConfig
 */
Settings.prototype['defaultSinkConfig'] = undefined;

/**
 * Optional. If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
 * @member {Boolean} disableDefaultSink
 */
Settings.prototype['disableDefaultSink'] = undefined;

/**
 * Optional. The resource name for the configured Cloud KMS key.KMS key name format: \"projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]\" For example:\"projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key\"To enable CMEK, set this field to a valid kms_key_name for which the associated service account has the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key.The Cloud KMS key used by the Log Router can be updated by changing the kms_key_name to a new valid key name.To disable CMEK for the Log Router, set this field to an empty string.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
 * @member {String} kmsKeyName
 */
Settings.prototype['kmsKeyName'] = undefined;

/**
 * Output only. The service account that will be used by the Log Router to access your Cloud KMS key.Before enabling CMEK, you must first assign the role roles/cloudkms.cryptoKeyEncrypterDecrypter to the service account that will be used to access your Cloud KMS key. Use GetSettings to obtain the service account ID.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
 * @member {String} kmsServiceAccountId
 */
Settings.prototype['kmsServiceAccountId'] = undefined;

/**
 * Output only. The service account for the given resource container, such as project or folder. Log sinks use this service account as their writer_identity if no custom service account is provided in the request when calling the create sink method.
 * @member {String} loggingServiceAccountId
 */
Settings.prototype['loggingServiceAccountId'] = undefined;

/**
 * Output only. The resource name of the settings.
 * @member {String} name
 */
Settings.prototype['name'] = undefined;

/**
 * Optional. The storage location for the _Default and _Required log buckets of newly created projects and folders, unless the storage location is explicitly provided.Example value: europe-west1.Note: this setting does not affect the location of resources where a location is explicitly provided when created, such as custom log buckets.
 * @member {String} storageLocation
 */
Settings.prototype['storageLocation'] = undefined;






export default Settings;

