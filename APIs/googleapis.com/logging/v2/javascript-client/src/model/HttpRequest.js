/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpRequest model module.
 * @module model/HttpRequest
 * @version v2
 */
class HttpRequest {
    /**
     * Constructs a new <code>HttpRequest</code>.
     * A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
     * @alias module:model/HttpRequest
     */
    constructor() { 
        
        HttpRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRequest} obj Optional instance to populate.
     * @return {module:model/HttpRequest} The populated <code>HttpRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRequest();

            if (data.hasOwnProperty('cacheFillBytes')) {
                obj['cacheFillBytes'] = ApiClient.convertToType(data['cacheFillBytes'], 'String');
            }
            if (data.hasOwnProperty('cacheHit')) {
                obj['cacheHit'] = ApiClient.convertToType(data['cacheHit'], 'Boolean');
            }
            if (data.hasOwnProperty('cacheLookup')) {
                obj['cacheLookup'] = ApiClient.convertToType(data['cacheLookup'], 'Boolean');
            }
            if (data.hasOwnProperty('cacheValidatedWithOriginServer')) {
                obj['cacheValidatedWithOriginServer'] = ApiClient.convertToType(data['cacheValidatedWithOriginServer'], 'Boolean');
            }
            if (data.hasOwnProperty('latency')) {
                obj['latency'] = ApiClient.convertToType(data['latency'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('referer')) {
                obj['referer'] = ApiClient.convertToType(data['referer'], 'String');
            }
            if (data.hasOwnProperty('remoteIp')) {
                obj['remoteIp'] = ApiClient.convertToType(data['remoteIp'], 'String');
            }
            if (data.hasOwnProperty('requestMethod')) {
                obj['requestMethod'] = ApiClient.convertToType(data['requestMethod'], 'String');
            }
            if (data.hasOwnProperty('requestSize')) {
                obj['requestSize'] = ApiClient.convertToType(data['requestSize'], 'String');
            }
            if (data.hasOwnProperty('requestUrl')) {
                obj['requestUrl'] = ApiClient.convertToType(data['requestUrl'], 'String');
            }
            if (data.hasOwnProperty('responseSize')) {
                obj['responseSize'] = ApiClient.convertToType(data['responseSize'], 'String');
            }
            if (data.hasOwnProperty('serverIp')) {
                obj['serverIp'] = ApiClient.convertToType(data['serverIp'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('userAgent')) {
                obj['userAgent'] = ApiClient.convertToType(data['userAgent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cacheFillBytes'] && !(typeof data['cacheFillBytes'] === 'string' || data['cacheFillBytes'] instanceof String)) {
            throw new Error("Expected the field `cacheFillBytes` to be a primitive type in the JSON string but got " + data['cacheFillBytes']);
        }
        // ensure the json data is a string
        if (data['latency'] && !(typeof data['latency'] === 'string' || data['latency'] instanceof String)) {
            throw new Error("Expected the field `latency` to be a primitive type in the JSON string but got " + data['latency']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['referer'] && !(typeof data['referer'] === 'string' || data['referer'] instanceof String)) {
            throw new Error("Expected the field `referer` to be a primitive type in the JSON string but got " + data['referer']);
        }
        // ensure the json data is a string
        if (data['remoteIp'] && !(typeof data['remoteIp'] === 'string' || data['remoteIp'] instanceof String)) {
            throw new Error("Expected the field `remoteIp` to be a primitive type in the JSON string but got " + data['remoteIp']);
        }
        // ensure the json data is a string
        if (data['requestMethod'] && !(typeof data['requestMethod'] === 'string' || data['requestMethod'] instanceof String)) {
            throw new Error("Expected the field `requestMethod` to be a primitive type in the JSON string but got " + data['requestMethod']);
        }
        // ensure the json data is a string
        if (data['requestSize'] && !(typeof data['requestSize'] === 'string' || data['requestSize'] instanceof String)) {
            throw new Error("Expected the field `requestSize` to be a primitive type in the JSON string but got " + data['requestSize']);
        }
        // ensure the json data is a string
        if (data['requestUrl'] && !(typeof data['requestUrl'] === 'string' || data['requestUrl'] instanceof String)) {
            throw new Error("Expected the field `requestUrl` to be a primitive type in the JSON string but got " + data['requestUrl']);
        }
        // ensure the json data is a string
        if (data['responseSize'] && !(typeof data['responseSize'] === 'string' || data['responseSize'] instanceof String)) {
            throw new Error("Expected the field `responseSize` to be a primitive type in the JSON string but got " + data['responseSize']);
        }
        // ensure the json data is a string
        if (data['serverIp'] && !(typeof data['serverIp'] === 'string' || data['serverIp'] instanceof String)) {
            throw new Error("Expected the field `serverIp` to be a primitive type in the JSON string but got " + data['serverIp']);
        }
        // ensure the json data is a string
        if (data['userAgent'] && !(typeof data['userAgent'] === 'string' || data['userAgent'] instanceof String)) {
            throw new Error("Expected the field `userAgent` to be a primitive type in the JSON string but got " + data['userAgent']);
        }

        return true;
    }


}



/**
 * The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
 * @member {String} cacheFillBytes
 */
HttpRequest.prototype['cacheFillBytes'] = undefined;

/**
 * Whether or not an entity was served from cache (with or without validation).
 * @member {Boolean} cacheHit
 */
HttpRequest.prototype['cacheHit'] = undefined;

/**
 * Whether or not a cache lookup was attempted.
 * @member {Boolean} cacheLookup
 */
HttpRequest.prototype['cacheLookup'] = undefined;

/**
 * Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if cache_hit is True.
 * @member {Boolean} cacheValidatedWithOriginServer
 */
HttpRequest.prototype['cacheValidatedWithOriginServer'] = undefined;

/**
 * The request processing latency on the server, from the time the request was received until the response was sent.
 * @member {String} latency
 */
HttpRequest.prototype['latency'] = undefined;

/**
 * Protocol used for the request. Examples: \"HTTP/1.1\", \"HTTP/2\", \"websocket\"
 * @member {String} protocol
 */
HttpRequest.prototype['protocol'] = undefined;

/**
 * The referer URL of the request, as defined in HTTP/1.1 Header Field Definitions (https://datatracker.ietf.org/doc/html/rfc2616#section-14.36).
 * @member {String} referer
 */
HttpRequest.prototype['referer'] = undefined;

/**
 * The IP address (IPv4 or IPv6) of the client that issued the HTTP request. This field can include port information. Examples: \"192.168.1.1\", \"10.0.0.1:80\", \"FE80::0202:B3FF:FE1E:8329\".
 * @member {String} remoteIp
 */
HttpRequest.prototype['remoteIp'] = undefined;

/**
 * The request method. Examples: \"GET\", \"HEAD\", \"PUT\", \"POST\".
 * @member {String} requestMethod
 */
HttpRequest.prototype['requestMethod'] = undefined;

/**
 * The size of the HTTP request message in bytes, including the request headers and the request body.
 * @member {String} requestSize
 */
HttpRequest.prototype['requestSize'] = undefined;

/**
 * The scheme (http, https), the host name, the path and the query portion of the URL that was requested. Example: \"http://example.com/some/info?color=red\".
 * @member {String} requestUrl
 */
HttpRequest.prototype['requestUrl'] = undefined;

/**
 * The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
 * @member {String} responseSize
 */
HttpRequest.prototype['responseSize'] = undefined;

/**
 * The IP address (IPv4 or IPv6) of the origin server that the request was sent to. This field can include port information. Examples: \"192.168.1.1\", \"10.0.0.1:80\", \"FE80::0202:B3FF:FE1E:8329\".
 * @member {String} serverIp
 */
HttpRequest.prototype['serverIp'] = undefined;

/**
 * The response code indicating the status of response. Examples: 200, 404.
 * @member {Number} status
 */
HttpRequest.prototype['status'] = undefined;

/**
 * The user agent sent by the client. Example: \"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\".
 * @member {String} userAgent
 */
HttpRequest.prototype['userAgent'] = undefined;






export default HttpRequest;

