/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Explicit from './Explicit';
import Exponential from './Exponential';
import Linear from './Linear';

/**
 * The BucketOptions model module.
 * @module model/BucketOptions
 * @version v2
 */
class BucketOptions {
    /**
     * Constructs a new <code>BucketOptions</code>.
     * BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i &gt; 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
     * @alias module:model/BucketOptions
     */
    constructor() { 
        
        BucketOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BucketOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BucketOptions} obj Optional instance to populate.
     * @return {module:model/BucketOptions} The populated <code>BucketOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BucketOptions();

            if (data.hasOwnProperty('explicitBuckets')) {
                obj['explicitBuckets'] = Explicit.constructFromObject(data['explicitBuckets']);
            }
            if (data.hasOwnProperty('exponentialBuckets')) {
                obj['exponentialBuckets'] = Exponential.constructFromObject(data['exponentialBuckets']);
            }
            if (data.hasOwnProperty('linearBuckets')) {
                obj['linearBuckets'] = Linear.constructFromObject(data['linearBuckets']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BucketOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BucketOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `explicitBuckets`
        if (data['explicitBuckets']) { // data not null
          Explicit.validateJSON(data['explicitBuckets']);
        }
        // validate the optional field `exponentialBuckets`
        if (data['exponentialBuckets']) { // data not null
          Exponential.validateJSON(data['exponentialBuckets']);
        }
        // validate the optional field `linearBuckets`
        if (data['linearBuckets']) { // data not null
          Linear.validateJSON(data['linearBuckets']);
        }

        return true;
    }


}



/**
 * @member {module:model/Explicit} explicitBuckets
 */
BucketOptions.prototype['explicitBuckets'] = undefined;

/**
 * @member {module:model/Exponential} exponentialBuckets
 */
BucketOptions.prototype['exponentialBuckets'] = undefined;

/**
 * @member {module:model/Linear} linearBuckets
 */
BucketOptions.prototype['linearBuckets'] = undefined;






export default BucketOptions;

