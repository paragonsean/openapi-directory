/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceLocation model module.
 * @module model/SourceLocation
 * @version v2
 */
class SourceLocation {
    /**
     * Constructs a new <code>SourceLocation</code>.
     * Specifies a location in a source code file.
     * @alias module:model/SourceLocation
     */
    constructor() { 
        
        SourceLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceLocation} obj Optional instance to populate.
     * @return {module:model/SourceLocation} The populated <code>SourceLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceLocation();

            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('functionName')) {
                obj['functionName'] = ApiClient.convertToType(data['functionName'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['functionName'] && !(typeof data['functionName'] === 'string' || data['functionName'] instanceof String)) {
            throw new Error("Expected the field `functionName` to be a primitive type in the JSON string but got " + data['functionName']);
        }
        // ensure the json data is a string
        if (data['line'] && !(typeof data['line'] === 'string' || data['line'] instanceof String)) {
            throw new Error("Expected the field `line` to be a primitive type in the JSON string but got " + data['line']);
        }

        return true;
    }


}



/**
 * Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
 * @member {String} file
 */
SourceLocation.prototype['file'] = undefined;

/**
 * Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information is used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).
 * @member {String} functionName
 */
SourceLocation.prototype['functionName'] = undefined;

/**
 * Line within the source file.
 * @member {String} line
 */
SourceLocation.prototype['line'] = undefined;






export default SourceLocation;

