/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryOptions from './BigQueryOptions';
import LogExclusion from './LogExclusion';

/**
 * The LogSink model module.
 * @module model/LogSink
 * @version v2
 */
class LogSink {
    /**
     * Constructs a new <code>LogSink</code>.
     * Describes a sink used to export log entries to one of the following destinations: a Cloud Logging log bucket, a Cloud Storage bucket, a BigQuery dataset, a Pub/Sub topic, a Cloud project.A logs filter controls which log entries are exported. The sink must be created within a project, organization, billing account, or folder.
     * @alias module:model/LogSink
     */
    constructor() { 
        
        LogSink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogSink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogSink} obj Optional instance to populate.
     * @return {module:model/LogSink} The populated <code>LogSink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogSink();

            if (data.hasOwnProperty('bigqueryOptions')) {
                obj['bigqueryOptions'] = BigQueryOptions.constructFromObject(data['bigqueryOptions']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('exclusions')) {
                obj['exclusions'] = ApiClient.convertToType(data['exclusions'], [LogExclusion]);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('includeChildren')) {
                obj['includeChildren'] = ApiClient.convertToType(data['includeChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputVersionFormat')) {
                obj['outputVersionFormat'] = ApiClient.convertToType(data['outputVersionFormat'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('writerIdentity')) {
                obj['writerIdentity'] = ApiClient.convertToType(data['writerIdentity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogSink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogSink</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigqueryOptions`
        if (data['bigqueryOptions']) { // data not null
          BigQueryOptions.validateJSON(data['bigqueryOptions']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        if (data['exclusions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exclusions'])) {
                throw new Error("Expected the field `exclusions` to be an array in the JSON data but got " + data['exclusions']);
            }
            // validate the optional field `exclusions` (array)
            for (const item of data['exclusions']) {
                LogExclusion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['outputVersionFormat'] && !(typeof data['outputVersionFormat'] === 'string' || data['outputVersionFormat'] instanceof String)) {
            throw new Error("Expected the field `outputVersionFormat` to be a primitive type in the JSON string but got " + data['outputVersionFormat']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['writerIdentity'] && !(typeof data['writerIdentity'] === 'string' || data['writerIdentity'] instanceof String)) {
            throw new Error("Expected the field `writerIdentity` to be a primitive type in the JSON string but got " + data['writerIdentity']);
        }

        return true;
    }


}



/**
 * @member {module:model/BigQueryOptions} bigqueryOptions
 */
LogSink.prototype['bigqueryOptions'] = undefined;

/**
 * Output only. The creation timestamp of the sink.This field may not be present for older sinks.
 * @member {String} createTime
 */
LogSink.prototype['createTime'] = undefined;

/**
 * Optional. A description of this sink.The maximum length of the description is 8000 characters.
 * @member {String} description
 */
LogSink.prototype['description'] = undefined;

/**
 * Required. The export destination: \"storage.googleapis.com/[GCS_BUCKET]\" \"bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]\" \"pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]\" \"logging.googleapis.com/projects/[PROJECT_ID]\" \"logging.googleapis.com/projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]\" The sink's writer_identity, set when the sink is created, must have permission to write to the destination or else the log entries are not exported. For more information, see Exporting Logs with Sinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).
 * @member {String} destination
 */
LogSink.prototype['destination'] = undefined;

/**
 * Optional. If set to true, then this sink is disabled and it does not export any log entries.
 * @member {Boolean} disabled
 */
LogSink.prototype['disabled'] = undefined;

/**
 * Optional. Log entries that match any of these exclusion filters will not be exported.If a log entry is matched by both filter and one of exclusion_filters it will not be exported.
 * @member {Array.<module:model/LogExclusion>} exclusions
 */
LogSink.prototype['exclusions'] = undefined;

/**
 * Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERROR
 * @member {String} filter
 */
LogSink.prototype['filter'] = undefined;

/**
 * Optional. This field applies only to sinks owned by organizations and folders. If the field is false, the default, only the logs owned by the sink's parent resource are available for export. If the field is true, then log entries from all the projects, folders, and billing accounts contained in the sink's parent resource are also available for export. Whether a particular log entry from the children is exported depends on the sink's filter expression.For example, if this field is true, then the filter resource.type=gce_instance would export all Compute Engine VM instance log entries from all projects in the sink's parent.To only export entries from certain child projects, filter on the project part of the log name:logName:(\"projects/test-project1/\" OR \"projects/test-project2/\") AND resource.type=gce_instance
 * @member {Boolean} includeChildren
 */
LogSink.prototype['includeChildren'] = undefined;

/**
 * Output only. The client-assigned sink identifier, unique within the project.For example: \"my-syslog-errors-to-pubsub\".Sink identifiers are limited to 100 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, periods.First character has to be alphanumeric.
 * @member {String} name
 */
LogSink.prototype['name'] = undefined;

/**
 * Deprecated. This field is unused.
 * @member {module:model/LogSink.OutputVersionFormatEnum} outputVersionFormat
 */
LogSink.prototype['outputVersionFormat'] = undefined;

/**
 * Output only. The last update timestamp of the sink.This field may not be present for older sinks.
 * @member {String} updateTime
 */
LogSink.prototype['updateTime'] = undefined;

/**
 * Output only. An IAM identity—a service account or group—under which Cloud Logging writes the exported log entries to the sink's destination. This field is either set by specifying custom_writer_identity or set automatically by sinks.create and sinks.update based on the value of unique_writer_identity in those methods.Until you grant this identity write-access to the destination, log entry exports from this sink will fail. For more information, see Granting Access for a Resource (https://cloud.google.com/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource). Consult the destination service's documentation to determine the appropriate IAM roles to assign to the identity.Sinks that have a destination that is a log bucket in the same project as the sink cannot have a writer_identity and no additional permissions are required.
 * @member {String} writerIdentity
 */
LogSink.prototype['writerIdentity'] = undefined;





/**
 * Allowed values for the <code>outputVersionFormat</code> property.
 * @enum {String}
 * @readonly
 */
LogSink['OutputVersionFormatEnum'] = {

    /**
     * value: "VERSION_FORMAT_UNSPECIFIED"
     * @const
     */
    "VERSION_FORMAT_UNSPECIFIED": "VERSION_FORMAT_UNSPECIFIED",

    /**
     * value: "V2"
     * @const
     */
    "V2": "V2",

    /**
     * value: "V1"
     * @const
     */
    "V1": "V1"
};



export default LogSink;

