/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SummaryField from './SummaryField';

/**
 * The LoggingQuery model module.
 * @module model/LoggingQuery
 * @version v2
 */
class LoggingQuery {
    /**
     * Constructs a new <code>LoggingQuery</code>.
     * Describes a Cloud Logging query that can be run in Logs Explorer UI or via the logging API.In addition to the query itself, additional information may be stored to capture the display configuration and other UI state used in association with analysis of query results.
     * @alias module:model/LoggingQuery
     */
    constructor() { 
        
        LoggingQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingQuery} obj Optional instance to populate.
     * @return {module:model/LoggingQuery} The populated <code>LoggingQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingQuery();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('summaryFieldEnd')) {
                obj['summaryFieldEnd'] = ApiClient.convertToType(data['summaryFieldEnd'], 'Number');
            }
            if (data.hasOwnProperty('summaryFieldStart')) {
                obj['summaryFieldStart'] = ApiClient.convertToType(data['summaryFieldStart'], 'Number');
            }
            if (data.hasOwnProperty('summaryFields')) {
                obj['summaryFields'] = ApiClient.convertToType(data['summaryFields'], [SummaryField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        if (data['summaryFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['summaryFields'])) {
                throw new Error("Expected the field `summaryFields` to be an array in the JSON data but got " + data['summaryFields']);
            }
            // validate the optional field `summaryFields` (array)
            for (const item of data['summaryFields']) {
                SummaryField.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. An advanced query using the Logging Query Language (https://cloud.google.com/logging/docs/view/logging-query-language). The maximum length of the filter is 20000 characters.
 * @member {String} filter
 */
LoggingQuery.prototype['filter'] = undefined;

/**
 * Characters will be counted from the end of the string.
 * @member {Number} summaryFieldEnd
 */
LoggingQuery.prototype['summaryFieldEnd'] = undefined;

/**
 * Characters will be counted from the start of the string.
 * @member {Number} summaryFieldStart
 */
LoggingQuery.prototype['summaryFieldStart'] = undefined;

/**
 * Optional. The set of summary fields to display for this saved query.
 * @member {Array.<module:model/SummaryField>} summaryFields
 */
LoggingQuery.prototype['summaryFields'] = undefined;






export default LoggingQuery;

