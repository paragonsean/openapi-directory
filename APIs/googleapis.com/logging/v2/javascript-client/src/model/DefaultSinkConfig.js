/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogExclusion from './LogExclusion';

/**
 * The DefaultSinkConfig model module.
 * @module model/DefaultSinkConfig
 * @version v2
 */
class DefaultSinkConfig {
    /**
     * Constructs a new <code>DefaultSinkConfig</code>.
     * Describes the custom _Default sink configuration that is used to override the built-in _Default sink configuration in newly created resource containers, such as projects or folders.
     * @alias module:model/DefaultSinkConfig
     */
    constructor() { 
        
        DefaultSinkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DefaultSinkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DefaultSinkConfig} obj Optional instance to populate.
     * @return {module:model/DefaultSinkConfig} The populated <code>DefaultSinkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DefaultSinkConfig();

            if (data.hasOwnProperty('exclusions')) {
                obj['exclusions'] = ApiClient.convertToType(data['exclusions'], [LogExclusion]);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DefaultSinkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DefaultSinkConfig</code>.
     */
    static validateJSON(data) {
        if (data['exclusions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exclusions'])) {
                throw new Error("Expected the field `exclusions` to be an array in the JSON data but got " + data['exclusions']);
            }
            // validate the optional field `exclusions` (array)
            for (const item of data['exclusions']) {
                LogExclusion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}



/**
 * Optional. Specifies the set of exclusions to be added to the _Default sink in newly created resource containers.
 * @member {Array.<module:model/LogExclusion>} exclusions
 */
DefaultSinkConfig.prototype['exclusions'] = undefined;

/**
 * Optional. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-queries). The only exported log entries are those that are in the resource owning the sink and that match the filter.For example:logName=\"projects/[PROJECT_ID]/logs/[LOG_ID]\" AND severity>=ERRORTo match all logs, don't add exclusions and use the following line as the value of filter:logName:*Cannot be empty or unset when the value of mode is OVERWRITE.
 * @member {String} filter
 */
DefaultSinkConfig.prototype['filter'] = undefined;

/**
 * Required. Determines the behavior to apply to the built-in _Default sink inclusion filter.Exclusions are always appended, as built-in _Default sinks have no exclusions.
 * @member {module:model/DefaultSinkConfig.ModeEnum} mode
 */
DefaultSinkConfig.prototype['mode'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
DefaultSinkConfig['ModeEnum'] = {

    /**
     * value: "FILTER_WRITE_MODE_UNSPECIFIED"
     * @const
     */
    "FILTER_WRITE_MODE_UNSPECIFIED": "FILTER_WRITE_MODE_UNSPECIFIED",

    /**
     * value: "APPEND"
     * @const
     */
    "APPEND": "APPEND",

    /**
     * value: "OVERWRITE"
     * @const
     */
    "OVERWRITE": "OVERWRITE"
};



export default DefaultSinkConfig;

