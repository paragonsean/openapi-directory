/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CmekSettings from './CmekSettings';
import IndexConfig from './IndexConfig';

/**
 * The LogBucket model module.
 * @module model/LogBucket
 * @version v2
 */
class LogBucket {
    /**
     * Constructs a new <code>LogBucket</code>.
     * Describes a repository in which log entries are stored.
     * @alias module:model/LogBucket
     */
    constructor() { 
        
        LogBucket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogBucket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogBucket} obj Optional instance to populate.
     * @return {module:model/LogBucket} The populated <code>LogBucket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogBucket();

            if (data.hasOwnProperty('analyticsEnabled')) {
                obj['analyticsEnabled'] = ApiClient.convertToType(data['analyticsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('cmekSettings')) {
                obj['cmekSettings'] = CmekSettings.constructFromObject(data['cmekSettings']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('indexConfigs')) {
                obj['indexConfigs'] = ApiClient.convertToType(data['indexConfigs'], [IndexConfig]);
            }
            if (data.hasOwnProperty('lifecycleState')) {
                obj['lifecycleState'] = ApiClient.convertToType(data['lifecycleState'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('restrictedFields')) {
                obj['restrictedFields'] = ApiClient.convertToType(data['restrictedFields'], ['String']);
            }
            if (data.hasOwnProperty('retentionDays')) {
                obj['retentionDays'] = ApiClient.convertToType(data['retentionDays'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogBucket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogBucket</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cmekSettings`
        if (data['cmekSettings']) { // data not null
          CmekSettings.validateJSON(data['cmekSettings']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['indexConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indexConfigs'])) {
                throw new Error("Expected the field `indexConfigs` to be an array in the JSON data but got " + data['indexConfigs']);
            }
            // validate the optional field `indexConfigs` (array)
            for (const item of data['indexConfigs']) {
                IndexConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lifecycleState'] && !(typeof data['lifecycleState'] === 'string' || data['lifecycleState'] instanceof String)) {
            throw new Error("Expected the field `lifecycleState` to be a primitive type in the JSON string but got " + data['lifecycleState']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['restrictedFields'])) {
            throw new Error("Expected the field `restrictedFields` to be an array in the JSON data but got " + data['restrictedFields']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Optional. Whether log analytics is enabled for this bucket.Once enabled, log analytics features cannot be disabled.
 * @member {Boolean} analyticsEnabled
 */
LogBucket.prototype['analyticsEnabled'] = undefined;

/**
 * @member {module:model/CmekSettings} cmekSettings
 */
LogBucket.prototype['cmekSettings'] = undefined;

/**
 * Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.
 * @member {String} createTime
 */
LogBucket.prototype['createTime'] = undefined;

/**
 * Optional. Describes this bucket.
 * @member {String} description
 */
LogBucket.prototype['description'] = undefined;

/**
 * Optional. A list of indexed fields and related configuration data.
 * @member {Array.<module:model/IndexConfig>} indexConfigs
 */
LogBucket.prototype['indexConfigs'] = undefined;

/**
 * Output only. The bucket lifecycle state.
 * @member {module:model/LogBucket.LifecycleStateEnum} lifecycleState
 */
LogBucket.prototype['lifecycleState'] = undefined;

/**
 * Optional. Whether the bucket is locked.The retention period on a locked bucket cannot be changed. Locked buckets may only be deleted if they are empty.
 * @member {Boolean} locked
 */
LogBucket.prototype['locked'] = undefined;

/**
 * Output only. The resource name of the bucket.For example:projects/my-project/locations/global/buckets/my-bucketFor a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support)For the location of global it is unspecified where log entries are actually stored.After a bucket has been created, the location cannot be changed.
 * @member {String} name
 */
LogBucket.prototype['name'] = undefined;

/**
 * Optional. Log entry field paths that are denied access in this bucket.The following fields and their children are eligible: textPayload, jsonPayload, protoPayload, httpRequest, labels, sourceLocation.Restricting a repeated field will restrict all values. Adding a parent will block all child fields. (e.g. foo.bar will block foo.bar.baz)
 * @member {Array.<String>} restrictedFields
 */
LogBucket.prototype['restrictedFields'] = undefined;

/**
 * Optional. Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.
 * @member {Number} retentionDays
 */
LogBucket.prototype['retentionDays'] = undefined;

/**
 * Output only. The last update timestamp of the bucket.
 * @member {String} updateTime
 */
LogBucket.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>lifecycleState</code> property.
 * @enum {String}
 * @readonly
 */
LogBucket['LifecycleStateEnum'] = {

    /**
     * value: "LIFECYCLE_STATE_UNSPECIFIED"
     * @const
     */
    "LIFECYCLE_STATE_UNSPECIFIED": "LIFECYCLE_STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETE_REQUESTED"
     * @const
     */
    "DELETE_REQUESTED": "DELETE_REQUESTED",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default LogBucket;

