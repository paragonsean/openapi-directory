/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceLocation from './SourceLocation';

/**
 * The LogLine model module.
 * @module model/LogLine
 * @version v2
 */
class LogLine {
    /**
     * Constructs a new <code>LogLine</code>.
     * Application log line emitted while processing a request.
     * @alias module:model/LogLine
     */
    constructor() { 
        
        LogLine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogLine} obj Optional instance to populate.
     * @return {module:model/LogLine} The populated <code>LogLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogLine();

            if (data.hasOwnProperty('logMessage')) {
                obj['logMessage'] = ApiClient.convertToType(data['logMessage'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('sourceLocation')) {
                obj['sourceLocation'] = SourceLocation.constructFromObject(data['sourceLocation']);
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogLine</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['logMessage'] && !(typeof data['logMessage'] === 'string' || data['logMessage'] instanceof String)) {
            throw new Error("Expected the field `logMessage` to be a primitive type in the JSON string but got " + data['logMessage']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // validate the optional field `sourceLocation`
        if (data['sourceLocation']) { // data not null
          SourceLocation.validateJSON(data['sourceLocation']);
        }
        // ensure the json data is a string
        if (data['time'] && !(typeof data['time'] === 'string' || data['time'] instanceof String)) {
            throw new Error("Expected the field `time` to be a primitive type in the JSON string but got " + data['time']);
        }

        return true;
    }


}



/**
 * App-provided log message.
 * @member {String} logMessage
 */
LogLine.prototype['logMessage'] = undefined;

/**
 * Severity of this log entry.
 * @member {module:model/LogLine.SeverityEnum} severity
 */
LogLine.prototype['severity'] = undefined;

/**
 * @member {module:model/SourceLocation} sourceLocation
 */
LogLine.prototype['sourceLocation'] = undefined;

/**
 * Approximate time when this log entry was made.
 * @member {String} time
 */
LogLine.prototype['time'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
LogLine['SeverityEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "DEBUG"
     * @const
     */
    "DEBUG": "DEBUG",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO",

    /**
     * value: "NOTICE"
     * @const
     */
    "NOTICE": "NOTICE",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL",

    /**
     * value: "ALERT"
     * @const
     */
    "ALERT": "ALERT",

    /**
     * value: "EMERGENCY"
     * @const
     */
    "EMERGENCY": "EMERGENCY"
};



export default LogLine;

