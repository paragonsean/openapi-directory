/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultSinkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultSinkConfig::OAIDefaultSinkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultSinkConfig::OAIDefaultSinkConfig() {
    this->initializeModel();
}

OAIDefaultSinkConfig::~OAIDefaultSinkConfig() {}

void OAIDefaultSinkConfig::initializeModel() {

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIDefaultSinkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultSinkConfig::fromJsonObject(QJsonObject json) {

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("exclusions")]);
    m_exclusions_isSet = !json[QString("exclusions")].isNull() && m_exclusions_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAIDefaultSinkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultSinkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusions.size() > 0) {
        obj.insert(QString("exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

QList<OAILogExclusion> OAIDefaultSinkConfig::getExclusions() const {
    return m_exclusions;
}
void OAIDefaultSinkConfig::setExclusions(const QList<OAILogExclusion> &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAIDefaultSinkConfig::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAIDefaultSinkConfig::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QString OAIDefaultSinkConfig::getFilter() const {
    return m_filter;
}
void OAIDefaultSinkConfig::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIDefaultSinkConfig::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIDefaultSinkConfig::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIDefaultSinkConfig::getMode() const {
    return m_mode;
}
void OAIDefaultSinkConfig::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDefaultSinkConfig::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDefaultSinkConfig::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIDefaultSinkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultSinkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
