/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogBucket::OAILogBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogBucket::OAILogBucket() {
    this->initializeModel();
}

OAILogBucket::~OAILogBucket() {}

void OAILogBucket::initializeModel() {

    m_analytics_enabled_isSet = false;
    m_analytics_enabled_isValid = false;

    m_cmek_settings_isSet = false;
    m_cmek_settings_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_index_configs_isSet = false;
    m_index_configs_isValid = false;

    m_lifecycle_state_isSet = false;
    m_lifecycle_state_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_restricted_fields_isSet = false;
    m_restricted_fields_isValid = false;

    m_retention_days_isSet = false;
    m_retention_days_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAILogBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogBucket::fromJsonObject(QJsonObject json) {

    m_analytics_enabled_isValid = ::OpenAPI::fromJsonValue(m_analytics_enabled, json[QString("analyticsEnabled")]);
    m_analytics_enabled_isSet = !json[QString("analyticsEnabled")].isNull() && m_analytics_enabled_isValid;

    m_cmek_settings_isValid = ::OpenAPI::fromJsonValue(m_cmek_settings, json[QString("cmekSettings")]);
    m_cmek_settings_isSet = !json[QString("cmekSettings")].isNull() && m_cmek_settings_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_index_configs_isValid = ::OpenAPI::fromJsonValue(m_index_configs, json[QString("indexConfigs")]);
    m_index_configs_isSet = !json[QString("indexConfigs")].isNull() && m_index_configs_isValid;

    m_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_state, json[QString("lifecycleState")]);
    m_lifecycle_state_isSet = !json[QString("lifecycleState")].isNull() && m_lifecycle_state_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_restricted_fields_isValid = ::OpenAPI::fromJsonValue(m_restricted_fields, json[QString("restrictedFields")]);
    m_restricted_fields_isSet = !json[QString("restrictedFields")].isNull() && m_restricted_fields_isValid;

    m_retention_days_isValid = ::OpenAPI::fromJsonValue(m_retention_days, json[QString("retentionDays")]);
    m_retention_days_isSet = !json[QString("retentionDays")].isNull() && m_retention_days_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAILogBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_analytics_enabled_isSet) {
        obj.insert(QString("analyticsEnabled"), ::OpenAPI::toJsonValue(m_analytics_enabled));
    }
    if (m_cmek_settings.isSet()) {
        obj.insert(QString("cmekSettings"), ::OpenAPI::toJsonValue(m_cmek_settings));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_index_configs.size() > 0) {
        obj.insert(QString("indexConfigs"), ::OpenAPI::toJsonValue(m_index_configs));
    }
    if (m_lifecycle_state_isSet) {
        obj.insert(QString("lifecycleState"), ::OpenAPI::toJsonValue(m_lifecycle_state));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_restricted_fields.size() > 0) {
        obj.insert(QString("restrictedFields"), ::OpenAPI::toJsonValue(m_restricted_fields));
    }
    if (m_retention_days_isSet) {
        obj.insert(QString("retentionDays"), ::OpenAPI::toJsonValue(m_retention_days));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

bool OAILogBucket::isAnalyticsEnabled() const {
    return m_analytics_enabled;
}
void OAILogBucket::setAnalyticsEnabled(const bool &analytics_enabled) {
    m_analytics_enabled = analytics_enabled;
    m_analytics_enabled_isSet = true;
}

bool OAILogBucket::is_analytics_enabled_Set() const{
    return m_analytics_enabled_isSet;
}

bool OAILogBucket::is_analytics_enabled_Valid() const{
    return m_analytics_enabled_isValid;
}

OAICmekSettings OAILogBucket::getCmekSettings() const {
    return m_cmek_settings;
}
void OAILogBucket::setCmekSettings(const OAICmekSettings &cmek_settings) {
    m_cmek_settings = cmek_settings;
    m_cmek_settings_isSet = true;
}

bool OAILogBucket::is_cmek_settings_Set() const{
    return m_cmek_settings_isSet;
}

bool OAILogBucket::is_cmek_settings_Valid() const{
    return m_cmek_settings_isValid;
}

QString OAILogBucket::getCreateTime() const {
    return m_create_time;
}
void OAILogBucket::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILogBucket::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILogBucket::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILogBucket::getDescription() const {
    return m_description;
}
void OAILogBucket::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILogBucket::is_description_Set() const{
    return m_description_isSet;
}

bool OAILogBucket::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIIndexConfig> OAILogBucket::getIndexConfigs() const {
    return m_index_configs;
}
void OAILogBucket::setIndexConfigs(const QList<OAIIndexConfig> &index_configs) {
    m_index_configs = index_configs;
    m_index_configs_isSet = true;
}

bool OAILogBucket::is_index_configs_Set() const{
    return m_index_configs_isSet;
}

bool OAILogBucket::is_index_configs_Valid() const{
    return m_index_configs_isValid;
}

QString OAILogBucket::getLifecycleState() const {
    return m_lifecycle_state;
}
void OAILogBucket::setLifecycleState(const QString &lifecycle_state) {
    m_lifecycle_state = lifecycle_state;
    m_lifecycle_state_isSet = true;
}

bool OAILogBucket::is_lifecycle_state_Set() const{
    return m_lifecycle_state_isSet;
}

bool OAILogBucket::is_lifecycle_state_Valid() const{
    return m_lifecycle_state_isValid;
}

bool OAILogBucket::isLocked() const {
    return m_locked;
}
void OAILogBucket::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAILogBucket::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAILogBucket::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAILogBucket::getName() const {
    return m_name;
}
void OAILogBucket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILogBucket::is_name_Set() const{
    return m_name_isSet;
}

bool OAILogBucket::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAILogBucket::getRestrictedFields() const {
    return m_restricted_fields;
}
void OAILogBucket::setRestrictedFields(const QList<QString> &restricted_fields) {
    m_restricted_fields = restricted_fields;
    m_restricted_fields_isSet = true;
}

bool OAILogBucket::is_restricted_fields_Set() const{
    return m_restricted_fields_isSet;
}

bool OAILogBucket::is_restricted_fields_Valid() const{
    return m_restricted_fields_isValid;
}

qint32 OAILogBucket::getRetentionDays() const {
    return m_retention_days;
}
void OAILogBucket::setRetentionDays(const qint32 &retention_days) {
    m_retention_days = retention_days;
    m_retention_days_isSet = true;
}

bool OAILogBucket::is_retention_days_Set() const{
    return m_retention_days_isSet;
}

bool OAILogBucket::is_retention_days_Valid() const{
    return m_retention_days_isValid;
}

QString OAILogBucket::getUpdateTime() const {
    return m_update_time;
}
void OAILogBucket::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAILogBucket::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAILogBucket::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAILogBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analytics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmek_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
