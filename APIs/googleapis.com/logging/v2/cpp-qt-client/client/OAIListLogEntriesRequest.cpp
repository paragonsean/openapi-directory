/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLogEntriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLogEntriesRequest::OAIListLogEntriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLogEntriesRequest::OAIListLogEntriesRequest() {
    this->initializeModel();
}

OAIListLogEntriesRequest::~OAIListLogEntriesRequest() {}

void OAIListLogEntriesRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_project_ids_isSet = false;
    m_project_ids_isValid = false;

    m_resource_names_isSet = false;
    m_resource_names_isValid = false;
}

void OAIListLogEntriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLogEntriesRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_project_ids_isValid = ::OpenAPI::fromJsonValue(m_project_ids, json[QString("projectIds")]);
    m_project_ids_isSet = !json[QString("projectIds")].isNull() && m_project_ids_isValid;

    m_resource_names_isValid = ::OpenAPI::fromJsonValue(m_resource_names, json[QString("resourceNames")]);
    m_resource_names_isSet = !json[QString("resourceNames")].isNull() && m_resource_names_isValid;
}

QString OAIListLogEntriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLogEntriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_project_ids.size() > 0) {
        obj.insert(QString("projectIds"), ::OpenAPI::toJsonValue(m_project_ids));
    }
    if (m_resource_names.size() > 0) {
        obj.insert(QString("resourceNames"), ::OpenAPI::toJsonValue(m_resource_names));
    }
    return obj;
}

QString OAIListLogEntriesRequest::getFilter() const {
    return m_filter;
}
void OAIListLogEntriesRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListLogEntriesRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListLogEntriesRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIListLogEntriesRequest::getOrderBy() const {
    return m_order_by;
}
void OAIListLogEntriesRequest::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIListLogEntriesRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIListLogEntriesRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAIListLogEntriesRequest::getPageSize() const {
    return m_page_size;
}
void OAIListLogEntriesRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListLogEntriesRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListLogEntriesRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIListLogEntriesRequest::getPageToken() const {
    return m_page_token;
}
void OAIListLogEntriesRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIListLogEntriesRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIListLogEntriesRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QList<QString> OAIListLogEntriesRequest::getProjectIds() const {
    return m_project_ids;
}
void OAIListLogEntriesRequest::setProjectIds(const QList<QString> &project_ids) {
    m_project_ids = project_ids;
    m_project_ids_isSet = true;
}

bool OAIListLogEntriesRequest::is_project_ids_Set() const{
    return m_project_ids_isSet;
}

bool OAIListLogEntriesRequest::is_project_ids_Valid() const{
    return m_project_ids_isValid;
}

QList<QString> OAIListLogEntriesRequest::getResourceNames() const {
    return m_resource_names;
}
void OAIListLogEntriesRequest::setResourceNames(const QList<QString> &resource_names) {
    m_resource_names = resource_names;
    m_resource_names_isSet = true;
}

bool OAIListLogEntriesRequest::is_resource_names_Set() const{
    return m_resource_names_isSet;
}

bool OAIListLogEntriesRequest::is_resource_names_Valid() const{
    return m_resource_names_isValid;
}

bool OAIListLogEntriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLogEntriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
