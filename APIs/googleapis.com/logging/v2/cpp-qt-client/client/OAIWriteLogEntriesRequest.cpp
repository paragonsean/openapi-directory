/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWriteLogEntriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWriteLogEntriesRequest::OAIWriteLogEntriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWriteLogEntriesRequest::OAIWriteLogEntriesRequest() {
    this->initializeModel();
}

OAIWriteLogEntriesRequest::~OAIWriteLogEntriesRequest() {}

void OAIWriteLogEntriesRequest::initializeModel() {

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_log_name_isSet = false;
    m_log_name_isValid = false;

    m_partial_success_isSet = false;
    m_partial_success_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIWriteLogEntriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWriteLogEntriesRequest::fromJsonObject(QJsonObject json) {

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_log_name_isValid = ::OpenAPI::fromJsonValue(m_log_name, json[QString("logName")]);
    m_log_name_isSet = !json[QString("logName")].isNull() && m_log_name_isValid;

    m_partial_success_isValid = ::OpenAPI::fromJsonValue(m_partial_success, json[QString("partialSuccess")]);
    m_partial_success_isSet = !json[QString("partialSuccess")].isNull() && m_partial_success_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIWriteLogEntriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWriteLogEntriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_log_name_isSet) {
        obj.insert(QString("logName"), ::OpenAPI::toJsonValue(m_log_name));
    }
    if (m_partial_success_isSet) {
        obj.insert(QString("partialSuccess"), ::OpenAPI::toJsonValue(m_partial_success));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

bool OAIWriteLogEntriesRequest::isDryRun() const {
    return m_dry_run;
}
void OAIWriteLogEntriesRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIWriteLogEntriesRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIWriteLogEntriesRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

QList<OAILogEntry> OAIWriteLogEntriesRequest::getEntries() const {
    return m_entries;
}
void OAIWriteLogEntriesRequest::setEntries(const QList<OAILogEntry> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIWriteLogEntriesRequest::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIWriteLogEntriesRequest::is_entries_Valid() const{
    return m_entries_isValid;
}

QMap<QString, QString> OAIWriteLogEntriesRequest::getLabels() const {
    return m_labels;
}
void OAIWriteLogEntriesRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWriteLogEntriesRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWriteLogEntriesRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWriteLogEntriesRequest::getLogName() const {
    return m_log_name;
}
void OAIWriteLogEntriesRequest::setLogName(const QString &log_name) {
    m_log_name = log_name;
    m_log_name_isSet = true;
}

bool OAIWriteLogEntriesRequest::is_log_name_Set() const{
    return m_log_name_isSet;
}

bool OAIWriteLogEntriesRequest::is_log_name_Valid() const{
    return m_log_name_isValid;
}

bool OAIWriteLogEntriesRequest::isPartialSuccess() const {
    return m_partial_success;
}
void OAIWriteLogEntriesRequest::setPartialSuccess(const bool &partial_success) {
    m_partial_success = partial_success;
    m_partial_success_isSet = true;
}

bool OAIWriteLogEntriesRequest::is_partial_success_Set() const{
    return m_partial_success_isSet;
}

bool OAIWriteLogEntriesRequest::is_partial_success_Valid() const{
    return m_partial_success_isValid;
}

OAIMonitoredResource OAIWriteLogEntriesRequest::getResource() const {
    return m_resource;
}
void OAIWriteLogEntriesRequest::setResource(const OAIMonitoredResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIWriteLogEntriesRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIWriteLogEntriesRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIWriteLogEntriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWriteLogEntriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
