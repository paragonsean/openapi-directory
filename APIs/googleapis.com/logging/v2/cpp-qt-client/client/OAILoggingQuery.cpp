/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingQuery::OAILoggingQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingQuery::OAILoggingQuery() {
    this->initializeModel();
}

OAILoggingQuery::~OAILoggingQuery() {}

void OAILoggingQuery::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_summary_field_end_isSet = false;
    m_summary_field_end_isValid = false;

    m_summary_field_start_isSet = false;
    m_summary_field_start_isValid = false;

    m_summary_fields_isSet = false;
    m_summary_fields_isValid = false;
}

void OAILoggingQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggingQuery::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_summary_field_end_isValid = ::OpenAPI::fromJsonValue(m_summary_field_end, json[QString("summaryFieldEnd")]);
    m_summary_field_end_isSet = !json[QString("summaryFieldEnd")].isNull() && m_summary_field_end_isValid;

    m_summary_field_start_isValid = ::OpenAPI::fromJsonValue(m_summary_field_start, json[QString("summaryFieldStart")]);
    m_summary_field_start_isSet = !json[QString("summaryFieldStart")].isNull() && m_summary_field_start_isValid;

    m_summary_fields_isValid = ::OpenAPI::fromJsonValue(m_summary_fields, json[QString("summaryFields")]);
    m_summary_fields_isSet = !json[QString("summaryFields")].isNull() && m_summary_fields_isValid;
}

QString OAILoggingQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggingQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_summary_field_end_isSet) {
        obj.insert(QString("summaryFieldEnd"), ::OpenAPI::toJsonValue(m_summary_field_end));
    }
    if (m_summary_field_start_isSet) {
        obj.insert(QString("summaryFieldStart"), ::OpenAPI::toJsonValue(m_summary_field_start));
    }
    if (m_summary_fields.size() > 0) {
        obj.insert(QString("summaryFields"), ::OpenAPI::toJsonValue(m_summary_fields));
    }
    return obj;
}

QString OAILoggingQuery::getFilter() const {
    return m_filter;
}
void OAILoggingQuery::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAILoggingQuery::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAILoggingQuery::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAILoggingQuery::getSummaryFieldEnd() const {
    return m_summary_field_end;
}
void OAILoggingQuery::setSummaryFieldEnd(const qint32 &summary_field_end) {
    m_summary_field_end = summary_field_end;
    m_summary_field_end_isSet = true;
}

bool OAILoggingQuery::is_summary_field_end_Set() const{
    return m_summary_field_end_isSet;
}

bool OAILoggingQuery::is_summary_field_end_Valid() const{
    return m_summary_field_end_isValid;
}

qint32 OAILoggingQuery::getSummaryFieldStart() const {
    return m_summary_field_start;
}
void OAILoggingQuery::setSummaryFieldStart(const qint32 &summary_field_start) {
    m_summary_field_start = summary_field_start;
    m_summary_field_start_isSet = true;
}

bool OAILoggingQuery::is_summary_field_start_Set() const{
    return m_summary_field_start_isSet;
}

bool OAILoggingQuery::is_summary_field_start_Valid() const{
    return m_summary_field_start_isValid;
}

QList<OAISummaryField> OAILoggingQuery::getSummaryFields() const {
    return m_summary_fields;
}
void OAILoggingQuery::setSummaryFields(const QList<OAISummaryField> &summary_fields) {
    m_summary_fields = summary_fields;
    m_summary_fields_isSet = true;
}

bool OAILoggingQuery::is_summary_fields_Set() const{
    return m_summary_fields_isSet;
}

bool OAILoggingQuery::is_summary_fields_Valid() const{
    return m_summary_fields_isValid;
}

bool OAILoggingQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_field_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_field_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggingQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
