/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExponential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExponential::OAIExponential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExponential::OAIExponential() {
    this->initializeModel();
}

OAIExponential::~OAIExponential() {}

void OAIExponential::initializeModel() {

    m_growth_factor_isSet = false;
    m_growth_factor_isValid = false;

    m_num_finite_buckets_isSet = false;
    m_num_finite_buckets_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;
}

void OAIExponential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExponential::fromJsonObject(QJsonObject json) {

    m_growth_factor_isValid = ::OpenAPI::fromJsonValue(m_growth_factor, json[QString("growthFactor")]);
    m_growth_factor_isSet = !json[QString("growthFactor")].isNull() && m_growth_factor_isValid;

    m_num_finite_buckets_isValid = ::OpenAPI::fromJsonValue(m_num_finite_buckets, json[QString("numFiniteBuckets")]);
    m_num_finite_buckets_isSet = !json[QString("numFiniteBuckets")].isNull() && m_num_finite_buckets_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;
}

QString OAIExponential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExponential::asJsonObject() const {
    QJsonObject obj;
    if (m_growth_factor_isSet) {
        obj.insert(QString("growthFactor"), ::OpenAPI::toJsonValue(m_growth_factor));
    }
    if (m_num_finite_buckets_isSet) {
        obj.insert(QString("numFiniteBuckets"), ::OpenAPI::toJsonValue(m_num_finite_buckets));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    return obj;
}

double OAIExponential::getGrowthFactor() const {
    return m_growth_factor;
}
void OAIExponential::setGrowthFactor(const double &growth_factor) {
    m_growth_factor = growth_factor;
    m_growth_factor_isSet = true;
}

bool OAIExponential::is_growth_factor_Set() const{
    return m_growth_factor_isSet;
}

bool OAIExponential::is_growth_factor_Valid() const{
    return m_growth_factor_isValid;
}

qint32 OAIExponential::getNumFiniteBuckets() const {
    return m_num_finite_buckets;
}
void OAIExponential::setNumFiniteBuckets(const qint32 &num_finite_buckets) {
    m_num_finite_buckets = num_finite_buckets;
    m_num_finite_buckets_isSet = true;
}

bool OAIExponential::is_num_finite_buckets_Set() const{
    return m_num_finite_buckets_isSet;
}

bool OAIExponential::is_num_finite_buckets_Valid() const{
    return m_num_finite_buckets_isValid;
}

double OAIExponential::getScale() const {
    return m_scale;
}
void OAIExponential::setScale(const double &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIExponential::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIExponential::is_scale_Valid() const{
    return m_scale_isValid;
}

bool OAIExponential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_growth_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_finite_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExponential::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
