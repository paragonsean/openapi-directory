/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m_default_sink_config_isSet = false;
    m_default_sink_config_isValid = false;

    m_disable_default_sink_isSet = false;
    m_disable_default_sink_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_kms_service_account_id_isSet = false;
    m_kms_service_account_id_isValid = false;

    m_logging_service_account_id_isSet = false;
    m_logging_service_account_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m_default_sink_config_isValid = ::OpenAPI::fromJsonValue(m_default_sink_config, json[QString("defaultSinkConfig")]);
    m_default_sink_config_isSet = !json[QString("defaultSinkConfig")].isNull() && m_default_sink_config_isValid;

    m_disable_default_sink_isValid = ::OpenAPI::fromJsonValue(m_disable_default_sink, json[QString("disableDefaultSink")]);
    m_disable_default_sink_isSet = !json[QString("disableDefaultSink")].isNull() && m_disable_default_sink_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_kms_service_account_id_isValid = ::OpenAPI::fromJsonValue(m_kms_service_account_id, json[QString("kmsServiceAccountId")]);
    m_kms_service_account_id_isSet = !json[QString("kmsServiceAccountId")].isNull() && m_kms_service_account_id_isValid;

    m_logging_service_account_id_isValid = ::OpenAPI::fromJsonValue(m_logging_service_account_id, json[QString("loggingServiceAccountId")]);
    m_logging_service_account_id_isSet = !json[QString("loggingServiceAccountId")].isNull() && m_logging_service_account_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storageLocation")]);
    m_storage_location_isSet = !json[QString("storageLocation")].isNull() && m_storage_location_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_default_sink_config.isSet()) {
        obj.insert(QString("defaultSinkConfig"), ::OpenAPI::toJsonValue(m_default_sink_config));
    }
    if (m_disable_default_sink_isSet) {
        obj.insert(QString("disableDefaultSink"), ::OpenAPI::toJsonValue(m_disable_default_sink));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_kms_service_account_id_isSet) {
        obj.insert(QString("kmsServiceAccountId"), ::OpenAPI::toJsonValue(m_kms_service_account_id));
    }
    if (m_logging_service_account_id_isSet) {
        obj.insert(QString("loggingServiceAccountId"), ::OpenAPI::toJsonValue(m_logging_service_account_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_storage_location_isSet) {
        obj.insert(QString("storageLocation"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    return obj;
}

OAIDefaultSinkConfig OAISettings::getDefaultSinkConfig() const {
    return m_default_sink_config;
}
void OAISettings::setDefaultSinkConfig(const OAIDefaultSinkConfig &default_sink_config) {
    m_default_sink_config = default_sink_config;
    m_default_sink_config_isSet = true;
}

bool OAISettings::is_default_sink_config_Set() const{
    return m_default_sink_config_isSet;
}

bool OAISettings::is_default_sink_config_Valid() const{
    return m_default_sink_config_isValid;
}

bool OAISettings::isDisableDefaultSink() const {
    return m_disable_default_sink;
}
void OAISettings::setDisableDefaultSink(const bool &disable_default_sink) {
    m_disable_default_sink = disable_default_sink;
    m_disable_default_sink_isSet = true;
}

bool OAISettings::is_disable_default_sink_Set() const{
    return m_disable_default_sink_isSet;
}

bool OAISettings::is_disable_default_sink_Valid() const{
    return m_disable_default_sink_isValid;
}

QString OAISettings::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAISettings::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAISettings::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAISettings::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QString OAISettings::getKmsServiceAccountId() const {
    return m_kms_service_account_id;
}
void OAISettings::setKmsServiceAccountId(const QString &kms_service_account_id) {
    m_kms_service_account_id = kms_service_account_id;
    m_kms_service_account_id_isSet = true;
}

bool OAISettings::is_kms_service_account_id_Set() const{
    return m_kms_service_account_id_isSet;
}

bool OAISettings::is_kms_service_account_id_Valid() const{
    return m_kms_service_account_id_isValid;
}

QString OAISettings::getLoggingServiceAccountId() const {
    return m_logging_service_account_id;
}
void OAISettings::setLoggingServiceAccountId(const QString &logging_service_account_id) {
    m_logging_service_account_id = logging_service_account_id;
    m_logging_service_account_id_isSet = true;
}

bool OAISettings::is_logging_service_account_id_Set() const{
    return m_logging_service_account_id_isSet;
}

bool OAISettings::is_logging_service_account_id_Valid() const{
    return m_logging_service_account_id_isValid;
}

QString OAISettings::getName() const {
    return m_name;
}
void OAISettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAISettings::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISettings::getStorageLocation() const {
    return m_storage_location;
}
void OAISettings::setStorageLocation(const QString &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAISettings::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAISettings::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_sink_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_default_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_service_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_service_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
