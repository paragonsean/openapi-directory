/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyLogEntriesMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyLogEntriesMetadata::OAICopyLogEntriesMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyLogEntriesMetadata::OAICopyLogEntriesMetadata() {
    this->initializeModel();
}

OAICopyLogEntriesMetadata::~OAICopyLogEntriesMetadata() {}

void OAICopyLogEntriesMetadata::initializeModel() {

    m_cancellation_requested_isSet = false;
    m_cancellation_requested_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;

    m_writer_identity_isSet = false;
    m_writer_identity_isValid = false;
}

void OAICopyLogEntriesMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyLogEntriesMetadata::fromJsonObject(QJsonObject json) {

    m_cancellation_requested_isValid = ::OpenAPI::fromJsonValue(m_cancellation_requested, json[QString("cancellationRequested")]);
    m_cancellation_requested_isSet = !json[QString("cancellationRequested")].isNull() && m_cancellation_requested_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;

    m_writer_identity_isValid = ::OpenAPI::fromJsonValue(m_writer_identity, json[QString("writerIdentity")]);
    m_writer_identity_isSet = !json[QString("writerIdentity")].isNull() && m_writer_identity_isValid;
}

QString OAICopyLogEntriesMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyLogEntriesMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_requested_isSet) {
        obj.insert(QString("cancellationRequested"), ::OpenAPI::toJsonValue(m_cancellation_requested));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    if (m_writer_identity_isSet) {
        obj.insert(QString("writerIdentity"), ::OpenAPI::toJsonValue(m_writer_identity));
    }
    return obj;
}

bool OAICopyLogEntriesMetadata::isCancellationRequested() const {
    return m_cancellation_requested;
}
void OAICopyLogEntriesMetadata::setCancellationRequested(const bool &cancellation_requested) {
    m_cancellation_requested = cancellation_requested;
    m_cancellation_requested_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_cancellation_requested_Set() const{
    return m_cancellation_requested_isSet;
}

bool OAICopyLogEntriesMetadata::is_cancellation_requested_Valid() const{
    return m_cancellation_requested_isValid;
}

QString OAICopyLogEntriesMetadata::getDestination() const {
    return m_destination;
}
void OAICopyLogEntriesMetadata::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAICopyLogEntriesMetadata::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAICopyLogEntriesMetadata::getEndTime() const {
    return m_end_time;
}
void OAICopyLogEntriesMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICopyLogEntriesMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAICopyLogEntriesMetadata::getProgress() const {
    return m_progress;
}
void OAICopyLogEntriesMetadata::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAICopyLogEntriesMetadata::is_progress_Valid() const{
    return m_progress_isValid;
}

OAICopyLogEntriesRequest OAICopyLogEntriesMetadata::getRequest() const {
    return m_request;
}
void OAICopyLogEntriesMetadata::setRequest(const OAICopyLogEntriesRequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_request_Set() const{
    return m_request_isSet;
}

bool OAICopyLogEntriesMetadata::is_request_Valid() const{
    return m_request_isValid;
}

QString OAICopyLogEntriesMetadata::getSource() const {
    return m_source;
}
void OAICopyLogEntriesMetadata::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_source_Set() const{
    return m_source_isSet;
}

bool OAICopyLogEntriesMetadata::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICopyLogEntriesMetadata::getStartTime() const {
    return m_start_time;
}
void OAICopyLogEntriesMetadata::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICopyLogEntriesMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAICopyLogEntriesMetadata::getState() const {
    return m_state;
}
void OAICopyLogEntriesMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAICopyLogEntriesMetadata::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICopyLogEntriesMetadata::getVerb() const {
    return m_verb;
}
void OAICopyLogEntriesMetadata::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAICopyLogEntriesMetadata::is_verb_Valid() const{
    return m_verb_isValid;
}

QString OAICopyLogEntriesMetadata::getWriterIdentity() const {
    return m_writer_identity;
}
void OAICopyLogEntriesMetadata::setWriterIdentity(const QString &writer_identity) {
    m_writer_identity = writer_identity;
    m_writer_identity_isSet = true;
}

bool OAICopyLogEntriesMetadata::is_writer_identity_Set() const{
    return m_writer_identity_isSet;
}

bool OAICopyLogEntriesMetadata::is_writer_identity_Valid() const{
    return m_writer_identity_isValid;
}

bool OAICopyLogEntriesMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_writer_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyLogEntriesMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
