/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoredResourceDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoredResourceDescriptor::OAIMonitoredResourceDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoredResourceDescriptor::OAIMonitoredResourceDescriptor() {
    this->initializeModel();
}

OAIMonitoredResourceDescriptor::~OAIMonitoredResourceDescriptor() {}

void OAIMonitoredResourceDescriptor::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMonitoredResourceDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoredResourceDescriptor::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMonitoredResourceDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoredResourceDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMonitoredResourceDescriptor::getDescription() const {
    return m_description;
}
void OAIMonitoredResourceDescriptor::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMonitoredResourceDescriptor::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMonitoredResourceDescriptor::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMonitoredResourceDescriptor::getDisplayName() const {
    return m_display_name;
}
void OAIMonitoredResourceDescriptor::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMonitoredResourceDescriptor::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMonitoredResourceDescriptor::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAILabelDescriptor> OAIMonitoredResourceDescriptor::getLabels() const {
    return m_labels;
}
void OAIMonitoredResourceDescriptor::setLabels(const QList<OAILabelDescriptor> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMonitoredResourceDescriptor::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMonitoredResourceDescriptor::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMonitoredResourceDescriptor::getLaunchStage() const {
    return m_launch_stage;
}
void OAIMonitoredResourceDescriptor::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIMonitoredResourceDescriptor::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIMonitoredResourceDescriptor::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIMonitoredResourceDescriptor::getName() const {
    return m_name;
}
void OAIMonitoredResourceDescriptor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMonitoredResourceDescriptor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMonitoredResourceDescriptor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMonitoredResourceDescriptor::getType() const {
    return m_type;
}
void OAIMonitoredResourceDescriptor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMonitoredResourceDescriptor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMonitoredResourceDescriptor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMonitoredResourceDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoredResourceDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
