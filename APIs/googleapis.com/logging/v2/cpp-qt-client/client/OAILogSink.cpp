/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogSink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogSink::OAILogSink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogSink::OAILogSink() {
    this->initializeModel();
}

OAILogSink::~OAILogSink() {}

void OAILogSink::initializeModel() {

    m_bigquery_options_isSet = false;
    m_bigquery_options_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_include_children_isSet = false;
    m_include_children_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_version_format_isSet = false;
    m_output_version_format_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_writer_identity_isSet = false;
    m_writer_identity_isValid = false;
}

void OAILogSink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogSink::fromJsonObject(QJsonObject json) {

    m_bigquery_options_isValid = ::OpenAPI::fromJsonValue(m_bigquery_options, json[QString("bigqueryOptions")]);
    m_bigquery_options_isSet = !json[QString("bigqueryOptions")].isNull() && m_bigquery_options_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("exclusions")]);
    m_exclusions_isSet = !json[QString("exclusions")].isNull() && m_exclusions_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_include_children_isValid = ::OpenAPI::fromJsonValue(m_include_children, json[QString("includeChildren")]);
    m_include_children_isSet = !json[QString("includeChildren")].isNull() && m_include_children_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_version_format_isValid = ::OpenAPI::fromJsonValue(m_output_version_format, json[QString("outputVersionFormat")]);
    m_output_version_format_isSet = !json[QString("outputVersionFormat")].isNull() && m_output_version_format_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_writer_identity_isValid = ::OpenAPI::fromJsonValue(m_writer_identity, json[QString("writerIdentity")]);
    m_writer_identity_isSet = !json[QString("writerIdentity")].isNull() && m_writer_identity_isValid;
}

QString OAILogSink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogSink::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_options.isSet()) {
        obj.insert(QString("bigqueryOptions"), ::OpenAPI::toJsonValue(m_bigquery_options));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_exclusions.size() > 0) {
        obj.insert(QString("exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_include_children_isSet) {
        obj.insert(QString("includeChildren"), ::OpenAPI::toJsonValue(m_include_children));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_version_format_isSet) {
        obj.insert(QString("outputVersionFormat"), ::OpenAPI::toJsonValue(m_output_version_format));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_writer_identity_isSet) {
        obj.insert(QString("writerIdentity"), ::OpenAPI::toJsonValue(m_writer_identity));
    }
    return obj;
}

OAIBigQueryOptions OAILogSink::getBigqueryOptions() const {
    return m_bigquery_options;
}
void OAILogSink::setBigqueryOptions(const OAIBigQueryOptions &bigquery_options) {
    m_bigquery_options = bigquery_options;
    m_bigquery_options_isSet = true;
}

bool OAILogSink::is_bigquery_options_Set() const{
    return m_bigquery_options_isSet;
}

bool OAILogSink::is_bigquery_options_Valid() const{
    return m_bigquery_options_isValid;
}

QString OAILogSink::getCreateTime() const {
    return m_create_time;
}
void OAILogSink::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILogSink::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILogSink::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILogSink::getDescription() const {
    return m_description;
}
void OAILogSink::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILogSink::is_description_Set() const{
    return m_description_isSet;
}

bool OAILogSink::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILogSink::getDestination() const {
    return m_destination;
}
void OAILogSink::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAILogSink::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAILogSink::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAILogSink::isDisabled() const {
    return m_disabled;
}
void OAILogSink::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAILogSink::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAILogSink::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QList<OAILogExclusion> OAILogSink::getExclusions() const {
    return m_exclusions;
}
void OAILogSink::setExclusions(const QList<OAILogExclusion> &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAILogSink::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAILogSink::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QString OAILogSink::getFilter() const {
    return m_filter;
}
void OAILogSink::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAILogSink::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAILogSink::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAILogSink::isIncludeChildren() const {
    return m_include_children;
}
void OAILogSink::setIncludeChildren(const bool &include_children) {
    m_include_children = include_children;
    m_include_children_isSet = true;
}

bool OAILogSink::is_include_children_Set() const{
    return m_include_children_isSet;
}

bool OAILogSink::is_include_children_Valid() const{
    return m_include_children_isValid;
}

QString OAILogSink::getName() const {
    return m_name;
}
void OAILogSink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILogSink::is_name_Set() const{
    return m_name_isSet;
}

bool OAILogSink::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILogSink::getOutputVersionFormat() const {
    return m_output_version_format;
}
void OAILogSink::setOutputVersionFormat(const QString &output_version_format) {
    m_output_version_format = output_version_format;
    m_output_version_format_isSet = true;
}

bool OAILogSink::is_output_version_format_Set() const{
    return m_output_version_format_isSet;
}

bool OAILogSink::is_output_version_format_Valid() const{
    return m_output_version_format_isValid;
}

QString OAILogSink::getUpdateTime() const {
    return m_update_time;
}
void OAILogSink::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAILogSink::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAILogSink::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAILogSink::getWriterIdentity() const {
    return m_writer_identity;
}
void OAILogSink::setWriterIdentity(const QString &writer_identity) {
    m_writer_identity = writer_identity;
    m_writer_identity_isSet = true;
}

bool OAILogSink::is_writer_identity_Set() const{
    return m_writer_identity_isSet;
}

bool OAILogSink::is_writer_identity_Valid() const{
    return m_writer_identity_isValid;
}

bool OAILogSink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_version_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_writer_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogSink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
