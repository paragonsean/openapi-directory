/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestLog::OAIRequestLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestLog::OAIRequestLog() {
    this->initializeModel();
}

OAIRequestLog::~OAIRequestLog() {}

void OAIRequestLog::initializeModel() {

    m_app_engine_release_isSet = false;
    m_app_engine_release_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_first_isSet = false;
    m_first_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_http_version_isSet = false;
    m_http_version_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_index_isSet = false;
    m_instance_index_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_mega_cycles_isSet = false;
    m_mega_cycles_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_module_id_isSet = false;
    m_module_id_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_pending_time_isSet = false;
    m_pending_time_isValid = false;

    m_referrer_isSet = false;
    m_referrer_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_response_size_isSet = false;
    m_response_size_isValid = false;

    m_source_reference_isSet = false;
    m_source_reference_isValid = false;

    m_span_id_isSet = false;
    m_span_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_name_isSet = false;
    m_task_name_isValid = false;

    m_task_queue_name_isSet = false;
    m_task_queue_name_isValid = false;

    m_trace_id_isSet = false;
    m_trace_id_isValid = false;

    m_trace_sampled_isSet = false;
    m_trace_sampled_isValid = false;

    m_url_map_entry_isSet = false;
    m_url_map_entry_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_was_loading_request_isSet = false;
    m_was_loading_request_isValid = false;
}

void OAIRequestLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestLog::fromJsonObject(QJsonObject json) {

    m_app_engine_release_isValid = ::OpenAPI::fromJsonValue(m_app_engine_release, json[QString("appEngineRelease")]);
    m_app_engine_release_isSet = !json[QString("appEngineRelease")].isNull() && m_app_engine_release_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_http_version_isValid = ::OpenAPI::fromJsonValue(m_http_version, json[QString("httpVersion")]);
    m_http_version_isSet = !json[QString("httpVersion")].isNull() && m_http_version_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_index_isValid = ::OpenAPI::fromJsonValue(m_instance_index, json[QString("instanceIndex")]);
    m_instance_index_isSet = !json[QString("instanceIndex")].isNull() && m_instance_index_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_mega_cycles_isValid = ::OpenAPI::fromJsonValue(m_mega_cycles, json[QString("megaCycles")]);
    m_mega_cycles_isSet = !json[QString("megaCycles")].isNull() && m_mega_cycles_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_module_id_isValid = ::OpenAPI::fromJsonValue(m_module_id, json[QString("moduleId")]);
    m_module_id_isSet = !json[QString("moduleId")].isNull() && m_module_id_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_pending_time_isValid = ::OpenAPI::fromJsonValue(m_pending_time, json[QString("pendingTime")]);
    m_pending_time_isSet = !json[QString("pendingTime")].isNull() && m_pending_time_isValid;

    m_referrer_isValid = ::OpenAPI::fromJsonValue(m_referrer, json[QString("referrer")]);
    m_referrer_isSet = !json[QString("referrer")].isNull() && m_referrer_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_response_size_isValid = ::OpenAPI::fromJsonValue(m_response_size, json[QString("responseSize")]);
    m_response_size_isSet = !json[QString("responseSize")].isNull() && m_response_size_isValid;

    m_source_reference_isValid = ::OpenAPI::fromJsonValue(m_source_reference, json[QString("sourceReference")]);
    m_source_reference_isSet = !json[QString("sourceReference")].isNull() && m_source_reference_isValid;

    m_span_id_isValid = ::OpenAPI::fromJsonValue(m_span_id, json[QString("spanId")]);
    m_span_id_isSet = !json[QString("spanId")].isNull() && m_span_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_name_isValid = ::OpenAPI::fromJsonValue(m_task_name, json[QString("taskName")]);
    m_task_name_isSet = !json[QString("taskName")].isNull() && m_task_name_isValid;

    m_task_queue_name_isValid = ::OpenAPI::fromJsonValue(m_task_queue_name, json[QString("taskQueueName")]);
    m_task_queue_name_isSet = !json[QString("taskQueueName")].isNull() && m_task_queue_name_isValid;

    m_trace_id_isValid = ::OpenAPI::fromJsonValue(m_trace_id, json[QString("traceId")]);
    m_trace_id_isSet = !json[QString("traceId")].isNull() && m_trace_id_isValid;

    m_trace_sampled_isValid = ::OpenAPI::fromJsonValue(m_trace_sampled, json[QString("traceSampled")]);
    m_trace_sampled_isSet = !json[QString("traceSampled")].isNull() && m_trace_sampled_isValid;

    m_url_map_entry_isValid = ::OpenAPI::fromJsonValue(m_url_map_entry, json[QString("urlMapEntry")]);
    m_url_map_entry_isSet = !json[QString("urlMapEntry")].isNull() && m_url_map_entry_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_was_loading_request_isValid = ::OpenAPI::fromJsonValue(m_was_loading_request, json[QString("wasLoadingRequest")]);
    m_was_loading_request_isSet = !json[QString("wasLoadingRequest")].isNull() && m_was_loading_request_isValid;
}

QString OAIRequestLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestLog::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine_release_isSet) {
        obj.insert(QString("appEngineRelease"), ::OpenAPI::toJsonValue(m_app_engine_release));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_first_isSet) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_http_version_isSet) {
        obj.insert(QString("httpVersion"), ::OpenAPI::toJsonValue(m_http_version));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_index_isSet) {
        obj.insert(QString("instanceIndex"), ::OpenAPI::toJsonValue(m_instance_index));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_latency_isSet) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    if (m_line.size() > 0) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_mega_cycles_isSet) {
        obj.insert(QString("megaCycles"), ::OpenAPI::toJsonValue(m_mega_cycles));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_module_id_isSet) {
        obj.insert(QString("moduleId"), ::OpenAPI::toJsonValue(m_module_id));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_pending_time_isSet) {
        obj.insert(QString("pendingTime"), ::OpenAPI::toJsonValue(m_pending_time));
    }
    if (m_referrer_isSet) {
        obj.insert(QString("referrer"), ::OpenAPI::toJsonValue(m_referrer));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_response_size_isSet) {
        obj.insert(QString("responseSize"), ::OpenAPI::toJsonValue(m_response_size));
    }
    if (m_source_reference.size() > 0) {
        obj.insert(QString("sourceReference"), ::OpenAPI::toJsonValue(m_source_reference));
    }
    if (m_span_id_isSet) {
        obj.insert(QString("spanId"), ::OpenAPI::toJsonValue(m_span_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_name_isSet) {
        obj.insert(QString("taskName"), ::OpenAPI::toJsonValue(m_task_name));
    }
    if (m_task_queue_name_isSet) {
        obj.insert(QString("taskQueueName"), ::OpenAPI::toJsonValue(m_task_queue_name));
    }
    if (m_trace_id_isSet) {
        obj.insert(QString("traceId"), ::OpenAPI::toJsonValue(m_trace_id));
    }
    if (m_trace_sampled_isSet) {
        obj.insert(QString("traceSampled"), ::OpenAPI::toJsonValue(m_trace_sampled));
    }
    if (m_url_map_entry_isSet) {
        obj.insert(QString("urlMapEntry"), ::OpenAPI::toJsonValue(m_url_map_entry));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_was_loading_request_isSet) {
        obj.insert(QString("wasLoadingRequest"), ::OpenAPI::toJsonValue(m_was_loading_request));
    }
    return obj;
}

QString OAIRequestLog::getAppEngineRelease() const {
    return m_app_engine_release;
}
void OAIRequestLog::setAppEngineRelease(const QString &app_engine_release) {
    m_app_engine_release = app_engine_release;
    m_app_engine_release_isSet = true;
}

bool OAIRequestLog::is_app_engine_release_Set() const{
    return m_app_engine_release_isSet;
}

bool OAIRequestLog::is_app_engine_release_Valid() const{
    return m_app_engine_release_isValid;
}

QString OAIRequestLog::getAppId() const {
    return m_app_id;
}
void OAIRequestLog::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIRequestLog::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIRequestLog::is_app_id_Valid() const{
    return m_app_id_isValid;
}

double OAIRequestLog::getCost() const {
    return m_cost;
}
void OAIRequestLog::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIRequestLog::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIRequestLog::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIRequestLog::getEndTime() const {
    return m_end_time;
}
void OAIRequestLog::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRequestLog::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRequestLog::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIRequestLog::isFinished() const {
    return m_finished;
}
void OAIRequestLog::setFinished(const bool &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIRequestLog::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIRequestLog::is_finished_Valid() const{
    return m_finished_isValid;
}

bool OAIRequestLog::isFirst() const {
    return m_first;
}
void OAIRequestLog::setFirst(const bool &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAIRequestLog::is_first_Set() const{
    return m_first_isSet;
}

bool OAIRequestLog::is_first_Valid() const{
    return m_first_isValid;
}

QString OAIRequestLog::getHost() const {
    return m_host;
}
void OAIRequestLog::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIRequestLog::is_host_Set() const{
    return m_host_isSet;
}

bool OAIRequestLog::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIRequestLog::getHttpVersion() const {
    return m_http_version;
}
void OAIRequestLog::setHttpVersion(const QString &http_version) {
    m_http_version = http_version;
    m_http_version_isSet = true;
}

bool OAIRequestLog::is_http_version_Set() const{
    return m_http_version_isSet;
}

bool OAIRequestLog::is_http_version_Valid() const{
    return m_http_version_isValid;
}

QString OAIRequestLog::getInstanceId() const {
    return m_instance_id;
}
void OAIRequestLog::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIRequestLog::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIRequestLog::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

qint32 OAIRequestLog::getInstanceIndex() const {
    return m_instance_index;
}
void OAIRequestLog::setInstanceIndex(const qint32 &instance_index) {
    m_instance_index = instance_index;
    m_instance_index_isSet = true;
}

bool OAIRequestLog::is_instance_index_Set() const{
    return m_instance_index_isSet;
}

bool OAIRequestLog::is_instance_index_Valid() const{
    return m_instance_index_isValid;
}

QString OAIRequestLog::getIp() const {
    return m_ip;
}
void OAIRequestLog::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIRequestLog::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIRequestLog::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIRequestLog::getLatency() const {
    return m_latency;
}
void OAIRequestLog::setLatency(const QString &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIRequestLog::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIRequestLog::is_latency_Valid() const{
    return m_latency_isValid;
}

QList<OAILogLine> OAIRequestLog::getLine() const {
    return m_line;
}
void OAIRequestLog::setLine(const QList<OAILogLine> &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIRequestLog::is_line_Set() const{
    return m_line_isSet;
}

bool OAIRequestLog::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIRequestLog::getMegaCycles() const {
    return m_mega_cycles;
}
void OAIRequestLog::setMegaCycles(const QString &mega_cycles) {
    m_mega_cycles = mega_cycles;
    m_mega_cycles_isSet = true;
}

bool OAIRequestLog::is_mega_cycles_Set() const{
    return m_mega_cycles_isSet;
}

bool OAIRequestLog::is_mega_cycles_Valid() const{
    return m_mega_cycles_isValid;
}

QString OAIRequestLog::getMethod() const {
    return m_method;
}
void OAIRequestLog::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRequestLog::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRequestLog::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIRequestLog::getModuleId() const {
    return m_module_id;
}
void OAIRequestLog::setModuleId(const QString &module_id) {
    m_module_id = module_id;
    m_module_id_isSet = true;
}

bool OAIRequestLog::is_module_id_Set() const{
    return m_module_id_isSet;
}

bool OAIRequestLog::is_module_id_Valid() const{
    return m_module_id_isValid;
}

QString OAIRequestLog::getNickname() const {
    return m_nickname;
}
void OAIRequestLog::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIRequestLog::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIRequestLog::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIRequestLog::getPendingTime() const {
    return m_pending_time;
}
void OAIRequestLog::setPendingTime(const QString &pending_time) {
    m_pending_time = pending_time;
    m_pending_time_isSet = true;
}

bool OAIRequestLog::is_pending_time_Set() const{
    return m_pending_time_isSet;
}

bool OAIRequestLog::is_pending_time_Valid() const{
    return m_pending_time_isValid;
}

QString OAIRequestLog::getReferrer() const {
    return m_referrer;
}
void OAIRequestLog::setReferrer(const QString &referrer) {
    m_referrer = referrer;
    m_referrer_isSet = true;
}

bool OAIRequestLog::is_referrer_Set() const{
    return m_referrer_isSet;
}

bool OAIRequestLog::is_referrer_Valid() const{
    return m_referrer_isValid;
}

QString OAIRequestLog::getRequestId() const {
    return m_request_id;
}
void OAIRequestLog::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRequestLog::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRequestLog::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIRequestLog::getResource() const {
    return m_resource;
}
void OAIRequestLog::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIRequestLog::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIRequestLog::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIRequestLog::getResponseSize() const {
    return m_response_size;
}
void OAIRequestLog::setResponseSize(const QString &response_size) {
    m_response_size = response_size;
    m_response_size_isSet = true;
}

bool OAIRequestLog::is_response_size_Set() const{
    return m_response_size_isSet;
}

bool OAIRequestLog::is_response_size_Valid() const{
    return m_response_size_isValid;
}

QList<OAISourceReference> OAIRequestLog::getSourceReference() const {
    return m_source_reference;
}
void OAIRequestLog::setSourceReference(const QList<OAISourceReference> &source_reference) {
    m_source_reference = source_reference;
    m_source_reference_isSet = true;
}

bool OAIRequestLog::is_source_reference_Set() const{
    return m_source_reference_isSet;
}

bool OAIRequestLog::is_source_reference_Valid() const{
    return m_source_reference_isValid;
}

QString OAIRequestLog::getSpanId() const {
    return m_span_id;
}
void OAIRequestLog::setSpanId(const QString &span_id) {
    m_span_id = span_id;
    m_span_id_isSet = true;
}

bool OAIRequestLog::is_span_id_Set() const{
    return m_span_id_isSet;
}

bool OAIRequestLog::is_span_id_Valid() const{
    return m_span_id_isValid;
}

QString OAIRequestLog::getStartTime() const {
    return m_start_time;
}
void OAIRequestLog::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRequestLog::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRequestLog::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIRequestLog::getStatus() const {
    return m_status;
}
void OAIRequestLog::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRequestLog::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRequestLog::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRequestLog::getTaskName() const {
    return m_task_name;
}
void OAIRequestLog::setTaskName(const QString &task_name) {
    m_task_name = task_name;
    m_task_name_isSet = true;
}

bool OAIRequestLog::is_task_name_Set() const{
    return m_task_name_isSet;
}

bool OAIRequestLog::is_task_name_Valid() const{
    return m_task_name_isValid;
}

QString OAIRequestLog::getTaskQueueName() const {
    return m_task_queue_name;
}
void OAIRequestLog::setTaskQueueName(const QString &task_queue_name) {
    m_task_queue_name = task_queue_name;
    m_task_queue_name_isSet = true;
}

bool OAIRequestLog::is_task_queue_name_Set() const{
    return m_task_queue_name_isSet;
}

bool OAIRequestLog::is_task_queue_name_Valid() const{
    return m_task_queue_name_isValid;
}

QString OAIRequestLog::getTraceId() const {
    return m_trace_id;
}
void OAIRequestLog::setTraceId(const QString &trace_id) {
    m_trace_id = trace_id;
    m_trace_id_isSet = true;
}

bool OAIRequestLog::is_trace_id_Set() const{
    return m_trace_id_isSet;
}

bool OAIRequestLog::is_trace_id_Valid() const{
    return m_trace_id_isValid;
}

bool OAIRequestLog::isTraceSampled() const {
    return m_trace_sampled;
}
void OAIRequestLog::setTraceSampled(const bool &trace_sampled) {
    m_trace_sampled = trace_sampled;
    m_trace_sampled_isSet = true;
}

bool OAIRequestLog::is_trace_sampled_Set() const{
    return m_trace_sampled_isSet;
}

bool OAIRequestLog::is_trace_sampled_Valid() const{
    return m_trace_sampled_isValid;
}

QString OAIRequestLog::getUrlMapEntry() const {
    return m_url_map_entry;
}
void OAIRequestLog::setUrlMapEntry(const QString &url_map_entry) {
    m_url_map_entry = url_map_entry;
    m_url_map_entry_isSet = true;
}

bool OAIRequestLog::is_url_map_entry_Set() const{
    return m_url_map_entry_isSet;
}

bool OAIRequestLog::is_url_map_entry_Valid() const{
    return m_url_map_entry_isValid;
}

QString OAIRequestLog::getUserAgent() const {
    return m_user_agent;
}
void OAIRequestLog::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIRequestLog::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIRequestLog::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAIRequestLog::getVersionId() const {
    return m_version_id;
}
void OAIRequestLog::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIRequestLog::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIRequestLog::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIRequestLog::isWasLoadingRequest() const {
    return m_was_loading_request;
}
void OAIRequestLog::setWasLoadingRequest(const bool &was_loading_request) {
    m_was_loading_request = was_loading_request;
    m_was_loading_request_isSet = true;
}

bool OAIRequestLog::is_was_loading_request_Set() const{
    return m_was_loading_request_isSet;
}

bool OAIRequestLog::is_was_loading_request_Valid() const{
    return m_was_loading_request_isValid;
}

bool OAIRequestLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mega_cycles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_reference.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_sampled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_map_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_was_loading_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
