/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogEntry::OAILogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogEntry::OAILogEntry() {
    this->initializeModel();
}

OAILogEntry::~OAILogEntry() {}

void OAILogEntry::initializeModel() {

    m_error_groups_isSet = false;
    m_error_groups_isValid = false;

    m_http_request_isSet = false;
    m_http_request_isValid = false;

    m_insert_id_isSet = false;
    m_insert_id_isValid = false;

    m_json_payload_isSet = false;
    m_json_payload_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_log_name_isSet = false;
    m_log_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_proto_payload_isSet = false;
    m_proto_payload_isValid = false;

    m_receive_timestamp_isSet = false;
    m_receive_timestamp_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_location_isSet = false;
    m_source_location_isValid = false;

    m_span_id_isSet = false;
    m_span_id_isValid = false;

    m_split_isSet = false;
    m_split_isValid = false;

    m_text_payload_isSet = false;
    m_text_payload_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_trace_isSet = false;
    m_trace_isValid = false;

    m_trace_sampled_isSet = false;
    m_trace_sampled_isValid = false;
}

void OAILogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogEntry::fromJsonObject(QJsonObject json) {

    m_error_groups_isValid = ::OpenAPI::fromJsonValue(m_error_groups, json[QString("errorGroups")]);
    m_error_groups_isSet = !json[QString("errorGroups")].isNull() && m_error_groups_isValid;

    m_http_request_isValid = ::OpenAPI::fromJsonValue(m_http_request, json[QString("httpRequest")]);
    m_http_request_isSet = !json[QString("httpRequest")].isNull() && m_http_request_isValid;

    m_insert_id_isValid = ::OpenAPI::fromJsonValue(m_insert_id, json[QString("insertId")]);
    m_insert_id_isSet = !json[QString("insertId")].isNull() && m_insert_id_isValid;

    m_json_payload_isValid = ::OpenAPI::fromJsonValue(m_json_payload, json[QString("jsonPayload")]);
    m_json_payload_isSet = !json[QString("jsonPayload")].isNull() && m_json_payload_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_log_name_isValid = ::OpenAPI::fromJsonValue(m_log_name, json[QString("logName")]);
    m_log_name_isSet = !json[QString("logName")].isNull() && m_log_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_proto_payload_isValid = ::OpenAPI::fromJsonValue(m_proto_payload, json[QString("protoPayload")]);
    m_proto_payload_isSet = !json[QString("protoPayload")].isNull() && m_proto_payload_isValid;

    m_receive_timestamp_isValid = ::OpenAPI::fromJsonValue(m_receive_timestamp, json[QString("receiveTimestamp")]);
    m_receive_timestamp_isSet = !json[QString("receiveTimestamp")].isNull() && m_receive_timestamp_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_location_isValid = ::OpenAPI::fromJsonValue(m_source_location, json[QString("sourceLocation")]);
    m_source_location_isSet = !json[QString("sourceLocation")].isNull() && m_source_location_isValid;

    m_span_id_isValid = ::OpenAPI::fromJsonValue(m_span_id, json[QString("spanId")]);
    m_span_id_isSet = !json[QString("spanId")].isNull() && m_span_id_isValid;

    m_split_isValid = ::OpenAPI::fromJsonValue(m_split, json[QString("split")]);
    m_split_isSet = !json[QString("split")].isNull() && m_split_isValid;

    m_text_payload_isValid = ::OpenAPI::fromJsonValue(m_text_payload, json[QString("textPayload")]);
    m_text_payload_isSet = !json[QString("textPayload")].isNull() && m_text_payload_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_trace_isValid = ::OpenAPI::fromJsonValue(m_trace, json[QString("trace")]);
    m_trace_isSet = !json[QString("trace")].isNull() && m_trace_isValid;

    m_trace_sampled_isValid = ::OpenAPI::fromJsonValue(m_trace_sampled, json[QString("traceSampled")]);
    m_trace_sampled_isSet = !json[QString("traceSampled")].isNull() && m_trace_sampled_isValid;
}

QString OAILogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_error_groups.size() > 0) {
        obj.insert(QString("errorGroups"), ::OpenAPI::toJsonValue(m_error_groups));
    }
    if (m_http_request.isSet()) {
        obj.insert(QString("httpRequest"), ::OpenAPI::toJsonValue(m_http_request));
    }
    if (m_insert_id_isSet) {
        obj.insert(QString("insertId"), ::OpenAPI::toJsonValue(m_insert_id));
    }
    if (m_json_payload.size() > 0) {
        obj.insert(QString("jsonPayload"), ::OpenAPI::toJsonValue(m_json_payload));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_log_name_isSet) {
        obj.insert(QString("logName"), ::OpenAPI::toJsonValue(m_log_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_proto_payload.size() > 0) {
        obj.insert(QString("protoPayload"), ::OpenAPI::toJsonValue(m_proto_payload));
    }
    if (m_receive_timestamp_isSet) {
        obj.insert(QString("receiveTimestamp"), ::OpenAPI::toJsonValue(m_receive_timestamp));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_location.isSet()) {
        obj.insert(QString("sourceLocation"), ::OpenAPI::toJsonValue(m_source_location));
    }
    if (m_span_id_isSet) {
        obj.insert(QString("spanId"), ::OpenAPI::toJsonValue(m_span_id));
    }
    if (m_split.isSet()) {
        obj.insert(QString("split"), ::OpenAPI::toJsonValue(m_split));
    }
    if (m_text_payload_isSet) {
        obj.insert(QString("textPayload"), ::OpenAPI::toJsonValue(m_text_payload));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_trace_isSet) {
        obj.insert(QString("trace"), ::OpenAPI::toJsonValue(m_trace));
    }
    if (m_trace_sampled_isSet) {
        obj.insert(QString("traceSampled"), ::OpenAPI::toJsonValue(m_trace_sampled));
    }
    return obj;
}

QList<OAILogErrorGroup> OAILogEntry::getErrorGroups() const {
    return m_error_groups;
}
void OAILogEntry::setErrorGroups(const QList<OAILogErrorGroup> &error_groups) {
    m_error_groups = error_groups;
    m_error_groups_isSet = true;
}

bool OAILogEntry::is_error_groups_Set() const{
    return m_error_groups_isSet;
}

bool OAILogEntry::is_error_groups_Valid() const{
    return m_error_groups_isValid;
}

OAIHttpRequest OAILogEntry::getHttpRequest() const {
    return m_http_request;
}
void OAILogEntry::setHttpRequest(const OAIHttpRequest &http_request) {
    m_http_request = http_request;
    m_http_request_isSet = true;
}

bool OAILogEntry::is_http_request_Set() const{
    return m_http_request_isSet;
}

bool OAILogEntry::is_http_request_Valid() const{
    return m_http_request_isValid;
}

QString OAILogEntry::getInsertId() const {
    return m_insert_id;
}
void OAILogEntry::setInsertId(const QString &insert_id) {
    m_insert_id = insert_id;
    m_insert_id_isSet = true;
}

bool OAILogEntry::is_insert_id_Set() const{
    return m_insert_id_isSet;
}

bool OAILogEntry::is_insert_id_Valid() const{
    return m_insert_id_isValid;
}

QMap<QString, QJsonValue> OAILogEntry::getJsonPayload() const {
    return m_json_payload;
}
void OAILogEntry::setJsonPayload(const QMap<QString, QJsonValue> &json_payload) {
    m_json_payload = json_payload;
    m_json_payload_isSet = true;
}

bool OAILogEntry::is_json_payload_Set() const{
    return m_json_payload_isSet;
}

bool OAILogEntry::is_json_payload_Valid() const{
    return m_json_payload_isValid;
}

QMap<QString, QString> OAILogEntry::getLabels() const {
    return m_labels;
}
void OAILogEntry::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAILogEntry::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAILogEntry::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAILogEntry::getLogName() const {
    return m_log_name;
}
void OAILogEntry::setLogName(const QString &log_name) {
    m_log_name = log_name;
    m_log_name_isSet = true;
}

bool OAILogEntry::is_log_name_Set() const{
    return m_log_name_isSet;
}

bool OAILogEntry::is_log_name_Valid() const{
    return m_log_name_isValid;
}

OAIMonitoredResourceMetadata OAILogEntry::getMetadata() const {
    return m_metadata;
}
void OAILogEntry::setMetadata(const OAIMonitoredResourceMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILogEntry::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILogEntry::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAILogEntryOperation OAILogEntry::getOperation() const {
    return m_operation;
}
void OAILogEntry::setOperation(const OAILogEntryOperation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAILogEntry::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAILogEntry::is_operation_Valid() const{
    return m_operation_isValid;
}

QMap<QString, QJsonValue> OAILogEntry::getProtoPayload() const {
    return m_proto_payload;
}
void OAILogEntry::setProtoPayload(const QMap<QString, QJsonValue> &proto_payload) {
    m_proto_payload = proto_payload;
    m_proto_payload_isSet = true;
}

bool OAILogEntry::is_proto_payload_Set() const{
    return m_proto_payload_isSet;
}

bool OAILogEntry::is_proto_payload_Valid() const{
    return m_proto_payload_isValid;
}

QString OAILogEntry::getReceiveTimestamp() const {
    return m_receive_timestamp;
}
void OAILogEntry::setReceiveTimestamp(const QString &receive_timestamp) {
    m_receive_timestamp = receive_timestamp;
    m_receive_timestamp_isSet = true;
}

bool OAILogEntry::is_receive_timestamp_Set() const{
    return m_receive_timestamp_isSet;
}

bool OAILogEntry::is_receive_timestamp_Valid() const{
    return m_receive_timestamp_isValid;
}

OAIMonitoredResource OAILogEntry::getResource() const {
    return m_resource;
}
void OAILogEntry::setResource(const OAIMonitoredResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAILogEntry::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAILogEntry::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAILogEntry::getSeverity() const {
    return m_severity;
}
void OAILogEntry::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAILogEntry::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAILogEntry::is_severity_Valid() const{
    return m_severity_isValid;
}

OAILogEntrySourceLocation OAILogEntry::getSourceLocation() const {
    return m_source_location;
}
void OAILogEntry::setSourceLocation(const OAILogEntrySourceLocation &source_location) {
    m_source_location = source_location;
    m_source_location_isSet = true;
}

bool OAILogEntry::is_source_location_Set() const{
    return m_source_location_isSet;
}

bool OAILogEntry::is_source_location_Valid() const{
    return m_source_location_isValid;
}

QString OAILogEntry::getSpanId() const {
    return m_span_id;
}
void OAILogEntry::setSpanId(const QString &span_id) {
    m_span_id = span_id;
    m_span_id_isSet = true;
}

bool OAILogEntry::is_span_id_Set() const{
    return m_span_id_isSet;
}

bool OAILogEntry::is_span_id_Valid() const{
    return m_span_id_isValid;
}

OAILogSplit OAILogEntry::getSplit() const {
    return m_split;
}
void OAILogEntry::setSplit(const OAILogSplit &split) {
    m_split = split;
    m_split_isSet = true;
}

bool OAILogEntry::is_split_Set() const{
    return m_split_isSet;
}

bool OAILogEntry::is_split_Valid() const{
    return m_split_isValid;
}

QString OAILogEntry::getTextPayload() const {
    return m_text_payload;
}
void OAILogEntry::setTextPayload(const QString &text_payload) {
    m_text_payload = text_payload;
    m_text_payload_isSet = true;
}

bool OAILogEntry::is_text_payload_Set() const{
    return m_text_payload_isSet;
}

bool OAILogEntry::is_text_payload_Valid() const{
    return m_text_payload_isValid;
}

QString OAILogEntry::getTimestamp() const {
    return m_timestamp;
}
void OAILogEntry::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILogEntry::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILogEntry::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAILogEntry::getTrace() const {
    return m_trace;
}
void OAILogEntry::setTrace(const QString &trace) {
    m_trace = trace;
    m_trace_isSet = true;
}

bool OAILogEntry::is_trace_Set() const{
    return m_trace_isSet;
}

bool OAILogEntry::is_trace_Valid() const{
    return m_trace_isValid;
}

bool OAILogEntry::isTraceSampled() const {
    return m_trace_sampled;
}
void OAILogEntry::setTraceSampled(const bool &trace_sampled) {
    m_trace_sampled = trace_sampled;
    m_trace_sampled_isSet = true;
}

bool OAILogEntry::is_trace_sampled_Set() const{
    return m_trace_sampled_isSet;
}

bool OAILogEntry::is_trace_sampled_Valid() const{
    return m_trace_sampled_isValid;
}

bool OAILogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_sampled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
