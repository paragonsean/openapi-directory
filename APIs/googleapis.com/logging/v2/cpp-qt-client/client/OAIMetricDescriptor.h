/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricDescriptor.h
 *
 * Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type&#39;s existing data unusable.
 */

#ifndef OAIMetricDescriptor_H
#define OAIMetricDescriptor_H

#include <QJsonObject>

#include "OAILabelDescriptor.h"
#include "OAIMetricDescriptorMetadata.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILabelDescriptor;
class OAIMetricDescriptorMetadata;

class OAIMetricDescriptor : public OAIObject {
public:
    OAIMetricDescriptor();
    OAIMetricDescriptor(QString json);
    ~OAIMetricDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<OAILabelDescriptor> getLabels() const;
    void setLabels(const QList<OAILabelDescriptor> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLaunchStage() const;
    void setLaunchStage(const QString &launch_stage);
    bool is_launch_stage_Set() const;
    bool is_launch_stage_Valid() const;

    OAIMetricDescriptorMetadata getMetadata() const;
    void setMetadata(const OAIMetricDescriptorMetadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getMetricKind() const;
    void setMetricKind(const QString &metric_kind);
    bool is_metric_kind_Set() const;
    bool is_metric_kind_Valid() const;

    QList<QString> getMonitoredResourceTypes() const;
    void setMonitoredResourceTypes(const QList<QString> &monitored_resource_types);
    bool is_monitored_resource_types_Set() const;
    bool is_monitored_resource_types_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QString getValueType() const;
    void setValueType(const QString &value_type);
    bool is_value_type_Set() const;
    bool is_value_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<OAILabelDescriptor> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_launch_stage;
    bool m_launch_stage_isSet;
    bool m_launch_stage_isValid;

    OAIMetricDescriptorMetadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_metric_kind;
    bool m_metric_kind_isSet;
    bool m_metric_kind_isValid;

    QList<QString> m_monitored_resource_types;
    bool m_monitored_resource_types_isSet;
    bool m_monitored_resource_types_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QString m_value_type;
    bool m_value_type_isSet;
    bool m_value_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricDescriptor)

#endif // OAIMetricDescriptor_H
