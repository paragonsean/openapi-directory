/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceReference::OAISourceReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceReference::OAISourceReference() {
    this->initializeModel();
}

OAISourceReference::~OAISourceReference() {}

void OAISourceReference::initializeModel() {

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;
}

void OAISourceReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceReference::fromJsonObject(QJsonObject json) {

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;
}

QString OAISourceReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceReference::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    return obj;
}

QString OAISourceReference::getRepository() const {
    return m_repository;
}
void OAISourceReference::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAISourceReference::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAISourceReference::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAISourceReference::getRevisionId() const {
    return m_revision_id;
}
void OAISourceReference::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAISourceReference::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAISourceReference::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

bool OAISourceReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
