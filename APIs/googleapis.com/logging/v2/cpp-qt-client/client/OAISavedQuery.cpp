/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedQuery::OAISavedQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedQuery::OAISavedQuery() {
    this->initializeModel();
}

OAISavedQuery::~OAISavedQuery() {}

void OAISavedQuery::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_logging_query_isSet = false;
    m_logging_query_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ops_analytics_query_isSet = false;
    m_ops_analytics_query_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAISavedQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedQuery::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_logging_query_isValid = ::OpenAPI::fromJsonValue(m_logging_query, json[QString("loggingQuery")]);
    m_logging_query_isSet = !json[QString("loggingQuery")].isNull() && m_logging_query_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ops_analytics_query_isValid = ::OpenAPI::fromJsonValue(m_ops_analytics_query, json[QString("opsAnalyticsQuery")]);
    m_ops_analytics_query_isSet = !json[QString("opsAnalyticsQuery")].isNull() && m_ops_analytics_query_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAISavedQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_logging_query.isSet()) {
        obj.insert(QString("loggingQuery"), ::OpenAPI::toJsonValue(m_logging_query));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ops_analytics_query.isSet()) {
        obj.insert(QString("opsAnalyticsQuery"), ::OpenAPI::toJsonValue(m_ops_analytics_query));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAISavedQuery::getCreateTime() const {
    return m_create_time;
}
void OAISavedQuery::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISavedQuery::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISavedQuery::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISavedQuery::getDescription() const {
    return m_description;
}
void OAISavedQuery::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavedQuery::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavedQuery::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISavedQuery::getDisplayName() const {
    return m_display_name;
}
void OAISavedQuery::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISavedQuery::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISavedQuery::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAILoggingQuery OAISavedQuery::getLoggingQuery() const {
    return m_logging_query;
}
void OAISavedQuery::setLoggingQuery(const OAILoggingQuery &logging_query) {
    m_logging_query = logging_query;
    m_logging_query_isSet = true;
}

bool OAISavedQuery::is_logging_query_Set() const{
    return m_logging_query_isSet;
}

bool OAISavedQuery::is_logging_query_Valid() const{
    return m_logging_query_isValid;
}

QString OAISavedQuery::getName() const {
    return m_name;
}
void OAISavedQuery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISavedQuery::is_name_Set() const{
    return m_name_isSet;
}

bool OAISavedQuery::is_name_Valid() const{
    return m_name_isValid;
}

OAIOpsAnalyticsQuery OAISavedQuery::getOpsAnalyticsQuery() const {
    return m_ops_analytics_query;
}
void OAISavedQuery::setOpsAnalyticsQuery(const OAIOpsAnalyticsQuery &ops_analytics_query) {
    m_ops_analytics_query = ops_analytics_query;
    m_ops_analytics_query_isSet = true;
}

bool OAISavedQuery::is_ops_analytics_query_Set() const{
    return m_ops_analytics_query_isSet;
}

bool OAISavedQuery::is_ops_analytics_query_Valid() const{
    return m_ops_analytics_query_isValid;
}

QString OAISavedQuery::getUpdateTime() const {
    return m_update_time;
}
void OAISavedQuery::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISavedQuery::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISavedQuery::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAISavedQuery::getVisibility() const {
    return m_visibility;
}
void OAISavedQuery::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAISavedQuery::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAISavedQuery::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAISavedQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ops_analytics_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
