/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogMetric::OAILogMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogMetric::OAILogMetric() {
    this->initializeModel();
}

OAILogMetric::~OAILogMetric() {}

void OAILogMetric::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_options_isSet = false;
    m_bucket_options_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_label_extractors_isSet = false;
    m_label_extractors_isValid = false;

    m_metric_descriptor_isSet = false;
    m_metric_descriptor_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_value_extractor_isSet = false;
    m_value_extractor_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAILogMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogMetric::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_options_isValid = ::OpenAPI::fromJsonValue(m_bucket_options, json[QString("bucketOptions")]);
    m_bucket_options_isSet = !json[QString("bucketOptions")].isNull() && m_bucket_options_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_label_extractors_isValid = ::OpenAPI::fromJsonValue(m_label_extractors, json[QString("labelExtractors")]);
    m_label_extractors_isSet = !json[QString("labelExtractors")].isNull() && m_label_extractors_isValid;

    m_metric_descriptor_isValid = ::OpenAPI::fromJsonValue(m_metric_descriptor, json[QString("metricDescriptor")]);
    m_metric_descriptor_isSet = !json[QString("metricDescriptor")].isNull() && m_metric_descriptor_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_value_extractor_isValid = ::OpenAPI::fromJsonValue(m_value_extractor, json[QString("valueExtractor")]);
    m_value_extractor_isSet = !json[QString("valueExtractor")].isNull() && m_value_extractor_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAILogMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_options.isSet()) {
        obj.insert(QString("bucketOptions"), ::OpenAPI::toJsonValue(m_bucket_options));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_label_extractors.size() > 0) {
        obj.insert(QString("labelExtractors"), ::OpenAPI::toJsonValue(m_label_extractors));
    }
    if (m_metric_descriptor.isSet()) {
        obj.insert(QString("metricDescriptor"), ::OpenAPI::toJsonValue(m_metric_descriptor));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_value_extractor_isSet) {
        obj.insert(QString("valueExtractor"), ::OpenAPI::toJsonValue(m_value_extractor));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAILogMetric::getBucketName() const {
    return m_bucket_name;
}
void OAILogMetric::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAILogMetric::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAILogMetric::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

OAIBucketOptions OAILogMetric::getBucketOptions() const {
    return m_bucket_options;
}
void OAILogMetric::setBucketOptions(const OAIBucketOptions &bucket_options) {
    m_bucket_options = bucket_options;
    m_bucket_options_isSet = true;
}

bool OAILogMetric::is_bucket_options_Set() const{
    return m_bucket_options_isSet;
}

bool OAILogMetric::is_bucket_options_Valid() const{
    return m_bucket_options_isValid;
}

QString OAILogMetric::getCreateTime() const {
    return m_create_time;
}
void OAILogMetric::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILogMetric::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILogMetric::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILogMetric::getDescription() const {
    return m_description;
}
void OAILogMetric::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILogMetric::is_description_Set() const{
    return m_description_isSet;
}

bool OAILogMetric::is_description_Valid() const{
    return m_description_isValid;
}

bool OAILogMetric::isDisabled() const {
    return m_disabled;
}
void OAILogMetric::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAILogMetric::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAILogMetric::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAILogMetric::getFilter() const {
    return m_filter;
}
void OAILogMetric::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAILogMetric::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAILogMetric::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap<QString, QString> OAILogMetric::getLabelExtractors() const {
    return m_label_extractors;
}
void OAILogMetric::setLabelExtractors(const QMap<QString, QString> &label_extractors) {
    m_label_extractors = label_extractors;
    m_label_extractors_isSet = true;
}

bool OAILogMetric::is_label_extractors_Set() const{
    return m_label_extractors_isSet;
}

bool OAILogMetric::is_label_extractors_Valid() const{
    return m_label_extractors_isValid;
}

OAIMetricDescriptor OAILogMetric::getMetricDescriptor() const {
    return m_metric_descriptor;
}
void OAILogMetric::setMetricDescriptor(const OAIMetricDescriptor &metric_descriptor) {
    m_metric_descriptor = metric_descriptor;
    m_metric_descriptor_isSet = true;
}

bool OAILogMetric::is_metric_descriptor_Set() const{
    return m_metric_descriptor_isSet;
}

bool OAILogMetric::is_metric_descriptor_Valid() const{
    return m_metric_descriptor_isValid;
}

QString OAILogMetric::getName() const {
    return m_name;
}
void OAILogMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILogMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAILogMetric::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILogMetric::getUpdateTime() const {
    return m_update_time;
}
void OAILogMetric::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAILogMetric::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAILogMetric::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAILogMetric::getValueExtractor() const {
    return m_value_extractor;
}
void OAILogMetric::setValueExtractor(const QString &value_extractor) {
    m_value_extractor = value_extractor;
    m_value_extractor_isSet = true;
}

bool OAILogMetric::is_value_extractor_Set() const{
    return m_value_extractor_isSet;
}

bool OAILogMetric::is_value_extractor_Valid() const{
    return m_value_extractor_isValid;
}

QString OAILogMetric::getVersion() const {
    return m_version;
}
void OAILogMetric::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAILogMetric::is_version_Set() const{
    return m_version_isSet;
}

bool OAILogMetric::is_version_Valid() const{
    return m_version_isValid;
}

bool OAILogMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_extractors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_extractor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
