/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoredResourceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoredResourceMetadata::OAIMonitoredResourceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoredResourceMetadata::OAIMonitoredResourceMetadata() {
    this->initializeModel();
}

OAIMonitoredResourceMetadata::~OAIMonitoredResourceMetadata() {}

void OAIMonitoredResourceMetadata::initializeModel() {

    m_system_labels_isSet = false;
    m_system_labels_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAIMonitoredResourceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoredResourceMetadata::fromJsonObject(QJsonObject json) {

    m_system_labels_isValid = ::OpenAPI::fromJsonValue(m_system_labels, json[QString("systemLabels")]);
    m_system_labels_isSet = !json[QString("systemLabels")].isNull() && m_system_labels_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAIMonitoredResourceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoredResourceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_system_labels.size() > 0) {
        obj.insert(QString("systemLabels"), ::OpenAPI::toJsonValue(m_system_labels));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIMonitoredResourceMetadata::getSystemLabels() const {
    return m_system_labels;
}
void OAIMonitoredResourceMetadata::setSystemLabels(const QMap<QString, QJsonValue> &system_labels) {
    m_system_labels = system_labels;
    m_system_labels_isSet = true;
}

bool OAIMonitoredResourceMetadata::is_system_labels_Set() const{
    return m_system_labels_isSet;
}

bool OAIMonitoredResourceMetadata::is_system_labels_Valid() const{
    return m_system_labels_isValid;
}

QMap<QString, QString> OAIMonitoredResourceMetadata::getUserLabels() const {
    return m_user_labels;
}
void OAIMonitoredResourceMetadata::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIMonitoredResourceMetadata::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIMonitoredResourceMetadata::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIMonitoredResourceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_system_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoredResourceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
