/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogLine::OAILogLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogLine::OAILogLine() {
    this->initializeModel();
}

OAILogLine::~OAILogLine() {}

void OAILogLine::initializeModel() {

    m_log_message_isSet = false;
    m_log_message_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_location_isSet = false;
    m_source_location_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAILogLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogLine::fromJsonObject(QJsonObject json) {

    m_log_message_isValid = ::OpenAPI::fromJsonValue(m_log_message, json[QString("logMessage")]);
    m_log_message_isSet = !json[QString("logMessage")].isNull() && m_log_message_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_location_isValid = ::OpenAPI::fromJsonValue(m_source_location, json[QString("sourceLocation")]);
    m_source_location_isSet = !json[QString("sourceLocation")].isNull() && m_source_location_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAILogLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogLine::asJsonObject() const {
    QJsonObject obj;
    if (m_log_message_isSet) {
        obj.insert(QString("logMessage"), ::OpenAPI::toJsonValue(m_log_message));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_location.isSet()) {
        obj.insert(QString("sourceLocation"), ::OpenAPI::toJsonValue(m_source_location));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAILogLine::getLogMessage() const {
    return m_log_message;
}
void OAILogLine::setLogMessage(const QString &log_message) {
    m_log_message = log_message;
    m_log_message_isSet = true;
}

bool OAILogLine::is_log_message_Set() const{
    return m_log_message_isSet;
}

bool OAILogLine::is_log_message_Valid() const{
    return m_log_message_isValid;
}

QString OAILogLine::getSeverity() const {
    return m_severity;
}
void OAILogLine::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAILogLine::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAILogLine::is_severity_Valid() const{
    return m_severity_isValid;
}

OAISourceLocation OAILogLine::getSourceLocation() const {
    return m_source_location;
}
void OAILogLine::setSourceLocation(const OAISourceLocation &source_location) {
    m_source_location = source_location;
    m_source_location_isSet = true;
}

bool OAILogLine::is_source_location_Set() const{
    return m_source_location_isSet;
}

bool OAILogLine::is_source_location_Valid() const{
    return m_source_location_isValid;
}

QString OAILogLine::getTime() const {
    return m_time;
}
void OAILogLine::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAILogLine::is_time_Set() const{
    return m_time_isSet;
}

bool OAILogLine::is_time_Valid() const{
    return m_time_isValid;
}

bool OAILogLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
