/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogSplit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogSplit::OAILogSplit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogSplit::OAILogSplit() {
    this->initializeModel();
}

OAILogSplit::~OAILogSplit() {}

void OAILogSplit::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_total_splits_isSet = false;
    m_total_splits_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAILogSplit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogSplit::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_total_splits_isValid = ::OpenAPI::fromJsonValue(m_total_splits, json[QString("totalSplits")]);
    m_total_splits_isSet = !json[QString("totalSplits")].isNull() && m_total_splits_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAILogSplit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogSplit::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_total_splits_isSet) {
        obj.insert(QString("totalSplits"), ::OpenAPI::toJsonValue(m_total_splits));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAILogSplit::getIndex() const {
    return m_index;
}
void OAILogSplit::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAILogSplit::is_index_Set() const{
    return m_index_isSet;
}

bool OAILogSplit::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAILogSplit::getTotalSplits() const {
    return m_total_splits;
}
void OAILogSplit::setTotalSplits(const qint32 &total_splits) {
    m_total_splits = total_splits;
    m_total_splits_isSet = true;
}

bool OAILogSplit::is_total_splits_Set() const{
    return m_total_splits_isSet;
}

bool OAILogSplit::is_total_splits_Valid() const{
    return m_total_splits_isValid;
}

QString OAILogSplit::getUid() const {
    return m_uid;
}
void OAILogSplit::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAILogSplit::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAILogSplit::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAILogSplit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_splits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogSplit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
