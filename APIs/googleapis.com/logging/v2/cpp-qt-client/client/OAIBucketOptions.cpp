/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketOptions::OAIBucketOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketOptions::OAIBucketOptions() {
    this->initializeModel();
}

OAIBucketOptions::~OAIBucketOptions() {}

void OAIBucketOptions::initializeModel() {

    m_explicit_buckets_isSet = false;
    m_explicit_buckets_isValid = false;

    m_exponential_buckets_isSet = false;
    m_exponential_buckets_isValid = false;

    m_linear_buckets_isSet = false;
    m_linear_buckets_isValid = false;
}

void OAIBucketOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketOptions::fromJsonObject(QJsonObject json) {

    m_explicit_buckets_isValid = ::OpenAPI::fromJsonValue(m_explicit_buckets, json[QString("explicitBuckets")]);
    m_explicit_buckets_isSet = !json[QString("explicitBuckets")].isNull() && m_explicit_buckets_isValid;

    m_exponential_buckets_isValid = ::OpenAPI::fromJsonValue(m_exponential_buckets, json[QString("exponentialBuckets")]);
    m_exponential_buckets_isSet = !json[QString("exponentialBuckets")].isNull() && m_exponential_buckets_isValid;

    m_linear_buckets_isValid = ::OpenAPI::fromJsonValue(m_linear_buckets, json[QString("linearBuckets")]);
    m_linear_buckets_isSet = !json[QString("linearBuckets")].isNull() && m_linear_buckets_isValid;
}

QString OAIBucketOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_explicit_buckets.isSet()) {
        obj.insert(QString("explicitBuckets"), ::OpenAPI::toJsonValue(m_explicit_buckets));
    }
    if (m_exponential_buckets.isSet()) {
        obj.insert(QString("exponentialBuckets"), ::OpenAPI::toJsonValue(m_exponential_buckets));
    }
    if (m_linear_buckets.isSet()) {
        obj.insert(QString("linearBuckets"), ::OpenAPI::toJsonValue(m_linear_buckets));
    }
    return obj;
}

OAIExplicit OAIBucketOptions::getExplicitBuckets() const {
    return m_explicit_buckets;
}
void OAIBucketOptions::setExplicitBuckets(const OAIExplicit &explicit_buckets) {
    m_explicit_buckets = explicit_buckets;
    m_explicit_buckets_isSet = true;
}

bool OAIBucketOptions::is_explicit_buckets_Set() const{
    return m_explicit_buckets_isSet;
}

bool OAIBucketOptions::is_explicit_buckets_Valid() const{
    return m_explicit_buckets_isValid;
}

OAIExponential OAIBucketOptions::getExponentialBuckets() const {
    return m_exponential_buckets;
}
void OAIBucketOptions::setExponentialBuckets(const OAIExponential &exponential_buckets) {
    m_exponential_buckets = exponential_buckets;
    m_exponential_buckets_isSet = true;
}

bool OAIBucketOptions::is_exponential_buckets_Set() const{
    return m_exponential_buckets_isSet;
}

bool OAIBucketOptions::is_exponential_buckets_Valid() const{
    return m_exponential_buckets_isValid;
}

OAILinear OAIBucketOptions::getLinearBuckets() const {
    return m_linear_buckets;
}
void OAIBucketOptions::setLinearBuckets(const OAILinear &linear_buckets) {
    m_linear_buckets = linear_buckets;
    m_linear_buckets_isSet = true;
}

bool OAIBucketOptions::is_linear_buckets_Set() const{
    return m_linear_buckets_isSet;
}

bool OAIBucketOptions::is_linear_buckets_Valid() const{
    return m_linear_buckets_isValid;
}

bool OAIBucketOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explicit_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exponential_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linear_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
