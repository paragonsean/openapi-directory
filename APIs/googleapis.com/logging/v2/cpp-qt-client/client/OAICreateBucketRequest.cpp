/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBucketRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBucketRequest::OAICreateBucketRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBucketRequest::OAICreateBucketRequest() {
    this->initializeModel();
}

OAICreateBucketRequest::~OAICreateBucketRequest() {}

void OAICreateBucketRequest::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_bucket_id_isSet = false;
    m_bucket_id_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAICreateBucketRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBucketRequest::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_bucket_id_isValid = ::OpenAPI::fromJsonValue(m_bucket_id, json[QString("bucketId")]);
    m_bucket_id_isSet = !json[QString("bucketId")].isNull() && m_bucket_id_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAICreateBucketRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBucketRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket.isSet()) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_bucket_id_isSet) {
        obj.insert(QString("bucketId"), ::OpenAPI::toJsonValue(m_bucket_id));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

OAILogBucket OAICreateBucketRequest::getBucket() const {
    return m_bucket;
}
void OAICreateBucketRequest::setBucket(const OAILogBucket &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAICreateBucketRequest::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAICreateBucketRequest::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAICreateBucketRequest::getBucketId() const {
    return m_bucket_id;
}
void OAICreateBucketRequest::setBucketId(const QString &bucket_id) {
    m_bucket_id = bucket_id;
    m_bucket_id_isSet = true;
}

bool OAICreateBucketRequest::is_bucket_id_Set() const{
    return m_bucket_id_isSet;
}

bool OAICreateBucketRequest::is_bucket_id_Valid() const{
    return m_bucket_id_isValid;
}

QString OAICreateBucketRequest::getParent() const {
    return m_parent;
}
void OAICreateBucketRequest::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAICreateBucketRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAICreateBucketRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAICreateBucketRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBucketRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
