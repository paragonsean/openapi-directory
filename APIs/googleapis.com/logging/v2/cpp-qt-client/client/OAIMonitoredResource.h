/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMonitoredResource.h
 *
 * An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource&#39;s schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for \&quot;gce_instance\&quot; has labels \&quot;project_id\&quot;, \&quot;instance_id\&quot; and \&quot;zone\&quot;: { \&quot;type\&quot;: \&quot;gce_instance\&quot;, \&quot;labels\&quot;: { \&quot;project_id\&quot;: \&quot;my-project\&quot;, \&quot;instance_id\&quot;: \&quot;12345678901234\&quot;, \&quot;zone\&quot;: \&quot;us-central1-a\&quot; }} 
 */

#ifndef OAIMonitoredResource_H
#define OAIMonitoredResource_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMonitoredResource : public OAIObject {
public:
    OAIMonitoredResource();
    OAIMonitoredResource(QString json);
    ~OAIMonitoredResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMonitoredResource)

#endif // OAIMonitoredResource_H
