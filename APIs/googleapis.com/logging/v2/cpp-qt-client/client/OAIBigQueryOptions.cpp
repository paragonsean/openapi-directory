/**
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigQueryOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigQueryOptions::OAIBigQueryOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigQueryOptions::OAIBigQueryOptions() {
    this->initializeModel();
}

OAIBigQueryOptions::~OAIBigQueryOptions() {}

void OAIBigQueryOptions::initializeModel() {

    m_use_partitioned_tables_isSet = false;
    m_use_partitioned_tables_isValid = false;

    m_uses_timestamp_column_partitioning_isSet = false;
    m_uses_timestamp_column_partitioning_isValid = false;
}

void OAIBigQueryOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigQueryOptions::fromJsonObject(QJsonObject json) {

    m_use_partitioned_tables_isValid = ::OpenAPI::fromJsonValue(m_use_partitioned_tables, json[QString("usePartitionedTables")]);
    m_use_partitioned_tables_isSet = !json[QString("usePartitionedTables")].isNull() && m_use_partitioned_tables_isValid;

    m_uses_timestamp_column_partitioning_isValid = ::OpenAPI::fromJsonValue(m_uses_timestamp_column_partitioning, json[QString("usesTimestampColumnPartitioning")]);
    m_uses_timestamp_column_partitioning_isSet = !json[QString("usesTimestampColumnPartitioning")].isNull() && m_uses_timestamp_column_partitioning_isValid;
}

QString OAIBigQueryOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigQueryOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_use_partitioned_tables_isSet) {
        obj.insert(QString("usePartitionedTables"), ::OpenAPI::toJsonValue(m_use_partitioned_tables));
    }
    if (m_uses_timestamp_column_partitioning_isSet) {
        obj.insert(QString("usesTimestampColumnPartitioning"), ::OpenAPI::toJsonValue(m_uses_timestamp_column_partitioning));
    }
    return obj;
}

bool OAIBigQueryOptions::isUsePartitionedTables() const {
    return m_use_partitioned_tables;
}
void OAIBigQueryOptions::setUsePartitionedTables(const bool &use_partitioned_tables) {
    m_use_partitioned_tables = use_partitioned_tables;
    m_use_partitioned_tables_isSet = true;
}

bool OAIBigQueryOptions::is_use_partitioned_tables_Set() const{
    return m_use_partitioned_tables_isSet;
}

bool OAIBigQueryOptions::is_use_partitioned_tables_Valid() const{
    return m_use_partitioned_tables_isValid;
}

bool OAIBigQueryOptions::isUsesTimestampColumnPartitioning() const {
    return m_uses_timestamp_column_partitioning;
}
void OAIBigQueryOptions::setUsesTimestampColumnPartitioning(const bool &uses_timestamp_column_partitioning) {
    m_uses_timestamp_column_partitioning = uses_timestamp_column_partitioning;
    m_uses_timestamp_column_partitioning_isSet = true;
}

bool OAIBigQueryOptions::is_uses_timestamp_column_partitioning_Set() const{
    return m_uses_timestamp_column_partitioning_isSet;
}

bool OAIBigQueryOptions::is_uses_timestamp_column_partitioning_Valid() const{
    return m_uses_timestamp_column_partitioning_isValid;
}

bool OAIBigQueryOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_use_partitioned_tables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_timestamp_column_partitioning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigQueryOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
