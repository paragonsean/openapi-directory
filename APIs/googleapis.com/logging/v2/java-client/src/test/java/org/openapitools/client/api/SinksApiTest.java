/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListSinksResponse;
import org.openapitools.client.model.LogSink;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SinksApi
 */
@Disabled
public class SinksApiTest {

    private final SinksApi api = new SinksApi();

    /**
     * Creates a sink that exports specified log entries to a destination. The export begins upon ingress, unless the sink&#39;s writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggingSinksCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customWriterIdentity = null;
        Boolean uniqueWriterIdentity = null;
        LogSink logSink = null;
        LogSink response = api.loggingSinksCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customWriterIdentity, uniqueWriterIdentity, logSink);
        // TODO: test validations
    }

    /**
     * Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggingSinksDeleteTest() throws ApiException {
        String sinkName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.loggingSinksDelete(sinkName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a sink.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggingSinksGetTest() throws ApiException {
        String sinkName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LogSink response = api.loggingSinksGet(sinkName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists sinks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggingSinksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSinksResponse response = api.loggingSinksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a sink. This method replaces the values of the destination and filter fields of the existing sink with the corresponding values from the new sink.The updated sink might also have a new writer_identity; see the unique_writer_identity field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loggingSinksUpdateTest() throws ApiException {
        String sinkName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customWriterIdentity = null;
        Boolean uniqueWriterIdentity = null;
        String updateMask = null;
        LogSink logSink = null;
        LogSink response = api.loggingSinksUpdate(sinkName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customWriterIdentity, uniqueWriterIdentity, updateMask, logSink);
        // TODO: test validations
    }

}
