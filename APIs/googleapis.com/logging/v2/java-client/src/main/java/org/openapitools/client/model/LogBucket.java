/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CmekSettings;
import org.openapitools.client.model.IndexConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a repository in which log entries are stored.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogBucket {
  public static final String SERIALIZED_NAME_ANALYTICS_ENABLED = "analyticsEnabled";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_ENABLED)
  private Boolean analyticsEnabled;

  public static final String SERIALIZED_NAME_CMEK_SETTINGS = "cmekSettings";
  @SerializedName(SERIALIZED_NAME_CMEK_SETTINGS)
  private CmekSettings cmekSettings;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INDEX_CONFIGS = "indexConfigs";
  @SerializedName(SERIALIZED_NAME_INDEX_CONFIGS)
  private List<IndexConfig> indexConfigs = new ArrayList<>();

  /**
   * Output only. The bucket lifecycle state.
   */
  @JsonAdapter(LifecycleStateEnum.Adapter.class)
  public enum LifecycleStateEnum {
    LIFECYCLE_STATE_UNSPECIFIED("LIFECYCLE_STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    DELETE_REQUESTED("DELETE_REQUESTED"),
    
    UPDATING("UPDATING"),
    
    CREATING("CREATING"),
    
    FAILED("FAILED");

    private String value;

    LifecycleStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleStateEnum fromValue(String value) {
      for (LifecycleStateEnum b : LifecycleStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifecycleStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifecycleStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LifecycleStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIFECYCLE_STATE = "lifecycleState";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_STATE)
  private LifecycleStateEnum lifecycleState;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESTRICTED_FIELDS = "restrictedFields";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_FIELDS)
  private List<String> restrictedFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETENTION_DAYS = "retentionDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_DAYS)
  private Integer retentionDays;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public LogBucket() {
  }

  public LogBucket(
     String createTime, 
     LifecycleStateEnum lifecycleState, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.lifecycleState = lifecycleState;
    this.name = name;
    this.updateTime = updateTime;
  }

  public LogBucket analyticsEnabled(Boolean analyticsEnabled) {
    this.analyticsEnabled = analyticsEnabled;
    return this;
  }

  /**
   * Optional. Whether log analytics is enabled for this bucket.Once enabled, log analytics features cannot be disabled.
   * @return analyticsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAnalyticsEnabled() {
    return analyticsEnabled;
  }

  public void setAnalyticsEnabled(Boolean analyticsEnabled) {
    this.analyticsEnabled = analyticsEnabled;
  }


  public LogBucket cmekSettings(CmekSettings cmekSettings) {
    this.cmekSettings = cmekSettings;
    return this;
  }

  /**
   * Get cmekSettings
   * @return cmekSettings
   */
  @javax.annotation.Nullable
  public CmekSettings getCmekSettings() {
    return cmekSettings;
  }

  public void setCmekSettings(CmekSettings cmekSettings) {
    this.cmekSettings = cmekSettings;
  }


  /**
   * Output only. The creation timestamp of the bucket. This is not set for any of the default buckets.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public LogBucket description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Describes this bucket.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LogBucket indexConfigs(List<IndexConfig> indexConfigs) {
    this.indexConfigs = indexConfigs;
    return this;
  }

  public LogBucket addIndexConfigsItem(IndexConfig indexConfigsItem) {
    if (this.indexConfigs == null) {
      this.indexConfigs = new ArrayList<>();
    }
    this.indexConfigs.add(indexConfigsItem);
    return this;
  }

  /**
   * Optional. A list of indexed fields and related configuration data.
   * @return indexConfigs
   */
  @javax.annotation.Nullable
  public List<IndexConfig> getIndexConfigs() {
    return indexConfigs;
  }

  public void setIndexConfigs(List<IndexConfig> indexConfigs) {
    this.indexConfigs = indexConfigs;
  }


  /**
   * Output only. The bucket lifecycle state.
   * @return lifecycleState
   */
  @javax.annotation.Nullable
  public LifecycleStateEnum getLifecycleState() {
    return lifecycleState;
  }



  public LogBucket locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Optional. Whether the bucket is locked.The retention period on a locked bucket cannot be changed. Locked buckets may only be deleted if they are empty.
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  /**
   * Output only. The resource name of the bucket.For example:projects/my-project/locations/global/buckets/my-bucketFor a list of supported locations, see Supported Regions (https://cloud.google.com/logging/docs/region-support)For the location of global it is unspecified where log entries are actually stored.After a bucket has been created, the location cannot be changed.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public LogBucket restrictedFields(List<String> restrictedFields) {
    this.restrictedFields = restrictedFields;
    return this;
  }

  public LogBucket addRestrictedFieldsItem(String restrictedFieldsItem) {
    if (this.restrictedFields == null) {
      this.restrictedFields = new ArrayList<>();
    }
    this.restrictedFields.add(restrictedFieldsItem);
    return this;
  }

  /**
   * Optional. Log entry field paths that are denied access in this bucket.The following fields and their children are eligible: textPayload, jsonPayload, protoPayload, httpRequest, labels, sourceLocation.Restricting a repeated field will restrict all values. Adding a parent will block all child fields. (e.g. foo.bar will block foo.bar.baz)
   * @return restrictedFields
   */
  @javax.annotation.Nullable
  public List<String> getRestrictedFields() {
    return restrictedFields;
  }

  public void setRestrictedFields(List<String> restrictedFields) {
    this.restrictedFields = restrictedFields;
  }


  public LogBucket retentionDays(Integer retentionDays) {
    this.retentionDays = retentionDays;
    return this;
  }

  /**
   * Optional. Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.
   * @return retentionDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionDays() {
    return retentionDays;
  }

  public void setRetentionDays(Integer retentionDays) {
    this.retentionDays = retentionDays;
  }


  /**
   * Output only. The last update timestamp of the bucket.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogBucket logBucket = (LogBucket) o;
    return Objects.equals(this.analyticsEnabled, logBucket.analyticsEnabled) &&
        Objects.equals(this.cmekSettings, logBucket.cmekSettings) &&
        Objects.equals(this.createTime, logBucket.createTime) &&
        Objects.equals(this.description, logBucket.description) &&
        Objects.equals(this.indexConfigs, logBucket.indexConfigs) &&
        Objects.equals(this.lifecycleState, logBucket.lifecycleState) &&
        Objects.equals(this.locked, logBucket.locked) &&
        Objects.equals(this.name, logBucket.name) &&
        Objects.equals(this.restrictedFields, logBucket.restrictedFields) &&
        Objects.equals(this.retentionDays, logBucket.retentionDays) &&
        Objects.equals(this.updateTime, logBucket.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsEnabled, cmekSettings, createTime, description, indexConfigs, lifecycleState, locked, name, restrictedFields, retentionDays, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogBucket {\n");
    sb.append("    analyticsEnabled: ").append(toIndentedString(analyticsEnabled)).append("\n");
    sb.append("    cmekSettings: ").append(toIndentedString(cmekSettings)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    indexConfigs: ").append(toIndentedString(indexConfigs)).append("\n");
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    restrictedFields: ").append(toIndentedString(restrictedFields)).append("\n");
    sb.append("    retentionDays: ").append(toIndentedString(retentionDays)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyticsEnabled");
    openapiFields.add("cmekSettings");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("indexConfigs");
    openapiFields.add("lifecycleState");
    openapiFields.add("locked");
    openapiFields.add("name");
    openapiFields.add("restrictedFields");
    openapiFields.add("retentionDays");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogBucket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogBucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogBucket is not found in the empty JSON string", LogBucket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogBucket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogBucket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cmekSettings`
      if (jsonObj.get("cmekSettings") != null && !jsonObj.get("cmekSettings").isJsonNull()) {
        CmekSettings.validateJsonElement(jsonObj.get("cmekSettings"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("indexConfigs") != null && !jsonObj.get("indexConfigs").isJsonNull()) {
        JsonArray jsonArrayindexConfigs = jsonObj.getAsJsonArray("indexConfigs");
        if (jsonArrayindexConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indexConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indexConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("indexConfigs").toString()));
          }

          // validate the optional field `indexConfigs` (array)
          for (int i = 0; i < jsonArrayindexConfigs.size(); i++) {
            IndexConfig.validateJsonElement(jsonArrayindexConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("lifecycleState") != null && !jsonObj.get("lifecycleState").isJsonNull()) && !jsonObj.get("lifecycleState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifecycleState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifecycleState").toString()));
      }
      // validate the optional field `lifecycleState`
      if (jsonObj.get("lifecycleState") != null && !jsonObj.get("lifecycleState").isJsonNull()) {
        LifecycleStateEnum.validateJsonElement(jsonObj.get("lifecycleState"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedFields") != null && !jsonObj.get("restrictedFields").isJsonNull() && !jsonObj.get("restrictedFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedFields` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedFields").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogBucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogBucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogBucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogBucket.class));

       return (TypeAdapter<T>) new TypeAdapter<LogBucket>() {
           @Override
           public void write(JsonWriter out, LogBucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogBucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogBucket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogBucket
   * @throws IOException if the JSON string is invalid with respect to LogBucket
   */
  public static LogBucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogBucket.class);
  }

  /**
   * Convert an instance of LogBucket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

