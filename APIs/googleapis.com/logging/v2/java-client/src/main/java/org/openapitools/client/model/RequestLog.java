/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogLine;
import org.openapitools.client.model.SourceReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Complete log information about a single HTTP request to an App Engine application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestLog {
  public static final String SERIALIZED_NAME_APP_ENGINE_RELEASE = "appEngineRelease";
  @SerializedName(SERIALIZED_NAME_APP_ENGINE_RELEASE)
  private String appEngineRelease;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Double cost;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private Boolean finished;

  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private Boolean first;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_HTTP_VERSION = "httpVersion";
  @SerializedName(SERIALIZED_NAME_HTTP_VERSION)
  private String httpVersion;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_INDEX = "instanceIndex";
  @SerializedName(SERIALIZED_NAME_INSTANCE_INDEX)
  private Integer instanceIndex;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LATENCY = "latency";
  @SerializedName(SERIALIZED_NAME_LATENCY)
  private String latency;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private List<LogLine> line = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEGA_CYCLES = "megaCycles";
  @SerializedName(SERIALIZED_NAME_MEGA_CYCLES)
  private String megaCycles;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_MODULE_ID = "moduleId";
  @SerializedName(SERIALIZED_NAME_MODULE_ID)
  private String moduleId;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PENDING_TIME = "pendingTime";
  @SerializedName(SERIALIZED_NAME_PENDING_TIME)
  private String pendingTime;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private String referrer;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  public static final String SERIALIZED_NAME_RESPONSE_SIZE = "responseSize";
  @SerializedName(SERIALIZED_NAME_RESPONSE_SIZE)
  private String responseSize;

  public static final String SERIALIZED_NAME_SOURCE_REFERENCE = "sourceReference";
  @SerializedName(SERIALIZED_NAME_SOURCE_REFERENCE)
  private List<SourceReference> sourceReference = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPAN_ID = "spanId";
  @SerializedName(SERIALIZED_NAME_SPAN_ID)
  private String spanId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_TASK_QUEUE_NAME = "taskQueueName";
  @SerializedName(SERIALIZED_NAME_TASK_QUEUE_NAME)
  private String taskQueueName;

  public static final String SERIALIZED_NAME_TRACE_ID = "traceId";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  private String traceId;

  public static final String SERIALIZED_NAME_TRACE_SAMPLED = "traceSampled";
  @SerializedName(SERIALIZED_NAME_TRACE_SAMPLED)
  private Boolean traceSampled;

  public static final String SERIALIZED_NAME_URL_MAP_ENTRY = "urlMapEntry";
  @SerializedName(SERIALIZED_NAME_URL_MAP_ENTRY)
  private String urlMapEntry;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_WAS_LOADING_REQUEST = "wasLoadingRequest";
  @SerializedName(SERIALIZED_NAME_WAS_LOADING_REQUEST)
  private Boolean wasLoadingRequest;

  public RequestLog() {
  }

  public RequestLog appEngineRelease(String appEngineRelease) {
    this.appEngineRelease = appEngineRelease;
    return this;
  }

  /**
   * App Engine release version.
   * @return appEngineRelease
   */
  @javax.annotation.Nullable
  public String getAppEngineRelease() {
    return appEngineRelease;
  }

  public void setAppEngineRelease(String appEngineRelease) {
    this.appEngineRelease = appEngineRelease;
  }


  public RequestLog appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Application that handled this request.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public RequestLog cost(Double cost) {
    this.cost = cost;
    return this;
  }

  /**
   * An indication of the relative cost of serving this request.
   * @return cost
   */
  @javax.annotation.Nullable
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }


  public RequestLog endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Time when the request finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public RequestLog finished(Boolean finished) {
    this.finished = finished;
    return this;
  }

  /**
   * Whether this request is finished or active.
   * @return finished
   */
  @javax.annotation.Nullable
  public Boolean getFinished() {
    return finished;
  }

  public void setFinished(Boolean finished) {
    this.finished = finished;
  }


  public RequestLog first(Boolean first) {
    this.first = first;
    return this;
  }

  /**
   * Whether this is the first RequestLog entry for this request. If an active request has several RequestLog entries written to Stackdriver Logging, then this field will be set for one of them.
   * @return first
   */
  @javax.annotation.Nullable
  public Boolean getFirst() {
    return first;
  }

  public void setFirst(Boolean first) {
    this.first = first;
  }


  public RequestLog host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Internet host and port number of the resource being requested.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public RequestLog httpVersion(String httpVersion) {
    this.httpVersion = httpVersion;
    return this;
  }

  /**
   * HTTP version of request. Example: \&quot;HTTP/1.1\&quot;.
   * @return httpVersion
   */
  @javax.annotation.Nullable
  public String getHttpVersion() {
    return httpVersion;
  }

  public void setHttpVersion(String httpVersion) {
    this.httpVersion = httpVersion;
  }


  public RequestLog instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * An identifier for the instance that handled the request.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public RequestLog instanceIndex(Integer instanceIndex) {
    this.instanceIndex = instanceIndex;
    return this;
  }

  /**
   * If the instance processing this request belongs to a manually scaled module, then this is the 0-based index of the instance. Otherwise, this value is -1.
   * @return instanceIndex
   */
  @javax.annotation.Nullable
  public Integer getInstanceIndex() {
    return instanceIndex;
  }

  public void setInstanceIndex(Integer instanceIndex) {
    this.instanceIndex = instanceIndex;
  }


  public RequestLog ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Origin IP address.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public RequestLog latency(String latency) {
    this.latency = latency;
    return this;
  }

  /**
   * Latency of the request.
   * @return latency
   */
  @javax.annotation.Nullable
  public String getLatency() {
    return latency;
  }

  public void setLatency(String latency) {
    this.latency = latency;
  }


  public RequestLog line(List<LogLine> line) {
    this.line = line;
    return this;
  }

  public RequestLog addLineItem(LogLine lineItem) {
    if (this.line == null) {
      this.line = new ArrayList<>();
    }
    this.line.add(lineItem);
    return this;
  }

  /**
   * A list of log lines emitted by the application while serving this request.
   * @return line
   */
  @javax.annotation.Nullable
  public List<LogLine> getLine() {
    return line;
  }

  public void setLine(List<LogLine> line) {
    this.line = line;
  }


  public RequestLog megaCycles(String megaCycles) {
    this.megaCycles = megaCycles;
    return this;
  }

  /**
   * Number of CPU megacycles used to process request.
   * @return megaCycles
   */
  @javax.annotation.Nullable
  public String getMegaCycles() {
    return megaCycles;
  }

  public void setMegaCycles(String megaCycles) {
    this.megaCycles = megaCycles;
  }


  public RequestLog method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Request method. Example: \&quot;GET\&quot;, \&quot;HEAD\&quot;, \&quot;PUT\&quot;, \&quot;POST\&quot;, \&quot;DELETE\&quot;.
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public RequestLog moduleId(String moduleId) {
    this.moduleId = moduleId;
    return this;
  }

  /**
   * Module of the application that handled this request.
   * @return moduleId
   */
  @javax.annotation.Nullable
  public String getModuleId() {
    return moduleId;
  }

  public void setModuleId(String moduleId) {
    this.moduleId = moduleId;
  }


  public RequestLog nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * The logged-in user who made the request.Most likely, this is the part of the user&#39;s email before the @ sign. The field value is the same for different requests from the same user, but different users can have similar names. This information is also available to the application via the App Engine Users API.This field will be populated starting with App Engine 1.9.21.
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public RequestLog pendingTime(String pendingTime) {
    this.pendingTime = pendingTime;
    return this;
  }

  /**
   * Time this request spent in the pending request queue.
   * @return pendingTime
   */
  @javax.annotation.Nullable
  public String getPendingTime() {
    return pendingTime;
  }

  public void setPendingTime(String pendingTime) {
    this.pendingTime = pendingTime;
  }


  public RequestLog referrer(String referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * Referrer URL of request.
   * @return referrer
   */
  @javax.annotation.Nullable
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }


  public RequestLog requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Globally unique identifier for a request, which is based on the request start time. Request IDs for requests which started later will compare greater as strings than those for requests which started earlier.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public RequestLog resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Contains the path and query portion of the URL that was requested. For example, if the URL was \&quot;http://example.com/app?name&#x3D;val\&quot;, the resource would be \&quot;/app?name&#x3D;val\&quot;. The fragment identifier, which is identified by the # character, is not included.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public RequestLog responseSize(String responseSize) {
    this.responseSize = responseSize;
    return this;
  }

  /**
   * Size in bytes sent back to client by request.
   * @return responseSize
   */
  @javax.annotation.Nullable
  public String getResponseSize() {
    return responseSize;
  }

  public void setResponseSize(String responseSize) {
    this.responseSize = responseSize;
  }


  public RequestLog sourceReference(List<SourceReference> sourceReference) {
    this.sourceReference = sourceReference;
    return this;
  }

  public RequestLog addSourceReferenceItem(SourceReference sourceReferenceItem) {
    if (this.sourceReference == null) {
      this.sourceReference = new ArrayList<>();
    }
    this.sourceReference.add(sourceReferenceItem);
    return this;
  }

  /**
   * Source code for the application that handled this request. There can be more than one source reference per deployed application if source code is distributed among multiple repositories.
   * @return sourceReference
   */
  @javax.annotation.Nullable
  public List<SourceReference> getSourceReference() {
    return sourceReference;
  }

  public void setSourceReference(List<SourceReference> sourceReference) {
    this.sourceReference = sourceReference;
  }


  public RequestLog spanId(String spanId) {
    this.spanId = spanId;
    return this;
  }

  /**
   * Stackdriver Trace span identifier for this request.
   * @return spanId
   */
  @javax.annotation.Nullable
  public String getSpanId() {
    return spanId;
  }

  public void setSpanId(String spanId) {
    this.spanId = spanId;
  }


  public RequestLog startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time when the request started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public RequestLog status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * HTTP response status code. Example: 200, 404.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public RequestLog taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  /**
   * Task name of the request, in the case of an offline request.
   * @return taskName
   */
  @javax.annotation.Nullable
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  public RequestLog taskQueueName(String taskQueueName) {
    this.taskQueueName = taskQueueName;
    return this;
  }

  /**
   * Queue name of the request, in the case of an offline request.
   * @return taskQueueName
   */
  @javax.annotation.Nullable
  public String getTaskQueueName() {
    return taskQueueName;
  }

  public void setTaskQueueName(String taskQueueName) {
    this.taskQueueName = taskQueueName;
  }


  public RequestLog traceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  /**
   * Stackdriver Trace identifier for this request.
   * @return traceId
   */
  @javax.annotation.Nullable
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }


  public RequestLog traceSampled(Boolean traceSampled) {
    this.traceSampled = traceSampled;
    return this;
  }

  /**
   * If true, the value in the &#39;trace_id&#39; field was sampled for storage in a trace backend.
   * @return traceSampled
   */
  @javax.annotation.Nullable
  public Boolean getTraceSampled() {
    return traceSampled;
  }

  public void setTraceSampled(Boolean traceSampled) {
    this.traceSampled = traceSampled;
  }


  public RequestLog urlMapEntry(String urlMapEntry) {
    this.urlMapEntry = urlMapEntry;
    return this;
  }

  /**
   * File or class that handled the request.
   * @return urlMapEntry
   */
  @javax.annotation.Nullable
  public String getUrlMapEntry() {
    return urlMapEntry;
  }

  public void setUrlMapEntry(String urlMapEntry) {
    this.urlMapEntry = urlMapEntry;
  }


  public RequestLog userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * User agent that made the request.
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public RequestLog versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Version of the application that handled this request.
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public RequestLog wasLoadingRequest(Boolean wasLoadingRequest) {
    this.wasLoadingRequest = wasLoadingRequest;
    return this;
  }

  /**
   * Whether this was a loading request for the instance.
   * @return wasLoadingRequest
   */
  @javax.annotation.Nullable
  public Boolean getWasLoadingRequest() {
    return wasLoadingRequest;
  }

  public void setWasLoadingRequest(Boolean wasLoadingRequest) {
    this.wasLoadingRequest = wasLoadingRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestLog requestLog = (RequestLog) o;
    return Objects.equals(this.appEngineRelease, requestLog.appEngineRelease) &&
        Objects.equals(this.appId, requestLog.appId) &&
        Objects.equals(this.cost, requestLog.cost) &&
        Objects.equals(this.endTime, requestLog.endTime) &&
        Objects.equals(this.finished, requestLog.finished) &&
        Objects.equals(this.first, requestLog.first) &&
        Objects.equals(this.host, requestLog.host) &&
        Objects.equals(this.httpVersion, requestLog.httpVersion) &&
        Objects.equals(this.instanceId, requestLog.instanceId) &&
        Objects.equals(this.instanceIndex, requestLog.instanceIndex) &&
        Objects.equals(this.ip, requestLog.ip) &&
        Objects.equals(this.latency, requestLog.latency) &&
        Objects.equals(this.line, requestLog.line) &&
        Objects.equals(this.megaCycles, requestLog.megaCycles) &&
        Objects.equals(this.method, requestLog.method) &&
        Objects.equals(this.moduleId, requestLog.moduleId) &&
        Objects.equals(this.nickname, requestLog.nickname) &&
        Objects.equals(this.pendingTime, requestLog.pendingTime) &&
        Objects.equals(this.referrer, requestLog.referrer) &&
        Objects.equals(this.requestId, requestLog.requestId) &&
        Objects.equals(this.resource, requestLog.resource) &&
        Objects.equals(this.responseSize, requestLog.responseSize) &&
        Objects.equals(this.sourceReference, requestLog.sourceReference) &&
        Objects.equals(this.spanId, requestLog.spanId) &&
        Objects.equals(this.startTime, requestLog.startTime) &&
        Objects.equals(this.status, requestLog.status) &&
        Objects.equals(this.taskName, requestLog.taskName) &&
        Objects.equals(this.taskQueueName, requestLog.taskQueueName) &&
        Objects.equals(this.traceId, requestLog.traceId) &&
        Objects.equals(this.traceSampled, requestLog.traceSampled) &&
        Objects.equals(this.urlMapEntry, requestLog.urlMapEntry) &&
        Objects.equals(this.userAgent, requestLog.userAgent) &&
        Objects.equals(this.versionId, requestLog.versionId) &&
        Objects.equals(this.wasLoadingRequest, requestLog.wasLoadingRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appEngineRelease, appId, cost, endTime, finished, first, host, httpVersion, instanceId, instanceIndex, ip, latency, line, megaCycles, method, moduleId, nickname, pendingTime, referrer, requestId, resource, responseSize, sourceReference, spanId, startTime, status, taskName, taskQueueName, traceId, traceSampled, urlMapEntry, userAgent, versionId, wasLoadingRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestLog {\n");
    sb.append("    appEngineRelease: ").append(toIndentedString(appEngineRelease)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    httpVersion: ").append(toIndentedString(httpVersion)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceIndex: ").append(toIndentedString(instanceIndex)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    megaCycles: ").append(toIndentedString(megaCycles)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    moduleId: ").append(toIndentedString(moduleId)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    pendingTime: ").append(toIndentedString(pendingTime)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    responseSize: ").append(toIndentedString(responseSize)).append("\n");
    sb.append("    sourceReference: ").append(toIndentedString(sourceReference)).append("\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    taskQueueName: ").append(toIndentedString(taskQueueName)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    traceSampled: ").append(toIndentedString(traceSampled)).append("\n");
    sb.append("    urlMapEntry: ").append(toIndentedString(urlMapEntry)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    wasLoadingRequest: ").append(toIndentedString(wasLoadingRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appEngineRelease");
    openapiFields.add("appId");
    openapiFields.add("cost");
    openapiFields.add("endTime");
    openapiFields.add("finished");
    openapiFields.add("first");
    openapiFields.add("host");
    openapiFields.add("httpVersion");
    openapiFields.add("instanceId");
    openapiFields.add("instanceIndex");
    openapiFields.add("ip");
    openapiFields.add("latency");
    openapiFields.add("line");
    openapiFields.add("megaCycles");
    openapiFields.add("method");
    openapiFields.add("moduleId");
    openapiFields.add("nickname");
    openapiFields.add("pendingTime");
    openapiFields.add("referrer");
    openapiFields.add("requestId");
    openapiFields.add("resource");
    openapiFields.add("responseSize");
    openapiFields.add("sourceReference");
    openapiFields.add("spanId");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("taskName");
    openapiFields.add("taskQueueName");
    openapiFields.add("traceId");
    openapiFields.add("traceSampled");
    openapiFields.add("urlMapEntry");
    openapiFields.add("userAgent");
    openapiFields.add("versionId");
    openapiFields.add("wasLoadingRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestLog is not found in the empty JSON string", RequestLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appEngineRelease") != null && !jsonObj.get("appEngineRelease").isJsonNull()) && !jsonObj.get("appEngineRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appEngineRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appEngineRelease").toString()));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("httpVersion") != null && !jsonObj.get("httpVersion").isJsonNull()) && !jsonObj.get("httpVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpVersion").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("latency") != null && !jsonObj.get("latency").isJsonNull()) && !jsonObj.get("latency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latency").toString()));
      }
      if (jsonObj.get("line") != null && !jsonObj.get("line").isJsonNull()) {
        JsonArray jsonArrayline = jsonObj.getAsJsonArray("line");
        if (jsonArrayline != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line` to be an array in the JSON string but got `%s`", jsonObj.get("line").toString()));
          }

          // validate the optional field `line` (array)
          for (int i = 0; i < jsonArrayline.size(); i++) {
            LogLine.validateJsonElement(jsonArrayline.get(i));
          };
        }
      }
      if ((jsonObj.get("megaCycles") != null && !jsonObj.get("megaCycles").isJsonNull()) && !jsonObj.get("megaCycles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `megaCycles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("megaCycles").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("moduleId") != null && !jsonObj.get("moduleId").isJsonNull()) && !jsonObj.get("moduleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleId").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("pendingTime") != null && !jsonObj.get("pendingTime").isJsonNull()) && !jsonObj.get("pendingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingTime").toString()));
      }
      if ((jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonNull()) && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("responseSize") != null && !jsonObj.get("responseSize").isJsonNull()) && !jsonObj.get("responseSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseSize").toString()));
      }
      if (jsonObj.get("sourceReference") != null && !jsonObj.get("sourceReference").isJsonNull()) {
        JsonArray jsonArraysourceReference = jsonObj.getAsJsonArray("sourceReference");
        if (jsonArraysourceReference != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourceReference").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourceReference` to be an array in the JSON string but got `%s`", jsonObj.get("sourceReference").toString()));
          }

          // validate the optional field `sourceReference` (array)
          for (int i = 0; i < jsonArraysourceReference.size(); i++) {
            SourceReference.validateJsonElement(jsonArraysourceReference.get(i));
          };
        }
      }
      if ((jsonObj.get("spanId") != null && !jsonObj.get("spanId").isJsonNull()) && !jsonObj.get("spanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spanId").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("taskName") != null && !jsonObj.get("taskName").isJsonNull()) && !jsonObj.get("taskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskName").toString()));
      }
      if ((jsonObj.get("taskQueueName") != null && !jsonObj.get("taskQueueName").isJsonNull()) && !jsonObj.get("taskQueueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskQueueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskQueueName").toString()));
      }
      if ((jsonObj.get("traceId") != null && !jsonObj.get("traceId").isJsonNull()) && !jsonObj.get("traceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceId").toString()));
      }
      if ((jsonObj.get("urlMapEntry") != null && !jsonObj.get("urlMapEntry").isJsonNull()) && !jsonObj.get("urlMapEntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlMapEntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlMapEntry").toString()));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) && !jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestLog.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestLog>() {
           @Override
           public void write(JsonWriter out, RequestLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestLog
   * @throws IOException if the JSON string is invalid with respect to RequestLog
   */
  public static RequestLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestLog.class);
  }

  /**
   * Convert an instance of RequestLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

