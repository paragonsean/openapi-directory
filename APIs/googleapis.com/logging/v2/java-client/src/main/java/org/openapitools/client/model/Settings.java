/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DefaultSinkConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the settings associated with a project, folder, organization, or billing account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Settings {
  public static final String SERIALIZED_NAME_DEFAULT_SINK_CONFIG = "defaultSinkConfig";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SINK_CONFIG)
  private DefaultSinkConfig defaultSinkConfig;

  public static final String SERIALIZED_NAME_DISABLE_DEFAULT_SINK = "disableDefaultSink";
  @SerializedName(SERIALIZED_NAME_DISABLE_DEFAULT_SINK)
  private Boolean disableDefaultSink;

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_KMS_SERVICE_ACCOUNT_ID = "kmsServiceAccountId";
  @SerializedName(SERIALIZED_NAME_KMS_SERVICE_ACCOUNT_ID)
  private String kmsServiceAccountId;

  public static final String SERIALIZED_NAME_LOGGING_SERVICE_ACCOUNT_ID = "loggingServiceAccountId";
  @SerializedName(SERIALIZED_NAME_LOGGING_SERVICE_ACCOUNT_ID)
  private String loggingServiceAccountId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storageLocation";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private String storageLocation;

  public Settings() {
  }

  public Settings(
     String kmsServiceAccountId, 
     String loggingServiceAccountId, 
     String name
  ) {
    this();
    this.kmsServiceAccountId = kmsServiceAccountId;
    this.loggingServiceAccountId = loggingServiceAccountId;
    this.name = name;
  }

  public Settings defaultSinkConfig(DefaultSinkConfig defaultSinkConfig) {
    this.defaultSinkConfig = defaultSinkConfig;
    return this;
  }

  /**
   * Get defaultSinkConfig
   * @return defaultSinkConfig
   */
  @javax.annotation.Nullable
  public DefaultSinkConfig getDefaultSinkConfig() {
    return defaultSinkConfig;
  }

  public void setDefaultSinkConfig(DefaultSinkConfig defaultSinkConfig) {
    this.defaultSinkConfig = defaultSinkConfig;
  }


  public Settings disableDefaultSink(Boolean disableDefaultSink) {
    this.disableDefaultSink = disableDefaultSink;
    return this;
  }

  /**
   * Optional. If set to true, the _Default sink in newly created projects and folders will created in a disabled state. This can be used to automatically disable log storage if there is already an aggregated sink configured in the hierarchy. The _Default sink can be re-enabled manually if needed.
   * @return disableDefaultSink
   */
  @javax.annotation.Nullable
  public Boolean getDisableDefaultSink() {
    return disableDefaultSink;
  }

  public void setDisableDefaultSink(Boolean disableDefaultSink) {
    this.disableDefaultSink = disableDefaultSink;
  }


  public Settings kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * Optional. The resource name for the configured Cloud KMS key.KMS key name format: \&quot;projects/[PROJECT_ID]/locations/[LOCATION]/keyRings/[KEYRING]/cryptoKeys/[KEY]\&quot; For example:\&quot;projects/my-project/locations/us-central1/keyRings/my-ring/cryptoKeys/my-key\&quot;To enable CMEK, set this field to a valid kms_key_name for which the associated service account has the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key.The Cloud KMS key used by the Log Router can be updated by changing the kms_key_name to a new valid key name.To disable CMEK for the Log Router, set this field to an empty string.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  /**
   * Output only. The service account that will be used by the Log Router to access your Cloud KMS key.Before enabling CMEK, you must first assign the role roles/cloudkms.cryptoKeyEncrypterDecrypter to the service account that will be used to access your Cloud KMS key. Use GetSettings to obtain the service account ID.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
   * @return kmsServiceAccountId
   */
  @javax.annotation.Nullable
  public String getKmsServiceAccountId() {
    return kmsServiceAccountId;
  }



  /**
   * Output only. The service account for the given resource container, such as project or folder. Log sinks use this service account as their writer_identity if no custom service account is provided in the request when calling the create sink method.
   * @return loggingServiceAccountId
   */
  @javax.annotation.Nullable
  public String getLoggingServiceAccountId() {
    return loggingServiceAccountId;
  }



  /**
   * Output only. The resource name of the settings.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Settings storageLocation(String storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

  /**
   * Optional. The storage location for the _Default and _Required log buckets of newly created projects and folders, unless the storage location is explicitly provided.Example value: europe-west1.Note: this setting does not affect the location of resources where a location is explicitly provided when created, such as custom log buckets.
   * @return storageLocation
   */
  @javax.annotation.Nullable
  public String getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(String storageLocation) {
    this.storageLocation = storageLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Settings settings = (Settings) o;
    return Objects.equals(this.defaultSinkConfig, settings.defaultSinkConfig) &&
        Objects.equals(this.disableDefaultSink, settings.disableDefaultSink) &&
        Objects.equals(this.kmsKeyName, settings.kmsKeyName) &&
        Objects.equals(this.kmsServiceAccountId, settings.kmsServiceAccountId) &&
        Objects.equals(this.loggingServiceAccountId, settings.loggingServiceAccountId) &&
        Objects.equals(this.name, settings.name) &&
        Objects.equals(this.storageLocation, settings.storageLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultSinkConfig, disableDefaultSink, kmsKeyName, kmsServiceAccountId, loggingServiceAccountId, name, storageLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Settings {\n");
    sb.append("    defaultSinkConfig: ").append(toIndentedString(defaultSinkConfig)).append("\n");
    sb.append("    disableDefaultSink: ").append(toIndentedString(disableDefaultSink)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    kmsServiceAccountId: ").append(toIndentedString(kmsServiceAccountId)).append("\n");
    sb.append("    loggingServiceAccountId: ").append(toIndentedString(loggingServiceAccountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultSinkConfig");
    openapiFields.add("disableDefaultSink");
    openapiFields.add("kmsKeyName");
    openapiFields.add("kmsServiceAccountId");
    openapiFields.add("loggingServiceAccountId");
    openapiFields.add("name");
    openapiFields.add("storageLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Settings is not found in the empty JSON string", Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultSinkConfig`
      if (jsonObj.get("defaultSinkConfig") != null && !jsonObj.get("defaultSinkConfig").isJsonNull()) {
        DefaultSinkConfig.validateJsonElement(jsonObj.get("defaultSinkConfig"));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("kmsServiceAccountId") != null && !jsonObj.get("kmsServiceAccountId").isJsonNull()) && !jsonObj.get("kmsServiceAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsServiceAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsServiceAccountId").toString()));
      }
      if ((jsonObj.get("loggingServiceAccountId") != null && !jsonObj.get("loggingServiceAccountId").isJsonNull()) && !jsonObj.get("loggingServiceAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loggingServiceAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loggingServiceAccountId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("storageLocation") != null && !jsonObj.get("storageLocation").isJsonNull()) && !jsonObj.get("storageLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageLocation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<Settings>() {
           @Override
           public void write(JsonWriter out, Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Settings
   * @throws IOException if the JSON string is invalid with respect to Settings
   */
  public static Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Settings.class);
  }

  /**
   * Convert an instance of Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

