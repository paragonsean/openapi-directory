/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BucketOptions;
import org.openapitools.client.model.MetricDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a logs-based metric. The value of the metric is the number of log entries that match a logs filter in a given time interval.Logs-based metrics can also be used to extract values from logs and create a distribution of the values. The distribution records the statistics of the extracted values along with an optional histogram of the values as specified by the bucket options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogMetric {
  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_BUCKET_OPTIONS = "bucketOptions";
  @SerializedName(SERIALIZED_NAME_BUCKET_OPTIONS)
  private BucketOptions bucketOptions;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_LABEL_EXTRACTORS = "labelExtractors";
  @SerializedName(SERIALIZED_NAME_LABEL_EXTRACTORS)
  private Map<String, String> labelExtractors = new HashMap<>();

  public static final String SERIALIZED_NAME_METRIC_DESCRIPTOR = "metricDescriptor";
  @SerializedName(SERIALIZED_NAME_METRIC_DESCRIPTOR)
  private MetricDescriptor metricDescriptor;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VALUE_EXTRACTOR = "valueExtractor";
  @SerializedName(SERIALIZED_NAME_VALUE_EXTRACTOR)
  private String valueExtractor;

  /**
   * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    V2("V2"),
    
    V1("V1");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "version";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERSION)
  private VersionEnum version;

  public LogMetric() {
  }

  public LogMetric(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public LogMetric bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Optional. The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects are supported. The bucket has to be in the same project as the metric.For example:projects/my-project/locations/global/buckets/my-bucketIf empty, then the Log Metric is considered a non-Bucket Log Metric.
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public LogMetric bucketOptions(BucketOptions bucketOptions) {
    this.bucketOptions = bucketOptions;
    return this;
  }

  /**
   * Get bucketOptions
   * @return bucketOptions
   */
  @javax.annotation.Nullable
  public BucketOptions getBucketOptions() {
    return bucketOptions;
  }

  public void setBucketOptions(BucketOptions bucketOptions) {
    this.bucketOptions = bucketOptions;
  }


  /**
   * Output only. The creation timestamp of the metric.This field may not be present for older metrics.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public LogMetric description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A description of this metric, which is used in documentation. The maximum length of the description is 8000 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LogMetric disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. If set to True, then this metric is disabled and it does not generate any points.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public LogMetric filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Required. An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced_filters) which is used to match log entries. Example: \&quot;resource.type&#x3D;gae_app AND severity&gt;&#x3D;ERROR\&quot; The maximum length of the filter is 20000 characters.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public LogMetric labelExtractors(Map<String, String> labelExtractors) {
    this.labelExtractors = labelExtractors;
    return this;
  }

  public LogMetric putLabelExtractorsItem(String key, String labelExtractorsItem) {
    if (this.labelExtractors == null) {
      this.labelExtractors = new HashMap<>();
    }
    this.labelExtractors.put(key, labelExtractorsItem);
    return this;
  }

  /**
   * Optional. A map from a label key string to an extractor expression which is used to extract data from a log entry field and assign as the label value. Each label key specified in the LabelDescriptor must have an associated extractor expression in this map. The syntax of the extractor expression is the same as for the value_extractor field.The extracted value is converted to the type defined in the label descriptor. If either the extraction or the type conversion fails, the label will have a default value. The default value for a string label is an empty string, for an integer label its 0, and for a boolean label its false.Note that there are upper bounds on the maximum number of labels and the number of active time series that are allowed in a project.
   * @return labelExtractors
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabelExtractors() {
    return labelExtractors;
  }

  public void setLabelExtractors(Map<String, String> labelExtractors) {
    this.labelExtractors = labelExtractors;
  }


  public LogMetric metricDescriptor(MetricDescriptor metricDescriptor) {
    this.metricDescriptor = metricDescriptor;
    return this;
  }

  /**
   * Get metricDescriptor
   * @return metricDescriptor
   */
  @javax.annotation.Nullable
  public MetricDescriptor getMetricDescriptor() {
    return metricDescriptor;
  }

  public void setMetricDescriptor(MetricDescriptor metricDescriptor) {
    this.metricDescriptor = metricDescriptor;
  }


  public LogMetric name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The client-assigned metric identifier. Examples: \&quot;error_count\&quot;, \&quot;nginx/requests\&quot;.Metric identifiers are limited to 100 characters and can include only the following characters: A-Z, a-z, 0-9, and the special characters _-.,+!*&#39;,()%/. The forward-slash character (/) denotes a hierarchy of name pieces, and it cannot be the first character of the name.This field is the [METRIC_ID] part of a metric resource name in the format \&quot;projects/PROJECT_ID/metrics/METRIC_ID\&quot;. Example: If the resource name of a metric is \&quot;projects/my-project/metrics/nginx%2Frequests\&quot;, this field&#39;s value is \&quot;nginx/requests\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The last update timestamp of the metric.This field may not be present for older metrics.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public LogMetric valueExtractor(String valueExtractor) {
    this.valueExtractor = valueExtractor;
    return this;
  }

  /**
   * Optional. A value_extractor is required when using a distribution logs-based metric to extract the values to record from a log entry. Two functions are supported for value extraction: EXTRACT(field) or REGEXP_EXTRACT(field, regex). The arguments are: field: The name of the log entry field from which the value is to be extracted. regex: A regular expression using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified log entry field. The value of the field is converted to a string before applying the regex. It is an error to specify a regex that does not include exactly one capture group.The result of the extraction must be convertible to a double type, as the distribution always records double values. If either the extraction or the conversion to double fails, then those values are not recorded in the distribution.Example: REGEXP_EXTRACT(jsonPayload.request, \&quot;.*quantity&#x3D;(\\d+).*\&quot;)
   * @return valueExtractor
   */
  @javax.annotation.Nullable
  public String getValueExtractor() {
    return valueExtractor;
  }

  public void setValueExtractor(String valueExtractor) {
    this.valueExtractor = valueExtractor;
  }


  @Deprecated
  public LogMetric version(VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * Deprecated. The API version that created or updated this metric. The v2 format is used by default and cannot be changed.
   * @return version
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public VersionEnum getVersion() {
    return version;
  }

  @Deprecated
  public void setVersion(VersionEnum version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogMetric logMetric = (LogMetric) o;
    return Objects.equals(this.bucketName, logMetric.bucketName) &&
        Objects.equals(this.bucketOptions, logMetric.bucketOptions) &&
        Objects.equals(this.createTime, logMetric.createTime) &&
        Objects.equals(this.description, logMetric.description) &&
        Objects.equals(this.disabled, logMetric.disabled) &&
        Objects.equals(this.filter, logMetric.filter) &&
        Objects.equals(this.labelExtractors, logMetric.labelExtractors) &&
        Objects.equals(this.metricDescriptor, logMetric.metricDescriptor) &&
        Objects.equals(this.name, logMetric.name) &&
        Objects.equals(this.updateTime, logMetric.updateTime) &&
        Objects.equals(this.valueExtractor, logMetric.valueExtractor) &&
        Objects.equals(this.version, logMetric.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketName, bucketOptions, createTime, description, disabled, filter, labelExtractors, metricDescriptor, name, updateTime, valueExtractor, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogMetric {\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    bucketOptions: ").append(toIndentedString(bucketOptions)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    labelExtractors: ").append(toIndentedString(labelExtractors)).append("\n");
    sb.append("    metricDescriptor: ").append(toIndentedString(metricDescriptor)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    valueExtractor: ").append(toIndentedString(valueExtractor)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketName");
    openapiFields.add("bucketOptions");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("filter");
    openapiFields.add("labelExtractors");
    openapiFields.add("metricDescriptor");
    openapiFields.add("name");
    openapiFields.add("updateTime");
    openapiFields.add("valueExtractor");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogMetric is not found in the empty JSON string", LogMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucketName") != null && !jsonObj.get("bucketName").isJsonNull()) && !jsonObj.get("bucketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketName").toString()));
      }
      // validate the optional field `bucketOptions`
      if (jsonObj.get("bucketOptions") != null && !jsonObj.get("bucketOptions").isJsonNull()) {
        BucketOptions.validateJsonElement(jsonObj.get("bucketOptions"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // validate the optional field `metricDescriptor`
      if (jsonObj.get("metricDescriptor") != null && !jsonObj.get("metricDescriptor").isJsonNull()) {
        MetricDescriptor.validateJsonElement(jsonObj.get("metricDescriptor"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("valueExtractor") != null && !jsonObj.get("valueExtractor").isJsonNull()) && !jsonObj.get("valueExtractor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueExtractor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueExtractor").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        VersionEnum.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<LogMetric>() {
           @Override
           public void write(JsonWriter out, LogMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogMetric
   * @throws IOException if the JSON string is invalid with respect to LogMetric
   */
  public static LogMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogMetric.class);
  }

  /**
   * Convert an instance of LogMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

