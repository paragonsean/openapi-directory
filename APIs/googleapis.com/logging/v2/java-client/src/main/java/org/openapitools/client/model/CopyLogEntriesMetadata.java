/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CopyLogEntriesRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for CopyLogEntries long running operations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyLogEntriesMetadata {
  public static final String SERIALIZED_NAME_CANCELLATION_REQUESTED = "cancellationRequested";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_REQUESTED)
  private Boolean cancellationRequested;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private CopyLogEntriesRequest request;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Output only. State of an operation.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNSPECIFIED("OPERATION_STATE_UNSPECIFIED"),
    
    SCHEDULED("OPERATION_STATE_SCHEDULED"),
    
    WAITING_FOR_PERMISSIONS("OPERATION_STATE_WAITING_FOR_PERMISSIONS"),
    
    RUNNING("OPERATION_STATE_RUNNING"),
    
    SUCCEEDED("OPERATION_STATE_SUCCEEDED"),
    
    FAILED("OPERATION_STATE_FAILED"),
    
    CANCELLED("OPERATION_STATE_CANCELLED"),
    
    PENDING("OPERATION_STATE_PENDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private String verb;

  public static final String SERIALIZED_NAME_WRITER_IDENTITY = "writerIdentity";
  @SerializedName(SERIALIZED_NAME_WRITER_IDENTITY)
  private String writerIdentity;

  public CopyLogEntriesMetadata() {
  }

  public CopyLogEntriesMetadata(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public CopyLogEntriesMetadata cancellationRequested(Boolean cancellationRequested) {
    this.cancellationRequested = cancellationRequested;
    return this;
  }

  /**
   * Identifies whether the user has requested cancellation of the operation.
   * @return cancellationRequested
   */
  @javax.annotation.Nullable
  public Boolean getCancellationRequested() {
    return cancellationRequested;
  }

  public void setCancellationRequested(Boolean cancellationRequested) {
    this.cancellationRequested = cancellationRequested;
  }


  public CopyLogEntriesMetadata destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Destination to which to copy log entries.For example, a Cloud Storage bucket:\&quot;storage.googleapis.com/my-cloud-storage-bucket\&quot;
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public CopyLogEntriesMetadata endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of an operation.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public CopyLogEntriesMetadata progress(Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Estimated progress of the operation (0 - 100%).
   * @return progress
   */
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public CopyLogEntriesMetadata request(CopyLogEntriesRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public CopyLogEntriesRequest getRequest() {
    return request;
  }

  public void setRequest(CopyLogEntriesRequest request) {
    this.request = request;
  }


  public CopyLogEntriesMetadata source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source from which to copy log entries.For example, a log bucket:\&quot;projects/my-project/locations/global/buckets/my-source-bucket\&quot;
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public CopyLogEntriesMetadata startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The create time of an operation.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  /**
   * Output only. State of an operation.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public CopyLogEntriesMetadata verb(String verb) {
    this.verb = verb;
    return this;
  }

  /**
   * Name of the verb executed by the operation.For example,\&quot;copy\&quot;
   * @return verb
   */
  @javax.annotation.Nullable
  public String getVerb() {
    return verb;
  }

  public void setVerb(String verb) {
    this.verb = verb;
  }


  public CopyLogEntriesMetadata writerIdentity(String writerIdentity) {
    this.writerIdentity = writerIdentity;
    return this;
  }

  /**
   * The IAM identity of a service account that must be granted access to the destination.If the service account is not granted permission to the destination within an hour, the operation will be cancelled.For example: \&quot;serviceAccount:foo@bar.com\&quot;
   * @return writerIdentity
   */
  @javax.annotation.Nullable
  public String getWriterIdentity() {
    return writerIdentity;
  }

  public void setWriterIdentity(String writerIdentity) {
    this.writerIdentity = writerIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyLogEntriesMetadata copyLogEntriesMetadata = (CopyLogEntriesMetadata) o;
    return Objects.equals(this.cancellationRequested, copyLogEntriesMetadata.cancellationRequested) &&
        Objects.equals(this.destination, copyLogEntriesMetadata.destination) &&
        Objects.equals(this.endTime, copyLogEntriesMetadata.endTime) &&
        Objects.equals(this.progress, copyLogEntriesMetadata.progress) &&
        Objects.equals(this.request, copyLogEntriesMetadata.request) &&
        Objects.equals(this.source, copyLogEntriesMetadata.source) &&
        Objects.equals(this.startTime, copyLogEntriesMetadata.startTime) &&
        Objects.equals(this.state, copyLogEntriesMetadata.state) &&
        Objects.equals(this.verb, copyLogEntriesMetadata.verb) &&
        Objects.equals(this.writerIdentity, copyLogEntriesMetadata.writerIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationRequested, destination, endTime, progress, request, source, startTime, state, verb, writerIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyLogEntriesMetadata {\n");
    sb.append("    cancellationRequested: ").append(toIndentedString(cancellationRequested)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("    writerIdentity: ").append(toIndentedString(writerIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellationRequested");
    openapiFields.add("destination");
    openapiFields.add("endTime");
    openapiFields.add("progress");
    openapiFields.add("request");
    openapiFields.add("source");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("verb");
    openapiFields.add("writerIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyLogEntriesMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyLogEntriesMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyLogEntriesMetadata is not found in the empty JSON string", CopyLogEntriesMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyLogEntriesMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyLogEntriesMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        CopyLogEntriesRequest.validateJsonElement(jsonObj.get("request"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("verb") != null && !jsonObj.get("verb").isJsonNull()) && !jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
      if ((jsonObj.get("writerIdentity") != null && !jsonObj.get("writerIdentity").isJsonNull()) && !jsonObj.get("writerIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writerIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writerIdentity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyLogEntriesMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyLogEntriesMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyLogEntriesMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyLogEntriesMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyLogEntriesMetadata>() {
           @Override
           public void write(JsonWriter out, CopyLogEntriesMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyLogEntriesMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopyLogEntriesMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyLogEntriesMetadata
   * @throws IOException if the JSON string is invalid with respect to CopyLogEntriesMetadata
   */
  public static CopyLogEntriesMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyLogEntriesMetadata.class);
  }

  /**
   * Convert an instance of CopyLogEntriesMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

