/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogEntry;
import org.openapitools.client.model.SuppressionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result returned from TailLogEntries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TailLogEntriesResponse {
  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<LogEntry> entries = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPRESSION_INFO = "suppressionInfo";
  @SerializedName(SERIALIZED_NAME_SUPPRESSION_INFO)
  private List<SuppressionInfo> suppressionInfo = new ArrayList<>();

  public TailLogEntriesResponse() {
  }

  public TailLogEntriesResponse entries(List<LogEntry> entries) {
    this.entries = entries;
    return this;
  }

  public TailLogEntriesResponse addEntriesItem(LogEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

  /**
   * A list of log entries. Each response in the stream will order entries with increasing values of LogEntry.timestamp. Ordering is not guaranteed between separate responses.
   * @return entries
   */
  @javax.annotation.Nullable
  public List<LogEntry> getEntries() {
    return entries;
  }

  public void setEntries(List<LogEntry> entries) {
    this.entries = entries;
  }


  public TailLogEntriesResponse suppressionInfo(List<SuppressionInfo> suppressionInfo) {
    this.suppressionInfo = suppressionInfo;
    return this;
  }

  public TailLogEntriesResponse addSuppressionInfoItem(SuppressionInfo suppressionInfoItem) {
    if (this.suppressionInfo == null) {
      this.suppressionInfo = new ArrayList<>();
    }
    this.suppressionInfo.add(suppressionInfoItem);
    return this;
  }

  /**
   * If entries that otherwise would have been included in the session were not sent back to the client, counts of relevant entries omitted from the session with the reason that they were not included. There will be at most one of each reason per response. The counts represent the number of suppressed entries since the last streamed response.
   * @return suppressionInfo
   */
  @javax.annotation.Nullable
  public List<SuppressionInfo> getSuppressionInfo() {
    return suppressionInfo;
  }

  public void setSuppressionInfo(List<SuppressionInfo> suppressionInfo) {
    this.suppressionInfo = suppressionInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TailLogEntriesResponse tailLogEntriesResponse = (TailLogEntriesResponse) o;
    return Objects.equals(this.entries, tailLogEntriesResponse.entries) &&
        Objects.equals(this.suppressionInfo, tailLogEntriesResponse.suppressionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entries, suppressionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TailLogEntriesResponse {\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    suppressionInfo: ").append(toIndentedString(suppressionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entries");
    openapiFields.add("suppressionInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TailLogEntriesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TailLogEntriesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TailLogEntriesResponse is not found in the empty JSON string", TailLogEntriesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TailLogEntriesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TailLogEntriesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entries") != null && !jsonObj.get("entries").isJsonNull()) {
        JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
        if (jsonArrayentries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
          }

          // validate the optional field `entries` (array)
          for (int i = 0; i < jsonArrayentries.size(); i++) {
            LogEntry.validateJsonElement(jsonArrayentries.get(i));
          };
        }
      }
      if (jsonObj.get("suppressionInfo") != null && !jsonObj.get("suppressionInfo").isJsonNull()) {
        JsonArray jsonArraysuppressionInfo = jsonObj.getAsJsonArray("suppressionInfo");
        if (jsonArraysuppressionInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suppressionInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suppressionInfo` to be an array in the JSON string but got `%s`", jsonObj.get("suppressionInfo").toString()));
          }

          // validate the optional field `suppressionInfo` (array)
          for (int i = 0; i < jsonArraysuppressionInfo.size(); i++) {
            SuppressionInfo.validateJsonElement(jsonArraysuppressionInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TailLogEntriesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TailLogEntriesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TailLogEntriesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TailLogEntriesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TailLogEntriesResponse>() {
           @Override
           public void write(JsonWriter out, TailLogEntriesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TailLogEntriesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TailLogEntriesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TailLogEntriesResponse
   * @throws IOException if the JSON string is invalid with respect to TailLogEntriesResponse
   */
  public static TailLogEntriesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TailLogEntriesResponse.class);
  }

  /**
   * Convert an instance of TailLogEntriesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

