/*
 * Cloud Logging API
 * Writes log entries and manages your Cloud Logging configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Auxiliary metadata for a MonitoredResource object. MonitoredResource objects contain the minimum set of information to uniquely identify a monitored resource instance. There is some other useful auxiliary metadata. Monitoring and Logging use an ingestion pipeline to extract metadata for cloud resources of all types, and store the metadata in this message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:26.064361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoredResourceMetadata {
  public static final String SERIALIZED_NAME_SYSTEM_LABELS = "systemLabels";
  @SerializedName(SERIALIZED_NAME_SYSTEM_LABELS)
  private Map<String, Object> systemLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public MonitoredResourceMetadata() {
  }

  public MonitoredResourceMetadata systemLabels(Map<String, Object> systemLabels) {
    this.systemLabels = systemLabels;
    return this;
  }

  public MonitoredResourceMetadata putSystemLabelsItem(String key, Object systemLabelsItem) {
    if (this.systemLabels == null) {
      this.systemLabels = new HashMap<>();
    }
    this.systemLabels.put(key, systemLabelsItem);
    return this;
  }

  /**
   * Output only. Values for predefined system metadata labels. System labels are a kind of metadata extracted by Google, including \&quot;machine_image\&quot;, \&quot;vpc\&quot;, \&quot;subnet_id\&quot;, \&quot;security_group\&quot;, \&quot;name\&quot;, etc. System label values can be only strings, Boolean values, or a list of strings. For example: { \&quot;name\&quot;: \&quot;my-test-instance\&quot;, \&quot;security_group\&quot;: [\&quot;a\&quot;, \&quot;b\&quot;, \&quot;c\&quot;], \&quot;spot_instance\&quot;: false } 
   * @return systemLabels
   */
  @javax.annotation.Nullable
  public Map<String, Object> getSystemLabels() {
    return systemLabels;
  }

  public void setSystemLabels(Map<String, Object> systemLabels) {
    this.systemLabels = systemLabels;
  }


  public MonitoredResourceMetadata userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public MonitoredResourceMetadata putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * Output only. A map of user-defined metadata labels.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoredResourceMetadata monitoredResourceMetadata = (MonitoredResourceMetadata) o;
    return Objects.equals(this.systemLabels, monitoredResourceMetadata.systemLabels) &&
        Objects.equals(this.userLabels, monitoredResourceMetadata.userLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemLabels, userLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoredResourceMetadata {\n");
    sb.append("    systemLabels: ").append(toIndentedString(systemLabels)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("systemLabels");
    openapiFields.add("userLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoredResourceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoredResourceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoredResourceMetadata is not found in the empty JSON string", MonitoredResourceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoredResourceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoredResourceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoredResourceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoredResourceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoredResourceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoredResourceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoredResourceMetadata>() {
           @Override
           public void write(JsonWriter out, MonitoredResourceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoredResourceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoredResourceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoredResourceMetadata
   * @throws IOException if the JSON string is invalid with respect to MonitoredResourceMetadata
   */
  public static MonitoredResourceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoredResourceMetadata.class);
  }

  /**
   * Convert an instance of MonitoredResourceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

