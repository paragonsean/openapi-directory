# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_file_format import JsonFileFormat
from openapi_server import util


class GcsDestinationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avro_file_format: object=None, file_rotation_interval: str=None, file_rotation_mb: int=None, gcs_file_format: str=None, json_file_format: JsonFileFormat=None, path: str=None):
        """GcsDestinationConfig - a model defined in OpenAPI

        :param avro_file_format: The avro_file_format of this GcsDestinationConfig.
        :param file_rotation_interval: The file_rotation_interval of this GcsDestinationConfig.
        :param file_rotation_mb: The file_rotation_mb of this GcsDestinationConfig.
        :param gcs_file_format: The gcs_file_format of this GcsDestinationConfig.
        :param json_file_format: The json_file_format of this GcsDestinationConfig.
        :param path: The path of this GcsDestinationConfig.
        """
        self.openapi_types = {
            'avro_file_format': object,
            'file_rotation_interval': str,
            'file_rotation_mb': int,
            'gcs_file_format': str,
            'json_file_format': JsonFileFormat,
            'path': str
        }

        self.attribute_map = {
            'avro_file_format': 'avroFileFormat',
            'file_rotation_interval': 'fileRotationInterval',
            'file_rotation_mb': 'fileRotationMb',
            'gcs_file_format': 'gcsFileFormat',
            'json_file_format': 'jsonFileFormat',
            'path': 'path'
        }

        self._avro_file_format = avro_file_format
        self._file_rotation_interval = file_rotation_interval
        self._file_rotation_mb = file_rotation_mb
        self._gcs_file_format = gcs_file_format
        self._json_file_format = json_file_format
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GcsDestinationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GcsDestinationConfig of this GcsDestinationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avro_file_format(self):
        """Gets the avro_file_format of this GcsDestinationConfig.

        AVRO file format configuration.

        :return: The avro_file_format of this GcsDestinationConfig.
        :rtype: object
        """
        return self._avro_file_format

    @avro_file_format.setter
    def avro_file_format(self, avro_file_format):
        """Sets the avro_file_format of this GcsDestinationConfig.

        AVRO file format configuration.

        :param avro_file_format: The avro_file_format of this GcsDestinationConfig.
        :type avro_file_format: object
        """

        self._avro_file_format = avro_file_format

    @property
    def file_rotation_interval(self):
        """Gets the file_rotation_interval of this GcsDestinationConfig.

        The maximum duration for which new events are added before a file is closed and a new file is created.

        :return: The file_rotation_interval of this GcsDestinationConfig.
        :rtype: str
        """
        return self._file_rotation_interval

    @file_rotation_interval.setter
    def file_rotation_interval(self, file_rotation_interval):
        """Sets the file_rotation_interval of this GcsDestinationConfig.

        The maximum duration for which new events are added before a file is closed and a new file is created.

        :param file_rotation_interval: The file_rotation_interval of this GcsDestinationConfig.
        :type file_rotation_interval: str
        """

        self._file_rotation_interval = file_rotation_interval

    @property
    def file_rotation_mb(self):
        """Gets the file_rotation_mb of this GcsDestinationConfig.

        The maximum file size to be saved in the bucket.

        :return: The file_rotation_mb of this GcsDestinationConfig.
        :rtype: int
        """
        return self._file_rotation_mb

    @file_rotation_mb.setter
    def file_rotation_mb(self, file_rotation_mb):
        """Sets the file_rotation_mb of this GcsDestinationConfig.

        The maximum file size to be saved in the bucket.

        :param file_rotation_mb: The file_rotation_mb of this GcsDestinationConfig.
        :type file_rotation_mb: int
        """

        self._file_rotation_mb = file_rotation_mb

    @property
    def gcs_file_format(self):
        """Gets the gcs_file_format of this GcsDestinationConfig.

        File format that data should be written in. Deprecated field (b/169501737) - use file_format instead.

        :return: The gcs_file_format of this GcsDestinationConfig.
        :rtype: str
        """
        return self._gcs_file_format

    @gcs_file_format.setter
    def gcs_file_format(self, gcs_file_format):
        """Sets the gcs_file_format of this GcsDestinationConfig.

        File format that data should be written in. Deprecated field (b/169501737) - use file_format instead.

        :param gcs_file_format: The gcs_file_format of this GcsDestinationConfig.
        :type gcs_file_format: str
        """
        allowed_values = ["GCS_FILE_FORMAT_UNSPECIFIED", "AVRO"]  # noqa: E501
        if gcs_file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `gcs_file_format` ({0}), must be one of {1}"
                .format(gcs_file_format, allowed_values)
            )

        self._gcs_file_format = gcs_file_format

    @property
    def json_file_format(self):
        """Gets the json_file_format of this GcsDestinationConfig.


        :return: The json_file_format of this GcsDestinationConfig.
        :rtype: JsonFileFormat
        """
        return self._json_file_format

    @json_file_format.setter
    def json_file_format(self, json_file_format):
        """Sets the json_file_format of this GcsDestinationConfig.


        :param json_file_format: The json_file_format of this GcsDestinationConfig.
        :type json_file_format: JsonFileFormat
        """

        self._json_file_format = json_file_format

    @property
    def path(self):
        """Gets the path of this GcsDestinationConfig.

        Path inside the Cloud Storage bucket to write data to.

        :return: The path of this GcsDestinationConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GcsDestinationConfig.

        Path inside the Cloud Storage bucket to write data to.

        :param path: The path of this GcsDestinationConfig.
        :type path: str
        """

        self._path = path
