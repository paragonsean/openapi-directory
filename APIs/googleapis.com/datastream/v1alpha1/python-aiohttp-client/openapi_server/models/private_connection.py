# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.vpc_peering_config import VpcPeeringConfig
from openapi_server import util


class PrivateConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, error: Error=None, labels: Dict[str, str]=None, name: str=None, state: str=None, update_time: str=None, vpc_peering_config: VpcPeeringConfig=None):
        """PrivateConnection - a model defined in OpenAPI

        :param create_time: The create_time of this PrivateConnection.
        :param display_name: The display_name of this PrivateConnection.
        :param error: The error of this PrivateConnection.
        :param labels: The labels of this PrivateConnection.
        :param name: The name of this PrivateConnection.
        :param state: The state of this PrivateConnection.
        :param update_time: The update_time of this PrivateConnection.
        :param vpc_peering_config: The vpc_peering_config of this PrivateConnection.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'error': Error,
            'labels': Dict[str, str],
            'name': str,
            'state': str,
            'update_time': str,
            'vpc_peering_config': VpcPeeringConfig
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'error': 'error',
            'labels': 'labels',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime',
            'vpc_peering_config': 'vpcPeeringConfig'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._error = error
        self._labels = labels
        self._name = name
        self._state = state
        self._update_time = update_time
        self._vpc_peering_config = vpc_peering_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateConnection of this PrivateConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PrivateConnection.

        Output only. The create time of the resource.

        :return: The create_time of this PrivateConnection.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PrivateConnection.

        Output only. The create time of the resource.

        :param create_time: The create_time of this PrivateConnection.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this PrivateConnection.

        Required. Display name.

        :return: The display_name of this PrivateConnection.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PrivateConnection.

        Required. Display name.

        :param display_name: The display_name of this PrivateConnection.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error(self):
        """Gets the error of this PrivateConnection.


        :return: The error of this PrivateConnection.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PrivateConnection.


        :param error: The error of this PrivateConnection.
        :type error: Error
        """

        self._error = error

    @property
    def labels(self):
        """Gets the labels of this PrivateConnection.

        Labels.

        :return: The labels of this PrivateConnection.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PrivateConnection.

        Labels.

        :param labels: The labels of this PrivateConnection.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this PrivateConnection.

        Output only. The resource's name.

        :return: The name of this PrivateConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateConnection.

        Output only. The resource's name.

        :param name: The name of this PrivateConnection.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this PrivateConnection.

        Output only. The state of the Private Connection.

        :return: The state of this PrivateConnection.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrivateConnection.

        Output only. The state of the Private Connection.

        :param state: The state of this PrivateConnection.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "CREATED", "FAILED", "DELETING", "FAILED_TO_DELETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this PrivateConnection.

        Output only. The update time of the resource.

        :return: The update_time of this PrivateConnection.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PrivateConnection.

        Output only. The update time of the resource.

        :param update_time: The update_time of this PrivateConnection.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vpc_peering_config(self):
        """Gets the vpc_peering_config of this PrivateConnection.


        :return: The vpc_peering_config of this PrivateConnection.
        :rtype: VpcPeeringConfig
        """
        return self._vpc_peering_config

    @vpc_peering_config.setter
    def vpc_peering_config(self, vpc_peering_config):
        """Sets the vpc_peering_config of this PrivateConnection.


        :param vpc_peering_config: The vpc_peering_config of this PrivateConnection.
        :type vpc_peering_config: VpcPeeringConfig
        """

        self._vpc_peering_config = vpc_peering_config
