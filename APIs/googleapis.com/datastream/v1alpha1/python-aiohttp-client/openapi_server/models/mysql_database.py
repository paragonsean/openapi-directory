# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mysql_table import MysqlTable
from openapi_server import util


class MysqlDatabase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, mysql_tables: List[MysqlTable]=None):
        """MysqlDatabase - a model defined in OpenAPI

        :param database_name: The database_name of this MysqlDatabase.
        :param mysql_tables: The mysql_tables of this MysqlDatabase.
        """
        self.openapi_types = {
            'database_name': str,
            'mysql_tables': List[MysqlTable]
        }

        self.attribute_map = {
            'database_name': 'databaseName',
            'mysql_tables': 'mysqlTables'
        }

        self._database_name = database_name
        self._mysql_tables = mysql_tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MysqlDatabase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MysqlDatabase of this MysqlDatabase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this MysqlDatabase.

        Database name.

        :return: The database_name of this MysqlDatabase.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this MysqlDatabase.

        Database name.

        :param database_name: The database_name of this MysqlDatabase.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def mysql_tables(self):
        """Gets the mysql_tables of this MysqlDatabase.

        Tables in the database.

        :return: The mysql_tables of this MysqlDatabase.
        :rtype: List[MysqlTable]
        """
        return self._mysql_tables

    @mysql_tables.setter
    def mysql_tables(self, mysql_tables):
        """Sets the mysql_tables of this MysqlDatabase.

        Tables in the database.

        :param mysql_tables: The mysql_tables of this MysqlDatabase.
        :type mysql_tables: List[MysqlTable]
        """

        self._mysql_tables = mysql_tables
