# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MysqlSslConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certificate: str=None, ca_certificate_set: bool=None, client_certificate: str=None, client_certificate_set: bool=None, client_key: str=None, client_key_set: bool=None):
        """MysqlSslConfig - a model defined in OpenAPI

        :param ca_certificate: The ca_certificate of this MysqlSslConfig.
        :param ca_certificate_set: The ca_certificate_set of this MysqlSslConfig.
        :param client_certificate: The client_certificate of this MysqlSslConfig.
        :param client_certificate_set: The client_certificate_set of this MysqlSslConfig.
        :param client_key: The client_key of this MysqlSslConfig.
        :param client_key_set: The client_key_set of this MysqlSslConfig.
        """
        self.openapi_types = {
            'ca_certificate': str,
            'ca_certificate_set': bool,
            'client_certificate': str,
            'client_certificate_set': bool,
            'client_key': str,
            'client_key_set': bool
        }

        self.attribute_map = {
            'ca_certificate': 'caCertificate',
            'ca_certificate_set': 'caCertificateSet',
            'client_certificate': 'clientCertificate',
            'client_certificate_set': 'clientCertificateSet',
            'client_key': 'clientKey',
            'client_key_set': 'clientKeySet'
        }

        self._ca_certificate = ca_certificate
        self._ca_certificate_set = ca_certificate_set
        self._client_certificate = client_certificate
        self._client_certificate_set = client_certificate_set
        self._client_key = client_key
        self._client_key_set = client_key_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MysqlSslConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MysqlSslConfig of this MysqlSslConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this MysqlSslConfig.

        Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.

        :return: The ca_certificate of this MysqlSslConfig.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this MysqlSslConfig.

        Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.

        :param ca_certificate: The ca_certificate of this MysqlSslConfig.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def ca_certificate_set(self):
        """Gets the ca_certificate_set of this MysqlSslConfig.

        Output only. Indicates whether the ca_certificate field is set.

        :return: The ca_certificate_set of this MysqlSslConfig.
        :rtype: bool
        """
        return self._ca_certificate_set

    @ca_certificate_set.setter
    def ca_certificate_set(self, ca_certificate_set):
        """Sets the ca_certificate_set of this MysqlSslConfig.

        Output only. Indicates whether the ca_certificate field is set.

        :param ca_certificate_set: The ca_certificate_set of this MysqlSslConfig.
        :type ca_certificate_set: bool
        """

        self._ca_certificate_set = ca_certificate_set

    @property
    def client_certificate(self):
        """Gets the client_certificate of this MysqlSslConfig.

        Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.

        :return: The client_certificate of this MysqlSslConfig.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this MysqlSslConfig.

        Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.

        :param client_certificate: The client_certificate of this MysqlSslConfig.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def client_certificate_set(self):
        """Gets the client_certificate_set of this MysqlSslConfig.

        Output only. Indicates whether the client_certificate field is set.

        :return: The client_certificate_set of this MysqlSslConfig.
        :rtype: bool
        """
        return self._client_certificate_set

    @client_certificate_set.setter
    def client_certificate_set(self, client_certificate_set):
        """Sets the client_certificate_set of this MysqlSslConfig.

        Output only. Indicates whether the client_certificate field is set.

        :param client_certificate_set: The client_certificate_set of this MysqlSslConfig.
        :type client_certificate_set: bool
        """

        self._client_certificate_set = client_certificate_set

    @property
    def client_key(self):
        """Gets the client_key of this MysqlSslConfig.

        Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.

        :return: The client_key of this MysqlSslConfig.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this MysqlSslConfig.

        Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.

        :param client_key: The client_key of this MysqlSslConfig.
        :type client_key: str
        """

        self._client_key = client_key

    @property
    def client_key_set(self):
        """Gets the client_key_set of this MysqlSslConfig.

        Output only. Indicates whether the client_key field is set.

        :return: The client_key_set of this MysqlSslConfig.
        :rtype: bool
        """
        return self._client_key_set

    @client_key_set.setter
    def client_key_set(self, client_key_set):
        """Sets the client_key_set of this MysqlSslConfig.

        Output only. Indicates whether the client_key field is set.

        :param client_key_set: The client_key_set of this MysqlSslConfig.
        :type client_key_set: bool
        """

        self._client_key_set = client_key_set
