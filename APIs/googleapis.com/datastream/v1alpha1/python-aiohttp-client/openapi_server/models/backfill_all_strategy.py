# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mysql_rdbms import MysqlRdbms
from openapi_server.models.oracle_rdbms import OracleRdbms
from openapi_server import util


class BackfillAllStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mysql_excluded_objects: MysqlRdbms=None, oracle_excluded_objects: OracleRdbms=None):
        """BackfillAllStrategy - a model defined in OpenAPI

        :param mysql_excluded_objects: The mysql_excluded_objects of this BackfillAllStrategy.
        :param oracle_excluded_objects: The oracle_excluded_objects of this BackfillAllStrategy.
        """
        self.openapi_types = {
            'mysql_excluded_objects': MysqlRdbms,
            'oracle_excluded_objects': OracleRdbms
        }

        self.attribute_map = {
            'mysql_excluded_objects': 'mysqlExcludedObjects',
            'oracle_excluded_objects': 'oracleExcludedObjects'
        }

        self._mysql_excluded_objects = mysql_excluded_objects
        self._oracle_excluded_objects = oracle_excluded_objects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackfillAllStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackfillAllStrategy of this BackfillAllStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mysql_excluded_objects(self):
        """Gets the mysql_excluded_objects of this BackfillAllStrategy.


        :return: The mysql_excluded_objects of this BackfillAllStrategy.
        :rtype: MysqlRdbms
        """
        return self._mysql_excluded_objects

    @mysql_excluded_objects.setter
    def mysql_excluded_objects(self, mysql_excluded_objects):
        """Sets the mysql_excluded_objects of this BackfillAllStrategy.


        :param mysql_excluded_objects: The mysql_excluded_objects of this BackfillAllStrategy.
        :type mysql_excluded_objects: MysqlRdbms
        """

        self._mysql_excluded_objects = mysql_excluded_objects

    @property
    def oracle_excluded_objects(self):
        """Gets the oracle_excluded_objects of this BackfillAllStrategy.


        :return: The oracle_excluded_objects of this BackfillAllStrategy.
        :rtype: OracleRdbms
        """
        return self._oracle_excluded_objects

    @oracle_excluded_objects.setter
    def oracle_excluded_objects(self, oracle_excluded_objects):
        """Sets the oracle_excluded_objects of this BackfillAllStrategy.


        :param oracle_excluded_objects: The oracle_excluded_objects of this BackfillAllStrategy.
        :type oracle_excluded_objects: OracleRdbms
        """

        self._oracle_excluded_objects = oracle_excluded_objects
