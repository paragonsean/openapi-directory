# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forward_ssh_tunnel_connectivity import ForwardSshTunnelConnectivity
from openapi_server.models.gcs_profile import GcsProfile
from openapi_server.models.mysql_profile import MysqlProfile
from openapi_server.models.oracle_profile import OracleProfile
from openapi_server.models.private_connectivity import PrivateConnectivity
from openapi_server import util


class ConnectionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, forward_ssh_connectivity: ForwardSshTunnelConnectivity=None, gcs_profile: GcsProfile=None, labels: Dict[str, str]=None, mysql_profile: MysqlProfile=None, name: str=None, no_connectivity: object=None, oracle_profile: OracleProfile=None, private_connectivity: PrivateConnectivity=None, static_service_ip_connectivity: object=None, update_time: str=None):
        """ConnectionProfile - a model defined in OpenAPI

        :param create_time: The create_time of this ConnectionProfile.
        :param display_name: The display_name of this ConnectionProfile.
        :param forward_ssh_connectivity: The forward_ssh_connectivity of this ConnectionProfile.
        :param gcs_profile: The gcs_profile of this ConnectionProfile.
        :param labels: The labels of this ConnectionProfile.
        :param mysql_profile: The mysql_profile of this ConnectionProfile.
        :param name: The name of this ConnectionProfile.
        :param no_connectivity: The no_connectivity of this ConnectionProfile.
        :param oracle_profile: The oracle_profile of this ConnectionProfile.
        :param private_connectivity: The private_connectivity of this ConnectionProfile.
        :param static_service_ip_connectivity: The static_service_ip_connectivity of this ConnectionProfile.
        :param update_time: The update_time of this ConnectionProfile.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'forward_ssh_connectivity': ForwardSshTunnelConnectivity,
            'gcs_profile': GcsProfile,
            'labels': Dict[str, str],
            'mysql_profile': MysqlProfile,
            'name': str,
            'no_connectivity': object,
            'oracle_profile': OracleProfile,
            'private_connectivity': PrivateConnectivity,
            'static_service_ip_connectivity': object,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'forward_ssh_connectivity': 'forwardSshConnectivity',
            'gcs_profile': 'gcsProfile',
            'labels': 'labels',
            'mysql_profile': 'mysqlProfile',
            'name': 'name',
            'no_connectivity': 'noConnectivity',
            'oracle_profile': 'oracleProfile',
            'private_connectivity': 'privateConnectivity',
            'static_service_ip_connectivity': 'staticServiceIpConnectivity',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._forward_ssh_connectivity = forward_ssh_connectivity
        self._gcs_profile = gcs_profile
        self._labels = labels
        self._mysql_profile = mysql_profile
        self._name = name
        self._no_connectivity = no_connectivity
        self._oracle_profile = oracle_profile
        self._private_connectivity = private_connectivity
        self._static_service_ip_connectivity = static_service_ip_connectivity
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionProfile of this ConnectionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ConnectionProfile.

        Output only. The create time of the resource.

        :return: The create_time of this ConnectionProfile.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConnectionProfile.

        Output only. The create time of the resource.

        :param create_time: The create_time of this ConnectionProfile.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this ConnectionProfile.

        Required. Display name.

        :return: The display_name of this ConnectionProfile.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectionProfile.

        Required. Display name.

        :param display_name: The display_name of this ConnectionProfile.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def forward_ssh_connectivity(self):
        """Gets the forward_ssh_connectivity of this ConnectionProfile.


        :return: The forward_ssh_connectivity of this ConnectionProfile.
        :rtype: ForwardSshTunnelConnectivity
        """
        return self._forward_ssh_connectivity

    @forward_ssh_connectivity.setter
    def forward_ssh_connectivity(self, forward_ssh_connectivity):
        """Sets the forward_ssh_connectivity of this ConnectionProfile.


        :param forward_ssh_connectivity: The forward_ssh_connectivity of this ConnectionProfile.
        :type forward_ssh_connectivity: ForwardSshTunnelConnectivity
        """

        self._forward_ssh_connectivity = forward_ssh_connectivity

    @property
    def gcs_profile(self):
        """Gets the gcs_profile of this ConnectionProfile.


        :return: The gcs_profile of this ConnectionProfile.
        :rtype: GcsProfile
        """
        return self._gcs_profile

    @gcs_profile.setter
    def gcs_profile(self, gcs_profile):
        """Sets the gcs_profile of this ConnectionProfile.


        :param gcs_profile: The gcs_profile of this ConnectionProfile.
        :type gcs_profile: GcsProfile
        """

        self._gcs_profile = gcs_profile

    @property
    def labels(self):
        """Gets the labels of this ConnectionProfile.

        Labels.

        :return: The labels of this ConnectionProfile.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConnectionProfile.

        Labels.

        :param labels: The labels of this ConnectionProfile.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mysql_profile(self):
        """Gets the mysql_profile of this ConnectionProfile.


        :return: The mysql_profile of this ConnectionProfile.
        :rtype: MysqlProfile
        """
        return self._mysql_profile

    @mysql_profile.setter
    def mysql_profile(self, mysql_profile):
        """Sets the mysql_profile of this ConnectionProfile.


        :param mysql_profile: The mysql_profile of this ConnectionProfile.
        :type mysql_profile: MysqlProfile
        """

        self._mysql_profile = mysql_profile

    @property
    def name(self):
        """Gets the name of this ConnectionProfile.

        Output only. The resource's name.

        :return: The name of this ConnectionProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionProfile.

        Output only. The resource's name.

        :param name: The name of this ConnectionProfile.
        :type name: str
        """

        self._name = name

    @property
    def no_connectivity(self):
        """Gets the no_connectivity of this ConnectionProfile.

        No connectivity settings.

        :return: The no_connectivity of this ConnectionProfile.
        :rtype: object
        """
        return self._no_connectivity

    @no_connectivity.setter
    def no_connectivity(self, no_connectivity):
        """Sets the no_connectivity of this ConnectionProfile.

        No connectivity settings.

        :param no_connectivity: The no_connectivity of this ConnectionProfile.
        :type no_connectivity: object
        """

        self._no_connectivity = no_connectivity

    @property
    def oracle_profile(self):
        """Gets the oracle_profile of this ConnectionProfile.


        :return: The oracle_profile of this ConnectionProfile.
        :rtype: OracleProfile
        """
        return self._oracle_profile

    @oracle_profile.setter
    def oracle_profile(self, oracle_profile):
        """Sets the oracle_profile of this ConnectionProfile.


        :param oracle_profile: The oracle_profile of this ConnectionProfile.
        :type oracle_profile: OracleProfile
        """

        self._oracle_profile = oracle_profile

    @property
    def private_connectivity(self):
        """Gets the private_connectivity of this ConnectionProfile.


        :return: The private_connectivity of this ConnectionProfile.
        :rtype: PrivateConnectivity
        """
        return self._private_connectivity

    @private_connectivity.setter
    def private_connectivity(self, private_connectivity):
        """Sets the private_connectivity of this ConnectionProfile.


        :param private_connectivity: The private_connectivity of this ConnectionProfile.
        :type private_connectivity: PrivateConnectivity
        """

        self._private_connectivity = private_connectivity

    @property
    def static_service_ip_connectivity(self):
        """Gets the static_service_ip_connectivity of this ConnectionProfile.

        Static IP address connectivity.

        :return: The static_service_ip_connectivity of this ConnectionProfile.
        :rtype: object
        """
        return self._static_service_ip_connectivity

    @static_service_ip_connectivity.setter
    def static_service_ip_connectivity(self, static_service_ip_connectivity):
        """Sets the static_service_ip_connectivity of this ConnectionProfile.

        Static IP address connectivity.

        :param static_service_ip_connectivity: The static_service_ip_connectivity of this ConnectionProfile.
        :type static_service_ip_connectivity: object
        """

        self._static_service_ip_connectivity = static_service_ip_connectivity

    @property
    def update_time(self):
        """Gets the update_time of this ConnectionProfile.

        Output only. The update time of the resource.

        :return: The update_time of this ConnectionProfile.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConnectionProfile.

        Output only. The update time of the resource.

        :param update_time: The update_time of this ConnectionProfile.
        :type update_time: str
        """

        self._update_time = update_time
