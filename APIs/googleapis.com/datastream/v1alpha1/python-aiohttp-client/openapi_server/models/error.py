# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: Dict[str, str]=None, error_time: str=None, error_uuid: str=None, message: str=None, reason: str=None):
        """Error - a model defined in OpenAPI

        :param details: The details of this Error.
        :param error_time: The error_time of this Error.
        :param error_uuid: The error_uuid of this Error.
        :param message: The message of this Error.
        :param reason: The reason of this Error.
        """
        self.openapi_types = {
            'details': Dict[str, str],
            'error_time': str,
            'error_uuid': str,
            'message': str,
            'reason': str
        }

        self.attribute_map = {
            'details': 'details',
            'error_time': 'errorTime',
            'error_uuid': 'errorUuid',
            'message': 'message',
            'reason': 'reason'
        }

        self._details = details
        self._error_time = error_time
        self._error_uuid = error_uuid
        self._message = message
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Error.

        Additional information about the error.

        :return: The details of this Error.
        :rtype: Dict[str, str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Error.

        Additional information about the error.

        :param details: The details of this Error.
        :type details: Dict[str, str]
        """

        self._details = details

    @property
    def error_time(self):
        """Gets the error_time of this Error.

        The time when the error occurred.

        :return: The error_time of this Error.
        :rtype: str
        """
        return self._error_time

    @error_time.setter
    def error_time(self, error_time):
        """Sets the error_time of this Error.

        The time when the error occurred.

        :param error_time: The error_time of this Error.
        :type error_time: str
        """

        self._error_time = error_time

    @property
    def error_uuid(self):
        """Gets the error_uuid of this Error.

        A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.

        :return: The error_uuid of this Error.
        :rtype: str
        """
        return self._error_uuid

    @error_uuid.setter
    def error_uuid(self, error_uuid):
        """Sets the error_uuid of this Error.

        A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.

        :param error_uuid: The error_uuid of this Error.
        :type error_uuid: str
        """

        self._error_uuid = error_uuid

    @property
    def message(self):
        """Gets the message of this Error.

        A message containing more information about the error that occurred.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        A message containing more information about the error that occurred.

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this Error.

        A title that explains the reason for the error.

        :return: The reason of this Error.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Error.

        A title that explains the reason for the error.

        :param reason: The reason of this Error.
        :type reason: str
        """

        self._reason = reason
