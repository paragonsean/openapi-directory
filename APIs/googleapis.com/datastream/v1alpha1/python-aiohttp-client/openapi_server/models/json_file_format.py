# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonFileFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compression: str=None, schema_file_format: str=None):
        """JsonFileFormat - a model defined in OpenAPI

        :param compression: The compression of this JsonFileFormat.
        :param schema_file_format: The schema_file_format of this JsonFileFormat.
        """
        self.openapi_types = {
            'compression': str,
            'schema_file_format': str
        }

        self.attribute_map = {
            'compression': 'compression',
            'schema_file_format': 'schemaFileFormat'
        }

        self._compression = compression
        self._schema_file_format = schema_file_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonFileFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonFileFormat of this JsonFileFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compression(self):
        """Gets the compression of this JsonFileFormat.

        Compression of the loaded JSON file.

        :return: The compression of this JsonFileFormat.
        :rtype: str
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this JsonFileFormat.

        Compression of the loaded JSON file.

        :param compression: The compression of this JsonFileFormat.
        :type compression: str
        """
        allowed_values = ["JSON_COMPRESSION_UNSPECIFIED", "NO_COMPRESSION", "GZIP"]  # noqa: E501
        if compression not in allowed_values:
            raise ValueError(
                "Invalid value for `compression` ({0}), must be one of {1}"
                .format(compression, allowed_values)
            )

        self._compression = compression

    @property
    def schema_file_format(self):
        """Gets the schema_file_format of this JsonFileFormat.

        The schema file format along JSON data files.

        :return: The schema_file_format of this JsonFileFormat.
        :rtype: str
        """
        return self._schema_file_format

    @schema_file_format.setter
    def schema_file_format(self, schema_file_format):
        """Sets the schema_file_format of this JsonFileFormat.

        The schema file format along JSON data files.

        :param schema_file_format: The schema_file_format of this JsonFileFormat.
        :type schema_file_format: str
        """
        allowed_values = ["SCHEMA_FILE_FORMAT_UNSPECIFIED", "NO_SCHEMA_FILE", "AVRO_SCHEMA_FILE"]  # noqa: E501
        if schema_file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_file_format` ({0}), must be one of {1}"
                .format(schema_file_format, allowed_values)
            )

        self._schema_file_format = schema_file_format
