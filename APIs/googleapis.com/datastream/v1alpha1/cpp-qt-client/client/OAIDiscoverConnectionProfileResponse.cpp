/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoverConnectionProfileResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoverConnectionProfileResponse::OAIDiscoverConnectionProfileResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoverConnectionProfileResponse::OAIDiscoverConnectionProfileResponse() {
    this->initializeModel();
}

OAIDiscoverConnectionProfileResponse::~OAIDiscoverConnectionProfileResponse() {}

void OAIDiscoverConnectionProfileResponse::initializeModel() {

    m_mysql_rdbms_isSet = false;
    m_mysql_rdbms_isValid = false;

    m_oracle_rdbms_isSet = false;
    m_oracle_rdbms_isValid = false;
}

void OAIDiscoverConnectionProfileResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoverConnectionProfileResponse::fromJsonObject(QJsonObject json) {

    m_mysql_rdbms_isValid = ::OpenAPI::fromJsonValue(m_mysql_rdbms, json[QString("mysqlRdbms")]);
    m_mysql_rdbms_isSet = !json[QString("mysqlRdbms")].isNull() && m_mysql_rdbms_isValid;

    m_oracle_rdbms_isValid = ::OpenAPI::fromJsonValue(m_oracle_rdbms, json[QString("oracleRdbms")]);
    m_oracle_rdbms_isSet = !json[QString("oracleRdbms")].isNull() && m_oracle_rdbms_isValid;
}

QString OAIDiscoverConnectionProfileResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoverConnectionProfileResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_rdbms.isSet()) {
        obj.insert(QString("mysqlRdbms"), ::OpenAPI::toJsonValue(m_mysql_rdbms));
    }
    if (m_oracle_rdbms.isSet()) {
        obj.insert(QString("oracleRdbms"), ::OpenAPI::toJsonValue(m_oracle_rdbms));
    }
    return obj;
}

OAIMysqlRdbms OAIDiscoverConnectionProfileResponse::getMysqlRdbms() const {
    return m_mysql_rdbms;
}
void OAIDiscoverConnectionProfileResponse::setMysqlRdbms(const OAIMysqlRdbms &mysql_rdbms) {
    m_mysql_rdbms = mysql_rdbms;
    m_mysql_rdbms_isSet = true;
}

bool OAIDiscoverConnectionProfileResponse::is_mysql_rdbms_Set() const{
    return m_mysql_rdbms_isSet;
}

bool OAIDiscoverConnectionProfileResponse::is_mysql_rdbms_Valid() const{
    return m_mysql_rdbms_isValid;
}

OAIOracleRdbms OAIDiscoverConnectionProfileResponse::getOracleRdbms() const {
    return m_oracle_rdbms;
}
void OAIDiscoverConnectionProfileResponse::setOracleRdbms(const OAIOracleRdbms &oracle_rdbms) {
    m_oracle_rdbms = oracle_rdbms;
    m_oracle_rdbms_isSet = true;
}

bool OAIDiscoverConnectionProfileResponse::is_oracle_rdbms_Set() const{
    return m_oracle_rdbms_isSet;
}

bool OAIDiscoverConnectionProfileResponse::is_oracle_rdbms_Valid() const{
    return m_oracle_rdbms_isValid;
}

bool OAIDiscoverConnectionProfileResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_rdbms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_rdbms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoverConnectionProfileResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
