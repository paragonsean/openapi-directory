/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMysqlColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMysqlColumn::OAIMysqlColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMysqlColumn::OAIMysqlColumn() {
    this->initializeModel();
}

OAIMysqlColumn::~OAIMysqlColumn() {}

void OAIMysqlColumn::initializeModel() {

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_ordinal_position_isSet = false;
    m_ordinal_position_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;
}

void OAIMysqlColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMysqlColumn::fromJsonObject(QJsonObject json) {

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("columnName")]);
    m_column_name_isSet = !json[QString("columnName")].isNull() && m_column_name_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_ordinal_position_isValid = ::OpenAPI::fromJsonValue(m_ordinal_position, json[QString("ordinalPosition")]);
    m_ordinal_position_isSet = !json[QString("ordinalPosition")].isNull() && m_ordinal_position_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;
}

QString OAIMysqlColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMysqlColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("columnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_ordinal_position_isSet) {
        obj.insert(QString("ordinalPosition"), ::OpenAPI::toJsonValue(m_ordinal_position));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    return obj;
}

QString OAIMysqlColumn::getCollation() const {
    return m_collation;
}
void OAIMysqlColumn::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAIMysqlColumn::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAIMysqlColumn::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAIMysqlColumn::getColumnName() const {
    return m_column_name;
}
void OAIMysqlColumn::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIMysqlColumn::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIMysqlColumn::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIMysqlColumn::getDataType() const {
    return m_data_type;
}
void OAIMysqlColumn::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIMysqlColumn::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIMysqlColumn::is_data_type_Valid() const{
    return m_data_type_isValid;
}

qint32 OAIMysqlColumn::getLength() const {
    return m_length;
}
void OAIMysqlColumn::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIMysqlColumn::is_length_Set() const{
    return m_length_isSet;
}

bool OAIMysqlColumn::is_length_Valid() const{
    return m_length_isValid;
}

bool OAIMysqlColumn::isNullable() const {
    return m_nullable;
}
void OAIMysqlColumn::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAIMysqlColumn::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAIMysqlColumn::is_nullable_Valid() const{
    return m_nullable_isValid;
}

qint32 OAIMysqlColumn::getOrdinalPosition() const {
    return m_ordinal_position;
}
void OAIMysqlColumn::setOrdinalPosition(const qint32 &ordinal_position) {
    m_ordinal_position = ordinal_position;
    m_ordinal_position_isSet = true;
}

bool OAIMysqlColumn::is_ordinal_position_Set() const{
    return m_ordinal_position_isSet;
}

bool OAIMysqlColumn::is_ordinal_position_Valid() const{
    return m_ordinal_position_isValid;
}

bool OAIMysqlColumn::isPrimaryKey() const {
    return m_primary_key;
}
void OAIMysqlColumn::setPrimaryKey(const bool &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIMysqlColumn::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIMysqlColumn::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

bool OAIMysqlColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMysqlColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
