/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOracleSourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOracleSourceConfig::OAIOracleSourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOracleSourceConfig::OAIOracleSourceConfig() {
    this->initializeModel();
}

OAIOracleSourceConfig::~OAIOracleSourceConfig() {}

void OAIOracleSourceConfig::initializeModel() {

    m_allowlist_isSet = false;
    m_allowlist_isValid = false;

    m_drop_large_objects_isSet = false;
    m_drop_large_objects_isValid = false;

    m_rejectlist_isSet = false;
    m_rejectlist_isValid = false;
}

void OAIOracleSourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOracleSourceConfig::fromJsonObject(QJsonObject json) {

    m_allowlist_isValid = ::OpenAPI::fromJsonValue(m_allowlist, json[QString("allowlist")]);
    m_allowlist_isSet = !json[QString("allowlist")].isNull() && m_allowlist_isValid;

    m_drop_large_objects_isValid = ::OpenAPI::fromJsonValue(m_drop_large_objects, json[QString("dropLargeObjects")]);
    m_drop_large_objects_isSet = !json[QString("dropLargeObjects")].isNull() && m_drop_large_objects_isValid;

    m_rejectlist_isValid = ::OpenAPI::fromJsonValue(m_rejectlist, json[QString("rejectlist")]);
    m_rejectlist_isSet = !json[QString("rejectlist")].isNull() && m_rejectlist_isValid;
}

QString OAIOracleSourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOracleSourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowlist.isSet()) {
        obj.insert(QString("allowlist"), ::OpenAPI::toJsonValue(m_allowlist));
    }
    if (m_drop_large_objects_isSet) {
        obj.insert(QString("dropLargeObjects"), ::OpenAPI::toJsonValue(m_drop_large_objects));
    }
    if (m_rejectlist.isSet()) {
        obj.insert(QString("rejectlist"), ::OpenAPI::toJsonValue(m_rejectlist));
    }
    return obj;
}

OAIOracleRdbms OAIOracleSourceConfig::getAllowlist() const {
    return m_allowlist;
}
void OAIOracleSourceConfig::setAllowlist(const OAIOracleRdbms &allowlist) {
    m_allowlist = allowlist;
    m_allowlist_isSet = true;
}

bool OAIOracleSourceConfig::is_allowlist_Set() const{
    return m_allowlist_isSet;
}

bool OAIOracleSourceConfig::is_allowlist_Valid() const{
    return m_allowlist_isValid;
}

OAIObject OAIOracleSourceConfig::getDropLargeObjects() const {
    return m_drop_large_objects;
}
void OAIOracleSourceConfig::setDropLargeObjects(const OAIObject &drop_large_objects) {
    m_drop_large_objects = drop_large_objects;
    m_drop_large_objects_isSet = true;
}

bool OAIOracleSourceConfig::is_drop_large_objects_Set() const{
    return m_drop_large_objects_isSet;
}

bool OAIOracleSourceConfig::is_drop_large_objects_Valid() const{
    return m_drop_large_objects_isValid;
}

OAIOracleRdbms OAIOracleSourceConfig::getRejectlist() const {
    return m_rejectlist;
}
void OAIOracleSourceConfig::setRejectlist(const OAIOracleRdbms &rejectlist) {
    m_rejectlist = rejectlist;
    m_rejectlist_isSet = true;
}

bool OAIOracleSourceConfig::is_rejectlist_Set() const{
    return m_rejectlist_isSet;
}

bool OAIOracleSourceConfig::is_rejectlist_Valid() const{
    return m_rejectlist_isValid;
}

bool OAIOracleSourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowlist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_large_objects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejectlist.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOracleSourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
