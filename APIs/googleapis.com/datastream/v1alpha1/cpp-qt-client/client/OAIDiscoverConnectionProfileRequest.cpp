/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoverConnectionProfileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoverConnectionProfileRequest::OAIDiscoverConnectionProfileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoverConnectionProfileRequest::OAIDiscoverConnectionProfileRequest() {
    this->initializeModel();
}

OAIDiscoverConnectionProfileRequest::~OAIDiscoverConnectionProfileRequest() {}

void OAIDiscoverConnectionProfileRequest::initializeModel() {

    m_connection_profile_isSet = false;
    m_connection_profile_isValid = false;

    m_connection_profile_name_isSet = false;
    m_connection_profile_name_isValid = false;

    m_mysql_rdbms_isSet = false;
    m_mysql_rdbms_isValid = false;

    m_oracle_rdbms_isSet = false;
    m_oracle_rdbms_isValid = false;

    m_recursion_depth_isSet = false;
    m_recursion_depth_isValid = false;

    m_recursive_isSet = false;
    m_recursive_isValid = false;
}

void OAIDiscoverConnectionProfileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoverConnectionProfileRequest::fromJsonObject(QJsonObject json) {

    m_connection_profile_isValid = ::OpenAPI::fromJsonValue(m_connection_profile, json[QString("connectionProfile")]);
    m_connection_profile_isSet = !json[QString("connectionProfile")].isNull() && m_connection_profile_isValid;

    m_connection_profile_name_isValid = ::OpenAPI::fromJsonValue(m_connection_profile_name, json[QString("connectionProfileName")]);
    m_connection_profile_name_isSet = !json[QString("connectionProfileName")].isNull() && m_connection_profile_name_isValid;

    m_mysql_rdbms_isValid = ::OpenAPI::fromJsonValue(m_mysql_rdbms, json[QString("mysqlRdbms")]);
    m_mysql_rdbms_isSet = !json[QString("mysqlRdbms")].isNull() && m_mysql_rdbms_isValid;

    m_oracle_rdbms_isValid = ::OpenAPI::fromJsonValue(m_oracle_rdbms, json[QString("oracleRdbms")]);
    m_oracle_rdbms_isSet = !json[QString("oracleRdbms")].isNull() && m_oracle_rdbms_isValid;

    m_recursion_depth_isValid = ::OpenAPI::fromJsonValue(m_recursion_depth, json[QString("recursionDepth")]);
    m_recursion_depth_isSet = !json[QString("recursionDepth")].isNull() && m_recursion_depth_isValid;

    m_recursive_isValid = ::OpenAPI::fromJsonValue(m_recursive, json[QString("recursive")]);
    m_recursive_isSet = !json[QString("recursive")].isNull() && m_recursive_isValid;
}

QString OAIDiscoverConnectionProfileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoverConnectionProfileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_profile.isSet()) {
        obj.insert(QString("connectionProfile"), ::OpenAPI::toJsonValue(m_connection_profile));
    }
    if (m_connection_profile_name_isSet) {
        obj.insert(QString("connectionProfileName"), ::OpenAPI::toJsonValue(m_connection_profile_name));
    }
    if (m_mysql_rdbms.isSet()) {
        obj.insert(QString("mysqlRdbms"), ::OpenAPI::toJsonValue(m_mysql_rdbms));
    }
    if (m_oracle_rdbms.isSet()) {
        obj.insert(QString("oracleRdbms"), ::OpenAPI::toJsonValue(m_oracle_rdbms));
    }
    if (m_recursion_depth_isSet) {
        obj.insert(QString("recursionDepth"), ::OpenAPI::toJsonValue(m_recursion_depth));
    }
    if (m_recursive_isSet) {
        obj.insert(QString("recursive"), ::OpenAPI::toJsonValue(m_recursive));
    }
    return obj;
}

OAIConnectionProfile OAIDiscoverConnectionProfileRequest::getConnectionProfile() const {
    return m_connection_profile;
}
void OAIDiscoverConnectionProfileRequest::setConnectionProfile(const OAIConnectionProfile &connection_profile) {
    m_connection_profile = connection_profile;
    m_connection_profile_isSet = true;
}

bool OAIDiscoverConnectionProfileRequest::is_connection_profile_Set() const{
    return m_connection_profile_isSet;
}

bool OAIDiscoverConnectionProfileRequest::is_connection_profile_Valid() const{
    return m_connection_profile_isValid;
}

QString OAIDiscoverConnectionProfileRequest::getConnectionProfileName() const {
    return m_connection_profile_name;
}
void OAIDiscoverConnectionProfileRequest::setConnectionProfileName(const QString &connection_profile_name) {
    m_connection_profile_name = connection_profile_name;
    m_connection_profile_name_isSet = true;
}

bool OAIDiscoverConnectionProfileRequest::is_connection_profile_name_Set() const{
    return m_connection_profile_name_isSet;
}

bool OAIDiscoverConnectionProfileRequest::is_connection_profile_name_Valid() const{
    return m_connection_profile_name_isValid;
}

OAIMysqlRdbms OAIDiscoverConnectionProfileRequest::getMysqlRdbms() const {
    return m_mysql_rdbms;
}
void OAIDiscoverConnectionProfileRequest::setMysqlRdbms(const OAIMysqlRdbms &mysql_rdbms) {
    m_mysql_rdbms = mysql_rdbms;
    m_mysql_rdbms_isSet = true;
}

bool OAIDiscoverConnectionProfileRequest::is_mysql_rdbms_Set() const{
    return m_mysql_rdbms_isSet;
}

bool OAIDiscoverConnectionProfileRequest::is_mysql_rdbms_Valid() const{
    return m_mysql_rdbms_isValid;
}

OAIOracleRdbms OAIDiscoverConnectionProfileRequest::getOracleRdbms() const {
    return m_oracle_rdbms;
}
void OAIDiscoverConnectionProfileRequest::setOracleRdbms(const OAIOracleRdbms &oracle_rdbms) {
    m_oracle_rdbms = oracle_rdbms;
    m_oracle_rdbms_isSet = true;
}

bool OAIDiscoverConnectionProfileRequest::is_oracle_rdbms_Set() const{
    return m_oracle_rdbms_isSet;
}

bool OAIDiscoverConnectionProfileRequest::is_oracle_rdbms_Valid() const{
    return m_oracle_rdbms_isValid;
}

qint32 OAIDiscoverConnectionProfileRequest::getRecursionDepth() const {
    return m_recursion_depth;
}
void OAIDiscoverConnectionProfileRequest::setRecursionDepth(const qint32 &recursion_depth) {
    m_recursion_depth = recursion_depth;
    m_recursion_depth_isSet = true;
}

bool OAIDiscoverConnectionProfileRequest::is_recursion_depth_Set() const{
    return m_recursion_depth_isSet;
}

bool OAIDiscoverConnectionProfileRequest::is_recursion_depth_Valid() const{
    return m_recursion_depth_isValid;
}

bool OAIDiscoverConnectionProfileRequest::isRecursive() const {
    return m_recursive;
}
void OAIDiscoverConnectionProfileRequest::setRecursive(const bool &recursive) {
    m_recursive = recursive;
    m_recursive_isSet = true;
}

bool OAIDiscoverConnectionProfileRequest::is_recursive_Set() const{
    return m_recursive_isSet;
}

bool OAIDiscoverConnectionProfileRequest::is_recursive_Valid() const{
    return m_recursive_isValid;
}

bool OAIDiscoverConnectionProfileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mysql_rdbms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_rdbms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursion_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoverConnectionProfileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
