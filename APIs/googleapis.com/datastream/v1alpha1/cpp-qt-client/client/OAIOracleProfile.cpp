/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOracleProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOracleProfile::OAIOracleProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOracleProfile::OAIOracleProfile() {
    this->initializeModel();
}

OAIOracleProfile::~OAIOracleProfile() {}

void OAIOracleProfile::initializeModel() {

    m_connection_attributes_isSet = false;
    m_connection_attributes_isValid = false;

    m_database_service_isSet = false;
    m_database_service_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIOracleProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOracleProfile::fromJsonObject(QJsonObject json) {

    m_connection_attributes_isValid = ::OpenAPI::fromJsonValue(m_connection_attributes, json[QString("connectionAttributes")]);
    m_connection_attributes_isSet = !json[QString("connectionAttributes")].isNull() && m_connection_attributes_isValid;

    m_database_service_isValid = ::OpenAPI::fromJsonValue(m_database_service, json[QString("databaseService")]);
    m_database_service_isSet = !json[QString("databaseService")].isNull() && m_database_service_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIOracleProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOracleProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_attributes.size() > 0) {
        obj.insert(QString("connectionAttributes"), ::OpenAPI::toJsonValue(m_connection_attributes));
    }
    if (m_database_service_isSet) {
        obj.insert(QString("databaseService"), ::OpenAPI::toJsonValue(m_database_service));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QMap<QString, QString> OAIOracleProfile::getConnectionAttributes() const {
    return m_connection_attributes;
}
void OAIOracleProfile::setConnectionAttributes(const QMap<QString, QString> &connection_attributes) {
    m_connection_attributes = connection_attributes;
    m_connection_attributes_isSet = true;
}

bool OAIOracleProfile::is_connection_attributes_Set() const{
    return m_connection_attributes_isSet;
}

bool OAIOracleProfile::is_connection_attributes_Valid() const{
    return m_connection_attributes_isValid;
}

QString OAIOracleProfile::getDatabaseService() const {
    return m_database_service;
}
void OAIOracleProfile::setDatabaseService(const QString &database_service) {
    m_database_service = database_service;
    m_database_service_isSet = true;
}

bool OAIOracleProfile::is_database_service_Set() const{
    return m_database_service_isSet;
}

bool OAIOracleProfile::is_database_service_Valid() const{
    return m_database_service_isValid;
}

QString OAIOracleProfile::getHostname() const {
    return m_hostname;
}
void OAIOracleProfile::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIOracleProfile::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIOracleProfile::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIOracleProfile::getPassword() const {
    return m_password;
}
void OAIOracleProfile::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIOracleProfile::is_password_Set() const{
    return m_password_isSet;
}

bool OAIOracleProfile::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIOracleProfile::getPort() const {
    return m_port;
}
void OAIOracleProfile::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIOracleProfile::is_port_Set() const{
    return m_port_isSet;
}

bool OAIOracleProfile::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIOracleProfile::getUsername() const {
    return m_username;
}
void OAIOracleProfile::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOracleProfile::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOracleProfile::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOracleProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOracleProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
