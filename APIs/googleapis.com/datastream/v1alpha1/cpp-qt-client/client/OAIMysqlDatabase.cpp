/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMysqlDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMysqlDatabase::OAIMysqlDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMysqlDatabase::OAIMysqlDatabase() {
    this->initializeModel();
}

OAIMysqlDatabase::~OAIMysqlDatabase() {}

void OAIMysqlDatabase::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_mysql_tables_isSet = false;
    m_mysql_tables_isValid = false;
}

void OAIMysqlDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMysqlDatabase::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_mysql_tables_isValid = ::OpenAPI::fromJsonValue(m_mysql_tables, json[QString("mysqlTables")]);
    m_mysql_tables_isSet = !json[QString("mysqlTables")].isNull() && m_mysql_tables_isValid;
}

QString OAIMysqlDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMysqlDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_mysql_tables.size() > 0) {
        obj.insert(QString("mysqlTables"), ::OpenAPI::toJsonValue(m_mysql_tables));
    }
    return obj;
}

QString OAIMysqlDatabase::getDatabaseName() const {
    return m_database_name;
}
void OAIMysqlDatabase::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIMysqlDatabase::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIMysqlDatabase::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QList<OAIMysqlTable> OAIMysqlDatabase::getMysqlTables() const {
    return m_mysql_tables;
}
void OAIMysqlDatabase::setMysqlTables(const QList<OAIMysqlTable> &mysql_tables) {
    m_mysql_tables = mysql_tables;
    m_mysql_tables_isSet = true;
}

bool OAIMysqlDatabase::is_mysql_tables_Set() const{
    return m_mysql_tables_isSet;
}

bool OAIMysqlDatabase::is_mysql_tables_Valid() const{
    return m_mysql_tables_isValid;
}

bool OAIMysqlDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mysql_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMysqlDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
