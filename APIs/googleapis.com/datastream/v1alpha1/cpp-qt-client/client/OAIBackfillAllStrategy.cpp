/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackfillAllStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackfillAllStrategy::OAIBackfillAllStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackfillAllStrategy::OAIBackfillAllStrategy() {
    this->initializeModel();
}

OAIBackfillAllStrategy::~OAIBackfillAllStrategy() {}

void OAIBackfillAllStrategy::initializeModel() {

    m_mysql_excluded_objects_isSet = false;
    m_mysql_excluded_objects_isValid = false;

    m_oracle_excluded_objects_isSet = false;
    m_oracle_excluded_objects_isValid = false;
}

void OAIBackfillAllStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackfillAllStrategy::fromJsonObject(QJsonObject json) {

    m_mysql_excluded_objects_isValid = ::OpenAPI::fromJsonValue(m_mysql_excluded_objects, json[QString("mysqlExcludedObjects")]);
    m_mysql_excluded_objects_isSet = !json[QString("mysqlExcludedObjects")].isNull() && m_mysql_excluded_objects_isValid;

    m_oracle_excluded_objects_isValid = ::OpenAPI::fromJsonValue(m_oracle_excluded_objects, json[QString("oracleExcludedObjects")]);
    m_oracle_excluded_objects_isSet = !json[QString("oracleExcludedObjects")].isNull() && m_oracle_excluded_objects_isValid;
}

QString OAIBackfillAllStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackfillAllStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_excluded_objects.isSet()) {
        obj.insert(QString("mysqlExcludedObjects"), ::OpenAPI::toJsonValue(m_mysql_excluded_objects));
    }
    if (m_oracle_excluded_objects.isSet()) {
        obj.insert(QString("oracleExcludedObjects"), ::OpenAPI::toJsonValue(m_oracle_excluded_objects));
    }
    return obj;
}

OAIMysqlRdbms OAIBackfillAllStrategy::getMysqlExcludedObjects() const {
    return m_mysql_excluded_objects;
}
void OAIBackfillAllStrategy::setMysqlExcludedObjects(const OAIMysqlRdbms &mysql_excluded_objects) {
    m_mysql_excluded_objects = mysql_excluded_objects;
    m_mysql_excluded_objects_isSet = true;
}

bool OAIBackfillAllStrategy::is_mysql_excluded_objects_Set() const{
    return m_mysql_excluded_objects_isSet;
}

bool OAIBackfillAllStrategy::is_mysql_excluded_objects_Valid() const{
    return m_mysql_excluded_objects_isValid;
}

OAIOracleRdbms OAIBackfillAllStrategy::getOracleExcludedObjects() const {
    return m_oracle_excluded_objects;
}
void OAIBackfillAllStrategy::setOracleExcludedObjects(const OAIOracleRdbms &oracle_excluded_objects) {
    m_oracle_excluded_objects = oracle_excluded_objects;
    m_oracle_excluded_objects_isSet = true;
}

bool OAIBackfillAllStrategy::is_oracle_excluded_objects_Set() const{
    return m_oracle_excluded_objects_isSet;
}

bool OAIBackfillAllStrategy::is_oracle_excluded_objects_Valid() const{
    return m_oracle_excluded_objects_isValid;
}

bool OAIBackfillAllStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_excluded_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_excluded_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackfillAllStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
