/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcPeeringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcPeeringConfig::OAIVpcPeeringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcPeeringConfig::OAIVpcPeeringConfig() {
    this->initializeModel();
}

OAIVpcPeeringConfig::~OAIVpcPeeringConfig() {}

void OAIVpcPeeringConfig::initializeModel() {

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_vpc_name_isSet = false;
    m_vpc_name_isValid = false;
}

void OAIVpcPeeringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcPeeringConfig::fromJsonObject(QJsonObject json) {

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_vpc_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_name, json[QString("vpcName")]);
    m_vpc_name_isSet = !json[QString("vpcName")].isNull() && m_vpc_name_isValid;
}

QString OAIVpcPeeringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcPeeringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_vpc_name_isSet) {
        obj.insert(QString("vpcName"), ::OpenAPI::toJsonValue(m_vpc_name));
    }
    return obj;
}

QString OAIVpcPeeringConfig::getSubnet() const {
    return m_subnet;
}
void OAIVpcPeeringConfig::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIVpcPeeringConfig::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIVpcPeeringConfig::is_subnet_Valid() const{
    return m_subnet_isValid;
}

QString OAIVpcPeeringConfig::getVpcName() const {
    return m_vpc_name;
}
void OAIVpcPeeringConfig::setVpcName(const QString &vpc_name) {
    m_vpc_name = vpc_name;
    m_vpc_name_isSet = true;
}

bool OAIVpcPeeringConfig::is_vpc_name_Set() const{
    return m_vpc_name_isSet;
}

bool OAIVpcPeeringConfig::is_vpc_name_Valid() const{
    return m_vpc_name_isValid;
}

bool OAIVpcPeeringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcPeeringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
