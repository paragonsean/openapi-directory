/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionProfile;
import org.openapitools.client.model.MysqlRdbms;
import org.openapitools.client.model.OracleRdbms;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for &#39;discover&#39; ConnectionProfile request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:46.596120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoverConnectionProfileRequest {
  public static final String SERIALIZED_NAME_CONNECTION_PROFILE = "connectionProfile";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROFILE)
  private ConnectionProfile connectionProfile;

  public static final String SERIALIZED_NAME_CONNECTION_PROFILE_NAME = "connectionProfileName";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROFILE_NAME)
  private String connectionProfileName;

  public static final String SERIALIZED_NAME_MYSQL_RDBMS = "mysqlRdbms";
  @SerializedName(SERIALIZED_NAME_MYSQL_RDBMS)
  private MysqlRdbms mysqlRdbms;

  public static final String SERIALIZED_NAME_ORACLE_RDBMS = "oracleRdbms";
  @SerializedName(SERIALIZED_NAME_ORACLE_RDBMS)
  private OracleRdbms oracleRdbms;

  public static final String SERIALIZED_NAME_RECURSION_DEPTH = "recursionDepth";
  @SerializedName(SERIALIZED_NAME_RECURSION_DEPTH)
  private Integer recursionDepth;

  public static final String SERIALIZED_NAME_RECURSIVE = "recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  private Boolean recursive;

  public DiscoverConnectionProfileRequest() {
  }

  public DiscoverConnectionProfileRequest connectionProfile(ConnectionProfile connectionProfile) {
    this.connectionProfile = connectionProfile;
    return this;
  }

  /**
   * Get connectionProfile
   * @return connectionProfile
   */
  @javax.annotation.Nullable
  public ConnectionProfile getConnectionProfile() {
    return connectionProfile;
  }

  public void setConnectionProfile(ConnectionProfile connectionProfile) {
    this.connectionProfile = connectionProfile;
  }


  public DiscoverConnectionProfileRequest connectionProfileName(String connectionProfileName) {
    this.connectionProfileName = connectionProfileName;
    return this;
  }

  /**
   * A reference to an existing ConnectionProfile.
   * @return connectionProfileName
   */
  @javax.annotation.Nullable
  public String getConnectionProfileName() {
    return connectionProfileName;
  }

  public void setConnectionProfileName(String connectionProfileName) {
    this.connectionProfileName = connectionProfileName;
  }


  public DiscoverConnectionProfileRequest mysqlRdbms(MysqlRdbms mysqlRdbms) {
    this.mysqlRdbms = mysqlRdbms;
    return this;
  }

  /**
   * Get mysqlRdbms
   * @return mysqlRdbms
   */
  @javax.annotation.Nullable
  public MysqlRdbms getMysqlRdbms() {
    return mysqlRdbms;
  }

  public void setMysqlRdbms(MysqlRdbms mysqlRdbms) {
    this.mysqlRdbms = mysqlRdbms;
  }


  public DiscoverConnectionProfileRequest oracleRdbms(OracleRdbms oracleRdbms) {
    this.oracleRdbms = oracleRdbms;
    return this;
  }

  /**
   * Get oracleRdbms
   * @return oracleRdbms
   */
  @javax.annotation.Nullable
  public OracleRdbms getOracleRdbms() {
    return oracleRdbms;
  }

  public void setOracleRdbms(OracleRdbms oracleRdbms) {
    this.oracleRdbms = oracleRdbms;
  }


  public DiscoverConnectionProfileRequest recursionDepth(Integer recursionDepth) {
    this.recursionDepth = recursionDepth;
    return this;
  }

  /**
   * The number of hierarchy levels below the current level to be retrieved.
   * @return recursionDepth
   */
  @javax.annotation.Nullable
  public Integer getRecursionDepth() {
    return recursionDepth;
  }

  public void setRecursionDepth(Integer recursionDepth) {
    this.recursionDepth = recursionDepth;
  }


  public DiscoverConnectionProfileRequest recursive(Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

  /**
   * Whether to retrieve the full hierarchy of data objects (TRUE) or only the current level (FALSE).
   * @return recursive
   */
  @javax.annotation.Nullable
  public Boolean getRecursive() {
    return recursive;
  }

  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoverConnectionProfileRequest discoverConnectionProfileRequest = (DiscoverConnectionProfileRequest) o;
    return Objects.equals(this.connectionProfile, discoverConnectionProfileRequest.connectionProfile) &&
        Objects.equals(this.connectionProfileName, discoverConnectionProfileRequest.connectionProfileName) &&
        Objects.equals(this.mysqlRdbms, discoverConnectionProfileRequest.mysqlRdbms) &&
        Objects.equals(this.oracleRdbms, discoverConnectionProfileRequest.oracleRdbms) &&
        Objects.equals(this.recursionDepth, discoverConnectionProfileRequest.recursionDepth) &&
        Objects.equals(this.recursive, discoverConnectionProfileRequest.recursive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionProfile, connectionProfileName, mysqlRdbms, oracleRdbms, recursionDepth, recursive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoverConnectionProfileRequest {\n");
    sb.append("    connectionProfile: ").append(toIndentedString(connectionProfile)).append("\n");
    sb.append("    connectionProfileName: ").append(toIndentedString(connectionProfileName)).append("\n");
    sb.append("    mysqlRdbms: ").append(toIndentedString(mysqlRdbms)).append("\n");
    sb.append("    oracleRdbms: ").append(toIndentedString(oracleRdbms)).append("\n");
    sb.append("    recursionDepth: ").append(toIndentedString(recursionDepth)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionProfile");
    openapiFields.add("connectionProfileName");
    openapiFields.add("mysqlRdbms");
    openapiFields.add("oracleRdbms");
    openapiFields.add("recursionDepth");
    openapiFields.add("recursive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoverConnectionProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoverConnectionProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoverConnectionProfileRequest is not found in the empty JSON string", DiscoverConnectionProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoverConnectionProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoverConnectionProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectionProfile`
      if (jsonObj.get("connectionProfile") != null && !jsonObj.get("connectionProfile").isJsonNull()) {
        ConnectionProfile.validateJsonElement(jsonObj.get("connectionProfile"));
      }
      if ((jsonObj.get("connectionProfileName") != null && !jsonObj.get("connectionProfileName").isJsonNull()) && !jsonObj.get("connectionProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionProfileName").toString()));
      }
      // validate the optional field `mysqlRdbms`
      if (jsonObj.get("mysqlRdbms") != null && !jsonObj.get("mysqlRdbms").isJsonNull()) {
        MysqlRdbms.validateJsonElement(jsonObj.get("mysqlRdbms"));
      }
      // validate the optional field `oracleRdbms`
      if (jsonObj.get("oracleRdbms") != null && !jsonObj.get("oracleRdbms").isJsonNull()) {
        OracleRdbms.validateJsonElement(jsonObj.get("oracleRdbms"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoverConnectionProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoverConnectionProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoverConnectionProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoverConnectionProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoverConnectionProfileRequest>() {
           @Override
           public void write(JsonWriter out, DiscoverConnectionProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoverConnectionProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoverConnectionProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoverConnectionProfileRequest
   * @throws IOException if the JSON string is invalid with respect to DiscoverConnectionProfileRequest
   */
  public static DiscoverConnectionProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoverConnectionProfileRequest.class);
  }

  /**
   * Convert an instance of DiscoverConnectionProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

