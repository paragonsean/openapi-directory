/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ForwardSshTunnelConnectivity;
import org.openapitools.client.model.GcsProfile;
import org.openapitools.client.model.MysqlProfile;
import org.openapitools.client.model.OracleProfile;
import org.openapitools.client.model.PrivateConnectivity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConnectionProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:46.596120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionProfile {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FORWARD_SSH_CONNECTIVITY = "forwardSshConnectivity";
  @SerializedName(SERIALIZED_NAME_FORWARD_SSH_CONNECTIVITY)
  private ForwardSshTunnelConnectivity forwardSshConnectivity;

  public static final String SERIALIZED_NAME_GCS_PROFILE = "gcsProfile";
  @SerializedName(SERIALIZED_NAME_GCS_PROFILE)
  private GcsProfile gcsProfile;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MYSQL_PROFILE = "mysqlProfile";
  @SerializedName(SERIALIZED_NAME_MYSQL_PROFILE)
  private MysqlProfile mysqlProfile;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_CONNECTIVITY = "noConnectivity";
  @SerializedName(SERIALIZED_NAME_NO_CONNECTIVITY)
  private Object noConnectivity;

  public static final String SERIALIZED_NAME_ORACLE_PROFILE = "oracleProfile";
  @SerializedName(SERIALIZED_NAME_ORACLE_PROFILE)
  private OracleProfile oracleProfile;

  public static final String SERIALIZED_NAME_PRIVATE_CONNECTIVITY = "privateConnectivity";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CONNECTIVITY)
  private PrivateConnectivity privateConnectivity;

  public static final String SERIALIZED_NAME_STATIC_SERVICE_IP_CONNECTIVITY = "staticServiceIpConnectivity";
  @SerializedName(SERIALIZED_NAME_STATIC_SERVICE_IP_CONNECTIVITY)
  private Object staticServiceIpConnectivity;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ConnectionProfile() {
  }

  public ConnectionProfile(
     String createTime, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The create time of the resource.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ConnectionProfile displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConnectionProfile forwardSshConnectivity(ForwardSshTunnelConnectivity forwardSshConnectivity) {
    this.forwardSshConnectivity = forwardSshConnectivity;
    return this;
  }

  /**
   * Get forwardSshConnectivity
   * @return forwardSshConnectivity
   */
  @javax.annotation.Nullable
  public ForwardSshTunnelConnectivity getForwardSshConnectivity() {
    return forwardSshConnectivity;
  }

  public void setForwardSshConnectivity(ForwardSshTunnelConnectivity forwardSshConnectivity) {
    this.forwardSshConnectivity = forwardSshConnectivity;
  }


  public ConnectionProfile gcsProfile(GcsProfile gcsProfile) {
    this.gcsProfile = gcsProfile;
    return this;
  }

  /**
   * Get gcsProfile
   * @return gcsProfile
   */
  @javax.annotation.Nullable
  public GcsProfile getGcsProfile() {
    return gcsProfile;
  }

  public void setGcsProfile(GcsProfile gcsProfile) {
    this.gcsProfile = gcsProfile;
  }


  public ConnectionProfile labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ConnectionProfile putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ConnectionProfile mysqlProfile(MysqlProfile mysqlProfile) {
    this.mysqlProfile = mysqlProfile;
    return this;
  }

  /**
   * Get mysqlProfile
   * @return mysqlProfile
   */
  @javax.annotation.Nullable
  public MysqlProfile getMysqlProfile() {
    return mysqlProfile;
  }

  public void setMysqlProfile(MysqlProfile mysqlProfile) {
    this.mysqlProfile = mysqlProfile;
  }


  /**
   * Output only. The resource&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ConnectionProfile noConnectivity(Object noConnectivity) {
    this.noConnectivity = noConnectivity;
    return this;
  }

  /**
   * No connectivity settings.
   * @return noConnectivity
   */
  @javax.annotation.Nullable
  public Object getNoConnectivity() {
    return noConnectivity;
  }

  public void setNoConnectivity(Object noConnectivity) {
    this.noConnectivity = noConnectivity;
  }


  public ConnectionProfile oracleProfile(OracleProfile oracleProfile) {
    this.oracleProfile = oracleProfile;
    return this;
  }

  /**
   * Get oracleProfile
   * @return oracleProfile
   */
  @javax.annotation.Nullable
  public OracleProfile getOracleProfile() {
    return oracleProfile;
  }

  public void setOracleProfile(OracleProfile oracleProfile) {
    this.oracleProfile = oracleProfile;
  }


  public ConnectionProfile privateConnectivity(PrivateConnectivity privateConnectivity) {
    this.privateConnectivity = privateConnectivity;
    return this;
  }

  /**
   * Get privateConnectivity
   * @return privateConnectivity
   */
  @javax.annotation.Nullable
  public PrivateConnectivity getPrivateConnectivity() {
    return privateConnectivity;
  }

  public void setPrivateConnectivity(PrivateConnectivity privateConnectivity) {
    this.privateConnectivity = privateConnectivity;
  }


  public ConnectionProfile staticServiceIpConnectivity(Object staticServiceIpConnectivity) {
    this.staticServiceIpConnectivity = staticServiceIpConnectivity;
    return this;
  }

  /**
   * Static IP address connectivity.
   * @return staticServiceIpConnectivity
   */
  @javax.annotation.Nullable
  public Object getStaticServiceIpConnectivity() {
    return staticServiceIpConnectivity;
  }

  public void setStaticServiceIpConnectivity(Object staticServiceIpConnectivity) {
    this.staticServiceIpConnectivity = staticServiceIpConnectivity;
  }


  /**
   * Output only. The update time of the resource.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionProfile connectionProfile = (ConnectionProfile) o;
    return Objects.equals(this.createTime, connectionProfile.createTime) &&
        Objects.equals(this.displayName, connectionProfile.displayName) &&
        Objects.equals(this.forwardSshConnectivity, connectionProfile.forwardSshConnectivity) &&
        Objects.equals(this.gcsProfile, connectionProfile.gcsProfile) &&
        Objects.equals(this.labels, connectionProfile.labels) &&
        Objects.equals(this.mysqlProfile, connectionProfile.mysqlProfile) &&
        Objects.equals(this.name, connectionProfile.name) &&
        Objects.equals(this.noConnectivity, connectionProfile.noConnectivity) &&
        Objects.equals(this.oracleProfile, connectionProfile.oracleProfile) &&
        Objects.equals(this.privateConnectivity, connectionProfile.privateConnectivity) &&
        Objects.equals(this.staticServiceIpConnectivity, connectionProfile.staticServiceIpConnectivity) &&
        Objects.equals(this.updateTime, connectionProfile.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, displayName, forwardSshConnectivity, gcsProfile, labels, mysqlProfile, name, noConnectivity, oracleProfile, privateConnectivity, staticServiceIpConnectivity, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionProfile {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    forwardSshConnectivity: ").append(toIndentedString(forwardSshConnectivity)).append("\n");
    sb.append("    gcsProfile: ").append(toIndentedString(gcsProfile)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mysqlProfile: ").append(toIndentedString(mysqlProfile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noConnectivity: ").append(toIndentedString(noConnectivity)).append("\n");
    sb.append("    oracleProfile: ").append(toIndentedString(oracleProfile)).append("\n");
    sb.append("    privateConnectivity: ").append(toIndentedString(privateConnectivity)).append("\n");
    sb.append("    staticServiceIpConnectivity: ").append(toIndentedString(staticServiceIpConnectivity)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("forwardSshConnectivity");
    openapiFields.add("gcsProfile");
    openapiFields.add("labels");
    openapiFields.add("mysqlProfile");
    openapiFields.add("name");
    openapiFields.add("noConnectivity");
    openapiFields.add("oracleProfile");
    openapiFields.add("privateConnectivity");
    openapiFields.add("staticServiceIpConnectivity");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionProfile is not found in the empty JSON string", ConnectionProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `forwardSshConnectivity`
      if (jsonObj.get("forwardSshConnectivity") != null && !jsonObj.get("forwardSshConnectivity").isJsonNull()) {
        ForwardSshTunnelConnectivity.validateJsonElement(jsonObj.get("forwardSshConnectivity"));
      }
      // validate the optional field `gcsProfile`
      if (jsonObj.get("gcsProfile") != null && !jsonObj.get("gcsProfile").isJsonNull()) {
        GcsProfile.validateJsonElement(jsonObj.get("gcsProfile"));
      }
      // validate the optional field `mysqlProfile`
      if (jsonObj.get("mysqlProfile") != null && !jsonObj.get("mysqlProfile").isJsonNull()) {
        MysqlProfile.validateJsonElement(jsonObj.get("mysqlProfile"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `oracleProfile`
      if (jsonObj.get("oracleProfile") != null && !jsonObj.get("oracleProfile").isJsonNull()) {
        OracleProfile.validateJsonElement(jsonObj.get("oracleProfile"));
      }
      // validate the optional field `privateConnectivity`
      if (jsonObj.get("privateConnectivity") != null && !jsonObj.get("privateConnectivity").isJsonNull()) {
        PrivateConnectivity.validateJsonElement(jsonObj.get("privateConnectivity"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionProfile>() {
           @Override
           public void write(JsonWriter out, ConnectionProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionProfile
   * @throws IOException if the JSON string is invalid with respect to ConnectionProfile
   */
  public static ConnectionProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionProfile.class);
  }

  /**
   * Convert an instance of ConnectionProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

