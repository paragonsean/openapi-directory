/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Oracle database profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:46.596120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OracleProfile {
  public static final String SERIALIZED_NAME_CONNECTION_ATTRIBUTES = "connectionAttributes";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ATTRIBUTES)
  private Map<String, String> connectionAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_DATABASE_SERVICE = "databaseService";
  @SerializedName(SERIALIZED_NAME_DATABASE_SERVICE)
  private String databaseService;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public OracleProfile() {
  }

  public OracleProfile connectionAttributes(Map<String, String> connectionAttributes) {
    this.connectionAttributes = connectionAttributes;
    return this;
  }

  public OracleProfile putConnectionAttributesItem(String key, String connectionAttributesItem) {
    if (this.connectionAttributes == null) {
      this.connectionAttributes = new HashMap<>();
    }
    this.connectionAttributes.put(key, connectionAttributesItem);
    return this;
  }

  /**
   * Connection string attributes
   * @return connectionAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getConnectionAttributes() {
    return connectionAttributes;
  }

  public void setConnectionAttributes(Map<String, String> connectionAttributes) {
    this.connectionAttributes = connectionAttributes;
  }


  public OracleProfile databaseService(String databaseService) {
    this.databaseService = databaseService;
    return this;
  }

  /**
   * Required. Database for the Oracle connection.
   * @return databaseService
   */
  @javax.annotation.Nullable
  public String getDatabaseService() {
    return databaseService;
  }

  public void setDatabaseService(String databaseService) {
    this.databaseService = databaseService;
  }


  public OracleProfile hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Required. Hostname for the Oracle connection.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public OracleProfile password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Required. Password for the Oracle connection.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public OracleProfile port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Port for the Oracle connection, default value is 1521.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public OracleProfile username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Required. Username for the Oracle connection.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OracleProfile oracleProfile = (OracleProfile) o;
    return Objects.equals(this.connectionAttributes, oracleProfile.connectionAttributes) &&
        Objects.equals(this.databaseService, oracleProfile.databaseService) &&
        Objects.equals(this.hostname, oracleProfile.hostname) &&
        Objects.equals(this.password, oracleProfile.password) &&
        Objects.equals(this.port, oracleProfile.port) &&
        Objects.equals(this.username, oracleProfile.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionAttributes, databaseService, hostname, password, port, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OracleProfile {\n");
    sb.append("    connectionAttributes: ").append(toIndentedString(connectionAttributes)).append("\n");
    sb.append("    databaseService: ").append(toIndentedString(databaseService)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionAttributes");
    openapiFields.add("databaseService");
    openapiFields.add("hostname");
    openapiFields.add("password");
    openapiFields.add("port");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OracleProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OracleProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OracleProfile is not found in the empty JSON string", OracleProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OracleProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OracleProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseService") != null && !jsonObj.get("databaseService").isJsonNull()) && !jsonObj.get("databaseService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseService").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OracleProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OracleProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OracleProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OracleProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<OracleProfile>() {
           @Override
           public void write(JsonWriter out, OracleProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OracleProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OracleProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OracleProfile
   * @throws IOException if the JSON string is invalid with respect to OracleProfile
   */
  public static OracleProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OracleProfile.class);
  }

  /**
   * Convert an instance of OracleProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

