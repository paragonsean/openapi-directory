/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BackfillAllStrategy;
import org.openapitools.client.model.DestinationConfig;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SourceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stream
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:46.596120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Stream {
  public static final String SERIALIZED_NAME_BACKFILL_ALL = "backfillAll";
  @SerializedName(SERIALIZED_NAME_BACKFILL_ALL)
  private BackfillAllStrategy backfillAll;

  public static final String SERIALIZED_NAME_BACKFILL_NONE = "backfillNone";
  @SerializedName(SERIALIZED_NAME_BACKFILL_NONE)
  private Object backfillNone;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOMER_MANAGED_ENCRYPTION_KEY = "customerManagedEncryptionKey";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MANAGED_ENCRYPTION_KEY)
  private String customerManagedEncryptionKey;

  public static final String SERIALIZED_NAME_DESTINATION_CONFIG = "destinationConfig";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONFIG)
  private DestinationConfig destinationConfig;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_CONFIG = "sourceConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONFIG)
  private SourceConfig sourceConfig;

  /**
   * The state of the stream.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATED("CREATED"),
    
    RUNNING("RUNNING"),
    
    PAUSED("PAUSED"),
    
    MAINTENANCE("MAINTENANCE"),
    
    FAILED("FAILED"),
    
    FAILED_PERMANENTLY("FAILED_PERMANENTLY"),
    
    STARTING("STARTING"),
    
    DRAINING("DRAINING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Stream() {
  }

  public Stream(
     String createTime, 
     List<Error> errors, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.errors = errors;
    this.name = name;
    this.updateTime = updateTime;
  }

  public Stream backfillAll(BackfillAllStrategy backfillAll) {
    this.backfillAll = backfillAll;
    return this;
  }

  /**
   * Get backfillAll
   * @return backfillAll
   */
  @javax.annotation.Nullable
  public BackfillAllStrategy getBackfillAll() {
    return backfillAll;
  }

  public void setBackfillAll(BackfillAllStrategy backfillAll) {
    this.backfillAll = backfillAll;
  }


  public Stream backfillNone(Object backfillNone) {
    this.backfillNone = backfillNone;
    return this;
  }

  /**
   * Backfill strategy to disable automatic backfill for the Stream&#39;s objects.
   * @return backfillNone
   */
  @javax.annotation.Nullable
  public Object getBackfillNone() {
    return backfillNone;
  }

  public void setBackfillNone(Object backfillNone) {
    this.backfillNone = backfillNone;
  }


  /**
   * Output only. The creation time of the stream.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Stream customerManagedEncryptionKey(String customerManagedEncryptionKey) {
    this.customerManagedEncryptionKey = customerManagedEncryptionKey;
    return this;
  }

  /**
   * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
   * @return customerManagedEncryptionKey
   */
  @javax.annotation.Nullable
  public String getCustomerManagedEncryptionKey() {
    return customerManagedEncryptionKey;
  }

  public void setCustomerManagedEncryptionKey(String customerManagedEncryptionKey) {
    this.customerManagedEncryptionKey = customerManagedEncryptionKey;
  }


  public Stream destinationConfig(DestinationConfig destinationConfig) {
    this.destinationConfig = destinationConfig;
    return this;
  }

  /**
   * Get destinationConfig
   * @return destinationConfig
   */
  @javax.annotation.Nullable
  public DestinationConfig getDestinationConfig() {
    return destinationConfig;
  }

  public void setDestinationConfig(DestinationConfig destinationConfig) {
    this.destinationConfig = destinationConfig;
  }


  public Stream displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. Errors on the Stream.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }



  public Stream labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Stream putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The stream&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Stream sourceConfig(SourceConfig sourceConfig) {
    this.sourceConfig = sourceConfig;
    return this;
  }

  /**
   * Get sourceConfig
   * @return sourceConfig
   */
  @javax.annotation.Nullable
  public SourceConfig getSourceConfig() {
    return sourceConfig;
  }

  public void setSourceConfig(SourceConfig sourceConfig) {
    this.sourceConfig = sourceConfig;
  }


  public Stream state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the stream.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  /**
   * Output only. The last update time of the stream.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stream stream = (Stream) o;
    return Objects.equals(this.backfillAll, stream.backfillAll) &&
        Objects.equals(this.backfillNone, stream.backfillNone) &&
        Objects.equals(this.createTime, stream.createTime) &&
        Objects.equals(this.customerManagedEncryptionKey, stream.customerManagedEncryptionKey) &&
        Objects.equals(this.destinationConfig, stream.destinationConfig) &&
        Objects.equals(this.displayName, stream.displayName) &&
        Objects.equals(this.errors, stream.errors) &&
        Objects.equals(this.labels, stream.labels) &&
        Objects.equals(this.name, stream.name) &&
        Objects.equals(this.sourceConfig, stream.sourceConfig) &&
        Objects.equals(this.state, stream.state) &&
        Objects.equals(this.updateTime, stream.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backfillAll, backfillNone, createTime, customerManagedEncryptionKey, destinationConfig, displayName, errors, labels, name, sourceConfig, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stream {\n");
    sb.append("    backfillAll: ").append(toIndentedString(backfillAll)).append("\n");
    sb.append("    backfillNone: ").append(toIndentedString(backfillNone)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customerManagedEncryptionKey: ").append(toIndentedString(customerManagedEncryptionKey)).append("\n");
    sb.append("    destinationConfig: ").append(toIndentedString(destinationConfig)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceConfig: ").append(toIndentedString(sourceConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backfillAll");
    openapiFields.add("backfillNone");
    openapiFields.add("createTime");
    openapiFields.add("customerManagedEncryptionKey");
    openapiFields.add("destinationConfig");
    openapiFields.add("displayName");
    openapiFields.add("errors");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("sourceConfig");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stream is not found in the empty JSON string", Stream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backfillAll`
      if (jsonObj.get("backfillAll") != null && !jsonObj.get("backfillAll").isJsonNull()) {
        BackfillAllStrategy.validateJsonElement(jsonObj.get("backfillAll"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("customerManagedEncryptionKey") != null && !jsonObj.get("customerManagedEncryptionKey").isJsonNull()) && !jsonObj.get("customerManagedEncryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerManagedEncryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerManagedEncryptionKey").toString()));
      }
      // validate the optional field `destinationConfig`
      if (jsonObj.get("destinationConfig") != null && !jsonObj.get("destinationConfig").isJsonNull()) {
        DestinationConfig.validateJsonElement(jsonObj.get("destinationConfig"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `sourceConfig`
      if (jsonObj.get("sourceConfig") != null && !jsonObj.get("sourceConfig").isJsonNull()) {
        SourceConfig.validateJsonElement(jsonObj.get("sourceConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stream.class));

       return (TypeAdapter<T>) new TypeAdapter<Stream>() {
           @Override
           public void write(JsonWriter out, Stream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stream
   * @throws IOException if the JSON string is invalid with respect to Stream
   */
  public static Stream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stream.class);
  }

  /**
   * Convert an instance of Stream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

