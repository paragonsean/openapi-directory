/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MysqlTable from './MysqlTable';

/**
 * The MysqlDatabase model module.
 * @module model/MysqlDatabase
 * @version v1alpha1
 */
class MysqlDatabase {
    /**
     * Constructs a new <code>MysqlDatabase</code>.
     * MySQL database.
     * @alias module:model/MysqlDatabase
     */
    constructor() { 
        
        MysqlDatabase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MysqlDatabase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MysqlDatabase} obj Optional instance to populate.
     * @return {module:model/MysqlDatabase} The populated <code>MysqlDatabase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MysqlDatabase();

            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('mysqlTables')) {
                obj['mysqlTables'] = ApiClient.convertToType(data['mysqlTables'], [MysqlTable]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MysqlDatabase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MysqlDatabase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        if (data['mysqlTables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mysqlTables'])) {
                throw new Error("Expected the field `mysqlTables` to be an array in the JSON data but got " + data['mysqlTables']);
            }
            // validate the optional field `mysqlTables` (array)
            for (const item of data['mysqlTables']) {
                MysqlTable.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Database name.
 * @member {String} databaseName
 */
MysqlDatabase.prototype['databaseName'] = undefined;

/**
 * Tables in the database.
 * @member {Array.<module:model/MysqlTable>} mysqlTables
 */
MysqlDatabase.prototype['mysqlTables'] = undefined;






export default MysqlDatabase;

