/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MysqlSslConfig model module.
 * @module model/MysqlSslConfig
 * @version v1alpha1
 */
class MysqlSslConfig {
    /**
     * Constructs a new <code>MysqlSslConfig</code>.
     * MySQL SSL configuration information.
     * @alias module:model/MysqlSslConfig
     */
    constructor() { 
        
        MysqlSslConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MysqlSslConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MysqlSslConfig} obj Optional instance to populate.
     * @return {module:model/MysqlSslConfig} The populated <code>MysqlSslConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MysqlSslConfig();

            if (data.hasOwnProperty('caCertificate')) {
                obj['caCertificate'] = ApiClient.convertToType(data['caCertificate'], 'String');
            }
            if (data.hasOwnProperty('caCertificateSet')) {
                obj['caCertificateSet'] = ApiClient.convertToType(data['caCertificateSet'], 'Boolean');
            }
            if (data.hasOwnProperty('clientCertificate')) {
                obj['clientCertificate'] = ApiClient.convertToType(data['clientCertificate'], 'String');
            }
            if (data.hasOwnProperty('clientCertificateSet')) {
                obj['clientCertificateSet'] = ApiClient.convertToType(data['clientCertificateSet'], 'Boolean');
            }
            if (data.hasOwnProperty('clientKey')) {
                obj['clientKey'] = ApiClient.convertToType(data['clientKey'], 'String');
            }
            if (data.hasOwnProperty('clientKeySet')) {
                obj['clientKeySet'] = ApiClient.convertToType(data['clientKeySet'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MysqlSslConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MysqlSslConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caCertificate'] && !(typeof data['caCertificate'] === 'string' || data['caCertificate'] instanceof String)) {
            throw new Error("Expected the field `caCertificate` to be a primitive type in the JSON string but got " + data['caCertificate']);
        }
        // ensure the json data is a string
        if (data['clientCertificate'] && !(typeof data['clientCertificate'] === 'string' || data['clientCertificate'] instanceof String)) {
            throw new Error("Expected the field `clientCertificate` to be a primitive type in the JSON string but got " + data['clientCertificate']);
        }
        // ensure the json data is a string
        if (data['clientKey'] && !(typeof data['clientKey'] === 'string' || data['clientKey'] instanceof String)) {
            throw new Error("Expected the field `clientKey` to be a primitive type in the JSON string but got " + data['clientKey']);
        }

        return true;
    }


}



/**
 * Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
 * @member {String} caCertificate
 */
MysqlSslConfig.prototype['caCertificate'] = undefined;

/**
 * Output only. Indicates whether the ca_certificate field is set.
 * @member {Boolean} caCertificateSet
 */
MysqlSslConfig.prototype['caCertificateSet'] = undefined;

/**
 * Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
 * @member {String} clientCertificate
 */
MysqlSslConfig.prototype['clientCertificate'] = undefined;

/**
 * Output only. Indicates whether the client_certificate field is set.
 * @member {Boolean} clientCertificateSet
 */
MysqlSslConfig.prototype['clientCertificateSet'] = undefined;

/**
 * Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
 * @member {String} clientKey
 */
MysqlSslConfig.prototype['clientKey'] = undefined;

/**
 * Output only. Indicates whether the client_key field is set.
 * @member {Boolean} clientKeySet
 */
MysqlSslConfig.prototype['clientKeySet'] = undefined;






export default MysqlSslConfig;

