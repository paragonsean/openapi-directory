/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackfillJob from './BackfillJob';
import Error from './Error';
import SourceObjectIdentifier from './SourceObjectIdentifier';

/**
 * The StreamObject model module.
 * @module model/StreamObject
 * @version v1alpha1
 */
class StreamObject {
    /**
     * Constructs a new <code>StreamObject</code>.
     * A specific stream object (e.g a specific DB table).
     * @alias module:model/StreamObject
     */
    constructor() { 
        
        StreamObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamObject} obj Optional instance to populate.
     * @return {module:model/StreamObject} The populated <code>StreamObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamObject();

            if (data.hasOwnProperty('backfillJob')) {
                obj['backfillJob'] = BackfillJob.constructFromObject(data['backfillJob']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sourceObject')) {
                obj['sourceObject'] = SourceObjectIdentifier.constructFromObject(data['sourceObject']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamObject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backfillJob`
        if (data['backfillJob']) { // data not null
          BackfillJob.validateJSON(data['backfillJob']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `sourceObject`
        if (data['sourceObject']) { // data not null
          SourceObjectIdentifier.validateJSON(data['sourceObject']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/BackfillJob} backfillJob
 */
StreamObject.prototype['backfillJob'] = undefined;

/**
 * Output only. The creation time of the object.
 * @member {String} createTime
 */
StreamObject.prototype['createTime'] = undefined;

/**
 * Required. Display name.
 * @member {String} displayName
 */
StreamObject.prototype['displayName'] = undefined;

/**
 * Output only. Active errors on the object.
 * @member {Array.<module:model/Error>} errors
 */
StreamObject.prototype['errors'] = undefined;

/**
 * Output only. The object's name.
 * @member {String} name
 */
StreamObject.prototype['name'] = undefined;

/**
 * @member {module:model/SourceObjectIdentifier} sourceObject
 */
StreamObject.prototype['sourceObject'] = undefined;

/**
 * Output only. The last update time of the object.
 * @member {String} updateTime
 */
StreamObject.prototype['updateTime'] = undefined;






export default StreamObject;

