/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';

/**
 * The BackfillJob model module.
 * @module model/BackfillJob
 * @version v1alpha1
 */
class BackfillJob {
    /**
     * Constructs a new <code>BackfillJob</code>.
     * Represents a backfill job on a specific stream object.
     * @alias module:model/BackfillJob
     */
    constructor() { 
        
        BackfillJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BackfillJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackfillJob} obj Optional instance to populate.
     * @return {module:model/BackfillJob} The populated <code>BackfillJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackfillJob();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('lastEndTime')) {
                obj['lastEndTime'] = ApiClient.convertToType(data['lastEndTime'], 'String');
            }
            if (data.hasOwnProperty('lastStartTime')) {
                obj['lastStartTime'] = ApiClient.convertToType(data['lastStartTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackfillJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackfillJob</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastEndTime'] && !(typeof data['lastEndTime'] === 'string' || data['lastEndTime'] instanceof String)) {
            throw new Error("Expected the field `lastEndTime` to be a primitive type in the JSON string but got " + data['lastEndTime']);
        }
        // ensure the json data is a string
        if (data['lastStartTime'] && !(typeof data['lastStartTime'] === 'string' || data['lastStartTime'] instanceof String)) {
            throw new Error("Expected the field `lastStartTime` to be a primitive type in the JSON string but got " + data['lastStartTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['trigger'] && !(typeof data['trigger'] === 'string' || data['trigger'] instanceof String)) {
            throw new Error("Expected the field `trigger` to be a primitive type in the JSON string but got " + data['trigger']);
        }

        return true;
    }


}



/**
 * Output only. Errors which caused the backfill job to fail.
 * @member {Array.<module:model/Error>} errors
 */
BackfillJob.prototype['errors'] = undefined;

/**
 * Output only. Backfill job's end time.
 * @member {String} lastEndTime
 */
BackfillJob.prototype['lastEndTime'] = undefined;

/**
 * Output only. Backfill job's start time.
 * @member {String} lastStartTime
 */
BackfillJob.prototype['lastStartTime'] = undefined;

/**
 * Backfill job state.
 * @member {module:model/BackfillJob.StateEnum} state
 */
BackfillJob.prototype['state'] = undefined;

/**
 * Backfill job's triggering reason.
 * @member {module:model/BackfillJob.TriggerEnum} trigger
 */
BackfillJob.prototype['trigger'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BackfillJob['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "NOT_STARTED"
     * @const
     */
    "NOT_STARTED": "NOT_STARTED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "UNSUPPORTED"
     * @const
     */
    "UNSUPPORTED": "UNSUPPORTED"
};


/**
 * Allowed values for the <code>trigger</code> property.
 * @enum {String}
 * @readonly
 */
BackfillJob['TriggerEnum'] = {

    /**
     * value: "TRIGGER_UNSPECIFIED"
     * @const
     */
    "TRIGGER_UNSPECIFIED": "TRIGGER_UNSPECIFIED",

    /**
     * value: "AUTOMATIC"
     * @const
     */
    "AUTOMATIC": "AUTOMATIC",

    /**
     * value: "MANUAL"
     * @const
     */
    "MANUAL": "MANUAL"
};



export default BackfillJob;

