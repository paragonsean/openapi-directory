/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationMessage from './ValidationMessage';

/**
 * The Validation model module.
 * @module model/Validation
 * @version v1alpha1
 */
class Validation {
    /**
     * Constructs a new <code>Validation</code>.
     * @alias module:model/Validation
     */
    constructor() { 
        
        Validation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Validation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Validation} obj Optional instance to populate.
     * @return {module:model/Validation} The populated <code>Validation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Validation();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], [ValidationMessage]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Validation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Validation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['message']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['message'])) {
                throw new Error("Expected the field `message` to be an array in the JSON data but got " + data['message']);
            }
            // validate the optional field `message` (array)
            for (const item of data['message']) {
                ValidationMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * A custom code identifying this validation.
 * @member {String} code
 */
Validation.prototype['code'] = undefined;

/**
 * A short description of the validation.
 * @member {String} description
 */
Validation.prototype['description'] = undefined;

/**
 * Messages reflecting the validation results.
 * @member {Array.<module:model/ValidationMessage>} message
 */
Validation.prototype['message'] = undefined;

/**
 * Validation execution status.
 * @member {module:model/Validation.StatusEnum} status
 */
Validation.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Validation['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "NOT_EXECUTED"
     * @const
     */
    "NOT_EXECUTED": "NOT_EXECUTED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "PASSED"
     * @const
     */
    "PASSED": "PASSED"
};



export default Validation;

