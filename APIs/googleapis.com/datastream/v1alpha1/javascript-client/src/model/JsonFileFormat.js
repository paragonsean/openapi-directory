/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonFileFormat model module.
 * @module model/JsonFileFormat
 * @version v1alpha1
 */
class JsonFileFormat {
    /**
     * Constructs a new <code>JsonFileFormat</code>.
     * JSON file format configuration.
     * @alias module:model/JsonFileFormat
     */
    constructor() { 
        
        JsonFileFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonFileFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonFileFormat} obj Optional instance to populate.
     * @return {module:model/JsonFileFormat} The populated <code>JsonFileFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonFileFormat();

            if (data.hasOwnProperty('compression')) {
                obj['compression'] = ApiClient.convertToType(data['compression'], 'String');
            }
            if (data.hasOwnProperty('schemaFileFormat')) {
                obj['schemaFileFormat'] = ApiClient.convertToType(data['schemaFileFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonFileFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonFileFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['compression'] && !(typeof data['compression'] === 'string' || data['compression'] instanceof String)) {
            throw new Error("Expected the field `compression` to be a primitive type in the JSON string but got " + data['compression']);
        }
        // ensure the json data is a string
        if (data['schemaFileFormat'] && !(typeof data['schemaFileFormat'] === 'string' || data['schemaFileFormat'] instanceof String)) {
            throw new Error("Expected the field `schemaFileFormat` to be a primitive type in the JSON string but got " + data['schemaFileFormat']);
        }

        return true;
    }


}



/**
 * Compression of the loaded JSON file.
 * @member {module:model/JsonFileFormat.CompressionEnum} compression
 */
JsonFileFormat.prototype['compression'] = undefined;

/**
 * The schema file format along JSON data files.
 * @member {module:model/JsonFileFormat.SchemaFileFormatEnum} schemaFileFormat
 */
JsonFileFormat.prototype['schemaFileFormat'] = undefined;





/**
 * Allowed values for the <code>compression</code> property.
 * @enum {String}
 * @readonly
 */
JsonFileFormat['CompressionEnum'] = {

    /**
     * value: "JSON_COMPRESSION_UNSPECIFIED"
     * @const
     */
    "JSON_COMPRESSION_UNSPECIFIED": "JSON_COMPRESSION_UNSPECIFIED",

    /**
     * value: "NO_COMPRESSION"
     * @const
     */
    "NO_COMPRESSION": "NO_COMPRESSION",

    /**
     * value: "GZIP"
     * @const
     */
    "GZIP": "GZIP"
};


/**
 * Allowed values for the <code>schemaFileFormat</code> property.
 * @enum {String}
 * @readonly
 */
JsonFileFormat['SchemaFileFormatEnum'] = {

    /**
     * value: "SCHEMA_FILE_FORMAT_UNSPECIFIED"
     * @const
     */
    "SCHEMA_FILE_FORMAT_UNSPECIFIED": "SCHEMA_FILE_FORMAT_UNSPECIFIED",

    /**
     * value: "NO_SCHEMA_FILE"
     * @const
     */
    "NO_SCHEMA_FILE": "NO_SCHEMA_FILE",

    /**
     * value: "AVRO_SCHEMA_FILE"
     * @const
     */
    "AVRO_SCHEMA_FILE": "AVRO_SCHEMA_FILE"
};



export default JsonFileFormat;

