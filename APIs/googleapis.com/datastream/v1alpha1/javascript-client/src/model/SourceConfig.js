/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MysqlSourceConfig from './MysqlSourceConfig';
import OracleSourceConfig from './OracleSourceConfig';

/**
 * The SourceConfig model module.
 * @module model/SourceConfig
 * @version v1alpha1
 */
class SourceConfig {
    /**
     * Constructs a new <code>SourceConfig</code>.
     * The configuration of the stream source.
     * @alias module:model/SourceConfig
     */
    constructor() { 
        
        SourceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceConfig} obj Optional instance to populate.
     * @return {module:model/SourceConfig} The populated <code>SourceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceConfig();

            if (data.hasOwnProperty('mysqlSourceConfig')) {
                obj['mysqlSourceConfig'] = MysqlSourceConfig.constructFromObject(data['mysqlSourceConfig']);
            }
            if (data.hasOwnProperty('oracleSourceConfig')) {
                obj['oracleSourceConfig'] = OracleSourceConfig.constructFromObject(data['oracleSourceConfig']);
            }
            if (data.hasOwnProperty('sourceConnectionProfileName')) {
                obj['sourceConnectionProfileName'] = ApiClient.convertToType(data['sourceConnectionProfileName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `mysqlSourceConfig`
        if (data['mysqlSourceConfig']) { // data not null
          MysqlSourceConfig.validateJSON(data['mysqlSourceConfig']);
        }
        // validate the optional field `oracleSourceConfig`
        if (data['oracleSourceConfig']) { // data not null
          OracleSourceConfig.validateJSON(data['oracleSourceConfig']);
        }
        // ensure the json data is a string
        if (data['sourceConnectionProfileName'] && !(typeof data['sourceConnectionProfileName'] === 'string' || data['sourceConnectionProfileName'] instanceof String)) {
            throw new Error("Expected the field `sourceConnectionProfileName` to be a primitive type in the JSON string but got " + data['sourceConnectionProfileName']);
        }

        return true;
    }


}



/**
 * @member {module:model/MysqlSourceConfig} mysqlSourceConfig
 */
SourceConfig.prototype['mysqlSourceConfig'] = undefined;

/**
 * @member {module:model/OracleSourceConfig} oracleSourceConfig
 */
SourceConfig.prototype['oracleSourceConfig'] = undefined;

/**
 * Required. Source connection profile identifier.
 * @member {String} sourceConnectionProfileName
 */
SourceConfig.prototype['sourceConnectionProfileName'] = undefined;






export default SourceConfig;

