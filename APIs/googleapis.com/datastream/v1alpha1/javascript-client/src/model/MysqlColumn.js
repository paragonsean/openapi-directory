/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MysqlColumn model module.
 * @module model/MysqlColumn
 * @version v1alpha1
 */
class MysqlColumn {
    /**
     * Constructs a new <code>MysqlColumn</code>.
     * MySQL Column.
     * @alias module:model/MysqlColumn
     */
    constructor() { 
        
        MysqlColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MysqlColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MysqlColumn} obj Optional instance to populate.
     * @return {module:model/MysqlColumn} The populated <code>MysqlColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MysqlColumn();

            if (data.hasOwnProperty('collation')) {
                obj['collation'] = ApiClient.convertToType(data['collation'], 'String');
            }
            if (data.hasOwnProperty('columnName')) {
                obj['columnName'] = ApiClient.convertToType(data['columnName'], 'String');
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('ordinalPosition')) {
                obj['ordinalPosition'] = ApiClient.convertToType(data['ordinalPosition'], 'Number');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MysqlColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MysqlColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collation'] && !(typeof data['collation'] === 'string' || data['collation'] instanceof String)) {
            throw new Error("Expected the field `collation` to be a primitive type in the JSON string but got " + data['collation']);
        }
        // ensure the json data is a string
        if (data['columnName'] && !(typeof data['columnName'] === 'string' || data['columnName'] instanceof String)) {
            throw new Error("Expected the field `columnName` to be a primitive type in the JSON string but got " + data['columnName']);
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }

        return true;
    }


}



/**
 * Column collation.
 * @member {String} collation
 */
MysqlColumn.prototype['collation'] = undefined;

/**
 * Column name.
 * @member {String} columnName
 */
MysqlColumn.prototype['columnName'] = undefined;

/**
 * The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
 * @member {String} dataType
 */
MysqlColumn.prototype['dataType'] = undefined;

/**
 * Column length.
 * @member {Number} length
 */
MysqlColumn.prototype['length'] = undefined;

/**
 * Whether or not the column can accept a null value.
 * @member {Boolean} nullable
 */
MysqlColumn.prototype['nullable'] = undefined;

/**
 * The ordinal position of the column in the table.
 * @member {Number} ordinalPosition
 */
MysqlColumn.prototype['ordinalPosition'] = undefined;

/**
 * Whether or not the column represents a primary key.
 * @member {Boolean} primaryKey
 */
MysqlColumn.prototype['primaryKey'] = undefined;






export default MysqlColumn;

