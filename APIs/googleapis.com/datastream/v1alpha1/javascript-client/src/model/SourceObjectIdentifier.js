/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MysqlObjectIdentifier from './MysqlObjectIdentifier';
import OracleObjectIdentifier from './OracleObjectIdentifier';

/**
 * The SourceObjectIdentifier model module.
 * @module model/SourceObjectIdentifier
 * @version v1alpha1
 */
class SourceObjectIdentifier {
    /**
     * Constructs a new <code>SourceObjectIdentifier</code>.
     * Represents an identifier of an object in the data source.
     * @alias module:model/SourceObjectIdentifier
     */
    constructor() { 
        
        SourceObjectIdentifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceObjectIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceObjectIdentifier} obj Optional instance to populate.
     * @return {module:model/SourceObjectIdentifier} The populated <code>SourceObjectIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceObjectIdentifier();

            if (data.hasOwnProperty('mysqlIdentifier')) {
                obj['mysqlIdentifier'] = MysqlObjectIdentifier.constructFromObject(data['mysqlIdentifier']);
            }
            if (data.hasOwnProperty('oracleIdentifier')) {
                obj['oracleIdentifier'] = OracleObjectIdentifier.constructFromObject(data['oracleIdentifier']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceObjectIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceObjectIdentifier</code>.
     */
    static validateJSON(data) {
        // validate the optional field `mysqlIdentifier`
        if (data['mysqlIdentifier']) { // data not null
          MysqlObjectIdentifier.validateJSON(data['mysqlIdentifier']);
        }
        // validate the optional field `oracleIdentifier`
        if (data['oracleIdentifier']) { // data not null
          OracleObjectIdentifier.validateJSON(data['oracleIdentifier']);
        }

        return true;
    }


}



/**
 * @member {module:model/MysqlObjectIdentifier} mysqlIdentifier
 */
SourceObjectIdentifier.prototype['mysqlIdentifier'] = undefined;

/**
 * @member {module:model/OracleObjectIdentifier} oracleIdentifier
 */
SourceObjectIdentifier.prototype['oracleIdentifier'] = undefined;






export default SourceObjectIdentifier;

