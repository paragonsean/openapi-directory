/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MySQL SSL configuration information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MysqlSslConfig {
  public static final String SERIALIZED_NAME_CA_CERTIFICATE = "caCertificate";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE)
  private String caCertificate;

  public static final String SERIALIZED_NAME_CA_CERTIFICATE_SET = "caCertificateSet";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE_SET)
  private Boolean caCertificateSet;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE = "clientCertificate";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE)
  private String clientCertificate;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_SET = "clientCertificateSet";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_SET)
  private Boolean clientCertificateSet;

  public static final String SERIALIZED_NAME_CLIENT_KEY = "clientKey";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY)
  private String clientKey;

  public static final String SERIALIZED_NAME_CLIENT_KEY_SET = "clientKeySet";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY_SET)
  private Boolean clientKeySet;

  public MysqlSslConfig() {
  }

  public MysqlSslConfig(
     Boolean caCertificateSet, 
     Boolean clientCertificateSet, 
     Boolean clientKeySet
  ) {
    this();
    this.caCertificateSet = caCertificateSet;
    this.clientCertificateSet = clientCertificateSet;
    this.clientKeySet = clientKeySet;
  }

  public MysqlSslConfig caCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

  /**
   * Input only. PEM-encoded certificate of the CA that signed the source database server&#39;s certificate.
   * @return caCertificate
   */
  @javax.annotation.Nullable
  public String getCaCertificate() {
    return caCertificate;
  }

  public void setCaCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
  }


  /**
   * Output only. Indicates whether the ca_certificate field is set.
   * @return caCertificateSet
   */
  @javax.annotation.Nullable
  public Boolean getCaCertificateSet() {
    return caCertificateSet;
  }



  public MysqlSslConfig clientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

  /**
   * Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the &#39;client_key&#39; and the &#39;ca_certificate&#39; fields are mandatory.
   * @return clientCertificate
   */
  @javax.annotation.Nullable
  public String getClientCertificate() {
    return clientCertificate;
  }

  public void setClientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
  }


  /**
   * Output only. Indicates whether the client_certificate field is set.
   * @return clientCertificateSet
   */
  @javax.annotation.Nullable
  public Boolean getClientCertificateSet() {
    return clientCertificateSet;
  }



  public MysqlSslConfig clientKey(String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  /**
   * Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the &#39;client_certificate&#39; and the &#39;ca_certificate&#39; fields are mandatory.
   * @return clientKey
   */
  @javax.annotation.Nullable
  public String getClientKey() {
    return clientKey;
  }

  public void setClientKey(String clientKey) {
    this.clientKey = clientKey;
  }


  /**
   * Output only. Indicates whether the client_key field is set.
   * @return clientKeySet
   */
  @javax.annotation.Nullable
  public Boolean getClientKeySet() {
    return clientKeySet;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MysqlSslConfig mysqlSslConfig = (MysqlSslConfig) o;
    return Objects.equals(this.caCertificate, mysqlSslConfig.caCertificate) &&
        Objects.equals(this.caCertificateSet, mysqlSslConfig.caCertificateSet) &&
        Objects.equals(this.clientCertificate, mysqlSslConfig.clientCertificate) &&
        Objects.equals(this.clientCertificateSet, mysqlSslConfig.clientCertificateSet) &&
        Objects.equals(this.clientKey, mysqlSslConfig.clientKey) &&
        Objects.equals(this.clientKeySet, mysqlSslConfig.clientKeySet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caCertificate, caCertificateSet, clientCertificate, clientCertificateSet, clientKey, clientKeySet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MysqlSslConfig {\n");
    sb.append("    caCertificate: ").append(toIndentedString(caCertificate)).append("\n");
    sb.append("    caCertificateSet: ").append(toIndentedString(caCertificateSet)).append("\n");
    sb.append("    clientCertificate: ").append(toIndentedString(clientCertificate)).append("\n");
    sb.append("    clientCertificateSet: ").append(toIndentedString(clientCertificateSet)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    clientKeySet: ").append(toIndentedString(clientKeySet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caCertificate");
    openapiFields.add("caCertificateSet");
    openapiFields.add("clientCertificate");
    openapiFields.add("clientCertificateSet");
    openapiFields.add("clientKey");
    openapiFields.add("clientKeySet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MysqlSslConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MysqlSslConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MysqlSslConfig is not found in the empty JSON string", MysqlSslConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MysqlSslConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MysqlSslConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caCertificate") != null && !jsonObj.get("caCertificate").isJsonNull()) && !jsonObj.get("caCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caCertificate").toString()));
      }
      if ((jsonObj.get("clientCertificate") != null && !jsonObj.get("clientCertificate").isJsonNull()) && !jsonObj.get("clientCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCertificate").toString()));
      }
      if ((jsonObj.get("clientKey") != null && !jsonObj.get("clientKey").isJsonNull()) && !jsonObj.get("clientKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MysqlSslConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MysqlSslConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MysqlSslConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MysqlSslConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<MysqlSslConfig>() {
           @Override
           public void write(JsonWriter out, MysqlSslConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MysqlSslConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MysqlSslConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MysqlSslConfig
   * @throws IOException if the JSON string is invalid with respect to MysqlSslConfig
   */
  public static MysqlSslConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MysqlSslConfig.class);
  }

  /**
   * Convert an instance of MysqlSslConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

