/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackfillJob;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SourceObjectIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specific stream object (e.g a specific DB table).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamObject {
  public static final String SERIALIZED_NAME_BACKFILL_JOB = "backfillJob";
  @SerializedName(SERIALIZED_NAME_BACKFILL_JOB)
  private BackfillJob backfillJob;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_OBJECT = "sourceObject";
  @SerializedName(SERIALIZED_NAME_SOURCE_OBJECT)
  private SourceObjectIdentifier sourceObject;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public StreamObject() {
  }

  public StreamObject(
     String createTime, 
     List<Error> errors, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.errors = errors;
    this.name = name;
    this.updateTime = updateTime;
  }

  public StreamObject backfillJob(BackfillJob backfillJob) {
    this.backfillJob = backfillJob;
    return this;
  }

  /**
   * Get backfillJob
   * @return backfillJob
   */
  @javax.annotation.Nullable
  public BackfillJob getBackfillJob() {
    return backfillJob;
  }

  public void setBackfillJob(BackfillJob backfillJob) {
    this.backfillJob = backfillJob;
  }


  /**
   * Output only. The creation time of the object.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public StreamObject displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. Display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. Active errors on the object.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }



  /**
   * Output only. The object resource&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public StreamObject sourceObject(SourceObjectIdentifier sourceObject) {
    this.sourceObject = sourceObject;
    return this;
  }

  /**
   * Get sourceObject
   * @return sourceObject
   */
  @javax.annotation.Nullable
  public SourceObjectIdentifier getSourceObject() {
    return sourceObject;
  }

  public void setSourceObject(SourceObjectIdentifier sourceObject) {
    this.sourceObject = sourceObject;
  }


  /**
   * Output only. The last update time of the object.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamObject streamObject = (StreamObject) o;
    return Objects.equals(this.backfillJob, streamObject.backfillJob) &&
        Objects.equals(this.createTime, streamObject.createTime) &&
        Objects.equals(this.displayName, streamObject.displayName) &&
        Objects.equals(this.errors, streamObject.errors) &&
        Objects.equals(this.name, streamObject.name) &&
        Objects.equals(this.sourceObject, streamObject.sourceObject) &&
        Objects.equals(this.updateTime, streamObject.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backfillJob, createTime, displayName, errors, name, sourceObject, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamObject {\n");
    sb.append("    backfillJob: ").append(toIndentedString(backfillJob)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceObject: ").append(toIndentedString(sourceObject)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backfillJob");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("errors");
    openapiFields.add("name");
    openapiFields.add("sourceObject");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamObject is not found in the empty JSON string", StreamObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backfillJob`
      if (jsonObj.get("backfillJob") != null && !jsonObj.get("backfillJob").isJsonNull()) {
        BackfillJob.validateJsonElement(jsonObj.get("backfillJob"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `sourceObject`
      if (jsonObj.get("sourceObject") != null && !jsonObj.get("sourceObject").isJsonNull()) {
        SourceObjectIdentifier.validateJsonElement(jsonObj.get("sourceObject"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamObject.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamObject>() {
           @Override
           public void write(JsonWriter out, StreamObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamObject
   * @throws IOException if the JSON string is invalid with respect to StreamObject
   */
  public static StreamObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamObject.class);
  }

  /**
   * Convert an instance of StreamObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

