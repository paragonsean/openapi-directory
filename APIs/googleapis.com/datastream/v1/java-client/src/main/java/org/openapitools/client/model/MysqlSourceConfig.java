/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MysqlRdbms;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MySQL source configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MysqlSourceConfig {
  public static final String SERIALIZED_NAME_EXCLUDE_OBJECTS = "excludeObjects";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_OBJECTS)
  private MysqlRdbms excludeObjects;

  public static final String SERIALIZED_NAME_INCLUDE_OBJECTS = "includeObjects";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OBJECTS)
  private MysqlRdbms includeObjects;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_BACKFILL_TASKS = "maxConcurrentBackfillTasks";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_BACKFILL_TASKS)
  private Integer maxConcurrentBackfillTasks;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_CDC_TASKS = "maxConcurrentCdcTasks";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_CDC_TASKS)
  private Integer maxConcurrentCdcTasks;

  public MysqlSourceConfig() {
  }

  public MysqlSourceConfig excludeObjects(MysqlRdbms excludeObjects) {
    this.excludeObjects = excludeObjects;
    return this;
  }

  /**
   * Get excludeObjects
   * @return excludeObjects
   */
  @javax.annotation.Nullable
  public MysqlRdbms getExcludeObjects() {
    return excludeObjects;
  }

  public void setExcludeObjects(MysqlRdbms excludeObjects) {
    this.excludeObjects = excludeObjects;
  }


  public MysqlSourceConfig includeObjects(MysqlRdbms includeObjects) {
    this.includeObjects = includeObjects;
    return this;
  }

  /**
   * Get includeObjects
   * @return includeObjects
   */
  @javax.annotation.Nullable
  public MysqlRdbms getIncludeObjects() {
    return includeObjects;
  }

  public void setIncludeObjects(MysqlRdbms includeObjects) {
    this.includeObjects = includeObjects;
  }


  public MysqlSourceConfig maxConcurrentBackfillTasks(Integer maxConcurrentBackfillTasks) {
    this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
    return this;
  }

  /**
   * Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system&#39;s default value will be used.
   * @return maxConcurrentBackfillTasks
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentBackfillTasks() {
    return maxConcurrentBackfillTasks;
  }

  public void setMaxConcurrentBackfillTasks(Integer maxConcurrentBackfillTasks) {
    this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
  }


  public MysqlSourceConfig maxConcurrentCdcTasks(Integer maxConcurrentCdcTasks) {
    this.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
    return this;
  }

  /**
   * Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system&#39;s default value will be used.
   * @return maxConcurrentCdcTasks
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentCdcTasks() {
    return maxConcurrentCdcTasks;
  }

  public void setMaxConcurrentCdcTasks(Integer maxConcurrentCdcTasks) {
    this.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MysqlSourceConfig mysqlSourceConfig = (MysqlSourceConfig) o;
    return Objects.equals(this.excludeObjects, mysqlSourceConfig.excludeObjects) &&
        Objects.equals(this.includeObjects, mysqlSourceConfig.includeObjects) &&
        Objects.equals(this.maxConcurrentBackfillTasks, mysqlSourceConfig.maxConcurrentBackfillTasks) &&
        Objects.equals(this.maxConcurrentCdcTasks, mysqlSourceConfig.maxConcurrentCdcTasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeObjects, includeObjects, maxConcurrentBackfillTasks, maxConcurrentCdcTasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MysqlSourceConfig {\n");
    sb.append("    excludeObjects: ").append(toIndentedString(excludeObjects)).append("\n");
    sb.append("    includeObjects: ").append(toIndentedString(includeObjects)).append("\n");
    sb.append("    maxConcurrentBackfillTasks: ").append(toIndentedString(maxConcurrentBackfillTasks)).append("\n");
    sb.append("    maxConcurrentCdcTasks: ").append(toIndentedString(maxConcurrentCdcTasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludeObjects");
    openapiFields.add("includeObjects");
    openapiFields.add("maxConcurrentBackfillTasks");
    openapiFields.add("maxConcurrentCdcTasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MysqlSourceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MysqlSourceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MysqlSourceConfig is not found in the empty JSON string", MysqlSourceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MysqlSourceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MysqlSourceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `excludeObjects`
      if (jsonObj.get("excludeObjects") != null && !jsonObj.get("excludeObjects").isJsonNull()) {
        MysqlRdbms.validateJsonElement(jsonObj.get("excludeObjects"));
      }
      // validate the optional field `includeObjects`
      if (jsonObj.get("includeObjects") != null && !jsonObj.get("includeObjects").isJsonNull()) {
        MysqlRdbms.validateJsonElement(jsonObj.get("includeObjects"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MysqlSourceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MysqlSourceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MysqlSourceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MysqlSourceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<MysqlSourceConfig>() {
           @Override
           public void write(JsonWriter out, MysqlSourceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MysqlSourceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MysqlSourceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MysqlSourceConfig
   * @throws IOException if the JSON string is invalid with respect to MysqlSourceConfig
   */
  public static MysqlSourceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MysqlSourceConfig.class);
  }

  /**
   * Convert an instance of MysqlSourceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

