/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SQLServer Column.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlServerColumn {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_NULLABLE = "nullable";
  @SerializedName(SERIALIZED_NAME_NULLABLE)
  private Boolean nullable;

  public static final String SERIALIZED_NAME_ORDINAL_POSITION = "ordinalPosition";
  @SerializedName(SERIALIZED_NAME_ORDINAL_POSITION)
  private Integer ordinalPosition;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private Boolean primaryKey;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Integer scale;

  public SqlServerColumn() {
  }

  public SqlServerColumn column(String column) {
    this.column = column;
    return this;
  }

  /**
   * Column name.
   * @return column
   */
  @javax.annotation.Nullable
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public SqlServerColumn dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * The SQLServer data type.
   * @return dataType
   */
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public SqlServerColumn length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Column length.
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public SqlServerColumn nullable(Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

  /**
   * Whether or not the column can accept a null value.
   * @return nullable
   */
  @javax.annotation.Nullable
  public Boolean getNullable() {
    return nullable;
  }

  public void setNullable(Boolean nullable) {
    this.nullable = nullable;
  }


  public SqlServerColumn ordinalPosition(Integer ordinalPosition) {
    this.ordinalPosition = ordinalPosition;
    return this;
  }

  /**
   * The ordinal position of the column in the table.
   * @return ordinalPosition
   */
  @javax.annotation.Nullable
  public Integer getOrdinalPosition() {
    return ordinalPosition;
  }

  public void setOrdinalPosition(Integer ordinalPosition) {
    this.ordinalPosition = ordinalPosition;
  }


  public SqlServerColumn precision(Integer precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Column precision.
   * @return precision
   */
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public SqlServerColumn primaryKey(Boolean primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  /**
   * Whether or not the column represents a primary key.
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(Boolean primaryKey) {
    this.primaryKey = primaryKey;
  }


  public SqlServerColumn scale(Integer scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Column scale.
   * @return scale
   */
  @javax.annotation.Nullable
  public Integer getScale() {
    return scale;
  }

  public void setScale(Integer scale) {
    this.scale = scale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlServerColumn sqlServerColumn = (SqlServerColumn) o;
    return Objects.equals(this.column, sqlServerColumn.column) &&
        Objects.equals(this.dataType, sqlServerColumn.dataType) &&
        Objects.equals(this.length, sqlServerColumn.length) &&
        Objects.equals(this.nullable, sqlServerColumn.nullable) &&
        Objects.equals(this.ordinalPosition, sqlServerColumn.ordinalPosition) &&
        Objects.equals(this.precision, sqlServerColumn.precision) &&
        Objects.equals(this.primaryKey, sqlServerColumn.primaryKey) &&
        Objects.equals(this.scale, sqlServerColumn.scale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, dataType, length, nullable, ordinalPosition, precision, primaryKey, scale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlServerColumn {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    nullable: ").append(toIndentedString(nullable)).append("\n");
    sb.append("    ordinalPosition: ").append(toIndentedString(ordinalPosition)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("dataType");
    openapiFields.add("length");
    openapiFields.add("nullable");
    openapiFields.add("ordinalPosition");
    openapiFields.add("precision");
    openapiFields.add("primaryKey");
    openapiFields.add("scale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlServerColumn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlServerColumn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlServerColumn is not found in the empty JSON string", SqlServerColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlServerColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlServerColumn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlServerColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlServerColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlServerColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlServerColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlServerColumn>() {
           @Override
           public void write(JsonWriter out, SqlServerColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlServerColumn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlServerColumn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlServerColumn
   * @throws IOException if the JSON string is invalid with respect to SqlServerColumn
   */
  public static SqlServerColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlServerColumn.class);
  }

  /**
   * Convert an instance of SqlServerColumn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

