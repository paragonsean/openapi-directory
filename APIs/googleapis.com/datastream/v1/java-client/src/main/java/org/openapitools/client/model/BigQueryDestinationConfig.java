/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SingleTargetDataset;
import org.openapitools.client.model.SourceHierarchyDatasets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigQuery destination configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigQueryDestinationConfig {
  public static final String SERIALIZED_NAME_DATA_FRESHNESS = "dataFreshness";
  @SerializedName(SERIALIZED_NAME_DATA_FRESHNESS)
  private String dataFreshness;

  public static final String SERIALIZED_NAME_SINGLE_TARGET_DATASET = "singleTargetDataset";
  @SerializedName(SERIALIZED_NAME_SINGLE_TARGET_DATASET)
  private SingleTargetDataset singleTargetDataset;

  public static final String SERIALIZED_NAME_SOURCE_HIERARCHY_DATASETS = "sourceHierarchyDatasets";
  @SerializedName(SERIALIZED_NAME_SOURCE_HIERARCHY_DATASETS)
  private SourceHierarchyDatasets sourceHierarchyDatasets;

  public BigQueryDestinationConfig() {
  }

  public BigQueryDestinationConfig dataFreshness(String dataFreshness) {
    this.dataFreshness = dataFreshness;
    return this;
  }

  /**
   * The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
   * @return dataFreshness
   */
  @javax.annotation.Nullable
  public String getDataFreshness() {
    return dataFreshness;
  }

  public void setDataFreshness(String dataFreshness) {
    this.dataFreshness = dataFreshness;
  }


  public BigQueryDestinationConfig singleTargetDataset(SingleTargetDataset singleTargetDataset) {
    this.singleTargetDataset = singleTargetDataset;
    return this;
  }

  /**
   * Get singleTargetDataset
   * @return singleTargetDataset
   */
  @javax.annotation.Nullable
  public SingleTargetDataset getSingleTargetDataset() {
    return singleTargetDataset;
  }

  public void setSingleTargetDataset(SingleTargetDataset singleTargetDataset) {
    this.singleTargetDataset = singleTargetDataset;
  }


  public BigQueryDestinationConfig sourceHierarchyDatasets(SourceHierarchyDatasets sourceHierarchyDatasets) {
    this.sourceHierarchyDatasets = sourceHierarchyDatasets;
    return this;
  }

  /**
   * Get sourceHierarchyDatasets
   * @return sourceHierarchyDatasets
   */
  @javax.annotation.Nullable
  public SourceHierarchyDatasets getSourceHierarchyDatasets() {
    return sourceHierarchyDatasets;
  }

  public void setSourceHierarchyDatasets(SourceHierarchyDatasets sourceHierarchyDatasets) {
    this.sourceHierarchyDatasets = sourceHierarchyDatasets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigQueryDestinationConfig bigQueryDestinationConfig = (BigQueryDestinationConfig) o;
    return Objects.equals(this.dataFreshness, bigQueryDestinationConfig.dataFreshness) &&
        Objects.equals(this.singleTargetDataset, bigQueryDestinationConfig.singleTargetDataset) &&
        Objects.equals(this.sourceHierarchyDatasets, bigQueryDestinationConfig.sourceHierarchyDatasets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFreshness, singleTargetDataset, sourceHierarchyDatasets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigQueryDestinationConfig {\n");
    sb.append("    dataFreshness: ").append(toIndentedString(dataFreshness)).append("\n");
    sb.append("    singleTargetDataset: ").append(toIndentedString(singleTargetDataset)).append("\n");
    sb.append("    sourceHierarchyDatasets: ").append(toIndentedString(sourceHierarchyDatasets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataFreshness");
    openapiFields.add("singleTargetDataset");
    openapiFields.add("sourceHierarchyDatasets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigQueryDestinationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigQueryDestinationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigQueryDestinationConfig is not found in the empty JSON string", BigQueryDestinationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigQueryDestinationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigQueryDestinationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataFreshness") != null && !jsonObj.get("dataFreshness").isJsonNull()) && !jsonObj.get("dataFreshness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFreshness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFreshness").toString()));
      }
      // validate the optional field `singleTargetDataset`
      if (jsonObj.get("singleTargetDataset") != null && !jsonObj.get("singleTargetDataset").isJsonNull()) {
        SingleTargetDataset.validateJsonElement(jsonObj.get("singleTargetDataset"));
      }
      // validate the optional field `sourceHierarchyDatasets`
      if (jsonObj.get("sourceHierarchyDatasets") != null && !jsonObj.get("sourceHierarchyDatasets").isJsonNull()) {
        SourceHierarchyDatasets.validateJsonElement(jsonObj.get("sourceHierarchyDatasets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigQueryDestinationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigQueryDestinationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigQueryDestinationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigQueryDestinationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BigQueryDestinationConfig>() {
           @Override
           public void write(JsonWriter out, BigQueryDestinationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigQueryDestinationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigQueryDestinationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigQueryDestinationConfig
   * @throws IOException if the JSON string is invalid with respect to BigQueryDestinationConfig
   */
  public static BigQueryDestinationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigQueryDestinationConfig.class);
  }

  /**
   * Convert an instance of BigQueryDestinationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

