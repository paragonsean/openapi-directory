/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PostgresqlRdbms;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostgreSQL data source configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostgresqlSourceConfig {
  public static final String SERIALIZED_NAME_EXCLUDE_OBJECTS = "excludeObjects";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_OBJECTS)
  private PostgresqlRdbms excludeObjects;

  public static final String SERIALIZED_NAME_INCLUDE_OBJECTS = "includeObjects";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OBJECTS)
  private PostgresqlRdbms includeObjects;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_BACKFILL_TASKS = "maxConcurrentBackfillTasks";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_BACKFILL_TASKS)
  private Integer maxConcurrentBackfillTasks;

  public static final String SERIALIZED_NAME_PUBLICATION = "publication";
  @SerializedName(SERIALIZED_NAME_PUBLICATION)
  private String publication;

  public static final String SERIALIZED_NAME_REPLICATION_SLOT = "replicationSlot";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SLOT)
  private String replicationSlot;

  public PostgresqlSourceConfig() {
  }

  public PostgresqlSourceConfig excludeObjects(PostgresqlRdbms excludeObjects) {
    this.excludeObjects = excludeObjects;
    return this;
  }

  /**
   * Get excludeObjects
   * @return excludeObjects
   */
  @javax.annotation.Nullable
  public PostgresqlRdbms getExcludeObjects() {
    return excludeObjects;
  }

  public void setExcludeObjects(PostgresqlRdbms excludeObjects) {
    this.excludeObjects = excludeObjects;
  }


  public PostgresqlSourceConfig includeObjects(PostgresqlRdbms includeObjects) {
    this.includeObjects = includeObjects;
    return this;
  }

  /**
   * Get includeObjects
   * @return includeObjects
   */
  @javax.annotation.Nullable
  public PostgresqlRdbms getIncludeObjects() {
    return includeObjects;
  }

  public void setIncludeObjects(PostgresqlRdbms includeObjects) {
    this.includeObjects = includeObjects;
  }


  public PostgresqlSourceConfig maxConcurrentBackfillTasks(Integer maxConcurrentBackfillTasks) {
    this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
    return this;
  }

  /**
   * Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system&#39;s default value will be used.
   * @return maxConcurrentBackfillTasks
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentBackfillTasks() {
    return maxConcurrentBackfillTasks;
  }

  public void setMaxConcurrentBackfillTasks(Integer maxConcurrentBackfillTasks) {
    this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
  }


  public PostgresqlSourceConfig publication(String publication) {
    this.publication = publication;
    return this;
  }

  /**
   * Required. The name of the publication that includes the set of all tables that are defined in the stream&#39;s include_objects.
   * @return publication
   */
  @javax.annotation.Nullable
  public String getPublication() {
    return publication;
  }

  public void setPublication(String publication) {
    this.publication = publication;
  }


  public PostgresqlSourceConfig replicationSlot(String replicationSlot) {
    this.replicationSlot = replicationSlot;
    return this;
  }

  /**
   * Required. Immutable. The name of the logical replication slot that&#39;s configured with the pgoutput plugin.
   * @return replicationSlot
   */
  @javax.annotation.Nullable
  public String getReplicationSlot() {
    return replicationSlot;
  }

  public void setReplicationSlot(String replicationSlot) {
    this.replicationSlot = replicationSlot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostgresqlSourceConfig postgresqlSourceConfig = (PostgresqlSourceConfig) o;
    return Objects.equals(this.excludeObjects, postgresqlSourceConfig.excludeObjects) &&
        Objects.equals(this.includeObjects, postgresqlSourceConfig.includeObjects) &&
        Objects.equals(this.maxConcurrentBackfillTasks, postgresqlSourceConfig.maxConcurrentBackfillTasks) &&
        Objects.equals(this.publication, postgresqlSourceConfig.publication) &&
        Objects.equals(this.replicationSlot, postgresqlSourceConfig.replicationSlot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeObjects, includeObjects, maxConcurrentBackfillTasks, publication, replicationSlot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostgresqlSourceConfig {\n");
    sb.append("    excludeObjects: ").append(toIndentedString(excludeObjects)).append("\n");
    sb.append("    includeObjects: ").append(toIndentedString(includeObjects)).append("\n");
    sb.append("    maxConcurrentBackfillTasks: ").append(toIndentedString(maxConcurrentBackfillTasks)).append("\n");
    sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
    sb.append("    replicationSlot: ").append(toIndentedString(replicationSlot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludeObjects");
    openapiFields.add("includeObjects");
    openapiFields.add("maxConcurrentBackfillTasks");
    openapiFields.add("publication");
    openapiFields.add("replicationSlot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostgresqlSourceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostgresqlSourceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostgresqlSourceConfig is not found in the empty JSON string", PostgresqlSourceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostgresqlSourceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostgresqlSourceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `excludeObjects`
      if (jsonObj.get("excludeObjects") != null && !jsonObj.get("excludeObjects").isJsonNull()) {
        PostgresqlRdbms.validateJsonElement(jsonObj.get("excludeObjects"));
      }
      // validate the optional field `includeObjects`
      if (jsonObj.get("includeObjects") != null && !jsonObj.get("includeObjects").isJsonNull()) {
        PostgresqlRdbms.validateJsonElement(jsonObj.get("includeObjects"));
      }
      if ((jsonObj.get("publication") != null && !jsonObj.get("publication").isJsonNull()) && !jsonObj.get("publication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publication").toString()));
      }
      if ((jsonObj.get("replicationSlot") != null && !jsonObj.get("replicationSlot").isJsonNull()) && !jsonObj.get("replicationSlot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationSlot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationSlot").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostgresqlSourceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostgresqlSourceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostgresqlSourceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostgresqlSourceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PostgresqlSourceConfig>() {
           @Override
           public void write(JsonWriter out, PostgresqlSourceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostgresqlSourceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostgresqlSourceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostgresqlSourceConfig
   * @throws IOException if the JSON string is invalid with respect to PostgresqlSourceConfig
   */
  public static PostgresqlSourceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostgresqlSourceConfig.class);
  }

  /**
   * Convert an instance of PostgresqlSourceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

