/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MysqlObjectIdentifier;
import org.openapitools.client.model.OracleObjectIdentifier;
import org.openapitools.client.model.PostgresqlObjectIdentifier;
import org.openapitools.client.model.SqlServerObjectIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an identifier of an object in the data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:48.096024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceObjectIdentifier {
  public static final String SERIALIZED_NAME_MYSQL_IDENTIFIER = "mysqlIdentifier";
  @SerializedName(SERIALIZED_NAME_MYSQL_IDENTIFIER)
  private MysqlObjectIdentifier mysqlIdentifier;

  public static final String SERIALIZED_NAME_ORACLE_IDENTIFIER = "oracleIdentifier";
  @SerializedName(SERIALIZED_NAME_ORACLE_IDENTIFIER)
  private OracleObjectIdentifier oracleIdentifier;

  public static final String SERIALIZED_NAME_POSTGRESQL_IDENTIFIER = "postgresqlIdentifier";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_IDENTIFIER)
  private PostgresqlObjectIdentifier postgresqlIdentifier;

  public static final String SERIALIZED_NAME_SQL_SERVER_IDENTIFIER = "sqlServerIdentifier";
  @SerializedName(SERIALIZED_NAME_SQL_SERVER_IDENTIFIER)
  private SqlServerObjectIdentifier sqlServerIdentifier;

  public SourceObjectIdentifier() {
  }

  public SourceObjectIdentifier mysqlIdentifier(MysqlObjectIdentifier mysqlIdentifier) {
    this.mysqlIdentifier = mysqlIdentifier;
    return this;
  }

  /**
   * Get mysqlIdentifier
   * @return mysqlIdentifier
   */
  @javax.annotation.Nullable
  public MysqlObjectIdentifier getMysqlIdentifier() {
    return mysqlIdentifier;
  }

  public void setMysqlIdentifier(MysqlObjectIdentifier mysqlIdentifier) {
    this.mysqlIdentifier = mysqlIdentifier;
  }


  public SourceObjectIdentifier oracleIdentifier(OracleObjectIdentifier oracleIdentifier) {
    this.oracleIdentifier = oracleIdentifier;
    return this;
  }

  /**
   * Get oracleIdentifier
   * @return oracleIdentifier
   */
  @javax.annotation.Nullable
  public OracleObjectIdentifier getOracleIdentifier() {
    return oracleIdentifier;
  }

  public void setOracleIdentifier(OracleObjectIdentifier oracleIdentifier) {
    this.oracleIdentifier = oracleIdentifier;
  }


  public SourceObjectIdentifier postgresqlIdentifier(PostgresqlObjectIdentifier postgresqlIdentifier) {
    this.postgresqlIdentifier = postgresqlIdentifier;
    return this;
  }

  /**
   * Get postgresqlIdentifier
   * @return postgresqlIdentifier
   */
  @javax.annotation.Nullable
  public PostgresqlObjectIdentifier getPostgresqlIdentifier() {
    return postgresqlIdentifier;
  }

  public void setPostgresqlIdentifier(PostgresqlObjectIdentifier postgresqlIdentifier) {
    this.postgresqlIdentifier = postgresqlIdentifier;
  }


  public SourceObjectIdentifier sqlServerIdentifier(SqlServerObjectIdentifier sqlServerIdentifier) {
    this.sqlServerIdentifier = sqlServerIdentifier;
    return this;
  }

  /**
   * Get sqlServerIdentifier
   * @return sqlServerIdentifier
   */
  @javax.annotation.Nullable
  public SqlServerObjectIdentifier getSqlServerIdentifier() {
    return sqlServerIdentifier;
  }

  public void setSqlServerIdentifier(SqlServerObjectIdentifier sqlServerIdentifier) {
    this.sqlServerIdentifier = sqlServerIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceObjectIdentifier sourceObjectIdentifier = (SourceObjectIdentifier) o;
    return Objects.equals(this.mysqlIdentifier, sourceObjectIdentifier.mysqlIdentifier) &&
        Objects.equals(this.oracleIdentifier, sourceObjectIdentifier.oracleIdentifier) &&
        Objects.equals(this.postgresqlIdentifier, sourceObjectIdentifier.postgresqlIdentifier) &&
        Objects.equals(this.sqlServerIdentifier, sourceObjectIdentifier.sqlServerIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mysqlIdentifier, oracleIdentifier, postgresqlIdentifier, sqlServerIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceObjectIdentifier {\n");
    sb.append("    mysqlIdentifier: ").append(toIndentedString(mysqlIdentifier)).append("\n");
    sb.append("    oracleIdentifier: ").append(toIndentedString(oracleIdentifier)).append("\n");
    sb.append("    postgresqlIdentifier: ").append(toIndentedString(postgresqlIdentifier)).append("\n");
    sb.append("    sqlServerIdentifier: ").append(toIndentedString(sqlServerIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mysqlIdentifier");
    openapiFields.add("oracleIdentifier");
    openapiFields.add("postgresqlIdentifier");
    openapiFields.add("sqlServerIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceObjectIdentifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceObjectIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceObjectIdentifier is not found in the empty JSON string", SourceObjectIdentifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceObjectIdentifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceObjectIdentifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mysqlIdentifier`
      if (jsonObj.get("mysqlIdentifier") != null && !jsonObj.get("mysqlIdentifier").isJsonNull()) {
        MysqlObjectIdentifier.validateJsonElement(jsonObj.get("mysqlIdentifier"));
      }
      // validate the optional field `oracleIdentifier`
      if (jsonObj.get("oracleIdentifier") != null && !jsonObj.get("oracleIdentifier").isJsonNull()) {
        OracleObjectIdentifier.validateJsonElement(jsonObj.get("oracleIdentifier"));
      }
      // validate the optional field `postgresqlIdentifier`
      if (jsonObj.get("postgresqlIdentifier") != null && !jsonObj.get("postgresqlIdentifier").isJsonNull()) {
        PostgresqlObjectIdentifier.validateJsonElement(jsonObj.get("postgresqlIdentifier"));
      }
      // validate the optional field `sqlServerIdentifier`
      if (jsonObj.get("sqlServerIdentifier") != null && !jsonObj.get("sqlServerIdentifier").isJsonNull()) {
        SqlServerObjectIdentifier.validateJsonElement(jsonObj.get("sqlServerIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceObjectIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceObjectIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceObjectIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceObjectIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceObjectIdentifier>() {
           @Override
           public void write(JsonWriter out, SourceObjectIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceObjectIdentifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceObjectIdentifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceObjectIdentifier
   * @throws IOException if the JSON string is invalid with respect to SourceObjectIdentifier
   */
  public static SourceObjectIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceObjectIdentifier.class);
  }

  /**
   * Convert an instance of SourceObjectIdentifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

