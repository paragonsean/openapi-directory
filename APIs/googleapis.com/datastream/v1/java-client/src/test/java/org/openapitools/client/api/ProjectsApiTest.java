/*
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConnectionProfile;
import org.openapitools.client.model.DiscoverConnectionProfileRequest;
import org.openapitools.client.model.DiscoverConnectionProfileResponse;
import org.openapitools.client.model.FetchStaticIpsResponse;
import org.openapitools.client.model.ListConnectionProfilesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListPrivateConnectionsResponse;
import org.openapitools.client.model.ListRoutesResponse;
import org.openapitools.client.model.ListStreamObjectsResponse;
import org.openapitools.client.model.ListStreamsResponse;
import org.openapitools.client.model.LookupStreamObjectRequest;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PrivateConnection;
import org.openapitools.client.model.Route;
import org.openapitools.client.model.RunStreamRequest;
import org.openapitools.client.model.StartBackfillJobResponse;
import org.openapitools.client.model.StopBackfillJobResponse;
import org.openapitools.client.model.Stream;
import org.openapitools.client.model.StreamObject;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Use this method to create a connection profile in a project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsConnectionProfilesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String connectionProfileId = null;
        Boolean force = null;
        String requestId = null;
        Boolean validateOnly = null;
        ConnectionProfile connectionProfile = null;
        Operation response = api.datastreamProjectsLocationsConnectionProfilesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, connectionProfileId, force, requestId, validateOnly, connectionProfile);
        // TODO: test validations
    }

    /**
     * Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that&#39;s optionally supplied in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsConnectionProfilesDiscoverTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DiscoverConnectionProfileRequest discoverConnectionProfileRequest = null;
        DiscoverConnectionProfileResponse response = api.datastreamProjectsLocationsConnectionProfilesDiscover(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, discoverConnectionProfileRequest);
        // TODO: test validations
    }

    /**
     * Use this method to list connection profiles created in a project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsConnectionProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListConnectionProfilesResponse response = api.datastreamProjectsLocationsConnectionProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * The FetchStaticIps API call exposes the static IP addresses used by Datastream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsFetchStaticIpsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        FetchStaticIpsResponse response = api.datastreamProjectsLocationsFetchStaticIps(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.datastreamProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.datastreamProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.datastreamProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Use this method to create a private connectivity configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsPrivateConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        String privateConnectionId = null;
        String requestId = null;
        PrivateConnection privateConnection = null;
        Operation response = api.datastreamProjectsLocationsPrivateConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, privateConnectionId, requestId, privateConnection);
        // TODO: test validations
    }

    /**
     * Use this method to list private connectivity configurations in a project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsPrivateConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPrivateConnectionsResponse response = api.datastreamProjectsLocationsPrivateConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Use this method to create a route for a private connectivity configuration in a project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsPrivateConnectionsRoutesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String routeId = null;
        Route route = null;
        Operation response = api.datastreamProjectsLocationsPrivateConnectionsRoutesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, routeId, route);
        // TODO: test validations
    }

    /**
     * Use this method to list routes created for a private connectivity configuration in a project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsPrivateConnectionsRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRoutesResponse response = api.datastreamProjectsLocationsPrivateConnectionsRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Use this method to create a stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        String requestId = null;
        String streamId = null;
        Boolean validateOnly = null;
        Stream stream = null;
        Operation response = api.datastreamProjectsLocationsStreamsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, requestId, streamId, validateOnly, stream);
        // TODO: test validations
    }

    /**
     * Use this method to delete a stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Operation response = api.datastreamProjectsLocationsStreamsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Use this method to list streams in a project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListStreamsResponse response = api.datastreamProjectsLocationsStreamsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Use this method to get details about a stream object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsObjectsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StreamObject response = api.datastreamProjectsLocationsStreamsObjectsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Use this method to list the objects of a specific stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsObjectsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListStreamObjectsResponse response = api.datastreamProjectsLocationsStreamsObjectsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Use this method to look up a stream object by its source object identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsObjectsLookupTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LookupStreamObjectRequest lookupStreamObjectRequest = null;
        StreamObject response = api.datastreamProjectsLocationsStreamsObjectsLookup(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, lookupStreamObjectRequest);
        // TODO: test validations
    }

    /**
     * Use this method to start a backfill job for the specified stream object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsObjectsStartBackfillJobTest() throws ApiException {
        String _object = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        StartBackfillJobResponse response = api.datastreamProjectsLocationsStreamsObjectsStartBackfillJob(_object, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Use this method to stop a backfill job for the specified stream object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsObjectsStopBackfillJobTest() throws ApiException {
        String _object = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        StopBackfillJobResponse response = api.datastreamProjectsLocationsStreamsObjectsStopBackfillJob(_object, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Use this method to update the configuration of a stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        String requestId = null;
        String updateMask = null;
        Boolean validateOnly = null;
        Stream stream = null;
        Operation response = api.datastreamProjectsLocationsStreamsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, requestId, updateMask, validateOnly, stream);
        // TODO: test validations
    }

    /**
     * Use this method to start, resume or recover a stream with a non default CDC strategy. NOTE: This feature is currently experimental.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datastreamProjectsLocationsStreamsRunTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunStreamRequest runStreamRequest = null;
        Operation response = api.datastreamProjectsLocationsStreamsRun(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runStreamRequest);
        // TODO: test validations
    }

}
