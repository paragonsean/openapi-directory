/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MysqlColumn from './MysqlColumn';

/**
 * The MysqlTable model module.
 * @module model/MysqlTable
 * @version v1
 */
class MysqlTable {
    /**
     * Constructs a new <code>MysqlTable</code>.
     * MySQL table.
     * @alias module:model/MysqlTable
     */
    constructor() { 
        
        MysqlTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MysqlTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MysqlTable} obj Optional instance to populate.
     * @return {module:model/MysqlTable} The populated <code>MysqlTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MysqlTable();

            if (data.hasOwnProperty('mysqlColumns')) {
                obj['mysqlColumns'] = ApiClient.convertToType(data['mysqlColumns'], [MysqlColumn]);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MysqlTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MysqlTable</code>.
     */
    static validateJSON(data) {
        if (data['mysqlColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mysqlColumns'])) {
                throw new Error("Expected the field `mysqlColumns` to be an array in the JSON data but got " + data['mysqlColumns']);
            }
            // validate the optional field `mysqlColumns` (array)
            for (const item of data['mysqlColumns']) {
                MysqlColumn.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}



/**
 * MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
 * @member {Array.<module:model/MysqlColumn>} mysqlColumns
 */
MysqlTable.prototype['mysqlColumns'] = undefined;

/**
 * Table name.
 * @member {String} table
 */
MysqlTable.prototype['table'] = undefined;






export default MysqlTable;

