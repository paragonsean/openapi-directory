/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackfillAllStrategy from './BackfillAllStrategy';
import DestinationConfig from './DestinationConfig';
import Error from './Error';
import SourceConfig from './SourceConfig';

/**
 * The Stream model module.
 * @module model/Stream
 * @version v1
 */
class Stream {
    /**
     * Constructs a new <code>Stream</code>.
     * A resource representing streaming data from a source to a destination.
     * @alias module:model/Stream
     */
    constructor() { 
        
        Stream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Stream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stream} obj Optional instance to populate.
     * @return {module:model/Stream} The populated <code>Stream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stream();

            if (data.hasOwnProperty('backfillAll')) {
                obj['backfillAll'] = BackfillAllStrategy.constructFromObject(data['backfillAll']);
            }
            if (data.hasOwnProperty('backfillNone')) {
                obj['backfillNone'] = ApiClient.convertToType(data['backfillNone'], Object);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customerManagedEncryptionKey')) {
                obj['customerManagedEncryptionKey'] = ApiClient.convertToType(data['customerManagedEncryptionKey'], 'String');
            }
            if (data.hasOwnProperty('destinationConfig')) {
                obj['destinationConfig'] = DestinationConfig.constructFromObject(data['destinationConfig']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Error]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lastRecoveryTime')) {
                obj['lastRecoveryTime'] = ApiClient.convertToType(data['lastRecoveryTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sourceConfig')) {
                obj['sourceConfig'] = SourceConfig.constructFromObject(data['sourceConfig']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stream</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backfillAll`
        if (data['backfillAll']) { // data not null
          BackfillAllStrategy.validateJSON(data['backfillAll']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['customerManagedEncryptionKey'] && !(typeof data['customerManagedEncryptionKey'] === 'string' || data['customerManagedEncryptionKey'] instanceof String)) {
            throw new Error("Expected the field `customerManagedEncryptionKey` to be a primitive type in the JSON string but got " + data['customerManagedEncryptionKey']);
        }
        // validate the optional field `destinationConfig`
        if (data['destinationConfig']) { // data not null
          DestinationConfig.validateJSON(data['destinationConfig']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Error.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastRecoveryTime'] && !(typeof data['lastRecoveryTime'] === 'string' || data['lastRecoveryTime'] instanceof String)) {
            throw new Error("Expected the field `lastRecoveryTime` to be a primitive type in the JSON string but got " + data['lastRecoveryTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `sourceConfig`
        if (data['sourceConfig']) { // data not null
          SourceConfig.validateJSON(data['sourceConfig']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/BackfillAllStrategy} backfillAll
 */
Stream.prototype['backfillAll'] = undefined;

/**
 * Backfill strategy to disable automatic backfill for the Stream's objects.
 * @member {Object} backfillNone
 */
Stream.prototype['backfillNone'] = undefined;

/**
 * Output only. The creation time of the stream.
 * @member {String} createTime
 */
Stream.prototype['createTime'] = undefined;

/**
 * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
 * @member {String} customerManagedEncryptionKey
 */
Stream.prototype['customerManagedEncryptionKey'] = undefined;

/**
 * @member {module:model/DestinationConfig} destinationConfig
 */
Stream.prototype['destinationConfig'] = undefined;

/**
 * Required. Display name.
 * @member {String} displayName
 */
Stream.prototype['displayName'] = undefined;

/**
 * Output only. Errors on the Stream.
 * @member {Array.<module:model/Error>} errors
 */
Stream.prototype['errors'] = undefined;

/**
 * Labels.
 * @member {Object.<String, String>} labels
 */
Stream.prototype['labels'] = undefined;

/**
 * Output only. If the stream was recovered, the time of the last recovery. Note: This field is currently experimental.
 * @member {String} lastRecoveryTime
 */
Stream.prototype['lastRecoveryTime'] = undefined;

/**
 * Output only. The stream's name.
 * @member {String} name
 */
Stream.prototype['name'] = undefined;

/**
 * @member {module:model/SourceConfig} sourceConfig
 */
Stream.prototype['sourceConfig'] = undefined;

/**
 * The state of the stream.
 * @member {module:model/Stream.StateEnum} state
 */
Stream.prototype['state'] = undefined;

/**
 * Output only. The last update time of the stream.
 * @member {String} updateTime
 */
Stream.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Stream['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "NOT_STARTED"
     * @const
     */
    "NOT_STARTED": "NOT_STARTED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED",

    /**
     * value: "MAINTENANCE"
     * @const
     */
    "MAINTENANCE": "MAINTENANCE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "FAILED_PERMANENTLY"
     * @const
     */
    "FAILED_PERMANENTLY": "FAILED_PERMANENTLY",

    /**
     * value: "STARTING"
     * @const
     */
    "STARTING": "STARTING",

    /**
     * value: "DRAINING"
     * @const
     */
    "DRAINING": "DRAINING"
};



export default Stream;

