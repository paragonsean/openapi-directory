/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SqlServerColumn model module.
 * @module model/SqlServerColumn
 * @version v1
 */
class SqlServerColumn {
    /**
     * Constructs a new <code>SqlServerColumn</code>.
     * SQLServer Column.
     * @alias module:model/SqlServerColumn
     */
    constructor() { 
        
        SqlServerColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlServerColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlServerColumn} obj Optional instance to populate.
     * @return {module:model/SqlServerColumn} The populated <code>SqlServerColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlServerColumn();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('ordinalPosition')) {
                obj['ordinalPosition'] = ApiClient.convertToType(data['ordinalPosition'], 'Number');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], 'Boolean');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlServerColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlServerColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }

        return true;
    }


}



/**
 * Column name.
 * @member {String} column
 */
SqlServerColumn.prototype['column'] = undefined;

/**
 * The SQLServer data type.
 * @member {String} dataType
 */
SqlServerColumn.prototype['dataType'] = undefined;

/**
 * Column length.
 * @member {Number} length
 */
SqlServerColumn.prototype['length'] = undefined;

/**
 * Whether or not the column can accept a null value.
 * @member {Boolean} nullable
 */
SqlServerColumn.prototype['nullable'] = undefined;

/**
 * The ordinal position of the column in the table.
 * @member {Number} ordinalPosition
 */
SqlServerColumn.prototype['ordinalPosition'] = undefined;

/**
 * Column precision.
 * @member {Number} precision
 */
SqlServerColumn.prototype['precision'] = undefined;

/**
 * Whether or not the column represents a primary key.
 * @member {Boolean} primaryKey
 */
SqlServerColumn.prototype['primaryKey'] = undefined;

/**
 * Column scale.
 * @member {Number} scale
 */
SqlServerColumn.prototype['scale'] = undefined;






export default SqlServerColumn;

