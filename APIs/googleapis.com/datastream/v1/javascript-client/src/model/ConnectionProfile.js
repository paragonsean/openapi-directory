/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ForwardSshTunnelConnectivity from './ForwardSshTunnelConnectivity';
import GcsProfile from './GcsProfile';
import MysqlProfile from './MysqlProfile';
import OracleProfile from './OracleProfile';
import PostgresqlProfile from './PostgresqlProfile';
import PrivateConnectivity from './PrivateConnectivity';
import SqlServerProfile from './SqlServerProfile';

/**
 * The ConnectionProfile model module.
 * @module model/ConnectionProfile
 * @version v1
 */
class ConnectionProfile {
    /**
     * Constructs a new <code>ConnectionProfile</code>.
     * A set of reusable connection configurations to be used as a source or destination for a stream.
     * @alias module:model/ConnectionProfile
     */
    constructor() { 
        
        ConnectionProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionProfile} obj Optional instance to populate.
     * @return {module:model/ConnectionProfile} The populated <code>ConnectionProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionProfile();

            if (data.hasOwnProperty('bigqueryProfile')) {
                obj['bigqueryProfile'] = ApiClient.convertToType(data['bigqueryProfile'], Object);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('forwardSshConnectivity')) {
                obj['forwardSshConnectivity'] = ForwardSshTunnelConnectivity.constructFromObject(data['forwardSshConnectivity']);
            }
            if (data.hasOwnProperty('gcsProfile')) {
                obj['gcsProfile'] = GcsProfile.constructFromObject(data['gcsProfile']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mysqlProfile')) {
                obj['mysqlProfile'] = MysqlProfile.constructFromObject(data['mysqlProfile']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oracleProfile')) {
                obj['oracleProfile'] = OracleProfile.constructFromObject(data['oracleProfile']);
            }
            if (data.hasOwnProperty('postgresqlProfile')) {
                obj['postgresqlProfile'] = PostgresqlProfile.constructFromObject(data['postgresqlProfile']);
            }
            if (data.hasOwnProperty('privateConnectivity')) {
                obj['privateConnectivity'] = PrivateConnectivity.constructFromObject(data['privateConnectivity']);
            }
            if (data.hasOwnProperty('sqlServerProfile')) {
                obj['sqlServerProfile'] = SqlServerProfile.constructFromObject(data['sqlServerProfile']);
            }
            if (data.hasOwnProperty('staticServiceIpConnectivity')) {
                obj['staticServiceIpConnectivity'] = ApiClient.convertToType(data['staticServiceIpConnectivity'], Object);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `forwardSshConnectivity`
        if (data['forwardSshConnectivity']) { // data not null
          ForwardSshTunnelConnectivity.validateJSON(data['forwardSshConnectivity']);
        }
        // validate the optional field `gcsProfile`
        if (data['gcsProfile']) { // data not null
          GcsProfile.validateJSON(data['gcsProfile']);
        }
        // validate the optional field `mysqlProfile`
        if (data['mysqlProfile']) { // data not null
          MysqlProfile.validateJSON(data['mysqlProfile']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `oracleProfile`
        if (data['oracleProfile']) { // data not null
          OracleProfile.validateJSON(data['oracleProfile']);
        }
        // validate the optional field `postgresqlProfile`
        if (data['postgresqlProfile']) { // data not null
          PostgresqlProfile.validateJSON(data['postgresqlProfile']);
        }
        // validate the optional field `privateConnectivity`
        if (data['privateConnectivity']) { // data not null
          PrivateConnectivity.validateJSON(data['privateConnectivity']);
        }
        // validate the optional field `sqlServerProfile`
        if (data['sqlServerProfile']) { // data not null
          SqlServerProfile.validateJSON(data['sqlServerProfile']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * BigQuery warehouse profile.
 * @member {Object} bigqueryProfile
 */
ConnectionProfile.prototype['bigqueryProfile'] = undefined;

/**
 * Output only. The create time of the resource.
 * @member {String} createTime
 */
ConnectionProfile.prototype['createTime'] = undefined;

/**
 * Required. Display name.
 * @member {String} displayName
 */
ConnectionProfile.prototype['displayName'] = undefined;

/**
 * @member {module:model/ForwardSshTunnelConnectivity} forwardSshConnectivity
 */
ConnectionProfile.prototype['forwardSshConnectivity'] = undefined;

/**
 * @member {module:model/GcsProfile} gcsProfile
 */
ConnectionProfile.prototype['gcsProfile'] = undefined;

/**
 * Labels.
 * @member {Object.<String, String>} labels
 */
ConnectionProfile.prototype['labels'] = undefined;

/**
 * @member {module:model/MysqlProfile} mysqlProfile
 */
ConnectionProfile.prototype['mysqlProfile'] = undefined;

/**
 * Output only. The resource's name.
 * @member {String} name
 */
ConnectionProfile.prototype['name'] = undefined;

/**
 * @member {module:model/OracleProfile} oracleProfile
 */
ConnectionProfile.prototype['oracleProfile'] = undefined;

/**
 * @member {module:model/PostgresqlProfile} postgresqlProfile
 */
ConnectionProfile.prototype['postgresqlProfile'] = undefined;

/**
 * @member {module:model/PrivateConnectivity} privateConnectivity
 */
ConnectionProfile.prototype['privateConnectivity'] = undefined;

/**
 * @member {module:model/SqlServerProfile} sqlServerProfile
 */
ConnectionProfile.prototype['sqlServerProfile'] = undefined;

/**
 * Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
 * @member {Object} staticServiceIpConnectivity
 */
ConnectionProfile.prototype['staticServiceIpConnectivity'] = undefined;

/**
 * Output only. The update time of the resource.
 * @member {String} updateTime
 */
ConnectionProfile.prototype['updateTime'] = undefined;






export default ConnectionProfile;

