/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostgresqlRdbms from './PostgresqlRdbms';

/**
 * The PostgresqlSourceConfig model module.
 * @module model/PostgresqlSourceConfig
 * @version v1
 */
class PostgresqlSourceConfig {
    /**
     * Constructs a new <code>PostgresqlSourceConfig</code>.
     * PostgreSQL data source configuration
     * @alias module:model/PostgresqlSourceConfig
     */
    constructor() { 
        
        PostgresqlSourceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostgresqlSourceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostgresqlSourceConfig} obj Optional instance to populate.
     * @return {module:model/PostgresqlSourceConfig} The populated <code>PostgresqlSourceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostgresqlSourceConfig();

            if (data.hasOwnProperty('excludeObjects')) {
                obj['excludeObjects'] = PostgresqlRdbms.constructFromObject(data['excludeObjects']);
            }
            if (data.hasOwnProperty('includeObjects')) {
                obj['includeObjects'] = PostgresqlRdbms.constructFromObject(data['includeObjects']);
            }
            if (data.hasOwnProperty('maxConcurrentBackfillTasks')) {
                obj['maxConcurrentBackfillTasks'] = ApiClient.convertToType(data['maxConcurrentBackfillTasks'], 'Number');
            }
            if (data.hasOwnProperty('publication')) {
                obj['publication'] = ApiClient.convertToType(data['publication'], 'String');
            }
            if (data.hasOwnProperty('replicationSlot')) {
                obj['replicationSlot'] = ApiClient.convertToType(data['replicationSlot'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostgresqlSourceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostgresqlSourceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `excludeObjects`
        if (data['excludeObjects']) { // data not null
          PostgresqlRdbms.validateJSON(data['excludeObjects']);
        }
        // validate the optional field `includeObjects`
        if (data['includeObjects']) { // data not null
          PostgresqlRdbms.validateJSON(data['includeObjects']);
        }
        // ensure the json data is a string
        if (data['publication'] && !(typeof data['publication'] === 'string' || data['publication'] instanceof String)) {
            throw new Error("Expected the field `publication` to be a primitive type in the JSON string but got " + data['publication']);
        }
        // ensure the json data is a string
        if (data['replicationSlot'] && !(typeof data['replicationSlot'] === 'string' || data['replicationSlot'] instanceof String)) {
            throw new Error("Expected the field `replicationSlot` to be a primitive type in the JSON string but got " + data['replicationSlot']);
        }

        return true;
    }


}



/**
 * @member {module:model/PostgresqlRdbms} excludeObjects
 */
PostgresqlSourceConfig.prototype['excludeObjects'] = undefined;

/**
 * @member {module:model/PostgresqlRdbms} includeObjects
 */
PostgresqlSourceConfig.prototype['includeObjects'] = undefined;

/**
 * Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
 * @member {Number} maxConcurrentBackfillTasks
 */
PostgresqlSourceConfig.prototype['maxConcurrentBackfillTasks'] = undefined;

/**
 * Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
 * @member {String} publication
 */
PostgresqlSourceConfig.prototype['publication'] = undefined;

/**
 * Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
 * @member {String} replicationSlot
 */
PostgresqlSourceConfig.prototype['replicationSlot'] = undefined;






export default PostgresqlSourceConfig;

