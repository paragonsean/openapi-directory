/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdcStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdcStrategy::OAICdcStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdcStrategy::OAICdcStrategy() {
    this->initializeModel();
}

OAICdcStrategy::~OAICdcStrategy() {}

void OAICdcStrategy::initializeModel() {

    m_most_recent_start_position_isSet = false;
    m_most_recent_start_position_isValid = false;

    m_next_available_start_position_isSet = false;
    m_next_available_start_position_isValid = false;

    m_specific_start_position_isSet = false;
    m_specific_start_position_isValid = false;
}

void OAICdcStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdcStrategy::fromJsonObject(QJsonObject json) {

    m_most_recent_start_position_isValid = ::OpenAPI::fromJsonValue(m_most_recent_start_position, json[QString("mostRecentStartPosition")]);
    m_most_recent_start_position_isSet = !json[QString("mostRecentStartPosition")].isNull() && m_most_recent_start_position_isValid;

    m_next_available_start_position_isValid = ::OpenAPI::fromJsonValue(m_next_available_start_position, json[QString("nextAvailableStartPosition")]);
    m_next_available_start_position_isSet = !json[QString("nextAvailableStartPosition")].isNull() && m_next_available_start_position_isValid;

    m_specific_start_position_isValid = ::OpenAPI::fromJsonValue(m_specific_start_position, json[QString("specificStartPosition")]);
    m_specific_start_position_isSet = !json[QString("specificStartPosition")].isNull() && m_specific_start_position_isValid;
}

QString OAICdcStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdcStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_most_recent_start_position_isSet) {
        obj.insert(QString("mostRecentStartPosition"), ::OpenAPI::toJsonValue(m_most_recent_start_position));
    }
    if (m_next_available_start_position_isSet) {
        obj.insert(QString("nextAvailableStartPosition"), ::OpenAPI::toJsonValue(m_next_available_start_position));
    }
    if (m_specific_start_position.isSet()) {
        obj.insert(QString("specificStartPosition"), ::OpenAPI::toJsonValue(m_specific_start_position));
    }
    return obj;
}

OAIObject OAICdcStrategy::getMostRecentStartPosition() const {
    return m_most_recent_start_position;
}
void OAICdcStrategy::setMostRecentStartPosition(const OAIObject &most_recent_start_position) {
    m_most_recent_start_position = most_recent_start_position;
    m_most_recent_start_position_isSet = true;
}

bool OAICdcStrategy::is_most_recent_start_position_Set() const{
    return m_most_recent_start_position_isSet;
}

bool OAICdcStrategy::is_most_recent_start_position_Valid() const{
    return m_most_recent_start_position_isValid;
}

OAIObject OAICdcStrategy::getNextAvailableStartPosition() const {
    return m_next_available_start_position;
}
void OAICdcStrategy::setNextAvailableStartPosition(const OAIObject &next_available_start_position) {
    m_next_available_start_position = next_available_start_position;
    m_next_available_start_position_isSet = true;
}

bool OAICdcStrategy::is_next_available_start_position_Set() const{
    return m_next_available_start_position_isSet;
}

bool OAICdcStrategy::is_next_available_start_position_Valid() const{
    return m_next_available_start_position_isValid;
}

OAISpecificStartPosition OAICdcStrategy::getSpecificStartPosition() const {
    return m_specific_start_position;
}
void OAICdcStrategy::setSpecificStartPosition(const OAISpecificStartPosition &specific_start_position) {
    m_specific_start_position = specific_start_position;
    m_specific_start_position_isSet = true;
}

bool OAICdcStrategy::is_specific_start_position_Set() const{
    return m_specific_start_position_isSet;
}

bool OAICdcStrategy::is_specific_start_position_Valid() const{
    return m_specific_start_position_isValid;
}

bool OAICdcStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_most_recent_start_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_available_start_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specific_start_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdcStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
