/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMysqlSourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMysqlSourceConfig::OAIMysqlSourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMysqlSourceConfig::OAIMysqlSourceConfig() {
    this->initializeModel();
}

OAIMysqlSourceConfig::~OAIMysqlSourceConfig() {}

void OAIMysqlSourceConfig::initializeModel() {

    m_exclude_objects_isSet = false;
    m_exclude_objects_isValid = false;

    m_include_objects_isSet = false;
    m_include_objects_isValid = false;

    m_max_concurrent_backfill_tasks_isSet = false;
    m_max_concurrent_backfill_tasks_isValid = false;

    m_max_concurrent_cdc_tasks_isSet = false;
    m_max_concurrent_cdc_tasks_isValid = false;
}

void OAIMysqlSourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMysqlSourceConfig::fromJsonObject(QJsonObject json) {

    m_exclude_objects_isValid = ::OpenAPI::fromJsonValue(m_exclude_objects, json[QString("excludeObjects")]);
    m_exclude_objects_isSet = !json[QString("excludeObjects")].isNull() && m_exclude_objects_isValid;

    m_include_objects_isValid = ::OpenAPI::fromJsonValue(m_include_objects, json[QString("includeObjects")]);
    m_include_objects_isSet = !json[QString("includeObjects")].isNull() && m_include_objects_isValid;

    m_max_concurrent_backfill_tasks_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_backfill_tasks, json[QString("maxConcurrentBackfillTasks")]);
    m_max_concurrent_backfill_tasks_isSet = !json[QString("maxConcurrentBackfillTasks")].isNull() && m_max_concurrent_backfill_tasks_isValid;

    m_max_concurrent_cdc_tasks_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_cdc_tasks, json[QString("maxConcurrentCdcTasks")]);
    m_max_concurrent_cdc_tasks_isSet = !json[QString("maxConcurrentCdcTasks")].isNull() && m_max_concurrent_cdc_tasks_isValid;
}

QString OAIMysqlSourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMysqlSourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_objects.isSet()) {
        obj.insert(QString("excludeObjects"), ::OpenAPI::toJsonValue(m_exclude_objects));
    }
    if (m_include_objects.isSet()) {
        obj.insert(QString("includeObjects"), ::OpenAPI::toJsonValue(m_include_objects));
    }
    if (m_max_concurrent_backfill_tasks_isSet) {
        obj.insert(QString("maxConcurrentBackfillTasks"), ::OpenAPI::toJsonValue(m_max_concurrent_backfill_tasks));
    }
    if (m_max_concurrent_cdc_tasks_isSet) {
        obj.insert(QString("maxConcurrentCdcTasks"), ::OpenAPI::toJsonValue(m_max_concurrent_cdc_tasks));
    }
    return obj;
}

OAIMysqlRdbms OAIMysqlSourceConfig::getExcludeObjects() const {
    return m_exclude_objects;
}
void OAIMysqlSourceConfig::setExcludeObjects(const OAIMysqlRdbms &exclude_objects) {
    m_exclude_objects = exclude_objects;
    m_exclude_objects_isSet = true;
}

bool OAIMysqlSourceConfig::is_exclude_objects_Set() const{
    return m_exclude_objects_isSet;
}

bool OAIMysqlSourceConfig::is_exclude_objects_Valid() const{
    return m_exclude_objects_isValid;
}

OAIMysqlRdbms OAIMysqlSourceConfig::getIncludeObjects() const {
    return m_include_objects;
}
void OAIMysqlSourceConfig::setIncludeObjects(const OAIMysqlRdbms &include_objects) {
    m_include_objects = include_objects;
    m_include_objects_isSet = true;
}

bool OAIMysqlSourceConfig::is_include_objects_Set() const{
    return m_include_objects_isSet;
}

bool OAIMysqlSourceConfig::is_include_objects_Valid() const{
    return m_include_objects_isValid;
}

qint32 OAIMysqlSourceConfig::getMaxConcurrentBackfillTasks() const {
    return m_max_concurrent_backfill_tasks;
}
void OAIMysqlSourceConfig::setMaxConcurrentBackfillTasks(const qint32 &max_concurrent_backfill_tasks) {
    m_max_concurrent_backfill_tasks = max_concurrent_backfill_tasks;
    m_max_concurrent_backfill_tasks_isSet = true;
}

bool OAIMysqlSourceConfig::is_max_concurrent_backfill_tasks_Set() const{
    return m_max_concurrent_backfill_tasks_isSet;
}

bool OAIMysqlSourceConfig::is_max_concurrent_backfill_tasks_Valid() const{
    return m_max_concurrent_backfill_tasks_isValid;
}

qint32 OAIMysqlSourceConfig::getMaxConcurrentCdcTasks() const {
    return m_max_concurrent_cdc_tasks;
}
void OAIMysqlSourceConfig::setMaxConcurrentCdcTasks(const qint32 &max_concurrent_cdc_tasks) {
    m_max_concurrent_cdc_tasks = max_concurrent_cdc_tasks;
    m_max_concurrent_cdc_tasks_isSet = true;
}

bool OAIMysqlSourceConfig::is_max_concurrent_cdc_tasks_Set() const{
    return m_max_concurrent_cdc_tasks_isSet;
}

bool OAIMysqlSourceConfig::is_max_concurrent_cdc_tasks_Valid() const{
    return m_max_concurrent_cdc_tasks_isValid;
}

bool OAIMysqlSourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_objects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_backfill_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_cdc_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMysqlSourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
