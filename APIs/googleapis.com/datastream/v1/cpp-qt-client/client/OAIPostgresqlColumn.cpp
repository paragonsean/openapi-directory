/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostgresqlColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostgresqlColumn::OAIPostgresqlColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostgresqlColumn::OAIPostgresqlColumn() {
    this->initializeModel();
}

OAIPostgresqlColumn::~OAIPostgresqlColumn() {}

void OAIPostgresqlColumn::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_ordinal_position_isSet = false;
    m_ordinal_position_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;
}

void OAIPostgresqlColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostgresqlColumn::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_ordinal_position_isValid = ::OpenAPI::fromJsonValue(m_ordinal_position, json[QString("ordinalPosition")]);
    m_ordinal_position_isSet = !json[QString("ordinalPosition")].isNull() && m_ordinal_position_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;
}

QString OAIPostgresqlColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostgresqlColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_ordinal_position_isSet) {
        obj.insert(QString("ordinalPosition"), ::OpenAPI::toJsonValue(m_ordinal_position));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    return obj;
}

QString OAIPostgresqlColumn::getColumn() const {
    return m_column;
}
void OAIPostgresqlColumn::setColumn(const QString &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIPostgresqlColumn::is_column_Set() const{
    return m_column_isSet;
}

bool OAIPostgresqlColumn::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIPostgresqlColumn::getDataType() const {
    return m_data_type;
}
void OAIPostgresqlColumn::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIPostgresqlColumn::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIPostgresqlColumn::is_data_type_Valid() const{
    return m_data_type_isValid;
}

qint32 OAIPostgresqlColumn::getLength() const {
    return m_length;
}
void OAIPostgresqlColumn::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIPostgresqlColumn::is_length_Set() const{
    return m_length_isSet;
}

bool OAIPostgresqlColumn::is_length_Valid() const{
    return m_length_isValid;
}

bool OAIPostgresqlColumn::isNullable() const {
    return m_nullable;
}
void OAIPostgresqlColumn::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAIPostgresqlColumn::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAIPostgresqlColumn::is_nullable_Valid() const{
    return m_nullable_isValid;
}

qint32 OAIPostgresqlColumn::getOrdinalPosition() const {
    return m_ordinal_position;
}
void OAIPostgresqlColumn::setOrdinalPosition(const qint32 &ordinal_position) {
    m_ordinal_position = ordinal_position;
    m_ordinal_position_isSet = true;
}

bool OAIPostgresqlColumn::is_ordinal_position_Set() const{
    return m_ordinal_position_isSet;
}

bool OAIPostgresqlColumn::is_ordinal_position_Valid() const{
    return m_ordinal_position_isValid;
}

qint32 OAIPostgresqlColumn::getPrecision() const {
    return m_precision;
}
void OAIPostgresqlColumn::setPrecision(const qint32 &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIPostgresqlColumn::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIPostgresqlColumn::is_precision_Valid() const{
    return m_precision_isValid;
}

bool OAIPostgresqlColumn::isPrimaryKey() const {
    return m_primary_key;
}
void OAIPostgresqlColumn::setPrimaryKey(const bool &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIPostgresqlColumn::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIPostgresqlColumn::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

qint32 OAIPostgresqlColumn::getScale() const {
    return m_scale;
}
void OAIPostgresqlColumn::setScale(const qint32 &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIPostgresqlColumn::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIPostgresqlColumn::is_scale_Valid() const{
    return m_scale_isValid;
}

bool OAIPostgresqlColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostgresqlColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
