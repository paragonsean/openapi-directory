/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMysqlTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMysqlTable::OAIMysqlTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMysqlTable::OAIMysqlTable() {
    this->initializeModel();
}

OAIMysqlTable::~OAIMysqlTable() {}

void OAIMysqlTable::initializeModel() {

    m_mysql_columns_isSet = false;
    m_mysql_columns_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIMysqlTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMysqlTable::fromJsonObject(QJsonObject json) {

    m_mysql_columns_isValid = ::OpenAPI::fromJsonValue(m_mysql_columns, json[QString("mysqlColumns")]);
    m_mysql_columns_isSet = !json[QString("mysqlColumns")].isNull() && m_mysql_columns_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;
}

QString OAIMysqlTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMysqlTable::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_columns.size() > 0) {
        obj.insert(QString("mysqlColumns"), ::OpenAPI::toJsonValue(m_mysql_columns));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

QList<OAIMysqlColumn> OAIMysqlTable::getMysqlColumns() const {
    return m_mysql_columns;
}
void OAIMysqlTable::setMysqlColumns(const QList<OAIMysqlColumn> &mysql_columns) {
    m_mysql_columns = mysql_columns;
    m_mysql_columns_isSet = true;
}

bool OAIMysqlTable::is_mysql_columns_Set() const{
    return m_mysql_columns_isSet;
}

bool OAIMysqlTable::is_mysql_columns_Valid() const{
    return m_mysql_columns_isValid;
}

QString OAIMysqlTable::getTable() const {
    return m_table;
}
void OAIMysqlTable::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIMysqlTable::is_table_Set() const{
    return m_table_isSet;
}

bool OAIMysqlTable::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIMysqlTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMysqlTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
