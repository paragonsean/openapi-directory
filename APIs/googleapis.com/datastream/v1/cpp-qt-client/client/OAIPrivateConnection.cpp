/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateConnection::OAIPrivateConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateConnection::OAIPrivateConnection() {
    this->initializeModel();
}

OAIPrivateConnection::~OAIPrivateConnection() {}

void OAIPrivateConnection::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vpc_peering_config_isSet = false;
    m_vpc_peering_config_isValid = false;
}

void OAIPrivateConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateConnection::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vpc_peering_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_peering_config, json[QString("vpcPeeringConfig")]);
    m_vpc_peering_config_isSet = !json[QString("vpcPeeringConfig")].isNull() && m_vpc_peering_config_isValid;
}

QString OAIPrivateConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vpc_peering_config.isSet()) {
        obj.insert(QString("vpcPeeringConfig"), ::OpenAPI::toJsonValue(m_vpc_peering_config));
    }
    return obj;
}

QString OAIPrivateConnection::getCreateTime() const {
    return m_create_time;
}
void OAIPrivateConnection::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPrivateConnection::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPrivateConnection::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIPrivateConnection::getDisplayName() const {
    return m_display_name;
}
void OAIPrivateConnection::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPrivateConnection::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPrivateConnection::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIError OAIPrivateConnection::getError() const {
    return m_error;
}
void OAIPrivateConnection::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPrivateConnection::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPrivateConnection::is_error_Valid() const{
    return m_error_isValid;
}

QMap<QString, QString> OAIPrivateConnection::getLabels() const {
    return m_labels;
}
void OAIPrivateConnection::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPrivateConnection::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPrivateConnection::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPrivateConnection::getName() const {
    return m_name;
}
void OAIPrivateConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrivateConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrivateConnection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPrivateConnection::getState() const {
    return m_state;
}
void OAIPrivateConnection::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPrivateConnection::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPrivateConnection::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPrivateConnection::getUpdateTime() const {
    return m_update_time;
}
void OAIPrivateConnection::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPrivateConnection::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPrivateConnection::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVpcPeeringConfig OAIPrivateConnection::getVpcPeeringConfig() const {
    return m_vpc_peering_config;
}
void OAIPrivateConnection::setVpcPeeringConfig(const OAIVpcPeeringConfig &vpc_peering_config) {
    m_vpc_peering_config = vpc_peering_config;
    m_vpc_peering_config_isSet = true;
}

bool OAIPrivateConnection::is_vpc_peering_config_Set() const{
    return m_vpc_peering_config_isSet;
}

bool OAIPrivateConnection::is_vpc_peering_config_Valid() const{
    return m_vpc_peering_config_isValid;
}

bool OAIPrivateConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
