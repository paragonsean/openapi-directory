/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonFileFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonFileFormat::OAIJsonFileFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonFileFormat::OAIJsonFileFormat() {
    this->initializeModel();
}

OAIJsonFileFormat::~OAIJsonFileFormat() {}

void OAIJsonFileFormat::initializeModel() {

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_schema_file_format_isSet = false;
    m_schema_file_format_isValid = false;
}

void OAIJsonFileFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonFileFormat::fromJsonObject(QJsonObject json) {

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("compression")]);
    m_compression_isSet = !json[QString("compression")].isNull() && m_compression_isValid;

    m_schema_file_format_isValid = ::OpenAPI::fromJsonValue(m_schema_file_format, json[QString("schemaFileFormat")]);
    m_schema_file_format_isSet = !json[QString("schemaFileFormat")].isNull() && m_schema_file_format_isValid;
}

QString OAIJsonFileFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonFileFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_compression_isSet) {
        obj.insert(QString("compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_schema_file_format_isSet) {
        obj.insert(QString("schemaFileFormat"), ::OpenAPI::toJsonValue(m_schema_file_format));
    }
    return obj;
}

QString OAIJsonFileFormat::getCompression() const {
    return m_compression;
}
void OAIJsonFileFormat::setCompression(const QString &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAIJsonFileFormat::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAIJsonFileFormat::is_compression_Valid() const{
    return m_compression_isValid;
}

QString OAIJsonFileFormat::getSchemaFileFormat() const {
    return m_schema_file_format;
}
void OAIJsonFileFormat::setSchemaFileFormat(const QString &schema_file_format) {
    m_schema_file_format = schema_file_format;
    m_schema_file_format_isSet = true;
}

bool OAIJsonFileFormat::is_schema_file_format_Set() const{
    return m_schema_file_format_isSet;
}

bool OAIJsonFileFormat::is_schema_file_format_Valid() const{
    return m_schema_file_format_isValid;
}

bool OAIJsonFileFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_file_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonFileFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
