/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStream::OAIStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStream::OAIStream() {
    this->initializeModel();
}

OAIStream::~OAIStream() {}

void OAIStream::initializeModel() {

    m_backfill_all_isSet = false;
    m_backfill_all_isValid = false;

    m_backfill_none_isSet = false;
    m_backfill_none_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_customer_managed_encryption_key_isSet = false;
    m_customer_managed_encryption_key_isValid = false;

    m_destination_config_isSet = false;
    m_destination_config_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_recovery_time_isSet = false;
    m_last_recovery_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_config_isSet = false;
    m_source_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStream::fromJsonObject(QJsonObject json) {

    m_backfill_all_isValid = ::OpenAPI::fromJsonValue(m_backfill_all, json[QString("backfillAll")]);
    m_backfill_all_isSet = !json[QString("backfillAll")].isNull() && m_backfill_all_isValid;

    m_backfill_none_isValid = ::OpenAPI::fromJsonValue(m_backfill_none, json[QString("backfillNone")]);
    m_backfill_none_isSet = !json[QString("backfillNone")].isNull() && m_backfill_none_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_customer_managed_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_customer_managed_encryption_key, json[QString("customerManagedEncryptionKey")]);
    m_customer_managed_encryption_key_isSet = !json[QString("customerManagedEncryptionKey")].isNull() && m_customer_managed_encryption_key_isValid;

    m_destination_config_isValid = ::OpenAPI::fromJsonValue(m_destination_config, json[QString("destinationConfig")]);
    m_destination_config_isSet = !json[QString("destinationConfig")].isNull() && m_destination_config_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_recovery_time_isValid = ::OpenAPI::fromJsonValue(m_last_recovery_time, json[QString("lastRecoveryTime")]);
    m_last_recovery_time_isSet = !json[QString("lastRecoveryTime")].isNull() && m_last_recovery_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_config_isValid = ::OpenAPI::fromJsonValue(m_source_config, json[QString("sourceConfig")]);
    m_source_config_isSet = !json[QString("sourceConfig")].isNull() && m_source_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStream::asJsonObject() const {
    QJsonObject obj;
    if (m_backfill_all.isSet()) {
        obj.insert(QString("backfillAll"), ::OpenAPI::toJsonValue(m_backfill_all));
    }
    if (m_backfill_none_isSet) {
        obj.insert(QString("backfillNone"), ::OpenAPI::toJsonValue(m_backfill_none));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_customer_managed_encryption_key_isSet) {
        obj.insert(QString("customerManagedEncryptionKey"), ::OpenAPI::toJsonValue(m_customer_managed_encryption_key));
    }
    if (m_destination_config.isSet()) {
        obj.insert(QString("destinationConfig"), ::OpenAPI::toJsonValue(m_destination_config));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_recovery_time_isSet) {
        obj.insert(QString("lastRecoveryTime"), ::OpenAPI::toJsonValue(m_last_recovery_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_config.isSet()) {
        obj.insert(QString("sourceConfig"), ::OpenAPI::toJsonValue(m_source_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIBackfillAllStrategy OAIStream::getBackfillAll() const {
    return m_backfill_all;
}
void OAIStream::setBackfillAll(const OAIBackfillAllStrategy &backfill_all) {
    m_backfill_all = backfill_all;
    m_backfill_all_isSet = true;
}

bool OAIStream::is_backfill_all_Set() const{
    return m_backfill_all_isSet;
}

bool OAIStream::is_backfill_all_Valid() const{
    return m_backfill_all_isValid;
}

OAIObject OAIStream::getBackfillNone() const {
    return m_backfill_none;
}
void OAIStream::setBackfillNone(const OAIObject &backfill_none) {
    m_backfill_none = backfill_none;
    m_backfill_none_isSet = true;
}

bool OAIStream::is_backfill_none_Set() const{
    return m_backfill_none_isSet;
}

bool OAIStream::is_backfill_none_Valid() const{
    return m_backfill_none_isValid;
}

QString OAIStream::getCreateTime() const {
    return m_create_time;
}
void OAIStream::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIStream::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIStream::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIStream::getCustomerManagedEncryptionKey() const {
    return m_customer_managed_encryption_key;
}
void OAIStream::setCustomerManagedEncryptionKey(const QString &customer_managed_encryption_key) {
    m_customer_managed_encryption_key = customer_managed_encryption_key;
    m_customer_managed_encryption_key_isSet = true;
}

bool OAIStream::is_customer_managed_encryption_key_Set() const{
    return m_customer_managed_encryption_key_isSet;
}

bool OAIStream::is_customer_managed_encryption_key_Valid() const{
    return m_customer_managed_encryption_key_isValid;
}

OAIDestinationConfig OAIStream::getDestinationConfig() const {
    return m_destination_config;
}
void OAIStream::setDestinationConfig(const OAIDestinationConfig &destination_config) {
    m_destination_config = destination_config;
    m_destination_config_isSet = true;
}

bool OAIStream::is_destination_config_Set() const{
    return m_destination_config_isSet;
}

bool OAIStream::is_destination_config_Valid() const{
    return m_destination_config_isValid;
}

QString OAIStream::getDisplayName() const {
    return m_display_name;
}
void OAIStream::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIStream::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIStream::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIError> OAIStream::getErrors() const {
    return m_errors;
}
void OAIStream::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIStream::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIStream::is_errors_Valid() const{
    return m_errors_isValid;
}

QMap<QString, QString> OAIStream::getLabels() const {
    return m_labels;
}
void OAIStream::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIStream::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIStream::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIStream::getLastRecoveryTime() const {
    return m_last_recovery_time;
}
void OAIStream::setLastRecoveryTime(const QString &last_recovery_time) {
    m_last_recovery_time = last_recovery_time;
    m_last_recovery_time_isSet = true;
}

bool OAIStream::is_last_recovery_time_Set() const{
    return m_last_recovery_time_isSet;
}

bool OAIStream::is_last_recovery_time_Valid() const{
    return m_last_recovery_time_isValid;
}

QString OAIStream::getName() const {
    return m_name;
}
void OAIStream::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStream::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStream::is_name_Valid() const{
    return m_name_isValid;
}

OAISourceConfig OAIStream::getSourceConfig() const {
    return m_source_config;
}
void OAIStream::setSourceConfig(const OAISourceConfig &source_config) {
    m_source_config = source_config;
    m_source_config_isSet = true;
}

bool OAIStream::is_source_config_Set() const{
    return m_source_config_isSet;
}

bool OAIStream::is_source_config_Valid() const{
    return m_source_config_isValid;
}

QString OAIStream::getState() const {
    return m_state;
}
void OAIStream::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStream::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStream::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIStream::getUpdateTime() const {
    return m_update_time;
}
void OAIStream::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIStream::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIStream::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backfill_all.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backfill_none_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_managed_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_recovery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
