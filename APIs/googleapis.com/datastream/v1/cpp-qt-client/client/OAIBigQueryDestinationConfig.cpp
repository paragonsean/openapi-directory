/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigQueryDestinationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigQueryDestinationConfig::OAIBigQueryDestinationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigQueryDestinationConfig::OAIBigQueryDestinationConfig() {
    this->initializeModel();
}

OAIBigQueryDestinationConfig::~OAIBigQueryDestinationConfig() {}

void OAIBigQueryDestinationConfig::initializeModel() {

    m_data_freshness_isSet = false;
    m_data_freshness_isValid = false;

    m_single_target_dataset_isSet = false;
    m_single_target_dataset_isValid = false;

    m_source_hierarchy_datasets_isSet = false;
    m_source_hierarchy_datasets_isValid = false;
}

void OAIBigQueryDestinationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigQueryDestinationConfig::fromJsonObject(QJsonObject json) {

    m_data_freshness_isValid = ::OpenAPI::fromJsonValue(m_data_freshness, json[QString("dataFreshness")]);
    m_data_freshness_isSet = !json[QString("dataFreshness")].isNull() && m_data_freshness_isValid;

    m_single_target_dataset_isValid = ::OpenAPI::fromJsonValue(m_single_target_dataset, json[QString("singleTargetDataset")]);
    m_single_target_dataset_isSet = !json[QString("singleTargetDataset")].isNull() && m_single_target_dataset_isValid;

    m_source_hierarchy_datasets_isValid = ::OpenAPI::fromJsonValue(m_source_hierarchy_datasets, json[QString("sourceHierarchyDatasets")]);
    m_source_hierarchy_datasets_isSet = !json[QString("sourceHierarchyDatasets")].isNull() && m_source_hierarchy_datasets_isValid;
}

QString OAIBigQueryDestinationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigQueryDestinationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_data_freshness_isSet) {
        obj.insert(QString("dataFreshness"), ::OpenAPI::toJsonValue(m_data_freshness));
    }
    if (m_single_target_dataset.isSet()) {
        obj.insert(QString("singleTargetDataset"), ::OpenAPI::toJsonValue(m_single_target_dataset));
    }
    if (m_source_hierarchy_datasets.isSet()) {
        obj.insert(QString("sourceHierarchyDatasets"), ::OpenAPI::toJsonValue(m_source_hierarchy_datasets));
    }
    return obj;
}

QString OAIBigQueryDestinationConfig::getDataFreshness() const {
    return m_data_freshness;
}
void OAIBigQueryDestinationConfig::setDataFreshness(const QString &data_freshness) {
    m_data_freshness = data_freshness;
    m_data_freshness_isSet = true;
}

bool OAIBigQueryDestinationConfig::is_data_freshness_Set() const{
    return m_data_freshness_isSet;
}

bool OAIBigQueryDestinationConfig::is_data_freshness_Valid() const{
    return m_data_freshness_isValid;
}

OAISingleTargetDataset OAIBigQueryDestinationConfig::getSingleTargetDataset() const {
    return m_single_target_dataset;
}
void OAIBigQueryDestinationConfig::setSingleTargetDataset(const OAISingleTargetDataset &single_target_dataset) {
    m_single_target_dataset = single_target_dataset;
    m_single_target_dataset_isSet = true;
}

bool OAIBigQueryDestinationConfig::is_single_target_dataset_Set() const{
    return m_single_target_dataset_isSet;
}

bool OAIBigQueryDestinationConfig::is_single_target_dataset_Valid() const{
    return m_single_target_dataset_isValid;
}

OAISourceHierarchyDatasets OAIBigQueryDestinationConfig::getSourceHierarchyDatasets() const {
    return m_source_hierarchy_datasets;
}
void OAIBigQueryDestinationConfig::setSourceHierarchyDatasets(const OAISourceHierarchyDatasets &source_hierarchy_datasets) {
    m_source_hierarchy_datasets = source_hierarchy_datasets;
    m_source_hierarchy_datasets_isSet = true;
}

bool OAIBigQueryDestinationConfig::is_source_hierarchy_datasets_Set() const{
    return m_source_hierarchy_datasets_isSet;
}

bool OAIBigQueryDestinationConfig::is_source_hierarchy_datasets_Valid() const{
    return m_source_hierarchy_datasets_isValid;
}

bool OAIBigQueryDestinationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_freshness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_target_dataset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_hierarchy_datasets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigQueryDestinationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
