/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceObjectIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceObjectIdentifier::OAISourceObjectIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceObjectIdentifier::OAISourceObjectIdentifier() {
    this->initializeModel();
}

OAISourceObjectIdentifier::~OAISourceObjectIdentifier() {}

void OAISourceObjectIdentifier::initializeModel() {

    m_mysql_identifier_isSet = false;
    m_mysql_identifier_isValid = false;

    m_oracle_identifier_isSet = false;
    m_oracle_identifier_isValid = false;

    m_postgresql_identifier_isSet = false;
    m_postgresql_identifier_isValid = false;

    m_sql_server_identifier_isSet = false;
    m_sql_server_identifier_isValid = false;
}

void OAISourceObjectIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceObjectIdentifier::fromJsonObject(QJsonObject json) {

    m_mysql_identifier_isValid = ::OpenAPI::fromJsonValue(m_mysql_identifier, json[QString("mysqlIdentifier")]);
    m_mysql_identifier_isSet = !json[QString("mysqlIdentifier")].isNull() && m_mysql_identifier_isValid;

    m_oracle_identifier_isValid = ::OpenAPI::fromJsonValue(m_oracle_identifier, json[QString("oracleIdentifier")]);
    m_oracle_identifier_isSet = !json[QString("oracleIdentifier")].isNull() && m_oracle_identifier_isValid;

    m_postgresql_identifier_isValid = ::OpenAPI::fromJsonValue(m_postgresql_identifier, json[QString("postgresqlIdentifier")]);
    m_postgresql_identifier_isSet = !json[QString("postgresqlIdentifier")].isNull() && m_postgresql_identifier_isValid;

    m_sql_server_identifier_isValid = ::OpenAPI::fromJsonValue(m_sql_server_identifier, json[QString("sqlServerIdentifier")]);
    m_sql_server_identifier_isSet = !json[QString("sqlServerIdentifier")].isNull() && m_sql_server_identifier_isValid;
}

QString OAISourceObjectIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceObjectIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_identifier.isSet()) {
        obj.insert(QString("mysqlIdentifier"), ::OpenAPI::toJsonValue(m_mysql_identifier));
    }
    if (m_oracle_identifier.isSet()) {
        obj.insert(QString("oracleIdentifier"), ::OpenAPI::toJsonValue(m_oracle_identifier));
    }
    if (m_postgresql_identifier.isSet()) {
        obj.insert(QString("postgresqlIdentifier"), ::OpenAPI::toJsonValue(m_postgresql_identifier));
    }
    if (m_sql_server_identifier.isSet()) {
        obj.insert(QString("sqlServerIdentifier"), ::OpenAPI::toJsonValue(m_sql_server_identifier));
    }
    return obj;
}

OAIMysqlObjectIdentifier OAISourceObjectIdentifier::getMysqlIdentifier() const {
    return m_mysql_identifier;
}
void OAISourceObjectIdentifier::setMysqlIdentifier(const OAIMysqlObjectIdentifier &mysql_identifier) {
    m_mysql_identifier = mysql_identifier;
    m_mysql_identifier_isSet = true;
}

bool OAISourceObjectIdentifier::is_mysql_identifier_Set() const{
    return m_mysql_identifier_isSet;
}

bool OAISourceObjectIdentifier::is_mysql_identifier_Valid() const{
    return m_mysql_identifier_isValid;
}

OAIOracleObjectIdentifier OAISourceObjectIdentifier::getOracleIdentifier() const {
    return m_oracle_identifier;
}
void OAISourceObjectIdentifier::setOracleIdentifier(const OAIOracleObjectIdentifier &oracle_identifier) {
    m_oracle_identifier = oracle_identifier;
    m_oracle_identifier_isSet = true;
}

bool OAISourceObjectIdentifier::is_oracle_identifier_Set() const{
    return m_oracle_identifier_isSet;
}

bool OAISourceObjectIdentifier::is_oracle_identifier_Valid() const{
    return m_oracle_identifier_isValid;
}

OAIPostgresqlObjectIdentifier OAISourceObjectIdentifier::getPostgresqlIdentifier() const {
    return m_postgresql_identifier;
}
void OAISourceObjectIdentifier::setPostgresqlIdentifier(const OAIPostgresqlObjectIdentifier &postgresql_identifier) {
    m_postgresql_identifier = postgresql_identifier;
    m_postgresql_identifier_isSet = true;
}

bool OAISourceObjectIdentifier::is_postgresql_identifier_Set() const{
    return m_postgresql_identifier_isSet;
}

bool OAISourceObjectIdentifier::is_postgresql_identifier_Valid() const{
    return m_postgresql_identifier_isValid;
}

OAISqlServerObjectIdentifier OAISourceObjectIdentifier::getSqlServerIdentifier() const {
    return m_sql_server_identifier;
}
void OAISourceObjectIdentifier::setSqlServerIdentifier(const OAISqlServerObjectIdentifier &sql_server_identifier) {
    m_sql_server_identifier = sql_server_identifier;
    m_sql_server_identifier_isSet = true;
}

bool OAISourceObjectIdentifier::is_sql_server_identifier_Set() const{
    return m_sql_server_identifier_isSet;
}

bool OAISourceObjectIdentifier::is_sql_server_identifier_Valid() const{
    return m_sql_server_identifier_isValid;
}

bool OAISourceObjectIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postgresql_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_server_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceObjectIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
