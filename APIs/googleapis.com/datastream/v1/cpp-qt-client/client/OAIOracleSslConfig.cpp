/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOracleSslConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOracleSslConfig::OAIOracleSslConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOracleSslConfig::OAIOracleSslConfig() {
    this->initializeModel();
}

OAIOracleSslConfig::~OAIOracleSslConfig() {}

void OAIOracleSslConfig::initializeModel() {

    m_ca_certificate_isSet = false;
    m_ca_certificate_isValid = false;

    m_ca_certificate_set_isSet = false;
    m_ca_certificate_set_isValid = false;
}

void OAIOracleSslConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOracleSslConfig::fromJsonObject(QJsonObject json) {

    m_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate, json[QString("caCertificate")]);
    m_ca_certificate_isSet = !json[QString("caCertificate")].isNull() && m_ca_certificate_isValid;

    m_ca_certificate_set_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_set, json[QString("caCertificateSet")]);
    m_ca_certificate_set_isSet = !json[QString("caCertificateSet")].isNull() && m_ca_certificate_set_isValid;
}

QString OAIOracleSslConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOracleSslConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_isSet) {
        obj.insert(QString("caCertificate"), ::OpenAPI::toJsonValue(m_ca_certificate));
    }
    if (m_ca_certificate_set_isSet) {
        obj.insert(QString("caCertificateSet"), ::OpenAPI::toJsonValue(m_ca_certificate_set));
    }
    return obj;
}

QString OAIOracleSslConfig::getCaCertificate() const {
    return m_ca_certificate;
}
void OAIOracleSslConfig::setCaCertificate(const QString &ca_certificate) {
    m_ca_certificate = ca_certificate;
    m_ca_certificate_isSet = true;
}

bool OAIOracleSslConfig::is_ca_certificate_Set() const{
    return m_ca_certificate_isSet;
}

bool OAIOracleSslConfig::is_ca_certificate_Valid() const{
    return m_ca_certificate_isValid;
}

bool OAIOracleSslConfig::isCaCertificateSet() const {
    return m_ca_certificate_set;
}
void OAIOracleSslConfig::setCaCertificateSet(const bool &ca_certificate_set) {
    m_ca_certificate_set = ca_certificate_set;
    m_ca_certificate_set_isSet = true;
}

bool OAIOracleSslConfig::is_ca_certificate_set_Set() const{
    return m_ca_certificate_set_isSet;
}

bool OAIOracleSslConfig::is_ca_certificate_set_Valid() const{
    return m_ca_certificate_set_isValid;
}

bool OAIOracleSslConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_certificate_set_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOracleSslConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
