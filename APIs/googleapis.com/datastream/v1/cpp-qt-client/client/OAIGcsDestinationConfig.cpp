/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGcsDestinationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGcsDestinationConfig::OAIGcsDestinationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGcsDestinationConfig::OAIGcsDestinationConfig() {
    this->initializeModel();
}

OAIGcsDestinationConfig::~OAIGcsDestinationConfig() {}

void OAIGcsDestinationConfig::initializeModel() {

    m_avro_file_format_isSet = false;
    m_avro_file_format_isValid = false;

    m_file_rotation_interval_isSet = false;
    m_file_rotation_interval_isValid = false;

    m_file_rotation_mb_isSet = false;
    m_file_rotation_mb_isValid = false;

    m_json_file_format_isSet = false;
    m_json_file_format_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIGcsDestinationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGcsDestinationConfig::fromJsonObject(QJsonObject json) {

    m_avro_file_format_isValid = ::OpenAPI::fromJsonValue(m_avro_file_format, json[QString("avroFileFormat")]);
    m_avro_file_format_isSet = !json[QString("avroFileFormat")].isNull() && m_avro_file_format_isValid;

    m_file_rotation_interval_isValid = ::OpenAPI::fromJsonValue(m_file_rotation_interval, json[QString("fileRotationInterval")]);
    m_file_rotation_interval_isSet = !json[QString("fileRotationInterval")].isNull() && m_file_rotation_interval_isValid;

    m_file_rotation_mb_isValid = ::OpenAPI::fromJsonValue(m_file_rotation_mb, json[QString("fileRotationMb")]);
    m_file_rotation_mb_isSet = !json[QString("fileRotationMb")].isNull() && m_file_rotation_mb_isValid;

    m_json_file_format_isValid = ::OpenAPI::fromJsonValue(m_json_file_format, json[QString("jsonFileFormat")]);
    m_json_file_format_isSet = !json[QString("jsonFileFormat")].isNull() && m_json_file_format_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIGcsDestinationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGcsDestinationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_avro_file_format_isSet) {
        obj.insert(QString("avroFileFormat"), ::OpenAPI::toJsonValue(m_avro_file_format));
    }
    if (m_file_rotation_interval_isSet) {
        obj.insert(QString("fileRotationInterval"), ::OpenAPI::toJsonValue(m_file_rotation_interval));
    }
    if (m_file_rotation_mb_isSet) {
        obj.insert(QString("fileRotationMb"), ::OpenAPI::toJsonValue(m_file_rotation_mb));
    }
    if (m_json_file_format.isSet()) {
        obj.insert(QString("jsonFileFormat"), ::OpenAPI::toJsonValue(m_json_file_format));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

OAIObject OAIGcsDestinationConfig::getAvroFileFormat() const {
    return m_avro_file_format;
}
void OAIGcsDestinationConfig::setAvroFileFormat(const OAIObject &avro_file_format) {
    m_avro_file_format = avro_file_format;
    m_avro_file_format_isSet = true;
}

bool OAIGcsDestinationConfig::is_avro_file_format_Set() const{
    return m_avro_file_format_isSet;
}

bool OAIGcsDestinationConfig::is_avro_file_format_Valid() const{
    return m_avro_file_format_isValid;
}

QString OAIGcsDestinationConfig::getFileRotationInterval() const {
    return m_file_rotation_interval;
}
void OAIGcsDestinationConfig::setFileRotationInterval(const QString &file_rotation_interval) {
    m_file_rotation_interval = file_rotation_interval;
    m_file_rotation_interval_isSet = true;
}

bool OAIGcsDestinationConfig::is_file_rotation_interval_Set() const{
    return m_file_rotation_interval_isSet;
}

bool OAIGcsDestinationConfig::is_file_rotation_interval_Valid() const{
    return m_file_rotation_interval_isValid;
}

qint32 OAIGcsDestinationConfig::getFileRotationMb() const {
    return m_file_rotation_mb;
}
void OAIGcsDestinationConfig::setFileRotationMb(const qint32 &file_rotation_mb) {
    m_file_rotation_mb = file_rotation_mb;
    m_file_rotation_mb_isSet = true;
}

bool OAIGcsDestinationConfig::is_file_rotation_mb_Set() const{
    return m_file_rotation_mb_isSet;
}

bool OAIGcsDestinationConfig::is_file_rotation_mb_Valid() const{
    return m_file_rotation_mb_isValid;
}

OAIJsonFileFormat OAIGcsDestinationConfig::getJsonFileFormat() const {
    return m_json_file_format;
}
void OAIGcsDestinationConfig::setJsonFileFormat(const OAIJsonFileFormat &json_file_format) {
    m_json_file_format = json_file_format;
    m_json_file_format_isSet = true;
}

bool OAIGcsDestinationConfig::is_json_file_format_Set() const{
    return m_json_file_format_isSet;
}

bool OAIGcsDestinationConfig::is_json_file_format_Valid() const{
    return m_json_file_format_isValid;
}

QString OAIGcsDestinationConfig::getPath() const {
    return m_path;
}
void OAIGcsDestinationConfig::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGcsDestinationConfig::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGcsDestinationConfig::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIGcsDestinationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avro_file_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_rotation_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_rotation_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_file_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGcsDestinationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
