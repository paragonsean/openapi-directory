/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackfillJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackfillJob::OAIBackfillJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackfillJob::OAIBackfillJob() {
    this->initializeModel();
}

OAIBackfillJob::~OAIBackfillJob() {}

void OAIBackfillJob::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_last_end_time_isSet = false;
    m_last_end_time_isValid = false;

    m_last_start_time_isSet = false;
    m_last_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAIBackfillJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackfillJob::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_last_end_time_isValid = ::OpenAPI::fromJsonValue(m_last_end_time, json[QString("lastEndTime")]);
    m_last_end_time_isSet = !json[QString("lastEndTime")].isNull() && m_last_end_time_isValid;

    m_last_start_time_isValid = ::OpenAPI::fromJsonValue(m_last_start_time, json[QString("lastStartTime")]);
    m_last_start_time_isSet = !json[QString("lastStartTime")].isNull() && m_last_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAIBackfillJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackfillJob::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_last_end_time_isSet) {
        obj.insert(QString("lastEndTime"), ::OpenAPI::toJsonValue(m_last_end_time));
    }
    if (m_last_start_time_isSet) {
        obj.insert(QString("lastStartTime"), ::OpenAPI::toJsonValue(m_last_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

QList<OAIError> OAIBackfillJob::getErrors() const {
    return m_errors;
}
void OAIBackfillJob::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBackfillJob::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBackfillJob::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIBackfillJob::getLastEndTime() const {
    return m_last_end_time;
}
void OAIBackfillJob::setLastEndTime(const QString &last_end_time) {
    m_last_end_time = last_end_time;
    m_last_end_time_isSet = true;
}

bool OAIBackfillJob::is_last_end_time_Set() const{
    return m_last_end_time_isSet;
}

bool OAIBackfillJob::is_last_end_time_Valid() const{
    return m_last_end_time_isValid;
}

QString OAIBackfillJob::getLastStartTime() const {
    return m_last_start_time;
}
void OAIBackfillJob::setLastStartTime(const QString &last_start_time) {
    m_last_start_time = last_start_time;
    m_last_start_time_isSet = true;
}

bool OAIBackfillJob::is_last_start_time_Set() const{
    return m_last_start_time_isSet;
}

bool OAIBackfillJob::is_last_start_time_Valid() const{
    return m_last_start_time_isValid;
}

QString OAIBackfillJob::getState() const {
    return m_state;
}
void OAIBackfillJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBackfillJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBackfillJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBackfillJob::getTrigger() const {
    return m_trigger;
}
void OAIBackfillJob::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIBackfillJob::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIBackfillJob::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAIBackfillJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackfillJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
