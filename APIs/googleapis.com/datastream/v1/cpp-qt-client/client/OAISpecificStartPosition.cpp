/**
 * Datastream API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpecificStartPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpecificStartPosition::OAISpecificStartPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpecificStartPosition::OAISpecificStartPosition() {
    this->initializeModel();
}

OAISpecificStartPosition::~OAISpecificStartPosition() {}

void OAISpecificStartPosition::initializeModel() {

    m_mysql_log_position_isSet = false;
    m_mysql_log_position_isValid = false;

    m_oracle_scn_position_isSet = false;
    m_oracle_scn_position_isValid = false;
}

void OAISpecificStartPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpecificStartPosition::fromJsonObject(QJsonObject json) {

    m_mysql_log_position_isValid = ::OpenAPI::fromJsonValue(m_mysql_log_position, json[QString("mysqlLogPosition")]);
    m_mysql_log_position_isSet = !json[QString("mysqlLogPosition")].isNull() && m_mysql_log_position_isValid;

    m_oracle_scn_position_isValid = ::OpenAPI::fromJsonValue(m_oracle_scn_position, json[QString("oracleScnPosition")]);
    m_oracle_scn_position_isSet = !json[QString("oracleScnPosition")].isNull() && m_oracle_scn_position_isValid;
}

QString OAISpecificStartPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpecificStartPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_log_position.isSet()) {
        obj.insert(QString("mysqlLogPosition"), ::OpenAPI::toJsonValue(m_mysql_log_position));
    }
    if (m_oracle_scn_position.isSet()) {
        obj.insert(QString("oracleScnPosition"), ::OpenAPI::toJsonValue(m_oracle_scn_position));
    }
    return obj;
}

OAIMysqlLogPosition OAISpecificStartPosition::getMysqlLogPosition() const {
    return m_mysql_log_position;
}
void OAISpecificStartPosition::setMysqlLogPosition(const OAIMysqlLogPosition &mysql_log_position) {
    m_mysql_log_position = mysql_log_position;
    m_mysql_log_position_isSet = true;
}

bool OAISpecificStartPosition::is_mysql_log_position_Set() const{
    return m_mysql_log_position_isSet;
}

bool OAISpecificStartPosition::is_mysql_log_position_Valid() const{
    return m_mysql_log_position_isValid;
}

OAIOracleScnPosition OAISpecificStartPosition::getOracleScnPosition() const {
    return m_oracle_scn_position;
}
void OAISpecificStartPosition::setOracleScnPosition(const OAIOracleScnPosition &oracle_scn_position) {
    m_oracle_scn_position = oracle_scn_position;
    m_oracle_scn_position_isSet = true;
}

bool OAISpecificStartPosition::is_oracle_scn_position_Set() const{
    return m_oracle_scn_position_isSet;
}

bool OAISpecificStartPosition::is_oracle_scn_position_Valid() const{
    return m_oracle_scn_position_isValid;
}

bool OAISpecificStartPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_log_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_scn_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpecificStartPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
