# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mysql_column import MysqlColumn
from openapi_server import util


class MysqlTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mysql_columns: List[MysqlColumn]=None, table: str=None):
        """MysqlTable - a model defined in OpenAPI

        :param mysql_columns: The mysql_columns of this MysqlTable.
        :param table: The table of this MysqlTable.
        """
        self.openapi_types = {
            'mysql_columns': List[MysqlColumn],
            'table': str
        }

        self.attribute_map = {
            'mysql_columns': 'mysqlColumns',
            'table': 'table'
        }

        self._mysql_columns = mysql_columns
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MysqlTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MysqlTable of this MysqlTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mysql_columns(self):
        """Gets the mysql_columns of this MysqlTable.

        MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.

        :return: The mysql_columns of this MysqlTable.
        :rtype: List[MysqlColumn]
        """
        return self._mysql_columns

    @mysql_columns.setter
    def mysql_columns(self, mysql_columns):
        """Sets the mysql_columns of this MysqlTable.

        MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.

        :param mysql_columns: The mysql_columns of this MysqlTable.
        :type mysql_columns: List[MysqlColumn]
        """

        self._mysql_columns = mysql_columns

    @property
    def table(self):
        """Gets the table of this MysqlTable.

        Table name.

        :return: The table of this MysqlTable.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this MysqlTable.

        Table name.

        :param table: The table of this MysqlTable.
        :type table: str
        """

        self._table = table
