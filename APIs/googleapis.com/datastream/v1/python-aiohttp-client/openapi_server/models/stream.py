# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backfill_all_strategy import BackfillAllStrategy
from openapi_server.models.destination_config import DestinationConfig
from openapi_server.models.error import Error
from openapi_server.models.source_config import SourceConfig
from openapi_server import util


class Stream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backfill_all: BackfillAllStrategy=None, backfill_none: object=None, create_time: str=None, customer_managed_encryption_key: str=None, destination_config: DestinationConfig=None, display_name: str=None, errors: List[Error]=None, labels: Dict[str, str]=None, last_recovery_time: str=None, name: str=None, source_config: SourceConfig=None, state: str=None, update_time: str=None):
        """Stream - a model defined in OpenAPI

        :param backfill_all: The backfill_all of this Stream.
        :param backfill_none: The backfill_none of this Stream.
        :param create_time: The create_time of this Stream.
        :param customer_managed_encryption_key: The customer_managed_encryption_key of this Stream.
        :param destination_config: The destination_config of this Stream.
        :param display_name: The display_name of this Stream.
        :param errors: The errors of this Stream.
        :param labels: The labels of this Stream.
        :param last_recovery_time: The last_recovery_time of this Stream.
        :param name: The name of this Stream.
        :param source_config: The source_config of this Stream.
        :param state: The state of this Stream.
        :param update_time: The update_time of this Stream.
        """
        self.openapi_types = {
            'backfill_all': BackfillAllStrategy,
            'backfill_none': object,
            'create_time': str,
            'customer_managed_encryption_key': str,
            'destination_config': DestinationConfig,
            'display_name': str,
            'errors': List[Error],
            'labels': Dict[str, str],
            'last_recovery_time': str,
            'name': str,
            'source_config': SourceConfig,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'backfill_all': 'backfillAll',
            'backfill_none': 'backfillNone',
            'create_time': 'createTime',
            'customer_managed_encryption_key': 'customerManagedEncryptionKey',
            'destination_config': 'destinationConfig',
            'display_name': 'displayName',
            'errors': 'errors',
            'labels': 'labels',
            'last_recovery_time': 'lastRecoveryTime',
            'name': 'name',
            'source_config': 'sourceConfig',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._backfill_all = backfill_all
        self._backfill_none = backfill_none
        self._create_time = create_time
        self._customer_managed_encryption_key = customer_managed_encryption_key
        self._destination_config = destination_config
        self._display_name = display_name
        self._errors = errors
        self._labels = labels
        self._last_recovery_time = last_recovery_time
        self._name = name
        self._source_config = source_config
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stream of this Stream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backfill_all(self):
        """Gets the backfill_all of this Stream.


        :return: The backfill_all of this Stream.
        :rtype: BackfillAllStrategy
        """
        return self._backfill_all

    @backfill_all.setter
    def backfill_all(self, backfill_all):
        """Sets the backfill_all of this Stream.


        :param backfill_all: The backfill_all of this Stream.
        :type backfill_all: BackfillAllStrategy
        """

        self._backfill_all = backfill_all

    @property
    def backfill_none(self):
        """Gets the backfill_none of this Stream.

        Backfill strategy to disable automatic backfill for the Stream's objects.

        :return: The backfill_none of this Stream.
        :rtype: object
        """
        return self._backfill_none

    @backfill_none.setter
    def backfill_none(self, backfill_none):
        """Sets the backfill_none of this Stream.

        Backfill strategy to disable automatic backfill for the Stream's objects.

        :param backfill_none: The backfill_none of this Stream.
        :type backfill_none: object
        """

        self._backfill_none = backfill_none

    @property
    def create_time(self):
        """Gets the create_time of this Stream.

        Output only. The creation time of the stream.

        :return: The create_time of this Stream.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Stream.

        Output only. The creation time of the stream.

        :param create_time: The create_time of this Stream.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def customer_managed_encryption_key(self):
        """Gets the customer_managed_encryption_key of this Stream.

        Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.

        :return: The customer_managed_encryption_key of this Stream.
        :rtype: str
        """
        return self._customer_managed_encryption_key

    @customer_managed_encryption_key.setter
    def customer_managed_encryption_key(self, customer_managed_encryption_key):
        """Sets the customer_managed_encryption_key of this Stream.

        Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.

        :param customer_managed_encryption_key: The customer_managed_encryption_key of this Stream.
        :type customer_managed_encryption_key: str
        """

        self._customer_managed_encryption_key = customer_managed_encryption_key

    @property
    def destination_config(self):
        """Gets the destination_config of this Stream.


        :return: The destination_config of this Stream.
        :rtype: DestinationConfig
        """
        return self._destination_config

    @destination_config.setter
    def destination_config(self, destination_config):
        """Sets the destination_config of this Stream.


        :param destination_config: The destination_config of this Stream.
        :type destination_config: DestinationConfig
        """

        self._destination_config = destination_config

    @property
    def display_name(self):
        """Gets the display_name of this Stream.

        Required. Display name.

        :return: The display_name of this Stream.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Stream.

        Required. Display name.

        :param display_name: The display_name of this Stream.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def errors(self):
        """Gets the errors of this Stream.

        Output only. Errors on the Stream.

        :return: The errors of this Stream.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Stream.

        Output only. Errors on the Stream.

        :param errors: The errors of this Stream.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def labels(self):
        """Gets the labels of this Stream.

        Labels.

        :return: The labels of this Stream.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Stream.

        Labels.

        :param labels: The labels of this Stream.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_recovery_time(self):
        """Gets the last_recovery_time of this Stream.

        Output only. If the stream was recovered, the time of the last recovery. Note: This field is currently experimental.

        :return: The last_recovery_time of this Stream.
        :rtype: str
        """
        return self._last_recovery_time

    @last_recovery_time.setter
    def last_recovery_time(self, last_recovery_time):
        """Sets the last_recovery_time of this Stream.

        Output only. If the stream was recovered, the time of the last recovery. Note: This field is currently experimental.

        :param last_recovery_time: The last_recovery_time of this Stream.
        :type last_recovery_time: str
        """

        self._last_recovery_time = last_recovery_time

    @property
    def name(self):
        """Gets the name of this Stream.

        Output only. The stream's name.

        :return: The name of this Stream.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stream.

        Output only. The stream's name.

        :param name: The name of this Stream.
        :type name: str
        """

        self._name = name

    @property
    def source_config(self):
        """Gets the source_config of this Stream.


        :return: The source_config of this Stream.
        :rtype: SourceConfig
        """
        return self._source_config

    @source_config.setter
    def source_config(self, source_config):
        """Sets the source_config of this Stream.


        :param source_config: The source_config of this Stream.
        :type source_config: SourceConfig
        """

        self._source_config = source_config

    @property
    def state(self):
        """Gets the state of this Stream.

        The state of the stream.

        :return: The state of this Stream.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Stream.

        The state of the stream.

        :param state: The state of this Stream.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "NOT_STARTED", "RUNNING", "PAUSED", "MAINTENANCE", "FAILED", "FAILED_PERMANENTLY", "STARTING", "DRAINING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Stream.

        Output only. The last update time of the stream.

        :return: The update_time of this Stream.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Stream.

        Output only. The last update time of the stream.

        :param update_time: The update_time of this Stream.
        :type update_time: str
        """

        self._update_time = update_time
