# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateConnectivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_connection: str=None):
        """PrivateConnectivity - a model defined in OpenAPI

        :param private_connection: The private_connection of this PrivateConnectivity.
        """
        self.openapi_types = {
            'private_connection': str
        }

        self.attribute_map = {
            'private_connection': 'privateConnection'
        }

        self._private_connection = private_connection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateConnectivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateConnectivity of this PrivateConnectivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_connection(self):
        """Gets the private_connection of this PrivateConnectivity.

        Required. A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`

        :return: The private_connection of this PrivateConnectivity.
        :rtype: str
        """
        return self._private_connection

    @private_connection.setter
    def private_connection(self, private_connection):
        """Sets the private_connection of this PrivateConnectivity.

        Required. A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`

        :param private_connection: The private_connection of this PrivateConnectivity.
        :type private_connection: str
        """

        self._private_connection = private_connection
