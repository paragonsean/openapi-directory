# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.oracle_ssl_config import OracleSslConfig
from openapi_server import util


class OracleProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_attributes: Dict[str, str]=None, database_service: str=None, hostname: str=None, oracle_ssl_config: OracleSslConfig=None, password: str=None, port: int=None, username: str=None):
        """OracleProfile - a model defined in OpenAPI

        :param connection_attributes: The connection_attributes of this OracleProfile.
        :param database_service: The database_service of this OracleProfile.
        :param hostname: The hostname of this OracleProfile.
        :param oracle_ssl_config: The oracle_ssl_config of this OracleProfile.
        :param password: The password of this OracleProfile.
        :param port: The port of this OracleProfile.
        :param username: The username of this OracleProfile.
        """
        self.openapi_types = {
            'connection_attributes': Dict[str, str],
            'database_service': str,
            'hostname': str,
            'oracle_ssl_config': OracleSslConfig,
            'password': str,
            'port': int,
            'username': str
        }

        self.attribute_map = {
            'connection_attributes': 'connectionAttributes',
            'database_service': 'databaseService',
            'hostname': 'hostname',
            'oracle_ssl_config': 'oracleSslConfig',
            'password': 'password',
            'port': 'port',
            'username': 'username'
        }

        self._connection_attributes = connection_attributes
        self._database_service = database_service
        self._hostname = hostname
        self._oracle_ssl_config = oracle_ssl_config
        self._password = password
        self._port = port
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleProfile of this OracleProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_attributes(self):
        """Gets the connection_attributes of this OracleProfile.

        Connection string attributes

        :return: The connection_attributes of this OracleProfile.
        :rtype: Dict[str, str]
        """
        return self._connection_attributes

    @connection_attributes.setter
    def connection_attributes(self, connection_attributes):
        """Sets the connection_attributes of this OracleProfile.

        Connection string attributes

        :param connection_attributes: The connection_attributes of this OracleProfile.
        :type connection_attributes: Dict[str, str]
        """

        self._connection_attributes = connection_attributes

    @property
    def database_service(self):
        """Gets the database_service of this OracleProfile.

        Required. Database for the Oracle connection.

        :return: The database_service of this OracleProfile.
        :rtype: str
        """
        return self._database_service

    @database_service.setter
    def database_service(self, database_service):
        """Sets the database_service of this OracleProfile.

        Required. Database for the Oracle connection.

        :param database_service: The database_service of this OracleProfile.
        :type database_service: str
        """

        self._database_service = database_service

    @property
    def hostname(self):
        """Gets the hostname of this OracleProfile.

        Required. Hostname for the Oracle connection.

        :return: The hostname of this OracleProfile.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OracleProfile.

        Required. Hostname for the Oracle connection.

        :param hostname: The hostname of this OracleProfile.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def oracle_ssl_config(self):
        """Gets the oracle_ssl_config of this OracleProfile.


        :return: The oracle_ssl_config of this OracleProfile.
        :rtype: OracleSslConfig
        """
        return self._oracle_ssl_config

    @oracle_ssl_config.setter
    def oracle_ssl_config(self, oracle_ssl_config):
        """Sets the oracle_ssl_config of this OracleProfile.


        :param oracle_ssl_config: The oracle_ssl_config of this OracleProfile.
        :type oracle_ssl_config: OracleSslConfig
        """

        self._oracle_ssl_config = oracle_ssl_config

    @property
    def password(self):
        """Gets the password of this OracleProfile.

        Required. Password for the Oracle connection.

        :return: The password of this OracleProfile.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OracleProfile.

        Required. Password for the Oracle connection.

        :param password: The password of this OracleProfile.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this OracleProfile.

        Port for the Oracle connection, default value is 1521.

        :return: The port of this OracleProfile.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OracleProfile.

        Port for the Oracle connection, default value is 1521.

        :param port: The port of this OracleProfile.
        :type port: int
        """

        self._port = port

    @property
    def username(self):
        """Gets the username of this OracleProfile.

        Required. Username for the Oracle connection.

        :return: The username of this OracleProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OracleProfile.

        Required. Username for the Oracle connection.

        :param username: The username of this OracleProfile.
        :type username: str
        """

        self._username = username
