# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.postgresql_rdbms import PostgresqlRdbms
from openapi_server import util


class PostgresqlSourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude_objects: PostgresqlRdbms=None, include_objects: PostgresqlRdbms=None, max_concurrent_backfill_tasks: int=None, publication: str=None, replication_slot: str=None):
        """PostgresqlSourceConfig - a model defined in OpenAPI

        :param exclude_objects: The exclude_objects of this PostgresqlSourceConfig.
        :param include_objects: The include_objects of this PostgresqlSourceConfig.
        :param max_concurrent_backfill_tasks: The max_concurrent_backfill_tasks of this PostgresqlSourceConfig.
        :param publication: The publication of this PostgresqlSourceConfig.
        :param replication_slot: The replication_slot of this PostgresqlSourceConfig.
        """
        self.openapi_types = {
            'exclude_objects': PostgresqlRdbms,
            'include_objects': PostgresqlRdbms,
            'max_concurrent_backfill_tasks': int,
            'publication': str,
            'replication_slot': str
        }

        self.attribute_map = {
            'exclude_objects': 'excludeObjects',
            'include_objects': 'includeObjects',
            'max_concurrent_backfill_tasks': 'maxConcurrentBackfillTasks',
            'publication': 'publication',
            'replication_slot': 'replicationSlot'
        }

        self._exclude_objects = exclude_objects
        self._include_objects = include_objects
        self._max_concurrent_backfill_tasks = max_concurrent_backfill_tasks
        self._publication = publication
        self._replication_slot = replication_slot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostgresqlSourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostgresqlSourceConfig of this PostgresqlSourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude_objects(self):
        """Gets the exclude_objects of this PostgresqlSourceConfig.


        :return: The exclude_objects of this PostgresqlSourceConfig.
        :rtype: PostgresqlRdbms
        """
        return self._exclude_objects

    @exclude_objects.setter
    def exclude_objects(self, exclude_objects):
        """Sets the exclude_objects of this PostgresqlSourceConfig.


        :param exclude_objects: The exclude_objects of this PostgresqlSourceConfig.
        :type exclude_objects: PostgresqlRdbms
        """

        self._exclude_objects = exclude_objects

    @property
    def include_objects(self):
        """Gets the include_objects of this PostgresqlSourceConfig.


        :return: The include_objects of this PostgresqlSourceConfig.
        :rtype: PostgresqlRdbms
        """
        return self._include_objects

    @include_objects.setter
    def include_objects(self, include_objects):
        """Sets the include_objects of this PostgresqlSourceConfig.


        :param include_objects: The include_objects of this PostgresqlSourceConfig.
        :type include_objects: PostgresqlRdbms
        """

        self._include_objects = include_objects

    @property
    def max_concurrent_backfill_tasks(self):
        """Gets the max_concurrent_backfill_tasks of this PostgresqlSourceConfig.

        Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.

        :return: The max_concurrent_backfill_tasks of this PostgresqlSourceConfig.
        :rtype: int
        """
        return self._max_concurrent_backfill_tasks

    @max_concurrent_backfill_tasks.setter
    def max_concurrent_backfill_tasks(self, max_concurrent_backfill_tasks):
        """Sets the max_concurrent_backfill_tasks of this PostgresqlSourceConfig.

        Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.

        :param max_concurrent_backfill_tasks: The max_concurrent_backfill_tasks of this PostgresqlSourceConfig.
        :type max_concurrent_backfill_tasks: int
        """

        self._max_concurrent_backfill_tasks = max_concurrent_backfill_tasks

    @property
    def publication(self):
        """Gets the publication of this PostgresqlSourceConfig.

        Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.

        :return: The publication of this PostgresqlSourceConfig.
        :rtype: str
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this PostgresqlSourceConfig.

        Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.

        :param publication: The publication of this PostgresqlSourceConfig.
        :type publication: str
        """

        self._publication = publication

    @property
    def replication_slot(self):
        """Gets the replication_slot of this PostgresqlSourceConfig.

        Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.

        :return: The replication_slot of this PostgresqlSourceConfig.
        :rtype: str
        """
        return self._replication_slot

    @replication_slot.setter
    def replication_slot(self, replication_slot):
        """Sets the replication_slot of this PostgresqlSourceConfig.

        Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.

        :param replication_slot: The replication_slot of this PostgresqlSourceConfig.
        :type replication_slot: str
        """

        self._replication_slot = replication_slot
