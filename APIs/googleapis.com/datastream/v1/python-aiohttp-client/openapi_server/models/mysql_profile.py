# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mysql_ssl_config import MysqlSslConfig
from openapi_server import util


class MysqlProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, password: str=None, port: int=None, ssl_config: MysqlSslConfig=None, username: str=None):
        """MysqlProfile - a model defined in OpenAPI

        :param hostname: The hostname of this MysqlProfile.
        :param password: The password of this MysqlProfile.
        :param port: The port of this MysqlProfile.
        :param ssl_config: The ssl_config of this MysqlProfile.
        :param username: The username of this MysqlProfile.
        """
        self.openapi_types = {
            'hostname': str,
            'password': str,
            'port': int,
            'ssl_config': MysqlSslConfig,
            'username': str
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'password': 'password',
            'port': 'port',
            'ssl_config': 'sslConfig',
            'username': 'username'
        }

        self._hostname = hostname
        self._password = password
        self._port = port
        self._ssl_config = ssl_config
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MysqlProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MysqlProfile of this MysqlProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this MysqlProfile.

        Required. Hostname for the MySQL connection.

        :return: The hostname of this MysqlProfile.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this MysqlProfile.

        Required. Hostname for the MySQL connection.

        :param hostname: The hostname of this MysqlProfile.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def password(self):
        """Gets the password of this MysqlProfile.

        Required. Input only. Password for the MySQL connection.

        :return: The password of this MysqlProfile.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MysqlProfile.

        Required. Input only. Password for the MySQL connection.

        :param password: The password of this MysqlProfile.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this MysqlProfile.

        Port for the MySQL connection, default value is 3306.

        :return: The port of this MysqlProfile.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MysqlProfile.

        Port for the MySQL connection, default value is 3306.

        :param port: The port of this MysqlProfile.
        :type port: int
        """

        self._port = port

    @property
    def ssl_config(self):
        """Gets the ssl_config of this MysqlProfile.


        :return: The ssl_config of this MysqlProfile.
        :rtype: MysqlSslConfig
        """
        return self._ssl_config

    @ssl_config.setter
    def ssl_config(self, ssl_config):
        """Sets the ssl_config of this MysqlProfile.


        :param ssl_config: The ssl_config of this MysqlProfile.
        :type ssl_config: MysqlSslConfig
        """

        self._ssl_config = ssl_config

    @property
    def username(self):
        """Gets the username of this MysqlProfile.

        Required. Username for the MySQL connection.

        :return: The username of this MysqlProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MysqlProfile.

        Required. Username for the MySQL connection.

        :param username: The username of this MysqlProfile.
        :type username: str
        """

        self._username = username
