# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.postgresql_column import PostgresqlColumn
from openapi_server import util


class PostgresqlTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, postgresql_columns: List[PostgresqlColumn]=None, table: str=None):
        """PostgresqlTable - a model defined in OpenAPI

        :param postgresql_columns: The postgresql_columns of this PostgresqlTable.
        :param table: The table of this PostgresqlTable.
        """
        self.openapi_types = {
            'postgresql_columns': List[PostgresqlColumn],
            'table': str
        }

        self.attribute_map = {
            'postgresql_columns': 'postgresqlColumns',
            'table': 'table'
        }

        self._postgresql_columns = postgresql_columns
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostgresqlTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostgresqlTable of this PostgresqlTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def postgresql_columns(self):
        """Gets the postgresql_columns of this PostgresqlTable.

        PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.

        :return: The postgresql_columns of this PostgresqlTable.
        :rtype: List[PostgresqlColumn]
        """
        return self._postgresql_columns

    @postgresql_columns.setter
    def postgresql_columns(self, postgresql_columns):
        """Sets the postgresql_columns of this PostgresqlTable.

        PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.

        :param postgresql_columns: The postgresql_columns of this PostgresqlTable.
        :type postgresql_columns: List[PostgresqlColumn]
        """

        self._postgresql_columns = postgresql_columns

    @property
    def table(self):
        """Gets the table of this PostgresqlTable.

        Table name.

        :return: The table of this PostgresqlTable.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this PostgresqlTable.

        Table name.

        :param table: The table of this PostgresqlTable.
        :type table: str
        """

        self._table = table
