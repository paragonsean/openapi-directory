# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util


class BackfillJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[Error]=None, last_end_time: str=None, last_start_time: str=None, state: str=None, trigger: str=None):
        """BackfillJob - a model defined in OpenAPI

        :param errors: The errors of this BackfillJob.
        :param last_end_time: The last_end_time of this BackfillJob.
        :param last_start_time: The last_start_time of this BackfillJob.
        :param state: The state of this BackfillJob.
        :param trigger: The trigger of this BackfillJob.
        """
        self.openapi_types = {
            'errors': List[Error],
            'last_end_time': str,
            'last_start_time': str,
            'state': str,
            'trigger': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'last_end_time': 'lastEndTime',
            'last_start_time': 'lastStartTime',
            'state': 'state',
            'trigger': 'trigger'
        }

        self._errors = errors
        self._last_end_time = last_end_time
        self._last_start_time = last_start_time
        self._state = state
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackfillJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackfillJob of this BackfillJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this BackfillJob.

        Output only. Errors which caused the backfill job to fail.

        :return: The errors of this BackfillJob.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BackfillJob.

        Output only. Errors which caused the backfill job to fail.

        :param errors: The errors of this BackfillJob.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def last_end_time(self):
        """Gets the last_end_time of this BackfillJob.

        Output only. Backfill job's end time.

        :return: The last_end_time of this BackfillJob.
        :rtype: str
        """
        return self._last_end_time

    @last_end_time.setter
    def last_end_time(self, last_end_time):
        """Sets the last_end_time of this BackfillJob.

        Output only. Backfill job's end time.

        :param last_end_time: The last_end_time of this BackfillJob.
        :type last_end_time: str
        """

        self._last_end_time = last_end_time

    @property
    def last_start_time(self):
        """Gets the last_start_time of this BackfillJob.

        Output only. Backfill job's start time.

        :return: The last_start_time of this BackfillJob.
        :rtype: str
        """
        return self._last_start_time

    @last_start_time.setter
    def last_start_time(self, last_start_time):
        """Sets the last_start_time of this BackfillJob.

        Output only. Backfill job's start time.

        :param last_start_time: The last_start_time of this BackfillJob.
        :type last_start_time: str
        """

        self._last_start_time = last_start_time

    @property
    def state(self):
        """Gets the state of this BackfillJob.

        Output only. Backfill job state.

        :return: The state of this BackfillJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BackfillJob.

        Output only. Backfill job state.

        :param state: The state of this BackfillJob.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "NOT_STARTED", "PENDING", "ACTIVE", "STOPPED", "FAILED", "COMPLETED", "UNSUPPORTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trigger(self):
        """Gets the trigger of this BackfillJob.

        Backfill job's triggering reason.

        :return: The trigger of this BackfillJob.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this BackfillJob.

        Backfill job's triggering reason.

        :param trigger: The trigger of this BackfillJob.
        :type trigger: str
        """
        allowed_values = ["TRIGGER_UNSPECIFIED", "AUTOMATIC", "MANUAL"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger
