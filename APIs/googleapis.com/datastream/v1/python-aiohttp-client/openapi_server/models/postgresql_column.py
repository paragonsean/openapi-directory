# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostgresqlColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, data_type: str=None, length: int=None, nullable: bool=None, ordinal_position: int=None, precision: int=None, primary_key: bool=None, scale: int=None):
        """PostgresqlColumn - a model defined in OpenAPI

        :param column: The column of this PostgresqlColumn.
        :param data_type: The data_type of this PostgresqlColumn.
        :param length: The length of this PostgresqlColumn.
        :param nullable: The nullable of this PostgresqlColumn.
        :param ordinal_position: The ordinal_position of this PostgresqlColumn.
        :param precision: The precision of this PostgresqlColumn.
        :param primary_key: The primary_key of this PostgresqlColumn.
        :param scale: The scale of this PostgresqlColumn.
        """
        self.openapi_types = {
            'column': str,
            'data_type': str,
            'length': int,
            'nullable': bool,
            'ordinal_position': int,
            'precision': int,
            'primary_key': bool,
            'scale': int
        }

        self.attribute_map = {
            'column': 'column',
            'data_type': 'dataType',
            'length': 'length',
            'nullable': 'nullable',
            'ordinal_position': 'ordinalPosition',
            'precision': 'precision',
            'primary_key': 'primaryKey',
            'scale': 'scale'
        }

        self._column = column
        self._data_type = data_type
        self._length = length
        self._nullable = nullable
        self._ordinal_position = ordinal_position
        self._precision = precision
        self._primary_key = primary_key
        self._scale = scale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostgresqlColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostgresqlColumn of this PostgresqlColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this PostgresqlColumn.

        Column name.

        :return: The column of this PostgresqlColumn.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this PostgresqlColumn.

        Column name.

        :param column: The column of this PostgresqlColumn.
        :type column: str
        """

        self._column = column

    @property
    def data_type(self):
        """Gets the data_type of this PostgresqlColumn.

        The PostgreSQL data type.

        :return: The data_type of this PostgresqlColumn.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this PostgresqlColumn.

        The PostgreSQL data type.

        :param data_type: The data_type of this PostgresqlColumn.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def length(self):
        """Gets the length of this PostgresqlColumn.

        Column length.

        :return: The length of this PostgresqlColumn.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PostgresqlColumn.

        Column length.

        :param length: The length of this PostgresqlColumn.
        :type length: int
        """

        self._length = length

    @property
    def nullable(self):
        """Gets the nullable of this PostgresqlColumn.

        Whether or not the column can accept a null value.

        :return: The nullable of this PostgresqlColumn.
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this PostgresqlColumn.

        Whether or not the column can accept a null value.

        :param nullable: The nullable of this PostgresqlColumn.
        :type nullable: bool
        """

        self._nullable = nullable

    @property
    def ordinal_position(self):
        """Gets the ordinal_position of this PostgresqlColumn.

        The ordinal position of the column in the table.

        :return: The ordinal_position of this PostgresqlColumn.
        :rtype: int
        """
        return self._ordinal_position

    @ordinal_position.setter
    def ordinal_position(self, ordinal_position):
        """Sets the ordinal_position of this PostgresqlColumn.

        The ordinal position of the column in the table.

        :param ordinal_position: The ordinal_position of this PostgresqlColumn.
        :type ordinal_position: int
        """

        self._ordinal_position = ordinal_position

    @property
    def precision(self):
        """Gets the precision of this PostgresqlColumn.

        Column precision.

        :return: The precision of this PostgresqlColumn.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this PostgresqlColumn.

        Column precision.

        :param precision: The precision of this PostgresqlColumn.
        :type precision: int
        """

        self._precision = precision

    @property
    def primary_key(self):
        """Gets the primary_key of this PostgresqlColumn.

        Whether or not the column represents a primary key.

        :return: The primary_key of this PostgresqlColumn.
        :rtype: bool
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this PostgresqlColumn.

        Whether or not the column represents a primary key.

        :param primary_key: The primary_key of this PostgresqlColumn.
        :type primary_key: bool
        """

        self._primary_key = primary_key

    @property
    def scale(self):
        """Gets the scale of this PostgresqlColumn.

        Column scale.

        :return: The scale of this PostgresqlColumn.
        :rtype: int
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this PostgresqlColumn.

        Column scale.

        :param scale: The scale of this PostgresqlColumn.
        :type scale: int
        """

        self._scale = scale
