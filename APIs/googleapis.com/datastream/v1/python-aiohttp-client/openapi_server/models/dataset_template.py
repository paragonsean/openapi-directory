# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id_prefix: str=None, kms_key_name: str=None, location: str=None):
        """DatasetTemplate - a model defined in OpenAPI

        :param dataset_id_prefix: The dataset_id_prefix of this DatasetTemplate.
        :param kms_key_name: The kms_key_name of this DatasetTemplate.
        :param location: The location of this DatasetTemplate.
        """
        self.openapi_types = {
            'dataset_id_prefix': str,
            'kms_key_name': str,
            'location': str
        }

        self.attribute_map = {
            'dataset_id_prefix': 'datasetIdPrefix',
            'kms_key_name': 'kmsKeyName',
            'location': 'location'
        }

        self._dataset_id_prefix = dataset_id_prefix
        self._kms_key_name = kms_key_name
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetTemplate of this DatasetTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id_prefix(self):
        """Gets the dataset_id_prefix of this DatasetTemplate.

        If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.

        :return: The dataset_id_prefix of this DatasetTemplate.
        :rtype: str
        """
        return self._dataset_id_prefix

    @dataset_id_prefix.setter
    def dataset_id_prefix(self, dataset_id_prefix):
        """Sets the dataset_id_prefix of this DatasetTemplate.

        If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.

        :param dataset_id_prefix: The dataset_id_prefix of this DatasetTemplate.
        :type dataset_id_prefix: str
        """

        self._dataset_id_prefix = dataset_id_prefix

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this DatasetTemplate.

        Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.

        :return: The kms_key_name of this DatasetTemplate.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this DatasetTemplate.

        Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.

        :param kms_key_name: The kms_key_name of this DatasetTemplate.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def location(self):
        """Gets the location of this DatasetTemplate.

        Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.

        :return: The location of this DatasetTemplate.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DatasetTemplate.

        Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.

        :param location: The location of this DatasetTemplate.
        :type location: str
        """

        self._location = location
