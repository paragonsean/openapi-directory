# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MysqlLogPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_file: str=None, log_position: int=None):
        """MysqlLogPosition - a model defined in OpenAPI

        :param log_file: The log_file of this MysqlLogPosition.
        :param log_position: The log_position of this MysqlLogPosition.
        """
        self.openapi_types = {
            'log_file': str,
            'log_position': int
        }

        self.attribute_map = {
            'log_file': 'logFile',
            'log_position': 'logPosition'
        }

        self._log_file = log_file
        self._log_position = log_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MysqlLogPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MysqlLogPosition of this MysqlLogPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_file(self):
        """Gets the log_file of this MysqlLogPosition.

        Required. The binary log file name.

        :return: The log_file of this MysqlLogPosition.
        :rtype: str
        """
        return self._log_file

    @log_file.setter
    def log_file(self, log_file):
        """Sets the log_file of this MysqlLogPosition.

        Required. The binary log file name.

        :param log_file: The log_file of this MysqlLogPosition.
        :type log_file: str
        """

        self._log_file = log_file

    @property
    def log_position(self):
        """Gets the log_position of this MysqlLogPosition.

        Optional. The position within the binary log file. Default is head of file.

        :return: The log_position of this MysqlLogPosition.
        :rtype: int
        """
        return self._log_position

    @log_position.setter
    def log_position(self, log_position):
        """Sets the log_position of this MysqlLogPosition.

        Optional. The position within the binary log file. Default is head of file.

        :param log_position: The log_position of this MysqlLogPosition.
        :type log_position: int
        """

        self._log_position = log_position
