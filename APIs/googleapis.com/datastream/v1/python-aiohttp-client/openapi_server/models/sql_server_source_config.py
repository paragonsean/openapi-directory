# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_server_rdbms import SqlServerRdbms
from openapi_server import util


class SqlServerSourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude_objects: SqlServerRdbms=None, include_objects: SqlServerRdbms=None, max_concurrent_backfill_tasks: int=None, max_concurrent_cdc_tasks: int=None):
        """SqlServerSourceConfig - a model defined in OpenAPI

        :param exclude_objects: The exclude_objects of this SqlServerSourceConfig.
        :param include_objects: The include_objects of this SqlServerSourceConfig.
        :param max_concurrent_backfill_tasks: The max_concurrent_backfill_tasks of this SqlServerSourceConfig.
        :param max_concurrent_cdc_tasks: The max_concurrent_cdc_tasks of this SqlServerSourceConfig.
        """
        self.openapi_types = {
            'exclude_objects': SqlServerRdbms,
            'include_objects': SqlServerRdbms,
            'max_concurrent_backfill_tasks': int,
            'max_concurrent_cdc_tasks': int
        }

        self.attribute_map = {
            'exclude_objects': 'excludeObjects',
            'include_objects': 'includeObjects',
            'max_concurrent_backfill_tasks': 'maxConcurrentBackfillTasks',
            'max_concurrent_cdc_tasks': 'maxConcurrentCdcTasks'
        }

        self._exclude_objects = exclude_objects
        self._include_objects = include_objects
        self._max_concurrent_backfill_tasks = max_concurrent_backfill_tasks
        self._max_concurrent_cdc_tasks = max_concurrent_cdc_tasks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlServerSourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlServerSourceConfig of this SqlServerSourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude_objects(self):
        """Gets the exclude_objects of this SqlServerSourceConfig.


        :return: The exclude_objects of this SqlServerSourceConfig.
        :rtype: SqlServerRdbms
        """
        return self._exclude_objects

    @exclude_objects.setter
    def exclude_objects(self, exclude_objects):
        """Sets the exclude_objects of this SqlServerSourceConfig.


        :param exclude_objects: The exclude_objects of this SqlServerSourceConfig.
        :type exclude_objects: SqlServerRdbms
        """

        self._exclude_objects = exclude_objects

    @property
    def include_objects(self):
        """Gets the include_objects of this SqlServerSourceConfig.


        :return: The include_objects of this SqlServerSourceConfig.
        :rtype: SqlServerRdbms
        """
        return self._include_objects

    @include_objects.setter
    def include_objects(self, include_objects):
        """Sets the include_objects of this SqlServerSourceConfig.


        :param include_objects: The include_objects of this SqlServerSourceConfig.
        :type include_objects: SqlServerRdbms
        """

        self._include_objects = include_objects

    @property
    def max_concurrent_backfill_tasks(self):
        """Gets the max_concurrent_backfill_tasks of this SqlServerSourceConfig.

        Max concurrent backfill tasks.

        :return: The max_concurrent_backfill_tasks of this SqlServerSourceConfig.
        :rtype: int
        """
        return self._max_concurrent_backfill_tasks

    @max_concurrent_backfill_tasks.setter
    def max_concurrent_backfill_tasks(self, max_concurrent_backfill_tasks):
        """Sets the max_concurrent_backfill_tasks of this SqlServerSourceConfig.

        Max concurrent backfill tasks.

        :param max_concurrent_backfill_tasks: The max_concurrent_backfill_tasks of this SqlServerSourceConfig.
        :type max_concurrent_backfill_tasks: int
        """

        self._max_concurrent_backfill_tasks = max_concurrent_backfill_tasks

    @property
    def max_concurrent_cdc_tasks(self):
        """Gets the max_concurrent_cdc_tasks of this SqlServerSourceConfig.

        Max concurrent CDC tasks.

        :return: The max_concurrent_cdc_tasks of this SqlServerSourceConfig.
        :rtype: int
        """
        return self._max_concurrent_cdc_tasks

    @max_concurrent_cdc_tasks.setter
    def max_concurrent_cdc_tasks(self, max_concurrent_cdc_tasks):
        """Sets the max_concurrent_cdc_tasks of this SqlServerSourceConfig.

        Max concurrent CDC tasks.

        :param max_concurrent_cdc_tasks: The max_concurrent_cdc_tasks of this SqlServerSourceConfig.
        :type max_concurrent_cdc_tasks: int
        """

        self._max_concurrent_cdc_tasks = max_concurrent_cdc_tasks
