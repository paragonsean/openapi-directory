/*
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsPeering;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for list DNS peerings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:58.825957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDnsPeeringsResponse {
  public static final String SERIALIZED_NAME_DNS_PEERINGS = "dnsPeerings";
  @SerializedName(SERIALIZED_NAME_DNS_PEERINGS)
  private List<DnsPeering> dnsPeerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public ListDnsPeeringsResponse() {
  }

  public ListDnsPeeringsResponse dnsPeerings(List<DnsPeering> dnsPeerings) {
    this.dnsPeerings = dnsPeerings;
    return this;
  }

  public ListDnsPeeringsResponse addDnsPeeringsItem(DnsPeering dnsPeeringsItem) {
    if (this.dnsPeerings == null) {
      this.dnsPeerings = new ArrayList<>();
    }
    this.dnsPeerings.add(dnsPeeringsItem);
    return this;
  }

  /**
   * List of dns peering.
   * @return dnsPeerings
   */
  @javax.annotation.Nullable
  public List<DnsPeering> getDnsPeerings() {
    return dnsPeerings;
  }

  public void setDnsPeerings(List<DnsPeering> dnsPeerings) {
    this.dnsPeerings = dnsPeerings;
  }


  public ListDnsPeeringsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * A token, which can be sent as &#x60;page_token&#x60; to retrieve the next page. If this field is omitted, there are no subsequent pages.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDnsPeeringsResponse listDnsPeeringsResponse = (ListDnsPeeringsResponse) o;
    return Objects.equals(this.dnsPeerings, listDnsPeeringsResponse.dnsPeerings) &&
        Objects.equals(this.nextPageToken, listDnsPeeringsResponse.nextPageToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsPeerings, nextPageToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDnsPeeringsResponse {\n");
    sb.append("    dnsPeerings: ").append(toIndentedString(dnsPeerings)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsPeerings");
    openapiFields.add("nextPageToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDnsPeeringsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDnsPeeringsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDnsPeeringsResponse is not found in the empty JSON string", ListDnsPeeringsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDnsPeeringsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDnsPeeringsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dnsPeerings") != null && !jsonObj.get("dnsPeerings").isJsonNull()) {
        JsonArray jsonArraydnsPeerings = jsonObj.getAsJsonArray("dnsPeerings");
        if (jsonArraydnsPeerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnsPeerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnsPeerings` to be an array in the JSON string but got `%s`", jsonObj.get("dnsPeerings").toString()));
          }

          // validate the optional field `dnsPeerings` (array)
          for (int i = 0; i < jsonArraydnsPeerings.size(); i++) {
            DnsPeering.validateJsonElement(jsonArraydnsPeerings.get(i));
          };
        }
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDnsPeeringsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDnsPeeringsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDnsPeeringsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDnsPeeringsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDnsPeeringsResponse>() {
           @Override
           public void write(JsonWriter out, ListDnsPeeringsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDnsPeeringsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDnsPeeringsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDnsPeeringsResponse
   * @throws IOException if the JSON string is invalid with respect to ListDnsPeeringsResponse
   */
  public static ListDnsPeeringsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDnsPeeringsResponse.class);
  }

  /**
   * Convert an instance of ListDnsPeeringsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

