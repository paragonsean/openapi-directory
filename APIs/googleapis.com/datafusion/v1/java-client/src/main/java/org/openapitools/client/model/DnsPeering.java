/*
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DNS peering configuration. These configurations are used to create DNS peering with the customer Cloud DNS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:58.825957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DnsPeering {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET_NETWORK = "targetNetwork";
  @SerializedName(SERIALIZED_NAME_TARGET_NETWORK)
  private String targetNetwork;

  public static final String SERIALIZED_NAME_TARGET_PROJECT = "targetProject";
  @SerializedName(SERIALIZED_NAME_TARGET_PROJECT)
  private String targetProject;

  public DnsPeering() {
  }

  public DnsPeering description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Optional description of the dns zone.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DnsPeering domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Required. The dns name suffix of the zone.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DnsPeering name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The resource name of the dns peering zone. Format: projects/{project}/locations/{location}/instances/{instance}/dnsPeerings/{dns_peering}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DnsPeering targetNetwork(String targetNetwork) {
    this.targetNetwork = targetNetwork;
    return this;
  }

  /**
   * Optional. Optional target network to which dns peering should happen.
   * @return targetNetwork
   */
  @javax.annotation.Nullable
  public String getTargetNetwork() {
    return targetNetwork;
  }

  public void setTargetNetwork(String targetNetwork) {
    this.targetNetwork = targetNetwork;
  }


  public DnsPeering targetProject(String targetProject) {
    this.targetProject = targetProject;
    return this;
  }

  /**
   * Optional. Optional target project to which dns peering should happen.
   * @return targetProject
   */
  @javax.annotation.Nullable
  public String getTargetProject() {
    return targetProject;
  }

  public void setTargetProject(String targetProject) {
    this.targetProject = targetProject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsPeering dnsPeering = (DnsPeering) o;
    return Objects.equals(this.description, dnsPeering.description) &&
        Objects.equals(this.domain, dnsPeering.domain) &&
        Objects.equals(this.name, dnsPeering.name) &&
        Objects.equals(this.targetNetwork, dnsPeering.targetNetwork) &&
        Objects.equals(this.targetProject, dnsPeering.targetProject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, domain, name, targetNetwork, targetProject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsPeering {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetNetwork: ").append(toIndentedString(targetNetwork)).append("\n");
    sb.append("    targetProject: ").append(toIndentedString(targetProject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("name");
    openapiFields.add("targetNetwork");
    openapiFields.add("targetProject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DnsPeering
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnsPeering.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnsPeering is not found in the empty JSON string", DnsPeering.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnsPeering.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnsPeering` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("targetNetwork") != null && !jsonObj.get("targetNetwork").isJsonNull()) && !jsonObj.get("targetNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNetwork").toString()));
      }
      if ((jsonObj.get("targetProject") != null && !jsonObj.get("targetProject").isJsonNull()) && !jsonObj.get("targetProject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnsPeering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnsPeering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnsPeering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnsPeering.class));

       return (TypeAdapter<T>) new TypeAdapter<DnsPeering>() {
           @Override
           public void write(JsonWriter out, DnsPeering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnsPeering read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DnsPeering given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DnsPeering
   * @throws IOException if the JSON string is invalid with respect to DnsPeering
   */
  public static DnsPeering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnsPeering.class);
  }

  /**
   * Convert an instance of DnsPeering to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

