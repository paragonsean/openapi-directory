/*
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies Data Fusion accelerators for an instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:58.825957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Accelerator {
  /**
   * The type of an accelator for a CDF instance.
   */
  @JsonAdapter(AcceleratorTypeEnum.Adapter.class)
  public enum AcceleratorTypeEnum {
    ACCELERATOR_TYPE_UNSPECIFIED("ACCELERATOR_TYPE_UNSPECIFIED"),
    
    CDC("CDC"),
    
    HEALTHCARE("HEALTHCARE"),
    
    CCAI_INSIGHTS("CCAI_INSIGHTS"),
    
    CLOUDSEARCH("CLOUDSEARCH");

    private String value;

    AcceleratorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcceleratorTypeEnum fromValue(String value) {
      for (AcceleratorTypeEnum b : AcceleratorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcceleratorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcceleratorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcceleratorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcceleratorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcceleratorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE = "acceleratorType";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE)
  private AcceleratorTypeEnum acceleratorType;

  /**
   * The state of the accelerator.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public Accelerator() {
  }

  public Accelerator acceleratorType(AcceleratorTypeEnum acceleratorType) {
    this.acceleratorType = acceleratorType;
    return this;
  }

  /**
   * The type of an accelator for a CDF instance.
   * @return acceleratorType
   */
  @javax.annotation.Nullable
  public AcceleratorTypeEnum getAcceleratorType() {
    return acceleratorType;
  }

  public void setAcceleratorType(AcceleratorTypeEnum acceleratorType) {
    this.acceleratorType = acceleratorType;
  }


  public Accelerator state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the accelerator.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Accelerator accelerator = (Accelerator) o;
    return Objects.equals(this.acceleratorType, accelerator.acceleratorType) &&
        Objects.equals(this.state, accelerator.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorType, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Accelerator {\n");
    sb.append("    acceleratorType: ").append(toIndentedString(acceleratorType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorType");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Accelerator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Accelerator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Accelerator is not found in the empty JSON string", Accelerator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Accelerator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Accelerator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acceleratorType") != null && !jsonObj.get("acceleratorType").isJsonNull()) && !jsonObj.get("acceleratorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceleratorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceleratorType").toString()));
      }
      // validate the optional field `acceleratorType`
      if (jsonObj.get("acceleratorType") != null && !jsonObj.get("acceleratorType").isJsonNull()) {
        AcceleratorTypeEnum.validateJsonElement(jsonObj.get("acceleratorType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Accelerator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Accelerator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Accelerator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Accelerator.class));

       return (TypeAdapter<T>) new TypeAdapter<Accelerator>() {
           @Override
           public void write(JsonWriter out, Accelerator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Accelerator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Accelerator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Accelerator
   * @throws IOException if the JSON string is invalid with respect to Accelerator
   */
  public static Accelerator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Accelerator.class);
  }

  /**
   * Convert an instance of Accelerator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

