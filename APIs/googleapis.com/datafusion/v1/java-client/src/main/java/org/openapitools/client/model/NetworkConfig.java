/*
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrivateServiceConnectConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network configuration for a Data Fusion instance. These configurations are used for peering with the customer network. Configurations are optional when a public Data Fusion instance is to be created. However, providing these configurations allows several benefits, such as reduced network latency while accessing the customer resources from managed Data Fusion instance nodes, as well as access to the customer on-prem resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:58.825957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfig {
  /**
   * Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    CONNECTION_TYPE_UNSPECIFIED("CONNECTION_TYPE_UNSPECIFIED"),
    
    VPC_PEERING("VPC_PEERING"),
    
    PRIVATE_SERVICE_CONNECT_INTERFACES("PRIVATE_SERVICE_CONNECT_INTERFACES");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  public static final String SERIALIZED_NAME_IP_ALLOCATION = "ipAllocation";
  @SerializedName(SERIALIZED_NAME_IP_ALLOCATION)
  private String ipAllocation;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PRIVATE_SERVICE_CONNECT_CONFIG = "privateServiceConnectConfig";
  @SerializedName(SERIALIZED_NAME_PRIVATE_SERVICE_CONNECT_CONFIG)
  private PrivateServiceConnectConfig privateServiceConnectConfig;

  public NetworkConfig() {
  }

  public NetworkConfig connectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  public NetworkConfig ipAllocation(String ipAllocation) {
    this.ipAllocation = ipAllocation;
    return this;
  }

  /**
   * Optional. The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network. This is required only when using connection type VPC_PEERING. Format: a.b.c.d/22 Example: 192.168.0.0/22
   * @return ipAllocation
   */
  @javax.annotation.Nullable
  public String getIpAllocation() {
    return ipAllocation;
  }

  public void setIpAllocation(String ipAllocation) {
    this.ipAllocation = ipAllocation;
  }


  public NetworkConfig network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Optional. Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. This is required only when using connection type VPC peering. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}. This is only required for connectivity type VPC_PEERING.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public NetworkConfig privateServiceConnectConfig(PrivateServiceConnectConfig privateServiceConnectConfig) {
    this.privateServiceConnectConfig = privateServiceConnectConfig;
    return this;
  }

  /**
   * Get privateServiceConnectConfig
   * @return privateServiceConnectConfig
   */
  @javax.annotation.Nullable
  public PrivateServiceConnectConfig getPrivateServiceConnectConfig() {
    return privateServiceConnectConfig;
  }

  public void setPrivateServiceConnectConfig(PrivateServiceConnectConfig privateServiceConnectConfig) {
    this.privateServiceConnectConfig = privateServiceConnectConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfig networkConfig = (NetworkConfig) o;
    return Objects.equals(this.connectionType, networkConfig.connectionType) &&
        Objects.equals(this.ipAllocation, networkConfig.ipAllocation) &&
        Objects.equals(this.network, networkConfig.network) &&
        Objects.equals(this.privateServiceConnectConfig, networkConfig.privateServiceConnectConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionType, ipAllocation, network, privateServiceConnectConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfig {\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    ipAllocation: ").append(toIndentedString(ipAllocation)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    privateServiceConnectConfig: ").append(toIndentedString(privateServiceConnectConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionType");
    openapiFields.add("ipAllocation");
    openapiFields.add("network");
    openapiFields.add("privateServiceConnectConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfig is not found in the empty JSON string", NetworkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) && !jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the optional field `connectionType`
      if (jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) {
        ConnectionTypeEnum.validateJsonElement(jsonObj.get("connectionType"));
      }
      if ((jsonObj.get("ipAllocation") != null && !jsonObj.get("ipAllocation").isJsonNull()) && !jsonObj.get("ipAllocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAllocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAllocation").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `privateServiceConnectConfig`
      if (jsonObj.get("privateServiceConnectConfig") != null && !jsonObj.get("privateServiceConnectConfig").isJsonNull()) {
        PrivateServiceConnectConfig.validateJsonElement(jsonObj.get("privateServiceConnectConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfig>() {
           @Override
           public void write(JsonWriter out, NetworkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfig
   * @throws IOException if the JSON string is invalid with respect to NetworkConfig
   */
  public static NetworkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfig.class);
  }

  /**
   * Convert an instance of NetworkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

