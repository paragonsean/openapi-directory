/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudDataFusionApi);
  }
}(this, function(expect, CloudDataFusionApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudDataFusionApi.DnsPeering();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DnsPeering', function() {
    it('should create an instance of DnsPeering', function() {
      // uncomment below and update the code to test DnsPeering
      //var instance = new CloudDataFusionApi.DnsPeering();
      //expect(instance).to.be.a(CloudDataFusionApi.DnsPeering);
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new CloudDataFusionApi.DnsPeering();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new CloudDataFusionApi.DnsPeering();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudDataFusionApi.DnsPeering();
      //expect(instance).to.be();
    });

    it('should have the property targetNetwork (base name: "targetNetwork")', function() {
      // uncomment below and update the code to test the property targetNetwork
      //var instance = new CloudDataFusionApi.DnsPeering();
      //expect(instance).to.be();
    });

    it('should have the property targetProject (base name: "targetProject")', function() {
      // uncomment below and update the code to test the property targetProject
      //var instance = new CloudDataFusionApi.DnsPeering();
      //expect(instance).to.be();
    });

  });

}));
