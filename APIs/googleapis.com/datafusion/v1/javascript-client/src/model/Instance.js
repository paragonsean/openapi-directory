/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Accelerator from './Accelerator';
import CryptoKeyConfig from './CryptoKeyConfig';
import EventPublishConfig from './EventPublishConfig';
import NetworkConfig from './NetworkConfig';
import Version from './Version';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * Represents a Data Fusion instance.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('accelerators')) {
                obj['accelerators'] = ApiClient.convertToType(data['accelerators'], [Accelerator]);
            }
            if (data.hasOwnProperty('apiEndpoint')) {
                obj['apiEndpoint'] = ApiClient.convertToType(data['apiEndpoint'], 'String');
            }
            if (data.hasOwnProperty('availableVersion')) {
                obj['availableVersion'] = ApiClient.convertToType(data['availableVersion'], [Version]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('cryptoKeyConfig')) {
                obj['cryptoKeyConfig'] = CryptoKeyConfig.constructFromObject(data['cryptoKeyConfig']);
            }
            if (data.hasOwnProperty('dataplexDataLineageIntegrationEnabled')) {
                obj['dataplexDataLineageIntegrationEnabled'] = ApiClient.convertToType(data['dataplexDataLineageIntegrationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dataprocServiceAccount')) {
                obj['dataprocServiceAccount'] = ApiClient.convertToType(data['dataprocServiceAccount'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disabledReason')) {
                obj['disabledReason'] = ApiClient.convertToType(data['disabledReason'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableRbac')) {
                obj['enableRbac'] = ApiClient.convertToType(data['enableRbac'], 'Boolean');
            }
            if (data.hasOwnProperty('enableStackdriverLogging')) {
                obj['enableStackdriverLogging'] = ApiClient.convertToType(data['enableStackdriverLogging'], 'Boolean');
            }
            if (data.hasOwnProperty('enableStackdriverMonitoring')) {
                obj['enableStackdriverMonitoring'] = ApiClient.convertToType(data['enableStackdriverMonitoring'], 'Boolean');
            }
            if (data.hasOwnProperty('enableZoneSeparation')) {
                obj['enableZoneSeparation'] = ApiClient.convertToType(data['enableZoneSeparation'], 'Boolean');
            }
            if (data.hasOwnProperty('eventPublishConfig')) {
                obj['eventPublishConfig'] = EventPublishConfig.constructFromObject(data['eventPublishConfig']);
            }
            if (data.hasOwnProperty('gcsBucket')) {
                obj['gcsBucket'] = ApiClient.convertToType(data['gcsBucket'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = NetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], {'String': 'String'});
            }
            if (data.hasOwnProperty('p4ServiceAccount')) {
                obj['p4ServiceAccount'] = ApiClient.convertToType(data['p4ServiceAccount'], 'String');
            }
            if (data.hasOwnProperty('patchRevision')) {
                obj['patchRevision'] = ApiClient.convertToType(data['patchRevision'], 'String');
            }
            if (data.hasOwnProperty('privateInstance')) {
                obj['privateInstance'] = ApiClient.convertToType(data['privateInstance'], 'Boolean');
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('serviceEndpoint')) {
                obj['serviceEndpoint'] = ApiClient.convertToType(data['serviceEndpoint'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('tenantProjectId')) {
                obj['tenantProjectId'] = ApiClient.convertToType(data['tenantProjectId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('workforceIdentityServiceEndpoint')) {
                obj['workforceIdentityServiceEndpoint'] = ApiClient.convertToType(data['workforceIdentityServiceEndpoint'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        if (data['accelerators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accelerators'])) {
                throw new Error("Expected the field `accelerators` to be an array in the JSON data but got " + data['accelerators']);
            }
            // validate the optional field `accelerators` (array)
            for (const item of data['accelerators']) {
                Accelerator.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['apiEndpoint'] && !(typeof data['apiEndpoint'] === 'string' || data['apiEndpoint'] instanceof String)) {
            throw new Error("Expected the field `apiEndpoint` to be a primitive type in the JSON string but got " + data['apiEndpoint']);
        }
        if (data['availableVersion']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableVersion'])) {
                throw new Error("Expected the field `availableVersion` to be an array in the JSON data but got " + data['availableVersion']);
            }
            // validate the optional field `availableVersion` (array)
            for (const item of data['availableVersion']) {
                Version.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `cryptoKeyConfig`
        if (data['cryptoKeyConfig']) { // data not null
          CryptoKeyConfig.validateJSON(data['cryptoKeyConfig']);
        }
        // ensure the json data is a string
        if (data['dataprocServiceAccount'] && !(typeof data['dataprocServiceAccount'] === 'string' || data['dataprocServiceAccount'] instanceof String)) {
            throw new Error("Expected the field `dataprocServiceAccount` to be a primitive type in the JSON string but got " + data['dataprocServiceAccount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['disabledReason'])) {
            throw new Error("Expected the field `disabledReason` to be an array in the JSON data but got " + data['disabledReason']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `eventPublishConfig`
        if (data['eventPublishConfig']) { // data not null
          EventPublishConfig.validateJSON(data['eventPublishConfig']);
        }
        // ensure the json data is a string
        if (data['gcsBucket'] && !(typeof data['gcsBucket'] === 'string' || data['gcsBucket'] instanceof String)) {
            throw new Error("Expected the field `gcsBucket` to be a primitive type in the JSON string but got " + data['gcsBucket']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          NetworkConfig.validateJSON(data['networkConfig']);
        }
        // ensure the json data is a string
        if (data['p4ServiceAccount'] && !(typeof data['p4ServiceAccount'] === 'string' || data['p4ServiceAccount'] instanceof String)) {
            throw new Error("Expected the field `p4ServiceAccount` to be a primitive type in the JSON string but got " + data['p4ServiceAccount']);
        }
        // ensure the json data is a string
        if (data['patchRevision'] && !(typeof data['patchRevision'] === 'string' || data['patchRevision'] instanceof String)) {
            throw new Error("Expected the field `patchRevision` to be a primitive type in the JSON string but got " + data['patchRevision']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is a string
        if (data['serviceEndpoint'] && !(typeof data['serviceEndpoint'] === 'string' || data['serviceEndpoint'] instanceof String)) {
            throw new Error("Expected the field `serviceEndpoint` to be a primitive type in the JSON string but got " + data['serviceEndpoint']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // ensure the json data is a string
        if (data['tenantProjectId'] && !(typeof data['tenantProjectId'] === 'string' || data['tenantProjectId'] instanceof String)) {
            throw new Error("Expected the field `tenantProjectId` to be a primitive type in the JSON string but got " + data['tenantProjectId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['workforceIdentityServiceEndpoint'] && !(typeof data['workforceIdentityServiceEndpoint'] === 'string' || data['workforceIdentityServiceEndpoint'] instanceof String)) {
            throw new Error("Expected the field `workforceIdentityServiceEndpoint` to be a primitive type in the JSON string but got " + data['workforceIdentityServiceEndpoint']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * Output only. List of accelerators enabled for this CDF instance.
 * @member {Array.<module:model/Accelerator>} accelerators
 */
Instance.prototype['accelerators'] = undefined;

/**
 * Output only. Endpoint on which the REST APIs is accessible.
 * @member {String} apiEndpoint
 */
Instance.prototype['apiEndpoint'] = undefined;

/**
 * Output only. Available versions that the instance can be upgraded to using UpdateInstanceRequest.
 * @member {Array.<module:model/Version>} availableVersion
 */
Instance.prototype['availableVersion'] = undefined;

/**
 * Output only. The time the instance was created.
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * @member {module:model/CryptoKeyConfig} cryptoKeyConfig
 */
Instance.prototype['cryptoKeyConfig'] = undefined;

/**
 * Optional. Option to enable the Dataplex Lineage Integration feature.
 * @member {Boolean} dataplexDataLineageIntegrationEnabled
 */
Instance.prototype['dataplexDataLineageIntegrationEnabled'] = undefined;

/**
 * User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.
 * @member {String} dataprocServiceAccount
 */
Instance.prototype['dataprocServiceAccount'] = undefined;

/**
 * A description of this instance.
 * @member {String} description
 */
Instance.prototype['description'] = undefined;

/**
 * Output only. If the instance state is DISABLED, the reason for disabling the instance.
 * @member {Array.<module:model/Instance.DisabledReasonEnum>} disabledReason
 */
Instance.prototype['disabledReason'] = undefined;

/**
 * Display name for an instance.
 * @member {String} displayName
 */
Instance.prototype['displayName'] = undefined;

/**
 * Option to enable granular role-based access control.
 * @member {Boolean} enableRbac
 */
Instance.prototype['enableRbac'] = undefined;

/**
 * Option to enable Stackdriver Logging.
 * @member {Boolean} enableStackdriverLogging
 */
Instance.prototype['enableStackdriverLogging'] = undefined;

/**
 * Option to enable Stackdriver Monitoring.
 * @member {Boolean} enableStackdriverMonitoring
 */
Instance.prototype['enableStackdriverMonitoring'] = undefined;

/**
 * Option to enable granular zone separation.
 * @member {Boolean} enableZoneSeparation
 */
Instance.prototype['enableZoneSeparation'] = undefined;

/**
 * @member {module:model/EventPublishConfig} eventPublishConfig
 */
Instance.prototype['eventPublishConfig'] = undefined;

/**
 * Output only. Cloud Storage bucket generated by Data Fusion in the customer project.
 * @member {String} gcsBucket
 */
Instance.prototype['gcsBucket'] = undefined;

/**
 * The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.
 * @member {Object.<String, String>} labels
 */
Instance.prototype['labels'] = undefined;

/**
 * Output only. The name of this instance is in the form of projects/{project}/locations/{location}/instances/{instance}.
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * @member {module:model/NetworkConfig} networkConfig
 */
Instance.prototype['networkConfig'] = undefined;

/**
 * Map of additional options used to configure the behavior of Data Fusion instance.
 * @member {Object.<String, String>} options
 */
Instance.prototype['options'] = undefined;

/**
 * Output only. P4 service account for the customer project.
 * @member {String} p4ServiceAccount
 */
Instance.prototype['p4ServiceAccount'] = undefined;

/**
 * Optional. Current patch revision of the Data Fusion.
 * @member {String} patchRevision
 */
Instance.prototype['patchRevision'] = undefined;

/**
 * Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.
 * @member {Boolean} privateInstance
 */
Instance.prototype['privateInstance'] = undefined;

/**
 * Output only. Reserved for future use.
 * @member {Boolean} satisfiesPzs
 */
Instance.prototype['satisfiesPzs'] = undefined;

/**
 * Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.
 * @member {String} serviceAccount
 */
Instance.prototype['serviceAccount'] = undefined;

/**
 * Output only. Endpoint on which the Data Fusion UI is accessible.
 * @member {String} serviceEndpoint
 */
Instance.prototype['serviceEndpoint'] = undefined;

/**
 * Output only. The current state of this Data Fusion instance.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. Additional information about the current state of this Data Fusion instance if available.
 * @member {String} stateMessage
 */
Instance.prototype['stateMessage'] = undefined;

/**
 * Output only. The name of the tenant project.
 * @member {String} tenantProjectId
 */
Instance.prototype['tenantProjectId'] = undefined;

/**
 * Required. Instance type.
 * @member {module:model/Instance.TypeEnum} type
 */
Instance.prototype['type'] = undefined;

/**
 * Output only. The time the instance was last updated.
 * @member {String} updateTime
 */
Instance.prototype['updateTime'] = undefined;

/**
 * Current version of the Data Fusion. Only specifiable in Update.
 * @member {String} version
 */
Instance.prototype['version'] = undefined;

/**
 * Output only. Endpoint on which the Data Fusion UI is accessible to third-party users
 * @member {String} workforceIdentityServiceEndpoint
 */
Instance.prototype['workforceIdentityServiceEndpoint'] = undefined;

/**
 * Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
 * @member {String} zone
 */
Instance.prototype['zone'] = undefined;





/**
 * Allowed values for the <code>disabledReason</code> property.
 * @enum {String}
 * @readonly
 */
Instance['DisabledReasonEnum'] = {

    /**
     * value: "DISABLED_REASON_UNSPECIFIED"
     * @const
     */
    "DISABLED_REASON_UNSPECIFIED": "DISABLED_REASON_UNSPECIFIED",

    /**
     * value: "KMS_KEY_ISSUE"
     * @const
     */
    "KMS_KEY_ISSUE": "KMS_KEY_ISSUE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "UPGRADING"
     * @const
     */
    "UPGRADING": "UPGRADING",

    /**
     * value: "RESTARTING"
     * @const
     */
    "RESTARTING": "RESTARTING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "AUTO_UPDATING"
     * @const
     */
    "AUTO_UPDATING": "AUTO_UPDATING",

    /**
     * value: "AUTO_UPGRADING"
     * @const
     */
    "AUTO_UPGRADING": "AUTO_UPGRADING",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Instance['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",

    /**
     * value: "ENTERPRISE"
     * @const
     */
    "ENTERPRISE": "ENTERPRISE",

    /**
     * value: "DEVELOPER"
     * @const
     */
    "DEVELOPER": "DEVELOPER"
};



export default Instance;

