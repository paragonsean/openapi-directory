/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Version model module.
 * @module model/Version
 * @version v1
 */
class Version {
    /**
     * Constructs a new <code>Version</code>.
     * The Data Fusion version. This proto message stores information about certain Data Fusion version, which is used for Data Fusion version upgrade.
     * @alias module:model/Version
     */
    constructor() { 
        
        Version.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Version</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Version} obj Optional instance to populate.
     * @return {module:model/Version} The populated <code>Version</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Version();

            if (data.hasOwnProperty('availableFeatures')) {
                obj['availableFeatures'] = ApiClient.convertToType(data['availableFeatures'], ['String']);
            }
            if (data.hasOwnProperty('defaultVersion')) {
                obj['defaultVersion'] = ApiClient.convertToType(data['defaultVersion'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('versionNumber')) {
                obj['versionNumber'] = ApiClient.convertToType(data['versionNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Version</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Version</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['availableFeatures'])) {
            throw new Error("Expected the field `availableFeatures` to be an array in the JSON data but got " + data['availableFeatures']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['versionNumber'] && !(typeof data['versionNumber'] === 'string' || data['versionNumber'] instanceof String)) {
            throw new Error("Expected the field `versionNumber` to be a primitive type in the JSON string but got " + data['versionNumber']);
        }

        return true;
    }


}



/**
 * Represents a list of available feature names for a given version.
 * @member {Array.<String>} availableFeatures
 */
Version.prototype['availableFeatures'] = undefined;

/**
 * Whether this is currently the default version for Cloud Data Fusion
 * @member {Boolean} defaultVersion
 */
Version.prototype['defaultVersion'] = undefined;

/**
 * Type represents the release availability of the version
 * @member {module:model/Version.TypeEnum} type
 */
Version.prototype['type'] = undefined;

/**
 * The version number of the Data Fusion instance, such as '6.0.1.0'.
 * @member {String} versionNumber
 */
Version.prototype['versionNumber'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Version['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "TYPE_PREVIEW"
     * @const
     */
    "PREVIEW": "TYPE_PREVIEW",

    /**
     * value: "TYPE_GENERAL_AVAILABILITY"
     * @const
     */
    "GENERAL_AVAILABILITY": "TYPE_GENERAL_AVAILABILITY"
};



export default Version;

