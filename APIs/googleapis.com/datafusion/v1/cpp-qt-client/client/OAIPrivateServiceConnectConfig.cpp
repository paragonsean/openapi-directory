/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateServiceConnectConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateServiceConnectConfig::OAIPrivateServiceConnectConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateServiceConnectConfig::OAIPrivateServiceConnectConfig() {
    this->initializeModel();
}

OAIPrivateServiceConnectConfig::~OAIPrivateServiceConnectConfig() {}

void OAIPrivateServiceConnectConfig::initializeModel() {

    m_effective_unreachable_cidr_block_isSet = false;
    m_effective_unreachable_cidr_block_isValid = false;

    m_network_attachment_isSet = false;
    m_network_attachment_isValid = false;

    m_unreachable_cidr_block_isSet = false;
    m_unreachable_cidr_block_isValid = false;
}

void OAIPrivateServiceConnectConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateServiceConnectConfig::fromJsonObject(QJsonObject json) {

    m_effective_unreachable_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_effective_unreachable_cidr_block, json[QString("effectiveUnreachableCidrBlock")]);
    m_effective_unreachable_cidr_block_isSet = !json[QString("effectiveUnreachableCidrBlock")].isNull() && m_effective_unreachable_cidr_block_isValid;

    m_network_attachment_isValid = ::OpenAPI::fromJsonValue(m_network_attachment, json[QString("networkAttachment")]);
    m_network_attachment_isSet = !json[QString("networkAttachment")].isNull() && m_network_attachment_isValid;

    m_unreachable_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_unreachable_cidr_block, json[QString("unreachableCidrBlock")]);
    m_unreachable_cidr_block_isSet = !json[QString("unreachableCidrBlock")].isNull() && m_unreachable_cidr_block_isValid;
}

QString OAIPrivateServiceConnectConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateServiceConnectConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_unreachable_cidr_block_isSet) {
        obj.insert(QString("effectiveUnreachableCidrBlock"), ::OpenAPI::toJsonValue(m_effective_unreachable_cidr_block));
    }
    if (m_network_attachment_isSet) {
        obj.insert(QString("networkAttachment"), ::OpenAPI::toJsonValue(m_network_attachment));
    }
    if (m_unreachable_cidr_block_isSet) {
        obj.insert(QString("unreachableCidrBlock"), ::OpenAPI::toJsonValue(m_unreachable_cidr_block));
    }
    return obj;
}

QString OAIPrivateServiceConnectConfig::getEffectiveUnreachableCidrBlock() const {
    return m_effective_unreachable_cidr_block;
}
void OAIPrivateServiceConnectConfig::setEffectiveUnreachableCidrBlock(const QString &effective_unreachable_cidr_block) {
    m_effective_unreachable_cidr_block = effective_unreachable_cidr_block;
    m_effective_unreachable_cidr_block_isSet = true;
}

bool OAIPrivateServiceConnectConfig::is_effective_unreachable_cidr_block_Set() const{
    return m_effective_unreachable_cidr_block_isSet;
}

bool OAIPrivateServiceConnectConfig::is_effective_unreachable_cidr_block_Valid() const{
    return m_effective_unreachable_cidr_block_isValid;
}

QString OAIPrivateServiceConnectConfig::getNetworkAttachment() const {
    return m_network_attachment;
}
void OAIPrivateServiceConnectConfig::setNetworkAttachment(const QString &network_attachment) {
    m_network_attachment = network_attachment;
    m_network_attachment_isSet = true;
}

bool OAIPrivateServiceConnectConfig::is_network_attachment_Set() const{
    return m_network_attachment_isSet;
}

bool OAIPrivateServiceConnectConfig::is_network_attachment_Valid() const{
    return m_network_attachment_isValid;
}

QString OAIPrivateServiceConnectConfig::getUnreachableCidrBlock() const {
    return m_unreachable_cidr_block;
}
void OAIPrivateServiceConnectConfig::setUnreachableCidrBlock(const QString &unreachable_cidr_block) {
    m_unreachable_cidr_block = unreachable_cidr_block;
    m_unreachable_cidr_block_isSet = true;
}

bool OAIPrivateServiceConnectConfig::is_unreachable_cidr_block_Set() const{
    return m_unreachable_cidr_block_isSet;
}

bool OAIPrivateServiceConnectConfig::is_unreachable_cidr_block_Valid() const{
    return m_unreachable_cidr_block_isValid;
}

bool OAIPrivateServiceConnectConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_unreachable_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateServiceConnectConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
