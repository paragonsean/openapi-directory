/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAvailableVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAvailableVersionsResponse::OAIListAvailableVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAvailableVersionsResponse::OAIListAvailableVersionsResponse() {
    this->initializeModel();
}

OAIListAvailableVersionsResponse::~OAIListAvailableVersionsResponse() {}

void OAIListAvailableVersionsResponse::initializeModel() {

    m_available_versions_isSet = false;
    m_available_versions_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListAvailableVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAvailableVersionsResponse::fromJsonObject(QJsonObject json) {

    m_available_versions_isValid = ::OpenAPI::fromJsonValue(m_available_versions, json[QString("availableVersions")]);
    m_available_versions_isSet = !json[QString("availableVersions")].isNull() && m_available_versions_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListAvailableVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAvailableVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_available_versions.size() > 0) {
        obj.insert(QString("availableVersions"), ::OpenAPI::toJsonValue(m_available_versions));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIVersion> OAIListAvailableVersionsResponse::getAvailableVersions() const {
    return m_available_versions;
}
void OAIListAvailableVersionsResponse::setAvailableVersions(const QList<OAIVersion> &available_versions) {
    m_available_versions = available_versions;
    m_available_versions_isSet = true;
}

bool OAIListAvailableVersionsResponse::is_available_versions_Set() const{
    return m_available_versions_isSet;
}

bool OAIListAvailableVersionsResponse::is_available_versions_Valid() const{
    return m_available_versions_isValid;
}

QString OAIListAvailableVersionsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListAvailableVersionsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListAvailableVersionsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListAvailableVersionsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListAvailableVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAvailableVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
