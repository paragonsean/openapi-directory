/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersistentDiskData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersistentDiskData::OAIPersistentDiskData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersistentDiskData::OAIPersistentDiskData() {
    this->initializeModel();
}

OAIPersistentDiskData::~OAIPersistentDiskData() {}

void OAIPersistentDiskData::initializeModel() {

    m_cfs_roots_isSet = false;
    m_cfs_roots_isValid = false;

    m_gcs_bucket_names_isSet = false;
    m_gcs_bucket_names_isValid = false;
}

void OAIPersistentDiskData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersistentDiskData::fromJsonObject(QJsonObject json) {

    m_cfs_roots_isValid = ::OpenAPI::fromJsonValue(m_cfs_roots, json[QString("cfsRoots")]);
    m_cfs_roots_isSet = !json[QString("cfsRoots")].isNull() && m_cfs_roots_isValid;

    m_gcs_bucket_names_isValid = ::OpenAPI::fromJsonValue(m_gcs_bucket_names, json[QString("gcsBucketNames")]);
    m_gcs_bucket_names_isSet = !json[QString("gcsBucketNames")].isNull() && m_gcs_bucket_names_isValid;
}

QString OAIPersistentDiskData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersistentDiskData::asJsonObject() const {
    QJsonObject obj;
    if (m_cfs_roots.size() > 0) {
        obj.insert(QString("cfsRoots"), ::OpenAPI::toJsonValue(m_cfs_roots));
    }
    if (m_gcs_bucket_names.size() > 0) {
        obj.insert(QString("gcsBucketNames"), ::OpenAPI::toJsonValue(m_gcs_bucket_names));
    }
    return obj;
}

QList<QString> OAIPersistentDiskData::getCfsRoots() const {
    return m_cfs_roots;
}
void OAIPersistentDiskData::setCfsRoots(const QList<QString> &cfs_roots) {
    m_cfs_roots = cfs_roots;
    m_cfs_roots_isSet = true;
}

bool OAIPersistentDiskData::is_cfs_roots_Set() const{
    return m_cfs_roots_isSet;
}

bool OAIPersistentDiskData::is_cfs_roots_Valid() const{
    return m_cfs_roots_isValid;
}

QList<QString> OAIPersistentDiskData::getGcsBucketNames() const {
    return m_gcs_bucket_names;
}
void OAIPersistentDiskData::setGcsBucketNames(const QList<QString> &gcs_bucket_names) {
    m_gcs_bucket_names = gcs_bucket_names;
    m_gcs_bucket_names_isSet = true;
}

bool OAIPersistentDiskData::is_gcs_bucket_names_Set() const{
    return m_gcs_bucket_names_isSet;
}

bool OAIPersistentDiskData::is_gcs_bucket_names_Valid() const{
    return m_gcs_bucket_names_isValid;
}

bool OAIPersistentDiskData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cfs_roots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_bucket_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersistentDiskData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
