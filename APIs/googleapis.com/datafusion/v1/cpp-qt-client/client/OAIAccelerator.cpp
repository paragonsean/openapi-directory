/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccelerator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccelerator::OAIAccelerator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccelerator::OAIAccelerator() {
    this->initializeModel();
}

OAIAccelerator::~OAIAccelerator() {}

void OAIAccelerator::initializeModel() {

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAccelerator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccelerator::fromJsonObject(QJsonObject json) {

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAccelerator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccelerator::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAccelerator::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIAccelerator::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIAccelerator::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIAccelerator::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAIAccelerator::getState() const {
    return m_state;
}
void OAIAccelerator::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccelerator::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccelerator::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAccelerator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccelerator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
