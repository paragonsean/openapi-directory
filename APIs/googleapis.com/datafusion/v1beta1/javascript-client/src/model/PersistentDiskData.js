/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersistentDiskData model module.
 * @module model/PersistentDiskData
 * @version v1beta1
 */
class PersistentDiskData {
    /**
     * Constructs a new <code>PersistentDiskData</code>.
     * Persistent Disk service-specific Data. Contains information that may not be appropriate for the generic DRZ Augmented View. This currently includes LSV Colossus Roots and GCS Buckets.
     * @alias module:model/PersistentDiskData
     */
    constructor() { 
        
        PersistentDiskData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersistentDiskData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersistentDiskData} obj Optional instance to populate.
     * @return {module:model/PersistentDiskData} The populated <code>PersistentDiskData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersistentDiskData();

            if (data.hasOwnProperty('cfsRoots')) {
                obj['cfsRoots'] = ApiClient.convertToType(data['cfsRoots'], ['String']);
            }
            if (data.hasOwnProperty('gcsBucketNames')) {
                obj['gcsBucketNames'] = ApiClient.convertToType(data['gcsBucketNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersistentDiskData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersistentDiskData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cfsRoots'])) {
            throw new Error("Expected the field `cfsRoots` to be an array in the JSON data but got " + data['cfsRoots']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gcsBucketNames'])) {
            throw new Error("Expected the field `gcsBucketNames` to be an array in the JSON data but got " + data['gcsBucketNames']);
        }

        return true;
    }


}



/**
 * Path to Colossus root for an LSV. NOTE: Unlike `cr_ti_guris` and `cr_ti_prefixes`, the field `cfs_roots` below does not need to be a GUri or GUri prefix. It can simply be any valid CFS or CFS2 Path. The DRZ KR8 SIG has more details overall, but generally the `cfs_roots` provided here should be scoped to an individual Persistent Disk. An example for a PD Disk with a disk ID 3277719120423414466, follows: * `cr_ti_guris` could be ‘/cfs2/pj/pd-cloud-prod’ as this is a valid GUri present in the DG KB and contains enough information to perform location monitoring and scope ownership of the Production Object. * `cfs_roots` would be: ‘/cfs2/pj/pd-cloud-staging/lsv000001234@/ lsv/projects~773365403387~zones~2700~disks~3277719120423414466 ~bank-blue-careful-3526-lsv00054DB1B7254BA3/’ as this allows us to enumerate the files on CFS2 that belong to an individual Disk.
 * @member {Array.<String>} cfsRoots
 */
PersistentDiskData.prototype['cfsRoots'] = undefined;

/**
 * The GCS Buckets that back this snapshot or image. This is required as `cr_ti_prefixes` and `cr_ti_guris` only accept TI resources. This should be the globally unique bucket name.
 * @member {Array.<String>} gcsBucketNames
 */
PersistentDiskData.prototype['gcsBucketNames'] = undefined;






export default PersistentDiskData;

