/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrivateServiceConnectConfig model module.
 * @module model/PrivateServiceConnectConfig
 * @version v1beta1
 */
class PrivateServiceConnectConfig {
    /**
     * Constructs a new <code>PrivateServiceConnectConfig</code>.
     * Configuration for using Private Service Connect to establish connectivity between the Data Fusion consumer project and the corresponding tenant project.
     * @alias module:model/PrivateServiceConnectConfig
     */
    constructor() { 
        
        PrivateServiceConnectConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateServiceConnectConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateServiceConnectConfig} obj Optional instance to populate.
     * @return {module:model/PrivateServiceConnectConfig} The populated <code>PrivateServiceConnectConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateServiceConnectConfig();

            if (data.hasOwnProperty('effectiveUnreachableCidrBlock')) {
                obj['effectiveUnreachableCidrBlock'] = ApiClient.convertToType(data['effectiveUnreachableCidrBlock'], 'String');
            }
            if (data.hasOwnProperty('networkAttachment')) {
                obj['networkAttachment'] = ApiClient.convertToType(data['networkAttachment'], 'String');
            }
            if (data.hasOwnProperty('unreachableCidrBlock')) {
                obj['unreachableCidrBlock'] = ApiClient.convertToType(data['unreachableCidrBlock'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateServiceConnectConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateServiceConnectConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['effectiveUnreachableCidrBlock'] && !(typeof data['effectiveUnreachableCidrBlock'] === 'string' || data['effectiveUnreachableCidrBlock'] instanceof String)) {
            throw new Error("Expected the field `effectiveUnreachableCidrBlock` to be a primitive type in the JSON string but got " + data['effectiveUnreachableCidrBlock']);
        }
        // ensure the json data is a string
        if (data['networkAttachment'] && !(typeof data['networkAttachment'] === 'string' || data['networkAttachment'] instanceof String)) {
            throw new Error("Expected the field `networkAttachment` to be a primitive type in the JSON string but got " + data['networkAttachment']);
        }
        // ensure the json data is a string
        if (data['unreachableCidrBlock'] && !(typeof data['unreachableCidrBlock'] === 'string' || data['unreachableCidrBlock'] instanceof String)) {
            throw new Error("Expected the field `unreachableCidrBlock` to be a primitive type in the JSON string but got " + data['unreachableCidrBlock']);
        }

        return true;
    }


}



/**
 * Output only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC. The size of this block is /25. The format of this field is governed by RFC 4632. Example: 240.0.0.0/25
 * @member {String} effectiveUnreachableCidrBlock
 */
PrivateServiceConnectConfig.prototype['effectiveUnreachableCidrBlock'] = undefined;

/**
 * Required. The reference to the network attachment used to establish private connectivity. It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.
 * @member {String} networkAttachment
 */
PrivateServiceConnectConfig.prototype['networkAttachment'] = undefined;

/**
 * Optional. Input only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC. The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment. This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses. If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632. Example: 192.168.0.0/25
 * @member {String} unreachableCidrBlock
 */
PrivateServiceConnectConfig.prototype['unreachableCidrBlock'] = undefined;






export default PrivateServiceConnectConfig;

