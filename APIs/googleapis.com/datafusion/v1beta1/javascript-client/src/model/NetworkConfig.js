/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivateServiceConnectConfig from './PrivateServiceConnectConfig';

/**
 * The NetworkConfig model module.
 * @module model/NetworkConfig
 * @version v1beta1
 */
class NetworkConfig {
    /**
     * Constructs a new <code>NetworkConfig</code>.
     * Network configuration for a Data Fusion instance. These configurations are used for peering with the customer network. Configurations are optional when a public Data Fusion instance is to be created. However, providing these configurations allows several benefits, such as reduced network latency while accessing the customer resources from managed Data Fusion instance nodes, as well as access to the customer on-prem resources.
     * @alias module:model/NetworkConfig
     */
    constructor() { 
        
        NetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConfig} obj Optional instance to populate.
     * @return {module:model/NetworkConfig} The populated <code>NetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConfig();

            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], 'String');
            }
            if (data.hasOwnProperty('ipAllocation')) {
                obj['ipAllocation'] = ApiClient.convertToType(data['ipAllocation'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('privateServiceConnectConfig')) {
                obj['privateServiceConnectConfig'] = PrivateServiceConnectConfig.constructFromObject(data['privateServiceConnectConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionType'] && !(typeof data['connectionType'] === 'string' || data['connectionType'] instanceof String)) {
            throw new Error("Expected the field `connectionType` to be a primitive type in the JSON string but got " + data['connectionType']);
        }
        // ensure the json data is a string
        if (data['ipAllocation'] && !(typeof data['ipAllocation'] === 'string' || data['ipAllocation'] instanceof String)) {
            throw new Error("Expected the field `ipAllocation` to be a primitive type in the JSON string but got " + data['ipAllocation']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `privateServiceConnectConfig`
        if (data['privateServiceConnectConfig']) { // data not null
          PrivateServiceConnectConfig.validateJSON(data['privateServiceConnectConfig']);
        }

        return true;
    }


}



/**
 * Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.
 * @member {module:model/NetworkConfig.ConnectionTypeEnum} connectionType
 */
NetworkConfig.prototype['connectionType'] = undefined;

/**
 * Optional. The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network. This is required only when using connection type VPC_PEERING. Format: a.b.c.d/22 Example: 192.168.0.0/22
 * @member {String} ipAllocation
 */
NetworkConfig.prototype['ipAllocation'] = undefined;

/**
 * Optional. Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. This is required only when using connection type VPC peering. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}. This is only required for connectivity type VPC_PEERING.
 * @member {String} network
 */
NetworkConfig.prototype['network'] = undefined;

/**
 * @member {module:model/PrivateServiceConnectConfig} privateServiceConnectConfig
 */
NetworkConfig.prototype['privateServiceConnectConfig'] = undefined;





/**
 * Allowed values for the <code>connectionType</code> property.
 * @enum {String}
 * @readonly
 */
NetworkConfig['ConnectionTypeEnum'] = {

    /**
     * value: "CONNECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "CONNECTION_TYPE_UNSPECIFIED": "CONNECTION_TYPE_UNSPECIFIED",

    /**
     * value: "VPC_PEERING"
     * @const
     */
    "VPC_PEERING": "VPC_PEERING",

    /**
     * value: "PRIVATE_SERVICE_CONNECT_INTERFACES"
     * @const
     */
    "PRIVATE_SERVICE_CONNECT_INTERFACES": "PRIVATE_SERVICE_CONNECT_INTERFACES"
};



export default NetworkConfig;

