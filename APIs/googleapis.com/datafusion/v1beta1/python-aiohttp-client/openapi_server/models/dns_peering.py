# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsPeering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, domain: str=None, name: str=None, target_network: str=None, target_project: str=None):
        """DnsPeering - a model defined in OpenAPI

        :param description: The description of this DnsPeering.
        :param domain: The domain of this DnsPeering.
        :param name: The name of this DnsPeering.
        :param target_network: The target_network of this DnsPeering.
        :param target_project: The target_project of this DnsPeering.
        """
        self.openapi_types = {
            'description': str,
            'domain': str,
            'name': str,
            'target_network': str,
            'target_project': str
        }

        self.attribute_map = {
            'description': 'description',
            'domain': 'domain',
            'name': 'name',
            'target_network': 'targetNetwork',
            'target_project': 'targetProject'
        }

        self._description = description
        self._domain = domain
        self._name = name
        self._target_network = target_network
        self._target_project = target_project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsPeering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsPeering of this DnsPeering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DnsPeering.

        Optional. Optional description of the dns zone.

        :return: The description of this DnsPeering.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DnsPeering.

        Optional. Optional description of the dns zone.

        :param description: The description of this DnsPeering.
        :type description: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this DnsPeering.

        Required. The dns name suffix of the zone.

        :return: The domain of this DnsPeering.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DnsPeering.

        Required. The dns name suffix of the zone.

        :param domain: The domain of this DnsPeering.
        :type domain: str
        """

        self._domain = domain

    @property
    def name(self):
        """Gets the name of this DnsPeering.

        Required. The resource name of the dns peering zone. Format: projects/{project}/locations/{location}/instances/{instance}/dnsPeerings/{dns_peering}

        :return: The name of this DnsPeering.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DnsPeering.

        Required. The resource name of the dns peering zone. Format: projects/{project}/locations/{location}/instances/{instance}/dnsPeerings/{dns_peering}

        :param name: The name of this DnsPeering.
        :type name: str
        """

        self._name = name

    @property
    def target_network(self):
        """Gets the target_network of this DnsPeering.

        Optional. Optional target network to which dns peering should happen.

        :return: The target_network of this DnsPeering.
        :rtype: str
        """
        return self._target_network

    @target_network.setter
    def target_network(self, target_network):
        """Sets the target_network of this DnsPeering.

        Optional. Optional target network to which dns peering should happen.

        :param target_network: The target_network of this DnsPeering.
        :type target_network: str
        """

        self._target_network = target_network

    @property
    def target_project(self):
        """Gets the target_project of this DnsPeering.

        Optional. Optional target project to which dns peering should happen.

        :return: The target_project of this DnsPeering.
        :rtype: str
        """
        return self._target_project

    @target_project.setter
    def target_project(self, target_project):
        """Sets the target_project of this DnsPeering.

        Optional. Optional target project to which dns peering should happen.

        :param target_project: The target_project of this DnsPeering.
        :type target_project: str
        """

        self._target_project = target_project
