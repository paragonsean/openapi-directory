# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Accelerator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_type: str=None, state: str=None):
        """Accelerator - a model defined in OpenAPI

        :param accelerator_type: The accelerator_type of this Accelerator.
        :param state: The state of this Accelerator.
        """
        self.openapi_types = {
            'accelerator_type': str,
            'state': str
        }

        self.attribute_map = {
            'accelerator_type': 'acceleratorType',
            'state': 'state'
        }

        self._accelerator_type = accelerator_type
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Accelerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Accelerator of this Accelerator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this Accelerator.

        The type of an accelator for a CDF instance.

        :return: The accelerator_type of this Accelerator.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this Accelerator.

        The type of an accelator for a CDF instance.

        :param accelerator_type: The accelerator_type of this Accelerator.
        :type accelerator_type: str
        """
        allowed_values = ["ACCELERATOR_TYPE_UNSPECIFIED", "CDC", "HEALTHCARE", "CCAI_INSIGHTS", "CLOUDSEARCH"]  # noqa: E501
        if accelerator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `accelerator_type` ({0}), must be one of {1}"
                .format(accelerator_type, allowed_values)
            )

        self._accelerator_type = accelerator_type

    @property
    def state(self):
        """Gets the state of this Accelerator.

        The state of the accelerator.

        :return: The state of this Accelerator.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Accelerator.

        The state of the accelerator.

        :param state: The state of this Accelerator.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED", "DISABLED", "UNKNOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
