# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iam_policy import IAMPolicy
from openapi_server import util


class Namespace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iam_policy: IAMPolicy=None, name: str=None):
        """Namespace - a model defined in OpenAPI

        :param iam_policy: The iam_policy of this Namespace.
        :param name: The name of this Namespace.
        """
        self.openapi_types = {
            'iam_policy': IAMPolicy,
            'name': str
        }

        self.attribute_map = {
            'iam_policy': 'iamPolicy',
            'name': 'name'
        }

        self._iam_policy = iam_policy
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Namespace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Namespace of this Namespace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iam_policy(self):
        """Gets the iam_policy of this Namespace.


        :return: The iam_policy of this Namespace.
        :rtype: IAMPolicy
        """
        return self._iam_policy

    @iam_policy.setter
    def iam_policy(self, iam_policy):
        """Sets the iam_policy of this Namespace.


        :param iam_policy: The iam_policy of this Namespace.
        :type iam_policy: IAMPolicy
        """

        self._iam_policy = iam_policy

    @property
    def name(self):
        """Gets the name of this Namespace.

        Name of the given namespace.

        :return: The name of this Namespace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Namespace.

        Name of the given namespace.

        :param name: The name of this Namespace.
        :type name: str
        """

        self._name = name
