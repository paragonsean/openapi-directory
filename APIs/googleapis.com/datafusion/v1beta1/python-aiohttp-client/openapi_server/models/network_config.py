# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_service_connect_config import PrivateServiceConnectConfig
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_type: str=None, ip_allocation: str=None, network: str=None, private_service_connect_config: PrivateServiceConnectConfig=None):
        """NetworkConfig - a model defined in OpenAPI

        :param connection_type: The connection_type of this NetworkConfig.
        :param ip_allocation: The ip_allocation of this NetworkConfig.
        :param network: The network of this NetworkConfig.
        :param private_service_connect_config: The private_service_connect_config of this NetworkConfig.
        """
        self.openapi_types = {
            'connection_type': str,
            'ip_allocation': str,
            'network': str,
            'private_service_connect_config': PrivateServiceConnectConfig
        }

        self.attribute_map = {
            'connection_type': 'connectionType',
            'ip_allocation': 'ipAllocation',
            'network': 'network',
            'private_service_connect_config': 'privateServiceConnectConfig'
        }

        self._connection_type = connection_type
        self._ip_allocation = ip_allocation
        self._network = network
        self._private_service_connect_config = private_service_connect_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_type(self):
        """Gets the connection_type of this NetworkConfig.

        Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.

        :return: The connection_type of this NetworkConfig.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this NetworkConfig.

        Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and the corresponding tenant project from a predefined list of available connection modes. If this field is unspecified for a private instance, VPC peering is used.

        :param connection_type: The connection_type of this NetworkConfig.
        :type connection_type: str
        """
        allowed_values = ["CONNECTION_TYPE_UNSPECIFIED", "VPC_PEERING", "PRIVATE_SERVICE_CONNECT_INTERFACES"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def ip_allocation(self):
        """Gets the ip_allocation of this NetworkConfig.

        Optional. The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network. This is required only when using connection type VPC_PEERING. Format: a.b.c.d/22 Example: 192.168.0.0/22

        :return: The ip_allocation of this NetworkConfig.
        :rtype: str
        """
        return self._ip_allocation

    @ip_allocation.setter
    def ip_allocation(self, ip_allocation):
        """Sets the ip_allocation of this NetworkConfig.

        Optional. The IP range in CIDR notation to use for the managed Data Fusion instance nodes. This range must not overlap with any other ranges used in the Data Fusion instance network. This is required only when using connection type VPC_PEERING. Format: a.b.c.d/22 Example: 192.168.0.0/22

        :param ip_allocation: The ip_allocation of this NetworkConfig.
        :type ip_allocation: str
        """

        self._ip_allocation = ip_allocation

    @property
    def network(self):
        """Gets the network of this NetworkConfig.

        Optional. Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. This is required only when using connection type VPC peering. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}. This is only required for connectivity type VPC_PEERING.

        :return: The network of this NetworkConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkConfig.

        Optional. Name of the network in the customer project with which the Tenant Project will be peered for executing pipelines. This is required only when using connection type VPC peering. In case of shared VPC where the network resides in another host project the network should specified in the form of projects/{host-project-id}/global/networks/{network}. This is only required for connectivity type VPC_PEERING.

        :param network: The network of this NetworkConfig.
        :type network: str
        """

        self._network = network

    @property
    def private_service_connect_config(self):
        """Gets the private_service_connect_config of this NetworkConfig.


        :return: The private_service_connect_config of this NetworkConfig.
        :rtype: PrivateServiceConnectConfig
        """
        return self._private_service_connect_config

    @private_service_connect_config.setter
    def private_service_connect_config(self, private_service_connect_config):
        """Sets the private_service_connect_config of this NetworkConfig.


        :param private_service_connect_config: The private_service_connect_config of this NetworkConfig.
        :type private_service_connect_config: PrivateServiceConnectConfig
        """

        self._private_service_connect_config = private_service_connect_config
