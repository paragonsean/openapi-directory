# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateServiceConnectConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_unreachable_cidr_block: str=None, network_attachment: str=None, unreachable_cidr_block: str=None):
        """PrivateServiceConnectConfig - a model defined in OpenAPI

        :param effective_unreachable_cidr_block: The effective_unreachable_cidr_block of this PrivateServiceConnectConfig.
        :param network_attachment: The network_attachment of this PrivateServiceConnectConfig.
        :param unreachable_cidr_block: The unreachable_cidr_block of this PrivateServiceConnectConfig.
        """
        self.openapi_types = {
            'effective_unreachable_cidr_block': str,
            'network_attachment': str,
            'unreachable_cidr_block': str
        }

        self.attribute_map = {
            'effective_unreachable_cidr_block': 'effectiveUnreachableCidrBlock',
            'network_attachment': 'networkAttachment',
            'unreachable_cidr_block': 'unreachableCidrBlock'
        }

        self._effective_unreachable_cidr_block = effective_unreachable_cidr_block
        self._network_attachment = network_attachment
        self._unreachable_cidr_block = unreachable_cidr_block

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateServiceConnectConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateServiceConnectConfig of this PrivateServiceConnectConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_unreachable_cidr_block(self):
        """Gets the effective_unreachable_cidr_block of this PrivateServiceConnectConfig.

        Output only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC. The size of this block is /25. The format of this field is governed by RFC 4632. Example: 240.0.0.0/25

        :return: The effective_unreachable_cidr_block of this PrivateServiceConnectConfig.
        :rtype: str
        """
        return self._effective_unreachable_cidr_block

    @effective_unreachable_cidr_block.setter
    def effective_unreachable_cidr_block(self, effective_unreachable_cidr_block):
        """Sets the effective_unreachable_cidr_block of this PrivateServiceConnectConfig.

        Output only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC. The size of this block is /25. The format of this field is governed by RFC 4632. Example: 240.0.0.0/25

        :param effective_unreachable_cidr_block: The effective_unreachable_cidr_block of this PrivateServiceConnectConfig.
        :type effective_unreachable_cidr_block: str
        """

        self._effective_unreachable_cidr_block = effective_unreachable_cidr_block

    @property
    def network_attachment(self):
        """Gets the network_attachment of this PrivateServiceConnectConfig.

        Required. The reference to the network attachment used to establish private connectivity. It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.

        :return: The network_attachment of this PrivateServiceConnectConfig.
        :rtype: str
        """
        return self._network_attachment

    @network_attachment.setter
    def network_attachment(self, network_attachment):
        """Sets the network_attachment of this PrivateServiceConnectConfig.

        Required. The reference to the network attachment used to establish private connectivity. It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.

        :param network_attachment: The network_attachment of this PrivateServiceConnectConfig.
        :type network_attachment: str
        """

        self._network_attachment = network_attachment

    @property
    def unreachable_cidr_block(self):
        """Gets the unreachable_cidr_block of this PrivateServiceConnectConfig.

        Optional. Input only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC. The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment. This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses. If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632. Example: 192.168.0.0/25

        :return: The unreachable_cidr_block of this PrivateServiceConnectConfig.
        :rtype: str
        """
        return self._unreachable_cidr_block

    @unreachable_cidr_block.setter
    def unreachable_cidr_block(self, unreachable_cidr_block):
        """Sets the unreachable_cidr_block of this PrivateServiceConnectConfig.

        Optional. Input only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC. The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment. This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses. If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632. Example: 192.168.0.0/25

        :param unreachable_cidr_block: The unreachable_cidr_block of this PrivateServiceConnectConfig.
        :type unreachable_cidr_block: str
        """

        self._unreachable_cidr_block = unreachable_cidr_block
