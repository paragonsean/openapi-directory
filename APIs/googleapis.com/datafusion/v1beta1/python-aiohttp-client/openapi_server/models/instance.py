# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accelerator import Accelerator
from openapi_server.models.crypto_key_config import CryptoKeyConfig
from openapi_server.models.event_publish_config import EventPublishConfig
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.version import Version
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerators: List[Accelerator]=None, api_endpoint: str=None, available_version: List[Version]=None, create_time: str=None, crypto_key_config: CryptoKeyConfig=None, dataplex_data_lineage_integration_enabled: bool=None, dataproc_service_account: str=None, description: str=None, disabled_reason: List[str]=None, display_name: str=None, enable_rbac: bool=None, enable_stackdriver_logging: bool=None, enable_stackdriver_monitoring: bool=None, enable_zone_separation: bool=None, event_publish_config: EventPublishConfig=None, gcs_bucket: str=None, labels: Dict[str, str]=None, name: str=None, network_config: NetworkConfig=None, options: Dict[str, str]=None, p4_service_account: str=None, patch_revision: str=None, private_instance: bool=None, satisfies_pzs: bool=None, service_account: str=None, service_endpoint: str=None, state: str=None, state_message: str=None, tenant_project_id: str=None, type: str=None, update_time: str=None, version: str=None, workforce_identity_service_endpoint: str=None, zone: str=None):
        """Instance - a model defined in OpenAPI

        :param accelerators: The accelerators of this Instance.
        :param api_endpoint: The api_endpoint of this Instance.
        :param available_version: The available_version of this Instance.
        :param create_time: The create_time of this Instance.
        :param crypto_key_config: The crypto_key_config of this Instance.
        :param dataplex_data_lineage_integration_enabled: The dataplex_data_lineage_integration_enabled of this Instance.
        :param dataproc_service_account: The dataproc_service_account of this Instance.
        :param description: The description of this Instance.
        :param disabled_reason: The disabled_reason of this Instance.
        :param display_name: The display_name of this Instance.
        :param enable_rbac: The enable_rbac of this Instance.
        :param enable_stackdriver_logging: The enable_stackdriver_logging of this Instance.
        :param enable_stackdriver_monitoring: The enable_stackdriver_monitoring of this Instance.
        :param enable_zone_separation: The enable_zone_separation of this Instance.
        :param event_publish_config: The event_publish_config of this Instance.
        :param gcs_bucket: The gcs_bucket of this Instance.
        :param labels: The labels of this Instance.
        :param name: The name of this Instance.
        :param network_config: The network_config of this Instance.
        :param options: The options of this Instance.
        :param p4_service_account: The p4_service_account of this Instance.
        :param patch_revision: The patch_revision of this Instance.
        :param private_instance: The private_instance of this Instance.
        :param satisfies_pzs: The satisfies_pzs of this Instance.
        :param service_account: The service_account of this Instance.
        :param service_endpoint: The service_endpoint of this Instance.
        :param state: The state of this Instance.
        :param state_message: The state_message of this Instance.
        :param tenant_project_id: The tenant_project_id of this Instance.
        :param type: The type of this Instance.
        :param update_time: The update_time of this Instance.
        :param version: The version of this Instance.
        :param workforce_identity_service_endpoint: The workforce_identity_service_endpoint of this Instance.
        :param zone: The zone of this Instance.
        """
        self.openapi_types = {
            'accelerators': List[Accelerator],
            'api_endpoint': str,
            'available_version': List[Version],
            'create_time': str,
            'crypto_key_config': CryptoKeyConfig,
            'dataplex_data_lineage_integration_enabled': bool,
            'dataproc_service_account': str,
            'description': str,
            'disabled_reason': List[str],
            'display_name': str,
            'enable_rbac': bool,
            'enable_stackdriver_logging': bool,
            'enable_stackdriver_monitoring': bool,
            'enable_zone_separation': bool,
            'event_publish_config': EventPublishConfig,
            'gcs_bucket': str,
            'labels': Dict[str, str],
            'name': str,
            'network_config': NetworkConfig,
            'options': Dict[str, str],
            'p4_service_account': str,
            'patch_revision': str,
            'private_instance': bool,
            'satisfies_pzs': bool,
            'service_account': str,
            'service_endpoint': str,
            'state': str,
            'state_message': str,
            'tenant_project_id': str,
            'type': str,
            'update_time': str,
            'version': str,
            'workforce_identity_service_endpoint': str,
            'zone': str
        }

        self.attribute_map = {
            'accelerators': 'accelerators',
            'api_endpoint': 'apiEndpoint',
            'available_version': 'availableVersion',
            'create_time': 'createTime',
            'crypto_key_config': 'cryptoKeyConfig',
            'dataplex_data_lineage_integration_enabled': 'dataplexDataLineageIntegrationEnabled',
            'dataproc_service_account': 'dataprocServiceAccount',
            'description': 'description',
            'disabled_reason': 'disabledReason',
            'display_name': 'displayName',
            'enable_rbac': 'enableRbac',
            'enable_stackdriver_logging': 'enableStackdriverLogging',
            'enable_stackdriver_monitoring': 'enableStackdriverMonitoring',
            'enable_zone_separation': 'enableZoneSeparation',
            'event_publish_config': 'eventPublishConfig',
            'gcs_bucket': 'gcsBucket',
            'labels': 'labels',
            'name': 'name',
            'network_config': 'networkConfig',
            'options': 'options',
            'p4_service_account': 'p4ServiceAccount',
            'patch_revision': 'patchRevision',
            'private_instance': 'privateInstance',
            'satisfies_pzs': 'satisfiesPzs',
            'service_account': 'serviceAccount',
            'service_endpoint': 'serviceEndpoint',
            'state': 'state',
            'state_message': 'stateMessage',
            'tenant_project_id': 'tenantProjectId',
            'type': 'type',
            'update_time': 'updateTime',
            'version': 'version',
            'workforce_identity_service_endpoint': 'workforceIdentityServiceEndpoint',
            'zone': 'zone'
        }

        self._accelerators = accelerators
        self._api_endpoint = api_endpoint
        self._available_version = available_version
        self._create_time = create_time
        self._crypto_key_config = crypto_key_config
        self._dataplex_data_lineage_integration_enabled = dataplex_data_lineage_integration_enabled
        self._dataproc_service_account = dataproc_service_account
        self._description = description
        self._disabled_reason = disabled_reason
        self._display_name = display_name
        self._enable_rbac = enable_rbac
        self._enable_stackdriver_logging = enable_stackdriver_logging
        self._enable_stackdriver_monitoring = enable_stackdriver_monitoring
        self._enable_zone_separation = enable_zone_separation
        self._event_publish_config = event_publish_config
        self._gcs_bucket = gcs_bucket
        self._labels = labels
        self._name = name
        self._network_config = network_config
        self._options = options
        self._p4_service_account = p4_service_account
        self._patch_revision = patch_revision
        self._private_instance = private_instance
        self._satisfies_pzs = satisfies_pzs
        self._service_account = service_account
        self._service_endpoint = service_endpoint
        self._state = state
        self._state_message = state_message
        self._tenant_project_id = tenant_project_id
        self._type = type
        self._update_time = update_time
        self._version = version
        self._workforce_identity_service_endpoint = workforce_identity_service_endpoint
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerators(self):
        """Gets the accelerators of this Instance.

        Output only. List of accelerators enabled for this CDF instance.

        :return: The accelerators of this Instance.
        :rtype: List[Accelerator]
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this Instance.

        Output only. List of accelerators enabled for this CDF instance.

        :param accelerators: The accelerators of this Instance.
        :type accelerators: List[Accelerator]
        """

        self._accelerators = accelerators

    @property
    def api_endpoint(self):
        """Gets the api_endpoint of this Instance.

        Output only. Endpoint on which the REST APIs is accessible.

        :return: The api_endpoint of this Instance.
        :rtype: str
        """
        return self._api_endpoint

    @api_endpoint.setter
    def api_endpoint(self, api_endpoint):
        """Sets the api_endpoint of this Instance.

        Output only. Endpoint on which the REST APIs is accessible.

        :param api_endpoint: The api_endpoint of this Instance.
        :type api_endpoint: str
        """

        self._api_endpoint = api_endpoint

    @property
    def available_version(self):
        """Gets the available_version of this Instance.

        Output only. Available versions that the instance can be upgraded to using UpdateInstanceRequest.

        :return: The available_version of this Instance.
        :rtype: List[Version]
        """
        return self._available_version

    @available_version.setter
    def available_version(self, available_version):
        """Sets the available_version of this Instance.

        Output only. Available versions that the instance can be upgraded to using UpdateInstanceRequest.

        :param available_version: The available_version of this Instance.
        :type available_version: List[Version]
        """

        self._available_version = available_version

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. The time the instance was created.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. The time the instance was created.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def crypto_key_config(self):
        """Gets the crypto_key_config of this Instance.


        :return: The crypto_key_config of this Instance.
        :rtype: CryptoKeyConfig
        """
        return self._crypto_key_config

    @crypto_key_config.setter
    def crypto_key_config(self, crypto_key_config):
        """Sets the crypto_key_config of this Instance.


        :param crypto_key_config: The crypto_key_config of this Instance.
        :type crypto_key_config: CryptoKeyConfig
        """

        self._crypto_key_config = crypto_key_config

    @property
    def dataplex_data_lineage_integration_enabled(self):
        """Gets the dataplex_data_lineage_integration_enabled of this Instance.

        Optional. Option to enable the Dataplex Lineage Integration feature.

        :return: The dataplex_data_lineage_integration_enabled of this Instance.
        :rtype: bool
        """
        return self._dataplex_data_lineage_integration_enabled

    @dataplex_data_lineage_integration_enabled.setter
    def dataplex_data_lineage_integration_enabled(self, dataplex_data_lineage_integration_enabled):
        """Sets the dataplex_data_lineage_integration_enabled of this Instance.

        Optional. Option to enable the Dataplex Lineage Integration feature.

        :param dataplex_data_lineage_integration_enabled: The dataplex_data_lineage_integration_enabled of this Instance.
        :type dataplex_data_lineage_integration_enabled: bool
        """

        self._dataplex_data_lineage_integration_enabled = dataplex_data_lineage_integration_enabled

    @property
    def dataproc_service_account(self):
        """Gets the dataproc_service_account of this Instance.

        User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.

        :return: The dataproc_service_account of this Instance.
        :rtype: str
        """
        return self._dataproc_service_account

    @dataproc_service_account.setter
    def dataproc_service_account(self, dataproc_service_account):
        """Sets the dataproc_service_account of this Instance.

        User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.

        :param dataproc_service_account: The dataproc_service_account of this Instance.
        :type dataproc_service_account: str
        """

        self._dataproc_service_account = dataproc_service_account

    @property
    def description(self):
        """Gets the description of this Instance.

        A description of this instance.

        :return: The description of this Instance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Instance.

        A description of this instance.

        :param description: The description of this Instance.
        :type description: str
        """

        self._description = description

    @property
    def disabled_reason(self):
        """Gets the disabled_reason of this Instance.

        Output only. If the instance state is DISABLED, the reason for disabling the instance.

        :return: The disabled_reason of this Instance.
        :rtype: List[str]
        """
        return self._disabled_reason

    @disabled_reason.setter
    def disabled_reason(self, disabled_reason):
        """Sets the disabled_reason of this Instance.

        Output only. If the instance state is DISABLED, the reason for disabling the instance.

        :param disabled_reason: The disabled_reason of this Instance.
        :type disabled_reason: List[str]
        """
        allowed_values = ["DISABLED_REASON_UNSPECIFIED", "KMS_KEY_ISSUE"]  # noqa: E501
        if not set(disabled_reason).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `disabled_reason` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(disabled_reason) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._disabled_reason = disabled_reason

    @property
    def display_name(self):
        """Gets the display_name of this Instance.

        Display name for an instance.

        :return: The display_name of this Instance.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Instance.

        Display name for an instance.

        :param display_name: The display_name of this Instance.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_rbac(self):
        """Gets the enable_rbac of this Instance.

        Option to enable granular role-based access control.

        :return: The enable_rbac of this Instance.
        :rtype: bool
        """
        return self._enable_rbac

    @enable_rbac.setter
    def enable_rbac(self, enable_rbac):
        """Sets the enable_rbac of this Instance.

        Option to enable granular role-based access control.

        :param enable_rbac: The enable_rbac of this Instance.
        :type enable_rbac: bool
        """

        self._enable_rbac = enable_rbac

    @property
    def enable_stackdriver_logging(self):
        """Gets the enable_stackdriver_logging of this Instance.

        Option to enable Stackdriver Logging.

        :return: The enable_stackdriver_logging of this Instance.
        :rtype: bool
        """
        return self._enable_stackdriver_logging

    @enable_stackdriver_logging.setter
    def enable_stackdriver_logging(self, enable_stackdriver_logging):
        """Sets the enable_stackdriver_logging of this Instance.

        Option to enable Stackdriver Logging.

        :param enable_stackdriver_logging: The enable_stackdriver_logging of this Instance.
        :type enable_stackdriver_logging: bool
        """

        self._enable_stackdriver_logging = enable_stackdriver_logging

    @property
    def enable_stackdriver_monitoring(self):
        """Gets the enable_stackdriver_monitoring of this Instance.

        Option to enable Stackdriver Monitoring.

        :return: The enable_stackdriver_monitoring of this Instance.
        :rtype: bool
        """
        return self._enable_stackdriver_monitoring

    @enable_stackdriver_monitoring.setter
    def enable_stackdriver_monitoring(self, enable_stackdriver_monitoring):
        """Sets the enable_stackdriver_monitoring of this Instance.

        Option to enable Stackdriver Monitoring.

        :param enable_stackdriver_monitoring: The enable_stackdriver_monitoring of this Instance.
        :type enable_stackdriver_monitoring: bool
        """

        self._enable_stackdriver_monitoring = enable_stackdriver_monitoring

    @property
    def enable_zone_separation(self):
        """Gets the enable_zone_separation of this Instance.

        Option to enable zone separation.

        :return: The enable_zone_separation of this Instance.
        :rtype: bool
        """
        return self._enable_zone_separation

    @enable_zone_separation.setter
    def enable_zone_separation(self, enable_zone_separation):
        """Sets the enable_zone_separation of this Instance.

        Option to enable zone separation.

        :param enable_zone_separation: The enable_zone_separation of this Instance.
        :type enable_zone_separation: bool
        """

        self._enable_zone_separation = enable_zone_separation

    @property
    def event_publish_config(self):
        """Gets the event_publish_config of this Instance.


        :return: The event_publish_config of this Instance.
        :rtype: EventPublishConfig
        """
        return self._event_publish_config

    @event_publish_config.setter
    def event_publish_config(self, event_publish_config):
        """Sets the event_publish_config of this Instance.


        :param event_publish_config: The event_publish_config of this Instance.
        :type event_publish_config: EventPublishConfig
        """

        self._event_publish_config = event_publish_config

    @property
    def gcs_bucket(self):
        """Gets the gcs_bucket of this Instance.

        Output only. Cloud Storage bucket generated by Data Fusion in the customer project.

        :return: The gcs_bucket of this Instance.
        :rtype: str
        """
        return self._gcs_bucket

    @gcs_bucket.setter
    def gcs_bucket(self, gcs_bucket):
        """Sets the gcs_bucket of this Instance.

        Output only. Cloud Storage bucket generated by Data Fusion in the customer project.

        :param gcs_bucket: The gcs_bucket of this Instance.
        :type gcs_bucket: str
        """

        self._gcs_bucket = gcs_bucket

    @property
    def labels(self):
        """Gets the labels of this Instance.

        The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.

        :return: The labels of this Instance.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Instance.

        The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.

        :param labels: The labels of this Instance.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Instance.

        Output only. The name of this instance is in the form of projects/{project}/locations/{location}/instances/{instance}.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Output only. The name of this instance is in the form of projects/{project}/locations/{location}/instances/{instance}.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this Instance.


        :return: The network_config of this Instance.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this Instance.


        :param network_config: The network_config of this Instance.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def options(self):
        """Gets the options of this Instance.

        Map of additional options used to configure the behavior of Data Fusion instance.

        :return: The options of this Instance.
        :rtype: Dict[str, str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Instance.

        Map of additional options used to configure the behavior of Data Fusion instance.

        :param options: The options of this Instance.
        :type options: Dict[str, str]
        """

        self._options = options

    @property
    def p4_service_account(self):
        """Gets the p4_service_account of this Instance.

        Output only. P4 service account for the customer project.

        :return: The p4_service_account of this Instance.
        :rtype: str
        """
        return self._p4_service_account

    @p4_service_account.setter
    def p4_service_account(self, p4_service_account):
        """Sets the p4_service_account of this Instance.

        Output only. P4 service account for the customer project.

        :param p4_service_account: The p4_service_account of this Instance.
        :type p4_service_account: str
        """

        self._p4_service_account = p4_service_account

    @property
    def patch_revision(self):
        """Gets the patch_revision of this Instance.

        Optional. Current patch revision of the Data Fusion.

        :return: The patch_revision of this Instance.
        :rtype: str
        """
        return self._patch_revision

    @patch_revision.setter
    def patch_revision(self, patch_revision):
        """Sets the patch_revision of this Instance.

        Optional. Current patch revision of the Data Fusion.

        :param patch_revision: The patch_revision of this Instance.
        :type patch_revision: str
        """

        self._patch_revision = patch_revision

    @property
    def private_instance(self):
        """Gets the private_instance of this Instance.

        Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.

        :return: The private_instance of this Instance.
        :rtype: bool
        """
        return self._private_instance

    @private_instance.setter
    def private_instance(self, private_instance):
        """Sets the private_instance of this Instance.

        Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.

        :param private_instance: The private_instance of this Instance.
        :type private_instance: bool
        """

        self._private_instance = private_instance

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Instance.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Instance.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Instance.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Instance.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def service_account(self):
        """Gets the service_account of this Instance.

        Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.

        :return: The service_account of this Instance.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Instance.

        Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.

        :param service_account: The service_account of this Instance.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def service_endpoint(self):
        """Gets the service_endpoint of this Instance.

        Output only. Endpoint on which the Data Fusion UI is accessible.

        :return: The service_endpoint of this Instance.
        :rtype: str
        """
        return self._service_endpoint

    @service_endpoint.setter
    def service_endpoint(self, service_endpoint):
        """Sets the service_endpoint of this Instance.

        Output only. Endpoint on which the Data Fusion UI is accessible.

        :param service_endpoint: The service_endpoint of this Instance.
        :type service_endpoint: str
        """

        self._service_endpoint = service_endpoint

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The current state of this Data Fusion instance.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The current state of this Data Fusion instance.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "RUNNING", "FAILED", "DELETING", "UPGRADING", "RESTARTING", "UPDATING", "AUTO_UPDATING", "AUTO_UPGRADING", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this Instance.

        Output only. Additional information about the current state of this Data Fusion instance if available.

        :return: The state_message of this Instance.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this Instance.

        Output only. Additional information about the current state of this Data Fusion instance if available.

        :param state_message: The state_message of this Instance.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def tenant_project_id(self):
        """Gets the tenant_project_id of this Instance.

        Output only. The name of the tenant project.

        :return: The tenant_project_id of this Instance.
        :rtype: str
        """
        return self._tenant_project_id

    @tenant_project_id.setter
    def tenant_project_id(self, tenant_project_id):
        """Sets the tenant_project_id of this Instance.

        Output only. The name of the tenant project.

        :param tenant_project_id: The tenant_project_id of this Instance.
        :type tenant_project_id: str
        """

        self._tenant_project_id = tenant_project_id

    @property
    def type(self):
        """Gets the type of this Instance.

        Required. Instance type.

        :return: The type of this Instance.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Instance.

        Required. Instance type.

        :param type: The type of this Instance.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "BASIC", "ENTERPRISE", "DEVELOPER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. The time the instance was last updated.

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. The time the instance was last updated.

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this Instance.

        Current version of Data Fusion.

        :return: The version of this Instance.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Instance.

        Current version of Data Fusion.

        :param version: The version of this Instance.
        :type version: str
        """

        self._version = version

    @property
    def workforce_identity_service_endpoint(self):
        """Gets the workforce_identity_service_endpoint of this Instance.

        Output only. Endpoint on which the Data Fusion UI is accessible to third-party users.

        :return: The workforce_identity_service_endpoint of this Instance.
        :rtype: str
        """
        return self._workforce_identity_service_endpoint

    @workforce_identity_service_endpoint.setter
    def workforce_identity_service_endpoint(self, workforce_identity_service_endpoint):
        """Sets the workforce_identity_service_endpoint of this Instance.

        Output only. Endpoint on which the Data Fusion UI is accessible to third-party users.

        :param workforce_identity_service_endpoint: The workforce_identity_service_endpoint of this Instance.
        :type workforce_identity_service_endpoint: str
        """

        self._workforce_identity_service_endpoint = workforce_identity_service_endpoint

    @property
    def zone(self):
        """Gets the zone of this Instance.

        Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.

        :return: The zone of this Instance.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Instance.

        Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.

        :param zone: The zone of this Instance.
        :type zone: str
        """

        self._zone = zone
