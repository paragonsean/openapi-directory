# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_features: List[str]=None, default_version: bool=None, type: str=None, version_number: str=None):
        """Version - a model defined in OpenAPI

        :param available_features: The available_features of this Version.
        :param default_version: The default_version of this Version.
        :param type: The type of this Version.
        :param version_number: The version_number of this Version.
        """
        self.openapi_types = {
            'available_features': List[str],
            'default_version': bool,
            'type': str,
            'version_number': str
        }

        self.attribute_map = {
            'available_features': 'availableFeatures',
            'default_version': 'defaultVersion',
            'type': 'type',
            'version_number': 'versionNumber'
        }

        self._available_features = available_features
        self._default_version = default_version
        self._type = type
        self._version_number = version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_features(self):
        """Gets the available_features of this Version.

        Represents a list of available feature names for a given version.

        :return: The available_features of this Version.
        :rtype: List[str]
        """
        return self._available_features

    @available_features.setter
    def available_features(self, available_features):
        """Sets the available_features of this Version.

        Represents a list of available feature names for a given version.

        :param available_features: The available_features of this Version.
        :type available_features: List[str]
        """

        self._available_features = available_features

    @property
    def default_version(self):
        """Gets the default_version of this Version.

        Whether this is currently the default version for Cloud Data Fusion

        :return: The default_version of this Version.
        :rtype: bool
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this Version.

        Whether this is currently the default version for Cloud Data Fusion

        :param default_version: The default_version of this Version.
        :type default_version: bool
        """

        self._default_version = default_version

    @property
    def type(self):
        """Gets the type of this Version.

        Type represents the release availability of the version

        :return: The type of this Version.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Version.

        Type represents the release availability of the version

        :param type: The type of this Version.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_PREVIEW", "TYPE_GENERAL_AVAILABILITY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version_number(self):
        """Gets the version_number of this Version.

        The version number of the Data Fusion instance, such as '6.0.1.0'.

        :return: The version_number of this Version.
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this Version.

        The version number of the Data Fusion instance, such as '6.0.1.0'.

        :param version_number: The version_number of this Version.
        :type version_number: str
        """

        self._version_number = version_number
