/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataResidencyAugmentedView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataResidencyAugmentedView::OAIDataResidencyAugmentedView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataResidencyAugmentedView::OAIDataResidencyAugmentedView() {
    this->initializeModel();
}

OAIDataResidencyAugmentedView::~OAIDataResidencyAugmentedView() {}

void OAIDataResidencyAugmentedView::initializeModel() {

    m_cr_gopo_guris_isSet = false;
    m_cr_gopo_guris_isValid = false;

    m_cr_gopo_prefixes_isSet = false;
    m_cr_gopo_prefixes_isValid = false;

    m_service_data_isSet = false;
    m_service_data_isValid = false;

    m_tp_ids_isSet = false;
    m_tp_ids_isValid = false;
}

void OAIDataResidencyAugmentedView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataResidencyAugmentedView::fromJsonObject(QJsonObject json) {

    m_cr_gopo_guris_isValid = ::OpenAPI::fromJsonValue(m_cr_gopo_guris, json[QString("crGopoGuris")]);
    m_cr_gopo_guris_isSet = !json[QString("crGopoGuris")].isNull() && m_cr_gopo_guris_isValid;

    m_cr_gopo_prefixes_isValid = ::OpenAPI::fromJsonValue(m_cr_gopo_prefixes, json[QString("crGopoPrefixes")]);
    m_cr_gopo_prefixes_isSet = !json[QString("crGopoPrefixes")].isNull() && m_cr_gopo_prefixes_isValid;

    m_service_data_isValid = ::OpenAPI::fromJsonValue(m_service_data, json[QString("serviceData")]);
    m_service_data_isSet = !json[QString("serviceData")].isNull() && m_service_data_isValid;

    m_tp_ids_isValid = ::OpenAPI::fromJsonValue(m_tp_ids, json[QString("tpIds")]);
    m_tp_ids_isSet = !json[QString("tpIds")].isNull() && m_tp_ids_isValid;
}

QString OAIDataResidencyAugmentedView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataResidencyAugmentedView::asJsonObject() const {
    QJsonObject obj;
    if (m_cr_gopo_guris.size() > 0) {
        obj.insert(QString("crGopoGuris"), ::OpenAPI::toJsonValue(m_cr_gopo_guris));
    }
    if (m_cr_gopo_prefixes.size() > 0) {
        obj.insert(QString("crGopoPrefixes"), ::OpenAPI::toJsonValue(m_cr_gopo_prefixes));
    }
    if (m_service_data.isSet()) {
        obj.insert(QString("serviceData"), ::OpenAPI::toJsonValue(m_service_data));
    }
    if (m_tp_ids.size() > 0) {
        obj.insert(QString("tpIds"), ::OpenAPI::toJsonValue(m_tp_ids));
    }
    return obj;
}

QList<QString> OAIDataResidencyAugmentedView::getCrGopoGuris() const {
    return m_cr_gopo_guris;
}
void OAIDataResidencyAugmentedView::setCrGopoGuris(const QList<QString> &cr_gopo_guris) {
    m_cr_gopo_guris = cr_gopo_guris;
    m_cr_gopo_guris_isSet = true;
}

bool OAIDataResidencyAugmentedView::is_cr_gopo_guris_Set() const{
    return m_cr_gopo_guris_isSet;
}

bool OAIDataResidencyAugmentedView::is_cr_gopo_guris_Valid() const{
    return m_cr_gopo_guris_isValid;
}

QList<QString> OAIDataResidencyAugmentedView::getCrGopoPrefixes() const {
    return m_cr_gopo_prefixes;
}
void OAIDataResidencyAugmentedView::setCrGopoPrefixes(const QList<QString> &cr_gopo_prefixes) {
    m_cr_gopo_prefixes = cr_gopo_prefixes;
    m_cr_gopo_prefixes_isSet = true;
}

bool OAIDataResidencyAugmentedView::is_cr_gopo_prefixes_Set() const{
    return m_cr_gopo_prefixes_isSet;
}

bool OAIDataResidencyAugmentedView::is_cr_gopo_prefixes_Valid() const{
    return m_cr_gopo_prefixes_isValid;
}

OAIServiceData OAIDataResidencyAugmentedView::getServiceData() const {
    return m_service_data;
}
void OAIDataResidencyAugmentedView::setServiceData(const OAIServiceData &service_data) {
    m_service_data = service_data;
    m_service_data_isSet = true;
}

bool OAIDataResidencyAugmentedView::is_service_data_Set() const{
    return m_service_data_isSet;
}

bool OAIDataResidencyAugmentedView::is_service_data_Valid() const{
    return m_service_data_isValid;
}

QList<QString> OAIDataResidencyAugmentedView::getTpIds() const {
    return m_tp_ids;
}
void OAIDataResidencyAugmentedView::setTpIds(const QList<QString> &tp_ids) {
    m_tp_ids = tp_ids;
    m_tp_ids_isSet = true;
}

bool OAIDataResidencyAugmentedView::is_tp_ids_Set() const{
    return m_tp_ids_isSet;
}

bool OAIDataResidencyAugmentedView::is_tp_ids_Valid() const{
    return m_tp_ids_isValid;
}

bool OAIDataResidencyAugmentedView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cr_gopo_guris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cr_gopo_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tp_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataResidencyAugmentedView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
