/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_available_features_isSet = false;
    m_available_features_isValid = false;

    m_default_version_isSet = false;
    m_default_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_available_features_isValid = ::OpenAPI::fromJsonValue(m_available_features, json[QString("availableFeatures")]);
    m_available_features_isSet = !json[QString("availableFeatures")].isNull() && m_available_features_isValid;

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_available_features.size() > 0) {
        obj.insert(QString("availableFeatures"), ::OpenAPI::toJsonValue(m_available_features));
    }
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

QList<QString> OAIVersion::getAvailableFeatures() const {
    return m_available_features;
}
void OAIVersion::setAvailableFeatures(const QList<QString> &available_features) {
    m_available_features = available_features;
    m_available_features_isSet = true;
}

bool OAIVersion::is_available_features_Set() const{
    return m_available_features_isSet;
}

bool OAIVersion::is_available_features_Valid() const{
    return m_available_features_isValid;
}

bool OAIVersion::isDefaultVersion() const {
    return m_default_version;
}
void OAIVersion::setDefaultVersion(const bool &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAIVersion::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAIVersion::is_default_version_Valid() const{
    return m_default_version_isValid;
}

QString OAIVersion::getType() const {
    return m_type;
}
void OAIVersion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVersion::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVersion::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVersion::getVersionNumber() const {
    return m_version_number;
}
void OAIVersion::setVersionNumber(const QString &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIVersion::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIVersion::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
