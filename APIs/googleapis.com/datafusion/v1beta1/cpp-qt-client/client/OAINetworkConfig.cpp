/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_ip_allocation_isSet = false;
    m_ip_allocation_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_private_service_connect_config_isSet = false;
    m_private_service_connect_config_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_ip_allocation_isValid = ::OpenAPI::fromJsonValue(m_ip_allocation, json[QString("ipAllocation")]);
    m_ip_allocation_isSet = !json[QString("ipAllocation")].isNull() && m_ip_allocation_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_private_service_connect_config_isValid = ::OpenAPI::fromJsonValue(m_private_service_connect_config, json[QString("privateServiceConnectConfig")]);
    m_private_service_connect_config_isSet = !json[QString("privateServiceConnectConfig")].isNull() && m_private_service_connect_config_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_ip_allocation_isSet) {
        obj.insert(QString("ipAllocation"), ::OpenAPI::toJsonValue(m_ip_allocation));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_private_service_connect_config.isSet()) {
        obj.insert(QString("privateServiceConnectConfig"), ::OpenAPI::toJsonValue(m_private_service_connect_config));
    }
    return obj;
}

QString OAINetworkConfig::getConnectionType() const {
    return m_connection_type;
}
void OAINetworkConfig::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAINetworkConfig::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAINetworkConfig::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAINetworkConfig::getIpAllocation() const {
    return m_ip_allocation;
}
void OAINetworkConfig::setIpAllocation(const QString &ip_allocation) {
    m_ip_allocation = ip_allocation;
    m_ip_allocation_isSet = true;
}

bool OAINetworkConfig::is_ip_allocation_Set() const{
    return m_ip_allocation_isSet;
}

bool OAINetworkConfig::is_ip_allocation_Valid() const{
    return m_ip_allocation_isValid;
}

QString OAINetworkConfig::getNetwork() const {
    return m_network;
}
void OAINetworkConfig::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkConfig::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkConfig::is_network_Valid() const{
    return m_network_isValid;
}

OAIPrivateServiceConnectConfig OAINetworkConfig::getPrivateServiceConnectConfig() const {
    return m_private_service_connect_config;
}
void OAINetworkConfig::setPrivateServiceConnectConfig(const OAIPrivateServiceConnectConfig &private_service_connect_config) {
    m_private_service_connect_config = private_service_connect_config;
    m_private_service_connect_config_isSet = true;
}

bool OAINetworkConfig::is_private_service_connect_config_Set() const{
    return m_private_service_connect_config_isSet;
}

bool OAINetworkConfig::is_private_service_connect_config_Valid() const{
    return m_private_service_connect_config_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_allocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_service_connect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
