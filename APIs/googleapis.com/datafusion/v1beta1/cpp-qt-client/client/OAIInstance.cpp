/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;

    m_api_endpoint_isSet = false;
    m_api_endpoint_isValid = false;

    m_available_version_isSet = false;
    m_available_version_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_crypto_key_config_isSet = false;
    m_crypto_key_config_isValid = false;

    m_dataplex_data_lineage_integration_enabled_isSet = false;
    m_dataplex_data_lineage_integration_enabled_isValid = false;

    m_dataproc_service_account_isSet = false;
    m_dataproc_service_account_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_reason_isSet = false;
    m_disabled_reason_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_rbac_isSet = false;
    m_enable_rbac_isValid = false;

    m_enable_stackdriver_logging_isSet = false;
    m_enable_stackdriver_logging_isValid = false;

    m_enable_stackdriver_monitoring_isSet = false;
    m_enable_stackdriver_monitoring_isValid = false;

    m_enable_zone_separation_isSet = false;
    m_enable_zone_separation_isValid = false;

    m_event_publish_config_isSet = false;
    m_event_publish_config_isValid = false;

    m_gcs_bucket_isSet = false;
    m_gcs_bucket_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_p4_service_account_isSet = false;
    m_p4_service_account_isValid = false;

    m_patch_revision_isSet = false;
    m_patch_revision_isValid = false;

    m_private_instance_isSet = false;
    m_private_instance_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_service_endpoint_isSet = false;
    m_service_endpoint_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_tenant_project_id_isSet = false;
    m_tenant_project_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_workforce_identity_service_endpoint_isSet = false;
    m_workforce_identity_service_endpoint_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;

    m_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_api_endpoint, json[QString("apiEndpoint")]);
    m_api_endpoint_isSet = !json[QString("apiEndpoint")].isNull() && m_api_endpoint_isValid;

    m_available_version_isValid = ::OpenAPI::fromJsonValue(m_available_version, json[QString("availableVersion")]);
    m_available_version_isSet = !json[QString("availableVersion")].isNull() && m_available_version_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_crypto_key_config_isValid = ::OpenAPI::fromJsonValue(m_crypto_key_config, json[QString("cryptoKeyConfig")]);
    m_crypto_key_config_isSet = !json[QString("cryptoKeyConfig")].isNull() && m_crypto_key_config_isValid;

    m_dataplex_data_lineage_integration_enabled_isValid = ::OpenAPI::fromJsonValue(m_dataplex_data_lineage_integration_enabled, json[QString("dataplexDataLineageIntegrationEnabled")]);
    m_dataplex_data_lineage_integration_enabled_isSet = !json[QString("dataplexDataLineageIntegrationEnabled")].isNull() && m_dataplex_data_lineage_integration_enabled_isValid;

    m_dataproc_service_account_isValid = ::OpenAPI::fromJsonValue(m_dataproc_service_account, json[QString("dataprocServiceAccount")]);
    m_dataproc_service_account_isSet = !json[QString("dataprocServiceAccount")].isNull() && m_dataproc_service_account_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_reason_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason, json[QString("disabledReason")]);
    m_disabled_reason_isSet = !json[QString("disabledReason")].isNull() && m_disabled_reason_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_rbac_isValid = ::OpenAPI::fromJsonValue(m_enable_rbac, json[QString("enableRbac")]);
    m_enable_rbac_isSet = !json[QString("enableRbac")].isNull() && m_enable_rbac_isValid;

    m_enable_stackdriver_logging_isValid = ::OpenAPI::fromJsonValue(m_enable_stackdriver_logging, json[QString("enableStackdriverLogging")]);
    m_enable_stackdriver_logging_isSet = !json[QString("enableStackdriverLogging")].isNull() && m_enable_stackdriver_logging_isValid;

    m_enable_stackdriver_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enable_stackdriver_monitoring, json[QString("enableStackdriverMonitoring")]);
    m_enable_stackdriver_monitoring_isSet = !json[QString("enableStackdriverMonitoring")].isNull() && m_enable_stackdriver_monitoring_isValid;

    m_enable_zone_separation_isValid = ::OpenAPI::fromJsonValue(m_enable_zone_separation, json[QString("enableZoneSeparation")]);
    m_enable_zone_separation_isSet = !json[QString("enableZoneSeparation")].isNull() && m_enable_zone_separation_isValid;

    m_event_publish_config_isValid = ::OpenAPI::fromJsonValue(m_event_publish_config, json[QString("eventPublishConfig")]);
    m_event_publish_config_isSet = !json[QString("eventPublishConfig")].isNull() && m_event_publish_config_isValid;

    m_gcs_bucket_isValid = ::OpenAPI::fromJsonValue(m_gcs_bucket, json[QString("gcsBucket")]);
    m_gcs_bucket_isSet = !json[QString("gcsBucket")].isNull() && m_gcs_bucket_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_p4_service_account_isValid = ::OpenAPI::fromJsonValue(m_p4_service_account, json[QString("p4ServiceAccount")]);
    m_p4_service_account_isSet = !json[QString("p4ServiceAccount")].isNull() && m_p4_service_account_isValid;

    m_patch_revision_isValid = ::OpenAPI::fromJsonValue(m_patch_revision, json[QString("patchRevision")]);
    m_patch_revision_isSet = !json[QString("patchRevision")].isNull() && m_patch_revision_isValid;

    m_private_instance_isValid = ::OpenAPI::fromJsonValue(m_private_instance, json[QString("privateInstance")]);
    m_private_instance_isSet = !json[QString("privateInstance")].isNull() && m_private_instance_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_service_endpoint, json[QString("serviceEndpoint")]);
    m_service_endpoint_isSet = !json[QString("serviceEndpoint")].isNull() && m_service_endpoint_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_tenant_project_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_project_id, json[QString("tenantProjectId")]);
    m_tenant_project_id_isSet = !json[QString("tenantProjectId")].isNull() && m_tenant_project_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_workforce_identity_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_workforce_identity_service_endpoint, json[QString("workforceIdentityServiceEndpoint")]);
    m_workforce_identity_service_endpoint_isSet = !json[QString("workforceIdentityServiceEndpoint")].isNull() && m_workforce_identity_service_endpoint_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerators.size() > 0) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    if (m_api_endpoint_isSet) {
        obj.insert(QString("apiEndpoint"), ::OpenAPI::toJsonValue(m_api_endpoint));
    }
    if (m_available_version.size() > 0) {
        obj.insert(QString("availableVersion"), ::OpenAPI::toJsonValue(m_available_version));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_crypto_key_config.isSet()) {
        obj.insert(QString("cryptoKeyConfig"), ::OpenAPI::toJsonValue(m_crypto_key_config));
    }
    if (m_dataplex_data_lineage_integration_enabled_isSet) {
        obj.insert(QString("dataplexDataLineageIntegrationEnabled"), ::OpenAPI::toJsonValue(m_dataplex_data_lineage_integration_enabled));
    }
    if (m_dataproc_service_account_isSet) {
        obj.insert(QString("dataprocServiceAccount"), ::OpenAPI::toJsonValue(m_dataproc_service_account));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_reason.size() > 0) {
        obj.insert(QString("disabledReason"), ::OpenAPI::toJsonValue(m_disabled_reason));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_rbac_isSet) {
        obj.insert(QString("enableRbac"), ::OpenAPI::toJsonValue(m_enable_rbac));
    }
    if (m_enable_stackdriver_logging_isSet) {
        obj.insert(QString("enableStackdriverLogging"), ::OpenAPI::toJsonValue(m_enable_stackdriver_logging));
    }
    if (m_enable_stackdriver_monitoring_isSet) {
        obj.insert(QString("enableStackdriverMonitoring"), ::OpenAPI::toJsonValue(m_enable_stackdriver_monitoring));
    }
    if (m_enable_zone_separation_isSet) {
        obj.insert(QString("enableZoneSeparation"), ::OpenAPI::toJsonValue(m_enable_zone_separation));
    }
    if (m_event_publish_config.isSet()) {
        obj.insert(QString("eventPublishConfig"), ::OpenAPI::toJsonValue(m_event_publish_config));
    }
    if (m_gcs_bucket_isSet) {
        obj.insert(QString("gcsBucket"), ::OpenAPI::toJsonValue(m_gcs_bucket));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_p4_service_account_isSet) {
        obj.insert(QString("p4ServiceAccount"), ::OpenAPI::toJsonValue(m_p4_service_account));
    }
    if (m_patch_revision_isSet) {
        obj.insert(QString("patchRevision"), ::OpenAPI::toJsonValue(m_patch_revision));
    }
    if (m_private_instance_isSet) {
        obj.insert(QString("privateInstance"), ::OpenAPI::toJsonValue(m_private_instance));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_service_endpoint_isSet) {
        obj.insert(QString("serviceEndpoint"), ::OpenAPI::toJsonValue(m_service_endpoint));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_tenant_project_id_isSet) {
        obj.insert(QString("tenantProjectId"), ::OpenAPI::toJsonValue(m_tenant_project_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_workforce_identity_service_endpoint_isSet) {
        obj.insert(QString("workforceIdentityServiceEndpoint"), ::OpenAPI::toJsonValue(m_workforce_identity_service_endpoint));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QList<OAIAccelerator> OAIInstance::getAccelerators() const {
    return m_accelerators;
}
void OAIInstance::setAccelerators(const QList<OAIAccelerator> &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAIInstance::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAIInstance::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

QString OAIInstance::getApiEndpoint() const {
    return m_api_endpoint;
}
void OAIInstance::setApiEndpoint(const QString &api_endpoint) {
    m_api_endpoint = api_endpoint;
    m_api_endpoint_isSet = true;
}

bool OAIInstance::is_api_endpoint_Set() const{
    return m_api_endpoint_isSet;
}

bool OAIInstance::is_api_endpoint_Valid() const{
    return m_api_endpoint_isValid;
}

QList<OAIVersion> OAIInstance::getAvailableVersion() const {
    return m_available_version;
}
void OAIInstance::setAvailableVersion(const QList<OAIVersion> &available_version) {
    m_available_version = available_version;
    m_available_version_isSet = true;
}

bool OAIInstance::is_available_version_Set() const{
    return m_available_version_isSet;
}

bool OAIInstance::is_available_version_Valid() const{
    return m_available_version_isValid;
}

QString OAIInstance::getCreateTime() const {
    return m_create_time;
}
void OAIInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAICryptoKeyConfig OAIInstance::getCryptoKeyConfig() const {
    return m_crypto_key_config;
}
void OAIInstance::setCryptoKeyConfig(const OAICryptoKeyConfig &crypto_key_config) {
    m_crypto_key_config = crypto_key_config;
    m_crypto_key_config_isSet = true;
}

bool OAIInstance::is_crypto_key_config_Set() const{
    return m_crypto_key_config_isSet;
}

bool OAIInstance::is_crypto_key_config_Valid() const{
    return m_crypto_key_config_isValid;
}

bool OAIInstance::isDataplexDataLineageIntegrationEnabled() const {
    return m_dataplex_data_lineage_integration_enabled;
}
void OAIInstance::setDataplexDataLineageIntegrationEnabled(const bool &dataplex_data_lineage_integration_enabled) {
    m_dataplex_data_lineage_integration_enabled = dataplex_data_lineage_integration_enabled;
    m_dataplex_data_lineage_integration_enabled_isSet = true;
}

bool OAIInstance::is_dataplex_data_lineage_integration_enabled_Set() const{
    return m_dataplex_data_lineage_integration_enabled_isSet;
}

bool OAIInstance::is_dataplex_data_lineage_integration_enabled_Valid() const{
    return m_dataplex_data_lineage_integration_enabled_isValid;
}

QString OAIInstance::getDataprocServiceAccount() const {
    return m_dataproc_service_account;
}
void OAIInstance::setDataprocServiceAccount(const QString &dataproc_service_account) {
    m_dataproc_service_account = dataproc_service_account;
    m_dataproc_service_account_isSet = true;
}

bool OAIInstance::is_dataproc_service_account_Set() const{
    return m_dataproc_service_account_isSet;
}

bool OAIInstance::is_dataproc_service_account_Valid() const{
    return m_dataproc_service_account_isValid;
}

QString OAIInstance::getDescription() const {
    return m_description;
}
void OAIInstance::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInstance::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInstance::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIInstance::getDisabledReason() const {
    return m_disabled_reason;
}
void OAIInstance::setDisabledReason(const QList<QString> &disabled_reason) {
    m_disabled_reason = disabled_reason;
    m_disabled_reason_isSet = true;
}

bool OAIInstance::is_disabled_reason_Set() const{
    return m_disabled_reason_isSet;
}

bool OAIInstance::is_disabled_reason_Valid() const{
    return m_disabled_reason_isValid;
}

QString OAIInstance::getDisplayName() const {
    return m_display_name;
}
void OAIInstance::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInstance::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInstance::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIInstance::isEnableRbac() const {
    return m_enable_rbac;
}
void OAIInstance::setEnableRbac(const bool &enable_rbac) {
    m_enable_rbac = enable_rbac;
    m_enable_rbac_isSet = true;
}

bool OAIInstance::is_enable_rbac_Set() const{
    return m_enable_rbac_isSet;
}

bool OAIInstance::is_enable_rbac_Valid() const{
    return m_enable_rbac_isValid;
}

bool OAIInstance::isEnableStackdriverLogging() const {
    return m_enable_stackdriver_logging;
}
void OAIInstance::setEnableStackdriverLogging(const bool &enable_stackdriver_logging) {
    m_enable_stackdriver_logging = enable_stackdriver_logging;
    m_enable_stackdriver_logging_isSet = true;
}

bool OAIInstance::is_enable_stackdriver_logging_Set() const{
    return m_enable_stackdriver_logging_isSet;
}

bool OAIInstance::is_enable_stackdriver_logging_Valid() const{
    return m_enable_stackdriver_logging_isValid;
}

bool OAIInstance::isEnableStackdriverMonitoring() const {
    return m_enable_stackdriver_monitoring;
}
void OAIInstance::setEnableStackdriverMonitoring(const bool &enable_stackdriver_monitoring) {
    m_enable_stackdriver_monitoring = enable_stackdriver_monitoring;
    m_enable_stackdriver_monitoring_isSet = true;
}

bool OAIInstance::is_enable_stackdriver_monitoring_Set() const{
    return m_enable_stackdriver_monitoring_isSet;
}

bool OAIInstance::is_enable_stackdriver_monitoring_Valid() const{
    return m_enable_stackdriver_monitoring_isValid;
}

bool OAIInstance::isEnableZoneSeparation() const {
    return m_enable_zone_separation;
}
void OAIInstance::setEnableZoneSeparation(const bool &enable_zone_separation) {
    m_enable_zone_separation = enable_zone_separation;
    m_enable_zone_separation_isSet = true;
}

bool OAIInstance::is_enable_zone_separation_Set() const{
    return m_enable_zone_separation_isSet;
}

bool OAIInstance::is_enable_zone_separation_Valid() const{
    return m_enable_zone_separation_isValid;
}

OAIEventPublishConfig OAIInstance::getEventPublishConfig() const {
    return m_event_publish_config;
}
void OAIInstance::setEventPublishConfig(const OAIEventPublishConfig &event_publish_config) {
    m_event_publish_config = event_publish_config;
    m_event_publish_config_isSet = true;
}

bool OAIInstance::is_event_publish_config_Set() const{
    return m_event_publish_config_isSet;
}

bool OAIInstance::is_event_publish_config_Valid() const{
    return m_event_publish_config_isValid;
}

QString OAIInstance::getGcsBucket() const {
    return m_gcs_bucket;
}
void OAIInstance::setGcsBucket(const QString &gcs_bucket) {
    m_gcs_bucket = gcs_bucket;
    m_gcs_bucket_isSet = true;
}

bool OAIInstance::is_gcs_bucket_Set() const{
    return m_gcs_bucket_isSet;
}

bool OAIInstance::is_gcs_bucket_Valid() const{
    return m_gcs_bucket_isValid;
}

QMap<QString, QString> OAIInstance::getLabels() const {
    return m_labels;
}
void OAIInstance::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInstance::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInstance::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

OAINetworkConfig OAIInstance::getNetworkConfig() const {
    return m_network_config;
}
void OAIInstance::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIInstance::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIInstance::is_network_config_Valid() const{
    return m_network_config_isValid;
}

QMap<QString, QString> OAIInstance::getOptions() const {
    return m_options;
}
void OAIInstance::setOptions(const QMap<QString, QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIInstance::is_options_Set() const{
    return m_options_isSet;
}

bool OAIInstance::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIInstance::getP4ServiceAccount() const {
    return m_p4_service_account;
}
void OAIInstance::setP4ServiceAccount(const QString &p4_service_account) {
    m_p4_service_account = p4_service_account;
    m_p4_service_account_isSet = true;
}

bool OAIInstance::is_p4_service_account_Set() const{
    return m_p4_service_account_isSet;
}

bool OAIInstance::is_p4_service_account_Valid() const{
    return m_p4_service_account_isValid;
}

QString OAIInstance::getPatchRevision() const {
    return m_patch_revision;
}
void OAIInstance::setPatchRevision(const QString &patch_revision) {
    m_patch_revision = patch_revision;
    m_patch_revision_isSet = true;
}

bool OAIInstance::is_patch_revision_Set() const{
    return m_patch_revision_isSet;
}

bool OAIInstance::is_patch_revision_Valid() const{
    return m_patch_revision_isValid;
}

bool OAIInstance::isPrivateInstance() const {
    return m_private_instance;
}
void OAIInstance::setPrivateInstance(const bool &private_instance) {
    m_private_instance = private_instance;
    m_private_instance_isSet = true;
}

bool OAIInstance::is_private_instance_Set() const{
    return m_private_instance_isSet;
}

bool OAIInstance::is_private_instance_Valid() const{
    return m_private_instance_isValid;
}

bool OAIInstance::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIInstance::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIInstance::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIInstance::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIInstance::getServiceAccount() const {
    return m_service_account;
}
void OAIInstance::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIInstance::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIInstance::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIInstance::getServiceEndpoint() const {
    return m_service_endpoint;
}
void OAIInstance::setServiceEndpoint(const QString &service_endpoint) {
    m_service_endpoint = service_endpoint;
    m_service_endpoint_isSet = true;
}

bool OAIInstance::is_service_endpoint_Set() const{
    return m_service_endpoint_isSet;
}

bool OAIInstance::is_service_endpoint_Valid() const{
    return m_service_endpoint_isValid;
}

QString OAIInstance::getState() const {
    return m_state;
}
void OAIInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstance::getStateMessage() const {
    return m_state_message;
}
void OAIInstance::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIInstance::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIInstance::is_state_message_Valid() const{
    return m_state_message_isValid;
}

QString OAIInstance::getTenantProjectId() const {
    return m_tenant_project_id;
}
void OAIInstance::setTenantProjectId(const QString &tenant_project_id) {
    m_tenant_project_id = tenant_project_id;
    m_tenant_project_id_isSet = true;
}

bool OAIInstance::is_tenant_project_id_Set() const{
    return m_tenant_project_id_isSet;
}

bool OAIInstance::is_tenant_project_id_Valid() const{
    return m_tenant_project_id_isValid;
}

QString OAIInstance::getType() const {
    return m_type;
}
void OAIInstance::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInstance::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInstance::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIInstance::getUpdateTime() const {
    return m_update_time;
}
void OAIInstance::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInstance::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInstance::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIInstance::getVersion() const {
    return m_version;
}
void OAIInstance::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIInstance::is_version_Set() const{
    return m_version_isSet;
}

bool OAIInstance::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIInstance::getWorkforceIdentityServiceEndpoint() const {
    return m_workforce_identity_service_endpoint;
}
void OAIInstance::setWorkforceIdentityServiceEndpoint(const QString &workforce_identity_service_endpoint) {
    m_workforce_identity_service_endpoint = workforce_identity_service_endpoint;
    m_workforce_identity_service_endpoint_isSet = true;
}

bool OAIInstance::is_workforce_identity_service_endpoint_Set() const{
    return m_workforce_identity_service_endpoint_isSet;
}

bool OAIInstance::is_workforce_identity_service_endpoint_Valid() const{
    return m_workforce_identity_service_endpoint_isValid;
}

QString OAIInstance::getZone() const {
    return m_zone;
}
void OAIInstance::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIInstance::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIInstance::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_key_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataplex_data_lineage_integration_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataproc_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rbac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_stackdriver_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_stackdriver_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_zone_separation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_publish_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_p4_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workforce_identity_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
