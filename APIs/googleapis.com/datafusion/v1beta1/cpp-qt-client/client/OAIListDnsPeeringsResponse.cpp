/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDnsPeeringsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDnsPeeringsResponse::OAIListDnsPeeringsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDnsPeeringsResponse::OAIListDnsPeeringsResponse() {
    this->initializeModel();
}

OAIListDnsPeeringsResponse::~OAIListDnsPeeringsResponse() {}

void OAIListDnsPeeringsResponse::initializeModel() {

    m_dns_peerings_isSet = false;
    m_dns_peerings_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListDnsPeeringsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDnsPeeringsResponse::fromJsonObject(QJsonObject json) {

    m_dns_peerings_isValid = ::OpenAPI::fromJsonValue(m_dns_peerings, json[QString("dnsPeerings")]);
    m_dns_peerings_isSet = !json[QString("dnsPeerings")].isNull() && m_dns_peerings_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListDnsPeeringsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDnsPeeringsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_peerings.size() > 0) {
        obj.insert(QString("dnsPeerings"), ::OpenAPI::toJsonValue(m_dns_peerings));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIDnsPeering> OAIListDnsPeeringsResponse::getDnsPeerings() const {
    return m_dns_peerings;
}
void OAIListDnsPeeringsResponse::setDnsPeerings(const QList<OAIDnsPeering> &dns_peerings) {
    m_dns_peerings = dns_peerings;
    m_dns_peerings_isSet = true;
}

bool OAIListDnsPeeringsResponse::is_dns_peerings_Set() const{
    return m_dns_peerings_isSet;
}

bool OAIListDnsPeeringsResponse::is_dns_peerings_Valid() const{
    return m_dns_peerings_isValid;
}

QString OAIListDnsPeeringsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListDnsPeeringsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListDnsPeeringsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListDnsPeeringsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListDnsPeeringsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_peerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDnsPeeringsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
