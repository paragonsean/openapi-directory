/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstance.h
 *
 * Represents a Data Fusion instance.
 */

#ifndef OAIInstance_H
#define OAIInstance_H

#include <QJsonObject>

#include "OAIAccelerator.h"
#include "OAICryptoKeyConfig.h"
#include "OAIEventPublishConfig.h"
#include "OAINetworkConfig.h"
#include "OAIVersion.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccelerator;
class OAIVersion;
class OAICryptoKeyConfig;
class OAIEventPublishConfig;
class OAINetworkConfig;

class OAIInstance : public OAIObject {
public:
    OAIInstance();
    OAIInstance(QString json);
    ~OAIInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAccelerator> getAccelerators() const;
    void setAccelerators(const QList<OAIAccelerator> &accelerators);
    bool is_accelerators_Set() const;
    bool is_accelerators_Valid() const;

    QString getApiEndpoint() const;
    void setApiEndpoint(const QString &api_endpoint);
    bool is_api_endpoint_Set() const;
    bool is_api_endpoint_Valid() const;

    QList<OAIVersion> getAvailableVersion() const;
    void setAvailableVersion(const QList<OAIVersion> &available_version);
    bool is_available_version_Set() const;
    bool is_available_version_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    OAICryptoKeyConfig getCryptoKeyConfig() const;
    void setCryptoKeyConfig(const OAICryptoKeyConfig &crypto_key_config);
    bool is_crypto_key_config_Set() const;
    bool is_crypto_key_config_Valid() const;

    bool isDataplexDataLineageIntegrationEnabled() const;
    void setDataplexDataLineageIntegrationEnabled(const bool &dataplex_data_lineage_integration_enabled);
    bool is_dataplex_data_lineage_integration_enabled_Set() const;
    bool is_dataplex_data_lineage_integration_enabled_Valid() const;

    QString getDataprocServiceAccount() const;
    void setDataprocServiceAccount(const QString &dataproc_service_account);
    bool is_dataproc_service_account_Set() const;
    bool is_dataproc_service_account_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getDisabledReason() const;
    void setDisabledReason(const QList<QString> &disabled_reason);
    bool is_disabled_reason_Set() const;
    bool is_disabled_reason_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isEnableRbac() const;
    void setEnableRbac(const bool &enable_rbac);
    bool is_enable_rbac_Set() const;
    bool is_enable_rbac_Valid() const;

    bool isEnableStackdriverLogging() const;
    void setEnableStackdriverLogging(const bool &enable_stackdriver_logging);
    bool is_enable_stackdriver_logging_Set() const;
    bool is_enable_stackdriver_logging_Valid() const;

    bool isEnableStackdriverMonitoring() const;
    void setEnableStackdriverMonitoring(const bool &enable_stackdriver_monitoring);
    bool is_enable_stackdriver_monitoring_Set() const;
    bool is_enable_stackdriver_monitoring_Valid() const;

    bool isEnableZoneSeparation() const;
    void setEnableZoneSeparation(const bool &enable_zone_separation);
    bool is_enable_zone_separation_Set() const;
    bool is_enable_zone_separation_Valid() const;

    OAIEventPublishConfig getEventPublishConfig() const;
    void setEventPublishConfig(const OAIEventPublishConfig &event_publish_config);
    bool is_event_publish_config_Set() const;
    bool is_event_publish_config_Valid() const;

    QString getGcsBucket() const;
    void setGcsBucket(const QString &gcs_bucket);
    bool is_gcs_bucket_Set() const;
    bool is_gcs_bucket_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINetworkConfig getNetworkConfig() const;
    void setNetworkConfig(const OAINetworkConfig &network_config);
    bool is_network_config_Set() const;
    bool is_network_config_Valid() const;

    QMap<QString, QString> getOptions() const;
    void setOptions(const QMap<QString, QString> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    QString getP4ServiceAccount() const;
    void setP4ServiceAccount(const QString &p4_service_account);
    bool is_p4_service_account_Set() const;
    bool is_p4_service_account_Valid() const;

    QString getPatchRevision() const;
    void setPatchRevision(const QString &patch_revision);
    bool is_patch_revision_Set() const;
    bool is_patch_revision_Valid() const;

    bool isPrivateInstance() const;
    void setPrivateInstance(const bool &private_instance);
    bool is_private_instance_Set() const;
    bool is_private_instance_Valid() const;

    bool isSatisfiesPzs() const;
    void setSatisfiesPzs(const bool &satisfies_pzs);
    bool is_satisfies_pzs_Set() const;
    bool is_satisfies_pzs_Valid() const;

    Q_DECL_DEPRECATED QString getServiceAccount() const;
    Q_DECL_DEPRECATED void setServiceAccount(const QString &service_account);
    Q_DECL_DEPRECATED bool is_service_account_Set() const;
    Q_DECL_DEPRECATED bool is_service_account_Valid() const;

    QString getServiceEndpoint() const;
    void setServiceEndpoint(const QString &service_endpoint);
    bool is_service_endpoint_Set() const;
    bool is_service_endpoint_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateMessage() const;
    void setStateMessage(const QString &state_message);
    bool is_state_message_Set() const;
    bool is_state_message_Valid() const;

    QString getTenantProjectId() const;
    void setTenantProjectId(const QString &tenant_project_id);
    bool is_tenant_project_id_Set() const;
    bool is_tenant_project_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getWorkforceIdentityServiceEndpoint() const;
    void setWorkforceIdentityServiceEndpoint(const QString &workforce_identity_service_endpoint);
    bool is_workforce_identity_service_endpoint_Set() const;
    bool is_workforce_identity_service_endpoint_Valid() const;

    QString getZone() const;
    void setZone(const QString &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAccelerator> m_accelerators;
    bool m_accelerators_isSet;
    bool m_accelerators_isValid;

    QString m_api_endpoint;
    bool m_api_endpoint_isSet;
    bool m_api_endpoint_isValid;

    QList<OAIVersion> m_available_version;
    bool m_available_version_isSet;
    bool m_available_version_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    OAICryptoKeyConfig m_crypto_key_config;
    bool m_crypto_key_config_isSet;
    bool m_crypto_key_config_isValid;

    bool m_dataplex_data_lineage_integration_enabled;
    bool m_dataplex_data_lineage_integration_enabled_isSet;
    bool m_dataplex_data_lineage_integration_enabled_isValid;

    QString m_dataproc_service_account;
    bool m_dataproc_service_account_isSet;
    bool m_dataproc_service_account_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_disabled_reason;
    bool m_disabled_reason_isSet;
    bool m_disabled_reason_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_enable_rbac;
    bool m_enable_rbac_isSet;
    bool m_enable_rbac_isValid;

    bool m_enable_stackdriver_logging;
    bool m_enable_stackdriver_logging_isSet;
    bool m_enable_stackdriver_logging_isValid;

    bool m_enable_stackdriver_monitoring;
    bool m_enable_stackdriver_monitoring_isSet;
    bool m_enable_stackdriver_monitoring_isValid;

    bool m_enable_zone_separation;
    bool m_enable_zone_separation_isSet;
    bool m_enable_zone_separation_isValid;

    OAIEventPublishConfig m_event_publish_config;
    bool m_event_publish_config_isSet;
    bool m_event_publish_config_isValid;

    QString m_gcs_bucket;
    bool m_gcs_bucket_isSet;
    bool m_gcs_bucket_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINetworkConfig m_network_config;
    bool m_network_config_isSet;
    bool m_network_config_isValid;

    QMap<QString, QString> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    QString m_p4_service_account;
    bool m_p4_service_account_isSet;
    bool m_p4_service_account_isValid;

    QString m_patch_revision;
    bool m_patch_revision_isSet;
    bool m_patch_revision_isValid;

    bool m_private_instance;
    bool m_private_instance_isSet;
    bool m_private_instance_isValid;

    bool m_satisfies_pzs;
    bool m_satisfies_pzs_isSet;
    bool m_satisfies_pzs_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    QString m_service_endpoint;
    bool m_service_endpoint_isSet;
    bool m_service_endpoint_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_message;
    bool m_state_message_isSet;
    bool m_state_message_isValid;

    QString m_tenant_project_id;
    bool m_tenant_project_id_isSet;
    bool m_tenant_project_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_workforce_identity_service_endpoint;
    bool m_workforce_identity_service_endpoint_isSet;
    bool m_workforce_identity_service_endpoint_isValid;

    QString m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstance)

#endif // OAIInstance_H
