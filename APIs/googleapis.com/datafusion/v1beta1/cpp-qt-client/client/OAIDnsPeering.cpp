/**
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsPeering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsPeering::OAIDnsPeering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsPeering::OAIDnsPeering() {
    this->initializeModel();
}

OAIDnsPeering::~OAIDnsPeering() {}

void OAIDnsPeering::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_target_network_isSet = false;
    m_target_network_isValid = false;

    m_target_project_isSet = false;
    m_target_project_isValid = false;
}

void OAIDnsPeering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsPeering::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_target_network_isValid = ::OpenAPI::fromJsonValue(m_target_network, json[QString("targetNetwork")]);
    m_target_network_isSet = !json[QString("targetNetwork")].isNull() && m_target_network_isValid;

    m_target_project_isValid = ::OpenAPI::fromJsonValue(m_target_project, json[QString("targetProject")]);
    m_target_project_isSet = !json[QString("targetProject")].isNull() && m_target_project_isValid;
}

QString OAIDnsPeering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsPeering::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_target_network_isSet) {
        obj.insert(QString("targetNetwork"), ::OpenAPI::toJsonValue(m_target_network));
    }
    if (m_target_project_isSet) {
        obj.insert(QString("targetProject"), ::OpenAPI::toJsonValue(m_target_project));
    }
    return obj;
}

QString OAIDnsPeering::getDescription() const {
    return m_description;
}
void OAIDnsPeering::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDnsPeering::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDnsPeering::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDnsPeering::getDomain() const {
    return m_domain;
}
void OAIDnsPeering::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDnsPeering::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDnsPeering::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDnsPeering::getName() const {
    return m_name;
}
void OAIDnsPeering::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDnsPeering::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDnsPeering::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDnsPeering::getTargetNetwork() const {
    return m_target_network;
}
void OAIDnsPeering::setTargetNetwork(const QString &target_network) {
    m_target_network = target_network;
    m_target_network_isSet = true;
}

bool OAIDnsPeering::is_target_network_Set() const{
    return m_target_network_isSet;
}

bool OAIDnsPeering::is_target_network_Valid() const{
    return m_target_network_isValid;
}

QString OAIDnsPeering::getTargetProject() const {
    return m_target_project;
}
void OAIDnsPeering::setTargetProject(const QString &target_project) {
    m_target_project = target_project;
    m_target_project_isSet = true;
}

bool OAIDnsPeering::is_target_project_Set() const{
    return m_target_project_isSet;
}

bool OAIDnsPeering::is_target_project_Valid() const{
    return m_target_project_isValid;
}

bool OAIDnsPeering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsPeering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
