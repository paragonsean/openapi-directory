/*
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for using Private Service Connect to establish connectivity between the Data Fusion consumer project and the corresponding tenant project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:55.894095-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateServiceConnectConfig {
  public static final String SERIALIZED_NAME_EFFECTIVE_UNREACHABLE_CIDR_BLOCK = "effectiveUnreachableCidrBlock";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNREACHABLE_CIDR_BLOCK)
  private String effectiveUnreachableCidrBlock;

  public static final String SERIALIZED_NAME_NETWORK_ATTACHMENT = "networkAttachment";
  @SerializedName(SERIALIZED_NAME_NETWORK_ATTACHMENT)
  private String networkAttachment;

  public static final String SERIALIZED_NAME_UNREACHABLE_CIDR_BLOCK = "unreachableCidrBlock";
  @SerializedName(SERIALIZED_NAME_UNREACHABLE_CIDR_BLOCK)
  private String unreachableCidrBlock;

  public PrivateServiceConnectConfig() {
  }

  public PrivateServiceConnectConfig(
     String effectiveUnreachableCidrBlock
  ) {
    this();
    this.effectiveUnreachableCidrBlock = effectiveUnreachableCidrBlock;
  }

  /**
   * Output only. The CIDR block to which the CDF instance can&#39;t route traffic to in the consumer project VPC. The size of this block is /25. The format of this field is governed by RFC 4632. Example: 240.0.0.0/25
   * @return effectiveUnreachableCidrBlock
   */
  @javax.annotation.Nullable
  public String getEffectiveUnreachableCidrBlock() {
    return effectiveUnreachableCidrBlock;
  }



  public PrivateServiceConnectConfig networkAttachment(String networkAttachment) {
    this.networkAttachment = networkAttachment;
    return this;
  }

  /**
   * Required. The reference to the network attachment used to establish private connectivity. It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.
   * @return networkAttachment
   */
  @javax.annotation.Nullable
  public String getNetworkAttachment() {
    return networkAttachment;
  }

  public void setNetworkAttachment(String networkAttachment) {
    this.networkAttachment = networkAttachment;
  }


  public PrivateServiceConnectConfig unreachableCidrBlock(String unreachableCidrBlock) {
    this.unreachableCidrBlock = unreachableCidrBlock;
    return this;
  }

  /**
   * Optional. Input only. The CIDR block to which the CDF instance can&#39;t route traffic to in the consumer project VPC. The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment. This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses. If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632. Example: 192.168.0.0/25
   * @return unreachableCidrBlock
   */
  @javax.annotation.Nullable
  public String getUnreachableCidrBlock() {
    return unreachableCidrBlock;
  }

  public void setUnreachableCidrBlock(String unreachableCidrBlock) {
    this.unreachableCidrBlock = unreachableCidrBlock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateServiceConnectConfig privateServiceConnectConfig = (PrivateServiceConnectConfig) o;
    return Objects.equals(this.effectiveUnreachableCidrBlock, privateServiceConnectConfig.effectiveUnreachableCidrBlock) &&
        Objects.equals(this.networkAttachment, privateServiceConnectConfig.networkAttachment) &&
        Objects.equals(this.unreachableCidrBlock, privateServiceConnectConfig.unreachableCidrBlock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveUnreachableCidrBlock, networkAttachment, unreachableCidrBlock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateServiceConnectConfig {\n");
    sb.append("    effectiveUnreachableCidrBlock: ").append(toIndentedString(effectiveUnreachableCidrBlock)).append("\n");
    sb.append("    networkAttachment: ").append(toIndentedString(networkAttachment)).append("\n");
    sb.append("    unreachableCidrBlock: ").append(toIndentedString(unreachableCidrBlock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveUnreachableCidrBlock");
    openapiFields.add("networkAttachment");
    openapiFields.add("unreachableCidrBlock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateServiceConnectConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateServiceConnectConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateServiceConnectConfig is not found in the empty JSON string", PrivateServiceConnectConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateServiceConnectConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateServiceConnectConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("effectiveUnreachableCidrBlock") != null && !jsonObj.get("effectiveUnreachableCidrBlock").isJsonNull()) && !jsonObj.get("effectiveUnreachableCidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveUnreachableCidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveUnreachableCidrBlock").toString()));
      }
      if ((jsonObj.get("networkAttachment") != null && !jsonObj.get("networkAttachment").isJsonNull()) && !jsonObj.get("networkAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkAttachment").toString()));
      }
      if ((jsonObj.get("unreachableCidrBlock") != null && !jsonObj.get("unreachableCidrBlock").isJsonNull()) && !jsonObj.get("unreachableCidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unreachableCidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unreachableCidrBlock").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateServiceConnectConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateServiceConnectConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateServiceConnectConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateServiceConnectConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateServiceConnectConfig>() {
           @Override
           public void write(JsonWriter out, PrivateServiceConnectConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateServiceConnectConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateServiceConnectConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateServiceConnectConfig
   * @throws IOException if the JSON string is invalid with respect to PrivateServiceConnectConfig
   */
  public static PrivateServiceConnectConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateServiceConnectConfig.class);
  }

  /**
   * Convert an instance of PrivateServiceConnectConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

