/*
 * Cloud Data Fusion API
 * Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Persistent Disk service-specific Data. Contains information that may not be appropriate for the generic DRZ Augmented View. This currently includes LSV Colossus Roots and GCS Buckets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:55.894095-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersistentDiskData {
  public static final String SERIALIZED_NAME_CFS_ROOTS = "cfsRoots";
  @SerializedName(SERIALIZED_NAME_CFS_ROOTS)
  private List<String> cfsRoots = new ArrayList<>();

  public static final String SERIALIZED_NAME_GCS_BUCKET_NAMES = "gcsBucketNames";
  @SerializedName(SERIALIZED_NAME_GCS_BUCKET_NAMES)
  private List<String> gcsBucketNames = new ArrayList<>();

  public PersistentDiskData() {
  }

  public PersistentDiskData cfsRoots(List<String> cfsRoots) {
    this.cfsRoots = cfsRoots;
    return this;
  }

  public PersistentDiskData addCfsRootsItem(String cfsRootsItem) {
    if (this.cfsRoots == null) {
      this.cfsRoots = new ArrayList<>();
    }
    this.cfsRoots.add(cfsRootsItem);
    return this;
  }

  /**
   * Path to Colossus root for an LSV. NOTE: Unlike &#x60;cr_ti_guris&#x60; and &#x60;cr_ti_prefixes&#x60;, the field &#x60;cfs_roots&#x60; below does not need to be a GUri or GUri prefix. It can simply be any valid CFS or CFS2 Path. The DRZ KR8 SIG has more details overall, but generally the &#x60;cfs_roots&#x60; provided here should be scoped to an individual Persistent Disk. An example for a PD Disk with a disk ID 3277719120423414466, follows: * &#x60;cr_ti_guris&#x60; could be ‘/cfs2/pj/pd-cloud-prod’ as this is a valid GUri present in the DG KB and contains enough information to perform location monitoring and scope ownership of the Production Object. * &#x60;cfs_roots&#x60; would be: ‘/cfs2/pj/pd-cloud-staging/lsv000001234@/ lsv/projects~773365403387~zones~2700~disks~3277719120423414466 ~bank-blue-careful-3526-lsv00054DB1B7254BA3/’ as this allows us to enumerate the files on CFS2 that belong to an individual Disk.
   * @return cfsRoots
   */
  @javax.annotation.Nullable
  public List<String> getCfsRoots() {
    return cfsRoots;
  }

  public void setCfsRoots(List<String> cfsRoots) {
    this.cfsRoots = cfsRoots;
  }


  public PersistentDiskData gcsBucketNames(List<String> gcsBucketNames) {
    this.gcsBucketNames = gcsBucketNames;
    return this;
  }

  public PersistentDiskData addGcsBucketNamesItem(String gcsBucketNamesItem) {
    if (this.gcsBucketNames == null) {
      this.gcsBucketNames = new ArrayList<>();
    }
    this.gcsBucketNames.add(gcsBucketNamesItem);
    return this;
  }

  /**
   * The GCS Buckets that back this snapshot or image. This is required as &#x60;cr_ti_prefixes&#x60; and &#x60;cr_ti_guris&#x60; only accept TI resources. This should be the globally unique bucket name.
   * @return gcsBucketNames
   */
  @javax.annotation.Nullable
  public List<String> getGcsBucketNames() {
    return gcsBucketNames;
  }

  public void setGcsBucketNames(List<String> gcsBucketNames) {
    this.gcsBucketNames = gcsBucketNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersistentDiskData persistentDiskData = (PersistentDiskData) o;
    return Objects.equals(this.cfsRoots, persistentDiskData.cfsRoots) &&
        Objects.equals(this.gcsBucketNames, persistentDiskData.gcsBucketNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cfsRoots, gcsBucketNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersistentDiskData {\n");
    sb.append("    cfsRoots: ").append(toIndentedString(cfsRoots)).append("\n");
    sb.append("    gcsBucketNames: ").append(toIndentedString(gcsBucketNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cfsRoots");
    openapiFields.add("gcsBucketNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersistentDiskData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersistentDiskData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersistentDiskData is not found in the empty JSON string", PersistentDiskData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersistentDiskData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersistentDiskData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cfsRoots") != null && !jsonObj.get("cfsRoots").isJsonNull() && !jsonObj.get("cfsRoots").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cfsRoots` to be an array in the JSON string but got `%s`", jsonObj.get("cfsRoots").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gcsBucketNames") != null && !jsonObj.get("gcsBucketNames").isJsonNull() && !jsonObj.get("gcsBucketNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsBucketNames` to be an array in the JSON string but got `%s`", jsonObj.get("gcsBucketNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersistentDiskData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersistentDiskData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersistentDiskData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersistentDiskData.class));

       return (TypeAdapter<T>) new TypeAdapter<PersistentDiskData>() {
           @Override
           public void write(JsonWriter out, PersistentDiskData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersistentDiskData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersistentDiskData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersistentDiskData
   * @throws IOException if the JSON string is invalid with respect to PersistentDiskData
   */
  public static PersistentDiskData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersistentDiskData.class);
  }

  /**
   * Convert an instance of PersistentDiskData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

