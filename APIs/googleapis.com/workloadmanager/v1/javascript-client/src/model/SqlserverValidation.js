/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SqlserverValidationValidationDetail from './SqlserverValidationValidationDetail';

/**
 * The SqlserverValidation model module.
 * @module model/SqlserverValidation
 * @version v1
 */
class SqlserverValidation {
    /**
     * Constructs a new <code>SqlserverValidation</code>.
     * A presentation of SQLServer workload insight. The schema of SqlServer workloads validation related data.
     * @alias module:model/SqlserverValidation
     */
    constructor() { 
        
        SqlserverValidation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlserverValidation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlserverValidation} obj Optional instance to populate.
     * @return {module:model/SqlserverValidation} The populated <code>SqlserverValidation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlserverValidation();

            if (data.hasOwnProperty('agentVersion')) {
                obj['agentVersion'] = ApiClient.convertToType(data['agentVersion'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('validationDetails')) {
                obj['validationDetails'] = ApiClient.convertToType(data['validationDetails'], [SqlserverValidationValidationDetail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlserverValidation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlserverValidation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentVersion'] && !(typeof data['agentVersion'] === 'string' || data['agentVersion'] instanceof String)) {
            throw new Error("Expected the field `agentVersion` to be a primitive type in the JSON string but got " + data['agentVersion']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        if (data['validationDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validationDetails'])) {
                throw new Error("Expected the field `validationDetails` to be an array in the JSON data but got " + data['validationDetails']);
            }
            // validate the optional field `validationDetails` (array)
            for (const item of data['validationDetails']) {
                SqlserverValidationValidationDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. The agent version collected this data point
 * @member {String} agentVersion
 */
SqlserverValidation.prototype['agentVersion'] = undefined;

/**
 * Required. The instance_name of the instance that the Insight data comes from. According to https://linter.aip.dev/122/name-suffix: field names should not use the _name suffix unless the field would be ambiguous without it.
 * @member {String} instance
 */
SqlserverValidation.prototype['instance'] = undefined;

/**
 * Required. The project_id of the cloud project that the Insight data comes from.
 * @member {String} projectId
 */
SqlserverValidation.prototype['projectId'] = undefined;

/**
 * Optional. A list of SqlServer validation metrics data.
 * @member {Array.<module:model/SqlserverValidationValidationDetail>} validationDetails
 */
SqlserverValidation.prototype['validationDetails'] = undefined;






export default SqlserverValidation;

