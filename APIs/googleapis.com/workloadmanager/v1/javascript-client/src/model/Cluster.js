/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cluster model module.
 * @module model/Cluster
 * @version v1
 */
class Cluster {
    /**
     * Constructs a new <code>Cluster</code>.
     * The cluster for sqlserver
     * @alias module:model/Cluster
     */
    constructor() { 
        
        Cluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cluster} obj Optional instance to populate.
     * @return {module:model/Cluster} The populated <code>Cluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cluster();

            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], ['String']);
            }
            if (data.hasOwnProperty('witnessServer')) {
                obj['witnessServer'] = ApiClient.convertToType(data['witnessServer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['nodes'])) {
            throw new Error("Expected the field `nodes` to be an array in the JSON data but got " + data['nodes']);
        }
        // ensure the json data is a string
        if (data['witnessServer'] && !(typeof data['witnessServer'] === 'string' || data['witnessServer'] instanceof String)) {
            throw new Error("Expected the field `witnessServer` to be a primitive type in the JSON string but got " + data['witnessServer']);
        }

        return true;
    }


}



/**
 * Output only. The nodes
 * @member {Array.<String>} nodes
 */
Cluster.prototype['nodes'] = undefined;

/**
 * Output only. The witness server
 * @member {String} witnessServer
 */
Cluster.prototype['witnessServer'] = undefined;






export default Cluster;

