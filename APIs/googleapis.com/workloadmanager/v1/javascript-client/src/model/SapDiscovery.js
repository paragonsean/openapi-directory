/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SapDiscoveryComponent from './SapDiscoveryComponent';
import SapDiscoveryMetadata from './SapDiscoveryMetadata';
import SapDiscoveryWorkloadProperties from './SapDiscoveryWorkloadProperties';

/**
 * The SapDiscovery model module.
 * @module model/SapDiscovery
 * @version v1
 */
class SapDiscovery {
    /**
     * Constructs a new <code>SapDiscovery</code>.
     * The schema of SAP system discovery data.
     * @alias module:model/SapDiscovery
     */
    constructor() { 
        
        SapDiscovery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SapDiscovery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SapDiscovery} obj Optional instance to populate.
     * @return {module:model/SapDiscovery} The populated <code>SapDiscovery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SapDiscovery();

            if (data.hasOwnProperty('applicationLayer')) {
                obj['applicationLayer'] = SapDiscoveryComponent.constructFromObject(data['applicationLayer']);
            }
            if (data.hasOwnProperty('databaseLayer')) {
                obj['databaseLayer'] = SapDiscoveryComponent.constructFromObject(data['databaseLayer']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = SapDiscoveryMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('projectNumber')) {
                obj['projectNumber'] = ApiClient.convertToType(data['projectNumber'], 'String');
            }
            if (data.hasOwnProperty('systemId')) {
                obj['systemId'] = ApiClient.convertToType(data['systemId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('workloadProperties')) {
                obj['workloadProperties'] = SapDiscoveryWorkloadProperties.constructFromObject(data['workloadProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SapDiscovery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SapDiscovery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applicationLayer`
        if (data['applicationLayer']) { // data not null
          SapDiscoveryComponent.validateJSON(data['applicationLayer']);
        }
        // validate the optional field `databaseLayer`
        if (data['databaseLayer']) { // data not null
          SapDiscoveryComponent.validateJSON(data['databaseLayer']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          SapDiscoveryMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['projectNumber'] && !(typeof data['projectNumber'] === 'string' || data['projectNumber'] instanceof String)) {
            throw new Error("Expected the field `projectNumber` to be a primitive type in the JSON string but got " + data['projectNumber']);
        }
        // ensure the json data is a string
        if (data['systemId'] && !(typeof data['systemId'] === 'string' || data['systemId'] instanceof String)) {
            throw new Error("Expected the field `systemId` to be a primitive type in the JSON string but got " + data['systemId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `workloadProperties`
        if (data['workloadProperties']) { // data not null
          SapDiscoveryWorkloadProperties.validateJSON(data['workloadProperties']);
        }

        return true;
    }


}



/**
 * @member {module:model/SapDiscoveryComponent} applicationLayer
 */
SapDiscovery.prototype['applicationLayer'] = undefined;

/**
 * @member {module:model/SapDiscoveryComponent} databaseLayer
 */
SapDiscovery.prototype['databaseLayer'] = undefined;

/**
 * @member {module:model/SapDiscoveryMetadata} metadata
 */
SapDiscovery.prototype['metadata'] = undefined;

/**
 * Optional. The GCP project number that this SapSystem belongs to.
 * @member {String} projectNumber
 */
SapDiscovery.prototype['projectNumber'] = undefined;

/**
 * Output only. A combination of database SID, database instance URI and tenant DB name to make a unique identifier per-system.
 * @member {String} systemId
 */
SapDiscovery.prototype['systemId'] = undefined;

/**
 * Required. Unix timestamp this system has been updated last.
 * @member {String} updateTime
 */
SapDiscovery.prototype['updateTime'] = undefined;

/**
 * @member {module:model/SapDiscoveryWorkloadProperties} workloadProperties
 */
SapDiscovery.prototype['workloadProperties'] = undefined;






export default SapDiscovery;

