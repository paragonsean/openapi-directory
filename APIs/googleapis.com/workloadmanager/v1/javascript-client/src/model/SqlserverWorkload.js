/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilityGroup from './AvailabilityGroup';
import Cluster from './Cluster';
import Database from './Database';
import LoadBalancerServer from './LoadBalancerServer';

/**
 * The SqlserverWorkload model module.
 * @module model/SqlserverWorkload
 * @version v1
 */
class SqlserverWorkload {
    /**
     * Constructs a new <code>SqlserverWorkload</code>.
     * The body of sqlserver workload
     * @alias module:model/SqlserverWorkload
     */
    constructor() { 
        
        SqlserverWorkload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlserverWorkload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlserverWorkload} obj Optional instance to populate.
     * @return {module:model/SqlserverWorkload} The populated <code>SqlserverWorkload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlserverWorkload();

            if (data.hasOwnProperty('ags')) {
                obj['ags'] = ApiClient.convertToType(data['ags'], [AvailabilityGroup]);
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = Cluster.constructFromObject(data['cluster']);
            }
            if (data.hasOwnProperty('databases')) {
                obj['databases'] = ApiClient.convertToType(data['databases'], [Database]);
            }
            if (data.hasOwnProperty('loadBalancerServer')) {
                obj['loadBalancerServer'] = LoadBalancerServer.constructFromObject(data['loadBalancerServer']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlserverWorkload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlserverWorkload</code>.
     */
    static validateJSON(data) {
        if (data['ags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ags'])) {
                throw new Error("Expected the field `ags` to be an array in the JSON data but got " + data['ags']);
            }
            // validate the optional field `ags` (array)
            for (const item of data['ags']) {
                AvailabilityGroup.validateJSON(item);
            };
        }
        // validate the optional field `cluster`
        if (data['cluster']) { // data not null
          Cluster.validateJSON(data['cluster']);
        }
        if (data['databases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['databases'])) {
                throw new Error("Expected the field `databases` to be an array in the JSON data but got " + data['databases']);
            }
            // validate the optional field `databases` (array)
            for (const item of data['databases']) {
                Database.validateJSON(item);
            };
        }
        // validate the optional field `loadBalancerServer`
        if (data['loadBalancerServer']) { // data not null
          LoadBalancerServer.validateJSON(data['loadBalancerServer']);
        }

        return true;
    }


}



/**
 * Output only. The availability groups for sqlserver
 * @member {Array.<module:model/AvailabilityGroup>} ags
 */
SqlserverWorkload.prototype['ags'] = undefined;

/**
 * @member {module:model/Cluster} cluster
 */
SqlserverWorkload.prototype['cluster'] = undefined;

/**
 * Output only. The databases for sqlserver
 * @member {Array.<module:model/Database>} databases
 */
SqlserverWorkload.prototype['databases'] = undefined;

/**
 * @member {module:model/LoadBalancerServer} loadBalancerServer
 */
SqlserverWorkload.prototype['loadBalancerServer'] = undefined;






export default SqlserverWorkload;

