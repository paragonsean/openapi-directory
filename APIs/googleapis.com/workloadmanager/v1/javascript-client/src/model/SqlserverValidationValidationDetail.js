/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SqlserverValidationDetails from './SqlserverValidationDetails';

/**
 * The SqlserverValidationValidationDetail model module.
 * @module model/SqlserverValidationValidationDetail
 * @version v1
 */
class SqlserverValidationValidationDetail {
    /**
     * Constructs a new <code>SqlserverValidationValidationDetail</code>.
     * Message describing the Sqlserver validation metrics.
     * @alias module:model/SqlserverValidationValidationDetail
     */
    constructor() { 
        
        SqlserverValidationValidationDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlserverValidationValidationDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlserverValidationValidationDetail} obj Optional instance to populate.
     * @return {module:model/SqlserverValidationValidationDetail} The populated <code>SqlserverValidationValidationDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlserverValidationValidationDetail();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [SqlserverValidationDetails]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlserverValidationValidationDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlserverValidationValidationDetail</code>.
     */
    static validateJSON(data) {
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                SqlserverValidationDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Required. Details wraps map that represents collected data names and values.
 * @member {Array.<module:model/SqlserverValidationDetails>} details
 */
SqlserverValidationValidationDetail.prototype['details'] = undefined;

/**
 * Optional. The Sqlserver system that the validation data is from.
 * @member {module:model/SqlserverValidationValidationDetail.TypeEnum} type
 */
SqlserverValidationValidationDetail.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SqlserverValidationValidationDetail['TypeEnum'] = {

    /**
     * value: "SQLSERVER_VALIDATION_TYPE_UNSPECIFIED"
     * @const
     */
    "SQLSERVER_VALIDATION_TYPE_UNSPECIFIED": "SQLSERVER_VALIDATION_TYPE_UNSPECIFIED",

    /**
     * value: "OS"
     * @const
     */
    "OS": "OS",

    /**
     * value: "DB_LOG_DISK_SEPARATION"
     * @const
     */
    "DB_LOG_DISK_SEPARATION": "DB_LOG_DISK_SEPARATION",

    /**
     * value: "DB_MAX_PARALLELISM"
     * @const
     */
    "DB_MAX_PARALLELISM": "DB_MAX_PARALLELISM",

    /**
     * value: "DB_CXPACKET_WAITS"
     * @const
     */
    "DB_CXPACKET_WAITS": "DB_CXPACKET_WAITS",

    /**
     * value: "DB_TRANSACTION_LOG_HANDLING"
     * @const
     */
    "DB_TRANSACTION_LOG_HANDLING": "DB_TRANSACTION_LOG_HANDLING",

    /**
     * value: "DB_VIRTUAL_LOG_FILE_COUNT"
     * @const
     */
    "DB_VIRTUAL_LOG_FILE_COUNT": "DB_VIRTUAL_LOG_FILE_COUNT",

    /**
     * value: "DB_BUFFER_POOL_EXTENSION"
     * @const
     */
    "DB_BUFFER_POOL_EXTENSION": "DB_BUFFER_POOL_EXTENSION",

    /**
     * value: "DB_MAX_SERVER_MEMORY"
     * @const
     */
    "DB_MAX_SERVER_MEMORY": "DB_MAX_SERVER_MEMORY",

    /**
     * value: "INSTANCE_METRICS"
     * @const
     */
    "INSTANCE_METRICS": "INSTANCE_METRICS",

    /**
     * value: "DB_INDEX_FRAGMENTATION"
     * @const
     */
    "DB_INDEX_FRAGMENTATION": "DB_INDEX_FRAGMENTATION",

    /**
     * value: "DB_TABLE_INDEX_COMPRESSION"
     * @const
     */
    "DB_TABLE_INDEX_COMPRESSION": "DB_TABLE_INDEX_COMPRESSION",

    /**
     * value: "DB_BACKUP_POLICY"
     * @const
     */
    "DB_BACKUP_POLICY": "DB_BACKUP_POLICY"
};



export default SqlserverValidationValidationDetail;

