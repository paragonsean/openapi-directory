/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Execution model module.
 * @module model/Execution
 * @version v1
 */
class Execution {
    /**
     * Constructs a new <code>Execution</code>.
     * Message describing Execution object
     * @alias module:model/Execution
     */
    constructor() { 
        
        Execution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Execution} obj Optional instance to populate.
     * @return {module:model/Execution} The populated <code>Execution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Execution();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('evaluationId')) {
                obj['evaluationId'] = ApiClient.convertToType(data['evaluationId'], 'String');
            }
            if (data.hasOwnProperty('inventoryTime')) {
                obj['inventoryTime'] = ApiClient.convertToType(data['inventoryTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runType')) {
                obj['runType'] = ApiClient.convertToType(data['runType'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Execution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Execution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['evaluationId'] && !(typeof data['evaluationId'] === 'string' || data['evaluationId'] instanceof String)) {
            throw new Error("Expected the field `evaluationId` to be a primitive type in the JSON string but got " + data['evaluationId']);
        }
        // ensure the json data is a string
        if (data['inventoryTime'] && !(typeof data['inventoryTime'] === 'string' || data['inventoryTime'] instanceof String)) {
            throw new Error("Expected the field `inventoryTime` to be a primitive type in the JSON string but got " + data['inventoryTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['runType'] && !(typeof data['runType'] === 'string' || data['runType'] instanceof String)) {
            throw new Error("Expected the field `runType` to be a primitive type in the JSON string but got " + data['runType']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. [Output only] End time stamp
 * @member {String} endTime
 */
Execution.prototype['endTime'] = undefined;

/**
 * Output only. [Output only] Evaluation ID
 * @member {String} evaluationId
 */
Execution.prototype['evaluationId'] = undefined;

/**
 * Output only. [Output only] Inventory time stamp
 * @member {String} inventoryTime
 */
Execution.prototype['inventoryTime'] = undefined;

/**
 * Labels as key value pairs
 * @member {Object.<String, String>} labels
 */
Execution.prototype['labels'] = undefined;

/**
 * The name of execution resource. The format is projects/{project}/locations/{location}/evaluations/{evaluation}/executions/{execution}
 * @member {String} name
 */
Execution.prototype['name'] = undefined;

/**
 * type represent whether the execution executed directly by user or scheduled according evaluation.schedule field.
 * @member {module:model/Execution.RunTypeEnum} runType
 */
Execution.prototype['runType'] = undefined;

/**
 * Output only. [Output only] Start time stamp
 * @member {String} startTime
 */
Execution.prototype['startTime'] = undefined;

/**
 * Output only. [Output only] State
 * @member {module:model/Execution.StateEnum} state
 */
Execution.prototype['state'] = undefined;





/**
 * Allowed values for the <code>runType</code> property.
 * @enum {String}
 * @readonly
 */
Execution['RunTypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "ONE_TIME"
     * @const
     */
    "ONE_TIME": "ONE_TIME",

    /**
     * value: "SCHEDULED"
     * @const
     */
    "SCHEDULED": "SCHEDULED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Execution['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default Execution;

