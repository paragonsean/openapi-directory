/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Instance from './Instance';

/**
 * The Layer model module.
 * @module model/Layer
 * @version v1
 */
class Layer {
    /**
     * Constructs a new <code>Layer</code>.
     * The database layer
     * @alias module:model/Layer
     */
    constructor() { 
        
        Layer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Layer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Layer} obj Optional instance to populate.
     * @return {module:model/Layer} The populated <code>Layer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Layer();

            if (data.hasOwnProperty('applicationType')) {
                obj['applicationType'] = ApiClient.convertToType(data['applicationType'], 'String');
            }
            if (data.hasOwnProperty('databaseType')) {
                obj['databaseType'] = ApiClient.convertToType(data['databaseType'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [Instance]);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Layer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Layer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicationType'] && !(typeof data['applicationType'] === 'string' || data['applicationType'] instanceof String)) {
            throw new Error("Expected the field `applicationType` to be a primitive type in the JSON string but got " + data['applicationType']);
        }
        // ensure the json data is a string
        if (data['databaseType'] && !(typeof data['databaseType'] === 'string' || data['databaseType'] instanceof String)) {
            throw new Error("Expected the field `databaseType` to be a primitive type in the JSON string but got " + data['databaseType']);
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                Instance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }

        return true;
    }


}



/**
 * the application layer
 * @member {String} applicationType
 */
Layer.prototype['applicationType'] = undefined;

/**
 * Optional. the database layer
 * @member {String} databaseType
 */
Layer.prototype['databaseType'] = undefined;

/**
 * Optional. instances in a layer
 * @member {Array.<module:model/Instance>} instances
 */
Layer.prototype['instances'] = undefined;

/**
 * Output only. system identification of a layer
 * @member {String} sid
 */
Layer.prototype['sid'] = undefined;






export default Layer;

