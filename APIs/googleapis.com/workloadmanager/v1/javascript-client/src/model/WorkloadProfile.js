/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Layer from './Layer';
import SapWorkload from './SapWorkload';
import SqlserverWorkload from './SqlserverWorkload';
import ThreeTierWorkload from './ThreeTierWorkload';

/**
 * The WorkloadProfile model module.
 * @module model/WorkloadProfile
 * @version v1
 */
class WorkloadProfile {
    /**
     * Constructs a new <code>WorkloadProfile</code>.
     * workload resource
     * @alias module:model/WorkloadProfile
     */
    constructor() { 
        
        WorkloadProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkloadProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkloadProfile} obj Optional instance to populate.
     * @return {module:model/WorkloadProfile} The populated <code>WorkloadProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkloadProfile();

            if (data.hasOwnProperty('application')) {
                obj['application'] = Layer.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('ascs')) {
                obj['ascs'] = Layer.constructFromObject(data['ascs']);
            }
            if (data.hasOwnProperty('database')) {
                obj['database'] = Layer.constructFromObject(data['database']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('refreshedTime')) {
                obj['refreshedTime'] = ApiClient.convertToType(data['refreshedTime'], 'String');
            }
            if (data.hasOwnProperty('sapWorkload')) {
                obj['sapWorkload'] = SapWorkload.constructFromObject(data['sapWorkload']);
            }
            if (data.hasOwnProperty('sqlserverWorkload')) {
                obj['sqlserverWorkload'] = SqlserverWorkload.constructFromObject(data['sqlserverWorkload']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('threeTierWorkload')) {
                obj['threeTierWorkload'] = ThreeTierWorkload.constructFromObject(data['threeTierWorkload']);
            }
            if (data.hasOwnProperty('workloadType')) {
                obj['workloadType'] = ApiClient.convertToType(data['workloadType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkloadProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkloadProfile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `application`
        if (data['application']) { // data not null
          Layer.validateJSON(data['application']);
        }
        // validate the optional field `ascs`
        if (data['ascs']) { // data not null
          Layer.validateJSON(data['ascs']);
        }
        // validate the optional field `database`
        if (data['database']) { // data not null
          Layer.validateJSON(data['database']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['refreshedTime'] && !(typeof data['refreshedTime'] === 'string' || data['refreshedTime'] instanceof String)) {
            throw new Error("Expected the field `refreshedTime` to be a primitive type in the JSON string but got " + data['refreshedTime']);
        }
        // validate the optional field `sapWorkload`
        if (data['sapWorkload']) { // data not null
          SapWorkload.validateJSON(data['sapWorkload']);
        }
        // validate the optional field `sqlserverWorkload`
        if (data['sqlserverWorkload']) { // data not null
          SqlserverWorkload.validateJSON(data['sqlserverWorkload']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `threeTierWorkload`
        if (data['threeTierWorkload']) { // data not null
          ThreeTierWorkload.validateJSON(data['threeTierWorkload']);
        }
        // ensure the json data is a string
        if (data['workloadType'] && !(typeof data['workloadType'] === 'string' || data['workloadType'] instanceof String)) {
            throw new Error("Expected the field `workloadType` to be a primitive type in the JSON string but got " + data['workloadType']);
        }

        return true;
    }


}



/**
 * @member {module:model/Layer} application
 */
WorkloadProfile.prototype['application'] = undefined;

/**
 * @member {module:model/Layer} ascs
 */
WorkloadProfile.prototype['ascs'] = undefined;

/**
 * @member {module:model/Layer} database
 */
WorkloadProfile.prototype['database'] = undefined;

/**
 * Optional. such as name, description, version. More example can be found in deployment
 * @member {Object.<String, String>} labels
 */
WorkloadProfile.prototype['labels'] = undefined;

/**
 * Identifier. name of resource names have the form 'projects/{project_id}/workloads/{workload_id}'
 * @member {String} name
 */
WorkloadProfile.prototype['name'] = undefined;

/**
 * Required. time when the workload data was refreshed
 * @member {String} refreshedTime
 */
WorkloadProfile.prototype['refreshedTime'] = undefined;

/**
 * @member {module:model/SapWorkload} sapWorkload
 */
WorkloadProfile.prototype['sapWorkload'] = undefined;

/**
 * @member {module:model/SqlserverWorkload} sqlserverWorkload
 */
WorkloadProfile.prototype['sqlserverWorkload'] = undefined;

/**
 * Output only. [output only] the current state if a a workload
 * @member {module:model/WorkloadProfile.StateEnum} state
 */
WorkloadProfile.prototype['state'] = undefined;

/**
 * @member {module:model/ThreeTierWorkload} threeTierWorkload
 */
WorkloadProfile.prototype['threeTierWorkload'] = undefined;

/**
 * Required. The type of the workload
 * @member {module:model/WorkloadProfile.WorkloadTypeEnum} workloadType
 */
WorkloadProfile.prototype['workloadType'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WorkloadProfile['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DEPLOYING"
     * @const
     */
    "DEPLOYING": "DEPLOYING",

    /**
     * value: "DESTROYING"
     * @const
     */
    "DESTROYING": "DESTROYING",

    /**
     * value: "MAINTENANCE"
     * @const
     */
    "MAINTENANCE": "MAINTENANCE"
};


/**
 * Allowed values for the <code>workloadType</code> property.
 * @enum {String}
 * @readonly
 */
WorkloadProfile['WorkloadTypeEnum'] = {

    /**
     * value: "WORKLOAD_TYPE_UNSPECIFIED"
     * @const
     */
    "WORKLOAD_TYPE_UNSPECIFIED": "WORKLOAD_TYPE_UNSPECIFIED",

    /**
     * value: "S4_HANA"
     * @const
     */
    "S4_HANA": "S4_HANA",

    /**
     * value: "SQL_SERVER"
     * @const
     */
    "SQL_SERVER": "SQL_SERVER",

    /**
     * value: "THREE_TIER_WEB_APP"
     * @const
     */
    "THREE_TIER_WEB_APP": "THREE_TIER_WEB_APP"
};



export default WorkloadProfile;

