/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rule model module.
 * @module model/Rule
 * @version v1
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * Message represent a rule
     * @alias module:model/Rule
     */
    constructor() { 
        
        Rule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primaryCategory')) {
                obj['primaryCategory'] = ApiClient.convertToType(data['primaryCategory'], 'String');
            }
            if (data.hasOwnProperty('remediation')) {
                obj['remediation'] = ApiClient.convertToType(data['remediation'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('secondaryCategory')) {
                obj['secondaryCategory'] = ApiClient.convertToType(data['secondaryCategory'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primaryCategory'] && !(typeof data['primaryCategory'] === 'string' || data['primaryCategory'] instanceof String)) {
            throw new Error("Expected the field `primaryCategory` to be a primitive type in the JSON string but got " + data['primaryCategory']);
        }
        // ensure the json data is a string
        if (data['remediation'] && !(typeof data['remediation'] === 'string' || data['remediation'] instanceof String)) {
            throw new Error("Expected the field `remediation` to be a primitive type in the JSON string but got " + data['remediation']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['secondaryCategory'] && !(typeof data['secondaryCategory'] === 'string' || data['secondaryCategory'] instanceof String)) {
            throw new Error("Expected the field `secondaryCategory` to be a primitive type in the JSON string but got " + data['secondaryCategory']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * descrite rule in plain language
 * @member {String} description
 */
Rule.prototype['description'] = undefined;

/**
 * the name display in UI
 * @member {String} displayName
 */
Rule.prototype['displayName'] = undefined;

/**
 * the message template for rule
 * @member {String} errorMessage
 */
Rule.prototype['errorMessage'] = undefined;

/**
 * rule name
 * @member {String} name
 */
Rule.prototype['name'] = undefined;

/**
 * the primary category
 * @member {String} primaryCategory
 */
Rule.prototype['primaryCategory'] = undefined;

/**
 * the remediation for the rule
 * @member {String} remediation
 */
Rule.prototype['remediation'] = undefined;

/**
 * Output only. the version of the rule
 * @member {String} revisionId
 */
Rule.prototype['revisionId'] = undefined;

/**
 * the secondary category
 * @member {String} secondaryCategory
 */
Rule.prototype['secondaryCategory'] = undefined;

/**
 * the severity of the rule
 * @member {String} severity
 */
Rule.prototype['severity'] = undefined;

/**
 * List of user-defined tags
 * @member {Array.<String>} tags
 */
Rule.prototype['tags'] = undefined;

/**
 * the docuement url for the rule
 * @member {String} uri
 */
Rule.prototype['uri'] = undefined;






export default Rule;

