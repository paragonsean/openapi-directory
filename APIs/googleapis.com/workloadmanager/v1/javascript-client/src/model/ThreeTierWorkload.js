/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APILayerServer from './APILayerServer';
import BackendServer from './BackendServer';
import FrontEndServer from './FrontEndServer';

/**
 * The ThreeTierWorkload model module.
 * @module model/ThreeTierWorkload
 * @version v1
 */
class ThreeTierWorkload {
    /**
     * Constructs a new <code>ThreeTierWorkload</code>.
     * The body of three tier workload
     * @alias module:model/ThreeTierWorkload
     */
    constructor() { 
        
        ThreeTierWorkload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThreeTierWorkload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThreeTierWorkload} obj Optional instance to populate.
     * @return {module:model/ThreeTierWorkload} The populated <code>ThreeTierWorkload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThreeTierWorkload();

            if (data.hasOwnProperty('apiLayer')) {
                obj['apiLayer'] = APILayerServer.constructFromObject(data['apiLayer']);
            }
            if (data.hasOwnProperty('backend')) {
                obj['backend'] = BackendServer.constructFromObject(data['backend']);
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('frontend')) {
                obj['frontend'] = FrontEndServer.constructFromObject(data['frontend']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThreeTierWorkload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThreeTierWorkload</code>.
     */
    static validateJSON(data) {
        // validate the optional field `apiLayer`
        if (data['apiLayer']) { // data not null
          APILayerServer.validateJSON(data['apiLayer']);
        }
        // validate the optional field `backend`
        if (data['backend']) { // data not null
          BackendServer.validateJSON(data['backend']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // validate the optional field `frontend`
        if (data['frontend']) { // data not null
          FrontEndServer.validateJSON(data['frontend']);
        }

        return true;
    }


}



/**
 * @member {module:model/APILayerServer} apiLayer
 */
ThreeTierWorkload.prototype['apiLayer'] = undefined;

/**
 * @member {module:model/BackendServer} backend
 */
ThreeTierWorkload.prototype['backend'] = undefined;

/**
 * Output only. the workload endpoint
 * @member {String} endpoint
 */
ThreeTierWorkload.prototype['endpoint'] = undefined;

/**
 * @member {module:model/FrontEndServer} frontend
 */
ThreeTierWorkload.prototype['frontend'] = undefined;






export default ThreeTierWorkload;

