/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryDestination from './BigQueryDestination';
import ResourceFilter from './ResourceFilter';
import ResourceStatus from './ResourceStatus';

/**
 * The Evaluation model module.
 * @module model/Evaluation
 * @version v1
 */
class Evaluation {
    /**
     * Constructs a new <code>Evaluation</code>.
     * LINT.IfChange Message describing Evaluation object
     * @alias module:model/Evaluation
     */
    constructor() { 
        
        Evaluation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Evaluation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Evaluation} obj Optional instance to populate.
     * @return {module:model/Evaluation} The populated <code>Evaluation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Evaluation();

            if (data.hasOwnProperty('bigQueryDestination')) {
                obj['bigQueryDestination'] = BigQueryDestination.constructFromObject(data['bigQueryDestination']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customRulesBucket')) {
                obj['customRulesBucket'] = ApiClient.convertToType(data['customRulesBucket'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceFilter')) {
                obj['resourceFilter'] = ResourceFilter.constructFromObject(data['resourceFilter']);
            }
            if (data.hasOwnProperty('resourceStatus')) {
                obj['resourceStatus'] = ResourceStatus.constructFromObject(data['resourceStatus']);
            }
            if (data.hasOwnProperty('ruleNames')) {
                obj['ruleNames'] = ApiClient.convertToType(data['ruleNames'], ['String']);
            }
            if (data.hasOwnProperty('ruleVersions')) {
                obj['ruleVersions'] = ApiClient.convertToType(data['ruleVersions'], ['String']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Evaluation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Evaluation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigQueryDestination`
        if (data['bigQueryDestination']) { // data not null
          BigQueryDestination.validateJSON(data['bigQueryDestination']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['customRulesBucket'] && !(typeof data['customRulesBucket'] === 'string' || data['customRulesBucket'] instanceof String)) {
            throw new Error("Expected the field `customRulesBucket` to be a primitive type in the JSON string but got " + data['customRulesBucket']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `resourceFilter`
        if (data['resourceFilter']) { // data not null
          ResourceFilter.validateJSON(data['resourceFilter']);
        }
        // validate the optional field `resourceStatus`
        if (data['resourceStatus']) { // data not null
          ResourceStatus.validateJSON(data['resourceStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ruleNames'])) {
            throw new Error("Expected the field `ruleNames` to be an array in the JSON data but got " + data['ruleNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ruleVersions'])) {
            throw new Error("Expected the field `ruleVersions` to be an array in the JSON data but got " + data['ruleVersions']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/BigQueryDestination} bigQueryDestination
 */
Evaluation.prototype['bigQueryDestination'] = undefined;

/**
 * Output only. [Output only] Create time stamp
 * @member {String} createTime
 */
Evaluation.prototype['createTime'] = undefined;

/**
 * The Cloud Storage bucket name for custom rules.
 * @member {String} customRulesBucket
 */
Evaluation.prototype['customRulesBucket'] = undefined;

/**
 * Description of the Evaluation
 * @member {String} description
 */
Evaluation.prototype['description'] = undefined;

/**
 * Labels as key value pairs
 * @member {Object.<String, String>} labels
 */
Evaluation.prototype['labels'] = undefined;

/**
 * name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'
 * @member {String} name
 */
Evaluation.prototype['name'] = undefined;

/**
 * @member {module:model/ResourceFilter} resourceFilter
 */
Evaluation.prototype['resourceFilter'] = undefined;

/**
 * @member {module:model/ResourceStatus} resourceStatus
 */
Evaluation.prototype['resourceStatus'] = undefined;

/**
 * the name of the rule
 * @member {Array.<String>} ruleNames
 */
Evaluation.prototype['ruleNames'] = undefined;

/**
 * Output only. [Output only] The updated rule ids if exist.
 * @member {Array.<String>} ruleVersions
 */
Evaluation.prototype['ruleVersions'] = undefined;

/**
 * crontab format schedule for scheduled evaluation, currently only support the following schedule: \"0 *_/1 * * *\", \"0 *_/6 * * *\", \"0 *_/12 * * *\", \"0 0 *_/1 * *\", \"0 0 *_/7 * *\",
 * @member {String} schedule
 */
Evaluation.prototype['schedule'] = undefined;

/**
 * Output only. [Output only] Update time stamp
 * @member {String} updateTime
 */
Evaluation.prototype['updateTime'] = undefined;






export default Evaluation;

