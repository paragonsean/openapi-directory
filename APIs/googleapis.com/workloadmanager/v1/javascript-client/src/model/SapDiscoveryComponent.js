/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SapDiscoveryComponentApplicationProperties from './SapDiscoveryComponentApplicationProperties';
import SapDiscoveryComponentDatabaseProperties from './SapDiscoveryComponentDatabaseProperties';
import SapDiscoveryResource from './SapDiscoveryResource';

/**
 * The SapDiscoveryComponent model module.
 * @module model/SapDiscoveryComponent
 * @version v1
 */
class SapDiscoveryComponent {
    /**
     * Constructs a new <code>SapDiscoveryComponent</code>.
     * Message describing the system component.
     * @alias module:model/SapDiscoveryComponent
     */
    constructor() { 
        
        SapDiscoveryComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SapDiscoveryComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SapDiscoveryComponent} obj Optional instance to populate.
     * @return {module:model/SapDiscoveryComponent} The populated <code>SapDiscoveryComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SapDiscoveryComponent();

            if (data.hasOwnProperty('applicationProperties')) {
                obj['applicationProperties'] = SapDiscoveryComponentApplicationProperties.constructFromObject(data['applicationProperties']);
            }
            if (data.hasOwnProperty('databaseProperties')) {
                obj['databaseProperties'] = SapDiscoveryComponentDatabaseProperties.constructFromObject(data['databaseProperties']);
            }
            if (data.hasOwnProperty('haHosts')) {
                obj['haHosts'] = ApiClient.convertToType(data['haHosts'], ['String']);
            }
            if (data.hasOwnProperty('hostProject')) {
                obj['hostProject'] = ApiClient.convertToType(data['hostProject'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [SapDiscoveryResource]);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('topologyType')) {
                obj['topologyType'] = ApiClient.convertToType(data['topologyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SapDiscoveryComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SapDiscoveryComponent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applicationProperties`
        if (data['applicationProperties']) { // data not null
          SapDiscoveryComponentApplicationProperties.validateJSON(data['applicationProperties']);
        }
        // validate the optional field `databaseProperties`
        if (data['databaseProperties']) { // data not null
          SapDiscoveryComponentDatabaseProperties.validateJSON(data['databaseProperties']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['haHosts'])) {
            throw new Error("Expected the field `haHosts` to be an array in the JSON data but got " + data['haHosts']);
        }
        // ensure the json data is a string
        if (data['hostProject'] && !(typeof data['hostProject'] === 'string' || data['hostProject'] instanceof String)) {
            throw new Error("Expected the field `hostProject` to be a primitive type in the JSON string but got " + data['hostProject']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                SapDiscoveryResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['topologyType'] && !(typeof data['topologyType'] === 'string' || data['topologyType'] instanceof String)) {
            throw new Error("Expected the field `topologyType` to be a primitive type in the JSON string but got " + data['topologyType']);
        }

        return true;
    }


}



/**
 * @member {module:model/SapDiscoveryComponentApplicationProperties} applicationProperties
 */
SapDiscoveryComponent.prototype['applicationProperties'] = undefined;

/**
 * @member {module:model/SapDiscoveryComponentDatabaseProperties} databaseProperties
 */
SapDiscoveryComponent.prototype['databaseProperties'] = undefined;

/**
 * Optional. A list of host URIs that are part of the HA configuration if present. An empty list indicates the component is not configured for HA.
 * @member {Array.<String>} haHosts
 */
SapDiscoveryComponent.prototype['haHosts'] = undefined;

/**
 * Required. Pantheon Project in which the resources reside.
 * @member {String} hostProject
 */
SapDiscoveryComponent.prototype['hostProject'] = undefined;

/**
 * Optional. The resources in a component.
 * @member {Array.<module:model/SapDiscoveryResource>} resources
 */
SapDiscoveryComponent.prototype['resources'] = undefined;

/**
 * Optional. The SAP identifier, used by the SAP software and helps differentiate systems for customers.
 * @member {String} sid
 */
SapDiscoveryComponent.prototype['sid'] = undefined;

/**
 * Optional. The detected topology of the component.
 * @member {module:model/SapDiscoveryComponent.TopologyTypeEnum} topologyType
 */
SapDiscoveryComponent.prototype['topologyType'] = undefined;





/**
 * Allowed values for the <code>topologyType</code> property.
 * @enum {String}
 * @readonly
 */
SapDiscoveryComponent['TopologyTypeEnum'] = {

    /**
     * value: "TOPOLOGY_TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TOPOLOGY_TYPE_UNSPECIFIED",

    /**
     * value: "TOPOLOGY_SCALE_UP"
     * @const
     */
    "SCALE_UP": "TOPOLOGY_SCALE_UP",

    /**
     * value: "TOPOLOGY_SCALE_OUT"
     * @const
     */
    "SCALE_OUT": "TOPOLOGY_SCALE_OUT"
};



export default SapDiscoveryComponent;

