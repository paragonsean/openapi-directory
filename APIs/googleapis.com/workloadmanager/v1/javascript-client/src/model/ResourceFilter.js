/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GceInstanceFilter from './GceInstanceFilter';

/**
 * The ResourceFilter model module.
 * @module model/ResourceFilter
 * @version v1
 */
class ResourceFilter {
    /**
     * Constructs a new <code>ResourceFilter</code>.
     * Message describing resource filters
     * @alias module:model/ResourceFilter
     */
    constructor() { 
        
        ResourceFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceFilter} obj Optional instance to populate.
     * @return {module:model/ResourceFilter} The populated <code>ResourceFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceFilter();

            if (data.hasOwnProperty('gceInstanceFilter')) {
                obj['gceInstanceFilter'] = GceInstanceFilter.constructFromObject(data['gceInstanceFilter']);
            }
            if (data.hasOwnProperty('inclusionLabels')) {
                obj['inclusionLabels'] = ApiClient.convertToType(data['inclusionLabels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resourceIdPatterns')) {
                obj['resourceIdPatterns'] = ApiClient.convertToType(data['resourceIdPatterns'], ['String']);
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gceInstanceFilter`
        if (data['gceInstanceFilter']) { // data not null
          GceInstanceFilter.validateJSON(data['gceInstanceFilter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceIdPatterns'])) {
            throw new Error("Expected the field `resourceIdPatterns` to be an array in the JSON data but got " + data['resourceIdPatterns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}



/**
 * @member {module:model/GceInstanceFilter} gceInstanceFilter
 */
ResourceFilter.prototype['gceInstanceFilter'] = undefined;

/**
 * The label used for filter resource
 * @member {Object.<String, String>} inclusionLabels
 */
ResourceFilter.prototype['inclusionLabels'] = undefined;

/**
 * The id pattern for filter resource
 * @member {Array.<String>} resourceIdPatterns
 */
ResourceFilter.prototype['resourceIdPatterns'] = undefined;

/**
 * The scopes of evaluation resource
 * @member {Array.<String>} scopes
 */
ResourceFilter.prototype['scopes'] = undefined;






export default ResourceFilter;

