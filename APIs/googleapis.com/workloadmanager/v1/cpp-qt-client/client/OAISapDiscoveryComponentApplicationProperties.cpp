/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryComponentApplicationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryComponentApplicationProperties::OAISapDiscoveryComponentApplicationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryComponentApplicationProperties::OAISapDiscoveryComponentApplicationProperties() {
    this->initializeModel();
}

OAISapDiscoveryComponentApplicationProperties::~OAISapDiscoveryComponentApplicationProperties() {}

void OAISapDiscoveryComponentApplicationProperties::initializeModel() {

    m_abap_isSet = false;
    m_abap_isValid = false;

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_ascs_uri_isSet = false;
    m_ascs_uri_isValid = false;

    m_kernel_version_isSet = false;
    m_kernel_version_isValid = false;

    m_nfs_uri_isSet = false;
    m_nfs_uri_isValid = false;
}

void OAISapDiscoveryComponentApplicationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryComponentApplicationProperties::fromJsonObject(QJsonObject json) {

    m_abap_isValid = ::OpenAPI::fromJsonValue(m_abap, json[QString("abap")]);
    m_abap_isSet = !json[QString("abap")].isNull() && m_abap_isValid;

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("applicationType")]);
    m_application_type_isSet = !json[QString("applicationType")].isNull() && m_application_type_isValid;

    m_ascs_uri_isValid = ::OpenAPI::fromJsonValue(m_ascs_uri, json[QString("ascsUri")]);
    m_ascs_uri_isSet = !json[QString("ascsUri")].isNull() && m_ascs_uri_isValid;

    m_kernel_version_isValid = ::OpenAPI::fromJsonValue(m_kernel_version, json[QString("kernelVersion")]);
    m_kernel_version_isSet = !json[QString("kernelVersion")].isNull() && m_kernel_version_isValid;

    m_nfs_uri_isValid = ::OpenAPI::fromJsonValue(m_nfs_uri, json[QString("nfsUri")]);
    m_nfs_uri_isSet = !json[QString("nfsUri")].isNull() && m_nfs_uri_isValid;
}

QString OAISapDiscoveryComponentApplicationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryComponentApplicationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_abap_isSet) {
        obj.insert(QString("abap"), ::OpenAPI::toJsonValue(m_abap));
    }
    if (m_application_type_isSet) {
        obj.insert(QString("applicationType"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_ascs_uri_isSet) {
        obj.insert(QString("ascsUri"), ::OpenAPI::toJsonValue(m_ascs_uri));
    }
    if (m_kernel_version_isSet) {
        obj.insert(QString("kernelVersion"), ::OpenAPI::toJsonValue(m_kernel_version));
    }
    if (m_nfs_uri_isSet) {
        obj.insert(QString("nfsUri"), ::OpenAPI::toJsonValue(m_nfs_uri));
    }
    return obj;
}

bool OAISapDiscoveryComponentApplicationProperties::isAbap() const {
    return m_abap;
}
void OAISapDiscoveryComponentApplicationProperties::setAbap(const bool &abap) {
    m_abap = abap;
    m_abap_isSet = true;
}

bool OAISapDiscoveryComponentApplicationProperties::is_abap_Set() const{
    return m_abap_isSet;
}

bool OAISapDiscoveryComponentApplicationProperties::is_abap_Valid() const{
    return m_abap_isValid;
}

QString OAISapDiscoveryComponentApplicationProperties::getApplicationType() const {
    return m_application_type;
}
void OAISapDiscoveryComponentApplicationProperties::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAISapDiscoveryComponentApplicationProperties::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAISapDiscoveryComponentApplicationProperties::is_application_type_Valid() const{
    return m_application_type_isValid;
}

QString OAISapDiscoveryComponentApplicationProperties::getAscsUri() const {
    return m_ascs_uri;
}
void OAISapDiscoveryComponentApplicationProperties::setAscsUri(const QString &ascs_uri) {
    m_ascs_uri = ascs_uri;
    m_ascs_uri_isSet = true;
}

bool OAISapDiscoveryComponentApplicationProperties::is_ascs_uri_Set() const{
    return m_ascs_uri_isSet;
}

bool OAISapDiscoveryComponentApplicationProperties::is_ascs_uri_Valid() const{
    return m_ascs_uri_isValid;
}

QString OAISapDiscoveryComponentApplicationProperties::getKernelVersion() const {
    return m_kernel_version;
}
void OAISapDiscoveryComponentApplicationProperties::setKernelVersion(const QString &kernel_version) {
    m_kernel_version = kernel_version;
    m_kernel_version_isSet = true;
}

bool OAISapDiscoveryComponentApplicationProperties::is_kernel_version_Set() const{
    return m_kernel_version_isSet;
}

bool OAISapDiscoveryComponentApplicationProperties::is_kernel_version_Valid() const{
    return m_kernel_version_isValid;
}

QString OAISapDiscoveryComponentApplicationProperties::getNfsUri() const {
    return m_nfs_uri;
}
void OAISapDiscoveryComponentApplicationProperties::setNfsUri(const QString &nfs_uri) {
    m_nfs_uri = nfs_uri;
    m_nfs_uri_isSet = true;
}

bool OAISapDiscoveryComponentApplicationProperties::is_nfs_uri_Set() const{
    return m_nfs_uri_isSet;
}

bool OAISapDiscoveryComponentApplicationProperties::is_nfs_uri_Valid() const{
    return m_nfs_uri_isValid;
}

bool OAISapDiscoveryComponentApplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ascs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryComponentApplicationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
