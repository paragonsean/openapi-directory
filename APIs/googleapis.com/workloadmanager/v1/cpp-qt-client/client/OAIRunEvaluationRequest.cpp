/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunEvaluationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunEvaluationRequest::OAIRunEvaluationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunEvaluationRequest::OAIRunEvaluationRequest() {
    this->initializeModel();
}

OAIRunEvaluationRequest::~OAIRunEvaluationRequest() {}

void OAIRunEvaluationRequest::initializeModel() {

    m_execution_isSet = false;
    m_execution_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIRunEvaluationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunEvaluationRequest::fromJsonObject(QJsonObject json) {

    m_execution_isValid = ::OpenAPI::fromJsonValue(m_execution, json[QString("execution")]);
    m_execution_isSet = !json[QString("execution")].isNull() && m_execution_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIRunEvaluationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunEvaluationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_execution.isSet()) {
        obj.insert(QString("execution"), ::OpenAPI::toJsonValue(m_execution));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIExecution OAIRunEvaluationRequest::getExecution() const {
    return m_execution;
}
void OAIRunEvaluationRequest::setExecution(const OAIExecution &execution) {
    m_execution = execution;
    m_execution_isSet = true;
}

bool OAIRunEvaluationRequest::is_execution_Set() const{
    return m_execution_isSet;
}

bool OAIRunEvaluationRequest::is_execution_Valid() const{
    return m_execution_isValid;
}

QString OAIRunEvaluationRequest::getExecutionId() const {
    return m_execution_id;
}
void OAIRunEvaluationRequest::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIRunEvaluationRequest::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIRunEvaluationRequest::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QString OAIRunEvaluationRequest::getRequestId() const {
    return m_request_id;
}
void OAIRunEvaluationRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRunEvaluationRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRunEvaluationRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIRunEvaluationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunEvaluationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
