/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryComponent::OAISapDiscoveryComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryComponent::OAISapDiscoveryComponent() {
    this->initializeModel();
}

OAISapDiscoveryComponent::~OAISapDiscoveryComponent() {}

void OAISapDiscoveryComponent::initializeModel() {

    m_application_properties_isSet = false;
    m_application_properties_isValid = false;

    m_database_properties_isSet = false;
    m_database_properties_isValid = false;

    m_ha_hosts_isSet = false;
    m_ha_hosts_isValid = false;

    m_host_project_isSet = false;
    m_host_project_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_topology_type_isSet = false;
    m_topology_type_isValid = false;
}

void OAISapDiscoveryComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryComponent::fromJsonObject(QJsonObject json) {

    m_application_properties_isValid = ::OpenAPI::fromJsonValue(m_application_properties, json[QString("applicationProperties")]);
    m_application_properties_isSet = !json[QString("applicationProperties")].isNull() && m_application_properties_isValid;

    m_database_properties_isValid = ::OpenAPI::fromJsonValue(m_database_properties, json[QString("databaseProperties")]);
    m_database_properties_isSet = !json[QString("databaseProperties")].isNull() && m_database_properties_isValid;

    m_ha_hosts_isValid = ::OpenAPI::fromJsonValue(m_ha_hosts, json[QString("haHosts")]);
    m_ha_hosts_isSet = !json[QString("haHosts")].isNull() && m_ha_hosts_isValid;

    m_host_project_isValid = ::OpenAPI::fromJsonValue(m_host_project, json[QString("hostProject")]);
    m_host_project_isSet = !json[QString("hostProject")].isNull() && m_host_project_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_topology_type_isValid = ::OpenAPI::fromJsonValue(m_topology_type, json[QString("topologyType")]);
    m_topology_type_isSet = !json[QString("topologyType")].isNull() && m_topology_type_isValid;
}

QString OAISapDiscoveryComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_application_properties.isSet()) {
        obj.insert(QString("applicationProperties"), ::OpenAPI::toJsonValue(m_application_properties));
    }
    if (m_database_properties.isSet()) {
        obj.insert(QString("databaseProperties"), ::OpenAPI::toJsonValue(m_database_properties));
    }
    if (m_ha_hosts.size() > 0) {
        obj.insert(QString("haHosts"), ::OpenAPI::toJsonValue(m_ha_hosts));
    }
    if (m_host_project_isSet) {
        obj.insert(QString("hostProject"), ::OpenAPI::toJsonValue(m_host_project));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_topology_type_isSet) {
        obj.insert(QString("topologyType"), ::OpenAPI::toJsonValue(m_topology_type));
    }
    return obj;
}

OAISapDiscoveryComponentApplicationProperties OAISapDiscoveryComponent::getApplicationProperties() const {
    return m_application_properties;
}
void OAISapDiscoveryComponent::setApplicationProperties(const OAISapDiscoveryComponentApplicationProperties &application_properties) {
    m_application_properties = application_properties;
    m_application_properties_isSet = true;
}

bool OAISapDiscoveryComponent::is_application_properties_Set() const{
    return m_application_properties_isSet;
}

bool OAISapDiscoveryComponent::is_application_properties_Valid() const{
    return m_application_properties_isValid;
}

OAISapDiscoveryComponentDatabaseProperties OAISapDiscoveryComponent::getDatabaseProperties() const {
    return m_database_properties;
}
void OAISapDiscoveryComponent::setDatabaseProperties(const OAISapDiscoveryComponentDatabaseProperties &database_properties) {
    m_database_properties = database_properties;
    m_database_properties_isSet = true;
}

bool OAISapDiscoveryComponent::is_database_properties_Set() const{
    return m_database_properties_isSet;
}

bool OAISapDiscoveryComponent::is_database_properties_Valid() const{
    return m_database_properties_isValid;
}

QList<QString> OAISapDiscoveryComponent::getHaHosts() const {
    return m_ha_hosts;
}
void OAISapDiscoveryComponent::setHaHosts(const QList<QString> &ha_hosts) {
    m_ha_hosts = ha_hosts;
    m_ha_hosts_isSet = true;
}

bool OAISapDiscoveryComponent::is_ha_hosts_Set() const{
    return m_ha_hosts_isSet;
}

bool OAISapDiscoveryComponent::is_ha_hosts_Valid() const{
    return m_ha_hosts_isValid;
}

QString OAISapDiscoveryComponent::getHostProject() const {
    return m_host_project;
}
void OAISapDiscoveryComponent::setHostProject(const QString &host_project) {
    m_host_project = host_project;
    m_host_project_isSet = true;
}

bool OAISapDiscoveryComponent::is_host_project_Set() const{
    return m_host_project_isSet;
}

bool OAISapDiscoveryComponent::is_host_project_Valid() const{
    return m_host_project_isValid;
}

QList<OAISapDiscoveryResource> OAISapDiscoveryComponent::getResources() const {
    return m_resources;
}
void OAISapDiscoveryComponent::setResources(const QList<OAISapDiscoveryResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAISapDiscoveryComponent::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAISapDiscoveryComponent::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAISapDiscoveryComponent::getSid() const {
    return m_sid;
}
void OAISapDiscoveryComponent::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAISapDiscoveryComponent::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAISapDiscoveryComponent::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAISapDiscoveryComponent::getTopologyType() const {
    return m_topology_type;
}
void OAISapDiscoveryComponent::setTopologyType(const QString &topology_type) {
    m_topology_type = topology_type;
    m_topology_type_isSet = true;
}

bool OAISapDiscoveryComponent::is_topology_type_Set() const{
    return m_topology_type_isSet;
}

bool OAISapDiscoveryComponent::is_topology_type_Valid() const{
    return m_topology_type_isValid;
}

bool OAISapDiscoveryComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ha_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topology_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
