/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_witness_server_isSet = false;
    m_witness_server_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_witness_server_isValid = ::OpenAPI::fromJsonValue(m_witness_server, json[QString("witnessServer")]);
    m_witness_server_isSet = !json[QString("witnessServer")].isNull() && m_witness_server_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_witness_server_isSet) {
        obj.insert(QString("witnessServer"), ::OpenAPI::toJsonValue(m_witness_server));
    }
    return obj;
}

QList<QString> OAICluster::getNodes() const {
    return m_nodes;
}
void OAICluster::setNodes(const QList<QString> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAICluster::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAICluster::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAICluster::getWitnessServer() const {
    return m_witness_server;
}
void OAICluster::setWitnessServer(const QString &witness_server) {
    m_witness_server = witness_server;
    m_witness_server_isSet = true;
}

bool OAICluster::is_witness_server_Set() const{
    return m_witness_server_isSet;
}

bool OAICluster::is_witness_server_Valid() const{
    return m_witness_server_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_witness_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
