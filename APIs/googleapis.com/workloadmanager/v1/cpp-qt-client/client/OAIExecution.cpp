/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecution::OAIExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecution::OAIExecution() {
    this->initializeModel();
}

OAIExecution::~OAIExecution() {}

void OAIExecution::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_evaluation_id_isSet = false;
    m_evaluation_id_isValid = false;

    m_inventory_time_isSet = false;
    m_inventory_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_run_type_isSet = false;
    m_run_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecution::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_evaluation_id_isValid = ::OpenAPI::fromJsonValue(m_evaluation_id, json[QString("evaluationId")]);
    m_evaluation_id_isSet = !json[QString("evaluationId")].isNull() && m_evaluation_id_isValid;

    m_inventory_time_isValid = ::OpenAPI::fromJsonValue(m_inventory_time, json[QString("inventoryTime")]);
    m_inventory_time_isSet = !json[QString("inventoryTime")].isNull() && m_inventory_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_run_type_isValid = ::OpenAPI::fromJsonValue(m_run_type, json[QString("runType")]);
    m_run_type_isSet = !json[QString("runType")].isNull() && m_run_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_evaluation_id_isSet) {
        obj.insert(QString("evaluationId"), ::OpenAPI::toJsonValue(m_evaluation_id));
    }
    if (m_inventory_time_isSet) {
        obj.insert(QString("inventoryTime"), ::OpenAPI::toJsonValue(m_inventory_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_run_type_isSet) {
        obj.insert(QString("runType"), ::OpenAPI::toJsonValue(m_run_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIExecution::getEndTime() const {
    return m_end_time;
}
void OAIExecution::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIExecution::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIExecution::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIExecution::getEvaluationId() const {
    return m_evaluation_id;
}
void OAIExecution::setEvaluationId(const QString &evaluation_id) {
    m_evaluation_id = evaluation_id;
    m_evaluation_id_isSet = true;
}

bool OAIExecution::is_evaluation_id_Set() const{
    return m_evaluation_id_isSet;
}

bool OAIExecution::is_evaluation_id_Valid() const{
    return m_evaluation_id_isValid;
}

QString OAIExecution::getInventoryTime() const {
    return m_inventory_time;
}
void OAIExecution::setInventoryTime(const QString &inventory_time) {
    m_inventory_time = inventory_time;
    m_inventory_time_isSet = true;
}

bool OAIExecution::is_inventory_time_Set() const{
    return m_inventory_time_isSet;
}

bool OAIExecution::is_inventory_time_Valid() const{
    return m_inventory_time_isValid;
}

QMap<QString, QString> OAIExecution::getLabels() const {
    return m_labels;
}
void OAIExecution::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIExecution::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIExecution::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIExecution::getName() const {
    return m_name;
}
void OAIExecution::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExecution::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExecution::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExecution::getRunType() const {
    return m_run_type;
}
void OAIExecution::setRunType(const QString &run_type) {
    m_run_type = run_type;
    m_run_type_isSet = true;
}

bool OAIExecution::is_run_type_Set() const{
    return m_run_type_isSet;
}

bool OAIExecution::is_run_type_Valid() const{
    return m_run_type_isValid;
}

QString OAIExecution::getStartTime() const {
    return m_start_time;
}
void OAIExecution::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIExecution::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIExecution::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIExecution::getState() const {
    return m_state;
}
void OAIExecution::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExecution::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExecution::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
