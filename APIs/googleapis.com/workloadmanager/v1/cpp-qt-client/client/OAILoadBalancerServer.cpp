/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerServer::OAILoadBalancerServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerServer::OAILoadBalancerServer() {
    this->initializeModel();
}

OAILoadBalancerServer::~OAILoadBalancerServer() {}

void OAILoadBalancerServer::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_vm_isSet = false;
    m_vm_isValid = false;
}

void OAILoadBalancerServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerServer::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_vm_isValid = ::OpenAPI::fromJsonValue(m_vm, json[QString("vm")]);
    m_vm_isSet = !json[QString("vm")].isNull() && m_vm_isValid;
}

QString OAILoadBalancerServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerServer::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_vm_isSet) {
        obj.insert(QString("vm"), ::OpenAPI::toJsonValue(m_vm));
    }
    return obj;
}

QString OAILoadBalancerServer::getIp() const {
    return m_ip;
}
void OAILoadBalancerServer::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAILoadBalancerServer::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAILoadBalancerServer::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAILoadBalancerServer::getVm() const {
    return m_vm;
}
void OAILoadBalancerServer::setVm(const QString &vm) {
    m_vm = vm;
    m_vm_isSet = true;
}

bool OAILoadBalancerServer::is_vm_Set() const{
    return m_vm_isSet;
}

bool OAILoadBalancerServer::is_vm_Valid() const{
    return m_vm_isValid;
}

bool OAILoadBalancerServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
