/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryResource::OAISapDiscoveryResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryResource::OAISapDiscoveryResource() {
    this->initializeModel();
}

OAISapDiscoveryResource::~OAISapDiscoveryResource() {}

void OAISapDiscoveryResource::initializeModel() {

    m_instance_properties_isSet = false;
    m_instance_properties_isValid = false;

    m_related_resources_isSet = false;
    m_related_resources_isValid = false;

    m_resource_kind_isSet = false;
    m_resource_kind_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAISapDiscoveryResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryResource::fromJsonObject(QJsonObject json) {

    m_instance_properties_isValid = ::OpenAPI::fromJsonValue(m_instance_properties, json[QString("instanceProperties")]);
    m_instance_properties_isSet = !json[QString("instanceProperties")].isNull() && m_instance_properties_isValid;

    m_related_resources_isValid = ::OpenAPI::fromJsonValue(m_related_resources, json[QString("relatedResources")]);
    m_related_resources_isSet = !json[QString("relatedResources")].isNull() && m_related_resources_isValid;

    m_resource_kind_isValid = ::OpenAPI::fromJsonValue(m_resource_kind, json[QString("resourceKind")]);
    m_resource_kind_isSet = !json[QString("resourceKind")].isNull() && m_resource_kind_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAISapDiscoveryResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryResource::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_properties.isSet()) {
        obj.insert(QString("instanceProperties"), ::OpenAPI::toJsonValue(m_instance_properties));
    }
    if (m_related_resources.size() > 0) {
        obj.insert(QString("relatedResources"), ::OpenAPI::toJsonValue(m_related_resources));
    }
    if (m_resource_kind_isSet) {
        obj.insert(QString("resourceKind"), ::OpenAPI::toJsonValue(m_resource_kind));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAISapDiscoveryResourceInstanceProperties OAISapDiscoveryResource::getInstanceProperties() const {
    return m_instance_properties;
}
void OAISapDiscoveryResource::setInstanceProperties(const OAISapDiscoveryResourceInstanceProperties &instance_properties) {
    m_instance_properties = instance_properties;
    m_instance_properties_isSet = true;
}

bool OAISapDiscoveryResource::is_instance_properties_Set() const{
    return m_instance_properties_isSet;
}

bool OAISapDiscoveryResource::is_instance_properties_Valid() const{
    return m_instance_properties_isValid;
}

QList<QString> OAISapDiscoveryResource::getRelatedResources() const {
    return m_related_resources;
}
void OAISapDiscoveryResource::setRelatedResources(const QList<QString> &related_resources) {
    m_related_resources = related_resources;
    m_related_resources_isSet = true;
}

bool OAISapDiscoveryResource::is_related_resources_Set() const{
    return m_related_resources_isSet;
}

bool OAISapDiscoveryResource::is_related_resources_Valid() const{
    return m_related_resources_isValid;
}

QString OAISapDiscoveryResource::getResourceKind() const {
    return m_resource_kind;
}
void OAISapDiscoveryResource::setResourceKind(const QString &resource_kind) {
    m_resource_kind = resource_kind;
    m_resource_kind_isSet = true;
}

bool OAISapDiscoveryResource::is_resource_kind_Set() const{
    return m_resource_kind_isSet;
}

bool OAISapDiscoveryResource::is_resource_kind_Valid() const{
    return m_resource_kind_isValid;
}

QString OAISapDiscoveryResource::getResourceType() const {
    return m_resource_type;
}
void OAISapDiscoveryResource::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAISapDiscoveryResource::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAISapDiscoveryResource::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAISapDiscoveryResource::getResourceUri() const {
    return m_resource_uri;
}
void OAISapDiscoveryResource::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAISapDiscoveryResource::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAISapDiscoveryResource::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAISapDiscoveryResource::getUpdateTime() const {
    return m_update_time;
}
void OAISapDiscoveryResource::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISapDiscoveryResource::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISapDiscoveryResource::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAISapDiscoveryResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
