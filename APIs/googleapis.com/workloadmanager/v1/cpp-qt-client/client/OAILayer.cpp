/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayer::OAILayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayer::OAILayer() {
    this->initializeModel();
}

OAILayer::~OAILayer() {}

void OAILayer::initializeModel() {

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;
}

void OAILayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayer::fromJsonObject(QJsonObject json) {

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("applicationType")]);
    m_application_type_isSet = !json[QString("applicationType")].isNull() && m_application_type_isValid;

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("databaseType")]);
    m_database_type_isSet = !json[QString("databaseType")].isNull() && m_database_type_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;
}

QString OAILayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayer::asJsonObject() const {
    QJsonObject obj;
    if (m_application_type_isSet) {
        obj.insert(QString("applicationType"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_database_type_isSet) {
        obj.insert(QString("databaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    return obj;
}

QString OAILayer::getApplicationType() const {
    return m_application_type;
}
void OAILayer::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAILayer::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAILayer::is_application_type_Valid() const{
    return m_application_type_isValid;
}

QString OAILayer::getDatabaseType() const {
    return m_database_type;
}
void OAILayer::setDatabaseType(const QString &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAILayer::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAILayer::is_database_type_Valid() const{
    return m_database_type_isValid;
}

QList<OAIInstance> OAILayer::getInstances() const {
    return m_instances;
}
void OAILayer::setInstances(const QList<OAIInstance> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAILayer::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAILayer::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAILayer::getSid() const {
    return m_sid;
}
void OAILayer::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAILayer::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAILayer::is_sid_Valid() const{
    return m_sid_isValid;
}

bool OAILayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
