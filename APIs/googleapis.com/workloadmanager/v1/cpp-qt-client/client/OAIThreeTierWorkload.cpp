/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeTierWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeTierWorkload::OAIThreeTierWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeTierWorkload::OAIThreeTierWorkload() {
    this->initializeModel();
}

OAIThreeTierWorkload::~OAIThreeTierWorkload() {}

void OAIThreeTierWorkload::initializeModel() {

    m_api_layer_isSet = false;
    m_api_layer_isValid = false;

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_frontend_isSet = false;
    m_frontend_isValid = false;
}

void OAIThreeTierWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeTierWorkload::fromJsonObject(QJsonObject json) {

    m_api_layer_isValid = ::OpenAPI::fromJsonValue(m_api_layer, json[QString("apiLayer")]);
    m_api_layer_isSet = !json[QString("apiLayer")].isNull() && m_api_layer_isValid;

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_frontend_isValid = ::OpenAPI::fromJsonValue(m_frontend, json[QString("frontend")]);
    m_frontend_isSet = !json[QString("frontend")].isNull() && m_frontend_isValid;
}

QString OAIThreeTierWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeTierWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_api_layer.isSet()) {
        obj.insert(QString("apiLayer"), ::OpenAPI::toJsonValue(m_api_layer));
    }
    if (m_backend.isSet()) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_frontend.isSet()) {
        obj.insert(QString("frontend"), ::OpenAPI::toJsonValue(m_frontend));
    }
    return obj;
}

OAIAPILayerServer OAIThreeTierWorkload::getApiLayer() const {
    return m_api_layer;
}
void OAIThreeTierWorkload::setApiLayer(const OAIAPILayerServer &api_layer) {
    m_api_layer = api_layer;
    m_api_layer_isSet = true;
}

bool OAIThreeTierWorkload::is_api_layer_Set() const{
    return m_api_layer_isSet;
}

bool OAIThreeTierWorkload::is_api_layer_Valid() const{
    return m_api_layer_isValid;
}

OAIBackendServer OAIThreeTierWorkload::getBackend() const {
    return m_backend;
}
void OAIThreeTierWorkload::setBackend(const OAIBackendServer &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIThreeTierWorkload::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIThreeTierWorkload::is_backend_Valid() const{
    return m_backend_isValid;
}

QString OAIThreeTierWorkload::getEndpoint() const {
    return m_endpoint;
}
void OAIThreeTierWorkload::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIThreeTierWorkload::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIThreeTierWorkload::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

OAIFrontEndServer OAIThreeTierWorkload::getFrontend() const {
    return m_frontend;
}
void OAIThreeTierWorkload::setFrontend(const OAIFrontEndServer &frontend) {
    m_frontend = frontend;
    m_frontend_isSet = true;
}

bool OAIThreeTierWorkload::is_frontend_Set() const{
    return m_frontend_isSet;
}

bool OAIThreeTierWorkload::is_frontend_Valid() const{
    return m_frontend_isValid;
}

bool OAIThreeTierWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_layer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeTierWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
