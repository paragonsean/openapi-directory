/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryComponentDatabaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryComponentDatabaseProperties::OAISapDiscoveryComponentDatabaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryComponentDatabaseProperties::OAISapDiscoveryComponentDatabaseProperties() {
    this->initializeModel();
}

OAISapDiscoveryComponentDatabaseProperties::~OAISapDiscoveryComponentDatabaseProperties() {}

void OAISapDiscoveryComponentDatabaseProperties::initializeModel() {

    m_database_type_isSet = false;
    m_database_type_isValid = false;

    m_database_version_isSet = false;
    m_database_version_isValid = false;

    m_primary_instance_uri_isSet = false;
    m_primary_instance_uri_isValid = false;

    m_shared_nfs_uri_isSet = false;
    m_shared_nfs_uri_isValid = false;
}

void OAISapDiscoveryComponentDatabaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryComponentDatabaseProperties::fromJsonObject(QJsonObject json) {

    m_database_type_isValid = ::OpenAPI::fromJsonValue(m_database_type, json[QString("databaseType")]);
    m_database_type_isSet = !json[QString("databaseType")].isNull() && m_database_type_isValid;

    m_database_version_isValid = ::OpenAPI::fromJsonValue(m_database_version, json[QString("databaseVersion")]);
    m_database_version_isSet = !json[QString("databaseVersion")].isNull() && m_database_version_isValid;

    m_primary_instance_uri_isValid = ::OpenAPI::fromJsonValue(m_primary_instance_uri, json[QString("primaryInstanceUri")]);
    m_primary_instance_uri_isSet = !json[QString("primaryInstanceUri")].isNull() && m_primary_instance_uri_isValid;

    m_shared_nfs_uri_isValid = ::OpenAPI::fromJsonValue(m_shared_nfs_uri, json[QString("sharedNfsUri")]);
    m_shared_nfs_uri_isSet = !json[QString("sharedNfsUri")].isNull() && m_shared_nfs_uri_isValid;
}

QString OAISapDiscoveryComponentDatabaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryComponentDatabaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_type_isSet) {
        obj.insert(QString("databaseType"), ::OpenAPI::toJsonValue(m_database_type));
    }
    if (m_database_version_isSet) {
        obj.insert(QString("databaseVersion"), ::OpenAPI::toJsonValue(m_database_version));
    }
    if (m_primary_instance_uri_isSet) {
        obj.insert(QString("primaryInstanceUri"), ::OpenAPI::toJsonValue(m_primary_instance_uri));
    }
    if (m_shared_nfs_uri_isSet) {
        obj.insert(QString("sharedNfsUri"), ::OpenAPI::toJsonValue(m_shared_nfs_uri));
    }
    return obj;
}

QString OAISapDiscoveryComponentDatabaseProperties::getDatabaseType() const {
    return m_database_type;
}
void OAISapDiscoveryComponentDatabaseProperties::setDatabaseType(const QString &database_type) {
    m_database_type = database_type;
    m_database_type_isSet = true;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_database_type_Set() const{
    return m_database_type_isSet;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_database_type_Valid() const{
    return m_database_type_isValid;
}

QString OAISapDiscoveryComponentDatabaseProperties::getDatabaseVersion() const {
    return m_database_version;
}
void OAISapDiscoveryComponentDatabaseProperties::setDatabaseVersion(const QString &database_version) {
    m_database_version = database_version;
    m_database_version_isSet = true;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_database_version_Set() const{
    return m_database_version_isSet;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_database_version_Valid() const{
    return m_database_version_isValid;
}

QString OAISapDiscoveryComponentDatabaseProperties::getPrimaryInstanceUri() const {
    return m_primary_instance_uri;
}
void OAISapDiscoveryComponentDatabaseProperties::setPrimaryInstanceUri(const QString &primary_instance_uri) {
    m_primary_instance_uri = primary_instance_uri;
    m_primary_instance_uri_isSet = true;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_primary_instance_uri_Set() const{
    return m_primary_instance_uri_isSet;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_primary_instance_uri_Valid() const{
    return m_primary_instance_uri_isValid;
}

QString OAISapDiscoveryComponentDatabaseProperties::getSharedNfsUri() const {
    return m_shared_nfs_uri;
}
void OAISapDiscoveryComponentDatabaseProperties::setSharedNfsUri(const QString &shared_nfs_uri) {
    m_shared_nfs_uri = shared_nfs_uri;
    m_shared_nfs_uri_isSet = true;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_shared_nfs_uri_Set() const{
    return m_shared_nfs_uri_isSet;
}

bool OAISapDiscoveryComponentDatabaseProperties::is_shared_nfs_uri_Valid() const{
    return m_shared_nfs_uri_isValid;
}

bool OAISapDiscoveryComponentDatabaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_instance_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_nfs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryComponentDatabaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
