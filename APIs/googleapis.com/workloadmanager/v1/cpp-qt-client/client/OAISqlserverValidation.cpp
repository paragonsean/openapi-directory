/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlserverValidation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlserverValidation::OAISqlserverValidation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlserverValidation::OAISqlserverValidation() {
    this->initializeModel();
}

OAISqlserverValidation::~OAISqlserverValidation() {}

void OAISqlserverValidation::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_validation_details_isSet = false;
    m_validation_details_isValid = false;
}

void OAISqlserverValidation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlserverValidation::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_validation_details_isValid = ::OpenAPI::fromJsonValue(m_validation_details, json[QString("validationDetails")]);
    m_validation_details_isSet = !json[QString("validationDetails")].isNull() && m_validation_details_isValid;
}

QString OAISqlserverValidation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlserverValidation::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_validation_details.size() > 0) {
        obj.insert(QString("validationDetails"), ::OpenAPI::toJsonValue(m_validation_details));
    }
    return obj;
}

QString OAISqlserverValidation::getAgentVersion() const {
    return m_agent_version;
}
void OAISqlserverValidation::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAISqlserverValidation::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAISqlserverValidation::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAISqlserverValidation::getInstance() const {
    return m_instance;
}
void OAISqlserverValidation::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAISqlserverValidation::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAISqlserverValidation::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAISqlserverValidation::getProjectId() const {
    return m_project_id;
}
void OAISqlserverValidation::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISqlserverValidation::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISqlserverValidation::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QList<OAISqlserverValidationValidationDetail> OAISqlserverValidation::getValidationDetails() const {
    return m_validation_details;
}
void OAISqlserverValidation::setValidationDetails(const QList<OAISqlserverValidationValidationDetail> &validation_details) {
    m_validation_details = validation_details;
    m_validation_details_isSet = true;
}

bool OAISqlserverValidation::is_validation_details_Set() const{
    return m_validation_details_isSet;
}

bool OAISqlserverValidation::is_validation_details_Valid() const{
    return m_validation_details_isValid;
}

bool OAISqlserverValidation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlserverValidation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
