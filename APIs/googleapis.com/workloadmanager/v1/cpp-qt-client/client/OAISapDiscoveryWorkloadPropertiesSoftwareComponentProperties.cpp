/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties() {
    this->initializeModel();
}

OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::~OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties() {}

void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::initializeModel() {

    m_ext_version_isSet = false;
    m_ext_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::fromJsonObject(QJsonObject json) {

    m_ext_version_isValid = ::OpenAPI::fromJsonValue(m_ext_version, json[QString("extVersion")]);
    m_ext_version_isSet = !json[QString("extVersion")].isNull() && m_ext_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_ext_version_isSet) {
        obj.insert(QString("extVersion"), ::OpenAPI::toJsonValue(m_ext_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::getExtVersion() const {
    return m_ext_version;
}
void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::setExtVersion(const QString &ext_version) {
    m_ext_version = ext_version;
    m_ext_version_isSet = true;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_ext_version_Set() const{
    return m_ext_version_isSet;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_ext_version_Valid() const{
    return m_ext_version_isValid;
}

QString OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::getName() const {
    return m_name;
}
void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::getType() const {
    return m_type;
}
void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::getVersion() const {
    return m_version;
}
void OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ext_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryWorkloadPropertiesSoftwareComponentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
