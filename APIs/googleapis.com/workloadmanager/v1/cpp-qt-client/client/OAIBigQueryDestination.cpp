/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigQueryDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigQueryDestination::OAIBigQueryDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigQueryDestination::OAIBigQueryDestination() {
    this->initializeModel();
}

OAIBigQueryDestination::~OAIBigQueryDestination() {}

void OAIBigQueryDestination::initializeModel() {

    m_create_new_results_table_isSet = false;
    m_create_new_results_table_isValid = false;

    m_destination_dataset_isSet = false;
    m_destination_dataset_isValid = false;
}

void OAIBigQueryDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigQueryDestination::fromJsonObject(QJsonObject json) {

    m_create_new_results_table_isValid = ::OpenAPI::fromJsonValue(m_create_new_results_table, json[QString("createNewResultsTable")]);
    m_create_new_results_table_isSet = !json[QString("createNewResultsTable")].isNull() && m_create_new_results_table_isValid;

    m_destination_dataset_isValid = ::OpenAPI::fromJsonValue(m_destination_dataset, json[QString("destinationDataset")]);
    m_destination_dataset_isSet = !json[QString("destinationDataset")].isNull() && m_destination_dataset_isValid;
}

QString OAIBigQueryDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigQueryDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_create_new_results_table_isSet) {
        obj.insert(QString("createNewResultsTable"), ::OpenAPI::toJsonValue(m_create_new_results_table));
    }
    if (m_destination_dataset_isSet) {
        obj.insert(QString("destinationDataset"), ::OpenAPI::toJsonValue(m_destination_dataset));
    }
    return obj;
}

bool OAIBigQueryDestination::isCreateNewResultsTable() const {
    return m_create_new_results_table;
}
void OAIBigQueryDestination::setCreateNewResultsTable(const bool &create_new_results_table) {
    m_create_new_results_table = create_new_results_table;
    m_create_new_results_table_isSet = true;
}

bool OAIBigQueryDestination::is_create_new_results_table_Set() const{
    return m_create_new_results_table_isSet;
}

bool OAIBigQueryDestination::is_create_new_results_table_Valid() const{
    return m_create_new_results_table_isValid;
}

QString OAIBigQueryDestination::getDestinationDataset() const {
    return m_destination_dataset;
}
void OAIBigQueryDestination::setDestinationDataset(const QString &destination_dataset) {
    m_destination_dataset = destination_dataset;
    m_destination_dataset_isSet = true;
}

bool OAIBigQueryDestination::is_destination_dataset_Set() const{
    return m_destination_dataset_isSet;
}

bool OAIBigQueryDestination::is_destination_dataset_Valid() const{
    return m_destination_dataset_isValid;
}

bool OAIBigQueryDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_new_results_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigQueryDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
