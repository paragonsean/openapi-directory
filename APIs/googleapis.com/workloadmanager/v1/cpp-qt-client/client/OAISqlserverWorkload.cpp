/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlserverWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlserverWorkload::OAISqlserverWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlserverWorkload::OAISqlserverWorkload() {
    this->initializeModel();
}

OAISqlserverWorkload::~OAISqlserverWorkload() {}

void OAISqlserverWorkload::initializeModel() {

    m_ags_isSet = false;
    m_ags_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_load_balancer_server_isSet = false;
    m_load_balancer_server_isValid = false;
}

void OAISqlserverWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlserverWorkload::fromJsonObject(QJsonObject json) {

    m_ags_isValid = ::OpenAPI::fromJsonValue(m_ags, json[QString("ags")]);
    m_ags_isSet = !json[QString("ags")].isNull() && m_ags_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("databases")]);
    m_databases_isSet = !json[QString("databases")].isNull() && m_databases_isValid;

    m_load_balancer_server_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_server, json[QString("loadBalancerServer")]);
    m_load_balancer_server_isSet = !json[QString("loadBalancerServer")].isNull() && m_load_balancer_server_isValid;
}

QString OAISqlserverWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlserverWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_ags.size() > 0) {
        obj.insert(QString("ags"), ::OpenAPI::toJsonValue(m_ags));
    }
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_databases.size() > 0) {
        obj.insert(QString("databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_load_balancer_server.isSet()) {
        obj.insert(QString("loadBalancerServer"), ::OpenAPI::toJsonValue(m_load_balancer_server));
    }
    return obj;
}

QList<OAIAvailabilityGroup> OAISqlserverWorkload::getAgs() const {
    return m_ags;
}
void OAISqlserverWorkload::setAgs(const QList<OAIAvailabilityGroup> &ags) {
    m_ags = ags;
    m_ags_isSet = true;
}

bool OAISqlserverWorkload::is_ags_Set() const{
    return m_ags_isSet;
}

bool OAISqlserverWorkload::is_ags_Valid() const{
    return m_ags_isValid;
}

OAICluster OAISqlserverWorkload::getCluster() const {
    return m_cluster;
}
void OAISqlserverWorkload::setCluster(const OAICluster &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAISqlserverWorkload::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAISqlserverWorkload::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QList<OAIDatabase> OAISqlserverWorkload::getDatabases() const {
    return m_databases;
}
void OAISqlserverWorkload::setDatabases(const QList<OAIDatabase> &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAISqlserverWorkload::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAISqlserverWorkload::is_databases_Valid() const{
    return m_databases_isValid;
}

OAILoadBalancerServer OAISqlserverWorkload::getLoadBalancerServer() const {
    return m_load_balancer_server;
}
void OAISqlserverWorkload::setLoadBalancerServer(const OAILoadBalancerServer &load_balancer_server) {
    m_load_balancer_server = load_balancer_server;
    m_load_balancer_server_isSet = true;
}

bool OAISqlserverWorkload::is_load_balancer_server_Set() const{
    return m_load_balancer_server_isSet;
}

bool OAISqlserverWorkload::is_load_balancer_server_Valid() const{
    return m_load_balancer_server_isValid;
}

bool OAISqlserverWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_server.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlserverWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
