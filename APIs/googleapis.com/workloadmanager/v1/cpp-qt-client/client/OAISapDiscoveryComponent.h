/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISapDiscoveryComponent.h
 *
 * Message describing the system component.
 */

#ifndef OAISapDiscoveryComponent_H
#define OAISapDiscoveryComponent_H

#include <QJsonObject>

#include "OAISapDiscoveryComponentApplicationProperties.h"
#include "OAISapDiscoveryComponentDatabaseProperties.h"
#include "OAISapDiscoveryResource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISapDiscoveryComponentApplicationProperties;
class OAISapDiscoveryComponentDatabaseProperties;
class OAISapDiscoveryResource;

class OAISapDiscoveryComponent : public OAIObject {
public:
    OAISapDiscoveryComponent();
    OAISapDiscoveryComponent(QString json);
    ~OAISapDiscoveryComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISapDiscoveryComponentApplicationProperties getApplicationProperties() const;
    void setApplicationProperties(const OAISapDiscoveryComponentApplicationProperties &application_properties);
    bool is_application_properties_Set() const;
    bool is_application_properties_Valid() const;

    OAISapDiscoveryComponentDatabaseProperties getDatabaseProperties() const;
    void setDatabaseProperties(const OAISapDiscoveryComponentDatabaseProperties &database_properties);
    bool is_database_properties_Set() const;
    bool is_database_properties_Valid() const;

    QList<QString> getHaHosts() const;
    void setHaHosts(const QList<QString> &ha_hosts);
    bool is_ha_hosts_Set() const;
    bool is_ha_hosts_Valid() const;

    QString getHostProject() const;
    void setHostProject(const QString &host_project);
    bool is_host_project_Set() const;
    bool is_host_project_Valid() const;

    QList<OAISapDiscoveryResource> getResources() const;
    void setResources(const QList<OAISapDiscoveryResource> &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    QString getTopologyType() const;
    void setTopologyType(const QString &topology_type);
    bool is_topology_type_Set() const;
    bool is_topology_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISapDiscoveryComponentApplicationProperties m_application_properties;
    bool m_application_properties_isSet;
    bool m_application_properties_isValid;

    OAISapDiscoveryComponentDatabaseProperties m_database_properties;
    bool m_database_properties_isSet;
    bool m_database_properties_isValid;

    QList<QString> m_ha_hosts;
    bool m_ha_hosts_isSet;
    bool m_ha_hosts_isValid;

    QString m_host_project;
    bool m_host_project_isSet;
    bool m_host_project_isValid;

    QList<OAISapDiscoveryResource> m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    QString m_topology_type;
    bool m_topology_type_isSet;
    bool m_topology_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISapDiscoveryComponent)

#endif // OAISapDiscoveryComponent_H
