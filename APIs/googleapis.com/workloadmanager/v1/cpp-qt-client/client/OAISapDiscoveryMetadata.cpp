/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryMetadata::OAISapDiscoveryMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryMetadata::OAISapDiscoveryMetadata() {
    this->initializeModel();
}

OAISapDiscoveryMetadata::~OAISapDiscoveryMetadata() {}

void OAISapDiscoveryMetadata::initializeModel() {

    m_customer_region_isSet = false;
    m_customer_region_isValid = false;

    m_defined_system_isSet = false;
    m_defined_system_isValid = false;

    m_environment_type_isSet = false;
    m_environment_type_isValid = false;

    m_sap_product_isSet = false;
    m_sap_product_isValid = false;
}

void OAISapDiscoveryMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryMetadata::fromJsonObject(QJsonObject json) {

    m_customer_region_isValid = ::OpenAPI::fromJsonValue(m_customer_region, json[QString("customerRegion")]);
    m_customer_region_isSet = !json[QString("customerRegion")].isNull() && m_customer_region_isValid;

    m_defined_system_isValid = ::OpenAPI::fromJsonValue(m_defined_system, json[QString("definedSystem")]);
    m_defined_system_isSet = !json[QString("definedSystem")].isNull() && m_defined_system_isValid;

    m_environment_type_isValid = ::OpenAPI::fromJsonValue(m_environment_type, json[QString("environmentType")]);
    m_environment_type_isSet = !json[QString("environmentType")].isNull() && m_environment_type_isValid;

    m_sap_product_isValid = ::OpenAPI::fromJsonValue(m_sap_product, json[QString("sapProduct")]);
    m_sap_product_isSet = !json[QString("sapProduct")].isNull() && m_sap_product_isValid;
}

QString OAISapDiscoveryMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_region_isSet) {
        obj.insert(QString("customerRegion"), ::OpenAPI::toJsonValue(m_customer_region));
    }
    if (m_defined_system_isSet) {
        obj.insert(QString("definedSystem"), ::OpenAPI::toJsonValue(m_defined_system));
    }
    if (m_environment_type_isSet) {
        obj.insert(QString("environmentType"), ::OpenAPI::toJsonValue(m_environment_type));
    }
    if (m_sap_product_isSet) {
        obj.insert(QString("sapProduct"), ::OpenAPI::toJsonValue(m_sap_product));
    }
    return obj;
}

QString OAISapDiscoveryMetadata::getCustomerRegion() const {
    return m_customer_region;
}
void OAISapDiscoveryMetadata::setCustomerRegion(const QString &customer_region) {
    m_customer_region = customer_region;
    m_customer_region_isSet = true;
}

bool OAISapDiscoveryMetadata::is_customer_region_Set() const{
    return m_customer_region_isSet;
}

bool OAISapDiscoveryMetadata::is_customer_region_Valid() const{
    return m_customer_region_isValid;
}

QString OAISapDiscoveryMetadata::getDefinedSystem() const {
    return m_defined_system;
}
void OAISapDiscoveryMetadata::setDefinedSystem(const QString &defined_system) {
    m_defined_system = defined_system;
    m_defined_system_isSet = true;
}

bool OAISapDiscoveryMetadata::is_defined_system_Set() const{
    return m_defined_system_isSet;
}

bool OAISapDiscoveryMetadata::is_defined_system_Valid() const{
    return m_defined_system_isValid;
}

QString OAISapDiscoveryMetadata::getEnvironmentType() const {
    return m_environment_type;
}
void OAISapDiscoveryMetadata::setEnvironmentType(const QString &environment_type) {
    m_environment_type = environment_type;
    m_environment_type_isSet = true;
}

bool OAISapDiscoveryMetadata::is_environment_type_Set() const{
    return m_environment_type_isSet;
}

bool OAISapDiscoveryMetadata::is_environment_type_Valid() const{
    return m_environment_type_isValid;
}

QString OAISapDiscoveryMetadata::getSapProduct() const {
    return m_sap_product;
}
void OAISapDiscoveryMetadata::setSapProduct(const QString &sap_product) {
    m_sap_product = sap_product;
    m_sap_product_isSet = true;
}

bool OAISapDiscoveryMetadata::is_sap_product_Set() const{
    return m_sap_product_isSet;
}

bool OAISapDiscoveryMetadata::is_sap_product_Valid() const{
    return m_sap_product_isValid;
}

bool OAISapDiscoveryMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defined_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sap_product_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
