/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityGroup::OAIAvailabilityGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityGroup::OAIAvailabilityGroup() {
    this->initializeModel();
}

OAIAvailabilityGroup::~OAIAvailabilityGroup() {}

void OAIAvailabilityGroup::initializeModel() {

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_server_isSet = false;
    m_primary_server_isValid = false;

    m_secondary_servers_isSet = false;
    m_secondary_servers_isValid = false;
}

void OAIAvailabilityGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityGroup::fromJsonObject(QJsonObject json) {

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("databases")]);
    m_databases_isSet = !json[QString("databases")].isNull() && m_databases_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_server_isValid = ::OpenAPI::fromJsonValue(m_primary_server, json[QString("primaryServer")]);
    m_primary_server_isSet = !json[QString("primaryServer")].isNull() && m_primary_server_isValid;

    m_secondary_servers_isValid = ::OpenAPI::fromJsonValue(m_secondary_servers, json[QString("secondaryServers")]);
    m_secondary_servers_isSet = !json[QString("secondaryServers")].isNull() && m_secondary_servers_isValid;
}

QString OAIAvailabilityGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_databases.size() > 0) {
        obj.insert(QString("databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_server_isSet) {
        obj.insert(QString("primaryServer"), ::OpenAPI::toJsonValue(m_primary_server));
    }
    if (m_secondary_servers.size() > 0) {
        obj.insert(QString("secondaryServers"), ::OpenAPI::toJsonValue(m_secondary_servers));
    }
    return obj;
}

QList<QString> OAIAvailabilityGroup::getDatabases() const {
    return m_databases;
}
void OAIAvailabilityGroup::setDatabases(const QList<QString> &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIAvailabilityGroup::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIAvailabilityGroup::is_databases_Valid() const{
    return m_databases_isValid;
}

QString OAIAvailabilityGroup::getName() const {
    return m_name;
}
void OAIAvailabilityGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAvailabilityGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAvailabilityGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAvailabilityGroup::getPrimaryServer() const {
    return m_primary_server;
}
void OAIAvailabilityGroup::setPrimaryServer(const QString &primary_server) {
    m_primary_server = primary_server;
    m_primary_server_isSet = true;
}

bool OAIAvailabilityGroup::is_primary_server_Set() const{
    return m_primary_server_isSet;
}

bool OAIAvailabilityGroup::is_primary_server_Valid() const{
    return m_primary_server_isValid;
}

QList<QString> OAIAvailabilityGroup::getSecondaryServers() const {
    return m_secondary_servers;
}
void OAIAvailabilityGroup::setSecondaryServers(const QList<QString> &secondary_servers) {
    m_secondary_servers = secondary_servers;
    m_secondary_servers_isSet = true;
}

bool OAIAvailabilityGroup::is_secondary_servers_Set() const{
    return m_secondary_servers_isSet;
}

bool OAIAvailabilityGroup::is_secondary_servers_Valid() const{
    return m_secondary_servers_isValid;
}

bool OAIAvailabilityGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
