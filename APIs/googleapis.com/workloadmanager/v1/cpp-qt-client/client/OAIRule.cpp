/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule::OAIRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule::OAIRule() {
    this->initializeModel();
}

OAIRule::~OAIRule() {}

void OAIRule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_category_isSet = false;
    m_primary_category_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_secondary_category_isSet = false;
    m_secondary_category_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_category_isValid = ::OpenAPI::fromJsonValue(m_primary_category, json[QString("primaryCategory")]);
    m_primary_category_isSet = !json[QString("primaryCategory")].isNull() && m_primary_category_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_secondary_category_isValid = ::OpenAPI::fromJsonValue(m_secondary_category, json[QString("secondaryCategory")]);
    m_secondary_category_isSet = !json[QString("secondaryCategory")].isNull() && m_secondary_category_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_category_isSet) {
        obj.insert(QString("primaryCategory"), ::OpenAPI::toJsonValue(m_primary_category));
    }
    if (m_remediation_isSet) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_secondary_category_isSet) {
        obj.insert(QString("secondaryCategory"), ::OpenAPI::toJsonValue(m_secondary_category));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIRule::getDescription() const {
    return m_description;
}
void OAIRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRule::getDisplayName() const {
    return m_display_name;
}
void OAIRule::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRule::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRule::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRule::getErrorMessage() const {
    return m_error_message;
}
void OAIRule::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIRule::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIRule::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIRule::getName() const {
    return m_name;
}
void OAIRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRule::getPrimaryCategory() const {
    return m_primary_category;
}
void OAIRule::setPrimaryCategory(const QString &primary_category) {
    m_primary_category = primary_category;
    m_primary_category_isSet = true;
}

bool OAIRule::is_primary_category_Set() const{
    return m_primary_category_isSet;
}

bool OAIRule::is_primary_category_Valid() const{
    return m_primary_category_isValid;
}

QString OAIRule::getRemediation() const {
    return m_remediation;
}
void OAIRule::setRemediation(const QString &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIRule::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIRule::is_remediation_Valid() const{
    return m_remediation_isValid;
}

QString OAIRule::getRevisionId() const {
    return m_revision_id;
}
void OAIRule::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIRule::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIRule::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIRule::getSecondaryCategory() const {
    return m_secondary_category;
}
void OAIRule::setSecondaryCategory(const QString &secondary_category) {
    m_secondary_category = secondary_category;
    m_secondary_category_isSet = true;
}

bool OAIRule::is_secondary_category_Set() const{
    return m_secondary_category_isSet;
}

bool OAIRule::is_secondary_category_Valid() const{
    return m_secondary_category_isValid;
}

QString OAIRule::getSeverity() const {
    return m_severity;
}
void OAIRule::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIRule::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIRule::is_severity_Valid() const{
    return m_severity_isValid;
}

QList<QString> OAIRule::getTags() const {
    return m_tags;
}
void OAIRule::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRule::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRule::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRule::getUri() const {
    return m_uri;
}
void OAIRule::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIRule::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIRule::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
