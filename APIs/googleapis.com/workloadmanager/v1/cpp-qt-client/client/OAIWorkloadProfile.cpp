/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkloadProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkloadProfile::OAIWorkloadProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkloadProfile::OAIWorkloadProfile() {
    this->initializeModel();
}

OAIWorkloadProfile::~OAIWorkloadProfile() {}

void OAIWorkloadProfile::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_ascs_isSet = false;
    m_ascs_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_refreshed_time_isSet = false;
    m_refreshed_time_isValid = false;

    m_sap_workload_isSet = false;
    m_sap_workload_isValid = false;

    m_sqlserver_workload_isSet = false;
    m_sqlserver_workload_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_three_tier_workload_isSet = false;
    m_three_tier_workload_isValid = false;

    m_workload_type_isSet = false;
    m_workload_type_isValid = false;
}

void OAIWorkloadProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkloadProfile::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_ascs_isValid = ::OpenAPI::fromJsonValue(m_ascs, json[QString("ascs")]);
    m_ascs_isSet = !json[QString("ascs")].isNull() && m_ascs_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_refreshed_time_isValid = ::OpenAPI::fromJsonValue(m_refreshed_time, json[QString("refreshedTime")]);
    m_refreshed_time_isSet = !json[QString("refreshedTime")].isNull() && m_refreshed_time_isValid;

    m_sap_workload_isValid = ::OpenAPI::fromJsonValue(m_sap_workload, json[QString("sapWorkload")]);
    m_sap_workload_isSet = !json[QString("sapWorkload")].isNull() && m_sap_workload_isValid;

    m_sqlserver_workload_isValid = ::OpenAPI::fromJsonValue(m_sqlserver_workload, json[QString("sqlserverWorkload")]);
    m_sqlserver_workload_isSet = !json[QString("sqlserverWorkload")].isNull() && m_sqlserver_workload_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_three_tier_workload_isValid = ::OpenAPI::fromJsonValue(m_three_tier_workload, json[QString("threeTierWorkload")]);
    m_three_tier_workload_isSet = !json[QString("threeTierWorkload")].isNull() && m_three_tier_workload_isValid;

    m_workload_type_isValid = ::OpenAPI::fromJsonValue(m_workload_type, json[QString("workloadType")]);
    m_workload_type_isSet = !json[QString("workloadType")].isNull() && m_workload_type_isValid;
}

QString OAIWorkloadProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkloadProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_ascs.isSet()) {
        obj.insert(QString("ascs"), ::OpenAPI::toJsonValue(m_ascs));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_refreshed_time_isSet) {
        obj.insert(QString("refreshedTime"), ::OpenAPI::toJsonValue(m_refreshed_time));
    }
    if (m_sap_workload.isSet()) {
        obj.insert(QString("sapWorkload"), ::OpenAPI::toJsonValue(m_sap_workload));
    }
    if (m_sqlserver_workload.isSet()) {
        obj.insert(QString("sqlserverWorkload"), ::OpenAPI::toJsonValue(m_sqlserver_workload));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_three_tier_workload.isSet()) {
        obj.insert(QString("threeTierWorkload"), ::OpenAPI::toJsonValue(m_three_tier_workload));
    }
    if (m_workload_type_isSet) {
        obj.insert(QString("workloadType"), ::OpenAPI::toJsonValue(m_workload_type));
    }
    return obj;
}

OAILayer OAIWorkloadProfile::getApplication() const {
    return m_application;
}
void OAIWorkloadProfile::setApplication(const OAILayer &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIWorkloadProfile::is_application_Set() const{
    return m_application_isSet;
}

bool OAIWorkloadProfile::is_application_Valid() const{
    return m_application_isValid;
}

OAILayer OAIWorkloadProfile::getAscs() const {
    return m_ascs;
}
void OAIWorkloadProfile::setAscs(const OAILayer &ascs) {
    m_ascs = ascs;
    m_ascs_isSet = true;
}

bool OAIWorkloadProfile::is_ascs_Set() const{
    return m_ascs_isSet;
}

bool OAIWorkloadProfile::is_ascs_Valid() const{
    return m_ascs_isValid;
}

OAILayer OAIWorkloadProfile::getDatabase() const {
    return m_database;
}
void OAIWorkloadProfile::setDatabase(const OAILayer &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIWorkloadProfile::is_database_Set() const{
    return m_database_isSet;
}

bool OAIWorkloadProfile::is_database_Valid() const{
    return m_database_isValid;
}

QMap<QString, QString> OAIWorkloadProfile::getLabels() const {
    return m_labels;
}
void OAIWorkloadProfile::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkloadProfile::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkloadProfile::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWorkloadProfile::getName() const {
    return m_name;
}
void OAIWorkloadProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkloadProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkloadProfile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkloadProfile::getRefreshedTime() const {
    return m_refreshed_time;
}
void OAIWorkloadProfile::setRefreshedTime(const QString &refreshed_time) {
    m_refreshed_time = refreshed_time;
    m_refreshed_time_isSet = true;
}

bool OAIWorkloadProfile::is_refreshed_time_Set() const{
    return m_refreshed_time_isSet;
}

bool OAIWorkloadProfile::is_refreshed_time_Valid() const{
    return m_refreshed_time_isValid;
}

OAISapWorkload OAIWorkloadProfile::getSapWorkload() const {
    return m_sap_workload;
}
void OAIWorkloadProfile::setSapWorkload(const OAISapWorkload &sap_workload) {
    m_sap_workload = sap_workload;
    m_sap_workload_isSet = true;
}

bool OAIWorkloadProfile::is_sap_workload_Set() const{
    return m_sap_workload_isSet;
}

bool OAIWorkloadProfile::is_sap_workload_Valid() const{
    return m_sap_workload_isValid;
}

OAISqlserverWorkload OAIWorkloadProfile::getSqlserverWorkload() const {
    return m_sqlserver_workload;
}
void OAIWorkloadProfile::setSqlserverWorkload(const OAISqlserverWorkload &sqlserver_workload) {
    m_sqlserver_workload = sqlserver_workload;
    m_sqlserver_workload_isSet = true;
}

bool OAIWorkloadProfile::is_sqlserver_workload_Set() const{
    return m_sqlserver_workload_isSet;
}

bool OAIWorkloadProfile::is_sqlserver_workload_Valid() const{
    return m_sqlserver_workload_isValid;
}

QString OAIWorkloadProfile::getState() const {
    return m_state;
}
void OAIWorkloadProfile::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkloadProfile::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkloadProfile::is_state_Valid() const{
    return m_state_isValid;
}

OAIThreeTierWorkload OAIWorkloadProfile::getThreeTierWorkload() const {
    return m_three_tier_workload;
}
void OAIWorkloadProfile::setThreeTierWorkload(const OAIThreeTierWorkload &three_tier_workload) {
    m_three_tier_workload = three_tier_workload;
    m_three_tier_workload_isSet = true;
}

bool OAIWorkloadProfile::is_three_tier_workload_Set() const{
    return m_three_tier_workload_isSet;
}

bool OAIWorkloadProfile::is_three_tier_workload_Valid() const{
    return m_three_tier_workload_isValid;
}

QString OAIWorkloadProfile::getWorkloadType() const {
    return m_workload_type;
}
void OAIWorkloadProfile::setWorkloadType(const QString &workload_type) {
    m_workload_type = workload_type;
    m_workload_type_isSet = true;
}

bool OAIWorkloadProfile::is_workload_type_Set() const{
    return m_workload_type_isSet;
}

bool OAIWorkloadProfile::is_workload_type_Valid() const{
    return m_workload_type_isValid;
}

bool OAIWorkloadProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ascs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refreshed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sap_workload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqlserver_workload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_tier_workload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkloadProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
