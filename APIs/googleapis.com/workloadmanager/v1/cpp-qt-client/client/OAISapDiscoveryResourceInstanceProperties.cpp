/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapDiscoveryResourceInstanceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapDiscoveryResourceInstanceProperties::OAISapDiscoveryResourceInstanceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapDiscoveryResourceInstanceProperties::OAISapDiscoveryResourceInstanceProperties() {
    this->initializeModel();
}

OAISapDiscoveryResourceInstanceProperties::~OAISapDiscoveryResourceInstanceProperties() {}

void OAISapDiscoveryResourceInstanceProperties::initializeModel() {

    m_cluster_instances_isSet = false;
    m_cluster_instances_isValid = false;

    m_virtual_hostname_isSet = false;
    m_virtual_hostname_isValid = false;
}

void OAISapDiscoveryResourceInstanceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapDiscoveryResourceInstanceProperties::fromJsonObject(QJsonObject json) {

    m_cluster_instances_isValid = ::OpenAPI::fromJsonValue(m_cluster_instances, json[QString("clusterInstances")]);
    m_cluster_instances_isSet = !json[QString("clusterInstances")].isNull() && m_cluster_instances_isValid;

    m_virtual_hostname_isValid = ::OpenAPI::fromJsonValue(m_virtual_hostname, json[QString("virtualHostname")]);
    m_virtual_hostname_isSet = !json[QString("virtualHostname")].isNull() && m_virtual_hostname_isValid;
}

QString OAISapDiscoveryResourceInstanceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapDiscoveryResourceInstanceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_instances.size() > 0) {
        obj.insert(QString("clusterInstances"), ::OpenAPI::toJsonValue(m_cluster_instances));
    }
    if (m_virtual_hostname_isSet) {
        obj.insert(QString("virtualHostname"), ::OpenAPI::toJsonValue(m_virtual_hostname));
    }
    return obj;
}

QList<QString> OAISapDiscoveryResourceInstanceProperties::getClusterInstances() const {
    return m_cluster_instances;
}
void OAISapDiscoveryResourceInstanceProperties::setClusterInstances(const QList<QString> &cluster_instances) {
    m_cluster_instances = cluster_instances;
    m_cluster_instances_isSet = true;
}

bool OAISapDiscoveryResourceInstanceProperties::is_cluster_instances_Set() const{
    return m_cluster_instances_isSet;
}

bool OAISapDiscoveryResourceInstanceProperties::is_cluster_instances_Valid() const{
    return m_cluster_instances_isValid;
}

QString OAISapDiscoveryResourceInstanceProperties::getVirtualHostname() const {
    return m_virtual_hostname;
}
void OAISapDiscoveryResourceInstanceProperties::setVirtualHostname(const QString &virtual_hostname) {
    m_virtual_hostname = virtual_hostname;
    m_virtual_hostname_isSet = true;
}

bool OAISapDiscoveryResourceInstanceProperties::is_virtual_hostname_Set() const{
    return m_virtual_hostname_isSet;
}

bool OAISapDiscoveryResourceInstanceProperties::is_virtual_hostname_Valid() const{
    return m_virtual_hostname_isValid;
}

bool OAISapDiscoveryResourceInstanceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapDiscoveryResourceInstanceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
