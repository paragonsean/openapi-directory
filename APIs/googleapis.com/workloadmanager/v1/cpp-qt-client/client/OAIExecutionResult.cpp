/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionResult::OAIExecutionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionResult::OAIExecutionResult() {
    this->initializeModel();
}

OAIExecutionResult::~OAIExecutionResult() {}

void OAIExecutionResult::initializeModel() {

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_violation_details_isSet = false;
    m_violation_details_isValid = false;

    m_violation_message_isSet = false;
    m_violation_message_isValid = false;
}

void OAIExecutionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionResult::fromJsonObject(QJsonObject json) {

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentationUrl")]);
    m_documentation_url_isSet = !json[QString("documentationUrl")].isNull() && m_documentation_url_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_violation_details_isValid = ::OpenAPI::fromJsonValue(m_violation_details, json[QString("violationDetails")]);
    m_violation_details_isSet = !json[QString("violationDetails")].isNull() && m_violation_details_isValid;

    m_violation_message_isValid = ::OpenAPI::fromJsonValue(m_violation_message, json[QString("violationMessage")]);
    m_violation_message_isSet = !json[QString("violationMessage")].isNull() && m_violation_message_isValid;
}

QString OAIExecutionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_violation_details.isSet()) {
        obj.insert(QString("violationDetails"), ::OpenAPI::toJsonValue(m_violation_details));
    }
    if (m_violation_message_isSet) {
        obj.insert(QString("violationMessage"), ::OpenAPI::toJsonValue(m_violation_message));
    }
    return obj;
}

QString OAIExecutionResult::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIExecutionResult::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIExecutionResult::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIExecutionResult::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

OAIResource OAIExecutionResult::getResource() const {
    return m_resource;
}
void OAIExecutionResult::setResource(const OAIResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIExecutionResult::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIExecutionResult::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIExecutionResult::getRule() const {
    return m_rule;
}
void OAIExecutionResult::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIExecutionResult::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIExecutionResult::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAIExecutionResult::getSeverity() const {
    return m_severity;
}
void OAIExecutionResult::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIExecutionResult::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIExecutionResult::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIViolationDetails OAIExecutionResult::getViolationDetails() const {
    return m_violation_details;
}
void OAIExecutionResult::setViolationDetails(const OAIViolationDetails &violation_details) {
    m_violation_details = violation_details;
    m_violation_details_isSet = true;
}

bool OAIExecutionResult::is_violation_details_Set() const{
    return m_violation_details_isSet;
}

bool OAIExecutionResult::is_violation_details_Valid() const{
    return m_violation_details_isValid;
}

QString OAIExecutionResult::getViolationMessage() const {
    return m_violation_message;
}
void OAIExecutionResult::setViolationMessage(const QString &violation_message) {
    m_violation_message = violation_message;
    m_violation_message_isSet = true;
}

bool OAIExecutionResult::is_violation_message_Set() const{
    return m_violation_message_isSet;
}

bool OAIExecutionResult::is_violation_message_Valid() const{
    return m_violation_message_isValid;
}

bool OAIExecutionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
