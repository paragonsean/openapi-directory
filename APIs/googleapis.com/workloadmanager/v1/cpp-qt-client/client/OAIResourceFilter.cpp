/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceFilter::OAIResourceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceFilter::OAIResourceFilter() {
    this->initializeModel();
}

OAIResourceFilter::~OAIResourceFilter() {}

void OAIResourceFilter::initializeModel() {

    m_gce_instance_filter_isSet = false;
    m_gce_instance_filter_isValid = false;

    m_inclusion_labels_isSet = false;
    m_inclusion_labels_isValid = false;

    m_resource_id_patterns_isSet = false;
    m_resource_id_patterns_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIResourceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceFilter::fromJsonObject(QJsonObject json) {

    m_gce_instance_filter_isValid = ::OpenAPI::fromJsonValue(m_gce_instance_filter, json[QString("gceInstanceFilter")]);
    m_gce_instance_filter_isSet = !json[QString("gceInstanceFilter")].isNull() && m_gce_instance_filter_isValid;

    m_inclusion_labels_isValid = ::OpenAPI::fromJsonValue(m_inclusion_labels, json[QString("inclusionLabels")]);
    m_inclusion_labels_isSet = !json[QString("inclusionLabels")].isNull() && m_inclusion_labels_isValid;

    m_resource_id_patterns_isValid = ::OpenAPI::fromJsonValue(m_resource_id_patterns, json[QString("resourceIdPatterns")]);
    m_resource_id_patterns_isSet = !json[QString("resourceIdPatterns")].isNull() && m_resource_id_patterns_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIResourceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_gce_instance_filter.isSet()) {
        obj.insert(QString("gceInstanceFilter"), ::OpenAPI::toJsonValue(m_gce_instance_filter));
    }
    if (m_inclusion_labels.size() > 0) {
        obj.insert(QString("inclusionLabels"), ::OpenAPI::toJsonValue(m_inclusion_labels));
    }
    if (m_resource_id_patterns.size() > 0) {
        obj.insert(QString("resourceIdPatterns"), ::OpenAPI::toJsonValue(m_resource_id_patterns));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

OAIGceInstanceFilter OAIResourceFilter::getGceInstanceFilter() const {
    return m_gce_instance_filter;
}
void OAIResourceFilter::setGceInstanceFilter(const OAIGceInstanceFilter &gce_instance_filter) {
    m_gce_instance_filter = gce_instance_filter;
    m_gce_instance_filter_isSet = true;
}

bool OAIResourceFilter::is_gce_instance_filter_Set() const{
    return m_gce_instance_filter_isSet;
}

bool OAIResourceFilter::is_gce_instance_filter_Valid() const{
    return m_gce_instance_filter_isValid;
}

QMap<QString, QString> OAIResourceFilter::getInclusionLabels() const {
    return m_inclusion_labels;
}
void OAIResourceFilter::setInclusionLabels(const QMap<QString, QString> &inclusion_labels) {
    m_inclusion_labels = inclusion_labels;
    m_inclusion_labels_isSet = true;
}

bool OAIResourceFilter::is_inclusion_labels_Set() const{
    return m_inclusion_labels_isSet;
}

bool OAIResourceFilter::is_inclusion_labels_Valid() const{
    return m_inclusion_labels_isValid;
}

QList<QString> OAIResourceFilter::getResourceIdPatterns() const {
    return m_resource_id_patterns;
}
void OAIResourceFilter::setResourceIdPatterns(const QList<QString> &resource_id_patterns) {
    m_resource_id_patterns = resource_id_patterns;
    m_resource_id_patterns_isSet = true;
}

bool OAIResourceFilter::is_resource_id_patterns_Set() const{
    return m_resource_id_patterns_isSet;
}

bool OAIResourceFilter::is_resource_id_patterns_Valid() const{
    return m_resource_id_patterns_isValid;
}

QList<QString> OAIResourceFilter::getScopes() const {
    return m_scopes;
}
void OAIResourceFilter::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIResourceFilter::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIResourceFilter::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIResourceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gce_instance_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
