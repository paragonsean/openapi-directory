/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlserverWorkloadOverview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlserverWorkloadOverview::OAISqlserverWorkloadOverview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlserverWorkloadOverview::OAISqlserverWorkloadOverview() {
    this->initializeModel();
}

OAISqlserverWorkloadOverview::~OAISqlserverWorkloadOverview() {}

void OAISqlserverWorkloadOverview::initializeModel() {

    m_availability_group_isSet = false;
    m_availability_group_isValid = false;

    m_sqlserver_system_id_isSet = false;
    m_sqlserver_system_id_isValid = false;
}

void OAISqlserverWorkloadOverview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlserverWorkloadOverview::fromJsonObject(QJsonObject json) {

    m_availability_group_isValid = ::OpenAPI::fromJsonValue(m_availability_group, json[QString("availabilityGroup")]);
    m_availability_group_isSet = !json[QString("availabilityGroup")].isNull() && m_availability_group_isValid;

    m_sqlserver_system_id_isValid = ::OpenAPI::fromJsonValue(m_sqlserver_system_id, json[QString("sqlserverSystemId")]);
    m_sqlserver_system_id_isSet = !json[QString("sqlserverSystemId")].isNull() && m_sqlserver_system_id_isValid;
}

QString OAISqlserverWorkloadOverview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlserverWorkloadOverview::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_group.size() > 0) {
        obj.insert(QString("availabilityGroup"), ::OpenAPI::toJsonValue(m_availability_group));
    }
    if (m_sqlserver_system_id_isSet) {
        obj.insert(QString("sqlserverSystemId"), ::OpenAPI::toJsonValue(m_sqlserver_system_id));
    }
    return obj;
}

QList<QString> OAISqlserverWorkloadOverview::getAvailabilityGroup() const {
    return m_availability_group;
}
void OAISqlserverWorkloadOverview::setAvailabilityGroup(const QList<QString> &availability_group) {
    m_availability_group = availability_group;
    m_availability_group_isSet = true;
}

bool OAISqlserverWorkloadOverview::is_availability_group_Set() const{
    return m_availability_group_isSet;
}

bool OAISqlserverWorkloadOverview::is_availability_group_Valid() const{
    return m_availability_group_isValid;
}

QString OAISqlserverWorkloadOverview::getSqlserverSystemId() const {
    return m_sqlserver_system_id;
}
void OAISqlserverWorkloadOverview::setSqlserverSystemId(const QString &sqlserver_system_id) {
    m_sqlserver_system_id = sqlserver_system_id;
    m_sqlserver_system_id_isSet = true;
}

bool OAISqlserverWorkloadOverview::is_sqlserver_system_id_Set() const{
    return m_sqlserver_system_id_isSet;
}

bool OAISqlserverWorkloadOverview::is_sqlserver_system_id_Valid() const{
    return m_sqlserver_system_id_isValid;
}

bool OAISqlserverWorkloadOverview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqlserver_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlserverWorkloadOverview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
