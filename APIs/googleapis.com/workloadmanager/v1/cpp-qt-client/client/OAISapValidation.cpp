/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapValidation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapValidation::OAISapValidation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapValidation::OAISapValidation() {
    this->initializeModel();
}

OAISapValidation::~OAISapValidation() {}

void OAISapValidation::initializeModel() {

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_validation_details_isSet = false;
    m_validation_details_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAISapValidation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapValidation::fromJsonObject(QJsonObject json) {

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_validation_details_isValid = ::OpenAPI::fromJsonValue(m_validation_details, json[QString("validationDetails")]);
    m_validation_details_isSet = !json[QString("validationDetails")].isNull() && m_validation_details_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAISapValidation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapValidation::asJsonObject() const {
    QJsonObject obj;
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_validation_details.size() > 0) {
        obj.insert(QString("validationDetails"), ::OpenAPI::toJsonValue(m_validation_details));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAISapValidation::getProjectId() const {
    return m_project_id;
}
void OAISapValidation::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISapValidation::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISapValidation::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QList<OAISapValidationValidationDetail> OAISapValidation::getValidationDetails() const {
    return m_validation_details;
}
void OAISapValidation::setValidationDetails(const QList<OAISapValidationValidationDetail> &validation_details) {
    m_validation_details = validation_details;
    m_validation_details_isSet = true;
}

bool OAISapValidation::is_validation_details_Set() const{
    return m_validation_details_isSet;
}

bool OAISapValidation::is_validation_details_Valid() const{
    return m_validation_details_isValid;
}

QString OAISapValidation::getZone() const {
    return m_zone;
}
void OAISapValidation::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAISapValidation::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAISapValidation::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAISapValidation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapValidation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
