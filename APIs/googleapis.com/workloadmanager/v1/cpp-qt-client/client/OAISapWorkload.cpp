/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapWorkload::OAISapWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapWorkload::OAISapWorkload() {
    this->initializeModel();
}

OAISapWorkload::~OAISapWorkload() {}

void OAISapWorkload::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAISapWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapWorkload::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAISapWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

OAISapComponent OAISapWorkload::getApplication() const {
    return m_application;
}
void OAISapWorkload::setApplication(const OAISapComponent &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAISapWorkload::is_application_Set() const{
    return m_application_isSet;
}

bool OAISapWorkload::is_application_Valid() const{
    return m_application_isValid;
}

OAISapComponent OAISapWorkload::getDatabase() const {
    return m_database;
}
void OAISapWorkload::setDatabase(const OAISapComponent &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAISapWorkload::is_database_Set() const{
    return m_database_isSet;
}

bool OAISapWorkload::is_database_Valid() const{
    return m_database_isValid;
}

QMap<QString, QString> OAISapWorkload::getMetadata() const {
    return m_metadata;
}
void OAISapWorkload::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISapWorkload::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISapWorkload::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAISapWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
