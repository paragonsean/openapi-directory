/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceFilter.h
 *
 * Message describing resource filters
 */

#ifndef OAIResourceFilter_H
#define OAIResourceFilter_H

#include <QJsonObject>

#include "OAIGceInstanceFilter.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGceInstanceFilter;

class OAIResourceFilter : public OAIObject {
public:
    OAIResourceFilter();
    OAIResourceFilter(QString json);
    ~OAIResourceFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGceInstanceFilter getGceInstanceFilter() const;
    void setGceInstanceFilter(const OAIGceInstanceFilter &gce_instance_filter);
    bool is_gce_instance_filter_Set() const;
    bool is_gce_instance_filter_Valid() const;

    QMap<QString, QString> getInclusionLabels() const;
    void setInclusionLabels(const QMap<QString, QString> &inclusion_labels);
    bool is_inclusion_labels_Set() const;
    bool is_inclusion_labels_Valid() const;

    QList<QString> getResourceIdPatterns() const;
    void setResourceIdPatterns(const QList<QString> &resource_id_patterns);
    bool is_resource_id_patterns_Set() const;
    bool is_resource_id_patterns_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGceInstanceFilter m_gce_instance_filter;
    bool m_gce_instance_filter_isSet;
    bool m_gce_instance_filter_isValid;

    QMap<QString, QString> m_inclusion_labels;
    bool m_inclusion_labels_isSet;
    bool m_inclusion_labels_isValid;

    QList<QString> m_resource_id_patterns;
    bool m_resource_id_patterns_isSet;
    bool m_resource_id_patterns_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceFilter)

#endif // OAIResourceFilter_H
