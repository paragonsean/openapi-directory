/**
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluation::OAIEvaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluation::OAIEvaluation() {
    this->initializeModel();
}

OAIEvaluation::~OAIEvaluation() {}

void OAIEvaluation::initializeModel() {

    m_big_query_destination_isSet = false;
    m_big_query_destination_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_rules_bucket_isSet = false;
    m_custom_rules_bucket_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_filter_isSet = false;
    m_resource_filter_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_rule_names_isSet = false;
    m_rule_names_isValid = false;

    m_rule_versions_isSet = false;
    m_rule_versions_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIEvaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluation::fromJsonObject(QJsonObject json) {

    m_big_query_destination_isValid = ::OpenAPI::fromJsonValue(m_big_query_destination, json[QString("bigQueryDestination")]);
    m_big_query_destination_isSet = !json[QString("bigQueryDestination")].isNull() && m_big_query_destination_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_rules_bucket_isValid = ::OpenAPI::fromJsonValue(m_custom_rules_bucket, json[QString("customRulesBucket")]);
    m_custom_rules_bucket_isSet = !json[QString("customRulesBucket")].isNull() && m_custom_rules_bucket_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_filter_isValid = ::OpenAPI::fromJsonValue(m_resource_filter, json[QString("resourceFilter")]);
    m_resource_filter_isSet = !json[QString("resourceFilter")].isNull() && m_resource_filter_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("resourceStatus")]);
    m_resource_status_isSet = !json[QString("resourceStatus")].isNull() && m_resource_status_isValid;

    m_rule_names_isValid = ::OpenAPI::fromJsonValue(m_rule_names, json[QString("ruleNames")]);
    m_rule_names_isSet = !json[QString("ruleNames")].isNull() && m_rule_names_isValid;

    m_rule_versions_isValid = ::OpenAPI::fromJsonValue(m_rule_versions, json[QString("ruleVersions")]);
    m_rule_versions_isSet = !json[QString("ruleVersions")].isNull() && m_rule_versions_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIEvaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_destination.isSet()) {
        obj.insert(QString("bigQueryDestination"), ::OpenAPI::toJsonValue(m_big_query_destination));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_rules_bucket_isSet) {
        obj.insert(QString("customRulesBucket"), ::OpenAPI::toJsonValue(m_custom_rules_bucket));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_filter.isSet()) {
        obj.insert(QString("resourceFilter"), ::OpenAPI::toJsonValue(m_resource_filter));
    }
    if (m_resource_status.isSet()) {
        obj.insert(QString("resourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_rule_names.size() > 0) {
        obj.insert(QString("ruleNames"), ::OpenAPI::toJsonValue(m_rule_names));
    }
    if (m_rule_versions.size() > 0) {
        obj.insert(QString("ruleVersions"), ::OpenAPI::toJsonValue(m_rule_versions));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIBigQueryDestination OAIEvaluation::getBigQueryDestination() const {
    return m_big_query_destination;
}
void OAIEvaluation::setBigQueryDestination(const OAIBigQueryDestination &big_query_destination) {
    m_big_query_destination = big_query_destination;
    m_big_query_destination_isSet = true;
}

bool OAIEvaluation::is_big_query_destination_Set() const{
    return m_big_query_destination_isSet;
}

bool OAIEvaluation::is_big_query_destination_Valid() const{
    return m_big_query_destination_isValid;
}

QString OAIEvaluation::getCreateTime() const {
    return m_create_time;
}
void OAIEvaluation::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEvaluation::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEvaluation::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIEvaluation::getCustomRulesBucket() const {
    return m_custom_rules_bucket;
}
void OAIEvaluation::setCustomRulesBucket(const QString &custom_rules_bucket) {
    m_custom_rules_bucket = custom_rules_bucket;
    m_custom_rules_bucket_isSet = true;
}

bool OAIEvaluation::is_custom_rules_bucket_Set() const{
    return m_custom_rules_bucket_isSet;
}

bool OAIEvaluation::is_custom_rules_bucket_Valid() const{
    return m_custom_rules_bucket_isValid;
}

QString OAIEvaluation::getDescription() const {
    return m_description;
}
void OAIEvaluation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvaluation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvaluation::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIEvaluation::getLabels() const {
    return m_labels;
}
void OAIEvaluation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIEvaluation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIEvaluation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIEvaluation::getName() const {
    return m_name;
}
void OAIEvaluation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEvaluation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEvaluation::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceFilter OAIEvaluation::getResourceFilter() const {
    return m_resource_filter;
}
void OAIEvaluation::setResourceFilter(const OAIResourceFilter &resource_filter) {
    m_resource_filter = resource_filter;
    m_resource_filter_isSet = true;
}

bool OAIEvaluation::is_resource_filter_Set() const{
    return m_resource_filter_isSet;
}

bool OAIEvaluation::is_resource_filter_Valid() const{
    return m_resource_filter_isValid;
}

OAIResourceStatus OAIEvaluation::getResourceStatus() const {
    return m_resource_status;
}
void OAIEvaluation::setResourceStatus(const OAIResourceStatus &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAIEvaluation::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAIEvaluation::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QList<QString> OAIEvaluation::getRuleNames() const {
    return m_rule_names;
}
void OAIEvaluation::setRuleNames(const QList<QString> &rule_names) {
    m_rule_names = rule_names;
    m_rule_names_isSet = true;
}

bool OAIEvaluation::is_rule_names_Set() const{
    return m_rule_names_isSet;
}

bool OAIEvaluation::is_rule_names_Valid() const{
    return m_rule_names_isValid;
}

QList<QString> OAIEvaluation::getRuleVersions() const {
    return m_rule_versions;
}
void OAIEvaluation::setRuleVersions(const QList<QString> &rule_versions) {
    m_rule_versions = rule_versions;
    m_rule_versions_isSet = true;
}

bool OAIEvaluation::is_rule_versions_Set() const{
    return m_rule_versions_isSet;
}

bool OAIEvaluation::is_rule_versions_Valid() const{
    return m_rule_versions_isValid;
}

QString OAIEvaluation::getSchedule() const {
    return m_schedule;
}
void OAIEvaluation::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIEvaluation::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIEvaluation::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIEvaluation::getUpdateTime() const {
    return m_update_time;
}
void OAIEvaluation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEvaluation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEvaluation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIEvaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_rules_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
