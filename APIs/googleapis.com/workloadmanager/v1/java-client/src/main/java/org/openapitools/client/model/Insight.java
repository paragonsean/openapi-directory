/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SapDiscovery;
import org.openapitools.client.model.SapValidation;
import org.openapitools.client.model.SqlserverValidation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A presentation of host resource usage where the workload runs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Insight {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_SAP_DISCOVERY = "sapDiscovery";
  @SerializedName(SERIALIZED_NAME_SAP_DISCOVERY)
  private SapDiscovery sapDiscovery;

  public static final String SERIALIZED_NAME_SAP_VALIDATION = "sapValidation";
  @SerializedName(SERIALIZED_NAME_SAP_VALIDATION)
  private SapValidation sapValidation;

  public static final String SERIALIZED_NAME_SENT_TIME = "sentTime";
  @SerializedName(SERIALIZED_NAME_SENT_TIME)
  private String sentTime;

  public static final String SERIALIZED_NAME_SQLSERVER_VALIDATION = "sqlserverValidation";
  @SerializedName(SERIALIZED_NAME_SQLSERVER_VALIDATION)
  private SqlserverValidation sqlserverValidation;

  public Insight() {
  }

  public Insight(
     String sentTime
  ) {
    this();
    this.sentTime = sentTime;
  }

  public Insight instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Required. The instance id where the insight is generated from
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public Insight sapDiscovery(SapDiscovery sapDiscovery) {
    this.sapDiscovery = sapDiscovery;
    return this;
  }

  /**
   * Get sapDiscovery
   * @return sapDiscovery
   */
  @javax.annotation.Nullable
  public SapDiscovery getSapDiscovery() {
    return sapDiscovery;
  }

  public void setSapDiscovery(SapDiscovery sapDiscovery) {
    this.sapDiscovery = sapDiscovery;
  }


  public Insight sapValidation(SapValidation sapValidation) {
    this.sapValidation = sapValidation;
    return this;
  }

  /**
   * Get sapValidation
   * @return sapValidation
   */
  @javax.annotation.Nullable
  public SapValidation getSapValidation() {
    return sapValidation;
  }

  public void setSapValidation(SapValidation sapValidation) {
    this.sapValidation = sapValidation;
  }


  /**
   * Output only. [Output only] Create time stamp
   * @return sentTime
   */
  @javax.annotation.Nullable
  public String getSentTime() {
    return sentTime;
  }



  public Insight sqlserverValidation(SqlserverValidation sqlserverValidation) {
    this.sqlserverValidation = sqlserverValidation;
    return this;
  }

  /**
   * Get sqlserverValidation
   * @return sqlserverValidation
   */
  @javax.annotation.Nullable
  public SqlserverValidation getSqlserverValidation() {
    return sqlserverValidation;
  }

  public void setSqlserverValidation(SqlserverValidation sqlserverValidation) {
    this.sqlserverValidation = sqlserverValidation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Insight insight = (Insight) o;
    return Objects.equals(this.instanceId, insight.instanceId) &&
        Objects.equals(this.sapDiscovery, insight.sapDiscovery) &&
        Objects.equals(this.sapValidation, insight.sapValidation) &&
        Objects.equals(this.sentTime, insight.sentTime) &&
        Objects.equals(this.sqlserverValidation, insight.sqlserverValidation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, sapDiscovery, sapValidation, sentTime, sqlserverValidation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Insight {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    sapDiscovery: ").append(toIndentedString(sapDiscovery)).append("\n");
    sb.append("    sapValidation: ").append(toIndentedString(sapValidation)).append("\n");
    sb.append("    sentTime: ").append(toIndentedString(sentTime)).append("\n");
    sb.append("    sqlserverValidation: ").append(toIndentedString(sqlserverValidation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceId");
    openapiFields.add("sapDiscovery");
    openapiFields.add("sapValidation");
    openapiFields.add("sentTime");
    openapiFields.add("sqlserverValidation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Insight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Insight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Insight is not found in the empty JSON string", Insight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Insight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Insight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      // validate the optional field `sapDiscovery`
      if (jsonObj.get("sapDiscovery") != null && !jsonObj.get("sapDiscovery").isJsonNull()) {
        SapDiscovery.validateJsonElement(jsonObj.get("sapDiscovery"));
      }
      // validate the optional field `sapValidation`
      if (jsonObj.get("sapValidation") != null && !jsonObj.get("sapValidation").isJsonNull()) {
        SapValidation.validateJsonElement(jsonObj.get("sapValidation"));
      }
      if ((jsonObj.get("sentTime") != null && !jsonObj.get("sentTime").isJsonNull()) && !jsonObj.get("sentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentTime").toString()));
      }
      // validate the optional field `sqlserverValidation`
      if (jsonObj.get("sqlserverValidation") != null && !jsonObj.get("sqlserverValidation").isJsonNull()) {
        SqlserverValidation.validateJsonElement(jsonObj.get("sqlserverValidation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Insight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Insight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Insight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Insight.class));

       return (TypeAdapter<T>) new TypeAdapter<Insight>() {
           @Override
           public void write(JsonWriter out, Insight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Insight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Insight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Insight
   * @throws IOException if the JSON string is invalid with respect to Insight
   */
  public static Insight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Insight.class);
  }

  /**
   * Convert an instance of Insight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

