/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BigQueryDestination;
import org.openapitools.client.model.ResourceFilter;
import org.openapitools.client.model.ResourceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LINT.IfChange Message describing Evaluation object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Evaluation {
  public static final String SERIALIZED_NAME_BIG_QUERY_DESTINATION = "bigQueryDestination";
  @SerializedName(SERIALIZED_NAME_BIG_QUERY_DESTINATION)
  private BigQueryDestination bigQueryDestination;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_RULES_BUCKET = "customRulesBucket";
  @SerializedName(SERIALIZED_NAME_CUSTOM_RULES_BUCKET)
  private String customRulesBucket;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_FILTER = "resourceFilter";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILTER)
  private ResourceFilter resourceFilter;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS = "resourceStatus";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS)
  private ResourceStatus resourceStatus;

  public static final String SERIALIZED_NAME_RULE_NAMES = "ruleNames";
  @SerializedName(SERIALIZED_NAME_RULE_NAMES)
  private List<String> ruleNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULE_VERSIONS = "ruleVersions";
  @SerializedName(SERIALIZED_NAME_RULE_VERSIONS)
  private List<String> ruleVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Evaluation() {
  }

  public Evaluation(
     String createTime, 
     List<String> ruleVersions, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.ruleVersions = ruleVersions;
    this.updateTime = updateTime;
  }

  public Evaluation bigQueryDestination(BigQueryDestination bigQueryDestination) {
    this.bigQueryDestination = bigQueryDestination;
    return this;
  }

  /**
   * Get bigQueryDestination
   * @return bigQueryDestination
   */
  @javax.annotation.Nullable
  public BigQueryDestination getBigQueryDestination() {
    return bigQueryDestination;
  }

  public void setBigQueryDestination(BigQueryDestination bigQueryDestination) {
    this.bigQueryDestination = bigQueryDestination;
  }


  /**
   * Output only. [Output only] Create time stamp
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Evaluation customRulesBucket(String customRulesBucket) {
    this.customRulesBucket = customRulesBucket;
    return this;
  }

  /**
   * The Cloud Storage bucket name for custom rules.
   * @return customRulesBucket
   */
  @javax.annotation.Nullable
  public String getCustomRulesBucket() {
    return customRulesBucket;
  }

  public void setCustomRulesBucket(String customRulesBucket) {
    this.customRulesBucket = customRulesBucket;
  }


  public Evaluation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the Evaluation
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Evaluation labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Evaluation putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Evaluation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of resource names have the form &#39;projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}&#39;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Evaluation resourceFilter(ResourceFilter resourceFilter) {
    this.resourceFilter = resourceFilter;
    return this;
  }

  /**
   * Get resourceFilter
   * @return resourceFilter
   */
  @javax.annotation.Nullable
  public ResourceFilter getResourceFilter() {
    return resourceFilter;
  }

  public void setResourceFilter(ResourceFilter resourceFilter) {
    this.resourceFilter = resourceFilter;
  }


  public Evaluation resourceStatus(ResourceStatus resourceStatus) {
    this.resourceStatus = resourceStatus;
    return this;
  }

  /**
   * Get resourceStatus
   * @return resourceStatus
   */
  @javax.annotation.Nullable
  public ResourceStatus getResourceStatus() {
    return resourceStatus;
  }

  public void setResourceStatus(ResourceStatus resourceStatus) {
    this.resourceStatus = resourceStatus;
  }


  public Evaluation ruleNames(List<String> ruleNames) {
    this.ruleNames = ruleNames;
    return this;
  }

  public Evaluation addRuleNamesItem(String ruleNamesItem) {
    if (this.ruleNames == null) {
      this.ruleNames = new ArrayList<>();
    }
    this.ruleNames.add(ruleNamesItem);
    return this;
  }

  /**
   * the name of the rule
   * @return ruleNames
   */
  @javax.annotation.Nullable
  public List<String> getRuleNames() {
    return ruleNames;
  }

  public void setRuleNames(List<String> ruleNames) {
    this.ruleNames = ruleNames;
  }


  /**
   * Output only. [Output only] The updated rule ids if exist.
   * @return ruleVersions
   */
  @javax.annotation.Nullable
  public List<String> getRuleVersions() {
    return ruleVersions;
  }



  public Evaluation schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * crontab format schedule for scheduled evaluation, currently only support the following schedule: \&quot;0 *_/1 * * *\&quot;, \&quot;0 *_/6 * * *\&quot;, \&quot;0 *_/12 * * *\&quot;, \&quot;0 0 *_/1 * *\&quot;, \&quot;0 0 *_/7 * *\&quot;,
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  /**
   * Output only. [Output only] Update time stamp
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Evaluation evaluation = (Evaluation) o;
    return Objects.equals(this.bigQueryDestination, evaluation.bigQueryDestination) &&
        Objects.equals(this.createTime, evaluation.createTime) &&
        Objects.equals(this.customRulesBucket, evaluation.customRulesBucket) &&
        Objects.equals(this.description, evaluation.description) &&
        Objects.equals(this.labels, evaluation.labels) &&
        Objects.equals(this.name, evaluation.name) &&
        Objects.equals(this.resourceFilter, evaluation.resourceFilter) &&
        Objects.equals(this.resourceStatus, evaluation.resourceStatus) &&
        Objects.equals(this.ruleNames, evaluation.ruleNames) &&
        Objects.equals(this.ruleVersions, evaluation.ruleVersions) &&
        Objects.equals(this.schedule, evaluation.schedule) &&
        Objects.equals(this.updateTime, evaluation.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigQueryDestination, createTime, customRulesBucket, description, labels, name, resourceFilter, resourceStatus, ruleNames, ruleVersions, schedule, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Evaluation {\n");
    sb.append("    bigQueryDestination: ").append(toIndentedString(bigQueryDestination)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customRulesBucket: ").append(toIndentedString(customRulesBucket)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceFilter: ").append(toIndentedString(resourceFilter)).append("\n");
    sb.append("    resourceStatus: ").append(toIndentedString(resourceStatus)).append("\n");
    sb.append("    ruleNames: ").append(toIndentedString(ruleNames)).append("\n");
    sb.append("    ruleVersions: ").append(toIndentedString(ruleVersions)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigQueryDestination");
    openapiFields.add("createTime");
    openapiFields.add("customRulesBucket");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("resourceFilter");
    openapiFields.add("resourceStatus");
    openapiFields.add("ruleNames");
    openapiFields.add("ruleVersions");
    openapiFields.add("schedule");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Evaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Evaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Evaluation is not found in the empty JSON string", Evaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Evaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Evaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigQueryDestination`
      if (jsonObj.get("bigQueryDestination") != null && !jsonObj.get("bigQueryDestination").isJsonNull()) {
        BigQueryDestination.validateJsonElement(jsonObj.get("bigQueryDestination"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("customRulesBucket") != null && !jsonObj.get("customRulesBucket").isJsonNull()) && !jsonObj.get("customRulesBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customRulesBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customRulesBucket").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `resourceFilter`
      if (jsonObj.get("resourceFilter") != null && !jsonObj.get("resourceFilter").isJsonNull()) {
        ResourceFilter.validateJsonElement(jsonObj.get("resourceFilter"));
      }
      // validate the optional field `resourceStatus`
      if (jsonObj.get("resourceStatus") != null && !jsonObj.get("resourceStatus").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("resourceStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ruleNames") != null && !jsonObj.get("ruleNames").isJsonNull() && !jsonObj.get("ruleNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleNames` to be an array in the JSON string but got `%s`", jsonObj.get("ruleNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ruleVersions") != null && !jsonObj.get("ruleVersions").isJsonNull() && !jsonObj.get("ruleVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleVersions` to be an array in the JSON string but got `%s`", jsonObj.get("ruleVersions").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Evaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Evaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Evaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Evaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<Evaluation>() {
           @Override
           public void write(JsonWriter out, Evaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Evaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Evaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Evaluation
   * @throws IOException if the JSON string is invalid with respect to Evaluation
   */
  public static Evaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Evaluation.class);
  }

  /**
   * Convert an instance of Evaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

