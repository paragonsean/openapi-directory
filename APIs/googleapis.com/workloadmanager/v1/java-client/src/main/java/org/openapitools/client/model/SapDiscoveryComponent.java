/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SapDiscoveryComponentApplicationProperties;
import org.openapitools.client.model.SapDiscoveryComponentDatabaseProperties;
import org.openapitools.client.model.SapDiscoveryResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing the system component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SapDiscoveryComponent {
  public static final String SERIALIZED_NAME_APPLICATION_PROPERTIES = "applicationProperties";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PROPERTIES)
  private SapDiscoveryComponentApplicationProperties applicationProperties;

  public static final String SERIALIZED_NAME_DATABASE_PROPERTIES = "databaseProperties";
  @SerializedName(SERIALIZED_NAME_DATABASE_PROPERTIES)
  private SapDiscoveryComponentDatabaseProperties databaseProperties;

  public static final String SERIALIZED_NAME_HA_HOSTS = "haHosts";
  @SerializedName(SERIALIZED_NAME_HA_HOSTS)
  private List<String> haHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_PROJECT = "hostProject";
  @SerializedName(SERIALIZED_NAME_HOST_PROJECT)
  private String hostProject;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<SapDiscoveryResource> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  /**
   * Optional. The detected topology of the component.
   */
  @JsonAdapter(TopologyTypeEnum.Adapter.class)
  public enum TopologyTypeEnum {
    TYPE_UNSPECIFIED("TOPOLOGY_TYPE_UNSPECIFIED"),
    
    SCALE_UP("TOPOLOGY_SCALE_UP"),
    
    SCALE_OUT("TOPOLOGY_SCALE_OUT");

    private String value;

    TopologyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TopologyTypeEnum fromValue(String value) {
      for (TopologyTypeEnum b : TopologyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TopologyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopologyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TopologyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TopologyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TopologyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOPOLOGY_TYPE = "topologyType";
  @SerializedName(SERIALIZED_NAME_TOPOLOGY_TYPE)
  private TopologyTypeEnum topologyType;

  public SapDiscoveryComponent() {
  }

  public SapDiscoveryComponent applicationProperties(SapDiscoveryComponentApplicationProperties applicationProperties) {
    this.applicationProperties = applicationProperties;
    return this;
  }

  /**
   * Get applicationProperties
   * @return applicationProperties
   */
  @javax.annotation.Nullable
  public SapDiscoveryComponentApplicationProperties getApplicationProperties() {
    return applicationProperties;
  }

  public void setApplicationProperties(SapDiscoveryComponentApplicationProperties applicationProperties) {
    this.applicationProperties = applicationProperties;
  }


  public SapDiscoveryComponent databaseProperties(SapDiscoveryComponentDatabaseProperties databaseProperties) {
    this.databaseProperties = databaseProperties;
    return this;
  }

  /**
   * Get databaseProperties
   * @return databaseProperties
   */
  @javax.annotation.Nullable
  public SapDiscoveryComponentDatabaseProperties getDatabaseProperties() {
    return databaseProperties;
  }

  public void setDatabaseProperties(SapDiscoveryComponentDatabaseProperties databaseProperties) {
    this.databaseProperties = databaseProperties;
  }


  public SapDiscoveryComponent haHosts(List<String> haHosts) {
    this.haHosts = haHosts;
    return this;
  }

  public SapDiscoveryComponent addHaHostsItem(String haHostsItem) {
    if (this.haHosts == null) {
      this.haHosts = new ArrayList<>();
    }
    this.haHosts.add(haHostsItem);
    return this;
  }

  /**
   * Optional. A list of host URIs that are part of the HA configuration if present. An empty list indicates the component is not configured for HA.
   * @return haHosts
   */
  @javax.annotation.Nullable
  public List<String> getHaHosts() {
    return haHosts;
  }

  public void setHaHosts(List<String> haHosts) {
    this.haHosts = haHosts;
  }


  public SapDiscoveryComponent hostProject(String hostProject) {
    this.hostProject = hostProject;
    return this;
  }

  /**
   * Required. Pantheon Project in which the resources reside.
   * @return hostProject
   */
  @javax.annotation.Nullable
  public String getHostProject() {
    return hostProject;
  }

  public void setHostProject(String hostProject) {
    this.hostProject = hostProject;
  }


  public SapDiscoveryComponent resources(List<SapDiscoveryResource> resources) {
    this.resources = resources;
    return this;
  }

  public SapDiscoveryComponent addResourcesItem(SapDiscoveryResource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Optional. The resources in a component.
   * @return resources
   */
  @javax.annotation.Nullable
  public List<SapDiscoveryResource> getResources() {
    return resources;
  }

  public void setResources(List<SapDiscoveryResource> resources) {
    this.resources = resources;
  }


  public SapDiscoveryComponent sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * Optional. The SAP identifier, used by the SAP software and helps differentiate systems for customers.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public SapDiscoveryComponent topologyType(TopologyTypeEnum topologyType) {
    this.topologyType = topologyType;
    return this;
  }

  /**
   * Optional. The detected topology of the component.
   * @return topologyType
   */
  @javax.annotation.Nullable
  public TopologyTypeEnum getTopologyType() {
    return topologyType;
  }

  public void setTopologyType(TopologyTypeEnum topologyType) {
    this.topologyType = topologyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SapDiscoveryComponent sapDiscoveryComponent = (SapDiscoveryComponent) o;
    return Objects.equals(this.applicationProperties, sapDiscoveryComponent.applicationProperties) &&
        Objects.equals(this.databaseProperties, sapDiscoveryComponent.databaseProperties) &&
        Objects.equals(this.haHosts, sapDiscoveryComponent.haHosts) &&
        Objects.equals(this.hostProject, sapDiscoveryComponent.hostProject) &&
        Objects.equals(this.resources, sapDiscoveryComponent.resources) &&
        Objects.equals(this.sid, sapDiscoveryComponent.sid) &&
        Objects.equals(this.topologyType, sapDiscoveryComponent.topologyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationProperties, databaseProperties, haHosts, hostProject, resources, sid, topologyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SapDiscoveryComponent {\n");
    sb.append("    applicationProperties: ").append(toIndentedString(applicationProperties)).append("\n");
    sb.append("    databaseProperties: ").append(toIndentedString(databaseProperties)).append("\n");
    sb.append("    haHosts: ").append(toIndentedString(haHosts)).append("\n");
    sb.append("    hostProject: ").append(toIndentedString(hostProject)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    topologyType: ").append(toIndentedString(topologyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationProperties");
    openapiFields.add("databaseProperties");
    openapiFields.add("haHosts");
    openapiFields.add("hostProject");
    openapiFields.add("resources");
    openapiFields.add("sid");
    openapiFields.add("topologyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SapDiscoveryComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SapDiscoveryComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SapDiscoveryComponent is not found in the empty JSON string", SapDiscoveryComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SapDiscoveryComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SapDiscoveryComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationProperties`
      if (jsonObj.get("applicationProperties") != null && !jsonObj.get("applicationProperties").isJsonNull()) {
        SapDiscoveryComponentApplicationProperties.validateJsonElement(jsonObj.get("applicationProperties"));
      }
      // validate the optional field `databaseProperties`
      if (jsonObj.get("databaseProperties") != null && !jsonObj.get("databaseProperties").isJsonNull()) {
        SapDiscoveryComponentDatabaseProperties.validateJsonElement(jsonObj.get("databaseProperties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("haHosts") != null && !jsonObj.get("haHosts").isJsonNull() && !jsonObj.get("haHosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `haHosts` to be an array in the JSON string but got `%s`", jsonObj.get("haHosts").toString()));
      }
      if ((jsonObj.get("hostProject") != null && !jsonObj.get("hostProject").isJsonNull()) && !jsonObj.get("hostProject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostProject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostProject").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            SapDiscoveryResource.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("topologyType") != null && !jsonObj.get("topologyType").isJsonNull()) && !jsonObj.get("topologyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topologyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topologyType").toString()));
      }
      // validate the optional field `topologyType`
      if (jsonObj.get("topologyType") != null && !jsonObj.get("topologyType").isJsonNull()) {
        TopologyTypeEnum.validateJsonElement(jsonObj.get("topologyType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SapDiscoveryComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SapDiscoveryComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SapDiscoveryComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SapDiscoveryComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<SapDiscoveryComponent>() {
           @Override
           public void write(JsonWriter out, SapDiscoveryComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SapDiscoveryComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SapDiscoveryComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SapDiscoveryComponent
   * @throws IOException if the JSON string is invalid with respect to SapDiscoveryComponent
   */
  public static SapDiscoveryComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SapDiscoveryComponent.class);
  }

  /**
   * Convert an instance of SapDiscoveryComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

