/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Resource;
import org.openapitools.client.model.ViolationDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing the result of an execution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionResult {
  public static final String SERIALIZED_NAME_DOCUMENTATION_URL = "documentationUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URL)
  private String documentationUrl;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private Resource resource;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_VIOLATION_DETAILS = "violationDetails";
  @SerializedName(SERIALIZED_NAME_VIOLATION_DETAILS)
  private ViolationDetails violationDetails;

  public static final String SERIALIZED_NAME_VIOLATION_MESSAGE = "violationMessage";
  @SerializedName(SERIALIZED_NAME_VIOLATION_MESSAGE)
  private String violationMessage;

  public ExecutionResult() {
  }

  public ExecutionResult documentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

  /**
   * the document url of the rule
   * @return documentationUrl
   */
  @javax.annotation.Nullable
  public String getDocumentationUrl() {
    return documentationUrl;
  }

  public void setDocumentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public ExecutionResult resource(Resource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public Resource getResource() {
    return resource;
  }

  public void setResource(Resource resource) {
    this.resource = resource;
  }


  public ExecutionResult rule(String rule) {
    this.rule = rule;
    return this;
  }

  /**
   * the rule which violate in execution
   * @return rule
   */
  @javax.annotation.Nullable
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }


  public ExecutionResult severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * severity of violation
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public ExecutionResult violationDetails(ViolationDetails violationDetails) {
    this.violationDetails = violationDetails;
    return this;
  }

  /**
   * Get violationDetails
   * @return violationDetails
   */
  @javax.annotation.Nullable
  public ViolationDetails getViolationDetails() {
    return violationDetails;
  }

  public void setViolationDetails(ViolationDetails violationDetails) {
    this.violationDetails = violationDetails;
  }


  public ExecutionResult violationMessage(String violationMessage) {
    this.violationMessage = violationMessage;
    return this;
  }

  /**
   * the violation message of an execution
   * @return violationMessage
   */
  @javax.annotation.Nullable
  public String getViolationMessage() {
    return violationMessage;
  }

  public void setViolationMessage(String violationMessage) {
    this.violationMessage = violationMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionResult executionResult = (ExecutionResult) o;
    return Objects.equals(this.documentationUrl, executionResult.documentationUrl) &&
        Objects.equals(this.resource, executionResult.resource) &&
        Objects.equals(this.rule, executionResult.rule) &&
        Objects.equals(this.severity, executionResult.severity) &&
        Objects.equals(this.violationDetails, executionResult.violationDetails) &&
        Objects.equals(this.violationMessage, executionResult.violationMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentationUrl, resource, rule, severity, violationDetails, violationMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionResult {\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    violationDetails: ").append(toIndentedString(violationDetails)).append("\n");
    sb.append("    violationMessage: ").append(toIndentedString(violationMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentationUrl");
    openapiFields.add("resource");
    openapiFields.add("rule");
    openapiFields.add("severity");
    openapiFields.add("violationDetails");
    openapiFields.add("violationMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionResult is not found in the empty JSON string", ExecutionResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentationUrl") != null && !jsonObj.get("documentationUrl").isJsonNull()) && !jsonObj.get("documentationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationUrl").toString()));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        Resource.validateJsonElement(jsonObj.get("resource"));
      }
      if ((jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `violationDetails`
      if (jsonObj.get("violationDetails") != null && !jsonObj.get("violationDetails").isJsonNull()) {
        ViolationDetails.validateJsonElement(jsonObj.get("violationDetails"));
      }
      if ((jsonObj.get("violationMessage") != null && !jsonObj.get("violationMessage").isJsonNull()) && !jsonObj.get("violationMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `violationMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("violationMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionResult>() {
           @Override
           public void write(JsonWriter out, ExecutionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionResult
   * @throws IOException if the JSON string is invalid with respect to ExecutionResult
   */
  public static ExecutionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionResult.class);
  }

  /**
   * Convert an instance of ExecutionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

