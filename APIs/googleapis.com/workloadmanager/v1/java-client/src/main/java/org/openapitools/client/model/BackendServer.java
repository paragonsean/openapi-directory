/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The backend server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackendServer {
  public static final String SERIALIZED_NAME_BACKUP_FILE = "backupFile";
  @SerializedName(SERIALIZED_NAME_BACKUP_FILE)
  private String backupFile;

  public static final String SERIALIZED_NAME_BACKUP_SCHEDULE = "backupSchedule";
  @SerializedName(SERIALIZED_NAME_BACKUP_SCHEDULE)
  private String backupSchedule;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<CloudResource> resources = new ArrayList<>();

  public BackendServer() {
  }

  public BackendServer(
     String backupFile, 
     String backupSchedule, 
     String name, 
     String osVersion, 
     List<CloudResource> resources
  ) {
    this();
    this.backupFile = backupFile;
    this.backupSchedule = backupSchedule;
    this.name = name;
    this.osVersion = osVersion;
    this.resources = resources;
  }

  /**
   * Output only. The backup file
   * @return backupFile
   */
  @javax.annotation.Nullable
  public String getBackupFile() {
    return backupFile;
  }



  /**
   * Output only. The backup schedule
   * @return backupSchedule
   */
  @javax.annotation.Nullable
  public String getBackupSchedule() {
    return backupSchedule;
  }



  /**
   * Output only. The backend name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. OS information
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }



  /**
   * Output only. resources in the component
   * @return resources
   */
  @javax.annotation.Nullable
  public List<CloudResource> getResources() {
    return resources;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendServer backendServer = (BackendServer) o;
    return Objects.equals(this.backupFile, backendServer.backupFile) &&
        Objects.equals(this.backupSchedule, backendServer.backupSchedule) &&
        Objects.equals(this.name, backendServer.name) &&
        Objects.equals(this.osVersion, backendServer.osVersion) &&
        Objects.equals(this.resources, backendServer.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupFile, backupSchedule, name, osVersion, resources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendServer {\n");
    sb.append("    backupFile: ").append(toIndentedString(backupFile)).append("\n");
    sb.append("    backupSchedule: ").append(toIndentedString(backupSchedule)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupFile");
    openapiFields.add("backupSchedule");
    openapiFields.add("name");
    openapiFields.add("osVersion");
    openapiFields.add("resources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackendServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackendServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackendServer is not found in the empty JSON string", BackendServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackendServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackendServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupFile") != null && !jsonObj.get("backupFile").isJsonNull()) && !jsonObj.get("backupFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupFile").toString()));
      }
      if ((jsonObj.get("backupSchedule") != null && !jsonObj.get("backupSchedule").isJsonNull()) && !jsonObj.get("backupSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupSchedule").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            CloudResource.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackendServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackendServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackendServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackendServer.class));

       return (TypeAdapter<T>) new TypeAdapter<BackendServer>() {
           @Override
           public void write(JsonWriter out, BackendServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackendServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackendServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackendServer
   * @throws IOException if the JSON string is invalid with respect to BackendServer
   */
  public static BackendServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackendServer.class);
  }

  /**
   * Convert an instance of BackendServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

