/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Layer;
import org.openapitools.client.model.SapWorkload;
import org.openapitools.client.model.SqlserverWorkload;
import org.openapitools.client.model.ThreeTierWorkload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * workload resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkloadProfile {
  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private Layer application;

  public static final String SERIALIZED_NAME_ASCS = "ascs";
  @SerializedName(SERIALIZED_NAME_ASCS)
  private Layer ascs;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private Layer database;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REFRESHED_TIME = "refreshedTime";
  @SerializedName(SERIALIZED_NAME_REFRESHED_TIME)
  private String refreshedTime;

  public static final String SERIALIZED_NAME_SAP_WORKLOAD = "sapWorkload";
  @SerializedName(SERIALIZED_NAME_SAP_WORKLOAD)
  private SapWorkload sapWorkload;

  public static final String SERIALIZED_NAME_SQLSERVER_WORKLOAD = "sqlserverWorkload";
  @SerializedName(SERIALIZED_NAME_SQLSERVER_WORKLOAD)
  private SqlserverWorkload sqlserverWorkload;

  /**
   * Output only. [output only] the current state if a a workload
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    DEPLOYING("DEPLOYING"),
    
    DESTROYING("DESTROYING"),
    
    MAINTENANCE("MAINTENANCE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_THREE_TIER_WORKLOAD = "threeTierWorkload";
  @SerializedName(SERIALIZED_NAME_THREE_TIER_WORKLOAD)
  private ThreeTierWorkload threeTierWorkload;

  /**
   * Required. The type of the workload
   */
  @JsonAdapter(WorkloadTypeEnum.Adapter.class)
  public enum WorkloadTypeEnum {
    WORKLOAD_TYPE_UNSPECIFIED("WORKLOAD_TYPE_UNSPECIFIED"),
    
    S4_HANA("S4_HANA"),
    
    SQL_SERVER("SQL_SERVER"),
    
    THREE_TIER_WEB_APP("THREE_TIER_WEB_APP");

    private String value;

    WorkloadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkloadTypeEnum fromValue(String value) {
      for (WorkloadTypeEnum b : WorkloadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkloadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkloadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkloadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkloadTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkloadTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKLOAD_TYPE = "workloadType";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_TYPE)
  private WorkloadTypeEnum workloadType;

  public WorkloadProfile() {
  }

  public WorkloadProfile(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public WorkloadProfile application(Layer application) {
    this.application = application;
    return this;
  }

  /**
   * Get application
   * @return application
   */
  @javax.annotation.Nullable
  public Layer getApplication() {
    return application;
  }

  public void setApplication(Layer application) {
    this.application = application;
  }


  public WorkloadProfile ascs(Layer ascs) {
    this.ascs = ascs;
    return this;
  }

  /**
   * Get ascs
   * @return ascs
   */
  @javax.annotation.Nullable
  public Layer getAscs() {
    return ascs;
  }

  public void setAscs(Layer ascs) {
    this.ascs = ascs;
  }


  public WorkloadProfile database(Layer database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public Layer getDatabase() {
    return database;
  }

  public void setDatabase(Layer database) {
    this.database = database;
  }


  public WorkloadProfile labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public WorkloadProfile putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. such as name, description, version. More example can be found in deployment
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public WorkloadProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. name of resource names have the form &#39;projects/{project_id}/workloads/{workload_id}&#39;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkloadProfile refreshedTime(String refreshedTime) {
    this.refreshedTime = refreshedTime;
    return this;
  }

  /**
   * Required. time when the workload data was refreshed
   * @return refreshedTime
   */
  @javax.annotation.Nullable
  public String getRefreshedTime() {
    return refreshedTime;
  }

  public void setRefreshedTime(String refreshedTime) {
    this.refreshedTime = refreshedTime;
  }


  public WorkloadProfile sapWorkload(SapWorkload sapWorkload) {
    this.sapWorkload = sapWorkload;
    return this;
  }

  /**
   * Get sapWorkload
   * @return sapWorkload
   */
  @javax.annotation.Nullable
  public SapWorkload getSapWorkload() {
    return sapWorkload;
  }

  public void setSapWorkload(SapWorkload sapWorkload) {
    this.sapWorkload = sapWorkload;
  }


  public WorkloadProfile sqlserverWorkload(SqlserverWorkload sqlserverWorkload) {
    this.sqlserverWorkload = sqlserverWorkload;
    return this;
  }

  /**
   * Get sqlserverWorkload
   * @return sqlserverWorkload
   */
  @javax.annotation.Nullable
  public SqlserverWorkload getSqlserverWorkload() {
    return sqlserverWorkload;
  }

  public void setSqlserverWorkload(SqlserverWorkload sqlserverWorkload) {
    this.sqlserverWorkload = sqlserverWorkload;
  }


  /**
   * Output only. [output only] the current state if a a workload
   * @return state
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public WorkloadProfile threeTierWorkload(ThreeTierWorkload threeTierWorkload) {
    this.threeTierWorkload = threeTierWorkload;
    return this;
  }

  /**
   * Get threeTierWorkload
   * @return threeTierWorkload
   */
  @javax.annotation.Nullable
  public ThreeTierWorkload getThreeTierWorkload() {
    return threeTierWorkload;
  }

  public void setThreeTierWorkload(ThreeTierWorkload threeTierWorkload) {
    this.threeTierWorkload = threeTierWorkload;
  }


  public WorkloadProfile workloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
    return this;
  }

  /**
   * Required. The type of the workload
   * @return workloadType
   */
  @javax.annotation.Nullable
  public WorkloadTypeEnum getWorkloadType() {
    return workloadType;
  }

  public void setWorkloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkloadProfile workloadProfile = (WorkloadProfile) o;
    return Objects.equals(this.application, workloadProfile.application) &&
        Objects.equals(this.ascs, workloadProfile.ascs) &&
        Objects.equals(this.database, workloadProfile.database) &&
        Objects.equals(this.labels, workloadProfile.labels) &&
        Objects.equals(this.name, workloadProfile.name) &&
        Objects.equals(this.refreshedTime, workloadProfile.refreshedTime) &&
        Objects.equals(this.sapWorkload, workloadProfile.sapWorkload) &&
        Objects.equals(this.sqlserverWorkload, workloadProfile.sqlserverWorkload) &&
        Objects.equals(this.state, workloadProfile.state) &&
        Objects.equals(this.threeTierWorkload, workloadProfile.threeTierWorkload) &&
        Objects.equals(this.workloadType, workloadProfile.workloadType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, ascs, database, labels, name, refreshedTime, sapWorkload, sqlserverWorkload, state, threeTierWorkload, workloadType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkloadProfile {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    ascs: ").append(toIndentedString(ascs)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    refreshedTime: ").append(toIndentedString(refreshedTime)).append("\n");
    sb.append("    sapWorkload: ").append(toIndentedString(sapWorkload)).append("\n");
    sb.append("    sqlserverWorkload: ").append(toIndentedString(sqlserverWorkload)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    threeTierWorkload: ").append(toIndentedString(threeTierWorkload)).append("\n");
    sb.append("    workloadType: ").append(toIndentedString(workloadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application");
    openapiFields.add("ascs");
    openapiFields.add("database");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("refreshedTime");
    openapiFields.add("sapWorkload");
    openapiFields.add("sqlserverWorkload");
    openapiFields.add("state");
    openapiFields.add("threeTierWorkload");
    openapiFields.add("workloadType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkloadProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkloadProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkloadProfile is not found in the empty JSON string", WorkloadProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkloadProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkloadProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `application`
      if (jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) {
        Layer.validateJsonElement(jsonObj.get("application"));
      }
      // validate the optional field `ascs`
      if (jsonObj.get("ascs") != null && !jsonObj.get("ascs").isJsonNull()) {
        Layer.validateJsonElement(jsonObj.get("ascs"));
      }
      // validate the optional field `database`
      if (jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) {
        Layer.validateJsonElement(jsonObj.get("database"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("refreshedTime") != null && !jsonObj.get("refreshedTime").isJsonNull()) && !jsonObj.get("refreshedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshedTime").toString()));
      }
      // validate the optional field `sapWorkload`
      if (jsonObj.get("sapWorkload") != null && !jsonObj.get("sapWorkload").isJsonNull()) {
        SapWorkload.validateJsonElement(jsonObj.get("sapWorkload"));
      }
      // validate the optional field `sqlserverWorkload`
      if (jsonObj.get("sqlserverWorkload") != null && !jsonObj.get("sqlserverWorkload").isJsonNull()) {
        SqlserverWorkload.validateJsonElement(jsonObj.get("sqlserverWorkload"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `threeTierWorkload`
      if (jsonObj.get("threeTierWorkload") != null && !jsonObj.get("threeTierWorkload").isJsonNull()) {
        ThreeTierWorkload.validateJsonElement(jsonObj.get("threeTierWorkload"));
      }
      if ((jsonObj.get("workloadType") != null && !jsonObj.get("workloadType").isJsonNull()) && !jsonObj.get("workloadType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workloadType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workloadType").toString()));
      }
      // validate the optional field `workloadType`
      if (jsonObj.get("workloadType") != null && !jsonObj.get("workloadType").isJsonNull()) {
        WorkloadTypeEnum.validateJsonElement(jsonObj.get("workloadType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkloadProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkloadProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkloadProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkloadProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkloadProfile>() {
           @Override
           public void write(JsonWriter out, WorkloadProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkloadProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkloadProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkloadProfile
   * @throws IOException if the JSON string is invalid with respect to WorkloadProfile
   */
  public static WorkloadProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkloadProfile.class);
  }

  /**
   * Convert an instance of WorkloadProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

