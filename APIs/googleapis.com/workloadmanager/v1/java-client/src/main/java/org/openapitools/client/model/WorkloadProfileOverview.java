/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SapWorkloadOverview;
import org.openapitools.client.model.SqlserverWorkloadOverview;
import org.openapitools.client.model.ThreeTierWorkloadOverview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * a workload profile overview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkloadProfileOverview {
  public static final String SERIALIZED_NAME_SAP_WORKLOAD_OVERVIEW = "sapWorkloadOverview";
  @SerializedName(SERIALIZED_NAME_SAP_WORKLOAD_OVERVIEW)
  private SapWorkloadOverview sapWorkloadOverview;

  public static final String SERIALIZED_NAME_SQLSERVER_WORKLOAD_OVERVIEW = "sqlserverWorkloadOverview";
  @SerializedName(SERIALIZED_NAME_SQLSERVER_WORKLOAD_OVERVIEW)
  private SqlserverWorkloadOverview sqlserverWorkloadOverview;

  public static final String SERIALIZED_NAME_THREE_TIER_WORKLOAD_OVERVIEW = "threeTierWorkloadOverview";
  @SerializedName(SERIALIZED_NAME_THREE_TIER_WORKLOAD_OVERVIEW)
  private ThreeTierWorkloadOverview threeTierWorkloadOverview;

  public WorkloadProfileOverview() {
  }

  public WorkloadProfileOverview sapWorkloadOverview(SapWorkloadOverview sapWorkloadOverview) {
    this.sapWorkloadOverview = sapWorkloadOverview;
    return this;
  }

  /**
   * Get sapWorkloadOverview
   * @return sapWorkloadOverview
   */
  @javax.annotation.Nullable
  public SapWorkloadOverview getSapWorkloadOverview() {
    return sapWorkloadOverview;
  }

  public void setSapWorkloadOverview(SapWorkloadOverview sapWorkloadOverview) {
    this.sapWorkloadOverview = sapWorkloadOverview;
  }


  public WorkloadProfileOverview sqlserverWorkloadOverview(SqlserverWorkloadOverview sqlserverWorkloadOverview) {
    this.sqlserverWorkloadOverview = sqlserverWorkloadOverview;
    return this;
  }

  /**
   * Get sqlserverWorkloadOverview
   * @return sqlserverWorkloadOverview
   */
  @javax.annotation.Nullable
  public SqlserverWorkloadOverview getSqlserverWorkloadOverview() {
    return sqlserverWorkloadOverview;
  }

  public void setSqlserverWorkloadOverview(SqlserverWorkloadOverview sqlserverWorkloadOverview) {
    this.sqlserverWorkloadOverview = sqlserverWorkloadOverview;
  }


  public WorkloadProfileOverview threeTierWorkloadOverview(ThreeTierWorkloadOverview threeTierWorkloadOverview) {
    this.threeTierWorkloadOverview = threeTierWorkloadOverview;
    return this;
  }

  /**
   * Get threeTierWorkloadOverview
   * @return threeTierWorkloadOverview
   */
  @javax.annotation.Nullable
  public ThreeTierWorkloadOverview getThreeTierWorkloadOverview() {
    return threeTierWorkloadOverview;
  }

  public void setThreeTierWorkloadOverview(ThreeTierWorkloadOverview threeTierWorkloadOverview) {
    this.threeTierWorkloadOverview = threeTierWorkloadOverview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkloadProfileOverview workloadProfileOverview = (WorkloadProfileOverview) o;
    return Objects.equals(this.sapWorkloadOverview, workloadProfileOverview.sapWorkloadOverview) &&
        Objects.equals(this.sqlserverWorkloadOverview, workloadProfileOverview.sqlserverWorkloadOverview) &&
        Objects.equals(this.threeTierWorkloadOverview, workloadProfileOverview.threeTierWorkloadOverview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sapWorkloadOverview, sqlserverWorkloadOverview, threeTierWorkloadOverview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkloadProfileOverview {\n");
    sb.append("    sapWorkloadOverview: ").append(toIndentedString(sapWorkloadOverview)).append("\n");
    sb.append("    sqlserverWorkloadOverview: ").append(toIndentedString(sqlserverWorkloadOverview)).append("\n");
    sb.append("    threeTierWorkloadOverview: ").append(toIndentedString(threeTierWorkloadOverview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sapWorkloadOverview");
    openapiFields.add("sqlserverWorkloadOverview");
    openapiFields.add("threeTierWorkloadOverview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkloadProfileOverview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkloadProfileOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkloadProfileOverview is not found in the empty JSON string", WorkloadProfileOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkloadProfileOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkloadProfileOverview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sapWorkloadOverview`
      if (jsonObj.get("sapWorkloadOverview") != null && !jsonObj.get("sapWorkloadOverview").isJsonNull()) {
        SapWorkloadOverview.validateJsonElement(jsonObj.get("sapWorkloadOverview"));
      }
      // validate the optional field `sqlserverWorkloadOverview`
      if (jsonObj.get("sqlserverWorkloadOverview") != null && !jsonObj.get("sqlserverWorkloadOverview").isJsonNull()) {
        SqlserverWorkloadOverview.validateJsonElement(jsonObj.get("sqlserverWorkloadOverview"));
      }
      // validate the optional field `threeTierWorkloadOverview`
      if (jsonObj.get("threeTierWorkloadOverview") != null && !jsonObj.get("threeTierWorkloadOverview").isJsonNull()) {
        ThreeTierWorkloadOverview.validateJsonElement(jsonObj.get("threeTierWorkloadOverview"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkloadProfileOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkloadProfileOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkloadProfileOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkloadProfileOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkloadProfileOverview>() {
           @Override
           public void write(JsonWriter out, WorkloadProfileOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkloadProfileOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkloadProfileOverview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkloadProfileOverview
   * @throws IOException if the JSON string is invalid with respect to WorkloadProfileOverview
   */
  public static WorkloadProfileOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkloadProfileOverview.class);
  }

  /**
   * Convert an instance of WorkloadProfileOverview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

