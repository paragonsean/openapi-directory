/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SapDiscoveryResourceInstanceProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SapDiscoveryResource {
  public static final String SERIALIZED_NAME_INSTANCE_PROPERTIES = "instanceProperties";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PROPERTIES)
  private SapDiscoveryResourceInstanceProperties instanceProperties;

  public static final String SERIALIZED_NAME_RELATED_RESOURCES = "relatedResources";
  @SerializedName(SERIALIZED_NAME_RELATED_RESOURCES)
  private List<String> relatedResources = new ArrayList<>();

  /**
   * Required. ComputeInstance, ComputeDisk, VPC, Bare Metal server, etc.
   */
  @JsonAdapter(ResourceKindEnum.Adapter.class)
  public enum ResourceKindEnum {
    UNSPECIFIED("RESOURCE_KIND_UNSPECIFIED"),
    
    INSTANCE("RESOURCE_KIND_INSTANCE"),
    
    DISK("RESOURCE_KIND_DISK"),
    
    ADDRESS("RESOURCE_KIND_ADDRESS"),
    
    FILESTORE("RESOURCE_KIND_FILESTORE"),
    
    HEALTH_CHECK("RESOURCE_KIND_HEALTH_CHECK"),
    
    FORWARDING_RULE("RESOURCE_KIND_FORWARDING_RULE"),
    
    BACKEND_SERVICE("RESOURCE_KIND_BACKEND_SERVICE"),
    
    SUBNETWORK("RESOURCE_KIND_SUBNETWORK"),
    
    NETWORK("RESOURCE_KIND_NETWORK"),
    
    PUBLIC_ADDRESS("RESOURCE_KIND_PUBLIC_ADDRESS"),
    
    INSTANCE_GROUP("RESOURCE_KIND_INSTANCE_GROUP");

    private String value;

    ResourceKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceKindEnum fromValue(String value) {
      for (ResourceKindEnum b : ResourceKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_KIND = "resourceKind";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KIND)
  private ResourceKindEnum resourceKind;

  /**
   * Required. The type of this resource.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    UNSPECIFIED("RESOURCE_TYPE_UNSPECIFIED"),
    
    COMPUTE("RESOURCE_TYPE_COMPUTE"),
    
    STORAGE("RESOURCE_TYPE_STORAGE"),
    
    NETWORK("RESOURCE_TYPE_NETWORK");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_URI = "resourceUri";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URI)
  private String resourceUri;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public SapDiscoveryResource() {
  }

  public SapDiscoveryResource instanceProperties(SapDiscoveryResourceInstanceProperties instanceProperties) {
    this.instanceProperties = instanceProperties;
    return this;
  }

  /**
   * Get instanceProperties
   * @return instanceProperties
   */
  @javax.annotation.Nullable
  public SapDiscoveryResourceInstanceProperties getInstanceProperties() {
    return instanceProperties;
  }

  public void setInstanceProperties(SapDiscoveryResourceInstanceProperties instanceProperties) {
    this.instanceProperties = instanceProperties;
  }


  public SapDiscoveryResource relatedResources(List<String> relatedResources) {
    this.relatedResources = relatedResources;
    return this;
  }

  public SapDiscoveryResource addRelatedResourcesItem(String relatedResourcesItem) {
    if (this.relatedResources == null) {
      this.relatedResources = new ArrayList<>();
    }
    this.relatedResources.add(relatedResourcesItem);
    return this;
  }

  /**
   * Optional. A list of resource URIs related to this resource.
   * @return relatedResources
   */
  @javax.annotation.Nullable
  public List<String> getRelatedResources() {
    return relatedResources;
  }

  public void setRelatedResources(List<String> relatedResources) {
    this.relatedResources = relatedResources;
  }


  public SapDiscoveryResource resourceKind(ResourceKindEnum resourceKind) {
    this.resourceKind = resourceKind;
    return this;
  }

  /**
   * Required. ComputeInstance, ComputeDisk, VPC, Bare Metal server, etc.
   * @return resourceKind
   */
  @javax.annotation.Nullable
  public ResourceKindEnum getResourceKind() {
    return resourceKind;
  }

  public void setResourceKind(ResourceKindEnum resourceKind) {
    this.resourceKind = resourceKind;
  }


  public SapDiscoveryResource resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Required. The type of this resource.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public SapDiscoveryResource resourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
    return this;
  }

  /**
   * Required. URI of the resource, includes project, location, and name.
   * @return resourceUri
   */
  @javax.annotation.Nullable
  public String getResourceUri() {
    return resourceUri;
  }

  public void setResourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
  }


  public SapDiscoveryResource updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Required. Unix timestamp of when this resource last had its discovery data updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SapDiscoveryResource sapDiscoveryResource = (SapDiscoveryResource) o;
    return Objects.equals(this.instanceProperties, sapDiscoveryResource.instanceProperties) &&
        Objects.equals(this.relatedResources, sapDiscoveryResource.relatedResources) &&
        Objects.equals(this.resourceKind, sapDiscoveryResource.resourceKind) &&
        Objects.equals(this.resourceType, sapDiscoveryResource.resourceType) &&
        Objects.equals(this.resourceUri, sapDiscoveryResource.resourceUri) &&
        Objects.equals(this.updateTime, sapDiscoveryResource.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceProperties, relatedResources, resourceKind, resourceType, resourceUri, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SapDiscoveryResource {\n");
    sb.append("    instanceProperties: ").append(toIndentedString(instanceProperties)).append("\n");
    sb.append("    relatedResources: ").append(toIndentedString(relatedResources)).append("\n");
    sb.append("    resourceKind: ").append(toIndentedString(resourceKind)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceUri: ").append(toIndentedString(resourceUri)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceProperties");
    openapiFields.add("relatedResources");
    openapiFields.add("resourceKind");
    openapiFields.add("resourceType");
    openapiFields.add("resourceUri");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SapDiscoveryResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SapDiscoveryResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SapDiscoveryResource is not found in the empty JSON string", SapDiscoveryResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SapDiscoveryResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SapDiscoveryResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `instanceProperties`
      if (jsonObj.get("instanceProperties") != null && !jsonObj.get("instanceProperties").isJsonNull()) {
        SapDiscoveryResourceInstanceProperties.validateJsonElement(jsonObj.get("instanceProperties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relatedResources") != null && !jsonObj.get("relatedResources").isJsonNull() && !jsonObj.get("relatedResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedResources` to be an array in the JSON string but got `%s`", jsonObj.get("relatedResources").toString()));
      }
      if ((jsonObj.get("resourceKind") != null && !jsonObj.get("resourceKind").isJsonNull()) && !jsonObj.get("resourceKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceKind").toString()));
      }
      // validate the optional field `resourceKind`
      if (jsonObj.get("resourceKind") != null && !jsonObj.get("resourceKind").isJsonNull()) {
        ResourceKindEnum.validateJsonElement(jsonObj.get("resourceKind"));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        ResourceTypeEnum.validateJsonElement(jsonObj.get("resourceType"));
      }
      if ((jsonObj.get("resourceUri") != null && !jsonObj.get("resourceUri").isJsonNull()) && !jsonObj.get("resourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUri").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SapDiscoveryResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SapDiscoveryResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SapDiscoveryResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SapDiscoveryResource.class));

       return (TypeAdapter<T>) new TypeAdapter<SapDiscoveryResource>() {
           @Override
           public void write(JsonWriter out, SapDiscoveryResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SapDiscoveryResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SapDiscoveryResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SapDiscoveryResource
   * @throws IOException if the JSON string is invalid with respect to SapDiscoveryResource
   */
  public static SapDiscoveryResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SapDiscoveryResource.class);
  }

  /**
   * Convert an instance of SapDiscoveryResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

