/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SapDiscoveryComponent;
import org.openapitools.client.model.SapDiscoveryMetadata;
import org.openapitools.client.model.SapDiscoveryWorkloadProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The schema of SAP system discovery data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SapDiscovery {
  public static final String SERIALIZED_NAME_APPLICATION_LAYER = "applicationLayer";
  @SerializedName(SERIALIZED_NAME_APPLICATION_LAYER)
  private SapDiscoveryComponent applicationLayer;

  public static final String SERIALIZED_NAME_DATABASE_LAYER = "databaseLayer";
  @SerializedName(SERIALIZED_NAME_DATABASE_LAYER)
  private SapDiscoveryComponent databaseLayer;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private SapDiscoveryMetadata metadata;

  public static final String SERIALIZED_NAME_PROJECT_NUMBER = "projectNumber";
  @SerializedName(SERIALIZED_NAME_PROJECT_NUMBER)
  private String projectNumber;

  public static final String SERIALIZED_NAME_SYSTEM_ID = "systemId";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
  private String systemId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WORKLOAD_PROPERTIES = "workloadProperties";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_PROPERTIES)
  private SapDiscoveryWorkloadProperties workloadProperties;

  public SapDiscovery() {
  }

  public SapDiscovery(
     String systemId
  ) {
    this();
    this.systemId = systemId;
  }

  public SapDiscovery applicationLayer(SapDiscoveryComponent applicationLayer) {
    this.applicationLayer = applicationLayer;
    return this;
  }

  /**
   * Get applicationLayer
   * @return applicationLayer
   */
  @javax.annotation.Nullable
  public SapDiscoveryComponent getApplicationLayer() {
    return applicationLayer;
  }

  public void setApplicationLayer(SapDiscoveryComponent applicationLayer) {
    this.applicationLayer = applicationLayer;
  }


  public SapDiscovery databaseLayer(SapDiscoveryComponent databaseLayer) {
    this.databaseLayer = databaseLayer;
    return this;
  }

  /**
   * Get databaseLayer
   * @return databaseLayer
   */
  @javax.annotation.Nullable
  public SapDiscoveryComponent getDatabaseLayer() {
    return databaseLayer;
  }

  public void setDatabaseLayer(SapDiscoveryComponent databaseLayer) {
    this.databaseLayer = databaseLayer;
  }


  public SapDiscovery metadata(SapDiscoveryMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public SapDiscoveryMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(SapDiscoveryMetadata metadata) {
    this.metadata = metadata;
  }


  public SapDiscovery projectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  /**
   * Optional. The GCP project number that this SapSystem belongs to.
   * @return projectNumber
   */
  @javax.annotation.Nullable
  public String getProjectNumber() {
    return projectNumber;
  }

  public void setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
  }


  /**
   * Output only. A combination of database SID, database instance URI and tenant DB name to make a unique identifier per-system.
   * @return systemId
   */
  @javax.annotation.Nullable
  public String getSystemId() {
    return systemId;
  }



  public SapDiscovery updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Required. Unix timestamp this system has been updated last.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public SapDiscovery workloadProperties(SapDiscoveryWorkloadProperties workloadProperties) {
    this.workloadProperties = workloadProperties;
    return this;
  }

  /**
   * Get workloadProperties
   * @return workloadProperties
   */
  @javax.annotation.Nullable
  public SapDiscoveryWorkloadProperties getWorkloadProperties() {
    return workloadProperties;
  }

  public void setWorkloadProperties(SapDiscoveryWorkloadProperties workloadProperties) {
    this.workloadProperties = workloadProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SapDiscovery sapDiscovery = (SapDiscovery) o;
    return Objects.equals(this.applicationLayer, sapDiscovery.applicationLayer) &&
        Objects.equals(this.databaseLayer, sapDiscovery.databaseLayer) &&
        Objects.equals(this.metadata, sapDiscovery.metadata) &&
        Objects.equals(this.projectNumber, sapDiscovery.projectNumber) &&
        Objects.equals(this.systemId, sapDiscovery.systemId) &&
        Objects.equals(this.updateTime, sapDiscovery.updateTime) &&
        Objects.equals(this.workloadProperties, sapDiscovery.workloadProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationLayer, databaseLayer, metadata, projectNumber, systemId, updateTime, workloadProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SapDiscovery {\n");
    sb.append("    applicationLayer: ").append(toIndentedString(applicationLayer)).append("\n");
    sb.append("    databaseLayer: ").append(toIndentedString(databaseLayer)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    projectNumber: ").append(toIndentedString(projectNumber)).append("\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    workloadProperties: ").append(toIndentedString(workloadProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationLayer");
    openapiFields.add("databaseLayer");
    openapiFields.add("metadata");
    openapiFields.add("projectNumber");
    openapiFields.add("systemId");
    openapiFields.add("updateTime");
    openapiFields.add("workloadProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SapDiscovery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SapDiscovery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SapDiscovery is not found in the empty JSON string", SapDiscovery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SapDiscovery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SapDiscovery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationLayer`
      if (jsonObj.get("applicationLayer") != null && !jsonObj.get("applicationLayer").isJsonNull()) {
        SapDiscoveryComponent.validateJsonElement(jsonObj.get("applicationLayer"));
      }
      // validate the optional field `databaseLayer`
      if (jsonObj.get("databaseLayer") != null && !jsonObj.get("databaseLayer").isJsonNull()) {
        SapDiscoveryComponent.validateJsonElement(jsonObj.get("databaseLayer"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        SapDiscoveryMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("projectNumber") != null && !jsonObj.get("projectNumber").isJsonNull()) && !jsonObj.get("projectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectNumber").toString()));
      }
      if ((jsonObj.get("systemId") != null && !jsonObj.get("systemId").isJsonNull()) && !jsonObj.get("systemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `workloadProperties`
      if (jsonObj.get("workloadProperties") != null && !jsonObj.get("workloadProperties").isJsonNull()) {
        SapDiscoveryWorkloadProperties.validateJsonElement(jsonObj.get("workloadProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SapDiscovery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SapDiscovery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SapDiscovery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SapDiscovery.class));

       return (TypeAdapter<T>) new TypeAdapter<SapDiscovery>() {
           @Override
           public void write(JsonWriter out, SapDiscovery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SapDiscovery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SapDiscovery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SapDiscovery
   * @throws IOException if the JSON string is invalid with respect to SapDiscovery
   */
  public static SapDiscovery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SapDiscovery.class);
  }

  /**
   * Convert an instance of SapDiscovery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

