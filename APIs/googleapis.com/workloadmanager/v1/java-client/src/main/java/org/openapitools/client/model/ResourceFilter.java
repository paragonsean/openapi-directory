/*
 * Workload Manager API
 * Workload Manager is a service that provides tooling for enterprise workloads to automate the deployment and validation of your workloads against best practices and recommendations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GceInstanceFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing resource filters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:45.257009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceFilter {
  public static final String SERIALIZED_NAME_GCE_INSTANCE_FILTER = "gceInstanceFilter";
  @SerializedName(SERIALIZED_NAME_GCE_INSTANCE_FILTER)
  private GceInstanceFilter gceInstanceFilter;

  public static final String SERIALIZED_NAME_INCLUSION_LABELS = "inclusionLabels";
  @SerializedName(SERIALIZED_NAME_INCLUSION_LABELS)
  private Map<String, String> inclusionLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_ID_PATTERNS = "resourceIdPatterns";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID_PATTERNS)
  private List<String> resourceIdPatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public ResourceFilter() {
  }

  public ResourceFilter gceInstanceFilter(GceInstanceFilter gceInstanceFilter) {
    this.gceInstanceFilter = gceInstanceFilter;
    return this;
  }

  /**
   * Get gceInstanceFilter
   * @return gceInstanceFilter
   */
  @javax.annotation.Nullable
  public GceInstanceFilter getGceInstanceFilter() {
    return gceInstanceFilter;
  }

  public void setGceInstanceFilter(GceInstanceFilter gceInstanceFilter) {
    this.gceInstanceFilter = gceInstanceFilter;
  }


  public ResourceFilter inclusionLabels(Map<String, String> inclusionLabels) {
    this.inclusionLabels = inclusionLabels;
    return this;
  }

  public ResourceFilter putInclusionLabelsItem(String key, String inclusionLabelsItem) {
    if (this.inclusionLabels == null) {
      this.inclusionLabels = new HashMap<>();
    }
    this.inclusionLabels.put(key, inclusionLabelsItem);
    return this;
  }

  /**
   * The label used for filter resource
   * @return inclusionLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getInclusionLabels() {
    return inclusionLabels;
  }

  public void setInclusionLabels(Map<String, String> inclusionLabels) {
    this.inclusionLabels = inclusionLabels;
  }


  public ResourceFilter resourceIdPatterns(List<String> resourceIdPatterns) {
    this.resourceIdPatterns = resourceIdPatterns;
    return this;
  }

  public ResourceFilter addResourceIdPatternsItem(String resourceIdPatternsItem) {
    if (this.resourceIdPatterns == null) {
      this.resourceIdPatterns = new ArrayList<>();
    }
    this.resourceIdPatterns.add(resourceIdPatternsItem);
    return this;
  }

  /**
   * The id pattern for filter resource
   * @return resourceIdPatterns
   */
  @javax.annotation.Nullable
  public List<String> getResourceIdPatterns() {
    return resourceIdPatterns;
  }

  public void setResourceIdPatterns(List<String> resourceIdPatterns) {
    this.resourceIdPatterns = resourceIdPatterns;
  }


  public ResourceFilter scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public ResourceFilter addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * The scopes of evaluation resource
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceFilter resourceFilter = (ResourceFilter) o;
    return Objects.equals(this.gceInstanceFilter, resourceFilter.gceInstanceFilter) &&
        Objects.equals(this.inclusionLabels, resourceFilter.inclusionLabels) &&
        Objects.equals(this.resourceIdPatterns, resourceFilter.resourceIdPatterns) &&
        Objects.equals(this.scopes, resourceFilter.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gceInstanceFilter, inclusionLabels, resourceIdPatterns, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceFilter {\n");
    sb.append("    gceInstanceFilter: ").append(toIndentedString(gceInstanceFilter)).append("\n");
    sb.append("    inclusionLabels: ").append(toIndentedString(inclusionLabels)).append("\n");
    sb.append("    resourceIdPatterns: ").append(toIndentedString(resourceIdPatterns)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gceInstanceFilter");
    openapiFields.add("inclusionLabels");
    openapiFields.add("resourceIdPatterns");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceFilter is not found in the empty JSON string", ResourceFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gceInstanceFilter`
      if (jsonObj.get("gceInstanceFilter") != null && !jsonObj.get("gceInstanceFilter").isJsonNull()) {
        GceInstanceFilter.validateJsonElement(jsonObj.get("gceInstanceFilter"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceIdPatterns") != null && !jsonObj.get("resourceIdPatterns").isJsonNull() && !jsonObj.get("resourceIdPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIdPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("resourceIdPatterns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceFilter>() {
           @Override
           public void write(JsonWriter out, ResourceFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceFilter
   * @throws IOException if the JSON string is invalid with respect to ResourceFilter
   */
  public static ResourceFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceFilter.class);
  }

  /**
   * Convert an instance of ResourceFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

