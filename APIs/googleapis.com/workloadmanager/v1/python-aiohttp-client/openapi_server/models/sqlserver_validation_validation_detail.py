# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sqlserver_validation_details import SqlserverValidationDetails
from openapi_server import util


class SqlserverValidationValidationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: List[SqlserverValidationDetails]=None, type: str=None):
        """SqlserverValidationValidationDetail - a model defined in OpenAPI

        :param details: The details of this SqlserverValidationValidationDetail.
        :param type: The type of this SqlserverValidationValidationDetail.
        """
        self.openapi_types = {
            'details': List[SqlserverValidationDetails],
            'type': str
        }

        self.attribute_map = {
            'details': 'details',
            'type': 'type'
        }

        self._details = details
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlserverValidationValidationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlserverValidationValidationDetail of this SqlserverValidationValidationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this SqlserverValidationValidationDetail.

        Required. Details wraps map that represents collected data names and values.

        :return: The details of this SqlserverValidationValidationDetail.
        :rtype: List[SqlserverValidationDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SqlserverValidationValidationDetail.

        Required. Details wraps map that represents collected data names and values.

        :param details: The details of this SqlserverValidationValidationDetail.
        :type details: List[SqlserverValidationDetails]
        """

        self._details = details

    @property
    def type(self):
        """Gets the type of this SqlserverValidationValidationDetail.

        Optional. The Sqlserver system that the validation data is from.

        :return: The type of this SqlserverValidationValidationDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SqlserverValidationValidationDetail.

        Optional. The Sqlserver system that the validation data is from.

        :param type: The type of this SqlserverValidationValidationDetail.
        :type type: str
        """
        allowed_values = ["SQLSERVER_VALIDATION_TYPE_UNSPECIFIED", "OS", "DB_LOG_DISK_SEPARATION", "DB_MAX_PARALLELISM", "DB_CXPACKET_WAITS", "DB_TRANSACTION_LOG_HANDLING", "DB_VIRTUAL_LOG_FILE_COUNT", "DB_BUFFER_POOL_EXTENSION", "DB_MAX_SERVER_MEMORY", "INSTANCE_METRICS", "DB_INDEX_FRAGMENTATION", "DB_TABLE_INDEX_COMPRESSION", "DB_BACKUP_POLICY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
