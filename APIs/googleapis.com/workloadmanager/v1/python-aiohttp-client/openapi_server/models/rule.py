# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, error_message: str=None, name: str=None, primary_category: str=None, remediation: str=None, revision_id: str=None, secondary_category: str=None, severity: str=None, tags: List[str]=None, uri: str=None):
        """Rule - a model defined in OpenAPI

        :param description: The description of this Rule.
        :param display_name: The display_name of this Rule.
        :param error_message: The error_message of this Rule.
        :param name: The name of this Rule.
        :param primary_category: The primary_category of this Rule.
        :param remediation: The remediation of this Rule.
        :param revision_id: The revision_id of this Rule.
        :param secondary_category: The secondary_category of this Rule.
        :param severity: The severity of this Rule.
        :param tags: The tags of this Rule.
        :param uri: The uri of this Rule.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'error_message': str,
            'name': str,
            'primary_category': str,
            'remediation': str,
            'revision_id': str,
            'secondary_category': str,
            'severity': str,
            'tags': List[str],
            'uri': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'error_message': 'errorMessage',
            'name': 'name',
            'primary_category': 'primaryCategory',
            'remediation': 'remediation',
            'revision_id': 'revisionId',
            'secondary_category': 'secondaryCategory',
            'severity': 'severity',
            'tags': 'tags',
            'uri': 'uri'
        }

        self._description = description
        self._display_name = display_name
        self._error_message = error_message
        self._name = name
        self._primary_category = primary_category
        self._remediation = remediation
        self._revision_id = revision_id
        self._secondary_category = secondary_category
        self._severity = severity
        self._tags = tags
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Rule.

        descrite rule in plain language

        :return: The description of this Rule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rule.

        descrite rule in plain language

        :param description: The description of this Rule.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Rule.

        the name display in UI

        :return: The display_name of this Rule.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Rule.

        the name display in UI

        :param display_name: The display_name of this Rule.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error_message(self):
        """Gets the error_message of this Rule.

        the message template for rule

        :return: The error_message of this Rule.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Rule.

        the message template for rule

        :param error_message: The error_message of this Rule.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def name(self):
        """Gets the name of this Rule.

        rule name

        :return: The name of this Rule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.

        rule name

        :param name: The name of this Rule.
        :type name: str
        """

        self._name = name

    @property
    def primary_category(self):
        """Gets the primary_category of this Rule.

        the primary category

        :return: The primary_category of this Rule.
        :rtype: str
        """
        return self._primary_category

    @primary_category.setter
    def primary_category(self, primary_category):
        """Sets the primary_category of this Rule.

        the primary category

        :param primary_category: The primary_category of this Rule.
        :type primary_category: str
        """

        self._primary_category = primary_category

    @property
    def remediation(self):
        """Gets the remediation of this Rule.

        the remediation for the rule

        :return: The remediation of this Rule.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this Rule.

        the remediation for the rule

        :param remediation: The remediation of this Rule.
        :type remediation: str
        """

        self._remediation = remediation

    @property
    def revision_id(self):
        """Gets the revision_id of this Rule.

        Output only. the version of the rule

        :return: The revision_id of this Rule.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Rule.

        Output only. the version of the rule

        :param revision_id: The revision_id of this Rule.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def secondary_category(self):
        """Gets the secondary_category of this Rule.

        the secondary category

        :return: The secondary_category of this Rule.
        :rtype: str
        """
        return self._secondary_category

    @secondary_category.setter
    def secondary_category(self, secondary_category):
        """Sets the secondary_category of this Rule.

        the secondary category

        :param secondary_category: The secondary_category of this Rule.
        :type secondary_category: str
        """

        self._secondary_category = secondary_category

    @property
    def severity(self):
        """Gets the severity of this Rule.

        the severity of the rule

        :return: The severity of this Rule.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Rule.

        the severity of the rule

        :param severity: The severity of this Rule.
        :type severity: str
        """

        self._severity = severity

    @property
    def tags(self):
        """Gets the tags of this Rule.

        List of user-defined tags

        :return: The tags of this Rule.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Rule.

        List of user-defined tags

        :param tags: The tags of this Rule.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def uri(self):
        """Gets the uri of this Rule.

        the docuement url for the rule

        :return: The uri of this Rule.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Rule.

        the docuement url for the rule

        :param uri: The uri of this Rule.
        :type uri: str
        """

        self._uri = uri
