# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sqlserver_validation_validation_detail import SqlserverValidationValidationDetail
from openapi_server import util


class SqlserverValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_version: str=None, instance: str=None, project_id: str=None, validation_details: List[SqlserverValidationValidationDetail]=None):
        """SqlserverValidation - a model defined in OpenAPI

        :param agent_version: The agent_version of this SqlserverValidation.
        :param instance: The instance of this SqlserverValidation.
        :param project_id: The project_id of this SqlserverValidation.
        :param validation_details: The validation_details of this SqlserverValidation.
        """
        self.openapi_types = {
            'agent_version': str,
            'instance': str,
            'project_id': str,
            'validation_details': List[SqlserverValidationValidationDetail]
        }

        self.attribute_map = {
            'agent_version': 'agentVersion',
            'instance': 'instance',
            'project_id': 'projectId',
            'validation_details': 'validationDetails'
        }

        self._agent_version = agent_version
        self._instance = instance
        self._project_id = project_id
        self._validation_details = validation_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlserverValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlserverValidation of this SqlserverValidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_version(self):
        """Gets the agent_version of this SqlserverValidation.

        Optional. The agent version collected this data point

        :return: The agent_version of this SqlserverValidation.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this SqlserverValidation.

        Optional. The agent version collected this data point

        :param agent_version: The agent_version of this SqlserverValidation.
        :type agent_version: str
        """

        self._agent_version = agent_version

    @property
    def instance(self):
        """Gets the instance of this SqlserverValidation.

        Required. The instance_name of the instance that the Insight data comes from. According to https://linter.aip.dev/122/name-suffix: field names should not use the _name suffix unless the field would be ambiguous without it.

        :return: The instance of this SqlserverValidation.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this SqlserverValidation.

        Required. The instance_name of the instance that the Insight data comes from. According to https://linter.aip.dev/122/name-suffix: field names should not use the _name suffix unless the field would be ambiguous without it.

        :param instance: The instance of this SqlserverValidation.
        :type instance: str
        """

        self._instance = instance

    @property
    def project_id(self):
        """Gets the project_id of this SqlserverValidation.

        Required. The project_id of the cloud project that the Insight data comes from.

        :return: The project_id of this SqlserverValidation.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SqlserverValidation.

        Required. The project_id of the cloud project that the Insight data comes from.

        :param project_id: The project_id of this SqlserverValidation.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def validation_details(self):
        """Gets the validation_details of this SqlserverValidation.

        Optional. A list of SqlServer validation metrics data.

        :return: The validation_details of this SqlserverValidation.
        :rtype: List[SqlserverValidationValidationDetail]
        """
        return self._validation_details

    @validation_details.setter
    def validation_details(self, validation_details):
        """Sets the validation_details of this SqlserverValidation.

        Optional. A list of SqlServer validation metrics data.

        :param validation_details: The validation_details of this SqlserverValidation.
        :type validation_details: List[SqlserverValidationValidationDetail]
        """

        self._validation_details = validation_details
