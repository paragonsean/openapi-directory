# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource import Resource
from openapi_server.models.violation_details import ViolationDetails
from openapi_server import util


class ExecutionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documentation_url: str=None, resource: Resource=None, rule: str=None, severity: str=None, violation_details: ViolationDetails=None, violation_message: str=None):
        """ExecutionResult - a model defined in OpenAPI

        :param documentation_url: The documentation_url of this ExecutionResult.
        :param resource: The resource of this ExecutionResult.
        :param rule: The rule of this ExecutionResult.
        :param severity: The severity of this ExecutionResult.
        :param violation_details: The violation_details of this ExecutionResult.
        :param violation_message: The violation_message of this ExecutionResult.
        """
        self.openapi_types = {
            'documentation_url': str,
            'resource': Resource,
            'rule': str,
            'severity': str,
            'violation_details': ViolationDetails,
            'violation_message': str
        }

        self.attribute_map = {
            'documentation_url': 'documentationUrl',
            'resource': 'resource',
            'rule': 'rule',
            'severity': 'severity',
            'violation_details': 'violationDetails',
            'violation_message': 'violationMessage'
        }

        self._documentation_url = documentation_url
        self._resource = resource
        self._rule = rule
        self._severity = severity
        self._violation_details = violation_details
        self._violation_message = violation_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionResult of this ExecutionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documentation_url(self):
        """Gets the documentation_url of this ExecutionResult.

        the document url of the rule

        :return: The documentation_url of this ExecutionResult.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this ExecutionResult.

        the document url of the rule

        :param documentation_url: The documentation_url of this ExecutionResult.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def resource(self):
        """Gets the resource of this ExecutionResult.


        :return: The resource of this ExecutionResult.
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ExecutionResult.


        :param resource: The resource of this ExecutionResult.
        :type resource: Resource
        """

        self._resource = resource

    @property
    def rule(self):
        """Gets the rule of this ExecutionResult.

        the rule which violate in execution

        :return: The rule of this ExecutionResult.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ExecutionResult.

        the rule which violate in execution

        :param rule: The rule of this ExecutionResult.
        :type rule: str
        """

        self._rule = rule

    @property
    def severity(self):
        """Gets the severity of this ExecutionResult.

        severity of violation

        :return: The severity of this ExecutionResult.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ExecutionResult.

        severity of violation

        :param severity: The severity of this ExecutionResult.
        :type severity: str
        """

        self._severity = severity

    @property
    def violation_details(self):
        """Gets the violation_details of this ExecutionResult.


        :return: The violation_details of this ExecutionResult.
        :rtype: ViolationDetails
        """
        return self._violation_details

    @violation_details.setter
    def violation_details(self, violation_details):
        """Sets the violation_details of this ExecutionResult.


        :param violation_details: The violation_details of this ExecutionResult.
        :type violation_details: ViolationDetails
        """

        self._violation_details = violation_details

    @property
    def violation_message(self):
        """Gets the violation_message of this ExecutionResult.

        the violation message of an execution

        :return: The violation_message of this ExecutionResult.
        :rtype: str
        """
        return self._violation_message

    @violation_message.setter
    def violation_message(self, violation_message):
        """Sets the violation_message of this ExecutionResult.

        the violation message of an execution

        :param violation_message: The violation_message of this ExecutionResult.
        :type violation_message: str
        """

        self._violation_message = violation_message
