# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, vm: str=None):
        """LoadBalancerServer - a model defined in OpenAPI

        :param ip: The ip of this LoadBalancerServer.
        :param vm: The vm of this LoadBalancerServer.
        """
        self.openapi_types = {
            'ip': str,
            'vm': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'vm': 'vm'
        }

        self._ip = ip
        self._vm = vm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerServer of this LoadBalancerServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this LoadBalancerServer.

        Output only. The IP address

        :return: The ip of this LoadBalancerServer.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this LoadBalancerServer.

        Output only. The IP address

        :param ip: The ip of this LoadBalancerServer.
        :type ip: str
        """

        self._ip = ip

    @property
    def vm(self):
        """Gets the vm of this LoadBalancerServer.

        Output only. The VM name

        :return: The vm of this LoadBalancerServer.
        :rtype: str
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this LoadBalancerServer.

        Output only. The VM name

        :param vm: The vm of this LoadBalancerServer.
        :type vm: str
        """

        self._vm = vm
