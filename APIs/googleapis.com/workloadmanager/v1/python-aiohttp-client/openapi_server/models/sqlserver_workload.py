# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.availability_group import AvailabilityGroup
from openapi_server.models.cluster import Cluster
from openapi_server.models.database import Database
from openapi_server.models.load_balancer_server import LoadBalancerServer
from openapi_server import util


class SqlserverWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ags: List[AvailabilityGroup]=None, cluster: Cluster=None, databases: List[Database]=None, load_balancer_server: LoadBalancerServer=None):
        """SqlserverWorkload - a model defined in OpenAPI

        :param ags: The ags of this SqlserverWorkload.
        :param cluster: The cluster of this SqlserverWorkload.
        :param databases: The databases of this SqlserverWorkload.
        :param load_balancer_server: The load_balancer_server of this SqlserverWorkload.
        """
        self.openapi_types = {
            'ags': List[AvailabilityGroup],
            'cluster': Cluster,
            'databases': List[Database],
            'load_balancer_server': LoadBalancerServer
        }

        self.attribute_map = {
            'ags': 'ags',
            'cluster': 'cluster',
            'databases': 'databases',
            'load_balancer_server': 'loadBalancerServer'
        }

        self._ags = ags
        self._cluster = cluster
        self._databases = databases
        self._load_balancer_server = load_balancer_server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlserverWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlserverWorkload of this SqlserverWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ags(self):
        """Gets the ags of this SqlserverWorkload.

        Output only. The availability groups for sqlserver

        :return: The ags of this SqlserverWorkload.
        :rtype: List[AvailabilityGroup]
        """
        return self._ags

    @ags.setter
    def ags(self, ags):
        """Sets the ags of this SqlserverWorkload.

        Output only. The availability groups for sqlserver

        :param ags: The ags of this SqlserverWorkload.
        :type ags: List[AvailabilityGroup]
        """

        self._ags = ags

    @property
    def cluster(self):
        """Gets the cluster of this SqlserverWorkload.


        :return: The cluster of this SqlserverWorkload.
        :rtype: Cluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SqlserverWorkload.


        :param cluster: The cluster of this SqlserverWorkload.
        :type cluster: Cluster
        """

        self._cluster = cluster

    @property
    def databases(self):
        """Gets the databases of this SqlserverWorkload.

        Output only. The databases for sqlserver

        :return: The databases of this SqlserverWorkload.
        :rtype: List[Database]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this SqlserverWorkload.

        Output only. The databases for sqlserver

        :param databases: The databases of this SqlserverWorkload.
        :type databases: List[Database]
        """

        self._databases = databases

    @property
    def load_balancer_server(self):
        """Gets the load_balancer_server of this SqlserverWorkload.


        :return: The load_balancer_server of this SqlserverWorkload.
        :rtype: LoadBalancerServer
        """
        return self._load_balancer_server

    @load_balancer_server.setter
    def load_balancer_server(self, load_balancer_server):
        """Sets the load_balancer_server of this SqlserverWorkload.


        :param load_balancer_server: The load_balancer_server of this SqlserverWorkload.
        :type load_balancer_server: LoadBalancerServer
        """

        self._load_balancer_server = load_balancer_server
