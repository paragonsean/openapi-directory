# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.layer import Layer
from openapi_server.models.sap_workload import SapWorkload
from openapi_server.models.sqlserver_workload import SqlserverWorkload
from openapi_server.models.three_tier_workload import ThreeTierWorkload
from openapi_server import util


class WorkloadProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: Layer=None, ascs: Layer=None, database: Layer=None, labels: Dict[str, str]=None, name: str=None, refreshed_time: str=None, sap_workload: SapWorkload=None, sqlserver_workload: SqlserverWorkload=None, state: str=None, three_tier_workload: ThreeTierWorkload=None, workload_type: str=None):
        """WorkloadProfile - a model defined in OpenAPI

        :param application: The application of this WorkloadProfile.
        :param ascs: The ascs of this WorkloadProfile.
        :param database: The database of this WorkloadProfile.
        :param labels: The labels of this WorkloadProfile.
        :param name: The name of this WorkloadProfile.
        :param refreshed_time: The refreshed_time of this WorkloadProfile.
        :param sap_workload: The sap_workload of this WorkloadProfile.
        :param sqlserver_workload: The sqlserver_workload of this WorkloadProfile.
        :param state: The state of this WorkloadProfile.
        :param three_tier_workload: The three_tier_workload of this WorkloadProfile.
        :param workload_type: The workload_type of this WorkloadProfile.
        """
        self.openapi_types = {
            'application': Layer,
            'ascs': Layer,
            'database': Layer,
            'labels': Dict[str, str],
            'name': str,
            'refreshed_time': str,
            'sap_workload': SapWorkload,
            'sqlserver_workload': SqlserverWorkload,
            'state': str,
            'three_tier_workload': ThreeTierWorkload,
            'workload_type': str
        }

        self.attribute_map = {
            'application': 'application',
            'ascs': 'ascs',
            'database': 'database',
            'labels': 'labels',
            'name': 'name',
            'refreshed_time': 'refreshedTime',
            'sap_workload': 'sapWorkload',
            'sqlserver_workload': 'sqlserverWorkload',
            'state': 'state',
            'three_tier_workload': 'threeTierWorkload',
            'workload_type': 'workloadType'
        }

        self._application = application
        self._ascs = ascs
        self._database = database
        self._labels = labels
        self._name = name
        self._refreshed_time = refreshed_time
        self._sap_workload = sap_workload
        self._sqlserver_workload = sqlserver_workload
        self._state = state
        self._three_tier_workload = three_tier_workload
        self._workload_type = workload_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadProfile of this WorkloadProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this WorkloadProfile.


        :return: The application of this WorkloadProfile.
        :rtype: Layer
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this WorkloadProfile.


        :param application: The application of this WorkloadProfile.
        :type application: Layer
        """

        self._application = application

    @property
    def ascs(self):
        """Gets the ascs of this WorkloadProfile.


        :return: The ascs of this WorkloadProfile.
        :rtype: Layer
        """
        return self._ascs

    @ascs.setter
    def ascs(self, ascs):
        """Sets the ascs of this WorkloadProfile.


        :param ascs: The ascs of this WorkloadProfile.
        :type ascs: Layer
        """

        self._ascs = ascs

    @property
    def database(self):
        """Gets the database of this WorkloadProfile.


        :return: The database of this WorkloadProfile.
        :rtype: Layer
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this WorkloadProfile.


        :param database: The database of this WorkloadProfile.
        :type database: Layer
        """

        self._database = database

    @property
    def labels(self):
        """Gets the labels of this WorkloadProfile.

        Optional. such as name, description, version. More example can be found in deployment

        :return: The labels of this WorkloadProfile.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkloadProfile.

        Optional. such as name, description, version. More example can be found in deployment

        :param labels: The labels of this WorkloadProfile.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this WorkloadProfile.

        Identifier. name of resource names have the form 'projects/{project_id}/workloads/{workload_id}'

        :return: The name of this WorkloadProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkloadProfile.

        Identifier. name of resource names have the form 'projects/{project_id}/workloads/{workload_id}'

        :param name: The name of this WorkloadProfile.
        :type name: str
        """

        self._name = name

    @property
    def refreshed_time(self):
        """Gets the refreshed_time of this WorkloadProfile.

        Required. time when the workload data was refreshed

        :return: The refreshed_time of this WorkloadProfile.
        :rtype: str
        """
        return self._refreshed_time

    @refreshed_time.setter
    def refreshed_time(self, refreshed_time):
        """Sets the refreshed_time of this WorkloadProfile.

        Required. time when the workload data was refreshed

        :param refreshed_time: The refreshed_time of this WorkloadProfile.
        :type refreshed_time: str
        """

        self._refreshed_time = refreshed_time

    @property
    def sap_workload(self):
        """Gets the sap_workload of this WorkloadProfile.


        :return: The sap_workload of this WorkloadProfile.
        :rtype: SapWorkload
        """
        return self._sap_workload

    @sap_workload.setter
    def sap_workload(self, sap_workload):
        """Sets the sap_workload of this WorkloadProfile.


        :param sap_workload: The sap_workload of this WorkloadProfile.
        :type sap_workload: SapWorkload
        """

        self._sap_workload = sap_workload

    @property
    def sqlserver_workload(self):
        """Gets the sqlserver_workload of this WorkloadProfile.


        :return: The sqlserver_workload of this WorkloadProfile.
        :rtype: SqlserverWorkload
        """
        return self._sqlserver_workload

    @sqlserver_workload.setter
    def sqlserver_workload(self, sqlserver_workload):
        """Sets the sqlserver_workload of this WorkloadProfile.


        :param sqlserver_workload: The sqlserver_workload of this WorkloadProfile.
        :type sqlserver_workload: SqlserverWorkload
        """

        self._sqlserver_workload = sqlserver_workload

    @property
    def state(self):
        """Gets the state of this WorkloadProfile.

        Output only. [output only] the current state if a a workload

        :return: The state of this WorkloadProfile.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkloadProfile.

        Output only. [output only] the current state if a a workload

        :param state: The state of this WorkloadProfile.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DEPLOYING", "DESTROYING", "MAINTENANCE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def three_tier_workload(self):
        """Gets the three_tier_workload of this WorkloadProfile.


        :return: The three_tier_workload of this WorkloadProfile.
        :rtype: ThreeTierWorkload
        """
        return self._three_tier_workload

    @three_tier_workload.setter
    def three_tier_workload(self, three_tier_workload):
        """Sets the three_tier_workload of this WorkloadProfile.


        :param three_tier_workload: The three_tier_workload of this WorkloadProfile.
        :type three_tier_workload: ThreeTierWorkload
        """

        self._three_tier_workload = three_tier_workload

    @property
    def workload_type(self):
        """Gets the workload_type of this WorkloadProfile.

        Required. The type of the workload

        :return: The workload_type of this WorkloadProfile.
        :rtype: str
        """
        return self._workload_type

    @workload_type.setter
    def workload_type(self, workload_type):
        """Sets the workload_type of this WorkloadProfile.

        Required. The type of the workload

        :param workload_type: The workload_type of this WorkloadProfile.
        :type workload_type: str
        """
        allowed_values = ["WORKLOAD_TYPE_UNSPECIFIED", "S4_HANA", "SQL_SERVER", "THREE_TIER_WEB_APP"]  # noqa: E501
        if workload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_type` ({0}), must be one of {1}"
                .format(workload_type, allowed_values)
            )

        self._workload_type = workload_type
