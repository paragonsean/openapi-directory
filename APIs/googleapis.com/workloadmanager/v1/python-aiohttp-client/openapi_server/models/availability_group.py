# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailabilityGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, databases: List[str]=None, name: str=None, primary_server: str=None, secondary_servers: List[str]=None):
        """AvailabilityGroup - a model defined in OpenAPI

        :param databases: The databases of this AvailabilityGroup.
        :param name: The name of this AvailabilityGroup.
        :param primary_server: The primary_server of this AvailabilityGroup.
        :param secondary_servers: The secondary_servers of this AvailabilityGroup.
        """
        self.openapi_types = {
            'databases': List[str],
            'name': str,
            'primary_server': str,
            'secondary_servers': List[str]
        }

        self.attribute_map = {
            'databases': 'databases',
            'name': 'name',
            'primary_server': 'primaryServer',
            'secondary_servers': 'secondaryServers'
        }

        self._databases = databases
        self._name = name
        self._primary_server = primary_server
        self._secondary_servers = secondary_servers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailabilityGroup of this AvailabilityGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def databases(self):
        """Gets the databases of this AvailabilityGroup.

        Output only. The databases

        :return: The databases of this AvailabilityGroup.
        :rtype: List[str]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this AvailabilityGroup.

        Output only. The databases

        :param databases: The databases of this AvailabilityGroup.
        :type databases: List[str]
        """

        self._databases = databases

    @property
    def name(self):
        """Gets the name of this AvailabilityGroup.

        Output only. The availability group name

        :return: The name of this AvailabilityGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailabilityGroup.

        Output only. The availability group name

        :param name: The name of this AvailabilityGroup.
        :type name: str
        """

        self._name = name

    @property
    def primary_server(self):
        """Gets the primary_server of this AvailabilityGroup.

        Output only. The primary server

        :return: The primary_server of this AvailabilityGroup.
        :rtype: str
        """
        return self._primary_server

    @primary_server.setter
    def primary_server(self, primary_server):
        """Sets the primary_server of this AvailabilityGroup.

        Output only. The primary server

        :param primary_server: The primary_server of this AvailabilityGroup.
        :type primary_server: str
        """

        self._primary_server = primary_server

    @property
    def secondary_servers(self):
        """Gets the secondary_servers of this AvailabilityGroup.

        Output only. The secondary servers

        :return: The secondary_servers of this AvailabilityGroup.
        :rtype: List[str]
        """
        return self._secondary_servers

    @secondary_servers.setter
    def secondary_servers(self, secondary_servers):
        """Sets the secondary_servers of this AvailabilityGroup.

        Output only. The secondary servers

        :param secondary_servers: The secondary_servers of this AvailabilityGroup.
        :type secondary_servers: List[str]
        """

        self._secondary_servers = secondary_servers
