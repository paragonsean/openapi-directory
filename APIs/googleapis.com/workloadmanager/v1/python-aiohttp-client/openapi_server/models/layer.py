# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance import Instance
from openapi_server import util


class Layer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_type: str=None, database_type: str=None, instances: List[Instance]=None, sid: str=None):
        """Layer - a model defined in OpenAPI

        :param application_type: The application_type of this Layer.
        :param database_type: The database_type of this Layer.
        :param instances: The instances of this Layer.
        :param sid: The sid of this Layer.
        """
        self.openapi_types = {
            'application_type': str,
            'database_type': str,
            'instances': List[Instance],
            'sid': str
        }

        self.attribute_map = {
            'application_type': 'applicationType',
            'database_type': 'databaseType',
            'instances': 'instances',
            'sid': 'sid'
        }

        self._application_type = application_type
        self._database_type = database_type
        self._instances = instances
        self._sid = sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Layer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Layer of this Layer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_type(self):
        """Gets the application_type of this Layer.

        the application layer

        :return: The application_type of this Layer.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this Layer.

        the application layer

        :param application_type: The application_type of this Layer.
        :type application_type: str
        """

        self._application_type = application_type

    @property
    def database_type(self):
        """Gets the database_type of this Layer.

        Optional. the database layer

        :return: The database_type of this Layer.
        :rtype: str
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this Layer.

        Optional. the database layer

        :param database_type: The database_type of this Layer.
        :type database_type: str
        """

        self._database_type = database_type

    @property
    def instances(self):
        """Gets the instances of this Layer.

        Optional. instances in a layer

        :return: The instances of this Layer.
        :rtype: List[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Layer.

        Optional. instances in a layer

        :param instances: The instances of this Layer.
        :type instances: List[Instance]
        """

        self._instances = instances

    @property
    def sid(self):
        """Gets the sid of this Layer.

        Output only. system identification of a layer

        :return: The sid of this Layer.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this Layer.

        Output only. system identification of a layer

        :param sid: The sid of this Layer.
        :type sid: str
        """

        self._sid = sid
