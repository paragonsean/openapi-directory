# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViolationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset: str=None, observed: Dict[str, str]=None, service_account: str=None):
        """ViolationDetails - a model defined in OpenAPI

        :param asset: The asset of this ViolationDetails.
        :param observed: The observed of this ViolationDetails.
        :param service_account: The service_account of this ViolationDetails.
        """
        self.openapi_types = {
            'asset': str,
            'observed': Dict[str, str],
            'service_account': str
        }

        self.attribute_map = {
            'asset': 'asset',
            'observed': 'observed',
            'service_account': 'serviceAccount'
        }

        self._asset = asset
        self._observed = observed
        self._service_account = service_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViolationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViolationDetails of this ViolationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset(self):
        """Gets the asset of this ViolationDetails.

        the name of asset

        :return: The asset of this ViolationDetails.
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this ViolationDetails.

        the name of asset

        :param asset: The asset of this ViolationDetails.
        :type asset: str
        """

        self._asset = asset

    @property
    def observed(self):
        """Gets the observed of this ViolationDetails.

        observed

        :return: The observed of this ViolationDetails.
        :rtype: Dict[str, str]
        """
        return self._observed

    @observed.setter
    def observed(self, observed):
        """Sets the observed of this ViolationDetails.

        observed

        :param observed: The observed of this ViolationDetails.
        :type observed: Dict[str, str]
        """

        self._observed = observed

    @property
    def service_account(self):
        """Gets the service_account of this ViolationDetails.

        the service account associate with resource

        :return: The service_account of this ViolationDetails.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this ViolationDetails.

        the service account associate with resource

        :param service_account: The service_account of this ViolationDetails.
        :type service_account: str
        """

        self._service_account = service_account
