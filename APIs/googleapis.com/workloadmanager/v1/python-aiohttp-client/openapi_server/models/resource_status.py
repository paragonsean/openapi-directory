# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules_newer_versions: List[str]=None, state: str=None):
        """ResourceStatus - a model defined in OpenAPI

        :param rules_newer_versions: The rules_newer_versions of this ResourceStatus.
        :param state: The state of this ResourceStatus.
        """
        self.openapi_types = {
            'rules_newer_versions': List[str],
            'state': str
        }

        self.attribute_map = {
            'rules_newer_versions': 'rulesNewerVersions',
            'state': 'state'
        }

        self._rules_newer_versions = rules_newer_versions
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceStatus of this ResourceStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules_newer_versions(self):
        """Gets the rules_newer_versions of this ResourceStatus.

        Historical: Used before 2023-05-22 the new version of rule id if exists

        :return: The rules_newer_versions of this ResourceStatus.
        :rtype: List[str]
        """
        return self._rules_newer_versions

    @rules_newer_versions.setter
    def rules_newer_versions(self, rules_newer_versions):
        """Sets the rules_newer_versions of this ResourceStatus.

        Historical: Used before 2023-05-22 the new version of rule id if exists

        :param rules_newer_versions: The rules_newer_versions of this ResourceStatus.
        :type rules_newer_versions: List[str]
        """

        self._rules_newer_versions = rules_newer_versions

    @property
    def state(self):
        """Gets the state of this ResourceStatus.

        State of the resource

        :return: The state of this ResourceStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResourceStatus.

        State of the resource

        :param state: The state of this ResourceStatus.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
