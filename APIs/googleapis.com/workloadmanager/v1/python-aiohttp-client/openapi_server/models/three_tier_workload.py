# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_layer_server import APILayerServer
from openapi_server.models.backend_server import BackendServer
from openapi_server.models.front_end_server import FrontEndServer
from openapi_server import util


class ThreeTierWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_layer: APILayerServer=None, backend: BackendServer=None, endpoint: str=None, frontend: FrontEndServer=None):
        """ThreeTierWorkload - a model defined in OpenAPI

        :param api_layer: The api_layer of this ThreeTierWorkload.
        :param backend: The backend of this ThreeTierWorkload.
        :param endpoint: The endpoint of this ThreeTierWorkload.
        :param frontend: The frontend of this ThreeTierWorkload.
        """
        self.openapi_types = {
            'api_layer': APILayerServer,
            'backend': BackendServer,
            'endpoint': str,
            'frontend': FrontEndServer
        }

        self.attribute_map = {
            'api_layer': 'apiLayer',
            'backend': 'backend',
            'endpoint': 'endpoint',
            'frontend': 'frontend'
        }

        self._api_layer = api_layer
        self._backend = backend
        self._endpoint = endpoint
        self._frontend = frontend

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeTierWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeTierWorkload of this ThreeTierWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_layer(self):
        """Gets the api_layer of this ThreeTierWorkload.


        :return: The api_layer of this ThreeTierWorkload.
        :rtype: APILayerServer
        """
        return self._api_layer

    @api_layer.setter
    def api_layer(self, api_layer):
        """Sets the api_layer of this ThreeTierWorkload.


        :param api_layer: The api_layer of this ThreeTierWorkload.
        :type api_layer: APILayerServer
        """

        self._api_layer = api_layer

    @property
    def backend(self):
        """Gets the backend of this ThreeTierWorkload.


        :return: The backend of this ThreeTierWorkload.
        :rtype: BackendServer
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this ThreeTierWorkload.


        :param backend: The backend of this ThreeTierWorkload.
        :type backend: BackendServer
        """

        self._backend = backend

    @property
    def endpoint(self):
        """Gets the endpoint of this ThreeTierWorkload.

        Output only. the workload endpoint

        :return: The endpoint of this ThreeTierWorkload.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ThreeTierWorkload.

        Output only. the workload endpoint

        :param endpoint: The endpoint of this ThreeTierWorkload.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def frontend(self):
        """Gets the frontend of this ThreeTierWorkload.


        :return: The frontend of this ThreeTierWorkload.
        :rtype: FrontEndServer
        """
        return self._frontend

    @frontend.setter
    def frontend(self, frontend):
        """Sets the frontend of this ThreeTierWorkload.


        :param frontend: The frontend of this ThreeTierWorkload.
        :type frontend: FrontEndServer
        """

        self._frontend = frontend
