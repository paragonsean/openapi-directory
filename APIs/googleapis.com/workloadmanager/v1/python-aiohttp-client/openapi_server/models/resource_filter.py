# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gce_instance_filter import GceInstanceFilter
from openapi_server import util


class ResourceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gce_instance_filter: GceInstanceFilter=None, inclusion_labels: Dict[str, str]=None, resource_id_patterns: List[str]=None, scopes: List[str]=None):
        """ResourceFilter - a model defined in OpenAPI

        :param gce_instance_filter: The gce_instance_filter of this ResourceFilter.
        :param inclusion_labels: The inclusion_labels of this ResourceFilter.
        :param resource_id_patterns: The resource_id_patterns of this ResourceFilter.
        :param scopes: The scopes of this ResourceFilter.
        """
        self.openapi_types = {
            'gce_instance_filter': GceInstanceFilter,
            'inclusion_labels': Dict[str, str],
            'resource_id_patterns': List[str],
            'scopes': List[str]
        }

        self.attribute_map = {
            'gce_instance_filter': 'gceInstanceFilter',
            'inclusion_labels': 'inclusionLabels',
            'resource_id_patterns': 'resourceIdPatterns',
            'scopes': 'scopes'
        }

        self._gce_instance_filter = gce_instance_filter
        self._inclusion_labels = inclusion_labels
        self._resource_id_patterns = resource_id_patterns
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceFilter of this ResourceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gce_instance_filter(self):
        """Gets the gce_instance_filter of this ResourceFilter.


        :return: The gce_instance_filter of this ResourceFilter.
        :rtype: GceInstanceFilter
        """
        return self._gce_instance_filter

    @gce_instance_filter.setter
    def gce_instance_filter(self, gce_instance_filter):
        """Sets the gce_instance_filter of this ResourceFilter.


        :param gce_instance_filter: The gce_instance_filter of this ResourceFilter.
        :type gce_instance_filter: GceInstanceFilter
        """

        self._gce_instance_filter = gce_instance_filter

    @property
    def inclusion_labels(self):
        """Gets the inclusion_labels of this ResourceFilter.

        The label used for filter resource

        :return: The inclusion_labels of this ResourceFilter.
        :rtype: Dict[str, str]
        """
        return self._inclusion_labels

    @inclusion_labels.setter
    def inclusion_labels(self, inclusion_labels):
        """Sets the inclusion_labels of this ResourceFilter.

        The label used for filter resource

        :param inclusion_labels: The inclusion_labels of this ResourceFilter.
        :type inclusion_labels: Dict[str, str]
        """

        self._inclusion_labels = inclusion_labels

    @property
    def resource_id_patterns(self):
        """Gets the resource_id_patterns of this ResourceFilter.

        The id pattern for filter resource

        :return: The resource_id_patterns of this ResourceFilter.
        :rtype: List[str]
        """
        return self._resource_id_patterns

    @resource_id_patterns.setter
    def resource_id_patterns(self, resource_id_patterns):
        """Sets the resource_id_patterns of this ResourceFilter.

        The id pattern for filter resource

        :param resource_id_patterns: The resource_id_patterns of this ResourceFilter.
        :type resource_id_patterns: List[str]
        """

        self._resource_id_patterns = resource_id_patterns

    @property
    def scopes(self):
        """Gets the scopes of this ResourceFilter.

        The scopes of evaluation resource

        :return: The scopes of this ResourceFilter.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ResourceFilter.

        The scopes of evaluation resource

        :param scopes: The scopes of this ResourceFilter.
        :type scopes: List[str]
        """

        self._scopes = scopes
