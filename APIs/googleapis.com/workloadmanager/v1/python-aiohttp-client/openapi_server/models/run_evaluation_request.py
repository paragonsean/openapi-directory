# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution import Execution
from openapi_server import util


class RunEvaluationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution: Execution=None, execution_id: str=None, request_id: str=None):
        """RunEvaluationRequest - a model defined in OpenAPI

        :param execution: The execution of this RunEvaluationRequest.
        :param execution_id: The execution_id of this RunEvaluationRequest.
        :param request_id: The request_id of this RunEvaluationRequest.
        """
        self.openapi_types = {
            'execution': Execution,
            'execution_id': str,
            'request_id': str
        }

        self.attribute_map = {
            'execution': 'execution',
            'execution_id': 'executionId',
            'request_id': 'requestId'
        }

        self._execution = execution
        self._execution_id = execution_id
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunEvaluationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunEvaluationRequest of this RunEvaluationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution(self):
        """Gets the execution of this RunEvaluationRequest.


        :return: The execution of this RunEvaluationRequest.
        :rtype: Execution
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this RunEvaluationRequest.


        :param execution: The execution of this RunEvaluationRequest.
        :type execution: Execution
        """

        self._execution = execution

    @property
    def execution_id(self):
        """Gets the execution_id of this RunEvaluationRequest.

        Required. Id of the requesting object If auto-generating Id server-side, remove this field and execution_id from the method_signature of Create RPC

        :return: The execution_id of this RunEvaluationRequest.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this RunEvaluationRequest.

        Required. Id of the requesting object If auto-generating Id server-side, remove this field and execution_id from the method_signature of Create RPC

        :param execution_id: The execution_id of this RunEvaluationRequest.
        :type execution_id: str
        """

        self._execution_id = execution_id

    @property
    def request_id(self):
        """Gets the request_id of this RunEvaluationRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this RunEvaluationRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RunEvaluationRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this RunEvaluationRequest.
        :type request_id: str
        """

        self._request_id = request_id
