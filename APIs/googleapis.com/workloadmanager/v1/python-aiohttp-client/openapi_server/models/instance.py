# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, region: str=None, status: str=None):
        """Instance - a model defined in OpenAPI

        :param name: The name of this Instance.
        :param region: The region of this Instance.
        :param status: The status of this Instance.
        """
        self.openapi_types = {
            'name': str,
            'region': str,
            'status': str
        }

        self.attribute_map = {
            'name': 'name',
            'region': 'region',
            'status': 'status'
        }

        self._name = name
        self._region = region
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Instance.

        Output only. name of the VM

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Output only. name of the VM

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this Instance.

        Output only. The location of the VM

        :return: The region of this Instance.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Instance.

        Output only. The location of the VM

        :param region: The region of this Instance.
        :type region: str
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this Instance.

        Output only. The state of the VM

        :return: The status of this Instance.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Instance.

        Output only. The state of the VM

        :param status: The status of this Instance.
        :type status: str
        """
        allowed_values = ["INSTANCESTATE_UNSPECIFIED", "PROVISIONING", "STAGING", "RUNNING", "STOPPING", "STOPPED", "TERMINATED", "SUSPENDING", "SUSPENDED", "REPAIRING", "DEPROVISIONING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
