# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Execution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, evaluation_id: str=None, inventory_time: str=None, labels: Dict[str, str]=None, name: str=None, run_type: str=None, start_time: str=None, state: str=None):
        """Execution - a model defined in OpenAPI

        :param end_time: The end_time of this Execution.
        :param evaluation_id: The evaluation_id of this Execution.
        :param inventory_time: The inventory_time of this Execution.
        :param labels: The labels of this Execution.
        :param name: The name of this Execution.
        :param run_type: The run_type of this Execution.
        :param start_time: The start_time of this Execution.
        :param state: The state of this Execution.
        """
        self.openapi_types = {
            'end_time': str,
            'evaluation_id': str,
            'inventory_time': str,
            'labels': Dict[str, str],
            'name': str,
            'run_type': str,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'evaluation_id': 'evaluationId',
            'inventory_time': 'inventoryTime',
            'labels': 'labels',
            'name': 'name',
            'run_type': 'runType',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._end_time = end_time
        self._evaluation_id = evaluation_id
        self._inventory_time = inventory_time
        self._labels = labels
        self._name = name
        self._run_type = run_type
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Execution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Execution of this Execution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this Execution.

        Output only. [Output only] End time stamp

        :return: The end_time of this Execution.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Execution.

        Output only. [Output only] End time stamp

        :param end_time: The end_time of this Execution.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def evaluation_id(self):
        """Gets the evaluation_id of this Execution.

        Output only. [Output only] Evaluation ID

        :return: The evaluation_id of this Execution.
        :rtype: str
        """
        return self._evaluation_id

    @evaluation_id.setter
    def evaluation_id(self, evaluation_id):
        """Sets the evaluation_id of this Execution.

        Output only. [Output only] Evaluation ID

        :param evaluation_id: The evaluation_id of this Execution.
        :type evaluation_id: str
        """

        self._evaluation_id = evaluation_id

    @property
    def inventory_time(self):
        """Gets the inventory_time of this Execution.

        Output only. [Output only] Inventory time stamp

        :return: The inventory_time of this Execution.
        :rtype: str
        """
        return self._inventory_time

    @inventory_time.setter
    def inventory_time(self, inventory_time):
        """Sets the inventory_time of this Execution.

        Output only. [Output only] Inventory time stamp

        :param inventory_time: The inventory_time of this Execution.
        :type inventory_time: str
        """

        self._inventory_time = inventory_time

    @property
    def labels(self):
        """Gets the labels of this Execution.

        Labels as key value pairs

        :return: The labels of this Execution.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Execution.

        Labels as key value pairs

        :param labels: The labels of this Execution.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Execution.

        The name of execution resource. The format is projects/{project}/locations/{location}/evaluations/{evaluation}/executions/{execution}

        :return: The name of this Execution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Execution.

        The name of execution resource. The format is projects/{project}/locations/{location}/evaluations/{evaluation}/executions/{execution}

        :param name: The name of this Execution.
        :type name: str
        """

        self._name = name

    @property
    def run_type(self):
        """Gets the run_type of this Execution.

        type represent whether the execution executed directly by user or scheduled according evaluation.schedule field.

        :return: The run_type of this Execution.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this Execution.

        type represent whether the execution executed directly by user or scheduled according evaluation.schedule field.

        :param run_type: The run_type of this Execution.
        :type run_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "ONE_TIME", "SCHEDULED"]  # noqa: E501
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    @property
    def start_time(self):
        """Gets the start_time of this Execution.

        Output only. [Output only] Start time stamp

        :return: The start_time of this Execution.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Execution.

        Output only. [Output only] Start time stamp

        :param start_time: The start_time of this Execution.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Execution.

        Output only. [Output only] State

        :return: The state of this Execution.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Execution.

        Output only. [Output only] State

        :param state: The state of this Execution.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
