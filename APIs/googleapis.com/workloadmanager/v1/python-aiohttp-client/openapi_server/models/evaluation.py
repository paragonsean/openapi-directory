# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_destination import BigQueryDestination
from openapi_server.models.resource_filter import ResourceFilter
from openapi_server.models.resource_status import ResourceStatus
from openapi_server import util


class Evaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, big_query_destination: BigQueryDestination=None, create_time: str=None, custom_rules_bucket: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, resource_filter: ResourceFilter=None, resource_status: ResourceStatus=None, rule_names: List[str]=None, rule_versions: List[str]=None, schedule: str=None, update_time: str=None):
        """Evaluation - a model defined in OpenAPI

        :param big_query_destination: The big_query_destination of this Evaluation.
        :param create_time: The create_time of this Evaluation.
        :param custom_rules_bucket: The custom_rules_bucket of this Evaluation.
        :param description: The description of this Evaluation.
        :param labels: The labels of this Evaluation.
        :param name: The name of this Evaluation.
        :param resource_filter: The resource_filter of this Evaluation.
        :param resource_status: The resource_status of this Evaluation.
        :param rule_names: The rule_names of this Evaluation.
        :param rule_versions: The rule_versions of this Evaluation.
        :param schedule: The schedule of this Evaluation.
        :param update_time: The update_time of this Evaluation.
        """
        self.openapi_types = {
            'big_query_destination': BigQueryDestination,
            'create_time': str,
            'custom_rules_bucket': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'resource_filter': ResourceFilter,
            'resource_status': ResourceStatus,
            'rule_names': List[str],
            'rule_versions': List[str],
            'schedule': str,
            'update_time': str
        }

        self.attribute_map = {
            'big_query_destination': 'bigQueryDestination',
            'create_time': 'createTime',
            'custom_rules_bucket': 'customRulesBucket',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'resource_filter': 'resourceFilter',
            'resource_status': 'resourceStatus',
            'rule_names': 'ruleNames',
            'rule_versions': 'ruleVersions',
            'schedule': 'schedule',
            'update_time': 'updateTime'
        }

        self._big_query_destination = big_query_destination
        self._create_time = create_time
        self._custom_rules_bucket = custom_rules_bucket
        self._description = description
        self._labels = labels
        self._name = name
        self._resource_filter = resource_filter
        self._resource_status = resource_status
        self._rule_names = rule_names
        self._rule_versions = rule_versions
        self._schedule = schedule
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Evaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Evaluation of this Evaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def big_query_destination(self):
        """Gets the big_query_destination of this Evaluation.


        :return: The big_query_destination of this Evaluation.
        :rtype: BigQueryDestination
        """
        return self._big_query_destination

    @big_query_destination.setter
    def big_query_destination(self, big_query_destination):
        """Sets the big_query_destination of this Evaluation.


        :param big_query_destination: The big_query_destination of this Evaluation.
        :type big_query_destination: BigQueryDestination
        """

        self._big_query_destination = big_query_destination

    @property
    def create_time(self):
        """Gets the create_time of this Evaluation.

        Output only. [Output only] Create time stamp

        :return: The create_time of this Evaluation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Evaluation.

        Output only. [Output only] Create time stamp

        :param create_time: The create_time of this Evaluation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def custom_rules_bucket(self):
        """Gets the custom_rules_bucket of this Evaluation.

        The Cloud Storage bucket name for custom rules.

        :return: The custom_rules_bucket of this Evaluation.
        :rtype: str
        """
        return self._custom_rules_bucket

    @custom_rules_bucket.setter
    def custom_rules_bucket(self, custom_rules_bucket):
        """Sets the custom_rules_bucket of this Evaluation.

        The Cloud Storage bucket name for custom rules.

        :param custom_rules_bucket: The custom_rules_bucket of this Evaluation.
        :type custom_rules_bucket: str
        """

        self._custom_rules_bucket = custom_rules_bucket

    @property
    def description(self):
        """Gets the description of this Evaluation.

        Description of the Evaluation

        :return: The description of this Evaluation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Evaluation.

        Description of the Evaluation

        :param description: The description of this Evaluation.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this Evaluation.

        Labels as key value pairs

        :return: The labels of this Evaluation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Evaluation.

        Labels as key value pairs

        :param labels: The labels of this Evaluation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Evaluation.

        name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'

        :return: The name of this Evaluation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Evaluation.

        name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'

        :param name: The name of this Evaluation.
        :type name: str
        """

        self._name = name

    @property
    def resource_filter(self):
        """Gets the resource_filter of this Evaluation.


        :return: The resource_filter of this Evaluation.
        :rtype: ResourceFilter
        """
        return self._resource_filter

    @resource_filter.setter
    def resource_filter(self, resource_filter):
        """Sets the resource_filter of this Evaluation.


        :param resource_filter: The resource_filter of this Evaluation.
        :type resource_filter: ResourceFilter
        """

        self._resource_filter = resource_filter

    @property
    def resource_status(self):
        """Gets the resource_status of this Evaluation.


        :return: The resource_status of this Evaluation.
        :rtype: ResourceStatus
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this Evaluation.


        :param resource_status: The resource_status of this Evaluation.
        :type resource_status: ResourceStatus
        """

        self._resource_status = resource_status

    @property
    def rule_names(self):
        """Gets the rule_names of this Evaluation.

        the name of the rule

        :return: The rule_names of this Evaluation.
        :rtype: List[str]
        """
        return self._rule_names

    @rule_names.setter
    def rule_names(self, rule_names):
        """Sets the rule_names of this Evaluation.

        the name of the rule

        :param rule_names: The rule_names of this Evaluation.
        :type rule_names: List[str]
        """

        self._rule_names = rule_names

    @property
    def rule_versions(self):
        """Gets the rule_versions of this Evaluation.

        Output only. [Output only] The updated rule ids if exist.

        :return: The rule_versions of this Evaluation.
        :rtype: List[str]
        """
        return self._rule_versions

    @rule_versions.setter
    def rule_versions(self, rule_versions):
        """Sets the rule_versions of this Evaluation.

        Output only. [Output only] The updated rule ids if exist.

        :param rule_versions: The rule_versions of this Evaluation.
        :type rule_versions: List[str]
        """

        self._rule_versions = rule_versions

    @property
    def schedule(self):
        """Gets the schedule of this Evaluation.

        crontab format schedule for scheduled evaluation, currently only support the following schedule: \"0 */1 * * *\", \"0 */6 * * *\", \"0 */12 * * *\", \"0 0 */1 * *\", \"0 0 */7 * *\",

        :return: The schedule of this Evaluation.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Evaluation.

        crontab format schedule for scheduled evaluation, currently only support the following schedule: \"0 */1 * * *\", \"0 */6 * * *\", \"0 */12 * * *\", \"0 0 */1 * *\", \"0 0 */7 * *\",

        :param schedule: The schedule of this Evaluation.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def update_time(self):
        """Gets the update_time of this Evaluation.

        Output only. [Output only] Update time stamp

        :return: The update_time of this Evaluation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Evaluation.

        Output only. [Output only] Update time stamp

        :param update_time: The update_time of this Evaluation.
        :type update_time: str
        """

        self._update_time = update_time
