# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sap_component import SapComponent
from openapi_server import util


class SapWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: SapComponent=None, database: SapComponent=None, metadata: Dict[str, str]=None):
        """SapWorkload - a model defined in OpenAPI

        :param application: The application of this SapWorkload.
        :param database: The database of this SapWorkload.
        :param metadata: The metadata of this SapWorkload.
        """
        self.openapi_types = {
            'application': SapComponent,
            'database': SapComponent,
            'metadata': Dict[str, str]
        }

        self.attribute_map = {
            'application': 'application',
            'database': 'database',
            'metadata': 'metadata'
        }

        self._application = application
        self._database = database
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapWorkload of this SapWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this SapWorkload.


        :return: The application of this SapWorkload.
        :rtype: SapComponent
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this SapWorkload.


        :param application: The application of this SapWorkload.
        :type application: SapComponent
        """

        self._application = application

    @property
    def database(self):
        """Gets the database of this SapWorkload.


        :return: The database of this SapWorkload.
        :rtype: SapComponent
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this SapWorkload.


        :param database: The database of this SapWorkload.
        :type database: SapComponent
        """

        self._database = database

    @property
    def metadata(self):
        """Gets the metadata of this SapWorkload.

        Output only. The metadata for SAP workload.

        :return: The metadata of this SapWorkload.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SapWorkload.

        Output only. The metadata for SAP workload.

        :param metadata: The metadata of this SapWorkload.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata
