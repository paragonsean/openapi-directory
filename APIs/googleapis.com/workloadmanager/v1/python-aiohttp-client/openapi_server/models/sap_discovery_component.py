# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sap_discovery_component_application_properties import SapDiscoveryComponentApplicationProperties
from openapi_server.models.sap_discovery_component_database_properties import SapDiscoveryComponentDatabaseProperties
from openapi_server.models.sap_discovery_resource import SapDiscoveryResource
from openapi_server import util


class SapDiscoveryComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_properties: SapDiscoveryComponentApplicationProperties=None, database_properties: SapDiscoveryComponentDatabaseProperties=None, ha_hosts: List[str]=None, host_project: str=None, resources: List[SapDiscoveryResource]=None, sid: str=None, topology_type: str=None):
        """SapDiscoveryComponent - a model defined in OpenAPI

        :param application_properties: The application_properties of this SapDiscoveryComponent.
        :param database_properties: The database_properties of this SapDiscoveryComponent.
        :param ha_hosts: The ha_hosts of this SapDiscoveryComponent.
        :param host_project: The host_project of this SapDiscoveryComponent.
        :param resources: The resources of this SapDiscoveryComponent.
        :param sid: The sid of this SapDiscoveryComponent.
        :param topology_type: The topology_type of this SapDiscoveryComponent.
        """
        self.openapi_types = {
            'application_properties': SapDiscoveryComponentApplicationProperties,
            'database_properties': SapDiscoveryComponentDatabaseProperties,
            'ha_hosts': List[str],
            'host_project': str,
            'resources': List[SapDiscoveryResource],
            'sid': str,
            'topology_type': str
        }

        self.attribute_map = {
            'application_properties': 'applicationProperties',
            'database_properties': 'databaseProperties',
            'ha_hosts': 'haHosts',
            'host_project': 'hostProject',
            'resources': 'resources',
            'sid': 'sid',
            'topology_type': 'topologyType'
        }

        self._application_properties = application_properties
        self._database_properties = database_properties
        self._ha_hosts = ha_hosts
        self._host_project = host_project
        self._resources = resources
        self._sid = sid
        self._topology_type = topology_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapDiscoveryComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapDiscoveryComponent of this SapDiscoveryComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_properties(self):
        """Gets the application_properties of this SapDiscoveryComponent.


        :return: The application_properties of this SapDiscoveryComponent.
        :rtype: SapDiscoveryComponentApplicationProperties
        """
        return self._application_properties

    @application_properties.setter
    def application_properties(self, application_properties):
        """Sets the application_properties of this SapDiscoveryComponent.


        :param application_properties: The application_properties of this SapDiscoveryComponent.
        :type application_properties: SapDiscoveryComponentApplicationProperties
        """

        self._application_properties = application_properties

    @property
    def database_properties(self):
        """Gets the database_properties of this SapDiscoveryComponent.


        :return: The database_properties of this SapDiscoveryComponent.
        :rtype: SapDiscoveryComponentDatabaseProperties
        """
        return self._database_properties

    @database_properties.setter
    def database_properties(self, database_properties):
        """Sets the database_properties of this SapDiscoveryComponent.


        :param database_properties: The database_properties of this SapDiscoveryComponent.
        :type database_properties: SapDiscoveryComponentDatabaseProperties
        """

        self._database_properties = database_properties

    @property
    def ha_hosts(self):
        """Gets the ha_hosts of this SapDiscoveryComponent.

        Optional. A list of host URIs that are part of the HA configuration if present. An empty list indicates the component is not configured for HA.

        :return: The ha_hosts of this SapDiscoveryComponent.
        :rtype: List[str]
        """
        return self._ha_hosts

    @ha_hosts.setter
    def ha_hosts(self, ha_hosts):
        """Sets the ha_hosts of this SapDiscoveryComponent.

        Optional. A list of host URIs that are part of the HA configuration if present. An empty list indicates the component is not configured for HA.

        :param ha_hosts: The ha_hosts of this SapDiscoveryComponent.
        :type ha_hosts: List[str]
        """

        self._ha_hosts = ha_hosts

    @property
    def host_project(self):
        """Gets the host_project of this SapDiscoveryComponent.

        Required. Pantheon Project in which the resources reside.

        :return: The host_project of this SapDiscoveryComponent.
        :rtype: str
        """
        return self._host_project

    @host_project.setter
    def host_project(self, host_project):
        """Sets the host_project of this SapDiscoveryComponent.

        Required. Pantheon Project in which the resources reside.

        :param host_project: The host_project of this SapDiscoveryComponent.
        :type host_project: str
        """

        self._host_project = host_project

    @property
    def resources(self):
        """Gets the resources of this SapDiscoveryComponent.

        Optional. The resources in a component.

        :return: The resources of this SapDiscoveryComponent.
        :rtype: List[SapDiscoveryResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this SapDiscoveryComponent.

        Optional. The resources in a component.

        :param resources: The resources of this SapDiscoveryComponent.
        :type resources: List[SapDiscoveryResource]
        """

        self._resources = resources

    @property
    def sid(self):
        """Gets the sid of this SapDiscoveryComponent.

        Optional. The SAP identifier, used by the SAP software and helps differentiate systems for customers.

        :return: The sid of this SapDiscoveryComponent.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SapDiscoveryComponent.

        Optional. The SAP identifier, used by the SAP software and helps differentiate systems for customers.

        :param sid: The sid of this SapDiscoveryComponent.
        :type sid: str
        """

        self._sid = sid

    @property
    def topology_type(self):
        """Gets the topology_type of this SapDiscoveryComponent.

        Optional. The detected topology of the component.

        :return: The topology_type of this SapDiscoveryComponent.
        :rtype: str
        """
        return self._topology_type

    @topology_type.setter
    def topology_type(self, topology_type):
        """Sets the topology_type of this SapDiscoveryComponent.

        Optional. The detected topology of the component.

        :param topology_type: The topology_type of this SapDiscoveryComponent.
        :type topology_type: str
        """
        allowed_values = ["TOPOLOGY_TYPE_UNSPECIFIED", "TOPOLOGY_SCALE_UP", "TOPOLOGY_SCALE_OUT"]  # noqa: E501
        if topology_type not in allowed_values:
            raise ValueError(
                "Invalid value for `topology_type` ({0}), must be one of {1}"
                .format(topology_type, allowed_values)
            )

        self._topology_type = topology_type
