/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyAlternativeNameServerConfigTargetNameServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyAlternativeNameServerConfigTargetNameServer::OAIPolicyAlternativeNameServerConfigTargetNameServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyAlternativeNameServerConfigTargetNameServer::OAIPolicyAlternativeNameServerConfigTargetNameServer() {
    this->initializeModel();
}

OAIPolicyAlternativeNameServerConfigTargetNameServer::~OAIPolicyAlternativeNameServerConfigTargetNameServer() {}

void OAIPolicyAlternativeNameServerConfigTargetNameServer::initializeModel() {

    m_forwarding_path_isSet = false;
    m_forwarding_path_isValid = false;

    m_ipv4_address_isSet = false;
    m_ipv4_address_isValid = false;

    m_ipv6_address_isSet = false;
    m_ipv6_address_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIPolicyAlternativeNameServerConfigTargetNameServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyAlternativeNameServerConfigTargetNameServer::fromJsonObject(QJsonObject json) {

    m_forwarding_path_isValid = ::OpenAPI::fromJsonValue(m_forwarding_path, json[QString("forwardingPath")]);
    m_forwarding_path_isSet = !json[QString("forwardingPath")].isNull() && m_forwarding_path_isValid;

    m_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_ipv4_address, json[QString("ipv4Address")]);
    m_ipv4_address_isSet = !json[QString("ipv4Address")].isNull() && m_ipv4_address_isValid;

    m_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_ipv6_address, json[QString("ipv6Address")]);
    m_ipv6_address_isSet = !json[QString("ipv6Address")].isNull() && m_ipv6_address_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIPolicyAlternativeNameServerConfigTargetNameServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyAlternativeNameServerConfigTargetNameServer::asJsonObject() const {
    QJsonObject obj;
    if (m_forwarding_path_isSet) {
        obj.insert(QString("forwardingPath"), ::OpenAPI::toJsonValue(m_forwarding_path));
    }
    if (m_ipv4_address_isSet) {
        obj.insert(QString("ipv4Address"), ::OpenAPI::toJsonValue(m_ipv4_address));
    }
    if (m_ipv6_address_isSet) {
        obj.insert(QString("ipv6Address"), ::OpenAPI::toJsonValue(m_ipv6_address));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIPolicyAlternativeNameServerConfigTargetNameServer::getForwardingPath() const {
    return m_forwarding_path;
}
void OAIPolicyAlternativeNameServerConfigTargetNameServer::setForwardingPath(const QString &forwarding_path) {
    m_forwarding_path = forwarding_path;
    m_forwarding_path_isSet = true;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_forwarding_path_Set() const{
    return m_forwarding_path_isSet;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_forwarding_path_Valid() const{
    return m_forwarding_path_isValid;
}

QString OAIPolicyAlternativeNameServerConfigTargetNameServer::getIpv4Address() const {
    return m_ipv4_address;
}
void OAIPolicyAlternativeNameServerConfigTargetNameServer::setIpv4Address(const QString &ipv4_address) {
    m_ipv4_address = ipv4_address;
    m_ipv4_address_isSet = true;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_ipv4_address_Set() const{
    return m_ipv4_address_isSet;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_ipv4_address_Valid() const{
    return m_ipv4_address_isValid;
}

QString OAIPolicyAlternativeNameServerConfigTargetNameServer::getIpv6Address() const {
    return m_ipv6_address;
}
void OAIPolicyAlternativeNameServerConfigTargetNameServer::setIpv6Address(const QString &ipv6_address) {
    m_ipv6_address = ipv6_address;
    m_ipv6_address_isSet = true;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_ipv6_address_Set() const{
    return m_ipv6_address_isSet;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_ipv6_address_Valid() const{
    return m_ipv6_address_isValid;
}

QString OAIPolicyAlternativeNameServerConfigTargetNameServer::getKind() const {
    return m_kind;
}
void OAIPolicyAlternativeNameServerConfigTargetNameServer::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forwarding_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyAlternativeNameServerConfigTargetNameServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
