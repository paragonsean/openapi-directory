/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRRSetRoutingPolicyPrimaryBackupPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRRSetRoutingPolicyPrimaryBackupPolicy::OAIRRSetRoutingPolicyPrimaryBackupPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRRSetRoutingPolicyPrimaryBackupPolicy::OAIRRSetRoutingPolicyPrimaryBackupPolicy() {
    this->initializeModel();
}

OAIRRSetRoutingPolicyPrimaryBackupPolicy::~OAIRRSetRoutingPolicyPrimaryBackupPolicy() {}

void OAIRRSetRoutingPolicyPrimaryBackupPolicy::initializeModel() {

    m_backup_geo_targets_isSet = false;
    m_backup_geo_targets_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_primary_targets_isSet = false;
    m_primary_targets_isValid = false;

    m_trickle_traffic_isSet = false;
    m_trickle_traffic_isValid = false;
}

void OAIRRSetRoutingPolicyPrimaryBackupPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRRSetRoutingPolicyPrimaryBackupPolicy::fromJsonObject(QJsonObject json) {

    m_backup_geo_targets_isValid = ::OpenAPI::fromJsonValue(m_backup_geo_targets, json[QString("backupGeoTargets")]);
    m_backup_geo_targets_isSet = !json[QString("backupGeoTargets")].isNull() && m_backup_geo_targets_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_primary_targets_isValid = ::OpenAPI::fromJsonValue(m_primary_targets, json[QString("primaryTargets")]);
    m_primary_targets_isSet = !json[QString("primaryTargets")].isNull() && m_primary_targets_isValid;

    m_trickle_traffic_isValid = ::OpenAPI::fromJsonValue(m_trickle_traffic, json[QString("trickleTraffic")]);
    m_trickle_traffic_isSet = !json[QString("trickleTraffic")].isNull() && m_trickle_traffic_isValid;
}

QString OAIRRSetRoutingPolicyPrimaryBackupPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRRSetRoutingPolicyPrimaryBackupPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_geo_targets.isSet()) {
        obj.insert(QString("backupGeoTargets"), ::OpenAPI::toJsonValue(m_backup_geo_targets));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_primary_targets.isSet()) {
        obj.insert(QString("primaryTargets"), ::OpenAPI::toJsonValue(m_primary_targets));
    }
    if (m_trickle_traffic_isSet) {
        obj.insert(QString("trickleTraffic"), ::OpenAPI::toJsonValue(m_trickle_traffic));
    }
    return obj;
}

OAIRRSetRoutingPolicyGeoPolicy OAIRRSetRoutingPolicyPrimaryBackupPolicy::getBackupGeoTargets() const {
    return m_backup_geo_targets;
}
void OAIRRSetRoutingPolicyPrimaryBackupPolicy::setBackupGeoTargets(const OAIRRSetRoutingPolicyGeoPolicy &backup_geo_targets) {
    m_backup_geo_targets = backup_geo_targets;
    m_backup_geo_targets_isSet = true;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_backup_geo_targets_Set() const{
    return m_backup_geo_targets_isSet;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_backup_geo_targets_Valid() const{
    return m_backup_geo_targets_isValid;
}

QString OAIRRSetRoutingPolicyPrimaryBackupPolicy::getKind() const {
    return m_kind;
}
void OAIRRSetRoutingPolicyPrimaryBackupPolicy::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIRRSetRoutingPolicyHealthCheckTargets OAIRRSetRoutingPolicyPrimaryBackupPolicy::getPrimaryTargets() const {
    return m_primary_targets;
}
void OAIRRSetRoutingPolicyPrimaryBackupPolicy::setPrimaryTargets(const OAIRRSetRoutingPolicyHealthCheckTargets &primary_targets) {
    m_primary_targets = primary_targets;
    m_primary_targets_isSet = true;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_primary_targets_Set() const{
    return m_primary_targets_isSet;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_primary_targets_Valid() const{
    return m_primary_targets_isValid;
}

double OAIRRSetRoutingPolicyPrimaryBackupPolicy::getTrickleTraffic() const {
    return m_trickle_traffic;
}
void OAIRRSetRoutingPolicyPrimaryBackupPolicy::setTrickleTraffic(const double &trickle_traffic) {
    m_trickle_traffic = trickle_traffic;
    m_trickle_traffic_isSet = true;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_trickle_traffic_Set() const{
    return m_trickle_traffic_isSet;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::is_trickle_traffic_Valid() const{
    return m_trickle_traffic_isValid;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_geo_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trickle_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRRSetRoutingPolicyPrimaryBackupPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
