/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_dns_key_context_isSet = false;
    m_dns_key_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_zone_context_isSet = false;
    m_zone_context_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_dns_key_context_isValid = ::OpenAPI::fromJsonValue(m_dns_key_context, json[QString("dnsKeyContext")]);
    m_dns_key_context_isSet = !json[QString("dnsKeyContext")].isNull() && m_dns_key_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_zone_context_isValid = ::OpenAPI::fromJsonValue(m_zone_context, json[QString("zoneContext")]);
    m_zone_context_isSet = !json[QString("zoneContext")].isNull() && m_zone_context_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_key_context.isSet()) {
        obj.insert(QString("dnsKeyContext"), ::OpenAPI::toJsonValue(m_dns_key_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_zone_context.isSet()) {
        obj.insert(QString("zoneContext"), ::OpenAPI::toJsonValue(m_zone_context));
    }
    return obj;
}

OAIOperationDnsKeyContext OAIOperation::getDnsKeyContext() const {
    return m_dns_key_context;
}
void OAIOperation::setDnsKeyContext(const OAIOperationDnsKeyContext &dns_key_context) {
    m_dns_key_context = dns_key_context;
    m_dns_key_context_isSet = true;
}

bool OAIOperation::is_dns_key_context_Set() const{
    return m_dns_key_context_isSet;
}

bool OAIOperation::is_dns_key_context_Valid() const{
    return m_dns_key_context_isValid;
}

QString OAIOperation::getId() const {
    return m_id;
}
void OAIOperation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOperation::getKind() const {
    return m_kind;
}
void OAIOperation::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOperation::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOperation::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOperation::getStartTime() const {
    return m_start_time;
}
void OAIOperation::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIOperation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOperation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIOperation::getStatus() const {
    return m_status;
}
void OAIOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOperation::getType() const {
    return m_type;
}
void OAIOperation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOperation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOperation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOperation::getUser() const {
    return m_user;
}
void OAIOperation::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOperation::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOperation::is_user_Valid() const{
    return m_user_isValid;
}

OAIOperationManagedZoneContext OAIOperation::getZoneContext() const {
    return m_zone_context;
}
void OAIOperation::setZoneContext(const OAIOperationManagedZoneContext &zone_context) {
    m_zone_context = zone_context;
    m_zone_context_isSet = true;
}

bool OAIOperation::is_zone_context_Set() const{
    return m_zone_context_isSet;
}

bool OAIOperation::is_zone_context_Valid() const{
    return m_zone_context_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_key_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
