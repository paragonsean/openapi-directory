/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedZone::OAIManagedZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedZone::OAIManagedZone() {
    this->initializeModel();
}

OAIManagedZone::~OAIManagedZone() {}

void OAIManagedZone::initializeModel() {

    m_cloud_logging_config_isSet = false;
    m_cloud_logging_config_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_dnssec_config_isSet = false;
    m_dnssec_config_isValid = false;

    m_forwarding_config_isSet = false;
    m_forwarding_config_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_server_set_isSet = false;
    m_name_server_set_isValid = false;

    m_name_servers_isSet = false;
    m_name_servers_isValid = false;

    m_peering_config_isSet = false;
    m_peering_config_isValid = false;

    m_private_visibility_config_isSet = false;
    m_private_visibility_config_isValid = false;

    m_reverse_lookup_config_isSet = false;
    m_reverse_lookup_config_isValid = false;

    m_service_directory_config_isSet = false;
    m_service_directory_config_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIManagedZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedZone::fromJsonObject(QJsonObject json) {

    m_cloud_logging_config_isValid = ::OpenAPI::fromJsonValue(m_cloud_logging_config, json[QString("cloudLoggingConfig")]);
    m_cloud_logging_config_isSet = !json[QString("cloudLoggingConfig")].isNull() && m_cloud_logging_config_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dnsName")]);
    m_dns_name_isSet = !json[QString("dnsName")].isNull() && m_dns_name_isValid;

    m_dnssec_config_isValid = ::OpenAPI::fromJsonValue(m_dnssec_config, json[QString("dnssecConfig")]);
    m_dnssec_config_isSet = !json[QString("dnssecConfig")].isNull() && m_dnssec_config_isValid;

    m_forwarding_config_isValid = ::OpenAPI::fromJsonValue(m_forwarding_config, json[QString("forwardingConfig")]);
    m_forwarding_config_isSet = !json[QString("forwardingConfig")].isNull() && m_forwarding_config_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_server_set_isValid = ::OpenAPI::fromJsonValue(m_name_server_set, json[QString("nameServerSet")]);
    m_name_server_set_isSet = !json[QString("nameServerSet")].isNull() && m_name_server_set_isValid;

    m_name_servers_isValid = ::OpenAPI::fromJsonValue(m_name_servers, json[QString("nameServers")]);
    m_name_servers_isSet = !json[QString("nameServers")].isNull() && m_name_servers_isValid;

    m_peering_config_isValid = ::OpenAPI::fromJsonValue(m_peering_config, json[QString("peeringConfig")]);
    m_peering_config_isSet = !json[QString("peeringConfig")].isNull() && m_peering_config_isValid;

    m_private_visibility_config_isValid = ::OpenAPI::fromJsonValue(m_private_visibility_config, json[QString("privateVisibilityConfig")]);
    m_private_visibility_config_isSet = !json[QString("privateVisibilityConfig")].isNull() && m_private_visibility_config_isValid;

    m_reverse_lookup_config_isValid = ::OpenAPI::fromJsonValue(m_reverse_lookup_config, json[QString("reverseLookupConfig")]);
    m_reverse_lookup_config_isSet = !json[QString("reverseLookupConfig")].isNull() && m_reverse_lookup_config_isValid;

    m_service_directory_config_isValid = ::OpenAPI::fromJsonValue(m_service_directory_config, json[QString("serviceDirectoryConfig")]);
    m_service_directory_config_isSet = !json[QString("serviceDirectoryConfig")].isNull() && m_service_directory_config_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIManagedZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedZone::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_logging_config.isSet()) {
        obj.insert(QString("cloudLoggingConfig"), ::OpenAPI::toJsonValue(m_cloud_logging_config));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("dnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_dnssec_config.isSet()) {
        obj.insert(QString("dnssecConfig"), ::OpenAPI::toJsonValue(m_dnssec_config));
    }
    if (m_forwarding_config.isSet()) {
        obj.insert(QString("forwardingConfig"), ::OpenAPI::toJsonValue(m_forwarding_config));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_server_set_isSet) {
        obj.insert(QString("nameServerSet"), ::OpenAPI::toJsonValue(m_name_server_set));
    }
    if (m_name_servers.size() > 0) {
        obj.insert(QString("nameServers"), ::OpenAPI::toJsonValue(m_name_servers));
    }
    if (m_peering_config.isSet()) {
        obj.insert(QString("peeringConfig"), ::OpenAPI::toJsonValue(m_peering_config));
    }
    if (m_private_visibility_config.isSet()) {
        obj.insert(QString("privateVisibilityConfig"), ::OpenAPI::toJsonValue(m_private_visibility_config));
    }
    if (m_reverse_lookup_config.isSet()) {
        obj.insert(QString("reverseLookupConfig"), ::OpenAPI::toJsonValue(m_reverse_lookup_config));
    }
    if (m_service_directory_config.isSet()) {
        obj.insert(QString("serviceDirectoryConfig"), ::OpenAPI::toJsonValue(m_service_directory_config));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIManagedZoneCloudLoggingConfig OAIManagedZone::getCloudLoggingConfig() const {
    return m_cloud_logging_config;
}
void OAIManagedZone::setCloudLoggingConfig(const OAIManagedZoneCloudLoggingConfig &cloud_logging_config) {
    m_cloud_logging_config = cloud_logging_config;
    m_cloud_logging_config_isSet = true;
}

bool OAIManagedZone::is_cloud_logging_config_Set() const{
    return m_cloud_logging_config_isSet;
}

bool OAIManagedZone::is_cloud_logging_config_Valid() const{
    return m_cloud_logging_config_isValid;
}

QString OAIManagedZone::getCreationTime() const {
    return m_creation_time;
}
void OAIManagedZone::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIManagedZone::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIManagedZone::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIManagedZone::getDescription() const {
    return m_description;
}
void OAIManagedZone::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIManagedZone::is_description_Set() const{
    return m_description_isSet;
}

bool OAIManagedZone::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIManagedZone::getDnsName() const {
    return m_dns_name;
}
void OAIManagedZone::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIManagedZone::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIManagedZone::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

OAIManagedZoneDnsSecConfig OAIManagedZone::getDnssecConfig() const {
    return m_dnssec_config;
}
void OAIManagedZone::setDnssecConfig(const OAIManagedZoneDnsSecConfig &dnssec_config) {
    m_dnssec_config = dnssec_config;
    m_dnssec_config_isSet = true;
}

bool OAIManagedZone::is_dnssec_config_Set() const{
    return m_dnssec_config_isSet;
}

bool OAIManagedZone::is_dnssec_config_Valid() const{
    return m_dnssec_config_isValid;
}

OAIManagedZoneForwardingConfig OAIManagedZone::getForwardingConfig() const {
    return m_forwarding_config;
}
void OAIManagedZone::setForwardingConfig(const OAIManagedZoneForwardingConfig &forwarding_config) {
    m_forwarding_config = forwarding_config;
    m_forwarding_config_isSet = true;
}

bool OAIManagedZone::is_forwarding_config_Set() const{
    return m_forwarding_config_isSet;
}

bool OAIManagedZone::is_forwarding_config_Valid() const{
    return m_forwarding_config_isValid;
}

QString OAIManagedZone::getId() const {
    return m_id;
}
void OAIManagedZone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIManagedZone::is_id_Set() const{
    return m_id_isSet;
}

bool OAIManagedZone::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIManagedZone::getKind() const {
    return m_kind;
}
void OAIManagedZone::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIManagedZone::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIManagedZone::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIManagedZone::getLabels() const {
    return m_labels;
}
void OAIManagedZone::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIManagedZone::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIManagedZone::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIManagedZone::getName() const {
    return m_name;
}
void OAIManagedZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedZone::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManagedZone::getNameServerSet() const {
    return m_name_server_set;
}
void OAIManagedZone::setNameServerSet(const QString &name_server_set) {
    m_name_server_set = name_server_set;
    m_name_server_set_isSet = true;
}

bool OAIManagedZone::is_name_server_set_Set() const{
    return m_name_server_set_isSet;
}

bool OAIManagedZone::is_name_server_set_Valid() const{
    return m_name_server_set_isValid;
}

QList<QString> OAIManagedZone::getNameServers() const {
    return m_name_servers;
}
void OAIManagedZone::setNameServers(const QList<QString> &name_servers) {
    m_name_servers = name_servers;
    m_name_servers_isSet = true;
}

bool OAIManagedZone::is_name_servers_Set() const{
    return m_name_servers_isSet;
}

bool OAIManagedZone::is_name_servers_Valid() const{
    return m_name_servers_isValid;
}

OAIManagedZonePeeringConfig OAIManagedZone::getPeeringConfig() const {
    return m_peering_config;
}
void OAIManagedZone::setPeeringConfig(const OAIManagedZonePeeringConfig &peering_config) {
    m_peering_config = peering_config;
    m_peering_config_isSet = true;
}

bool OAIManagedZone::is_peering_config_Set() const{
    return m_peering_config_isSet;
}

bool OAIManagedZone::is_peering_config_Valid() const{
    return m_peering_config_isValid;
}

OAIManagedZonePrivateVisibilityConfig OAIManagedZone::getPrivateVisibilityConfig() const {
    return m_private_visibility_config;
}
void OAIManagedZone::setPrivateVisibilityConfig(const OAIManagedZonePrivateVisibilityConfig &private_visibility_config) {
    m_private_visibility_config = private_visibility_config;
    m_private_visibility_config_isSet = true;
}

bool OAIManagedZone::is_private_visibility_config_Set() const{
    return m_private_visibility_config_isSet;
}

bool OAIManagedZone::is_private_visibility_config_Valid() const{
    return m_private_visibility_config_isValid;
}

OAIManagedZoneReverseLookupConfig OAIManagedZone::getReverseLookupConfig() const {
    return m_reverse_lookup_config;
}
void OAIManagedZone::setReverseLookupConfig(const OAIManagedZoneReverseLookupConfig &reverse_lookup_config) {
    m_reverse_lookup_config = reverse_lookup_config;
    m_reverse_lookup_config_isSet = true;
}

bool OAIManagedZone::is_reverse_lookup_config_Set() const{
    return m_reverse_lookup_config_isSet;
}

bool OAIManagedZone::is_reverse_lookup_config_Valid() const{
    return m_reverse_lookup_config_isValid;
}

OAIManagedZoneServiceDirectoryConfig OAIManagedZone::getServiceDirectoryConfig() const {
    return m_service_directory_config;
}
void OAIManagedZone::setServiceDirectoryConfig(const OAIManagedZoneServiceDirectoryConfig &service_directory_config) {
    m_service_directory_config = service_directory_config;
    m_service_directory_config_isSet = true;
}

bool OAIManagedZone::is_service_directory_config_Set() const{
    return m_service_directory_config_isSet;
}

bool OAIManagedZone::is_service_directory_config_Valid() const{
    return m_service_directory_config_isValid;
}

QString OAIManagedZone::getVisibility() const {
    return m_visibility;
}
void OAIManagedZone::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIManagedZone::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIManagedZone::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIManagedZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnssec_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_server_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_visibility_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_lookup_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_directory_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
