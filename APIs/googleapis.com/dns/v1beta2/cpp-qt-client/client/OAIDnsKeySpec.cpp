/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsKeySpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsKeySpec::OAIDnsKeySpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsKeySpec::OAIDnsKeySpec() {
    this->initializeModel();
}

OAIDnsKeySpec::~OAIDnsKeySpec() {}

void OAIDnsKeySpec::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_key_length_isSet = false;
    m_key_length_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIDnsKeySpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsKeySpec::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_key_length_isValid = ::OpenAPI::fromJsonValue(m_key_length, json[QString("keyLength")]);
    m_key_length_isSet = !json[QString("keyLength")].isNull() && m_key_length_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("keyType")]);
    m_key_type_isSet = !json[QString("keyType")].isNull() && m_key_type_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIDnsKeySpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsKeySpec::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_key_length_isSet) {
        obj.insert(QString("keyLength"), ::OpenAPI::toJsonValue(m_key_length));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("keyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIDnsKeySpec::getAlgorithm() const {
    return m_algorithm;
}
void OAIDnsKeySpec::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIDnsKeySpec::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIDnsKeySpec::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

qint32 OAIDnsKeySpec::getKeyLength() const {
    return m_key_length;
}
void OAIDnsKeySpec::setKeyLength(const qint32 &key_length) {
    m_key_length = key_length;
    m_key_length_isSet = true;
}

bool OAIDnsKeySpec::is_key_length_Set() const{
    return m_key_length_isSet;
}

bool OAIDnsKeySpec::is_key_length_Valid() const{
    return m_key_length_isValid;
}

QString OAIDnsKeySpec::getKeyType() const {
    return m_key_type;
}
void OAIDnsKeySpec::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIDnsKeySpec::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIDnsKeySpec::is_key_type_Valid() const{
    return m_key_type_isValid;
}

QString OAIDnsKeySpec::getKind() const {
    return m_kind;
}
void OAIDnsKeySpec::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDnsKeySpec::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDnsKeySpec::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIDnsKeySpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsKeySpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
