/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRRSetRoutingPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRRSetRoutingPolicy::OAIRRSetRoutingPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRRSetRoutingPolicy::OAIRRSetRoutingPolicy() {
    this->initializeModel();
}

OAIRRSetRoutingPolicy::~OAIRRSetRoutingPolicy() {}

void OAIRRSetRoutingPolicy::initializeModel() {

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_geo_policy_isSet = false;
    m_geo_policy_isValid = false;

    m_health_check_isSet = false;
    m_health_check_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_primary_backup_isSet = false;
    m_primary_backup_isValid = false;

    m_wrr_isSet = false;
    m_wrr_isValid = false;

    m_wrr_policy_isSet = false;
    m_wrr_policy_isValid = false;
}

void OAIRRSetRoutingPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRRSetRoutingPolicy::fromJsonObject(QJsonObject json) {

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_geo_policy_isValid = ::OpenAPI::fromJsonValue(m_geo_policy, json[QString("geoPolicy")]);
    m_geo_policy_isSet = !json[QString("geoPolicy")].isNull() && m_geo_policy_isValid;

    m_health_check_isValid = ::OpenAPI::fromJsonValue(m_health_check, json[QString("healthCheck")]);
    m_health_check_isSet = !json[QString("healthCheck")].isNull() && m_health_check_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_primary_backup_isValid = ::OpenAPI::fromJsonValue(m_primary_backup, json[QString("primaryBackup")]);
    m_primary_backup_isSet = !json[QString("primaryBackup")].isNull() && m_primary_backup_isValid;

    m_wrr_isValid = ::OpenAPI::fromJsonValue(m_wrr, json[QString("wrr")]);
    m_wrr_isSet = !json[QString("wrr")].isNull() && m_wrr_isValid;

    m_wrr_policy_isValid = ::OpenAPI::fromJsonValue(m_wrr_policy, json[QString("wrrPolicy")]);
    m_wrr_policy_isSet = !json[QString("wrrPolicy")].isNull() && m_wrr_policy_isValid;
}

QString OAIRRSetRoutingPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRRSetRoutingPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_geo_policy.isSet()) {
        obj.insert(QString("geoPolicy"), ::OpenAPI::toJsonValue(m_geo_policy));
    }
    if (m_health_check_isSet) {
        obj.insert(QString("healthCheck"), ::OpenAPI::toJsonValue(m_health_check));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_primary_backup.isSet()) {
        obj.insert(QString("primaryBackup"), ::OpenAPI::toJsonValue(m_primary_backup));
    }
    if (m_wrr.isSet()) {
        obj.insert(QString("wrr"), ::OpenAPI::toJsonValue(m_wrr));
    }
    if (m_wrr_policy.isSet()) {
        obj.insert(QString("wrrPolicy"), ::OpenAPI::toJsonValue(m_wrr_policy));
    }
    return obj;
}

OAIRRSetRoutingPolicyGeoPolicy OAIRRSetRoutingPolicy::getGeo() const {
    return m_geo;
}
void OAIRRSetRoutingPolicy::setGeo(const OAIRRSetRoutingPolicyGeoPolicy &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAIRRSetRoutingPolicy::is_geo_Valid() const{
    return m_geo_isValid;
}

OAIRRSetRoutingPolicyGeoPolicy OAIRRSetRoutingPolicy::getGeoPolicy() const {
    return m_geo_policy;
}
void OAIRRSetRoutingPolicy::setGeoPolicy(const OAIRRSetRoutingPolicyGeoPolicy &geo_policy) {
    m_geo_policy = geo_policy;
    m_geo_policy_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_geo_policy_Set() const{
    return m_geo_policy_isSet;
}

bool OAIRRSetRoutingPolicy::is_geo_policy_Valid() const{
    return m_geo_policy_isValid;
}

QString OAIRRSetRoutingPolicy::getHealthCheck() const {
    return m_health_check;
}
void OAIRRSetRoutingPolicy::setHealthCheck(const QString &health_check) {
    m_health_check = health_check;
    m_health_check_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_health_check_Set() const{
    return m_health_check_isSet;
}

bool OAIRRSetRoutingPolicy::is_health_check_Valid() const{
    return m_health_check_isValid;
}

QString OAIRRSetRoutingPolicy::getKind() const {
    return m_kind;
}
void OAIRRSetRoutingPolicy::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRRSetRoutingPolicy::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIRRSetRoutingPolicyPrimaryBackupPolicy OAIRRSetRoutingPolicy::getPrimaryBackup() const {
    return m_primary_backup;
}
void OAIRRSetRoutingPolicy::setPrimaryBackup(const OAIRRSetRoutingPolicyPrimaryBackupPolicy &primary_backup) {
    m_primary_backup = primary_backup;
    m_primary_backup_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_primary_backup_Set() const{
    return m_primary_backup_isSet;
}

bool OAIRRSetRoutingPolicy::is_primary_backup_Valid() const{
    return m_primary_backup_isValid;
}

OAIRRSetRoutingPolicyWrrPolicy OAIRRSetRoutingPolicy::getWrr() const {
    return m_wrr;
}
void OAIRRSetRoutingPolicy::setWrr(const OAIRRSetRoutingPolicyWrrPolicy &wrr) {
    m_wrr = wrr;
    m_wrr_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_wrr_Set() const{
    return m_wrr_isSet;
}

bool OAIRRSetRoutingPolicy::is_wrr_Valid() const{
    return m_wrr_isValid;
}

OAIRRSetRoutingPolicyWrrPolicy OAIRRSetRoutingPolicy::getWrrPolicy() const {
    return m_wrr_policy;
}
void OAIRRSetRoutingPolicy::setWrrPolicy(const OAIRRSetRoutingPolicyWrrPolicy &wrr_policy) {
    m_wrr_policy = wrr_policy;
    m_wrr_policy_isSet = true;
}

bool OAIRRSetRoutingPolicy::is_wrr_policy_Set() const{
    return m_wrr_policy_isSet;
}

bool OAIRRSetRoutingPolicy::is_wrr_policy_Valid() const{
    return m_wrr_policy_isValid;
}

bool OAIRRSetRoutingPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_backup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrr_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRRSetRoutingPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
