/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponsePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponsePolicy::OAIResponsePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponsePolicy::OAIResponsePolicy() {
    this->initializeModel();
}

OAIResponsePolicy::~OAIResponsePolicy() {}

void OAIResponsePolicy::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_gke_clusters_isSet = false;
    m_gke_clusters_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_response_policy_name_isSet = false;
    m_response_policy_name_isValid = false;
}

void OAIResponsePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponsePolicy::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gke_clusters_isValid = ::OpenAPI::fromJsonValue(m_gke_clusters, json[QString("gkeClusters")]);
    m_gke_clusters_isSet = !json[QString("gkeClusters")].isNull() && m_gke_clusters_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_response_policy_name_isValid = ::OpenAPI::fromJsonValue(m_response_policy_name, json[QString("responsePolicyName")]);
    m_response_policy_name_isSet = !json[QString("responsePolicyName")].isNull() && m_response_policy_name_isValid;
}

QString OAIResponsePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponsePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gke_clusters.size() > 0) {
        obj.insert(QString("gkeClusters"), ::OpenAPI::toJsonValue(m_gke_clusters));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_response_policy_name_isSet) {
        obj.insert(QString("responsePolicyName"), ::OpenAPI::toJsonValue(m_response_policy_name));
    }
    return obj;
}

QString OAIResponsePolicy::getDescription() const {
    return m_description;
}
void OAIResponsePolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResponsePolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResponsePolicy::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIResponsePolicyGKECluster> OAIResponsePolicy::getGkeClusters() const {
    return m_gke_clusters;
}
void OAIResponsePolicy::setGkeClusters(const QList<OAIResponsePolicyGKECluster> &gke_clusters) {
    m_gke_clusters = gke_clusters;
    m_gke_clusters_isSet = true;
}

bool OAIResponsePolicy::is_gke_clusters_Set() const{
    return m_gke_clusters_isSet;
}

bool OAIResponsePolicy::is_gke_clusters_Valid() const{
    return m_gke_clusters_isValid;
}

QString OAIResponsePolicy::getId() const {
    return m_id;
}
void OAIResponsePolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResponsePolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResponsePolicy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResponsePolicy::getKind() const {
    return m_kind;
}
void OAIResponsePolicy::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIResponsePolicy::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIResponsePolicy::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIResponsePolicy::getLabels() const {
    return m_labels;
}
void OAIResponsePolicy::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIResponsePolicy::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIResponsePolicy::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIResponsePolicyNetwork> OAIResponsePolicy::getNetworks() const {
    return m_networks;
}
void OAIResponsePolicy::setNetworks(const QList<OAIResponsePolicyNetwork> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIResponsePolicy::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIResponsePolicy::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAIResponsePolicy::getResponsePolicyName() const {
    return m_response_policy_name;
}
void OAIResponsePolicy::setResponsePolicyName(const QString &response_policy_name) {
    m_response_policy_name = response_policy_name;
    m_response_policy_name_isSet = true;
}

bool OAIResponsePolicy::is_response_policy_name_Set() const{
    return m_response_policy_name_isSet;
}

bool OAIResponsePolicy::is_response_policy_name_Valid() const{
    return m_response_policy_name_isValid;
}

bool OAIResponsePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponsePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
