/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperationDnsKeyContext from './OperationDnsKeyContext';
import OperationManagedZoneContext from './OperationManagedZoneContext';

/**
 * The Operation model module.
 * @module model/Operation
 * @version v1beta2
 */
class Operation {
    /**
     * Constructs a new <code>Operation</code>.
     * An operation represents a successful mutation performed on a Cloud DNS resource. Operations provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the case where the response is never received by the caller. Use the caller specified client_operation_id.
     * @alias module:model/Operation
     */
    constructor() { 
        
        Operation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#operation';
    }

    /**
     * Constructs a <code>Operation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Operation} obj Optional instance to populate.
     * @return {module:model/Operation} The populated <code>Operation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Operation();

            if (data.hasOwnProperty('dnsKeyContext')) {
                obj['dnsKeyContext'] = OperationDnsKeyContext.constructFromObject(data['dnsKeyContext']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('zoneContext')) {
                obj['zoneContext'] = OperationManagedZoneContext.constructFromObject(data['zoneContext']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Operation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Operation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dnsKeyContext`
        if (data['dnsKeyContext']) { // data not null
          OperationDnsKeyContext.validateJSON(data['dnsKeyContext']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // validate the optional field `zoneContext`
        if (data['zoneContext']) { // data not null
          OperationManagedZoneContext.validateJSON(data['zoneContext']);
        }

        return true;
    }


}



/**
 * @member {module:model/OperationDnsKeyContext} dnsKeyContext
 */
Operation.prototype['dnsKeyContext'] = undefined;

/**
 * Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
 * @member {String} id
 */
Operation.prototype['id'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#operation'
 */
Operation.prototype['kind'] = 'dns#operation';

/**
 * The time that this operation was started by the server. This is in RFC3339 text format (output only).
 * @member {String} startTime
 */
Operation.prototype['startTime'] = undefined;

/**
 * Status of the operation. Can be one of the following: \"PENDING\" or \"DONE\" (output only). A status of \"DONE\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
 * @member {module:model/Operation.StatusEnum} status
 */
Operation.prototype['status'] = undefined;

/**
 * Type of the operation. Operations include insert, update, and delete (output only).
 * @member {String} type
 */
Operation.prototype['type'] = undefined;

/**
 * User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)
 * @member {String} user
 */
Operation.prototype['user'] = undefined;

/**
 * @member {module:model/OperationManagedZoneContext} zoneContext
 */
Operation.prototype['zoneContext'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Operation['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "done"
     * @const
     */
    "done": "done"
};



export default Operation;

