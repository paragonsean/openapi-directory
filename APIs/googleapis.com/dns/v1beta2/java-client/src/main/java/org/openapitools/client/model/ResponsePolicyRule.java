/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponsePolicyRuleLocalData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:24.747480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponsePolicyRule {
  /**
   * Answer this query with a behavior rather than DNS data.
   */
  @JsonAdapter(BehaviorEnum.Adapter.class)
  public enum BehaviorEnum {
    BEHAVIOR_UNSPECIFIED("behaviorUnspecified"),
    
    BYPASS_RESPONSE_POLICY("bypassResponsePolicy");

    private String value;

    BehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BehaviorEnum fromValue(String value) {
      for (BehaviorEnum b : BehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEHAVIOR = "behavior";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR)
  private BehaviorEnum behavior;

  public static final String SERIALIZED_NAME_DNS_NAME = "dnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#responsePolicyRule";

  public static final String SERIALIZED_NAME_LOCAL_DATA = "localData";
  @SerializedName(SERIALIZED_NAME_LOCAL_DATA)
  private ResponsePolicyRuleLocalData localData;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public ResponsePolicyRule() {
  }

  public ResponsePolicyRule behavior(BehaviorEnum behavior) {
    this.behavior = behavior;
    return this;
  }

  /**
   * Answer this query with a behavior rather than DNS data.
   * @return behavior
   */
  @javax.annotation.Nullable
  public BehaviorEnum getBehavior() {
    return behavior;
  }

  public void setBehavior(BehaviorEnum behavior) {
    this.behavior = behavior;
  }


  public ResponsePolicyRule dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public ResponsePolicyRule kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ResponsePolicyRule localData(ResponsePolicyRuleLocalData localData) {
    this.localData = localData;
    return this;
  }

  /**
   * Get localData
   * @return localData
   */
  @javax.annotation.Nullable
  public ResponsePolicyRuleLocalData getLocalData() {
    return localData;
  }

  public void setLocalData(ResponsePolicyRuleLocalData localData) {
    this.localData = localData;
  }


  public ResponsePolicyRule ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * An identifier for this rule. Must be unique with the ResponsePolicy.
   * @return ruleName
   */
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponsePolicyRule responsePolicyRule = (ResponsePolicyRule) o;
    return Objects.equals(this.behavior, responsePolicyRule.behavior) &&
        Objects.equals(this.dnsName, responsePolicyRule.dnsName) &&
        Objects.equals(this.kind, responsePolicyRule.kind) &&
        Objects.equals(this.localData, responsePolicyRule.localData) &&
        Objects.equals(this.ruleName, responsePolicyRule.ruleName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(behavior, dnsName, kind, localData, ruleName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponsePolicyRule {\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    localData: ").append(toIndentedString(localData)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("behavior");
    openapiFields.add("dnsName");
    openapiFields.add("kind");
    openapiFields.add("localData");
    openapiFields.add("ruleName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponsePolicyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponsePolicyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponsePolicyRule is not found in the empty JSON string", ResponsePolicyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponsePolicyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponsePolicyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("behavior") != null && !jsonObj.get("behavior").isJsonNull()) && !jsonObj.get("behavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `behavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("behavior").toString()));
      }
      // validate the optional field `behavior`
      if (jsonObj.get("behavior") != null && !jsonObj.get("behavior").isJsonNull()) {
        BehaviorEnum.validateJsonElement(jsonObj.get("behavior"));
      }
      if ((jsonObj.get("dnsName") != null && !jsonObj.get("dnsName").isJsonNull()) && !jsonObj.get("dnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `localData`
      if (jsonObj.get("localData") != null && !jsonObj.get("localData").isJsonNull()) {
        ResponsePolicyRuleLocalData.validateJsonElement(jsonObj.get("localData"));
      }
      if ((jsonObj.get("ruleName") != null && !jsonObj.get("ruleName").isJsonNull()) && !jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponsePolicyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponsePolicyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponsePolicyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponsePolicyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponsePolicyRule>() {
           @Override
           public void write(JsonWriter out, ResponsePolicyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponsePolicyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponsePolicyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponsePolicyRule
   * @throws IOException if the JSON string is invalid with respect to ResponsePolicyRule
   */
  public static ResponsePolicyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponsePolicyRule.class);
  }

  /**
   * Convert an instance of ResponsePolicyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

