/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RRSetRoutingPolicyGeoPolicyGeoPolicyItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:24.747480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RRSetRoutingPolicyGeoPolicy {
  public static final String SERIALIZED_NAME_ENABLE_FENCING = "enableFencing";
  @SerializedName(SERIALIZED_NAME_ENABLE_FENCING)
  private Boolean enableFencing;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<RRSetRoutingPolicyGeoPolicyGeoPolicyItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#rRSetRoutingPolicyGeoPolicy";

  public RRSetRoutingPolicyGeoPolicy() {
  }

  public RRSetRoutingPolicyGeoPolicy enableFencing(Boolean enableFencing) {
    this.enableFencing = enableFencing;
    return this;
  }

  /**
   * Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don&#39;t failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
   * @return enableFencing
   */
  @javax.annotation.Nullable
  public Boolean getEnableFencing() {
    return enableFencing;
  }

  public void setEnableFencing(Boolean enableFencing) {
    this.enableFencing = enableFencing;
  }


  public RRSetRoutingPolicyGeoPolicy items(List<RRSetRoutingPolicyGeoPolicyGeoPolicyItem> items) {
    this.items = items;
    return this;
  }

  public RRSetRoutingPolicyGeoPolicy addItemsItem(RRSetRoutingPolicyGeoPolicyGeoPolicyItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
   * @return items
   */
  @javax.annotation.Nullable
  public List<RRSetRoutingPolicyGeoPolicyGeoPolicyItem> getItems() {
    return items;
  }

  public void setItems(List<RRSetRoutingPolicyGeoPolicyGeoPolicyItem> items) {
    this.items = items;
  }


  public RRSetRoutingPolicyGeoPolicy kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RRSetRoutingPolicyGeoPolicy rrSetRoutingPolicyGeoPolicy = (RRSetRoutingPolicyGeoPolicy) o;
    return Objects.equals(this.enableFencing, rrSetRoutingPolicyGeoPolicy.enableFencing) &&
        Objects.equals(this.items, rrSetRoutingPolicyGeoPolicy.items) &&
        Objects.equals(this.kind, rrSetRoutingPolicyGeoPolicy.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableFencing, items, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RRSetRoutingPolicyGeoPolicy {\n");
    sb.append("    enableFencing: ").append(toIndentedString(enableFencing)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableFencing");
    openapiFields.add("items");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RRSetRoutingPolicyGeoPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RRSetRoutingPolicyGeoPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RRSetRoutingPolicyGeoPolicy is not found in the empty JSON string", RRSetRoutingPolicyGeoPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RRSetRoutingPolicyGeoPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RRSetRoutingPolicyGeoPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            RRSetRoutingPolicyGeoPolicyGeoPolicyItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RRSetRoutingPolicyGeoPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RRSetRoutingPolicyGeoPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RRSetRoutingPolicyGeoPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RRSetRoutingPolicyGeoPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<RRSetRoutingPolicyGeoPolicy>() {
           @Override
           public void write(JsonWriter out, RRSetRoutingPolicyGeoPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RRSetRoutingPolicyGeoPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RRSetRoutingPolicyGeoPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RRSetRoutingPolicyGeoPolicy
   * @throws IOException if the JSON string is invalid with respect to RRSetRoutingPolicyGeoPolicy
   */
  public static RRSetRoutingPolicyGeoPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RRSetRoutingPolicyGeoPolicy.class);
  }

  /**
   * Convert an instance of RRSetRoutingPolicyGeoPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

