/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for an individual load balancer to health check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:24.747480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RRSetRoutingPolicyLoadBalancerTarget {
  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  /**
   * The protocol of the load balancer to health check.
   */
  @JsonAdapter(IpProtocolEnum.Adapter.class)
  public enum IpProtocolEnum {
    UNDEFINED("undefined"),
    
    TCP("tcp"),
    
    UDP("udp");

    private String value;

    IpProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpProtocolEnum fromValue(String value) {
      for (IpProtocolEnum b : IpProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IpProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IP_PROTOCOL = "ipProtocol";
  @SerializedName(SERIALIZED_NAME_IP_PROTOCOL)
  private IpProtocolEnum ipProtocol;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#rRSetRoutingPolicyLoadBalancerTarget";

  /**
   * The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget&#39;s IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. 
   */
  @JsonAdapter(LoadBalancerTypeEnum.Adapter.class)
  public enum LoadBalancerTypeEnum {
    NONE("none"),
    
    GLOBAL_L7ILB("globalL7ilb"),
    
    REGIONAL_L4ILB("regionalL4ilb"),
    
    REGIONAL_L7ILB("regionalL7ilb");

    private String value;

    LoadBalancerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadBalancerTypeEnum fromValue(String value) {
      for (LoadBalancerTypeEnum b : LoadBalancerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadBalancerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadBalancerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadBalancerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadBalancerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadBalancerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_BALANCER_TYPE = "loadBalancerType";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_TYPE)
  private LoadBalancerTypeEnum loadBalancerType;

  public static final String SERIALIZED_NAME_NETWORK_URL = "networkUrl";
  @SerializedName(SERIALIZED_NAME_NETWORK_URL)
  private String networkUrl;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public RRSetRoutingPolicyLoadBalancerTarget() {
  }

  public RRSetRoutingPolicyLoadBalancerTarget ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The frontend IP address of the load balancer to health check.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public RRSetRoutingPolicyLoadBalancerTarget ipProtocol(IpProtocolEnum ipProtocol) {
    this.ipProtocol = ipProtocol;
    return this;
  }

  /**
   * The protocol of the load balancer to health check.
   * @return ipProtocol
   */
  @javax.annotation.Nullable
  public IpProtocolEnum getIpProtocol() {
    return ipProtocol;
  }

  public void setIpProtocol(IpProtocolEnum ipProtocol) {
    this.ipProtocol = ipProtocol;
  }


  public RRSetRoutingPolicyLoadBalancerTarget kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public RRSetRoutingPolicyLoadBalancerTarget loadBalancerType(LoadBalancerTypeEnum loadBalancerType) {
    this.loadBalancerType = loadBalancerType;
    return this;
  }

  /**
   * The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget&#39;s IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. 
   * @return loadBalancerType
   */
  @javax.annotation.Nullable
  public LoadBalancerTypeEnum getLoadBalancerType() {
    return loadBalancerType;
  }

  public void setLoadBalancerType(LoadBalancerTypeEnum loadBalancerType) {
    this.loadBalancerType = loadBalancerType;
  }


  public RRSetRoutingPolicyLoadBalancerTarget networkUrl(String networkUrl) {
    this.networkUrl = networkUrl;
    return this;
  }

  /**
   * The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
   * @return networkUrl
   */
  @javax.annotation.Nullable
  public String getNetworkUrl() {
    return networkUrl;
  }

  public void setNetworkUrl(String networkUrl) {
    this.networkUrl = networkUrl;
  }


  public RRSetRoutingPolicyLoadBalancerTarget port(String port) {
    this.port = port;
    return this;
  }

  /**
   * The configured port of the load balancer.
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  public RRSetRoutingPolicyLoadBalancerTarget project(String project) {
    this.project = project;
    return this;
  }

  /**
   * The project ID in which the load balancer is located.
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public RRSetRoutingPolicyLoadBalancerTarget region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The region in which the load balancer is located.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RRSetRoutingPolicyLoadBalancerTarget rrSetRoutingPolicyLoadBalancerTarget = (RRSetRoutingPolicyLoadBalancerTarget) o;
    return Objects.equals(this.ipAddress, rrSetRoutingPolicyLoadBalancerTarget.ipAddress) &&
        Objects.equals(this.ipProtocol, rrSetRoutingPolicyLoadBalancerTarget.ipProtocol) &&
        Objects.equals(this.kind, rrSetRoutingPolicyLoadBalancerTarget.kind) &&
        Objects.equals(this.loadBalancerType, rrSetRoutingPolicyLoadBalancerTarget.loadBalancerType) &&
        Objects.equals(this.networkUrl, rrSetRoutingPolicyLoadBalancerTarget.networkUrl) &&
        Objects.equals(this.port, rrSetRoutingPolicyLoadBalancerTarget.port) &&
        Objects.equals(this.project, rrSetRoutingPolicyLoadBalancerTarget.project) &&
        Objects.equals(this.region, rrSetRoutingPolicyLoadBalancerTarget.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, ipProtocol, kind, loadBalancerType, networkUrl, port, project, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RRSetRoutingPolicyLoadBalancerTarget {\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ipProtocol: ").append(toIndentedString(ipProtocol)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    loadBalancerType: ").append(toIndentedString(loadBalancerType)).append("\n");
    sb.append("    networkUrl: ").append(toIndentedString(networkUrl)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipAddress");
    openapiFields.add("ipProtocol");
    openapiFields.add("kind");
    openapiFields.add("loadBalancerType");
    openapiFields.add("networkUrl");
    openapiFields.add("port");
    openapiFields.add("project");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RRSetRoutingPolicyLoadBalancerTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RRSetRoutingPolicyLoadBalancerTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RRSetRoutingPolicyLoadBalancerTarget is not found in the empty JSON string", RRSetRoutingPolicyLoadBalancerTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RRSetRoutingPolicyLoadBalancerTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RRSetRoutingPolicyLoadBalancerTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("ipProtocol") != null && !jsonObj.get("ipProtocol").isJsonNull()) && !jsonObj.get("ipProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipProtocol").toString()));
      }
      // validate the optional field `ipProtocol`
      if (jsonObj.get("ipProtocol") != null && !jsonObj.get("ipProtocol").isJsonNull()) {
        IpProtocolEnum.validateJsonElement(jsonObj.get("ipProtocol"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("loadBalancerType") != null && !jsonObj.get("loadBalancerType").isJsonNull()) && !jsonObj.get("loadBalancerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadBalancerType").toString()));
      }
      // validate the optional field `loadBalancerType`
      if (jsonObj.get("loadBalancerType") != null && !jsonObj.get("loadBalancerType").isJsonNull()) {
        LoadBalancerTypeEnum.validateJsonElement(jsonObj.get("loadBalancerType"));
      }
      if ((jsonObj.get("networkUrl") != null && !jsonObj.get("networkUrl").isJsonNull()) && !jsonObj.get("networkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkUrl").toString()));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RRSetRoutingPolicyLoadBalancerTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RRSetRoutingPolicyLoadBalancerTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RRSetRoutingPolicyLoadBalancerTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RRSetRoutingPolicyLoadBalancerTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<RRSetRoutingPolicyLoadBalancerTarget>() {
           @Override
           public void write(JsonWriter out, RRSetRoutingPolicyLoadBalancerTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RRSetRoutingPolicyLoadBalancerTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RRSetRoutingPolicyLoadBalancerTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RRSetRoutingPolicyLoadBalancerTarget
   * @throws IOException if the JSON string is invalid with respect to RRSetRoutingPolicyLoadBalancerTarget
   */
  public static RRSetRoutingPolicyLoadBalancerTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RRSetRoutingPolicyLoadBalancerTarget.class);
  }

  /**
   * Convert an instance of RRSetRoutingPolicyLoadBalancerTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

