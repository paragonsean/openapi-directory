# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_set_routing_policy_geo_policy_geo_policy_item import RRSetRoutingPolicyGeoPolicyGeoPolicyItem
from openapi_server import util


class RRSetRoutingPolicyGeoPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_fencing: bool=None, items: List[RRSetRoutingPolicyGeoPolicyGeoPolicyItem]=None, kind: str='dns#rRSetRoutingPolicyGeoPolicy'):
        """RRSetRoutingPolicyGeoPolicy - a model defined in OpenAPI

        :param enable_fencing: The enable_fencing of this RRSetRoutingPolicyGeoPolicy.
        :param items: The items of this RRSetRoutingPolicyGeoPolicy.
        :param kind: The kind of this RRSetRoutingPolicyGeoPolicy.
        """
        self.openapi_types = {
            'enable_fencing': bool,
            'items': List[RRSetRoutingPolicyGeoPolicyGeoPolicyItem],
            'kind': str
        }

        self.attribute_map = {
            'enable_fencing': 'enableFencing',
            'items': 'items',
            'kind': 'kind'
        }

        self._enable_fencing = enable_fencing
        self._items = items
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RRSetRoutingPolicyGeoPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RRSetRoutingPolicyGeoPolicy of this RRSetRoutingPolicyGeoPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_fencing(self):
        """Gets the enable_fencing of this RRSetRoutingPolicyGeoPolicy.

        Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.

        :return: The enable_fencing of this RRSetRoutingPolicyGeoPolicy.
        :rtype: bool
        """
        return self._enable_fencing

    @enable_fencing.setter
    def enable_fencing(self, enable_fencing):
        """Sets the enable_fencing of this RRSetRoutingPolicyGeoPolicy.

        Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.

        :param enable_fencing: The enable_fencing of this RRSetRoutingPolicyGeoPolicy.
        :type enable_fencing: bool
        """

        self._enable_fencing = enable_fencing

    @property
    def items(self):
        """Gets the items of this RRSetRoutingPolicyGeoPolicy.

        The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.

        :return: The items of this RRSetRoutingPolicyGeoPolicy.
        :rtype: List[RRSetRoutingPolicyGeoPolicyGeoPolicyItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RRSetRoutingPolicyGeoPolicy.

        The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.

        :param items: The items of this RRSetRoutingPolicyGeoPolicy.
        :type items: List[RRSetRoutingPolicyGeoPolicyGeoPolicyItem]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this RRSetRoutingPolicyGeoPolicy.


        :return: The kind of this RRSetRoutingPolicyGeoPolicy.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RRSetRoutingPolicyGeoPolicy.


        :param kind: The kind of this RRSetRoutingPolicyGeoPolicy.
        :type kind: str
        """

        self._kind = kind
