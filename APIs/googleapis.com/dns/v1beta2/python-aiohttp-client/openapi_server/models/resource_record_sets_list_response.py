# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_record_set import ResourceRecordSet
from openapi_server.models.response_header import ResponseHeader
from openapi_server import util


class ResourceRecordSetsListResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, header: ResponseHeader=None, kind: str='dns#resourceRecordSetsListResponse', next_page_token: str=None, rrsets: List[ResourceRecordSet]=None):
        """ResourceRecordSetsListResponse - a model defined in OpenAPI

        :param header: The header of this ResourceRecordSetsListResponse.
        :param kind: The kind of this ResourceRecordSetsListResponse.
        :param next_page_token: The next_page_token of this ResourceRecordSetsListResponse.
        :param rrsets: The rrsets of this ResourceRecordSetsListResponse.
        """
        self.openapi_types = {
            'header': ResponseHeader,
            'kind': str,
            'next_page_token': str,
            'rrsets': List[ResourceRecordSet]
        }

        self.attribute_map = {
            'header': 'header',
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'rrsets': 'rrsets'
        }

        self._header = header
        self._kind = kind
        self._next_page_token = next_page_token
        self._rrsets = rrsets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceRecordSetsListResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceRecordSetsListResponse of this ResourceRecordSetsListResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def header(self):
        """Gets the header of this ResourceRecordSetsListResponse.


        :return: The header of this ResourceRecordSetsListResponse.
        :rtype: ResponseHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this ResourceRecordSetsListResponse.


        :param header: The header of this ResourceRecordSetsListResponse.
        :type header: ResponseHeader
        """

        self._header = header

    @property
    def kind(self):
        """Gets the kind of this ResourceRecordSetsListResponse.

        Type of resource.

        :return: The kind of this ResourceRecordSetsListResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResourceRecordSetsListResponse.

        Type of resource.

        :param kind: The kind of this ResourceRecordSetsListResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ResourceRecordSetsListResponse.

        The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve the complete contents of even larger collections, one page at a time. However, if the collection changes between paginated list requests, the set of elements returned is an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.

        :return: The next_page_token of this ResourceRecordSetsListResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ResourceRecordSetsListResponse.

        The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve the complete contents of even larger collections, one page at a time. However, if the collection changes between paginated list requests, the set of elements returned is an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.

        :param next_page_token: The next_page_token of this ResourceRecordSetsListResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def rrsets(self):
        """Gets the rrsets of this ResourceRecordSetsListResponse.

        The resource record set resources.

        :return: The rrsets of this ResourceRecordSetsListResponse.
        :rtype: List[ResourceRecordSet]
        """
        return self._rrsets

    @rrsets.setter
    def rrsets(self, rrsets):
        """Sets the rrsets of this ResourceRecordSetsListResponse.

        The resource record set resources.

        :param rrsets: The rrsets of this ResourceRecordSetsListResponse.
        :type rrsets: List[ResourceRecordSet]
        """

        self._rrsets = rrsets
