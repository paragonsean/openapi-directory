# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_set_routing_policy_geo_policy import RRSetRoutingPolicyGeoPolicy
from openapi_server.models.rr_set_routing_policy_health_check_targets import RRSetRoutingPolicyHealthCheckTargets
from openapi_server import util


class RRSetRoutingPolicyPrimaryBackupPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_geo_targets: RRSetRoutingPolicyGeoPolicy=None, kind: str='dns#rRSetRoutingPolicyPrimaryBackupPolicy', primary_targets: RRSetRoutingPolicyHealthCheckTargets=None, trickle_traffic: float=None):
        """RRSetRoutingPolicyPrimaryBackupPolicy - a model defined in OpenAPI

        :param backup_geo_targets: The backup_geo_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :param kind: The kind of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :param primary_targets: The primary_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :param trickle_traffic: The trickle_traffic of this RRSetRoutingPolicyPrimaryBackupPolicy.
        """
        self.openapi_types = {
            'backup_geo_targets': RRSetRoutingPolicyGeoPolicy,
            'kind': str,
            'primary_targets': RRSetRoutingPolicyHealthCheckTargets,
            'trickle_traffic': float
        }

        self.attribute_map = {
            'backup_geo_targets': 'backupGeoTargets',
            'kind': 'kind',
            'primary_targets': 'primaryTargets',
            'trickle_traffic': 'trickleTraffic'
        }

        self._backup_geo_targets = backup_geo_targets
        self._kind = kind
        self._primary_targets = primary_targets
        self._trickle_traffic = trickle_traffic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RRSetRoutingPolicyPrimaryBackupPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RRSetRoutingPolicyPrimaryBackupPolicy of this RRSetRoutingPolicyPrimaryBackupPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_geo_targets(self):
        """Gets the backup_geo_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.


        :return: The backup_geo_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :rtype: RRSetRoutingPolicyGeoPolicy
        """
        return self._backup_geo_targets

    @backup_geo_targets.setter
    def backup_geo_targets(self, backup_geo_targets):
        """Sets the backup_geo_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.


        :param backup_geo_targets: The backup_geo_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :type backup_geo_targets: RRSetRoutingPolicyGeoPolicy
        """

        self._backup_geo_targets = backup_geo_targets

    @property
    def kind(self):
        """Gets the kind of this RRSetRoutingPolicyPrimaryBackupPolicy.


        :return: The kind of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RRSetRoutingPolicyPrimaryBackupPolicy.


        :param kind: The kind of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :type kind: str
        """

        self._kind = kind

    @property
    def primary_targets(self):
        """Gets the primary_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.


        :return: The primary_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :rtype: RRSetRoutingPolicyHealthCheckTargets
        """
        return self._primary_targets

    @primary_targets.setter
    def primary_targets(self, primary_targets):
        """Sets the primary_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.


        :param primary_targets: The primary_targets of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :type primary_targets: RRSetRoutingPolicyHealthCheckTargets
        """

        self._primary_targets = primary_targets

    @property
    def trickle_traffic(self):
        """Gets the trickle_traffic of this RRSetRoutingPolicyPrimaryBackupPolicy.

        When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.

        :return: The trickle_traffic of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :rtype: float
        """
        return self._trickle_traffic

    @trickle_traffic.setter
    def trickle_traffic(self, trickle_traffic):
        """Sets the trickle_traffic of this RRSetRoutingPolicyPrimaryBackupPolicy.

        When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.

        :param trickle_traffic: The trickle_traffic of this RRSetRoutingPolicyPrimaryBackupPolicy.
        :type trickle_traffic: float
        """

        self._trickle_traffic = trickle_traffic
