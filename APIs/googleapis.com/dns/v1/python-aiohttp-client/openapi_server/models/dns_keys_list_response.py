# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_key import DnsKey
from openapi_server.models.response_header import ResponseHeader
from openapi_server import util


class DnsKeysListResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_keys: List[DnsKey]=None, header: ResponseHeader=None, kind: str='dns#dnsKeysListResponse', next_page_token: str=None):
        """DnsKeysListResponse - a model defined in OpenAPI

        :param dns_keys: The dns_keys of this DnsKeysListResponse.
        :param header: The header of this DnsKeysListResponse.
        :param kind: The kind of this DnsKeysListResponse.
        :param next_page_token: The next_page_token of this DnsKeysListResponse.
        """
        self.openapi_types = {
            'dns_keys': List[DnsKey],
            'header': ResponseHeader,
            'kind': str,
            'next_page_token': str
        }

        self.attribute_map = {
            'dns_keys': 'dnsKeys',
            'header': 'header',
            'kind': 'kind',
            'next_page_token': 'nextPageToken'
        }

        self._dns_keys = dns_keys
        self._header = header
        self._kind = kind
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsKeysListResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsKeysListResponse of this DnsKeysListResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_keys(self):
        """Gets the dns_keys of this DnsKeysListResponse.

        The requested resources.

        :return: The dns_keys of this DnsKeysListResponse.
        :rtype: List[DnsKey]
        """
        return self._dns_keys

    @dns_keys.setter
    def dns_keys(self, dns_keys):
        """Sets the dns_keys of this DnsKeysListResponse.

        The requested resources.

        :param dns_keys: The dns_keys of this DnsKeysListResponse.
        :type dns_keys: List[DnsKey]
        """

        self._dns_keys = dns_keys

    @property
    def header(self):
        """Gets the header of this DnsKeysListResponse.


        :return: The header of this DnsKeysListResponse.
        :rtype: ResponseHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this DnsKeysListResponse.


        :param header: The header of this DnsKeysListResponse.
        :type header: ResponseHeader
        """

        self._header = header

    @property
    def kind(self):
        """Gets the kind of this DnsKeysListResponse.

        Type of resource.

        :return: The kind of this DnsKeysListResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DnsKeysListResponse.

        Type of resource.

        :param kind: The kind of this DnsKeysListResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this DnsKeysListResponse.

        The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. There is no way to retrieve a \"snapshot\" of collections larger than the maximum page size.

        :return: The next_page_token of this DnsKeysListResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this DnsKeysListResponse.

        The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. There is no way to retrieve a \"snapshot\" of collections larger than the maximum page size.

        :param next_page_token: The next_page_token of this DnsKeysListResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
