# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_alternative_name_server_config import PolicyAlternativeNameServerConfig
from openapi_server.models.policy_network import PolicyNetwork
from openapi_server import util


class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_name_server_config: PolicyAlternativeNameServerConfig=None, description: str=None, enable_inbound_forwarding: bool=None, enable_logging: bool=None, id: str=None, kind: str='dns#policy', name: str=None, networks: List[PolicyNetwork]=None):
        """Policy - a model defined in OpenAPI

        :param alternative_name_server_config: The alternative_name_server_config of this Policy.
        :param description: The description of this Policy.
        :param enable_inbound_forwarding: The enable_inbound_forwarding of this Policy.
        :param enable_logging: The enable_logging of this Policy.
        :param id: The id of this Policy.
        :param kind: The kind of this Policy.
        :param name: The name of this Policy.
        :param networks: The networks of this Policy.
        """
        self.openapi_types = {
            'alternative_name_server_config': PolicyAlternativeNameServerConfig,
            'description': str,
            'enable_inbound_forwarding': bool,
            'enable_logging': bool,
            'id': str,
            'kind': str,
            'name': str,
            'networks': List[PolicyNetwork]
        }

        self.attribute_map = {
            'alternative_name_server_config': 'alternativeNameServerConfig',
            'description': 'description',
            'enable_inbound_forwarding': 'enableInboundForwarding',
            'enable_logging': 'enableLogging',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'networks': 'networks'
        }

        self._alternative_name_server_config = alternative_name_server_config
        self._description = description
        self._enable_inbound_forwarding = enable_inbound_forwarding
        self._enable_logging = enable_logging
        self._id = id
        self._kind = kind
        self._name = name
        self._networks = networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy of this Policy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_name_server_config(self):
        """Gets the alternative_name_server_config of this Policy.


        :return: The alternative_name_server_config of this Policy.
        :rtype: PolicyAlternativeNameServerConfig
        """
        return self._alternative_name_server_config

    @alternative_name_server_config.setter
    def alternative_name_server_config(self, alternative_name_server_config):
        """Sets the alternative_name_server_config of this Policy.


        :param alternative_name_server_config: The alternative_name_server_config of this Policy.
        :type alternative_name_server_config: PolicyAlternativeNameServerConfig
        """

        self._alternative_name_server_config = alternative_name_server_config

    @property
    def description(self):
        """Gets the description of this Policy.

        A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.

        :return: The description of this Policy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Policy.

        A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.

        :param description: The description of this Policy.
        :type description: str
        """

        self._description = description

    @property
    def enable_inbound_forwarding(self):
        """Gets the enable_inbound_forwarding of this Policy.

        Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.

        :return: The enable_inbound_forwarding of this Policy.
        :rtype: bool
        """
        return self._enable_inbound_forwarding

    @enable_inbound_forwarding.setter
    def enable_inbound_forwarding(self, enable_inbound_forwarding):
        """Sets the enable_inbound_forwarding of this Policy.

        Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.

        :param enable_inbound_forwarding: The enable_inbound_forwarding of this Policy.
        :type enable_inbound_forwarding: bool
        """

        self._enable_inbound_forwarding = enable_inbound_forwarding

    @property
    def enable_logging(self):
        """Gets the enable_logging of this Policy.

        Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.

        :return: The enable_logging of this Policy.
        :rtype: bool
        """
        return self._enable_logging

    @enable_logging.setter
    def enable_logging(self, enable_logging):
        """Sets the enable_logging of this Policy.

        Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.

        :param enable_logging: The enable_logging of this Policy.
        :type enable_logging: bool
        """

        self._enable_logging = enable_logging

    @property
    def id(self):
        """Gets the id of this Policy.

        Unique identifier for the resource; defined by the server (output only).

        :return: The id of this Policy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Policy.

        Unique identifier for the resource; defined by the server (output only).

        :param id: The id of this Policy.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Policy.


        :return: The kind of this Policy.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Policy.


        :param kind: The kind of this Policy.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Policy.

        User-assigned name for this policy.

        :return: The name of this Policy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Policy.

        User-assigned name for this policy.

        :param name: The name of this Policy.
        :type name: str
        """

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this Policy.

        List of network names specifying networks to which this policy is applied.

        :return: The networks of this Policy.
        :rtype: List[PolicyNetwork]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Policy.

        List of network names specifying networks to which this policy is applied.

        :param networks: The networks of this Policy.
        :type networks: List[PolicyNetwork]
        """

        self._networks = networks
