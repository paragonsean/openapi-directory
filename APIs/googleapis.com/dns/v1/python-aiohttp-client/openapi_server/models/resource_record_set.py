# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rr_set_routing_policy import RRSetRoutingPolicy
from openapi_server import util


class ResourceRecordSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str='dns#resourceRecordSet', name: str=None, routing_policy: RRSetRoutingPolicy=None, rrdatas: List[str]=None, signature_rrdatas: List[str]=None, ttl: int=None, type: str=None):
        """ResourceRecordSet - a model defined in OpenAPI

        :param kind: The kind of this ResourceRecordSet.
        :param name: The name of this ResourceRecordSet.
        :param routing_policy: The routing_policy of this ResourceRecordSet.
        :param rrdatas: The rrdatas of this ResourceRecordSet.
        :param signature_rrdatas: The signature_rrdatas of this ResourceRecordSet.
        :param ttl: The ttl of this ResourceRecordSet.
        :param type: The type of this ResourceRecordSet.
        """
        self.openapi_types = {
            'kind': str,
            'name': str,
            'routing_policy': RRSetRoutingPolicy,
            'rrdatas': List[str],
            'signature_rrdatas': List[str],
            'ttl': int,
            'type': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'name': 'name',
            'routing_policy': 'routingPolicy',
            'rrdatas': 'rrdatas',
            'signature_rrdatas': 'signatureRrdatas',
            'ttl': 'ttl',
            'type': 'type'
        }

        self._kind = kind
        self._name = name
        self._routing_policy = routing_policy
        self._rrdatas = rrdatas
        self._signature_rrdatas = signature_rrdatas
        self._ttl = ttl
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceRecordSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceRecordSet of this ResourceRecordSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this ResourceRecordSet.


        :return: The kind of this ResourceRecordSet.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResourceRecordSet.


        :param kind: The kind of this ResourceRecordSet.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ResourceRecordSet.

        For example, www.example.com.

        :return: The name of this ResourceRecordSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceRecordSet.

        For example, www.example.com.

        :param name: The name of this ResourceRecordSet.
        :type name: str
        """

        self._name = name

    @property
    def routing_policy(self):
        """Gets the routing_policy of this ResourceRecordSet.


        :return: The routing_policy of this ResourceRecordSet.
        :rtype: RRSetRoutingPolicy
        """
        return self._routing_policy

    @routing_policy.setter
    def routing_policy(self, routing_policy):
        """Sets the routing_policy of this ResourceRecordSet.


        :param routing_policy: The routing_policy of this ResourceRecordSet.
        :type routing_policy: RRSetRoutingPolicy
        """

        self._routing_policy = routing_policy

    @property
    def rrdatas(self):
        """Gets the rrdatas of this ResourceRecordSet.

        As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.

        :return: The rrdatas of this ResourceRecordSet.
        :rtype: List[str]
        """
        return self._rrdatas

    @rrdatas.setter
    def rrdatas(self, rrdatas):
        """Sets the rrdatas of this ResourceRecordSet.

        As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.

        :param rrdatas: The rrdatas of this ResourceRecordSet.
        :type rrdatas: List[str]
        """

        self._rrdatas = rrdatas

    @property
    def signature_rrdatas(self):
        """Gets the signature_rrdatas of this ResourceRecordSet.

        As defined in RFC 4034 (section 3.2).

        :return: The signature_rrdatas of this ResourceRecordSet.
        :rtype: List[str]
        """
        return self._signature_rrdatas

    @signature_rrdatas.setter
    def signature_rrdatas(self, signature_rrdatas):
        """Sets the signature_rrdatas of this ResourceRecordSet.

        As defined in RFC 4034 (section 3.2).

        :param signature_rrdatas: The signature_rrdatas of this ResourceRecordSet.
        :type signature_rrdatas: List[str]
        """

        self._signature_rrdatas = signature_rrdatas

    @property
    def ttl(self):
        """Gets the ttl of this ResourceRecordSet.

        Number of seconds that this ResourceRecordSet can be cached by resolvers.

        :return: The ttl of this ResourceRecordSet.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ResourceRecordSet.

        Number of seconds that this ResourceRecordSet can be cached by resolvers.

        :param ttl: The ttl of this ResourceRecordSet.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this ResourceRecordSet.

        The identifier of a supported record type. See the list of Supported DNS record types.

        :return: The type of this ResourceRecordSet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceRecordSet.

        The identifier of a supported record type. See the list of Supported DNS record types.

        :param type: The type of this ResourceRecordSet.
        :type type: str
        """

        self._type = type
