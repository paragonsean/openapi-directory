# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsKeySpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, key_length: int=None, key_type: str=None, kind: str='dns#dnsKeySpec'):
        """DnsKeySpec - a model defined in OpenAPI

        :param algorithm: The algorithm of this DnsKeySpec.
        :param key_length: The key_length of this DnsKeySpec.
        :param key_type: The key_type of this DnsKeySpec.
        :param kind: The kind of this DnsKeySpec.
        """
        self.openapi_types = {
            'algorithm': str,
            'key_length': int,
            'key_type': str,
            'kind': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'key_length': 'keyLength',
            'key_type': 'keyType',
            'kind': 'kind'
        }

        self._algorithm = algorithm
        self._key_length = key_length
        self._key_type = key_type
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsKeySpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsKeySpec of this DnsKeySpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this DnsKeySpec.

        String mnemonic specifying the DNSSEC algorithm of this key.

        :return: The algorithm of this DnsKeySpec.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this DnsKeySpec.

        String mnemonic specifying the DNSSEC algorithm of this key.

        :param algorithm: The algorithm of this DnsKeySpec.
        :type algorithm: str
        """
        allowed_values = ["rsasha1", "rsasha256", "rsasha512", "ecdsap256sha256", "ecdsap384sha384"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def key_length(self):
        """Gets the key_length of this DnsKeySpec.

        Length of the keys in bits.

        :return: The key_length of this DnsKeySpec.
        :rtype: int
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this DnsKeySpec.

        Length of the keys in bits.

        :param key_length: The key_length of this DnsKeySpec.
        :type key_length: int
        """

        self._key_length = key_length

    @property
    def key_type(self):
        """Gets the key_type of this DnsKeySpec.

        Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.

        :return: The key_type of this DnsKeySpec.
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this DnsKeySpec.

        Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.

        :param key_type: The key_type of this DnsKeySpec.
        :type key_type: str
        """
        allowed_values = ["keySigning", "zoneSigning"]  # noqa: E501
        if key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    @property
    def kind(self):
        """Gets the kind of this DnsKeySpec.


        :return: The kind of this DnsKeySpec.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DnsKeySpec.


        :param kind: The kind of this DnsKeySpec.
        :type kind: str
        """

        self._kind = kind
