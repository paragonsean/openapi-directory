# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response_policy_rule_local_data import ResponsePolicyRuleLocalData
from openapi_server import util


class ResponsePolicyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, behavior: str=None, dns_name: str=None, kind: str='dns#responsePolicyRule', local_data: ResponsePolicyRuleLocalData=None, rule_name: str=None):
        """ResponsePolicyRule - a model defined in OpenAPI

        :param behavior: The behavior of this ResponsePolicyRule.
        :param dns_name: The dns_name of this ResponsePolicyRule.
        :param kind: The kind of this ResponsePolicyRule.
        :param local_data: The local_data of this ResponsePolicyRule.
        :param rule_name: The rule_name of this ResponsePolicyRule.
        """
        self.openapi_types = {
            'behavior': str,
            'dns_name': str,
            'kind': str,
            'local_data': ResponsePolicyRuleLocalData,
            'rule_name': str
        }

        self.attribute_map = {
            'behavior': 'behavior',
            'dns_name': 'dnsName',
            'kind': 'kind',
            'local_data': 'localData',
            'rule_name': 'ruleName'
        }

        self._behavior = behavior
        self._dns_name = dns_name
        self._kind = kind
        self._local_data = local_data
        self._rule_name = rule_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponsePolicyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponsePolicyRule of this ResponsePolicyRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def behavior(self):
        """Gets the behavior of this ResponsePolicyRule.

        Answer this query with a behavior rather than DNS data.

        :return: The behavior of this ResponsePolicyRule.
        :rtype: str
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this ResponsePolicyRule.

        Answer this query with a behavior rather than DNS data.

        :param behavior: The behavior of this ResponsePolicyRule.
        :type behavior: str
        """
        allowed_values = ["behaviorUnspecified", "bypassResponsePolicy"]  # noqa: E501
        if behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `behavior` ({0}), must be one of {1}"
                .format(behavior, allowed_values)
            )

        self._behavior = behavior

    @property
    def dns_name(self):
        """Gets the dns_name of this ResponsePolicyRule.

        The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.

        :return: The dns_name of this ResponsePolicyRule.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this ResponsePolicyRule.

        The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.

        :param dns_name: The dns_name of this ResponsePolicyRule.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def kind(self):
        """Gets the kind of this ResponsePolicyRule.


        :return: The kind of this ResponsePolicyRule.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResponsePolicyRule.


        :param kind: The kind of this ResponsePolicyRule.
        :type kind: str
        """

        self._kind = kind

    @property
    def local_data(self):
        """Gets the local_data of this ResponsePolicyRule.


        :return: The local_data of this ResponsePolicyRule.
        :rtype: ResponsePolicyRuleLocalData
        """
        return self._local_data

    @local_data.setter
    def local_data(self, local_data):
        """Sets the local_data of this ResponsePolicyRule.


        :param local_data: The local_data of this ResponsePolicyRule.
        :type local_data: ResponsePolicyRuleLocalData
        """

        self._local_data = local_data

    @property
    def rule_name(self):
        """Gets the rule_name of this ResponsePolicyRule.

        An identifier for this rule. Must be unique with the ResponsePolicy.

        :return: The rule_name of this ResponsePolicyRule.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this ResponsePolicyRule.

        An identifier for this rule. Must be unique with the ResponsePolicy.

        :param rule_name: The rule_name of this ResponsePolicyRule.
        :type rule_name: str
        """

        self._rule_name = rule_name
