# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RRSetRoutingPolicyLoadBalancerTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, ip_protocol: str=None, kind: str='dns#rRSetRoutingPolicyLoadBalancerTarget', load_balancer_type: str=None, network_url: str=None, port: str=None, project: str=None, region: str=None):
        """RRSetRoutingPolicyLoadBalancerTarget - a model defined in OpenAPI

        :param ip_address: The ip_address of this RRSetRoutingPolicyLoadBalancerTarget.
        :param ip_protocol: The ip_protocol of this RRSetRoutingPolicyLoadBalancerTarget.
        :param kind: The kind of this RRSetRoutingPolicyLoadBalancerTarget.
        :param load_balancer_type: The load_balancer_type of this RRSetRoutingPolicyLoadBalancerTarget.
        :param network_url: The network_url of this RRSetRoutingPolicyLoadBalancerTarget.
        :param port: The port of this RRSetRoutingPolicyLoadBalancerTarget.
        :param project: The project of this RRSetRoutingPolicyLoadBalancerTarget.
        :param region: The region of this RRSetRoutingPolicyLoadBalancerTarget.
        """
        self.openapi_types = {
            'ip_address': str,
            'ip_protocol': str,
            'kind': str,
            'load_balancer_type': str,
            'network_url': str,
            'port': str,
            'project': str,
            'region': str
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'ip_protocol': 'ipProtocol',
            'kind': 'kind',
            'load_balancer_type': 'loadBalancerType',
            'network_url': 'networkUrl',
            'port': 'port',
            'project': 'project',
            'region': 'region'
        }

        self._ip_address = ip_address
        self._ip_protocol = ip_protocol
        self._kind = kind
        self._load_balancer_type = load_balancer_type
        self._network_url = network_url
        self._port = port
        self._project = project
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RRSetRoutingPolicyLoadBalancerTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RRSetRoutingPolicyLoadBalancerTarget of this RRSetRoutingPolicyLoadBalancerTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this RRSetRoutingPolicyLoadBalancerTarget.

        The frontend IP address of the load balancer to health check.

        :return: The ip_address of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this RRSetRoutingPolicyLoadBalancerTarget.

        The frontend IP address of the load balancer to health check.

        :param ip_address: The ip_address of this RRSetRoutingPolicyLoadBalancerTarget.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this RRSetRoutingPolicyLoadBalancerTarget.

        The protocol of the load balancer to health check.

        :return: The ip_protocol of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this RRSetRoutingPolicyLoadBalancerTarget.

        The protocol of the load balancer to health check.

        :param ip_protocol: The ip_protocol of this RRSetRoutingPolicyLoadBalancerTarget.
        :type ip_protocol: str
        """
        allowed_values = ["undefined", "tcp", "udp"]  # noqa: E501
        if ip_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_protocol` ({0}), must be one of {1}"
                .format(ip_protocol, allowed_values)
            )

        self._ip_protocol = ip_protocol

    @property
    def kind(self):
        """Gets the kind of this RRSetRoutingPolicyLoadBalancerTarget.


        :return: The kind of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RRSetRoutingPolicyLoadBalancerTarget.


        :param kind: The kind of this RRSetRoutingPolicyLoadBalancerTarget.
        :type kind: str
        """

        self._kind = kind

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this RRSetRoutingPolicyLoadBalancerTarget.

        The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. 

        :return: The load_balancer_type of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this RRSetRoutingPolicyLoadBalancerTarget.

        The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. 

        :param load_balancer_type: The load_balancer_type of this RRSetRoutingPolicyLoadBalancerTarget.
        :type load_balancer_type: str
        """
        allowed_values = ["none", "globalL7ilb", "regionalL4ilb", "regionalL7ilb"]  # noqa: E501
        if load_balancer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_type` ({0}), must be one of {1}"
                .format(load_balancer_type, allowed_values)
            )

        self._load_balancer_type = load_balancer_type

    @property
    def network_url(self):
        """Gets the network_url of this RRSetRoutingPolicyLoadBalancerTarget.

        The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .

        :return: The network_url of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._network_url

    @network_url.setter
    def network_url(self, network_url):
        """Sets the network_url of this RRSetRoutingPolicyLoadBalancerTarget.

        The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .

        :param network_url: The network_url of this RRSetRoutingPolicyLoadBalancerTarget.
        :type network_url: str
        """

        self._network_url = network_url

    @property
    def port(self):
        """Gets the port of this RRSetRoutingPolicyLoadBalancerTarget.

        The configured port of the load balancer.

        :return: The port of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RRSetRoutingPolicyLoadBalancerTarget.

        The configured port of the load balancer.

        :param port: The port of this RRSetRoutingPolicyLoadBalancerTarget.
        :type port: str
        """

        self._port = port

    @property
    def project(self):
        """Gets the project of this RRSetRoutingPolicyLoadBalancerTarget.

        The project ID in which the load balancer is located.

        :return: The project of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this RRSetRoutingPolicyLoadBalancerTarget.

        The project ID in which the load balancer is located.

        :param project: The project of this RRSetRoutingPolicyLoadBalancerTarget.
        :type project: str
        """

        self._project = project

    @property
    def region(self):
        """Gets the region of this RRSetRoutingPolicyLoadBalancerTarget.

        The region in which the load balancer is located.

        :return: The region of this RRSetRoutingPolicyLoadBalancerTarget.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RRSetRoutingPolicyLoadBalancerTarget.

        The region in which the load balancer is located.

        :param region: The region of this RRSetRoutingPolicyLoadBalancerTarget.
        :type region: str
        """

        self._region = region
