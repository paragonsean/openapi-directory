# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_key_digest import DnsKeyDigest
from openapi_server import util


class DnsKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, creation_time: str=None, description: str=None, digests: List[DnsKeyDigest]=None, id: str=None, is_active: bool=None, key_length: int=None, key_tag: int=None, kind: str='dns#dnsKey', public_key: str=None, type: str=None):
        """DnsKey - a model defined in OpenAPI

        :param algorithm: The algorithm of this DnsKey.
        :param creation_time: The creation_time of this DnsKey.
        :param description: The description of this DnsKey.
        :param digests: The digests of this DnsKey.
        :param id: The id of this DnsKey.
        :param is_active: The is_active of this DnsKey.
        :param key_length: The key_length of this DnsKey.
        :param key_tag: The key_tag of this DnsKey.
        :param kind: The kind of this DnsKey.
        :param public_key: The public_key of this DnsKey.
        :param type: The type of this DnsKey.
        """
        self.openapi_types = {
            'algorithm': str,
            'creation_time': str,
            'description': str,
            'digests': List[DnsKeyDigest],
            'id': str,
            'is_active': bool,
            'key_length': int,
            'key_tag': int,
            'kind': str,
            'public_key': str,
            'type': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'creation_time': 'creationTime',
            'description': 'description',
            'digests': 'digests',
            'id': 'id',
            'is_active': 'isActive',
            'key_length': 'keyLength',
            'key_tag': 'keyTag',
            'kind': 'kind',
            'public_key': 'publicKey',
            'type': 'type'
        }

        self._algorithm = algorithm
        self._creation_time = creation_time
        self._description = description
        self._digests = digests
        self._id = id
        self._is_active = is_active
        self._key_length = key_length
        self._key_tag = key_tag
        self._kind = kind
        self._public_key = public_key
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsKey of this DnsKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this DnsKey.

        String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.

        :return: The algorithm of this DnsKey.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this DnsKey.

        String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.

        :param algorithm: The algorithm of this DnsKey.
        :type algorithm: str
        """
        allowed_values = ["rsasha1", "rsasha256", "rsasha512", "ecdsap256sha256", "ecdsap384sha384"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def creation_time(self):
        """Gets the creation_time of this DnsKey.

        The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.

        :return: The creation_time of this DnsKey.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DnsKey.

        The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.

        :param creation_time: The creation_time of this DnsKey.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this DnsKey.

        A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.

        :return: The description of this DnsKey.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DnsKey.

        A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.

        :param description: The description of this DnsKey.
        :type description: str
        """

        self._description = description

    @property
    def digests(self):
        """Gets the digests of this DnsKey.

        Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.

        :return: The digests of this DnsKey.
        :rtype: List[DnsKeyDigest]
        """
        return self._digests

    @digests.setter
    def digests(self, digests):
        """Sets the digests of this DnsKey.

        Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.

        :param digests: The digests of this DnsKey.
        :type digests: List[DnsKeyDigest]
        """

        self._digests = digests

    @property
    def id(self):
        """Gets the id of this DnsKey.

        Unique identifier for the resource; defined by the server (output only).

        :return: The id of this DnsKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DnsKey.

        Unique identifier for the resource; defined by the server (output only).

        :param id: The id of this DnsKey.
        :type id: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this DnsKey.

        Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.

        :return: The is_active of this DnsKey.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DnsKey.

        Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.

        :param is_active: The is_active of this DnsKey.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def key_length(self):
        """Gets the key_length of this DnsKey.

        Length of the key in bits. Specified at creation time, and then immutable.

        :return: The key_length of this DnsKey.
        :rtype: int
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this DnsKey.

        Length of the key in bits. Specified at creation time, and then immutable.

        :param key_length: The key_length of this DnsKey.
        :type key_length: int
        """

        self._key_length = key_length

    @property
    def key_tag(self):
        """Gets the key_tag of this DnsKey.

        The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.

        :return: The key_tag of this DnsKey.
        :rtype: int
        """
        return self._key_tag

    @key_tag.setter
    def key_tag(self, key_tag):
        """Sets the key_tag of this DnsKey.

        The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.

        :param key_tag: The key_tag of this DnsKey.
        :type key_tag: int
        """

        self._key_tag = key_tag

    @property
    def kind(self):
        """Gets the kind of this DnsKey.


        :return: The kind of this DnsKey.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DnsKey.


        :param kind: The kind of this DnsKey.
        :type kind: str
        """

        self._kind = kind

    @property
    def public_key(self):
        """Gets the public_key of this DnsKey.

        Base64 encoded public half of this key. Output only.

        :return: The public_key of this DnsKey.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DnsKey.

        Base64 encoded public half of this key. Output only.

        :param public_key: The public_key of this DnsKey.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def type(self):
        """Gets the type of this DnsKey.

        One of \"KEY_SIGNING\" or \"ZONE_SIGNING\". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.

        :return: The type of this DnsKey.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsKey.

        One of \"KEY_SIGNING\" or \"ZONE_SIGNING\". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.

        :param type: The type of this DnsKey.
        :type type: str
        """
        allowed_values = ["keySigning", "zoneSigning"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
