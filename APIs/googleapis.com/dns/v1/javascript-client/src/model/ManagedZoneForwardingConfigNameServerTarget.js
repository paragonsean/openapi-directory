/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedZoneForwardingConfigNameServerTarget model module.
 * @module model/ManagedZoneForwardingConfigNameServerTarget
 * @version v1
 */
class ManagedZoneForwardingConfigNameServerTarget {
    /**
     * Constructs a new <code>ManagedZoneForwardingConfigNameServerTarget</code>.
     * @alias module:model/ManagedZoneForwardingConfigNameServerTarget
     */
    constructor() { 
        
        ManagedZoneForwardingConfigNameServerTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#managedZoneForwardingConfigNameServerTarget';
    }

    /**
     * Constructs a <code>ManagedZoneForwardingConfigNameServerTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedZoneForwardingConfigNameServerTarget} obj Optional instance to populate.
     * @return {module:model/ManagedZoneForwardingConfigNameServerTarget} The populated <code>ManagedZoneForwardingConfigNameServerTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedZoneForwardingConfigNameServerTarget();

            if (data.hasOwnProperty('forwardingPath')) {
                obj['forwardingPath'] = ApiClient.convertToType(data['forwardingPath'], 'String');
            }
            if (data.hasOwnProperty('ipv4Address')) {
                obj['ipv4Address'] = ApiClient.convertToType(data['ipv4Address'], 'String');
            }
            if (data.hasOwnProperty('ipv6Address')) {
                obj['ipv6Address'] = ApiClient.convertToType(data['ipv6Address'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedZoneForwardingConfigNameServerTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedZoneForwardingConfigNameServerTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['forwardingPath'] && !(typeof data['forwardingPath'] === 'string' || data['forwardingPath'] instanceof String)) {
            throw new Error("Expected the field `forwardingPath` to be a primitive type in the JSON string but got " + data['forwardingPath']);
        }
        // ensure the json data is a string
        if (data['ipv4Address'] && !(typeof data['ipv4Address'] === 'string' || data['ipv4Address'] instanceof String)) {
            throw new Error("Expected the field `ipv4Address` to be a primitive type in the JSON string but got " + data['ipv4Address']);
        }
        // ensure the json data is a string
        if (data['ipv6Address'] && !(typeof data['ipv6Address'] === 'string' || data['ipv6Address'] instanceof String)) {
            throw new Error("Expected the field `ipv6Address` to be a primitive type in the JSON string but got " + data['ipv6Address']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
 * @member {module:model/ManagedZoneForwardingConfigNameServerTarget.ForwardingPathEnum} forwardingPath
 */
ManagedZoneForwardingConfigNameServerTarget.prototype['forwardingPath'] = undefined;

/**
 * IPv4 address of a target name server.
 * @member {String} ipv4Address
 */
ManagedZoneForwardingConfigNameServerTarget.prototype['ipv4Address'] = undefined;

/**
 * IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
 * @member {String} ipv6Address
 */
ManagedZoneForwardingConfigNameServerTarget.prototype['ipv6Address'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#managedZoneForwardingConfigNameServerTarget'
 */
ManagedZoneForwardingConfigNameServerTarget.prototype['kind'] = 'dns#managedZoneForwardingConfigNameServerTarget';





/**
 * Allowed values for the <code>forwardingPath</code> property.
 * @enum {String}
 * @readonly
 */
ManagedZoneForwardingConfigNameServerTarget['ForwardingPathEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "private"
     * @const
     */
    "private": "private"
};



export default ManagedZoneForwardingConfigNameServerTarget;

