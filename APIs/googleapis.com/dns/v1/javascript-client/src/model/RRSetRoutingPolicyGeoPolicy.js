/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RRSetRoutingPolicyGeoPolicyGeoPolicyItem from './RRSetRoutingPolicyGeoPolicyGeoPolicyItem';

/**
 * The RRSetRoutingPolicyGeoPolicy model module.
 * @module model/RRSetRoutingPolicyGeoPolicy
 * @version v1
 */
class RRSetRoutingPolicyGeoPolicy {
    /**
     * Constructs a new <code>RRSetRoutingPolicyGeoPolicy</code>.
     * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
     * @alias module:model/RRSetRoutingPolicyGeoPolicy
     */
    constructor() { 
        
        RRSetRoutingPolicyGeoPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#rRSetRoutingPolicyGeoPolicy';
    }

    /**
     * Constructs a <code>RRSetRoutingPolicyGeoPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RRSetRoutingPolicyGeoPolicy} obj Optional instance to populate.
     * @return {module:model/RRSetRoutingPolicyGeoPolicy} The populated <code>RRSetRoutingPolicyGeoPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RRSetRoutingPolicyGeoPolicy();

            if (data.hasOwnProperty('enableFencing')) {
                obj['enableFencing'] = ApiClient.convertToType(data['enableFencing'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [RRSetRoutingPolicyGeoPolicyGeoPolicyItem]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RRSetRoutingPolicyGeoPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RRSetRoutingPolicyGeoPolicy</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                RRSetRoutingPolicyGeoPolicyGeoPolicyItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
 * @member {Boolean} enableFencing
 */
RRSetRoutingPolicyGeoPolicy.prototype['enableFencing'] = undefined;

/**
 * The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
 * @member {Array.<module:model/RRSetRoutingPolicyGeoPolicyGeoPolicyItem>} items
 */
RRSetRoutingPolicyGeoPolicy.prototype['items'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#rRSetRoutingPolicyGeoPolicy'
 */
RRSetRoutingPolicyGeoPolicy.prototype['kind'] = 'dns#rRSetRoutingPolicyGeoPolicy';






export default RRSetRoutingPolicyGeoPolicy;

