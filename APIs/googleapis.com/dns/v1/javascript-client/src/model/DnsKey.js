/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsKeyDigest from './DnsKeyDigest';

/**
 * The DnsKey model module.
 * @module model/DnsKey
 * @version v1
 */
class DnsKey {
    /**
     * Constructs a new <code>DnsKey</code>.
     * A DNSSEC key pair.
     * @alias module:model/DnsKey
     */
    constructor() { 
        
        DnsKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#dnsKey';
    }

    /**
     * Constructs a <code>DnsKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsKey} obj Optional instance to populate.
     * @return {module:model/DnsKey} The populated <code>DnsKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsKey();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('digests')) {
                obj['digests'] = ApiClient.convertToType(data['digests'], [DnsKeyDigest]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('keyLength')) {
                obj['keyLength'] = ApiClient.convertToType(data['keyLength'], 'Number');
            }
            if (data.hasOwnProperty('keyTag')) {
                obj['keyTag'] = ApiClient.convertToType(data['keyTag'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['digests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['digests'])) {
                throw new Error("Expected the field `digests` to be an array in the JSON data but got " + data['digests']);
            }
            // validate the optional field `digests` (array)
            for (const item of data['digests']) {
                DnsKeyDigest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
 * @member {module:model/DnsKey.AlgorithmEnum} algorithm
 */
DnsKey.prototype['algorithm'] = undefined;

/**
 * The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
 * @member {String} creationTime
 */
DnsKey.prototype['creationTime'] = undefined;

/**
 * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
 * @member {String} description
 */
DnsKey.prototype['description'] = undefined;

/**
 * Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
 * @member {Array.<module:model/DnsKeyDigest>} digests
 */
DnsKey.prototype['digests'] = undefined;

/**
 * Unique identifier for the resource; defined by the server (output only).
 * @member {String} id
 */
DnsKey.prototype['id'] = undefined;

/**
 * Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
 * @member {Boolean} isActive
 */
DnsKey.prototype['isActive'] = undefined;

/**
 * Length of the key in bits. Specified at creation time, and then immutable.
 * @member {Number} keyLength
 */
DnsKey.prototype['keyLength'] = undefined;

/**
 * The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
 * @member {Number} keyTag
 */
DnsKey.prototype['keyTag'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#dnsKey'
 */
DnsKey.prototype['kind'] = 'dns#dnsKey';

/**
 * Base64 encoded public half of this key. Output only.
 * @member {String} publicKey
 */
DnsKey.prototype['publicKey'] = undefined;

/**
 * One of \"KEY_SIGNING\" or \"ZONE_SIGNING\". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.
 * @member {module:model/DnsKey.TypeEnum} type
 */
DnsKey.prototype['type'] = undefined;





/**
 * Allowed values for the <code>algorithm</code> property.
 * @enum {String}
 * @readonly
 */
DnsKey['AlgorithmEnum'] = {

    /**
     * value: "rsasha1"
     * @const
     */
    "rsasha1": "rsasha1",

    /**
     * value: "rsasha256"
     * @const
     */
    "rsasha256": "rsasha256",

    /**
     * value: "rsasha512"
     * @const
     */
    "rsasha512": "rsasha512",

    /**
     * value: "ecdsap256sha256"
     * @const
     */
    "ecdsap256sha256": "ecdsap256sha256",

    /**
     * value: "ecdsap384sha384"
     * @const
     */
    "ecdsap384sha384": "ecdsap384sha384"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DnsKey['TypeEnum'] = {

    /**
     * value: "keySigning"
     * @const
     */
    "keySigning": "keySigning",

    /**
     * value: "zoneSigning"
     * @const
     */
    "zoneSigning": "zoneSigning"
};



export default DnsKey;

