/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RRSetRoutingPolicy from './RRSetRoutingPolicy';

/**
 * The ResourceRecordSet model module.
 * @module model/ResourceRecordSet
 * @version v1
 */
class ResourceRecordSet {
    /**
     * Constructs a new <code>ResourceRecordSet</code>.
     * A unit of data that is returned by the DNS servers.
     * @alias module:model/ResourceRecordSet
     */
    constructor() { 
        
        ResourceRecordSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#resourceRecordSet';
    }

    /**
     * Constructs a <code>ResourceRecordSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceRecordSet} obj Optional instance to populate.
     * @return {module:model/ResourceRecordSet} The populated <code>ResourceRecordSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceRecordSet();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('routingPolicy')) {
                obj['routingPolicy'] = RRSetRoutingPolicy.constructFromObject(data['routingPolicy']);
            }
            if (data.hasOwnProperty('rrdatas')) {
                obj['rrdatas'] = ApiClient.convertToType(data['rrdatas'], ['String']);
            }
            if (data.hasOwnProperty('signatureRrdatas')) {
                obj['signatureRrdatas'] = ApiClient.convertToType(data['signatureRrdatas'], ['String']);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceRecordSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceRecordSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `routingPolicy`
        if (data['routingPolicy']) { // data not null
          RRSetRoutingPolicy.validateJSON(data['routingPolicy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rrdatas'])) {
            throw new Error("Expected the field `rrdatas` to be an array in the JSON data but got " + data['rrdatas']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['signatureRrdatas'])) {
            throw new Error("Expected the field `signatureRrdatas` to be an array in the JSON data but got " + data['signatureRrdatas']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} kind
 * @default 'dns#resourceRecordSet'
 */
ResourceRecordSet.prototype['kind'] = 'dns#resourceRecordSet';

/**
 * For example, www.example.com.
 * @member {String} name
 */
ResourceRecordSet.prototype['name'] = undefined;

/**
 * @member {module:model/RRSetRoutingPolicy} routingPolicy
 */
ResourceRecordSet.prototype['routingPolicy'] = undefined;

/**
 * As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
 * @member {Array.<String>} rrdatas
 */
ResourceRecordSet.prototype['rrdatas'] = undefined;

/**
 * As defined in RFC 4034 (section 3.2).
 * @member {Array.<String>} signatureRrdatas
 */
ResourceRecordSet.prototype['signatureRrdatas'] = undefined;

/**
 * Number of seconds that this ResourceRecordSet can be cached by resolvers.
 * @member {Number} ttl
 */
ResourceRecordSet.prototype['ttl'] = undefined;

/**
 * The identifier of a supported record type. See the list of Supported DNS record types.
 * @member {String} type
 */
ResourceRecordSet.prototype['type'] = undefined;






export default ResourceRecordSet;

