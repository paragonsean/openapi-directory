/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsKeySpec from './DnsKeySpec';

/**
 * The ManagedZoneDnsSecConfig model module.
 * @module model/ManagedZoneDnsSecConfig
 * @version v1
 */
class ManagedZoneDnsSecConfig {
    /**
     * Constructs a new <code>ManagedZoneDnsSecConfig</code>.
     * @alias module:model/ManagedZoneDnsSecConfig
     */
    constructor() { 
        
        ManagedZoneDnsSecConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#managedZoneDnsSecConfig';
    }

    /**
     * Constructs a <code>ManagedZoneDnsSecConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedZoneDnsSecConfig} obj Optional instance to populate.
     * @return {module:model/ManagedZoneDnsSecConfig} The populated <code>ManagedZoneDnsSecConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedZoneDnsSecConfig();

            if (data.hasOwnProperty('defaultKeySpecs')) {
                obj['defaultKeySpecs'] = ApiClient.convertToType(data['defaultKeySpecs'], [DnsKeySpec]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('nonExistence')) {
                obj['nonExistence'] = ApiClient.convertToType(data['nonExistence'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedZoneDnsSecConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedZoneDnsSecConfig</code>.
     */
    static validateJSON(data) {
        if (data['defaultKeySpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultKeySpecs'])) {
                throw new Error("Expected the field `defaultKeySpecs` to be an array in the JSON data but got " + data['defaultKeySpecs']);
            }
            // validate the optional field `defaultKeySpecs` (array)
            for (const item of data['defaultKeySpecs']) {
                DnsKeySpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['nonExistence'] && !(typeof data['nonExistence'] === 'string' || data['nonExistence'] instanceof String)) {
            throw new Error("Expected the field `nonExistence` to be a primitive type in the JSON string but got " + data['nonExistence']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
 * @member {Array.<module:model/DnsKeySpec>} defaultKeySpecs
 */
ManagedZoneDnsSecConfig.prototype['defaultKeySpecs'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#managedZoneDnsSecConfig'
 */
ManagedZoneDnsSecConfig.prototype['kind'] = 'dns#managedZoneDnsSecConfig';

/**
 * Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
 * @member {module:model/ManagedZoneDnsSecConfig.NonExistenceEnum} nonExistence
 */
ManagedZoneDnsSecConfig.prototype['nonExistence'] = undefined;

/**
 * Specifies whether DNSSEC is enabled, and what mode it is in.
 * @member {module:model/ManagedZoneDnsSecConfig.StateEnum} state
 */
ManagedZoneDnsSecConfig.prototype['state'] = undefined;





/**
 * Allowed values for the <code>nonExistence</code> property.
 * @enum {String}
 * @readonly
 */
ManagedZoneDnsSecConfig['NonExistenceEnum'] = {

    /**
     * value: "nsec"
     * @const
     */
    "nsec": "nsec",

    /**
     * value: "nsec3"
     * @const
     */
    "nsec3": "nsec3"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ManagedZoneDnsSecConfig['StateEnum'] = {

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "transfer"
     * @const
     */
    "transfer": "transfer"
};



export default ManagedZoneDnsSecConfig;

