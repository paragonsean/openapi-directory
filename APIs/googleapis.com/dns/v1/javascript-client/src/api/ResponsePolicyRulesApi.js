/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResponsePolicyRule from '../model/ResponsePolicyRule';
import ResponsePolicyRulesListResponse from '../model/ResponsePolicyRulesListResponse';
import ResponsePolicyRulesPatchResponse from '../model/ResponsePolicyRulesPatchResponse';
import ResponsePolicyRulesUpdateResponse from '../model/ResponsePolicyRulesUpdateResponse';

/**
* ResponsePolicyRules service.
* @module api/ResponsePolicyRulesApi
* @version v1
*/
export default class ResponsePolicyRulesApi {

    /**
    * Constructs a new ResponsePolicyRulesApi. 
    * @alias module:api/ResponsePolicyRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dnsResponsePolicyRulesCreate operation.
     * @callback module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsePolicyRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Response Policy Rule.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} responsePolicy User assigned name of the Response Policy containing the Response Policy Rule.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [clientOperationId] For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     * @param {module:model/ResponsePolicyRule} [responsePolicyRule] 
     * @param {module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsePolicyRule}
     */
    dnsResponsePolicyRulesCreate(project, responsePolicy, opts, callback) {
      opts = opts || {};
      let postBody = opts['responsePolicyRule'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsResponsePolicyRulesCreate");
      }
      // verify the required parameter 'responsePolicy' is set
      if (responsePolicy === undefined || responsePolicy === null) {
        throw new Error("Missing the required parameter 'responsePolicy' when calling dnsResponsePolicyRulesCreate");
      }

      let pathParams = {
        'project': project,
        'responsePolicy': responsePolicy
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'clientOperationId': opts['clientOperationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsePolicyRule;
      return this.apiClient.callApi(
        '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsResponsePolicyRulesDelete operation.
     * @callback module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a previously created Response Policy Rule.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} responsePolicy User assigned name of the Response Policy containing the Response Policy Rule.
     * @param {String} responsePolicyRule User assigned name of the Response Policy Rule addressed by this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [clientOperationId] For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     * @param {module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dnsResponsePolicyRulesDelete(project, responsePolicy, responsePolicyRule, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsResponsePolicyRulesDelete");
      }
      // verify the required parameter 'responsePolicy' is set
      if (responsePolicy === undefined || responsePolicy === null) {
        throw new Error("Missing the required parameter 'responsePolicy' when calling dnsResponsePolicyRulesDelete");
      }
      // verify the required parameter 'responsePolicyRule' is set
      if (responsePolicyRule === undefined || responsePolicyRule === null) {
        throw new Error("Missing the required parameter 'responsePolicyRule' when calling dnsResponsePolicyRulesDelete");
      }

      let pathParams = {
        'project': project,
        'responsePolicy': responsePolicy,
        'responsePolicyRule': responsePolicyRule
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'clientOperationId': opts['clientOperationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsResponsePolicyRulesGet operation.
     * @callback module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsePolicyRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the representation of an existing Response Policy Rule.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} responsePolicy User assigned name of the Response Policy containing the Response Policy Rule.
     * @param {String} responsePolicyRule User assigned name of the Response Policy Rule addressed by this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [clientOperationId] For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     * @param {module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsePolicyRule}
     */
    dnsResponsePolicyRulesGet(project, responsePolicy, responsePolicyRule, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsResponsePolicyRulesGet");
      }
      // verify the required parameter 'responsePolicy' is set
      if (responsePolicy === undefined || responsePolicy === null) {
        throw new Error("Missing the required parameter 'responsePolicy' when calling dnsResponsePolicyRulesGet");
      }
      // verify the required parameter 'responsePolicyRule' is set
      if (responsePolicyRule === undefined || responsePolicyRule === null) {
        throw new Error("Missing the required parameter 'responsePolicyRule' when calling dnsResponsePolicyRulesGet");
      }

      let pathParams = {
        'project': project,
        'responsePolicy': responsePolicy,
        'responsePolicyRule': responsePolicyRule
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'clientOperationId': opts['clientOperationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsePolicyRule;
      return this.apiClient.callApi(
        '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsResponsePolicyRulesList operation.
     * @callback module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsePolicyRulesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerates all Response Policy Rules associated with a project.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} responsePolicy User assigned name of the Response Policy to list.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.
     * @param {String} [pageToken] Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
     * @param {module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsePolicyRulesListResponse}
     */
    dnsResponsePolicyRulesList(project, responsePolicy, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsResponsePolicyRulesList");
      }
      // verify the required parameter 'responsePolicy' is set
      if (responsePolicy === undefined || responsePolicy === null) {
        throw new Error("Missing the required parameter 'responsePolicy' when calling dnsResponsePolicyRulesList");
      }

      let pathParams = {
        'project': project,
        'responsePolicy': responsePolicy
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsePolicyRulesListResponse;
      return this.apiClient.callApi(
        '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsResponsePolicyRulesPatch operation.
     * @callback module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsePolicyRulesPatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies a partial update to an existing Response Policy Rule.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} responsePolicy User assigned name of the Response Policy containing the Response Policy Rule.
     * @param {String} responsePolicyRule User assigned name of the Response Policy Rule addressed by this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [clientOperationId] For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     * @param {module:model/ResponsePolicyRule} [responsePolicyRule2] 
     * @param {module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsePolicyRulesPatchResponse}
     */
    dnsResponsePolicyRulesPatch(project, responsePolicy, responsePolicyRule, opts, callback) {
      opts = opts || {};
      let postBody = opts['responsePolicyRule2'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsResponsePolicyRulesPatch");
      }
      // verify the required parameter 'responsePolicy' is set
      if (responsePolicy === undefined || responsePolicy === null) {
        throw new Error("Missing the required parameter 'responsePolicy' when calling dnsResponsePolicyRulesPatch");
      }
      // verify the required parameter 'responsePolicyRule' is set
      if (responsePolicyRule === undefined || responsePolicyRule === null) {
        throw new Error("Missing the required parameter 'responsePolicyRule' when calling dnsResponsePolicyRulesPatch");
      }

      let pathParams = {
        'project': project,
        'responsePolicy': responsePolicy,
        'responsePolicyRule': responsePolicyRule
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'clientOperationId': opts['clientOperationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsePolicyRulesPatchResponse;
      return this.apiClient.callApi(
        '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsResponsePolicyRulesUpdate operation.
     * @callback module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsePolicyRulesUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Response Policy Rule.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} responsePolicy User assigned name of the Response Policy containing the Response Policy Rule.
     * @param {String} responsePolicyRule User assigned name of the Response Policy Rule addressed by this request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [clientOperationId] For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     * @param {module:model/ResponsePolicyRule} [responsePolicyRule2] 
     * @param {module:api/ResponsePolicyRulesApi~dnsResponsePolicyRulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponsePolicyRulesUpdateResponse}
     */
    dnsResponsePolicyRulesUpdate(project, responsePolicy, responsePolicyRule, opts, callback) {
      opts = opts || {};
      let postBody = opts['responsePolicyRule2'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsResponsePolicyRulesUpdate");
      }
      // verify the required parameter 'responsePolicy' is set
      if (responsePolicy === undefined || responsePolicy === null) {
        throw new Error("Missing the required parameter 'responsePolicy' when calling dnsResponsePolicyRulesUpdate");
      }
      // verify the required parameter 'responsePolicyRule' is set
      if (responsePolicyRule === undefined || responsePolicyRule === null) {
        throw new Error("Missing the required parameter 'responsePolicyRule' when calling dnsResponsePolicyRulesUpdate");
      }

      let pathParams = {
        'project': project,
        'responsePolicy': responsePolicy,
        'responsePolicyRule': responsePolicyRule
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'clientOperationId': opts['clientOperationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsePolicyRulesUpdateResponse;
      return this.apiClient.callApi(
        '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
