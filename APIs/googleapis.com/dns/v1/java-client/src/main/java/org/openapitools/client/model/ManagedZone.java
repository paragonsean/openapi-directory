/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ManagedZoneCloudLoggingConfig;
import org.openapitools.client.model.ManagedZoneDnsSecConfig;
import org.openapitools.client.model.ManagedZoneForwardingConfig;
import org.openapitools.client.model.ManagedZonePeeringConfig;
import org.openapitools.client.model.ManagedZonePrivateVisibilityConfig;
import org.openapitools.client.model.ManagedZoneReverseLookupConfig;
import org.openapitools.client.model.ManagedZoneServiceDirectoryConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:19.858215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedZone {
  public static final String SERIALIZED_NAME_CLOUD_LOGGING_CONFIG = "cloudLoggingConfig";
  @SerializedName(SERIALIZED_NAME_CLOUD_LOGGING_CONFIG)
  private ManagedZoneCloudLoggingConfig cloudLoggingConfig;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DNS_NAME = "dnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_DNSSEC_CONFIG = "dnssecConfig";
  @SerializedName(SERIALIZED_NAME_DNSSEC_CONFIG)
  private ManagedZoneDnsSecConfig dnssecConfig;

  public static final String SERIALIZED_NAME_FORWARDING_CONFIG = "forwardingConfig";
  @SerializedName(SERIALIZED_NAME_FORWARDING_CONFIG)
  private ManagedZoneForwardingConfig forwardingConfig;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#managedZone";

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_SERVER_SET = "nameServerSet";
  @SerializedName(SERIALIZED_NAME_NAME_SERVER_SET)
  private String nameServerSet;

  public static final String SERIALIZED_NAME_NAME_SERVERS = "nameServers";
  @SerializedName(SERIALIZED_NAME_NAME_SERVERS)
  private List<String> nameServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PEERING_CONFIG = "peeringConfig";
  @SerializedName(SERIALIZED_NAME_PEERING_CONFIG)
  private ManagedZonePeeringConfig peeringConfig;

  public static final String SERIALIZED_NAME_PRIVATE_VISIBILITY_CONFIG = "privateVisibilityConfig";
  @SerializedName(SERIALIZED_NAME_PRIVATE_VISIBILITY_CONFIG)
  private ManagedZonePrivateVisibilityConfig privateVisibilityConfig;

  public static final String SERIALIZED_NAME_REVERSE_LOOKUP_CONFIG = "reverseLookupConfig";
  @SerializedName(SERIALIZED_NAME_REVERSE_LOOKUP_CONFIG)
  private ManagedZoneReverseLookupConfig reverseLookupConfig;

  public static final String SERIALIZED_NAME_SERVICE_DIRECTORY_CONFIG = "serviceDirectoryConfig";
  @SerializedName(SERIALIZED_NAME_SERVICE_DIRECTORY_CONFIG)
  private ManagedZoneServiceDirectoryConfig serviceDirectoryConfig;

  /**
   * The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    PUBLIC("public"),
    
    PRIVATE("private");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public ManagedZone() {
  }

  public ManagedZone cloudLoggingConfig(ManagedZoneCloudLoggingConfig cloudLoggingConfig) {
    this.cloudLoggingConfig = cloudLoggingConfig;
    return this;
  }

  /**
   * Get cloudLoggingConfig
   * @return cloudLoggingConfig
   */
  @javax.annotation.Nullable
  public ManagedZoneCloudLoggingConfig getCloudLoggingConfig() {
    return cloudLoggingConfig;
  }

  public void setCloudLoggingConfig(ManagedZoneCloudLoggingConfig cloudLoggingConfig) {
    this.cloudLoggingConfig = cloudLoggingConfig;
  }


  public ManagedZone creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time that this resource was created on the server. This is in RFC3339 text format. Output only.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public ManagedZone description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A mutable string of at most 1024 characters associated with this resource for the user&#39;s convenience. Has no effect on the managed zone&#39;s function.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ManagedZone dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * The DNS name of this managed zone, for instance \&quot;example.com.\&quot;.
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public ManagedZone dnssecConfig(ManagedZoneDnsSecConfig dnssecConfig) {
    this.dnssecConfig = dnssecConfig;
    return this;
  }

  /**
   * Get dnssecConfig
   * @return dnssecConfig
   */
  @javax.annotation.Nullable
  public ManagedZoneDnsSecConfig getDnssecConfig() {
    return dnssecConfig;
  }

  public void setDnssecConfig(ManagedZoneDnsSecConfig dnssecConfig) {
    this.dnssecConfig = dnssecConfig;
  }


  public ManagedZone forwardingConfig(ManagedZoneForwardingConfig forwardingConfig) {
    this.forwardingConfig = forwardingConfig;
    return this;
  }

  /**
   * Get forwardingConfig
   * @return forwardingConfig
   */
  @javax.annotation.Nullable
  public ManagedZoneForwardingConfig getForwardingConfig() {
    return forwardingConfig;
  }

  public void setForwardingConfig(ManagedZoneForwardingConfig forwardingConfig) {
    this.forwardingConfig = forwardingConfig;
  }


  public ManagedZone id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the resource; defined by the server (output only)
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ManagedZone kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ManagedZone labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ManagedZone putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ManagedZone name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ManagedZone nameServerSet(String nameServerSet) {
    this.nameServerSet = nameServerSet;
    return this;
  }

  /**
   * Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.
   * @return nameServerSet
   */
  @javax.annotation.Nullable
  public String getNameServerSet() {
    return nameServerSet;
  }

  public void setNameServerSet(String nameServerSet) {
    this.nameServerSet = nameServerSet;
  }


  public ManagedZone nameServers(List<String> nameServers) {
    this.nameServers = nameServers;
    return this;
  }

  public ManagedZone addNameServersItem(String nameServersItem) {
    if (this.nameServers == null) {
      this.nameServers = new ArrayList<>();
    }
    this.nameServers.add(nameServersItem);
    return this;
  }

  /**
   * Delegate your managed_zone to these virtual name servers; defined by the server (output only)
   * @return nameServers
   */
  @javax.annotation.Nullable
  public List<String> getNameServers() {
    return nameServers;
  }

  public void setNameServers(List<String> nameServers) {
    this.nameServers = nameServers;
  }


  public ManagedZone peeringConfig(ManagedZonePeeringConfig peeringConfig) {
    this.peeringConfig = peeringConfig;
    return this;
  }

  /**
   * Get peeringConfig
   * @return peeringConfig
   */
  @javax.annotation.Nullable
  public ManagedZonePeeringConfig getPeeringConfig() {
    return peeringConfig;
  }

  public void setPeeringConfig(ManagedZonePeeringConfig peeringConfig) {
    this.peeringConfig = peeringConfig;
  }


  public ManagedZone privateVisibilityConfig(ManagedZonePrivateVisibilityConfig privateVisibilityConfig) {
    this.privateVisibilityConfig = privateVisibilityConfig;
    return this;
  }

  /**
   * Get privateVisibilityConfig
   * @return privateVisibilityConfig
   */
  @javax.annotation.Nullable
  public ManagedZonePrivateVisibilityConfig getPrivateVisibilityConfig() {
    return privateVisibilityConfig;
  }

  public void setPrivateVisibilityConfig(ManagedZonePrivateVisibilityConfig privateVisibilityConfig) {
    this.privateVisibilityConfig = privateVisibilityConfig;
  }


  public ManagedZone reverseLookupConfig(ManagedZoneReverseLookupConfig reverseLookupConfig) {
    this.reverseLookupConfig = reverseLookupConfig;
    return this;
  }

  /**
   * Get reverseLookupConfig
   * @return reverseLookupConfig
   */
  @javax.annotation.Nullable
  public ManagedZoneReverseLookupConfig getReverseLookupConfig() {
    return reverseLookupConfig;
  }

  public void setReverseLookupConfig(ManagedZoneReverseLookupConfig reverseLookupConfig) {
    this.reverseLookupConfig = reverseLookupConfig;
  }


  public ManagedZone serviceDirectoryConfig(ManagedZoneServiceDirectoryConfig serviceDirectoryConfig) {
    this.serviceDirectoryConfig = serviceDirectoryConfig;
    return this;
  }

  /**
   * Get serviceDirectoryConfig
   * @return serviceDirectoryConfig
   */
  @javax.annotation.Nullable
  public ManagedZoneServiceDirectoryConfig getServiceDirectoryConfig() {
    return serviceDirectoryConfig;
  }

  public void setServiceDirectoryConfig(ManagedZoneServiceDirectoryConfig serviceDirectoryConfig) {
    this.serviceDirectoryConfig = serviceDirectoryConfig;
  }


  public ManagedZone visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The zone&#39;s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedZone managedZone = (ManagedZone) o;
    return Objects.equals(this.cloudLoggingConfig, managedZone.cloudLoggingConfig) &&
        Objects.equals(this.creationTime, managedZone.creationTime) &&
        Objects.equals(this.description, managedZone.description) &&
        Objects.equals(this.dnsName, managedZone.dnsName) &&
        Objects.equals(this.dnssecConfig, managedZone.dnssecConfig) &&
        Objects.equals(this.forwardingConfig, managedZone.forwardingConfig) &&
        Objects.equals(this.id, managedZone.id) &&
        Objects.equals(this.kind, managedZone.kind) &&
        Objects.equals(this.labels, managedZone.labels) &&
        Objects.equals(this.name, managedZone.name) &&
        Objects.equals(this.nameServerSet, managedZone.nameServerSet) &&
        Objects.equals(this.nameServers, managedZone.nameServers) &&
        Objects.equals(this.peeringConfig, managedZone.peeringConfig) &&
        Objects.equals(this.privateVisibilityConfig, managedZone.privateVisibilityConfig) &&
        Objects.equals(this.reverseLookupConfig, managedZone.reverseLookupConfig) &&
        Objects.equals(this.serviceDirectoryConfig, managedZone.serviceDirectoryConfig) &&
        Objects.equals(this.visibility, managedZone.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudLoggingConfig, creationTime, description, dnsName, dnssecConfig, forwardingConfig, id, kind, labels, name, nameServerSet, nameServers, peeringConfig, privateVisibilityConfig, reverseLookupConfig, serviceDirectoryConfig, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedZone {\n");
    sb.append("    cloudLoggingConfig: ").append(toIndentedString(cloudLoggingConfig)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    dnssecConfig: ").append(toIndentedString(dnssecConfig)).append("\n");
    sb.append("    forwardingConfig: ").append(toIndentedString(forwardingConfig)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameServerSet: ").append(toIndentedString(nameServerSet)).append("\n");
    sb.append("    nameServers: ").append(toIndentedString(nameServers)).append("\n");
    sb.append("    peeringConfig: ").append(toIndentedString(peeringConfig)).append("\n");
    sb.append("    privateVisibilityConfig: ").append(toIndentedString(privateVisibilityConfig)).append("\n");
    sb.append("    reverseLookupConfig: ").append(toIndentedString(reverseLookupConfig)).append("\n");
    sb.append("    serviceDirectoryConfig: ").append(toIndentedString(serviceDirectoryConfig)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudLoggingConfig");
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("dnsName");
    openapiFields.add("dnssecConfig");
    openapiFields.add("forwardingConfig");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("nameServerSet");
    openapiFields.add("nameServers");
    openapiFields.add("peeringConfig");
    openapiFields.add("privateVisibilityConfig");
    openapiFields.add("reverseLookupConfig");
    openapiFields.add("serviceDirectoryConfig");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedZone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedZone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedZone is not found in the empty JSON string", ManagedZone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedZone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedZone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudLoggingConfig`
      if (jsonObj.get("cloudLoggingConfig") != null && !jsonObj.get("cloudLoggingConfig").isJsonNull()) {
        ManagedZoneCloudLoggingConfig.validateJsonElement(jsonObj.get("cloudLoggingConfig"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dnsName") != null && !jsonObj.get("dnsName").isJsonNull()) && !jsonObj.get("dnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsName").toString()));
      }
      // validate the optional field `dnssecConfig`
      if (jsonObj.get("dnssecConfig") != null && !jsonObj.get("dnssecConfig").isJsonNull()) {
        ManagedZoneDnsSecConfig.validateJsonElement(jsonObj.get("dnssecConfig"));
      }
      // validate the optional field `forwardingConfig`
      if (jsonObj.get("forwardingConfig") != null && !jsonObj.get("forwardingConfig").isJsonNull()) {
        ManagedZoneForwardingConfig.validateJsonElement(jsonObj.get("forwardingConfig"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nameServerSet") != null && !jsonObj.get("nameServerSet").isJsonNull()) && !jsonObj.get("nameServerSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameServerSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameServerSet").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nameServers") != null && !jsonObj.get("nameServers").isJsonNull() && !jsonObj.get("nameServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameServers` to be an array in the JSON string but got `%s`", jsonObj.get("nameServers").toString()));
      }
      // validate the optional field `peeringConfig`
      if (jsonObj.get("peeringConfig") != null && !jsonObj.get("peeringConfig").isJsonNull()) {
        ManagedZonePeeringConfig.validateJsonElement(jsonObj.get("peeringConfig"));
      }
      // validate the optional field `privateVisibilityConfig`
      if (jsonObj.get("privateVisibilityConfig") != null && !jsonObj.get("privateVisibilityConfig").isJsonNull()) {
        ManagedZonePrivateVisibilityConfig.validateJsonElement(jsonObj.get("privateVisibilityConfig"));
      }
      // validate the optional field `reverseLookupConfig`
      if (jsonObj.get("reverseLookupConfig") != null && !jsonObj.get("reverseLookupConfig").isJsonNull()) {
        ManagedZoneReverseLookupConfig.validateJsonElement(jsonObj.get("reverseLookupConfig"));
      }
      // validate the optional field `serviceDirectoryConfig`
      if (jsonObj.get("serviceDirectoryConfig") != null && !jsonObj.get("serviceDirectoryConfig").isJsonNull()) {
        ManagedZoneServiceDirectoryConfig.validateJsonElement(jsonObj.get("serviceDirectoryConfig"));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedZone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedZone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedZone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedZone.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedZone>() {
           @Override
           public void write(JsonWriter out, ManagedZone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedZone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedZone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedZone
   * @throws IOException if the JSON string is invalid with respect to ManagedZone
   */
  public static ManagedZone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedZone.class);
  }

  /**
   * Convert an instance of ManagedZone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

