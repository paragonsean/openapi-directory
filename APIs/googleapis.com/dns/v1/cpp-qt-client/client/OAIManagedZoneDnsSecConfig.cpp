/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedZoneDnsSecConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedZoneDnsSecConfig::OAIManagedZoneDnsSecConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedZoneDnsSecConfig::OAIManagedZoneDnsSecConfig() {
    this->initializeModel();
}

OAIManagedZoneDnsSecConfig::~OAIManagedZoneDnsSecConfig() {}

void OAIManagedZoneDnsSecConfig::initializeModel() {

    m_default_key_specs_isSet = false;
    m_default_key_specs_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_non_existence_isSet = false;
    m_non_existence_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIManagedZoneDnsSecConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedZoneDnsSecConfig::fromJsonObject(QJsonObject json) {

    m_default_key_specs_isValid = ::OpenAPI::fromJsonValue(m_default_key_specs, json[QString("defaultKeySpecs")]);
    m_default_key_specs_isSet = !json[QString("defaultKeySpecs")].isNull() && m_default_key_specs_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_non_existence_isValid = ::OpenAPI::fromJsonValue(m_non_existence, json[QString("nonExistence")]);
    m_non_existence_isSet = !json[QString("nonExistence")].isNull() && m_non_existence_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIManagedZoneDnsSecConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedZoneDnsSecConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_default_key_specs.size() > 0) {
        obj.insert(QString("defaultKeySpecs"), ::OpenAPI::toJsonValue(m_default_key_specs));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_non_existence_isSet) {
        obj.insert(QString("nonExistence"), ::OpenAPI::toJsonValue(m_non_existence));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<OAIDnsKeySpec> OAIManagedZoneDnsSecConfig::getDefaultKeySpecs() const {
    return m_default_key_specs;
}
void OAIManagedZoneDnsSecConfig::setDefaultKeySpecs(const QList<OAIDnsKeySpec> &default_key_specs) {
    m_default_key_specs = default_key_specs;
    m_default_key_specs_isSet = true;
}

bool OAIManagedZoneDnsSecConfig::is_default_key_specs_Set() const{
    return m_default_key_specs_isSet;
}

bool OAIManagedZoneDnsSecConfig::is_default_key_specs_Valid() const{
    return m_default_key_specs_isValid;
}

QString OAIManagedZoneDnsSecConfig::getKind() const {
    return m_kind;
}
void OAIManagedZoneDnsSecConfig::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIManagedZoneDnsSecConfig::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIManagedZoneDnsSecConfig::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIManagedZoneDnsSecConfig::getNonExistence() const {
    return m_non_existence;
}
void OAIManagedZoneDnsSecConfig::setNonExistence(const QString &non_existence) {
    m_non_existence = non_existence;
    m_non_existence_isSet = true;
}

bool OAIManagedZoneDnsSecConfig::is_non_existence_Set() const{
    return m_non_existence_isSet;
}

bool OAIManagedZoneDnsSecConfig::is_non_existence_Valid() const{
    return m_non_existence_isValid;
}

QString OAIManagedZoneDnsSecConfig::getState() const {
    return m_state;
}
void OAIManagedZoneDnsSecConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIManagedZoneDnsSecConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIManagedZoneDnsSecConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIManagedZoneDnsSecConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_key_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_existence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedZoneDnsSecConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
