/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRRSetRoutingPolicyHealthCheckTargets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRRSetRoutingPolicyHealthCheckTargets::OAIRRSetRoutingPolicyHealthCheckTargets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRRSetRoutingPolicyHealthCheckTargets::OAIRRSetRoutingPolicyHealthCheckTargets() {
    this->initializeModel();
}

OAIRRSetRoutingPolicyHealthCheckTargets::~OAIRRSetRoutingPolicyHealthCheckTargets() {}

void OAIRRSetRoutingPolicyHealthCheckTargets::initializeModel() {

    m_external_endpoints_isSet = false;
    m_external_endpoints_isValid = false;

    m_internal_load_balancers_isSet = false;
    m_internal_load_balancers_isValid = false;
}

void OAIRRSetRoutingPolicyHealthCheckTargets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRRSetRoutingPolicyHealthCheckTargets::fromJsonObject(QJsonObject json) {

    m_external_endpoints_isValid = ::OpenAPI::fromJsonValue(m_external_endpoints, json[QString("externalEndpoints")]);
    m_external_endpoints_isSet = !json[QString("externalEndpoints")].isNull() && m_external_endpoints_isValid;

    m_internal_load_balancers_isValid = ::OpenAPI::fromJsonValue(m_internal_load_balancers, json[QString("internalLoadBalancers")]);
    m_internal_load_balancers_isSet = !json[QString("internalLoadBalancers")].isNull() && m_internal_load_balancers_isValid;
}

QString OAIRRSetRoutingPolicyHealthCheckTargets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRRSetRoutingPolicyHealthCheckTargets::asJsonObject() const {
    QJsonObject obj;
    if (m_external_endpoints.size() > 0) {
        obj.insert(QString("externalEndpoints"), ::OpenAPI::toJsonValue(m_external_endpoints));
    }
    if (m_internal_load_balancers.size() > 0) {
        obj.insert(QString("internalLoadBalancers"), ::OpenAPI::toJsonValue(m_internal_load_balancers));
    }
    return obj;
}

QList<QString> OAIRRSetRoutingPolicyHealthCheckTargets::getExternalEndpoints() const {
    return m_external_endpoints;
}
void OAIRRSetRoutingPolicyHealthCheckTargets::setExternalEndpoints(const QList<QString> &external_endpoints) {
    m_external_endpoints = external_endpoints;
    m_external_endpoints_isSet = true;
}

bool OAIRRSetRoutingPolicyHealthCheckTargets::is_external_endpoints_Set() const{
    return m_external_endpoints_isSet;
}

bool OAIRRSetRoutingPolicyHealthCheckTargets::is_external_endpoints_Valid() const{
    return m_external_endpoints_isValid;
}

QList<OAIRRSetRoutingPolicyLoadBalancerTarget> OAIRRSetRoutingPolicyHealthCheckTargets::getInternalLoadBalancers() const {
    return m_internal_load_balancers;
}
void OAIRRSetRoutingPolicyHealthCheckTargets::setInternalLoadBalancers(const QList<OAIRRSetRoutingPolicyLoadBalancerTarget> &internal_load_balancers) {
    m_internal_load_balancers = internal_load_balancers;
    m_internal_load_balancers_isSet = true;
}

bool OAIRRSetRoutingPolicyHealthCheckTargets::is_internal_load_balancers_Set() const{
    return m_internal_load_balancers_isSet;
}

bool OAIRRSetRoutingPolicyHealthCheckTargets::is_internal_load_balancers_Valid() const{
    return m_internal_load_balancers_isValid;
}

bool OAIRRSetRoutingPolicyHealthCheckTargets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_load_balancers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRRSetRoutingPolicyHealthCheckTargets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
