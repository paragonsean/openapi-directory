/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsKey::OAIDnsKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsKey::OAIDnsKey() {
    this->initializeModel();
}

OAIDnsKey::~OAIDnsKey() {}

void OAIDnsKey::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_digests_isSet = false;
    m_digests_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_key_length_isSet = false;
    m_key_length_isValid = false;

    m_key_tag_isSet = false;
    m_key_tag_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDnsKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsKey::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_digests_isValid = ::OpenAPI::fromJsonValue(m_digests, json[QString("digests")]);
    m_digests_isSet = !json[QString("digests")].isNull() && m_digests_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_key_length_isValid = ::OpenAPI::fromJsonValue(m_key_length, json[QString("keyLength")]);
    m_key_length_isSet = !json[QString("keyLength")].isNull() && m_key_length_isValid;

    m_key_tag_isValid = ::OpenAPI::fromJsonValue(m_key_tag, json[QString("keyTag")]);
    m_key_tag_isSet = !json[QString("keyTag")].isNull() && m_key_tag_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDnsKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsKey::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_digests.size() > 0) {
        obj.insert(QString("digests"), ::OpenAPI::toJsonValue(m_digests));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_key_length_isSet) {
        obj.insert(QString("keyLength"), ::OpenAPI::toJsonValue(m_key_length));
    }
    if (m_key_tag_isSet) {
        obj.insert(QString("keyTag"), ::OpenAPI::toJsonValue(m_key_tag));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDnsKey::getAlgorithm() const {
    return m_algorithm;
}
void OAIDnsKey::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIDnsKey::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIDnsKey::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAIDnsKey::getCreationTime() const {
    return m_creation_time;
}
void OAIDnsKey::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDnsKey::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDnsKey::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDnsKey::getDescription() const {
    return m_description;
}
void OAIDnsKey::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDnsKey::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDnsKey::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIDnsKeyDigest> OAIDnsKey::getDigests() const {
    return m_digests;
}
void OAIDnsKey::setDigests(const QList<OAIDnsKeyDigest> &digests) {
    m_digests = digests;
    m_digests_isSet = true;
}

bool OAIDnsKey::is_digests_Set() const{
    return m_digests_isSet;
}

bool OAIDnsKey::is_digests_Valid() const{
    return m_digests_isValid;
}

QString OAIDnsKey::getId() const {
    return m_id;
}
void OAIDnsKey::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDnsKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDnsKey::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDnsKey::isIsActive() const {
    return m_is_active;
}
void OAIDnsKey::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIDnsKey::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIDnsKey::is_is_active_Valid() const{
    return m_is_active_isValid;
}

qint32 OAIDnsKey::getKeyLength() const {
    return m_key_length;
}
void OAIDnsKey::setKeyLength(const qint32 &key_length) {
    m_key_length = key_length;
    m_key_length_isSet = true;
}

bool OAIDnsKey::is_key_length_Set() const{
    return m_key_length_isSet;
}

bool OAIDnsKey::is_key_length_Valid() const{
    return m_key_length_isValid;
}

qint32 OAIDnsKey::getKeyTag() const {
    return m_key_tag;
}
void OAIDnsKey::setKeyTag(const qint32 &key_tag) {
    m_key_tag = key_tag;
    m_key_tag_isSet = true;
}

bool OAIDnsKey::is_key_tag_Set() const{
    return m_key_tag_isSet;
}

bool OAIDnsKey::is_key_tag_Valid() const{
    return m_key_tag_isValid;
}

QString OAIDnsKey::getKind() const {
    return m_kind;
}
void OAIDnsKey::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDnsKey::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDnsKey::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDnsKey::getPublicKey() const {
    return m_public_key;
}
void OAIDnsKey::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIDnsKey::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIDnsKey::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIDnsKey::getType() const {
    return m_type;
}
void OAIDnsKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDnsKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDnsKey::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDnsKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
