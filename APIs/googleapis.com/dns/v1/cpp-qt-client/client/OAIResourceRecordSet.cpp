/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceRecordSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceRecordSet::OAIResourceRecordSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceRecordSet::OAIResourceRecordSet() {
    this->initializeModel();
}

OAIResourceRecordSet::~OAIResourceRecordSet() {}

void OAIResourceRecordSet::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_routing_policy_isSet = false;
    m_routing_policy_isValid = false;

    m_rrdatas_isSet = false;
    m_rrdatas_isValid = false;

    m_signature_rrdatas_isSet = false;
    m_signature_rrdatas_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceRecordSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceRecordSet::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_routing_policy_isValid = ::OpenAPI::fromJsonValue(m_routing_policy, json[QString("routingPolicy")]);
    m_routing_policy_isSet = !json[QString("routingPolicy")].isNull() && m_routing_policy_isValid;

    m_rrdatas_isValid = ::OpenAPI::fromJsonValue(m_rrdatas, json[QString("rrdatas")]);
    m_rrdatas_isSet = !json[QString("rrdatas")].isNull() && m_rrdatas_isValid;

    m_signature_rrdatas_isValid = ::OpenAPI::fromJsonValue(m_signature_rrdatas, json[QString("signatureRrdatas")]);
    m_signature_rrdatas_isSet = !json[QString("signatureRrdatas")].isNull() && m_signature_rrdatas_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceRecordSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceRecordSet::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_routing_policy.isSet()) {
        obj.insert(QString("routingPolicy"), ::OpenAPI::toJsonValue(m_routing_policy));
    }
    if (m_rrdatas.size() > 0) {
        obj.insert(QString("rrdatas"), ::OpenAPI::toJsonValue(m_rrdatas));
    }
    if (m_signature_rrdatas.size() > 0) {
        obj.insert(QString("signatureRrdatas"), ::OpenAPI::toJsonValue(m_signature_rrdatas));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIResourceRecordSet::getKind() const {
    return m_kind;
}
void OAIResourceRecordSet::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIResourceRecordSet::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIResourceRecordSet::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIResourceRecordSet::getName() const {
    return m_name;
}
void OAIResourceRecordSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceRecordSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceRecordSet::is_name_Valid() const{
    return m_name_isValid;
}

OAIRRSetRoutingPolicy OAIResourceRecordSet::getRoutingPolicy() const {
    return m_routing_policy;
}
void OAIResourceRecordSet::setRoutingPolicy(const OAIRRSetRoutingPolicy &routing_policy) {
    m_routing_policy = routing_policy;
    m_routing_policy_isSet = true;
}

bool OAIResourceRecordSet::is_routing_policy_Set() const{
    return m_routing_policy_isSet;
}

bool OAIResourceRecordSet::is_routing_policy_Valid() const{
    return m_routing_policy_isValid;
}

QList<QString> OAIResourceRecordSet::getRrdatas() const {
    return m_rrdatas;
}
void OAIResourceRecordSet::setRrdatas(const QList<QString> &rrdatas) {
    m_rrdatas = rrdatas;
    m_rrdatas_isSet = true;
}

bool OAIResourceRecordSet::is_rrdatas_Set() const{
    return m_rrdatas_isSet;
}

bool OAIResourceRecordSet::is_rrdatas_Valid() const{
    return m_rrdatas_isValid;
}

QList<QString> OAIResourceRecordSet::getSignatureRrdatas() const {
    return m_signature_rrdatas;
}
void OAIResourceRecordSet::setSignatureRrdatas(const QList<QString> &signature_rrdatas) {
    m_signature_rrdatas = signature_rrdatas;
    m_signature_rrdatas_isSet = true;
}

bool OAIResourceRecordSet::is_signature_rrdatas_Set() const{
    return m_signature_rrdatas_isSet;
}

bool OAIResourceRecordSet::is_signature_rrdatas_Valid() const{
    return m_signature_rrdatas_isValid;
}

qint32 OAIResourceRecordSet::getTtl() const {
    return m_ttl;
}
void OAIResourceRecordSet::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIResourceRecordSet::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIResourceRecordSet::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIResourceRecordSet::getType() const {
    return m_type;
}
void OAIResourceRecordSet::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceRecordSet::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceRecordSet::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceRecordSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrdatas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_rrdatas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceRecordSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
