/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DnsKey from '../model/DnsKey';
import DnsKeysListResponse from '../model/DnsKeysListResponse';

/**
* DnsKeys service.
* @module api/DnsKeysApi
* @version v2
*/
export default class DnsKeysApi {

    /**
    * Constructs a new DnsKeysApi. 
    * @alias module:api/DnsKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dnsDnsKeysGet operation.
     * @callback module:api/DnsKeysApi~dnsDnsKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the representation of an existing DnsKey.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} location Specifies the location of the resource. This information will be used for routing and will be part of the resource name.
     * @param {String} managedZone Identifies the managed zone addressed by this request. Can be the managed zone name or ID.
     * @param {String} dnsKeyId The identifier of the requested DnsKey.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [clientOperationId] For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     * @param {String} [digestType] An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type is computed and displayed.
     * @param {module:api/DnsKeysApi~dnsDnsKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsKey}
     */
    dnsDnsKeysGet(project, location, managedZone, dnsKeyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsDnsKeysGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling dnsDnsKeysGet");
      }
      // verify the required parameter 'managedZone' is set
      if (managedZone === undefined || managedZone === null) {
        throw new Error("Missing the required parameter 'managedZone' when calling dnsDnsKeysGet");
      }
      // verify the required parameter 'dnsKeyId' is set
      if (dnsKeyId === undefined || dnsKeyId === null) {
        throw new Error("Missing the required parameter 'dnsKeyId' when calling dnsDnsKeysGet");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'managedZone': managedZone,
        'dnsKeyId': dnsKeyId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'clientOperationId': opts['clientOperationId'],
        'digestType': opts['digestType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DnsKey;
      return this.apiClient.callApi(
        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsDnsKeysList operation.
     * @callback module:api/DnsKeysApi~dnsDnsKeysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsKeysListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerates DnsKeys to a ResourceRecordSet collection.
     * @param {String} project Identifies the project addressed by this request.
     * @param {String} location Specifies the location of the resource. This information will be used for routing and will be part of the resource name.
     * @param {String} managedZone Identifies the managed zone addressed by this request. Can be the managed zone name or ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [digestType] An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type is computed and displayed.
     * @param {Number} [maxResults] Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.
     * @param {String} [pageToken] Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.
     * @param {module:api/DnsKeysApi~dnsDnsKeysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsKeysListResponse}
     */
    dnsDnsKeysList(project, location, managedZone, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling dnsDnsKeysList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling dnsDnsKeysList");
      }
      // verify the required parameter 'managedZone' is set
      if (managedZone === undefined || managedZone === null) {
        throw new Error("Missing the required parameter 'managedZone' when calling dnsDnsKeysList");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'managedZone': managedZone
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'digestType': opts['digestType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DnsKeysListResponse;
      return this.apiClient.callApi(
        '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
