/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DnsKeySpec model module.
 * @module model/DnsKeySpec
 * @version v2
 */
class DnsKeySpec {
    /**
     * Constructs a new <code>DnsKeySpec</code>.
     * Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
     * @alias module:model/DnsKeySpec
     */
    constructor() { 
        
        DnsKeySpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#dnsKeySpec';
    }

    /**
     * Constructs a <code>DnsKeySpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsKeySpec} obj Optional instance to populate.
     * @return {module:model/DnsKeySpec} The populated <code>DnsKeySpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsKeySpec();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('keyLength')) {
                obj['keyLength'] = ApiClient.convertToType(data['keyLength'], 'Number');
            }
            if (data.hasOwnProperty('keyType')) {
                obj['keyType'] = ApiClient.convertToType(data['keyType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsKeySpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsKeySpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['keyType'] && !(typeof data['keyType'] === 'string' || data['keyType'] instanceof String)) {
            throw new Error("Expected the field `keyType` to be a primitive type in the JSON string but got " + data['keyType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * String mnemonic specifying the DNSSEC algorithm of this key.
 * @member {module:model/DnsKeySpec.AlgorithmEnum} algorithm
 */
DnsKeySpec.prototype['algorithm'] = undefined;

/**
 * Length of the keys in bits.
 * @member {Number} keyLength
 */
DnsKeySpec.prototype['keyLength'] = undefined;

/**
 * Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
 * @member {module:model/DnsKeySpec.KeyTypeEnum} keyType
 */
DnsKeySpec.prototype['keyType'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#dnsKeySpec'
 */
DnsKeySpec.prototype['kind'] = 'dns#dnsKeySpec';





/**
 * Allowed values for the <code>algorithm</code> property.
 * @enum {String}
 * @readonly
 */
DnsKeySpec['AlgorithmEnum'] = {

    /**
     * value: "RSASHA1"
     * @const
     */
    "RSASHA1": "RSASHA1",

    /**
     * value: "RSASHA256"
     * @const
     */
    "RSASHA256": "RSASHA256",

    /**
     * value: "RSASHA512"
     * @const
     */
    "RSASHA512": "RSASHA512",

    /**
     * value: "ECDSAP256SHA256"
     * @const
     */
    "ECDSAP256SHA256": "ECDSAP256SHA256",

    /**
     * value: "ECDSAP384SHA384"
     * @const
     */
    "ECDSAP384SHA384": "ECDSAP384SHA384"
};


/**
 * Allowed values for the <code>keyType</code> property.
 * @enum {String}
 * @readonly
 */
DnsKeySpec['KeyTypeEnum'] = {

    /**
     * value: "KEY_SIGNING"
     * @const
     */
    "KEY_SIGNING": "KEY_SIGNING",

    /**
     * value: "ZONE_SIGNING"
     * @const
     */
    "ZONE_SIGNING": "ZONE_SIGNING"
};



export default DnsKeySpec;

