/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceRecordSet from './ResourceRecordSet';

/**
 * The Change model module.
 * @module model/Change
 * @version v2
 */
class Change {
    /**
     * Constructs a new <code>Change</code>.
     * A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.
     * @alias module:model/Change
     */
    constructor() { 
        
        Change.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#change';
    }

    /**
     * Constructs a <code>Change</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Change} obj Optional instance to populate.
     * @return {module:model/Change} The populated <code>Change</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Change();

            if (data.hasOwnProperty('additions')) {
                obj['additions'] = ApiClient.convertToType(data['additions'], [ResourceRecordSet]);
            }
            if (data.hasOwnProperty('deletions')) {
                obj['deletions'] = ApiClient.convertToType(data['deletions'], [ResourceRecordSet]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isServing')) {
                obj['isServing'] = ApiClient.convertToType(data['isServing'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Change</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Change</code>.
     */
    static validateJSON(data) {
        if (data['additions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additions'])) {
                throw new Error("Expected the field `additions` to be an array in the JSON data but got " + data['additions']);
            }
            // validate the optional field `additions` (array)
            for (const item of data['additions']) {
                ResourceRecordSet.validateJSON(item);
            };
        }
        if (data['deletions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deletions'])) {
                throw new Error("Expected the field `deletions` to be an array in the JSON data but got " + data['deletions']);
            }
            // validate the optional field `deletions` (array)
            for (const item of data['deletions']) {
                ResourceRecordSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Which ResourceRecordSets to add?
 * @member {Array.<module:model/ResourceRecordSet>} additions
 */
Change.prototype['additions'] = undefined;

/**
 * Which ResourceRecordSets to remove? Must match existing data exactly.
 * @member {Array.<module:model/ResourceRecordSet>} deletions
 */
Change.prototype['deletions'] = undefined;

/**
 * Unique identifier for the resource; defined by the server (output only).
 * @member {String} id
 */
Change.prototype['id'] = undefined;

/**
 * If the DNS queries for the zone will be served.
 * @member {Boolean} isServing
 */
Change.prototype['isServing'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#change'
 */
Change.prototype['kind'] = 'dns#change';

/**
 * The time that this operation was started by the server (output only). This is in RFC3339 text format.
 * @member {String} startTime
 */
Change.prototype['startTime'] = undefined;

/**
 * Status of the operation (output only). A status of \"done\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
 * @member {module:model/Change.StatusEnum} status
 */
Change.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Change['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE"
};



export default Change;

