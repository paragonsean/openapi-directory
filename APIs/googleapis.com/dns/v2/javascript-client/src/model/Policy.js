/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyAlternativeNameServerConfig from './PolicyAlternativeNameServerConfig';
import PolicyNetwork from './PolicyNetwork';

/**
 * The Policy model module.
 * @module model/Policy
 * @version v2
 */
class Policy {
    /**
     * Constructs a new <code>Policy</code>.
     * A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
     * @alias module:model/Policy
     */
    constructor() { 
        
        Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#policy';
    }

    /**
     * Constructs a <code>Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Policy} obj Optional instance to populate.
     * @return {module:model/Policy} The populated <code>Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Policy();

            if (data.hasOwnProperty('alternativeNameServerConfig')) {
                obj['alternativeNameServerConfig'] = PolicyAlternativeNameServerConfig.constructFromObject(data['alternativeNameServerConfig']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enableInboundForwarding')) {
                obj['enableInboundForwarding'] = ApiClient.convertToType(data['enableInboundForwarding'], 'Boolean');
            }
            if (data.hasOwnProperty('enableLogging')) {
                obj['enableLogging'] = ApiClient.convertToType(data['enableLogging'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [PolicyNetwork]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Policy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alternativeNameServerConfig`
        if (data['alternativeNameServerConfig']) { // data not null
          PolicyAlternativeNameServerConfig.validateJSON(data['alternativeNameServerConfig']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                PolicyNetwork.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/PolicyAlternativeNameServerConfig} alternativeNameServerConfig
 */
Policy.prototype['alternativeNameServerConfig'] = undefined;

/**
 * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
 * @member {String} description
 */
Policy.prototype['description'] = undefined;

/**
 * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
 * @member {Boolean} enableInboundForwarding
 */
Policy.prototype['enableInboundForwarding'] = undefined;

/**
 * Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
 * @member {Boolean} enableLogging
 */
Policy.prototype['enableLogging'] = undefined;

/**
 * Unique identifier for the resource; defined by the server (output only).
 * @member {String} id
 */
Policy.prototype['id'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#policy'
 */
Policy.prototype['kind'] = 'dns#policy';

/**
 * User-assigned name for this policy.
 * @member {String} name
 */
Policy.prototype['name'] = undefined;

/**
 * List of network names specifying networks to which this policy is applied.
 * @member {Array.<module:model/PolicyNetwork>} networks
 */
Policy.prototype['networks'] = undefined;






export default Policy;

