/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagedZoneCloudLoggingConfig from './ManagedZoneCloudLoggingConfig';
import ManagedZoneDnsSecConfig from './ManagedZoneDnsSecConfig';
import ManagedZoneForwardingConfig from './ManagedZoneForwardingConfig';
import ManagedZonePeeringConfig from './ManagedZonePeeringConfig';
import ManagedZonePrivateVisibilityConfig from './ManagedZonePrivateVisibilityConfig';
import ManagedZoneReverseLookupConfig from './ManagedZoneReverseLookupConfig';
import ManagedZoneServiceDirectoryConfig from './ManagedZoneServiceDirectoryConfig';

/**
 * The ManagedZone model module.
 * @module model/ManagedZone
 * @version v2
 */
class ManagedZone {
    /**
     * Constructs a new <code>ManagedZone</code>.
     * A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
     * @alias module:model/ManagedZone
     */
    constructor() { 
        
        ManagedZone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#managedZone';
    }

    /**
     * Constructs a <code>ManagedZone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedZone} obj Optional instance to populate.
     * @return {module:model/ManagedZone} The populated <code>ManagedZone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedZone();

            if (data.hasOwnProperty('cloudLoggingConfig')) {
                obj['cloudLoggingConfig'] = ManagedZoneCloudLoggingConfig.constructFromObject(data['cloudLoggingConfig']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dnsName')) {
                obj['dnsName'] = ApiClient.convertToType(data['dnsName'], 'String');
            }
            if (data.hasOwnProperty('dnssecConfig')) {
                obj['dnssecConfig'] = ManagedZoneDnsSecConfig.constructFromObject(data['dnssecConfig']);
            }
            if (data.hasOwnProperty('forwardingConfig')) {
                obj['forwardingConfig'] = ManagedZoneForwardingConfig.constructFromObject(data['forwardingConfig']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nameServerSet')) {
                obj['nameServerSet'] = ApiClient.convertToType(data['nameServerSet'], 'String');
            }
            if (data.hasOwnProperty('nameServers')) {
                obj['nameServers'] = ApiClient.convertToType(data['nameServers'], ['String']);
            }
            if (data.hasOwnProperty('peeringConfig')) {
                obj['peeringConfig'] = ManagedZonePeeringConfig.constructFromObject(data['peeringConfig']);
            }
            if (data.hasOwnProperty('privateVisibilityConfig')) {
                obj['privateVisibilityConfig'] = ManagedZonePrivateVisibilityConfig.constructFromObject(data['privateVisibilityConfig']);
            }
            if (data.hasOwnProperty('reverseLookupConfig')) {
                obj['reverseLookupConfig'] = ManagedZoneReverseLookupConfig.constructFromObject(data['reverseLookupConfig']);
            }
            if (data.hasOwnProperty('serviceDirectoryConfig')) {
                obj['serviceDirectoryConfig'] = ManagedZoneServiceDirectoryConfig.constructFromObject(data['serviceDirectoryConfig']);
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedZone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedZone</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cloudLoggingConfig`
        if (data['cloudLoggingConfig']) { // data not null
          ManagedZoneCloudLoggingConfig.validateJSON(data['cloudLoggingConfig']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dnsName'] && !(typeof data['dnsName'] === 'string' || data['dnsName'] instanceof String)) {
            throw new Error("Expected the field `dnsName` to be a primitive type in the JSON string but got " + data['dnsName']);
        }
        // validate the optional field `dnssecConfig`
        if (data['dnssecConfig']) { // data not null
          ManagedZoneDnsSecConfig.validateJSON(data['dnssecConfig']);
        }
        // validate the optional field `forwardingConfig`
        if (data['forwardingConfig']) { // data not null
          ManagedZoneForwardingConfig.validateJSON(data['forwardingConfig']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nameServerSet'] && !(typeof data['nameServerSet'] === 'string' || data['nameServerSet'] instanceof String)) {
            throw new Error("Expected the field `nameServerSet` to be a primitive type in the JSON string but got " + data['nameServerSet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nameServers'])) {
            throw new Error("Expected the field `nameServers` to be an array in the JSON data but got " + data['nameServers']);
        }
        // validate the optional field `peeringConfig`
        if (data['peeringConfig']) { // data not null
          ManagedZonePeeringConfig.validateJSON(data['peeringConfig']);
        }
        // validate the optional field `privateVisibilityConfig`
        if (data['privateVisibilityConfig']) { // data not null
          ManagedZonePrivateVisibilityConfig.validateJSON(data['privateVisibilityConfig']);
        }
        // validate the optional field `reverseLookupConfig`
        if (data['reverseLookupConfig']) { // data not null
          ManagedZoneReverseLookupConfig.validateJSON(data['reverseLookupConfig']);
        }
        // validate the optional field `serviceDirectoryConfig`
        if (data['serviceDirectoryConfig']) { // data not null
          ManagedZoneServiceDirectoryConfig.validateJSON(data['serviceDirectoryConfig']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * @member {module:model/ManagedZoneCloudLoggingConfig} cloudLoggingConfig
 */
ManagedZone.prototype['cloudLoggingConfig'] = undefined;

/**
 * The time that this resource was created on the server. This is in RFC3339 text format. Output only.
 * @member {String} creationTime
 */
ManagedZone.prototype['creationTime'] = undefined;

/**
 * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
 * @member {String} description
 */
ManagedZone.prototype['description'] = undefined;

/**
 * The DNS name of this managed zone, for instance \"example.com.\".
 * @member {String} dnsName
 */
ManagedZone.prototype['dnsName'] = undefined;

/**
 * @member {module:model/ManagedZoneDnsSecConfig} dnssecConfig
 */
ManagedZone.prototype['dnssecConfig'] = undefined;

/**
 * @member {module:model/ManagedZoneForwardingConfig} forwardingConfig
 */
ManagedZone.prototype['forwardingConfig'] = undefined;

/**
 * Unique identifier for the resource; defined by the server (output only)
 * @member {String} id
 */
ManagedZone.prototype['id'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#managedZone'
 */
ManagedZone.prototype['kind'] = 'dns#managedZone';

/**
 * User labels.
 * @member {Object.<String, String>} labels
 */
ManagedZone.prototype['labels'] = undefined;

/**
 * User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
 * @member {String} name
 */
ManagedZone.prototype['name'] = undefined;

/**
 * Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.
 * @member {String} nameServerSet
 */
ManagedZone.prototype['nameServerSet'] = undefined;

/**
 * Delegate your managed_zone to these virtual name servers; defined by the server (output only)
 * @member {Array.<String>} nameServers
 */
ManagedZone.prototype['nameServers'] = undefined;

/**
 * @member {module:model/ManagedZonePeeringConfig} peeringConfig
 */
ManagedZone.prototype['peeringConfig'] = undefined;

/**
 * @member {module:model/ManagedZonePrivateVisibilityConfig} privateVisibilityConfig
 */
ManagedZone.prototype['privateVisibilityConfig'] = undefined;

/**
 * @member {module:model/ManagedZoneReverseLookupConfig} reverseLookupConfig
 */
ManagedZone.prototype['reverseLookupConfig'] = undefined;

/**
 * @member {module:model/ManagedZoneServiceDirectoryConfig} serviceDirectoryConfig
 */
ManagedZone.prototype['serviceDirectoryConfig'] = undefined;

/**
 * The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
 * @member {module:model/ManagedZone.VisibilityEnum} visibility
 */
ManagedZone.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
ManagedZone['VisibilityEnum'] = {

    /**
     * value: "PUBLIC"
     * @const
     */
    "PUBLIC": "PUBLIC",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE"
};



export default ManagedZone;

