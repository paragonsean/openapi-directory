/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponsePolicyRuleLocalData from './ResponsePolicyRuleLocalData';

/**
 * The ResponsePolicyRule model module.
 * @module model/ResponsePolicyRule
 * @version v2
 */
class ResponsePolicyRule {
    /**
     * Constructs a new <code>ResponsePolicyRule</code>.
     * A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
     * @alias module:model/ResponsePolicyRule
     */
    constructor() { 
        
        ResponsePolicyRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'dns#responsePolicyRule';
    }

    /**
     * Constructs a <code>ResponsePolicyRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponsePolicyRule} obj Optional instance to populate.
     * @return {module:model/ResponsePolicyRule} The populated <code>ResponsePolicyRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponsePolicyRule();

            if (data.hasOwnProperty('behavior')) {
                obj['behavior'] = ApiClient.convertToType(data['behavior'], 'String');
            }
            if (data.hasOwnProperty('dnsName')) {
                obj['dnsName'] = ApiClient.convertToType(data['dnsName'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('localData')) {
                obj['localData'] = ResponsePolicyRuleLocalData.constructFromObject(data['localData']);
            }
            if (data.hasOwnProperty('ruleName')) {
                obj['ruleName'] = ApiClient.convertToType(data['ruleName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponsePolicyRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponsePolicyRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['behavior'] && !(typeof data['behavior'] === 'string' || data['behavior'] instanceof String)) {
            throw new Error("Expected the field `behavior` to be a primitive type in the JSON string but got " + data['behavior']);
        }
        // ensure the json data is a string
        if (data['dnsName'] && !(typeof data['dnsName'] === 'string' || data['dnsName'] instanceof String)) {
            throw new Error("Expected the field `dnsName` to be a primitive type in the JSON string but got " + data['dnsName']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `localData`
        if (data['localData']) { // data not null
          ResponsePolicyRuleLocalData.validateJSON(data['localData']);
        }
        // ensure the json data is a string
        if (data['ruleName'] && !(typeof data['ruleName'] === 'string' || data['ruleName'] instanceof String)) {
            throw new Error("Expected the field `ruleName` to be a primitive type in the JSON string but got " + data['ruleName']);
        }

        return true;
    }


}



/**
 * Answer this query with a behavior rather than DNS data.
 * @member {module:model/ResponsePolicyRule.BehaviorEnum} behavior
 */
ResponsePolicyRule.prototype['behavior'] = undefined;

/**
 * The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
 * @member {String} dnsName
 */
ResponsePolicyRule.prototype['dnsName'] = undefined;

/**
 * @member {String} kind
 * @default 'dns#responsePolicyRule'
 */
ResponsePolicyRule.prototype['kind'] = 'dns#responsePolicyRule';

/**
 * @member {module:model/ResponsePolicyRuleLocalData} localData
 */
ResponsePolicyRule.prototype['localData'] = undefined;

/**
 * An identifier for this rule. Must be unique with the ResponsePolicy.
 * @member {String} ruleName
 */
ResponsePolicyRule.prototype['ruleName'] = undefined;





/**
 * Allowed values for the <code>behavior</code> property.
 * @enum {String}
 * @readonly
 */
ResponsePolicyRule['BehaviorEnum'] = {

    /**
     * value: "BEHAVIOR_UNSPECIFIED"
     * @const
     */
    "BEHAVIOR_UNSPECIFIED": "BEHAVIOR_UNSPECIFIED",

    /**
     * value: "BYPASS_RESPONSE_POLICY"
     * @const
     */
    "BYPASS_RESPONSE_POLICY": "BYPASS_RESPONSE_POLICY"
};



export default ResponsePolicyRule;

