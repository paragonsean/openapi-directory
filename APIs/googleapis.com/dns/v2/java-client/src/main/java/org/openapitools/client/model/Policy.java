/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyAlternativeNameServerConfig;
import org.openapitools.client.model.PolicyNetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:18.564963-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Policy {
  public static final String SERIALIZED_NAME_ALTERNATIVE_NAME_SERVER_CONFIG = "alternativeNameServerConfig";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_NAME_SERVER_CONFIG)
  private PolicyAlternativeNameServerConfig alternativeNameServerConfig;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLE_INBOUND_FORWARDING = "enableInboundForwarding";
  @SerializedName(SERIALIZED_NAME_ENABLE_INBOUND_FORWARDING)
  private Boolean enableInboundForwarding;

  public static final String SERIALIZED_NAME_ENABLE_LOGGING = "enableLogging";
  @SerializedName(SERIALIZED_NAME_ENABLE_LOGGING)
  private Boolean enableLogging;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#policy";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<PolicyNetwork> networks = new ArrayList<>();

  public Policy() {
  }

  public Policy alternativeNameServerConfig(PolicyAlternativeNameServerConfig alternativeNameServerConfig) {
    this.alternativeNameServerConfig = alternativeNameServerConfig;
    return this;
  }

  /**
   * Get alternativeNameServerConfig
   * @return alternativeNameServerConfig
   */
  @javax.annotation.Nullable
  public PolicyAlternativeNameServerConfig getAlternativeNameServerConfig() {
    return alternativeNameServerConfig;
  }

  public void setAlternativeNameServerConfig(PolicyAlternativeNameServerConfig alternativeNameServerConfig) {
    this.alternativeNameServerConfig = alternativeNameServerConfig;
  }


  public Policy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A mutable string of at most 1024 characters associated with this resource for the user&#39;s convenience. Has no effect on the policy&#39;s function.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Policy enableInboundForwarding(Boolean enableInboundForwarding) {
    this.enableInboundForwarding = enableInboundForwarding;
    return this;
  }

  /**
   * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
   * @return enableInboundForwarding
   */
  @javax.annotation.Nullable
  public Boolean getEnableInboundForwarding() {
    return enableInboundForwarding;
  }

  public void setEnableInboundForwarding(Boolean enableInboundForwarding) {
    this.enableInboundForwarding = enableInboundForwarding;
  }


  public Policy enableLogging(Boolean enableLogging) {
    this.enableLogging = enableLogging;
    return this;
  }

  /**
   * Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
   * @return enableLogging
   */
  @javax.annotation.Nullable
  public Boolean getEnableLogging() {
    return enableLogging;
  }

  public void setEnableLogging(Boolean enableLogging) {
    this.enableLogging = enableLogging;
  }


  public Policy id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the resource; defined by the server (output only).
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Policy kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Policy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User-assigned name for this policy.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Policy networks(List<PolicyNetwork> networks) {
    this.networks = networks;
    return this;
  }

  public Policy addNetworksItem(PolicyNetwork networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * List of network names specifying networks to which this policy is applied.
   * @return networks
   */
  @javax.annotation.Nullable
  public List<PolicyNetwork> getNetworks() {
    return networks;
  }

  public void setNetworks(List<PolicyNetwork> networks) {
    this.networks = networks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policy policy = (Policy) o;
    return Objects.equals(this.alternativeNameServerConfig, policy.alternativeNameServerConfig) &&
        Objects.equals(this.description, policy.description) &&
        Objects.equals(this.enableInboundForwarding, policy.enableInboundForwarding) &&
        Objects.equals(this.enableLogging, policy.enableLogging) &&
        Objects.equals(this.id, policy.id) &&
        Objects.equals(this.kind, policy.kind) &&
        Objects.equals(this.name, policy.name) &&
        Objects.equals(this.networks, policy.networks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeNameServerConfig, description, enableInboundForwarding, enableLogging, id, kind, name, networks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policy {\n");
    sb.append("    alternativeNameServerConfig: ").append(toIndentedString(alternativeNameServerConfig)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enableInboundForwarding: ").append(toIndentedString(enableInboundForwarding)).append("\n");
    sb.append("    enableLogging: ").append(toIndentedString(enableLogging)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternativeNameServerConfig");
    openapiFields.add("description");
    openapiFields.add("enableInboundForwarding");
    openapiFields.add("enableLogging");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("networks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Policy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policy is not found in the empty JSON string", Policy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alternativeNameServerConfig`
      if (jsonObj.get("alternativeNameServerConfig") != null && !jsonObj.get("alternativeNameServerConfig").isJsonNull()) {
        PolicyAlternativeNameServerConfig.validateJsonElement(jsonObj.get("alternativeNameServerConfig"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            PolicyNetwork.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policy.class));

       return (TypeAdapter<T>) new TypeAdapter<Policy>() {
           @Override
           public void write(JsonWriter out, Policy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Policy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Policy
   * @throws IOException if the JSON string is invalid with respect to Policy
   */
  public static Policy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policy.class);
  }

  /**
   * Convert an instance of Policy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

