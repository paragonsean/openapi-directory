/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceRecordSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:18.564963-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Change {
  public static final String SERIALIZED_NAME_ADDITIONS = "additions";
  @SerializedName(SERIALIZED_NAME_ADDITIONS)
  private List<ResourceRecordSet> additions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETIONS = "deletions";
  @SerializedName(SERIALIZED_NAME_DELETIONS)
  private List<ResourceRecordSet> deletions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_SERVING = "isServing";
  @SerializedName(SERIALIZED_NAME_IS_SERVING)
  private Boolean isServing;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#change";

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Status of the operation (output only). A status of \&quot;done\&quot; means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    DONE("DONE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Change() {
  }

  public Change additions(List<ResourceRecordSet> additions) {
    this.additions = additions;
    return this;
  }

  public Change addAdditionsItem(ResourceRecordSet additionsItem) {
    if (this.additions == null) {
      this.additions = new ArrayList<>();
    }
    this.additions.add(additionsItem);
    return this;
  }

  /**
   * Which ResourceRecordSets to add?
   * @return additions
   */
  @javax.annotation.Nullable
  public List<ResourceRecordSet> getAdditions() {
    return additions;
  }

  public void setAdditions(List<ResourceRecordSet> additions) {
    this.additions = additions;
  }


  public Change deletions(List<ResourceRecordSet> deletions) {
    this.deletions = deletions;
    return this;
  }

  public Change addDeletionsItem(ResourceRecordSet deletionsItem) {
    if (this.deletions == null) {
      this.deletions = new ArrayList<>();
    }
    this.deletions.add(deletionsItem);
    return this;
  }

  /**
   * Which ResourceRecordSets to remove? Must match existing data exactly.
   * @return deletions
   */
  @javax.annotation.Nullable
  public List<ResourceRecordSet> getDeletions() {
    return deletions;
  }

  public void setDeletions(List<ResourceRecordSet> deletions) {
    this.deletions = deletions;
  }


  public Change id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the resource; defined by the server (output only).
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Change isServing(Boolean isServing) {
    this.isServing = isServing;
    return this;
  }

  /**
   * If the DNS queries for the zone will be served.
   * @return isServing
   */
  @javax.annotation.Nullable
  public Boolean getIsServing() {
    return isServing;
  }

  public void setIsServing(Boolean isServing) {
    this.isServing = isServing;
  }


  public Change kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Change startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time that this operation was started by the server (output only). This is in RFC3339 text format.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public Change status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the operation (output only). A status of \&quot;done\&quot; means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Change change = (Change) o;
    return Objects.equals(this.additions, change.additions) &&
        Objects.equals(this.deletions, change.deletions) &&
        Objects.equals(this.id, change.id) &&
        Objects.equals(this.isServing, change.isServing) &&
        Objects.equals(this.kind, change.kind) &&
        Objects.equals(this.startTime, change.startTime) &&
        Objects.equals(this.status, change.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additions, deletions, id, isServing, kind, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Change {\n");
    sb.append("    additions: ").append(toIndentedString(additions)).append("\n");
    sb.append("    deletions: ").append(toIndentedString(deletions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isServing: ").append(toIndentedString(isServing)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additions");
    openapiFields.add("deletions");
    openapiFields.add("id");
    openapiFields.add("isServing");
    openapiFields.add("kind");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Change
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Change.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Change is not found in the empty JSON string", Change.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Change.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Change` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additions") != null && !jsonObj.get("additions").isJsonNull()) {
        JsonArray jsonArrayadditions = jsonObj.getAsJsonArray("additions");
        if (jsonArrayadditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additions` to be an array in the JSON string but got `%s`", jsonObj.get("additions").toString()));
          }

          // validate the optional field `additions` (array)
          for (int i = 0; i < jsonArrayadditions.size(); i++) {
            ResourceRecordSet.validateJsonElement(jsonArrayadditions.get(i));
          };
        }
      }
      if (jsonObj.get("deletions") != null && !jsonObj.get("deletions").isJsonNull()) {
        JsonArray jsonArraydeletions = jsonObj.getAsJsonArray("deletions");
        if (jsonArraydeletions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deletions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deletions` to be an array in the JSON string but got `%s`", jsonObj.get("deletions").toString()));
          }

          // validate the optional field `deletions` (array)
          for (int i = 0; i < jsonArraydeletions.size(); i++) {
            ResourceRecordSet.validateJsonElement(jsonArraydeletions.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Change.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Change' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Change> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Change.class));

       return (TypeAdapter<T>) new TypeAdapter<Change>() {
           @Override
           public void write(JsonWriter out, Change value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Change read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Change given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Change
   * @throws IOException if the JSON string is invalid with respect to Change
   */
  public static Change fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Change.class);
  }

  /**
   * Convert an instance of Change to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

