/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManagedZoneForwardingConfigNameServerTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:18.564963-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedZoneForwardingConfigNameServerTarget {
  /**
   * Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
   */
  @JsonAdapter(ForwardingPathEnum.Adapter.class)
  public enum ForwardingPathEnum {
    DEFAULT("DEFAULT"),
    
    PRIVATE("PRIVATE");

    private String value;

    ForwardingPathEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForwardingPathEnum fromValue(String value) {
      for (ForwardingPathEnum b : ForwardingPathEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForwardingPathEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForwardingPathEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForwardingPathEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForwardingPathEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ForwardingPathEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORWARDING_PATH = "forwardingPath";
  @SerializedName(SERIALIZED_NAME_FORWARDING_PATH)
  private ForwardingPathEnum forwardingPath;

  public static final String SERIALIZED_NAME_IPV4_ADDRESS = "ipv4Address";
  @SerializedName(SERIALIZED_NAME_IPV4_ADDRESS)
  private String ipv4Address;

  public static final String SERIALIZED_NAME_IPV6_ADDRESS = "ipv6Address";
  @SerializedName(SERIALIZED_NAME_IPV6_ADDRESS)
  private String ipv6Address;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#managedZoneForwardingConfigNameServerTarget";

  public ManagedZoneForwardingConfigNameServerTarget() {
  }

  public ManagedZoneForwardingConfigNameServerTarget forwardingPath(ForwardingPathEnum forwardingPath) {
    this.forwardingPath = forwardingPath;
    return this;
  }

  /**
   * Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
   * @return forwardingPath
   */
  @javax.annotation.Nullable
  public ForwardingPathEnum getForwardingPath() {
    return forwardingPath;
  }

  public void setForwardingPath(ForwardingPathEnum forwardingPath) {
    this.forwardingPath = forwardingPath;
  }


  public ManagedZoneForwardingConfigNameServerTarget ipv4Address(String ipv4Address) {
    this.ipv4Address = ipv4Address;
    return this;
  }

  /**
   * IPv4 address of a target name server.
   * @return ipv4Address
   */
  @javax.annotation.Nullable
  public String getIpv4Address() {
    return ipv4Address;
  }

  public void setIpv4Address(String ipv4Address) {
    this.ipv4Address = ipv4Address;
  }


  public ManagedZoneForwardingConfigNameServerTarget ipv6Address(String ipv6Address) {
    this.ipv6Address = ipv6Address;
    return this;
  }

  /**
   * IPv6 address of a target name server. Does not accept both fields (ipv4 &amp; ipv6) being populated. Public preview as of November 2022.
   * @return ipv6Address
   */
  @javax.annotation.Nullable
  public String getIpv6Address() {
    return ipv6Address;
  }

  public void setIpv6Address(String ipv6Address) {
    this.ipv6Address = ipv6Address;
  }


  public ManagedZoneForwardingConfigNameServerTarget kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedZoneForwardingConfigNameServerTarget managedZoneForwardingConfigNameServerTarget = (ManagedZoneForwardingConfigNameServerTarget) o;
    return Objects.equals(this.forwardingPath, managedZoneForwardingConfigNameServerTarget.forwardingPath) &&
        Objects.equals(this.ipv4Address, managedZoneForwardingConfigNameServerTarget.ipv4Address) &&
        Objects.equals(this.ipv6Address, managedZoneForwardingConfigNameServerTarget.ipv6Address) &&
        Objects.equals(this.kind, managedZoneForwardingConfigNameServerTarget.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forwardingPath, ipv4Address, ipv6Address, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedZoneForwardingConfigNameServerTarget {\n");
    sb.append("    forwardingPath: ").append(toIndentedString(forwardingPath)).append("\n");
    sb.append("    ipv4Address: ").append(toIndentedString(ipv4Address)).append("\n");
    sb.append("    ipv6Address: ").append(toIndentedString(ipv6Address)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forwardingPath");
    openapiFields.add("ipv4Address");
    openapiFields.add("ipv6Address");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedZoneForwardingConfigNameServerTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedZoneForwardingConfigNameServerTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedZoneForwardingConfigNameServerTarget is not found in the empty JSON string", ManagedZoneForwardingConfigNameServerTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedZoneForwardingConfigNameServerTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedZoneForwardingConfigNameServerTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forwardingPath") != null && !jsonObj.get("forwardingPath").isJsonNull()) && !jsonObj.get("forwardingPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardingPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwardingPath").toString()));
      }
      // validate the optional field `forwardingPath`
      if (jsonObj.get("forwardingPath") != null && !jsonObj.get("forwardingPath").isJsonNull()) {
        ForwardingPathEnum.validateJsonElement(jsonObj.get("forwardingPath"));
      }
      if ((jsonObj.get("ipv4Address") != null && !jsonObj.get("ipv4Address").isJsonNull()) && !jsonObj.get("ipv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv4Address").toString()));
      }
      if ((jsonObj.get("ipv6Address") != null && !jsonObj.get("ipv6Address").isJsonNull()) && !jsonObj.get("ipv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv6Address").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedZoneForwardingConfigNameServerTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedZoneForwardingConfigNameServerTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedZoneForwardingConfigNameServerTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedZoneForwardingConfigNameServerTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedZoneForwardingConfigNameServerTarget>() {
           @Override
           public void write(JsonWriter out, ManagedZoneForwardingConfigNameServerTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedZoneForwardingConfigNameServerTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedZoneForwardingConfigNameServerTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedZoneForwardingConfigNameServerTarget
   * @throws IOException if the JSON string is invalid with respect to ManagedZoneForwardingConfigNameServerTarget
   */
  public static ManagedZoneForwardingConfigNameServerTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedZoneForwardingConfigNameServerTarget.class);
  }

  /**
   * Convert an instance of ManagedZoneForwardingConfigNameServerTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

