/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResponsePolicyGKECluster;
import org.openapitools.client.model.ResponsePolicyNetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:18.564963-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponsePolicy {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GKE_CLUSTERS = "gkeClusters";
  @SerializedName(SERIALIZED_NAME_GKE_CLUSTERS)
  private List<ResponsePolicyGKECluster> gkeClusters = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "dns#responsePolicy";

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<ResponsePolicyNetwork> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_POLICY_NAME = "responsePolicyName";
  @SerializedName(SERIALIZED_NAME_RESPONSE_POLICY_NAME)
  private String responsePolicyName;

  public ResponsePolicy() {
  }

  public ResponsePolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User-provided description for this Response Policy.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ResponsePolicy gkeClusters(List<ResponsePolicyGKECluster> gkeClusters) {
    this.gkeClusters = gkeClusters;
    return this;
  }

  public ResponsePolicy addGkeClustersItem(ResponsePolicyGKECluster gkeClustersItem) {
    if (this.gkeClusters == null) {
      this.gkeClusters = new ArrayList<>();
    }
    this.gkeClusters.add(gkeClustersItem);
    return this;
  }

  /**
   * The list of Google Kubernetes Engine clusters to which this response policy is applied.
   * @return gkeClusters
   */
  @javax.annotation.Nullable
  public List<ResponsePolicyGKECluster> getGkeClusters() {
    return gkeClusters;
  }

  public void setGkeClusters(List<ResponsePolicyGKECluster> gkeClusters) {
    this.gkeClusters = gkeClusters;
  }


  public ResponsePolicy id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the resource; defined by the server (output only).
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ResponsePolicy kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ResponsePolicy labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ResponsePolicy putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ResponsePolicy networks(List<ResponsePolicyNetwork> networks) {
    this.networks = networks;
    return this;
  }

  public ResponsePolicy addNetworksItem(ResponsePolicyNetwork networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * List of network names specifying networks to which this policy is applied.
   * @return networks
   */
  @javax.annotation.Nullable
  public List<ResponsePolicyNetwork> getNetworks() {
    return networks;
  }

  public void setNetworks(List<ResponsePolicyNetwork> networks) {
    this.networks = networks;
  }


  public ResponsePolicy responsePolicyName(String responsePolicyName) {
    this.responsePolicyName = responsePolicyName;
    return this;
  }

  /**
   * User assigned name for this Response Policy.
   * @return responsePolicyName
   */
  @javax.annotation.Nullable
  public String getResponsePolicyName() {
    return responsePolicyName;
  }

  public void setResponsePolicyName(String responsePolicyName) {
    this.responsePolicyName = responsePolicyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponsePolicy responsePolicy = (ResponsePolicy) o;
    return Objects.equals(this.description, responsePolicy.description) &&
        Objects.equals(this.gkeClusters, responsePolicy.gkeClusters) &&
        Objects.equals(this.id, responsePolicy.id) &&
        Objects.equals(this.kind, responsePolicy.kind) &&
        Objects.equals(this.labels, responsePolicy.labels) &&
        Objects.equals(this.networks, responsePolicy.networks) &&
        Objects.equals(this.responsePolicyName, responsePolicy.responsePolicyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, gkeClusters, id, kind, labels, networks, responsePolicyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponsePolicy {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gkeClusters: ").append(toIndentedString(gkeClusters)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    responsePolicyName: ").append(toIndentedString(responsePolicyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("gkeClusters");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("networks");
    openapiFields.add("responsePolicyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponsePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponsePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponsePolicy is not found in the empty JSON string", ResponsePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponsePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponsePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("gkeClusters") != null && !jsonObj.get("gkeClusters").isJsonNull()) {
        JsonArray jsonArraygkeClusters = jsonObj.getAsJsonArray("gkeClusters");
        if (jsonArraygkeClusters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gkeClusters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gkeClusters` to be an array in the JSON string but got `%s`", jsonObj.get("gkeClusters").toString()));
          }

          // validate the optional field `gkeClusters` (array)
          for (int i = 0; i < jsonArraygkeClusters.size(); i++) {
            ResponsePolicyGKECluster.validateJsonElement(jsonArraygkeClusters.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            ResponsePolicyNetwork.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("responsePolicyName") != null && !jsonObj.get("responsePolicyName").isJsonNull()) && !jsonObj.get("responsePolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsePolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsePolicyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponsePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponsePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponsePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponsePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponsePolicy>() {
           @Override
           public void write(JsonWriter out, ResponsePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponsePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponsePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponsePolicy
   * @throws IOException if the JSON string is invalid with respect to ResponsePolicy
   */
  public static ResponsePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponsePolicy.class);
  }

  /**
   * Convert an instance of ResponsePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

