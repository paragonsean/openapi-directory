/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PoliciesListResponse;
import org.openapitools.client.model.PoliciesPatchResponse;
import org.openapitools.client.model.PoliciesUpdateResponse;
import org.openapitools.client.model.Policy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesApi
 */
@Disabled
public class PoliciesApiTest {

    private final PoliciesApi api = new PoliciesApi();

    /**
     * Creates a new Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsPoliciesCreateTest() throws ApiException {
        String project = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        Policy policy = null;
        Policy response = api.dnsPoliciesCreate(project, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, policy);
        // TODO: test validations
    }

    /**
     * Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsPoliciesDeleteTest() throws ApiException {
        String project = null;
        String location = null;
        String policy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        api.dnsPoliciesDelete(project, location, policy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId);
        // TODO: test validations
    }

    /**
     * Fetches the representation of an existing Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsPoliciesGetTest() throws ApiException {
        String project = null;
        String location = null;
        String policy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        Policy response = api.dnsPoliciesGet(project, location, policy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId);
        // TODO: test validations
    }

    /**
     * Enumerates all Policies associated with a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsPoliciesListTest() throws ApiException {
        String project = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        PoliciesListResponse response = api.dnsPoliciesList(project, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Applies a partial update to an existing Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsPoliciesPatchTest() throws ApiException {
        String project = null;
        String location = null;
        String policy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        Policy policy2 = null;
        PoliciesPatchResponse response = api.dnsPoliciesPatch(project, location, policy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, policy2);
        // TODO: test validations
    }

    /**
     * Updates an existing Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsPoliciesUpdateTest() throws ApiException {
        String project = null;
        String location = null;
        String policy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        Policy policy2 = null;
        PoliciesUpdateResponse response = api.dnsPoliciesUpdate(project, location, policy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, policy2);
        // TODO: test validations
    }

}
