/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ResourceRecordSet;
import org.openapitools.client.model.ResourceRecordSetsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourceRecordSetsApi
 */
@Disabled
public class ResourceRecordSetsApiTest {

    private final ResourceRecordSetsApi api = new ResourceRecordSetsApi();

    /**
     * Creates a new ResourceRecordSet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResourceRecordSetsCreateTest() throws ApiException {
        String project = null;
        String location = null;
        String managedZone = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResourceRecordSet resourceRecordSet = null;
        ResourceRecordSet response = api.dnsResourceRecordSetsCreate(project, location, managedZone, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, resourceRecordSet);
        // TODO: test validations
    }

    /**
     * Deletes a previously created ResourceRecordSet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResourceRecordSetsDeleteTest() throws ApiException {
        String project = null;
        String location = null;
        String managedZone = null;
        String name = null;
        String type = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        api.dnsResourceRecordSetsDelete(project, location, managedZone, name, type, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId);
        // TODO: test validations
    }

    /**
     * Fetches the representation of an existing ResourceRecordSet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResourceRecordSetsGetTest() throws ApiException {
        String project = null;
        String location = null;
        String managedZone = null;
        String name = null;
        String type = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResourceRecordSet response = api.dnsResourceRecordSetsGet(project, location, managedZone, name, type, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId);
        // TODO: test validations
    }

    /**
     * Enumerates ResourceRecordSets that you have created but not yet deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResourceRecordSetsListTest() throws ApiException {
        String project = null;
        String location = null;
        String managedZone = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String name = null;
        String pageToken = null;
        String type = null;
        ResourceRecordSetsListResponse response = api.dnsResourceRecordSetsList(project, location, managedZone, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, name, pageToken, type);
        // TODO: test validations
    }

    /**
     * Applies a partial update to an existing ResourceRecordSet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResourceRecordSetsPatchTest() throws ApiException {
        String project = null;
        String location = null;
        String managedZone = null;
        String name = null;
        String type = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResourceRecordSet resourceRecordSet = null;
        ResourceRecordSet response = api.dnsResourceRecordSetsPatch(project, location, managedZone, name, type, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, resourceRecordSet);
        // TODO: test validations
    }

}
