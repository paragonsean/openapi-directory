/*
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ResponsePoliciesListResponse;
import org.openapitools.client.model.ResponsePoliciesPatchResponse;
import org.openapitools.client.model.ResponsePoliciesUpdateResponse;
import org.openapitools.client.model.ResponsePolicy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResponsePoliciesApi
 */
@Disabled
public class ResponsePoliciesApiTest {

    private final ResponsePoliciesApi api = new ResponsePoliciesApi();

    /**
     * Creates a new Response Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResponsePoliciesCreateTest() throws ApiException {
        String project = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResponsePolicy responsePolicy = null;
        ResponsePolicy response = api.dnsResponsePoliciesCreate(project, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, responsePolicy);
        // TODO: test validations
    }

    /**
     * Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResponsePoliciesDeleteTest() throws ApiException {
        String project = null;
        String location = null;
        String responsePolicy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        api.dnsResponsePoliciesDelete(project, location, responsePolicy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId);
        // TODO: test validations
    }

    /**
     * Fetches the representation of an existing Response Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResponsePoliciesGetTest() throws ApiException {
        String project = null;
        String location = null;
        String responsePolicy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResponsePolicy response = api.dnsResponsePoliciesGet(project, location, responsePolicy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId);
        // TODO: test validations
    }

    /**
     * Enumerates all Response Policies associated with a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResponsePoliciesListTest() throws ApiException {
        String project = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        ResponsePoliciesListResponse response = api.dnsResponsePoliciesList(project, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Applies a partial update to an existing Response Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResponsePoliciesPatchTest() throws ApiException {
        String project = null;
        String location = null;
        String responsePolicy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResponsePolicy responsePolicy2 = null;
        ResponsePoliciesPatchResponse response = api.dnsResponsePoliciesPatch(project, location, responsePolicy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, responsePolicy2);
        // TODO: test validations
    }

    /**
     * Updates an existing Response Policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsResponsePoliciesUpdateTest() throws ApiException {
        String project = null;
        String location = null;
        String responsePolicy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clientOperationId = null;
        ResponsePolicy responsePolicy2 = null;
        ResponsePoliciesUpdateResponse response = api.dnsResponsePoliciesUpdate(project, location, responsePolicy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientOperationId, responsePolicy2);
        // TODO: test validations
    }

}
