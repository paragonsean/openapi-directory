/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem() {
    this->initializeModel();
}

OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::~OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem() {}

void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::initializeModel() {

    m_health_checked_targets_isSet = false;
    m_health_checked_targets_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_rrdatas_isSet = false;
    m_rrdatas_isValid = false;

    m_signature_rrdatas_isSet = false;
    m_signature_rrdatas_isValid = false;
}

void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::fromJsonObject(QJsonObject json) {

    m_health_checked_targets_isValid = ::OpenAPI::fromJsonValue(m_health_checked_targets, json[QString("healthCheckedTargets")]);
    m_health_checked_targets_isSet = !json[QString("healthCheckedTargets")].isNull() && m_health_checked_targets_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_rrdatas_isValid = ::OpenAPI::fromJsonValue(m_rrdatas, json[QString("rrdatas")]);
    m_rrdatas_isSet = !json[QString("rrdatas")].isNull() && m_rrdatas_isValid;

    m_signature_rrdatas_isValid = ::OpenAPI::fromJsonValue(m_signature_rrdatas, json[QString("signatureRrdatas")]);
    m_signature_rrdatas_isSet = !json[QString("signatureRrdatas")].isNull() && m_signature_rrdatas_isValid;
}

QString OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::asJsonObject() const {
    QJsonObject obj;
    if (m_health_checked_targets.isSet()) {
        obj.insert(QString("healthCheckedTargets"), ::OpenAPI::toJsonValue(m_health_checked_targets));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_rrdatas.size() > 0) {
        obj.insert(QString("rrdatas"), ::OpenAPI::toJsonValue(m_rrdatas));
    }
    if (m_signature_rrdatas.size() > 0) {
        obj.insert(QString("signatureRrdatas"), ::OpenAPI::toJsonValue(m_signature_rrdatas));
    }
    return obj;
}

OAIRRSetRoutingPolicyHealthCheckTargets OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::getHealthCheckedTargets() const {
    return m_health_checked_targets;
}
void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::setHealthCheckedTargets(const OAIRRSetRoutingPolicyHealthCheckTargets &health_checked_targets) {
    m_health_checked_targets = health_checked_targets;
    m_health_checked_targets_isSet = true;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_health_checked_targets_Set() const{
    return m_health_checked_targets_isSet;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_health_checked_targets_Valid() const{
    return m_health_checked_targets_isValid;
}

QString OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::getKind() const {
    return m_kind;
}
void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::getLocation() const {
    return m_location;
}
void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::getRrdatas() const {
    return m_rrdatas;
}
void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::setRrdatas(const QList<QString> &rrdatas) {
    m_rrdatas = rrdatas;
    m_rrdatas_isSet = true;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_rrdatas_Set() const{
    return m_rrdatas_isSet;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_rrdatas_Valid() const{
    return m_rrdatas_isValid;
}

QList<QString> OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::getSignatureRrdatas() const {
    return m_signature_rrdatas;
}
void OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::setSignatureRrdatas(const QList<QString> &signature_rrdatas) {
    m_signature_rrdatas = signature_rrdatas;
    m_signature_rrdatas_isSet = true;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_signature_rrdatas_Set() const{
    return m_signature_rrdatas_isSet;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::is_signature_rrdatas_Valid() const{
    return m_signature_rrdatas_isValid;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_checked_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrdatas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_rrdatas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRRSetRoutingPolicyGeoPolicyGeoPolicyItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
