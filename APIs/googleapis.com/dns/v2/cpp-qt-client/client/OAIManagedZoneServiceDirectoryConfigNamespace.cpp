/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedZoneServiceDirectoryConfigNamespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedZoneServiceDirectoryConfigNamespace::OAIManagedZoneServiceDirectoryConfigNamespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedZoneServiceDirectoryConfigNamespace::OAIManagedZoneServiceDirectoryConfigNamespace() {
    this->initializeModel();
}

OAIManagedZoneServiceDirectoryConfigNamespace::~OAIManagedZoneServiceDirectoryConfigNamespace() {}

void OAIManagedZoneServiceDirectoryConfigNamespace::initializeModel() {

    m_deletion_time_isSet = false;
    m_deletion_time_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_namespace_url_isSet = false;
    m_namespace_url_isValid = false;
}

void OAIManagedZoneServiceDirectoryConfigNamespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedZoneServiceDirectoryConfigNamespace::fromJsonObject(QJsonObject json) {

    m_deletion_time_isValid = ::OpenAPI::fromJsonValue(m_deletion_time, json[QString("deletionTime")]);
    m_deletion_time_isSet = !json[QString("deletionTime")].isNull() && m_deletion_time_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_namespace_url_isValid = ::OpenAPI::fromJsonValue(m_namespace_url, json[QString("namespaceUrl")]);
    m_namespace_url_isSet = !json[QString("namespaceUrl")].isNull() && m_namespace_url_isValid;
}

QString OAIManagedZoneServiceDirectoryConfigNamespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedZoneServiceDirectoryConfigNamespace::asJsonObject() const {
    QJsonObject obj;
    if (m_deletion_time_isSet) {
        obj.insert(QString("deletionTime"), ::OpenAPI::toJsonValue(m_deletion_time));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_namespace_url_isSet) {
        obj.insert(QString("namespaceUrl"), ::OpenAPI::toJsonValue(m_namespace_url));
    }
    return obj;
}

QString OAIManagedZoneServiceDirectoryConfigNamespace::getDeletionTime() const {
    return m_deletion_time;
}
void OAIManagedZoneServiceDirectoryConfigNamespace::setDeletionTime(const QString &deletion_time) {
    m_deletion_time = deletion_time;
    m_deletion_time_isSet = true;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::is_deletion_time_Set() const{
    return m_deletion_time_isSet;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::is_deletion_time_Valid() const{
    return m_deletion_time_isValid;
}

QString OAIManagedZoneServiceDirectoryConfigNamespace::getKind() const {
    return m_kind;
}
void OAIManagedZoneServiceDirectoryConfigNamespace::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIManagedZoneServiceDirectoryConfigNamespace::getNamespaceUrl() const {
    return m_namespace_url;
}
void OAIManagedZoneServiceDirectoryConfigNamespace::setNamespaceUrl(const QString &namespace_url) {
    m_namespace_url = namespace_url;
    m_namespace_url_isSet = true;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::is_namespace_url_Set() const{
    return m_namespace_url_isSet;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::is_namespace_url_Valid() const{
    return m_namespace_url_isValid;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deletion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedZoneServiceDirectoryConfigNamespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
