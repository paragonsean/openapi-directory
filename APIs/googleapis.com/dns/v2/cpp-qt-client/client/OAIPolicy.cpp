/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicy::OAIPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicy::OAIPolicy() {
    this->initializeModel();
}

OAIPolicy::~OAIPolicy() {}

void OAIPolicy::initializeModel() {

    m_alternative_name_server_config_isSet = false;
    m_alternative_name_server_config_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enable_inbound_forwarding_isSet = false;
    m_enable_inbound_forwarding_isValid = false;

    m_enable_logging_isSet = false;
    m_enable_logging_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;
}

void OAIPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicy::fromJsonObject(QJsonObject json) {

    m_alternative_name_server_config_isValid = ::OpenAPI::fromJsonValue(m_alternative_name_server_config, json[QString("alternativeNameServerConfig")]);
    m_alternative_name_server_config_isSet = !json[QString("alternativeNameServerConfig")].isNull() && m_alternative_name_server_config_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enable_inbound_forwarding_isValid = ::OpenAPI::fromJsonValue(m_enable_inbound_forwarding, json[QString("enableInboundForwarding")]);
    m_enable_inbound_forwarding_isSet = !json[QString("enableInboundForwarding")].isNull() && m_enable_inbound_forwarding_isValid;

    m_enable_logging_isValid = ::OpenAPI::fromJsonValue(m_enable_logging, json[QString("enableLogging")]);
    m_enable_logging_isSet = !json[QString("enableLogging")].isNull() && m_enable_logging_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;
}

QString OAIPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_name_server_config.isSet()) {
        obj.insert(QString("alternativeNameServerConfig"), ::OpenAPI::toJsonValue(m_alternative_name_server_config));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enable_inbound_forwarding_isSet) {
        obj.insert(QString("enableInboundForwarding"), ::OpenAPI::toJsonValue(m_enable_inbound_forwarding));
    }
    if (m_enable_logging_isSet) {
        obj.insert(QString("enableLogging"), ::OpenAPI::toJsonValue(m_enable_logging));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    return obj;
}

OAIPolicyAlternativeNameServerConfig OAIPolicy::getAlternativeNameServerConfig() const {
    return m_alternative_name_server_config;
}
void OAIPolicy::setAlternativeNameServerConfig(const OAIPolicyAlternativeNameServerConfig &alternative_name_server_config) {
    m_alternative_name_server_config = alternative_name_server_config;
    m_alternative_name_server_config_isSet = true;
}

bool OAIPolicy::is_alternative_name_server_config_Set() const{
    return m_alternative_name_server_config_isSet;
}

bool OAIPolicy::is_alternative_name_server_config_Valid() const{
    return m_alternative_name_server_config_isValid;
}

QString OAIPolicy::getDescription() const {
    return m_description;
}
void OAIPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicy::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPolicy::isEnableInboundForwarding() const {
    return m_enable_inbound_forwarding;
}
void OAIPolicy::setEnableInboundForwarding(const bool &enable_inbound_forwarding) {
    m_enable_inbound_forwarding = enable_inbound_forwarding;
    m_enable_inbound_forwarding_isSet = true;
}

bool OAIPolicy::is_enable_inbound_forwarding_Set() const{
    return m_enable_inbound_forwarding_isSet;
}

bool OAIPolicy::is_enable_inbound_forwarding_Valid() const{
    return m_enable_inbound_forwarding_isValid;
}

bool OAIPolicy::isEnableLogging() const {
    return m_enable_logging;
}
void OAIPolicy::setEnableLogging(const bool &enable_logging) {
    m_enable_logging = enable_logging;
    m_enable_logging_isSet = true;
}

bool OAIPolicy::is_enable_logging_Set() const{
    return m_enable_logging_isSet;
}

bool OAIPolicy::is_enable_logging_Valid() const{
    return m_enable_logging_isValid;
}

QString OAIPolicy::getId() const {
    return m_id;
}
void OAIPolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPolicy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPolicy::getKind() const {
    return m_kind;
}
void OAIPolicy::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPolicy::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPolicy::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPolicy::getName() const {
    return m_name;
}
void OAIPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPolicyNetwork> OAIPolicy::getNetworks() const {
    return m_networks;
}
void OAIPolicy::setNetworks(const QList<OAIPolicyNetwork> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIPolicy::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIPolicy::is_networks_Valid() const{
    return m_networks_isValid;
}

bool OAIPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_name_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_inbound_forwarding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
