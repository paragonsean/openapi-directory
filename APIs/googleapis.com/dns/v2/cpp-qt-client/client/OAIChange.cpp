/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange::OAIChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange::OAIChange() {
    this->initializeModel();
}

OAIChange::~OAIChange() {}

void OAIChange::initializeModel() {

    m_additions_isSet = false;
    m_additions_isValid = false;

    m_deletions_isSet = false;
    m_deletions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_serving_isSet = false;
    m_is_serving_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange::fromJsonObject(QJsonObject json) {

    m_additions_isValid = ::OpenAPI::fromJsonValue(m_additions, json[QString("additions")]);
    m_additions_isSet = !json[QString("additions")].isNull() && m_additions_isValid;

    m_deletions_isValid = ::OpenAPI::fromJsonValue(m_deletions, json[QString("deletions")]);
    m_deletions_isSet = !json[QString("deletions")].isNull() && m_deletions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_serving_isValid = ::OpenAPI::fromJsonValue(m_is_serving, json[QString("isServing")]);
    m_is_serving_isSet = !json[QString("isServing")].isNull() && m_is_serving_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange::asJsonObject() const {
    QJsonObject obj;
    if (m_additions.size() > 0) {
        obj.insert(QString("additions"), ::OpenAPI::toJsonValue(m_additions));
    }
    if (m_deletions.size() > 0) {
        obj.insert(QString("deletions"), ::OpenAPI::toJsonValue(m_deletions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_serving_isSet) {
        obj.insert(QString("isServing"), ::OpenAPI::toJsonValue(m_is_serving));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIResourceRecordSet> OAIChange::getAdditions() const {
    return m_additions;
}
void OAIChange::setAdditions(const QList<OAIResourceRecordSet> &additions) {
    m_additions = additions;
    m_additions_isSet = true;
}

bool OAIChange::is_additions_Set() const{
    return m_additions_isSet;
}

bool OAIChange::is_additions_Valid() const{
    return m_additions_isValid;
}

QList<OAIResourceRecordSet> OAIChange::getDeletions() const {
    return m_deletions;
}
void OAIChange::setDeletions(const QList<OAIResourceRecordSet> &deletions) {
    m_deletions = deletions;
    m_deletions_isSet = true;
}

bool OAIChange::is_deletions_Set() const{
    return m_deletions_isSet;
}

bool OAIChange::is_deletions_Valid() const{
    return m_deletions_isValid;
}

QString OAIChange::getId() const {
    return m_id;
}
void OAIChange::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChange::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIChange::isIsServing() const {
    return m_is_serving;
}
void OAIChange::setIsServing(const bool &is_serving) {
    m_is_serving = is_serving;
    m_is_serving_isSet = true;
}

bool OAIChange::is_is_serving_Set() const{
    return m_is_serving_isSet;
}

bool OAIChange::is_is_serving_Valid() const{
    return m_is_serving_isValid;
}

QString OAIChange::getKind() const {
    return m_kind;
}
void OAIChange::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChange::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChange::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIChange::getStartTime() const {
    return m_start_time;
}
void OAIChange::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIChange::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIChange::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIChange::getStatus() const {
    return m_status;
}
void OAIChange::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChange::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChange::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_serving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
