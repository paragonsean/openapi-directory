/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResponsePolicyRulesApi_H
#define OAI_OAIResponsePolicyRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIResponsePolicyRule.h"
#include "OAIResponsePolicyRulesListResponse.h"
#include "OAIResponsePolicyRulesPatchResponse.h"
#include "OAIResponsePolicyRulesUpdateResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResponsePolicyRulesApi : public QObject {
    Q_OBJECT

public:
    OAIResponsePolicyRulesApi(const int timeOut = 0);
    ~OAIResponsePolicyRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  response_policy QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  client_operation_id QString [optional]
    * @param[in]  oai_response_policy_rule OAIResponsePolicyRule [optional]
    */
    virtual void dns_responsePolicyRules_create(const QString &project, const QString &location, const QString &response_policy, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResponsePolicyRule> &oai_response_policy_rule = ::OpenAPI::OptionalParam<OAIResponsePolicyRule>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  response_policy QString [required]
    * @param[in]  response_policy_rule QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  client_operation_id QString [optional]
    */
    virtual void dns_responsePolicyRules_delete(const QString &project, const QString &location, const QString &response_policy, const QString &response_policy_rule, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_operation_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  response_policy QString [required]
    * @param[in]  response_policy_rule QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  client_operation_id QString [optional]
    */
    virtual void dns_responsePolicyRules_get(const QString &project, const QString &location, const QString &response_policy, const QString &response_policy_rule, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_operation_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  response_policy QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dns_responsePolicyRules_list(const QString &project, const QString &location, const QString &response_policy, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  response_policy QString [required]
    * @param[in]  response_policy_rule QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  client_operation_id QString [optional]
    * @param[in]  oai_response_policy_rule OAIResponsePolicyRule [optional]
    */
    virtual void dns_responsePolicyRules_patch(const QString &project, const QString &location, const QString &response_policy, const QString &response_policy_rule, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResponsePolicyRule> &oai_response_policy_rule = ::OpenAPI::OptionalParam<OAIResponsePolicyRule>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  response_policy QString [required]
    * @param[in]  response_policy_rule QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  client_operation_id QString [optional]
    * @param[in]  oai_response_policy_rule OAIResponsePolicyRule [optional]
    */
    virtual void dns_responsePolicyRules_update(const QString &project, const QString &location, const QString &response_policy, const QString &response_policy_rule, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResponsePolicyRule> &oai_response_policy_rule = ::OpenAPI::OptionalParam<OAIResponsePolicyRule>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dns_responsePolicyRules_createCallback(OAIHttpRequestWorker *worker);
    void dns_responsePolicyRules_deleteCallback(OAIHttpRequestWorker *worker);
    void dns_responsePolicyRules_getCallback(OAIHttpRequestWorker *worker);
    void dns_responsePolicyRules_listCallback(OAIHttpRequestWorker *worker);
    void dns_responsePolicyRules_patchCallback(OAIHttpRequestWorker *worker);
    void dns_responsePolicyRules_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dns_responsePolicyRules_createSignal(OAIResponsePolicyRule summary);
    void dns_responsePolicyRules_deleteSignal();
    void dns_responsePolicyRules_getSignal(OAIResponsePolicyRule summary);
    void dns_responsePolicyRules_listSignal(OAIResponsePolicyRulesListResponse summary);
    void dns_responsePolicyRules_patchSignal(OAIResponsePolicyRulesPatchResponse summary);
    void dns_responsePolicyRules_updateSignal(OAIResponsePolicyRulesUpdateResponse summary);


    void dns_responsePolicyRules_createSignalFull(OAIHttpRequestWorker *worker, OAIResponsePolicyRule summary);
    void dns_responsePolicyRules_deleteSignalFull(OAIHttpRequestWorker *worker);
    void dns_responsePolicyRules_getSignalFull(OAIHttpRequestWorker *worker, OAIResponsePolicyRule summary);
    void dns_responsePolicyRules_listSignalFull(OAIHttpRequestWorker *worker, OAIResponsePolicyRulesListResponse summary);
    void dns_responsePolicyRules_patchSignalFull(OAIHttpRequestWorker *worker, OAIResponsePolicyRulesPatchResponse summary);
    void dns_responsePolicyRules_updateSignalFull(OAIHttpRequestWorker *worker, OAIResponsePolicyRulesUpdateResponse summary);

    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_createSignalError() instead")
    void dns_responsePolicyRules_createSignalE(OAIResponsePolicyRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_createSignalError(OAIResponsePolicyRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_deleteSignalError() instead")
    void dns_responsePolicyRules_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_getSignalError() instead")
    void dns_responsePolicyRules_getSignalE(OAIResponsePolicyRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_getSignalError(OAIResponsePolicyRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_listSignalError() instead")
    void dns_responsePolicyRules_listSignalE(OAIResponsePolicyRulesListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_listSignalError(OAIResponsePolicyRulesListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_patchSignalError() instead")
    void dns_responsePolicyRules_patchSignalE(OAIResponsePolicyRulesPatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_patchSignalError(OAIResponsePolicyRulesPatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_updateSignalError() instead")
    void dns_responsePolicyRules_updateSignalE(OAIResponsePolicyRulesUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_updateSignalError(OAIResponsePolicyRulesUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_createSignalErrorFull() instead")
    void dns_responsePolicyRules_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_deleteSignalErrorFull() instead")
    void dns_responsePolicyRules_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_getSignalErrorFull() instead")
    void dns_responsePolicyRules_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_listSignalErrorFull() instead")
    void dns_responsePolicyRules_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_patchSignalErrorFull() instead")
    void dns_responsePolicyRules_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dns_responsePolicyRules_updateSignalErrorFull() instead")
    void dns_responsePolicyRules_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dns_responsePolicyRules_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
