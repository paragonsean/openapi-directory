/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuota::OAIQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuota::OAIQuota() {
    this->initializeModel();
}

OAIQuota::~OAIQuota() {}

void OAIQuota::initializeModel() {

    m_dns_keys_per_managed_zone_isSet = false;
    m_dns_keys_per_managed_zone_isValid = false;

    m_gke_clusters_per_managed_zone_isSet = false;
    m_gke_clusters_per_managed_zone_isValid = false;

    m_gke_clusters_per_policy_isSet = false;
    m_gke_clusters_per_policy_isValid = false;

    m_gke_clusters_per_response_policy_isSet = false;
    m_gke_clusters_per_response_policy_isValid = false;

    m_items_per_routing_policy_isSet = false;
    m_items_per_routing_policy_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_managed_zones_isSet = false;
    m_managed_zones_isValid = false;

    m_managed_zones_per_gke_cluster_isSet = false;
    m_managed_zones_per_gke_cluster_isValid = false;

    m_managed_zones_per_network_isSet = false;
    m_managed_zones_per_network_isValid = false;

    m_nameservers_per_delegation_isSet = false;
    m_nameservers_per_delegation_isValid = false;

    m_networks_per_managed_zone_isSet = false;
    m_networks_per_managed_zone_isValid = false;

    m_networks_per_policy_isSet = false;
    m_networks_per_policy_isValid = false;

    m_networks_per_response_policy_isSet = false;
    m_networks_per_response_policy_isValid = false;

    m_peering_zones_per_target_network_isSet = false;
    m_peering_zones_per_target_network_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_resource_records_per_rrset_isSet = false;
    m_resource_records_per_rrset_isValid = false;

    m_response_policies_isSet = false;
    m_response_policies_isValid = false;

    m_response_policy_rules_per_response_policy_isSet = false;
    m_response_policy_rules_per_response_policy_isValid = false;

    m_rrset_additions_per_change_isSet = false;
    m_rrset_additions_per_change_isValid = false;

    m_rrset_deletions_per_change_isSet = false;
    m_rrset_deletions_per_change_isValid = false;

    m_rrsets_per_managed_zone_isSet = false;
    m_rrsets_per_managed_zone_isValid = false;

    m_target_name_servers_per_managed_zone_isSet = false;
    m_target_name_servers_per_managed_zone_isValid = false;

    m_target_name_servers_per_policy_isSet = false;
    m_target_name_servers_per_policy_isValid = false;

    m_total_rrdata_size_per_change_isSet = false;
    m_total_rrdata_size_per_change_isValid = false;

    m_whitelisted_key_specs_isSet = false;
    m_whitelisted_key_specs_isValid = false;
}

void OAIQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuota::fromJsonObject(QJsonObject json) {

    m_dns_keys_per_managed_zone_isValid = ::OpenAPI::fromJsonValue(m_dns_keys_per_managed_zone, json[QString("dnsKeysPerManagedZone")]);
    m_dns_keys_per_managed_zone_isSet = !json[QString("dnsKeysPerManagedZone")].isNull() && m_dns_keys_per_managed_zone_isValid;

    m_gke_clusters_per_managed_zone_isValid = ::OpenAPI::fromJsonValue(m_gke_clusters_per_managed_zone, json[QString("gkeClustersPerManagedZone")]);
    m_gke_clusters_per_managed_zone_isSet = !json[QString("gkeClustersPerManagedZone")].isNull() && m_gke_clusters_per_managed_zone_isValid;

    m_gke_clusters_per_policy_isValid = ::OpenAPI::fromJsonValue(m_gke_clusters_per_policy, json[QString("gkeClustersPerPolicy")]);
    m_gke_clusters_per_policy_isSet = !json[QString("gkeClustersPerPolicy")].isNull() && m_gke_clusters_per_policy_isValid;

    m_gke_clusters_per_response_policy_isValid = ::OpenAPI::fromJsonValue(m_gke_clusters_per_response_policy, json[QString("gkeClustersPerResponsePolicy")]);
    m_gke_clusters_per_response_policy_isSet = !json[QString("gkeClustersPerResponsePolicy")].isNull() && m_gke_clusters_per_response_policy_isValid;

    m_items_per_routing_policy_isValid = ::OpenAPI::fromJsonValue(m_items_per_routing_policy, json[QString("itemsPerRoutingPolicy")]);
    m_items_per_routing_policy_isSet = !json[QString("itemsPerRoutingPolicy")].isNull() && m_items_per_routing_policy_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_managed_zones_isValid = ::OpenAPI::fromJsonValue(m_managed_zones, json[QString("managedZones")]);
    m_managed_zones_isSet = !json[QString("managedZones")].isNull() && m_managed_zones_isValid;

    m_managed_zones_per_gke_cluster_isValid = ::OpenAPI::fromJsonValue(m_managed_zones_per_gke_cluster, json[QString("managedZonesPerGkeCluster")]);
    m_managed_zones_per_gke_cluster_isSet = !json[QString("managedZonesPerGkeCluster")].isNull() && m_managed_zones_per_gke_cluster_isValid;

    m_managed_zones_per_network_isValid = ::OpenAPI::fromJsonValue(m_managed_zones_per_network, json[QString("managedZonesPerNetwork")]);
    m_managed_zones_per_network_isSet = !json[QString("managedZonesPerNetwork")].isNull() && m_managed_zones_per_network_isValid;

    m_nameservers_per_delegation_isValid = ::OpenAPI::fromJsonValue(m_nameservers_per_delegation, json[QString("nameserversPerDelegation")]);
    m_nameservers_per_delegation_isSet = !json[QString("nameserversPerDelegation")].isNull() && m_nameservers_per_delegation_isValid;

    m_networks_per_managed_zone_isValid = ::OpenAPI::fromJsonValue(m_networks_per_managed_zone, json[QString("networksPerManagedZone")]);
    m_networks_per_managed_zone_isSet = !json[QString("networksPerManagedZone")].isNull() && m_networks_per_managed_zone_isValid;

    m_networks_per_policy_isValid = ::OpenAPI::fromJsonValue(m_networks_per_policy, json[QString("networksPerPolicy")]);
    m_networks_per_policy_isSet = !json[QString("networksPerPolicy")].isNull() && m_networks_per_policy_isValid;

    m_networks_per_response_policy_isValid = ::OpenAPI::fromJsonValue(m_networks_per_response_policy, json[QString("networksPerResponsePolicy")]);
    m_networks_per_response_policy_isSet = !json[QString("networksPerResponsePolicy")].isNull() && m_networks_per_response_policy_isValid;

    m_peering_zones_per_target_network_isValid = ::OpenAPI::fromJsonValue(m_peering_zones_per_target_network, json[QString("peeringZonesPerTargetNetwork")]);
    m_peering_zones_per_target_network_isSet = !json[QString("peeringZonesPerTargetNetwork")].isNull() && m_peering_zones_per_target_network_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_resource_records_per_rrset_isValid = ::OpenAPI::fromJsonValue(m_resource_records_per_rrset, json[QString("resourceRecordsPerRrset")]);
    m_resource_records_per_rrset_isSet = !json[QString("resourceRecordsPerRrset")].isNull() && m_resource_records_per_rrset_isValid;

    m_response_policies_isValid = ::OpenAPI::fromJsonValue(m_response_policies, json[QString("responsePolicies")]);
    m_response_policies_isSet = !json[QString("responsePolicies")].isNull() && m_response_policies_isValid;

    m_response_policy_rules_per_response_policy_isValid = ::OpenAPI::fromJsonValue(m_response_policy_rules_per_response_policy, json[QString("responsePolicyRulesPerResponsePolicy")]);
    m_response_policy_rules_per_response_policy_isSet = !json[QString("responsePolicyRulesPerResponsePolicy")].isNull() && m_response_policy_rules_per_response_policy_isValid;

    m_rrset_additions_per_change_isValid = ::OpenAPI::fromJsonValue(m_rrset_additions_per_change, json[QString("rrsetAdditionsPerChange")]);
    m_rrset_additions_per_change_isSet = !json[QString("rrsetAdditionsPerChange")].isNull() && m_rrset_additions_per_change_isValid;

    m_rrset_deletions_per_change_isValid = ::OpenAPI::fromJsonValue(m_rrset_deletions_per_change, json[QString("rrsetDeletionsPerChange")]);
    m_rrset_deletions_per_change_isSet = !json[QString("rrsetDeletionsPerChange")].isNull() && m_rrset_deletions_per_change_isValid;

    m_rrsets_per_managed_zone_isValid = ::OpenAPI::fromJsonValue(m_rrsets_per_managed_zone, json[QString("rrsetsPerManagedZone")]);
    m_rrsets_per_managed_zone_isSet = !json[QString("rrsetsPerManagedZone")].isNull() && m_rrsets_per_managed_zone_isValid;

    m_target_name_servers_per_managed_zone_isValid = ::OpenAPI::fromJsonValue(m_target_name_servers_per_managed_zone, json[QString("targetNameServersPerManagedZone")]);
    m_target_name_servers_per_managed_zone_isSet = !json[QString("targetNameServersPerManagedZone")].isNull() && m_target_name_servers_per_managed_zone_isValid;

    m_target_name_servers_per_policy_isValid = ::OpenAPI::fromJsonValue(m_target_name_servers_per_policy, json[QString("targetNameServersPerPolicy")]);
    m_target_name_servers_per_policy_isSet = !json[QString("targetNameServersPerPolicy")].isNull() && m_target_name_servers_per_policy_isValid;

    m_total_rrdata_size_per_change_isValid = ::OpenAPI::fromJsonValue(m_total_rrdata_size_per_change, json[QString("totalRrdataSizePerChange")]);
    m_total_rrdata_size_per_change_isSet = !json[QString("totalRrdataSizePerChange")].isNull() && m_total_rrdata_size_per_change_isValid;

    m_whitelisted_key_specs_isValid = ::OpenAPI::fromJsonValue(m_whitelisted_key_specs, json[QString("whitelistedKeySpecs")]);
    m_whitelisted_key_specs_isSet = !json[QString("whitelistedKeySpecs")].isNull() && m_whitelisted_key_specs_isValid;
}

QString OAIQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_keys_per_managed_zone_isSet) {
        obj.insert(QString("dnsKeysPerManagedZone"), ::OpenAPI::toJsonValue(m_dns_keys_per_managed_zone));
    }
    if (m_gke_clusters_per_managed_zone_isSet) {
        obj.insert(QString("gkeClustersPerManagedZone"), ::OpenAPI::toJsonValue(m_gke_clusters_per_managed_zone));
    }
    if (m_gke_clusters_per_policy_isSet) {
        obj.insert(QString("gkeClustersPerPolicy"), ::OpenAPI::toJsonValue(m_gke_clusters_per_policy));
    }
    if (m_gke_clusters_per_response_policy_isSet) {
        obj.insert(QString("gkeClustersPerResponsePolicy"), ::OpenAPI::toJsonValue(m_gke_clusters_per_response_policy));
    }
    if (m_items_per_routing_policy_isSet) {
        obj.insert(QString("itemsPerRoutingPolicy"), ::OpenAPI::toJsonValue(m_items_per_routing_policy));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_managed_zones_isSet) {
        obj.insert(QString("managedZones"), ::OpenAPI::toJsonValue(m_managed_zones));
    }
    if (m_managed_zones_per_gke_cluster_isSet) {
        obj.insert(QString("managedZonesPerGkeCluster"), ::OpenAPI::toJsonValue(m_managed_zones_per_gke_cluster));
    }
    if (m_managed_zones_per_network_isSet) {
        obj.insert(QString("managedZonesPerNetwork"), ::OpenAPI::toJsonValue(m_managed_zones_per_network));
    }
    if (m_nameservers_per_delegation_isSet) {
        obj.insert(QString("nameserversPerDelegation"), ::OpenAPI::toJsonValue(m_nameservers_per_delegation));
    }
    if (m_networks_per_managed_zone_isSet) {
        obj.insert(QString("networksPerManagedZone"), ::OpenAPI::toJsonValue(m_networks_per_managed_zone));
    }
    if (m_networks_per_policy_isSet) {
        obj.insert(QString("networksPerPolicy"), ::OpenAPI::toJsonValue(m_networks_per_policy));
    }
    if (m_networks_per_response_policy_isSet) {
        obj.insert(QString("networksPerResponsePolicy"), ::OpenAPI::toJsonValue(m_networks_per_response_policy));
    }
    if (m_peering_zones_per_target_network_isSet) {
        obj.insert(QString("peeringZonesPerTargetNetwork"), ::OpenAPI::toJsonValue(m_peering_zones_per_target_network));
    }
    if (m_policies_isSet) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_resource_records_per_rrset_isSet) {
        obj.insert(QString("resourceRecordsPerRrset"), ::OpenAPI::toJsonValue(m_resource_records_per_rrset));
    }
    if (m_response_policies_isSet) {
        obj.insert(QString("responsePolicies"), ::OpenAPI::toJsonValue(m_response_policies));
    }
    if (m_response_policy_rules_per_response_policy_isSet) {
        obj.insert(QString("responsePolicyRulesPerResponsePolicy"), ::OpenAPI::toJsonValue(m_response_policy_rules_per_response_policy));
    }
    if (m_rrset_additions_per_change_isSet) {
        obj.insert(QString("rrsetAdditionsPerChange"), ::OpenAPI::toJsonValue(m_rrset_additions_per_change));
    }
    if (m_rrset_deletions_per_change_isSet) {
        obj.insert(QString("rrsetDeletionsPerChange"), ::OpenAPI::toJsonValue(m_rrset_deletions_per_change));
    }
    if (m_rrsets_per_managed_zone_isSet) {
        obj.insert(QString("rrsetsPerManagedZone"), ::OpenAPI::toJsonValue(m_rrsets_per_managed_zone));
    }
    if (m_target_name_servers_per_managed_zone_isSet) {
        obj.insert(QString("targetNameServersPerManagedZone"), ::OpenAPI::toJsonValue(m_target_name_servers_per_managed_zone));
    }
    if (m_target_name_servers_per_policy_isSet) {
        obj.insert(QString("targetNameServersPerPolicy"), ::OpenAPI::toJsonValue(m_target_name_servers_per_policy));
    }
    if (m_total_rrdata_size_per_change_isSet) {
        obj.insert(QString("totalRrdataSizePerChange"), ::OpenAPI::toJsonValue(m_total_rrdata_size_per_change));
    }
    if (m_whitelisted_key_specs.size() > 0) {
        obj.insert(QString("whitelistedKeySpecs"), ::OpenAPI::toJsonValue(m_whitelisted_key_specs));
    }
    return obj;
}

qint32 OAIQuota::getDnsKeysPerManagedZone() const {
    return m_dns_keys_per_managed_zone;
}
void OAIQuota::setDnsKeysPerManagedZone(const qint32 &dns_keys_per_managed_zone) {
    m_dns_keys_per_managed_zone = dns_keys_per_managed_zone;
    m_dns_keys_per_managed_zone_isSet = true;
}

bool OAIQuota::is_dns_keys_per_managed_zone_Set() const{
    return m_dns_keys_per_managed_zone_isSet;
}

bool OAIQuota::is_dns_keys_per_managed_zone_Valid() const{
    return m_dns_keys_per_managed_zone_isValid;
}

qint32 OAIQuota::getGkeClustersPerManagedZone() const {
    return m_gke_clusters_per_managed_zone;
}
void OAIQuota::setGkeClustersPerManagedZone(const qint32 &gke_clusters_per_managed_zone) {
    m_gke_clusters_per_managed_zone = gke_clusters_per_managed_zone;
    m_gke_clusters_per_managed_zone_isSet = true;
}

bool OAIQuota::is_gke_clusters_per_managed_zone_Set() const{
    return m_gke_clusters_per_managed_zone_isSet;
}

bool OAIQuota::is_gke_clusters_per_managed_zone_Valid() const{
    return m_gke_clusters_per_managed_zone_isValid;
}

qint32 OAIQuota::getGkeClustersPerPolicy() const {
    return m_gke_clusters_per_policy;
}
void OAIQuota::setGkeClustersPerPolicy(const qint32 &gke_clusters_per_policy) {
    m_gke_clusters_per_policy = gke_clusters_per_policy;
    m_gke_clusters_per_policy_isSet = true;
}

bool OAIQuota::is_gke_clusters_per_policy_Set() const{
    return m_gke_clusters_per_policy_isSet;
}

bool OAIQuota::is_gke_clusters_per_policy_Valid() const{
    return m_gke_clusters_per_policy_isValid;
}

qint32 OAIQuota::getGkeClustersPerResponsePolicy() const {
    return m_gke_clusters_per_response_policy;
}
void OAIQuota::setGkeClustersPerResponsePolicy(const qint32 &gke_clusters_per_response_policy) {
    m_gke_clusters_per_response_policy = gke_clusters_per_response_policy;
    m_gke_clusters_per_response_policy_isSet = true;
}

bool OAIQuota::is_gke_clusters_per_response_policy_Set() const{
    return m_gke_clusters_per_response_policy_isSet;
}

bool OAIQuota::is_gke_clusters_per_response_policy_Valid() const{
    return m_gke_clusters_per_response_policy_isValid;
}

qint32 OAIQuota::getItemsPerRoutingPolicy() const {
    return m_items_per_routing_policy;
}
void OAIQuota::setItemsPerRoutingPolicy(const qint32 &items_per_routing_policy) {
    m_items_per_routing_policy = items_per_routing_policy;
    m_items_per_routing_policy_isSet = true;
}

bool OAIQuota::is_items_per_routing_policy_Set() const{
    return m_items_per_routing_policy_isSet;
}

bool OAIQuota::is_items_per_routing_policy_Valid() const{
    return m_items_per_routing_policy_isValid;
}

QString OAIQuota::getKind() const {
    return m_kind;
}
void OAIQuota::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIQuota::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIQuota::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIQuota::getManagedZones() const {
    return m_managed_zones;
}
void OAIQuota::setManagedZones(const qint32 &managed_zones) {
    m_managed_zones = managed_zones;
    m_managed_zones_isSet = true;
}

bool OAIQuota::is_managed_zones_Set() const{
    return m_managed_zones_isSet;
}

bool OAIQuota::is_managed_zones_Valid() const{
    return m_managed_zones_isValid;
}

qint32 OAIQuota::getManagedZonesPerGkeCluster() const {
    return m_managed_zones_per_gke_cluster;
}
void OAIQuota::setManagedZonesPerGkeCluster(const qint32 &managed_zones_per_gke_cluster) {
    m_managed_zones_per_gke_cluster = managed_zones_per_gke_cluster;
    m_managed_zones_per_gke_cluster_isSet = true;
}

bool OAIQuota::is_managed_zones_per_gke_cluster_Set() const{
    return m_managed_zones_per_gke_cluster_isSet;
}

bool OAIQuota::is_managed_zones_per_gke_cluster_Valid() const{
    return m_managed_zones_per_gke_cluster_isValid;
}

qint32 OAIQuota::getManagedZonesPerNetwork() const {
    return m_managed_zones_per_network;
}
void OAIQuota::setManagedZonesPerNetwork(const qint32 &managed_zones_per_network) {
    m_managed_zones_per_network = managed_zones_per_network;
    m_managed_zones_per_network_isSet = true;
}

bool OAIQuota::is_managed_zones_per_network_Set() const{
    return m_managed_zones_per_network_isSet;
}

bool OAIQuota::is_managed_zones_per_network_Valid() const{
    return m_managed_zones_per_network_isValid;
}

qint32 OAIQuota::getNameserversPerDelegation() const {
    return m_nameservers_per_delegation;
}
void OAIQuota::setNameserversPerDelegation(const qint32 &nameservers_per_delegation) {
    m_nameservers_per_delegation = nameservers_per_delegation;
    m_nameservers_per_delegation_isSet = true;
}

bool OAIQuota::is_nameservers_per_delegation_Set() const{
    return m_nameservers_per_delegation_isSet;
}

bool OAIQuota::is_nameservers_per_delegation_Valid() const{
    return m_nameservers_per_delegation_isValid;
}

qint32 OAIQuota::getNetworksPerManagedZone() const {
    return m_networks_per_managed_zone;
}
void OAIQuota::setNetworksPerManagedZone(const qint32 &networks_per_managed_zone) {
    m_networks_per_managed_zone = networks_per_managed_zone;
    m_networks_per_managed_zone_isSet = true;
}

bool OAIQuota::is_networks_per_managed_zone_Set() const{
    return m_networks_per_managed_zone_isSet;
}

bool OAIQuota::is_networks_per_managed_zone_Valid() const{
    return m_networks_per_managed_zone_isValid;
}

qint32 OAIQuota::getNetworksPerPolicy() const {
    return m_networks_per_policy;
}
void OAIQuota::setNetworksPerPolicy(const qint32 &networks_per_policy) {
    m_networks_per_policy = networks_per_policy;
    m_networks_per_policy_isSet = true;
}

bool OAIQuota::is_networks_per_policy_Set() const{
    return m_networks_per_policy_isSet;
}

bool OAIQuota::is_networks_per_policy_Valid() const{
    return m_networks_per_policy_isValid;
}

qint32 OAIQuota::getNetworksPerResponsePolicy() const {
    return m_networks_per_response_policy;
}
void OAIQuota::setNetworksPerResponsePolicy(const qint32 &networks_per_response_policy) {
    m_networks_per_response_policy = networks_per_response_policy;
    m_networks_per_response_policy_isSet = true;
}

bool OAIQuota::is_networks_per_response_policy_Set() const{
    return m_networks_per_response_policy_isSet;
}

bool OAIQuota::is_networks_per_response_policy_Valid() const{
    return m_networks_per_response_policy_isValid;
}

qint32 OAIQuota::getPeeringZonesPerTargetNetwork() const {
    return m_peering_zones_per_target_network;
}
void OAIQuota::setPeeringZonesPerTargetNetwork(const qint32 &peering_zones_per_target_network) {
    m_peering_zones_per_target_network = peering_zones_per_target_network;
    m_peering_zones_per_target_network_isSet = true;
}

bool OAIQuota::is_peering_zones_per_target_network_Set() const{
    return m_peering_zones_per_target_network_isSet;
}

bool OAIQuota::is_peering_zones_per_target_network_Valid() const{
    return m_peering_zones_per_target_network_isValid;
}

qint32 OAIQuota::getPolicies() const {
    return m_policies;
}
void OAIQuota::setPolicies(const qint32 &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIQuota::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIQuota::is_policies_Valid() const{
    return m_policies_isValid;
}

qint32 OAIQuota::getResourceRecordsPerRrset() const {
    return m_resource_records_per_rrset;
}
void OAIQuota::setResourceRecordsPerRrset(const qint32 &resource_records_per_rrset) {
    m_resource_records_per_rrset = resource_records_per_rrset;
    m_resource_records_per_rrset_isSet = true;
}

bool OAIQuota::is_resource_records_per_rrset_Set() const{
    return m_resource_records_per_rrset_isSet;
}

bool OAIQuota::is_resource_records_per_rrset_Valid() const{
    return m_resource_records_per_rrset_isValid;
}

qint32 OAIQuota::getResponsePolicies() const {
    return m_response_policies;
}
void OAIQuota::setResponsePolicies(const qint32 &response_policies) {
    m_response_policies = response_policies;
    m_response_policies_isSet = true;
}

bool OAIQuota::is_response_policies_Set() const{
    return m_response_policies_isSet;
}

bool OAIQuota::is_response_policies_Valid() const{
    return m_response_policies_isValid;
}

qint32 OAIQuota::getResponsePolicyRulesPerResponsePolicy() const {
    return m_response_policy_rules_per_response_policy;
}
void OAIQuota::setResponsePolicyRulesPerResponsePolicy(const qint32 &response_policy_rules_per_response_policy) {
    m_response_policy_rules_per_response_policy = response_policy_rules_per_response_policy;
    m_response_policy_rules_per_response_policy_isSet = true;
}

bool OAIQuota::is_response_policy_rules_per_response_policy_Set() const{
    return m_response_policy_rules_per_response_policy_isSet;
}

bool OAIQuota::is_response_policy_rules_per_response_policy_Valid() const{
    return m_response_policy_rules_per_response_policy_isValid;
}

qint32 OAIQuota::getRrsetAdditionsPerChange() const {
    return m_rrset_additions_per_change;
}
void OAIQuota::setRrsetAdditionsPerChange(const qint32 &rrset_additions_per_change) {
    m_rrset_additions_per_change = rrset_additions_per_change;
    m_rrset_additions_per_change_isSet = true;
}

bool OAIQuota::is_rrset_additions_per_change_Set() const{
    return m_rrset_additions_per_change_isSet;
}

bool OAIQuota::is_rrset_additions_per_change_Valid() const{
    return m_rrset_additions_per_change_isValid;
}

qint32 OAIQuota::getRrsetDeletionsPerChange() const {
    return m_rrset_deletions_per_change;
}
void OAIQuota::setRrsetDeletionsPerChange(const qint32 &rrset_deletions_per_change) {
    m_rrset_deletions_per_change = rrset_deletions_per_change;
    m_rrset_deletions_per_change_isSet = true;
}

bool OAIQuota::is_rrset_deletions_per_change_Set() const{
    return m_rrset_deletions_per_change_isSet;
}

bool OAIQuota::is_rrset_deletions_per_change_Valid() const{
    return m_rrset_deletions_per_change_isValid;
}

qint32 OAIQuota::getRrsetsPerManagedZone() const {
    return m_rrsets_per_managed_zone;
}
void OAIQuota::setRrsetsPerManagedZone(const qint32 &rrsets_per_managed_zone) {
    m_rrsets_per_managed_zone = rrsets_per_managed_zone;
    m_rrsets_per_managed_zone_isSet = true;
}

bool OAIQuota::is_rrsets_per_managed_zone_Set() const{
    return m_rrsets_per_managed_zone_isSet;
}

bool OAIQuota::is_rrsets_per_managed_zone_Valid() const{
    return m_rrsets_per_managed_zone_isValid;
}

qint32 OAIQuota::getTargetNameServersPerManagedZone() const {
    return m_target_name_servers_per_managed_zone;
}
void OAIQuota::setTargetNameServersPerManagedZone(const qint32 &target_name_servers_per_managed_zone) {
    m_target_name_servers_per_managed_zone = target_name_servers_per_managed_zone;
    m_target_name_servers_per_managed_zone_isSet = true;
}

bool OAIQuota::is_target_name_servers_per_managed_zone_Set() const{
    return m_target_name_servers_per_managed_zone_isSet;
}

bool OAIQuota::is_target_name_servers_per_managed_zone_Valid() const{
    return m_target_name_servers_per_managed_zone_isValid;
}

qint32 OAIQuota::getTargetNameServersPerPolicy() const {
    return m_target_name_servers_per_policy;
}
void OAIQuota::setTargetNameServersPerPolicy(const qint32 &target_name_servers_per_policy) {
    m_target_name_servers_per_policy = target_name_servers_per_policy;
    m_target_name_servers_per_policy_isSet = true;
}

bool OAIQuota::is_target_name_servers_per_policy_Set() const{
    return m_target_name_servers_per_policy_isSet;
}

bool OAIQuota::is_target_name_servers_per_policy_Valid() const{
    return m_target_name_servers_per_policy_isValid;
}

qint32 OAIQuota::getTotalRrdataSizePerChange() const {
    return m_total_rrdata_size_per_change;
}
void OAIQuota::setTotalRrdataSizePerChange(const qint32 &total_rrdata_size_per_change) {
    m_total_rrdata_size_per_change = total_rrdata_size_per_change;
    m_total_rrdata_size_per_change_isSet = true;
}

bool OAIQuota::is_total_rrdata_size_per_change_Set() const{
    return m_total_rrdata_size_per_change_isSet;
}

bool OAIQuota::is_total_rrdata_size_per_change_Valid() const{
    return m_total_rrdata_size_per_change_isValid;
}

QList<OAIDnsKeySpec> OAIQuota::getWhitelistedKeySpecs() const {
    return m_whitelisted_key_specs;
}
void OAIQuota::setWhitelistedKeySpecs(const QList<OAIDnsKeySpec> &whitelisted_key_specs) {
    m_whitelisted_key_specs = whitelisted_key_specs;
    m_whitelisted_key_specs_isSet = true;
}

bool OAIQuota::is_whitelisted_key_specs_Set() const{
    return m_whitelisted_key_specs_isSet;
}

bool OAIQuota::is_whitelisted_key_specs_Valid() const{
    return m_whitelisted_key_specs_isValid;
}

bool OAIQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_keys_per_managed_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_clusters_per_managed_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_clusters_per_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_clusters_per_response_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_routing_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_zones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_zones_per_gke_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_zones_per_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nameservers_per_delegation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks_per_managed_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks_per_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks_per_response_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_zones_per_target_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_records_per_rrset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_policy_rules_per_response_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrset_additions_per_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrset_deletions_per_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrsets_per_managed_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_name_servers_per_managed_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_name_servers_per_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rrdata_size_per_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelisted_key_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
