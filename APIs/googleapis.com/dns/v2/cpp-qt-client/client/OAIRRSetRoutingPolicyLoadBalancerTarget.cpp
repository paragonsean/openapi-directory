/**
 * Cloud DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRRSetRoutingPolicyLoadBalancerTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRRSetRoutingPolicyLoadBalancerTarget::OAIRRSetRoutingPolicyLoadBalancerTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRRSetRoutingPolicyLoadBalancerTarget::OAIRRSetRoutingPolicyLoadBalancerTarget() {
    this->initializeModel();
}

OAIRRSetRoutingPolicyLoadBalancerTarget::~OAIRRSetRoutingPolicyLoadBalancerTarget() {}

void OAIRRSetRoutingPolicyLoadBalancerTarget::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ip_protocol_isSet = false;
    m_ip_protocol_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_load_balancer_type_isSet = false;
    m_load_balancer_type_isValid = false;

    m_network_url_isSet = false;
    m_network_url_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIRRSetRoutingPolicyLoadBalancerTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRRSetRoutingPolicyLoadBalancerTarget::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_ip_protocol_isValid = ::OpenAPI::fromJsonValue(m_ip_protocol, json[QString("ipProtocol")]);
    m_ip_protocol_isSet = !json[QString("ipProtocol")].isNull() && m_ip_protocol_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_load_balancer_type_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_type, json[QString("loadBalancerType")]);
    m_load_balancer_type_isSet = !json[QString("loadBalancerType")].isNull() && m_load_balancer_type_isValid;

    m_network_url_isValid = ::OpenAPI::fromJsonValue(m_network_url, json[QString("networkUrl")]);
    m_network_url_isSet = !json[QString("networkUrl")].isNull() && m_network_url_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRRSetRoutingPolicyLoadBalancerTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ip_protocol_isSet) {
        obj.insert(QString("ipProtocol"), ::OpenAPI::toJsonValue(m_ip_protocol));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_load_balancer_type_isSet) {
        obj.insert(QString("loadBalancerType"), ::OpenAPI::toJsonValue(m_load_balancer_type));
    }
    if (m_network_url_isSet) {
        obj.insert(QString("networkUrl"), ::OpenAPI::toJsonValue(m_network_url));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getIpAddress() const {
    return m_ip_address;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getIpProtocol() const {
    return m_ip_protocol;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setIpProtocol(const QString &ip_protocol) {
    m_ip_protocol = ip_protocol;
    m_ip_protocol_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_ip_protocol_Set() const{
    return m_ip_protocol_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_ip_protocol_Valid() const{
    return m_ip_protocol_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getKind() const {
    return m_kind;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getLoadBalancerType() const {
    return m_load_balancer_type;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setLoadBalancerType(const QString &load_balancer_type) {
    m_load_balancer_type = load_balancer_type;
    m_load_balancer_type_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_load_balancer_type_Set() const{
    return m_load_balancer_type_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_load_balancer_type_Valid() const{
    return m_load_balancer_type_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getNetworkUrl() const {
    return m_network_url;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setNetworkUrl(const QString &network_url) {
    m_network_url = network_url;
    m_network_url_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_network_url_Set() const{
    return m_network_url_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_network_url_Valid() const{
    return m_network_url_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getPort() const {
    return m_port;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getProject() const {
    return m_project;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_project_Set() const{
    return m_project_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIRRSetRoutingPolicyLoadBalancerTarget::getRegion() const {
    return m_region;
}
void OAIRRSetRoutingPolicyLoadBalancerTarget::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_region_Set() const{
    return m_region_isSet;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRRSetRoutingPolicyLoadBalancerTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
