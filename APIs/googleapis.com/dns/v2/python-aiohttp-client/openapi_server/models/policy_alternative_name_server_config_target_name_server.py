# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyAlternativeNameServerConfigTargetNameServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forwarding_path: str=None, ipv4_address: str=None, ipv6_address: str=None, kind: str='dns#policyAlternativeNameServerConfigTargetNameServer'):
        """PolicyAlternativeNameServerConfigTargetNameServer - a model defined in OpenAPI

        :param forwarding_path: The forwarding_path of this PolicyAlternativeNameServerConfigTargetNameServer.
        :param ipv4_address: The ipv4_address of this PolicyAlternativeNameServerConfigTargetNameServer.
        :param ipv6_address: The ipv6_address of this PolicyAlternativeNameServerConfigTargetNameServer.
        :param kind: The kind of this PolicyAlternativeNameServerConfigTargetNameServer.
        """
        self.openapi_types = {
            'forwarding_path': str,
            'ipv4_address': str,
            'ipv6_address': str,
            'kind': str
        }

        self.attribute_map = {
            'forwarding_path': 'forwardingPath',
            'ipv4_address': 'ipv4Address',
            'ipv6_address': 'ipv6Address',
            'kind': 'kind'
        }

        self._forwarding_path = forwarding_path
        self._ipv4_address = ipv4_address
        self._ipv6_address = ipv6_address
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyAlternativeNameServerConfigTargetNameServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyAlternativeNameServerConfigTargetNameServer of this PolicyAlternativeNameServerConfigTargetNameServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forwarding_path(self):
        """Gets the forwarding_path of this PolicyAlternativeNameServerConfigTargetNameServer.

        Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.

        :return: The forwarding_path of this PolicyAlternativeNameServerConfigTargetNameServer.
        :rtype: str
        """
        return self._forwarding_path

    @forwarding_path.setter
    def forwarding_path(self, forwarding_path):
        """Sets the forwarding_path of this PolicyAlternativeNameServerConfigTargetNameServer.

        Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.

        :param forwarding_path: The forwarding_path of this PolicyAlternativeNameServerConfigTargetNameServer.
        :type forwarding_path: str
        """
        allowed_values = ["DEFAULT", "PRIVATE"]  # noqa: E501
        if forwarding_path not in allowed_values:
            raise ValueError(
                "Invalid value for `forwarding_path` ({0}), must be one of {1}"
                .format(forwarding_path, allowed_values)
            )

        self._forwarding_path = forwarding_path

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this PolicyAlternativeNameServerConfigTargetNameServer.

        IPv4 address to forward queries to.

        :return: The ipv4_address of this PolicyAlternativeNameServerConfigTargetNameServer.
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this PolicyAlternativeNameServerConfigTargetNameServer.

        IPv4 address to forward queries to.

        :param ipv4_address: The ipv4_address of this PolicyAlternativeNameServerConfigTargetNameServer.
        :type ipv4_address: str
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this PolicyAlternativeNameServerConfigTargetNameServer.

        IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.

        :return: The ipv6_address of this PolicyAlternativeNameServerConfigTargetNameServer.
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this PolicyAlternativeNameServerConfigTargetNameServer.

        IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.

        :param ipv6_address: The ipv6_address of this PolicyAlternativeNameServerConfigTargetNameServer.
        :type ipv6_address: str
        """

        self._ipv6_address = ipv6_address

    @property
    def kind(self):
        """Gets the kind of this PolicyAlternativeNameServerConfigTargetNameServer.


        :return: The kind of this PolicyAlternativeNameServerConfigTargetNameServer.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PolicyAlternativeNameServerConfigTargetNameServer.


        :param kind: The kind of this PolicyAlternativeNameServerConfigTargetNameServer.
        :type kind: str
        """

        self._kind = kind
