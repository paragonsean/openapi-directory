# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_key_spec import DnsKeySpec
from openapi_server import util


class Quota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_keys_per_managed_zone: int=None, gke_clusters_per_managed_zone: int=None, gke_clusters_per_policy: int=None, gke_clusters_per_response_policy: int=None, items_per_routing_policy: int=None, kind: str='dns#quota', managed_zones: int=None, managed_zones_per_gke_cluster: int=None, managed_zones_per_network: int=None, nameservers_per_delegation: int=None, networks_per_managed_zone: int=None, networks_per_policy: int=None, networks_per_response_policy: int=None, peering_zones_per_target_network: int=None, policies: int=None, resource_records_per_rrset: int=None, response_policies: int=None, response_policy_rules_per_response_policy: int=None, rrset_additions_per_change: int=None, rrset_deletions_per_change: int=None, rrsets_per_managed_zone: int=None, target_name_servers_per_managed_zone: int=None, target_name_servers_per_policy: int=None, total_rrdata_size_per_change: int=None, whitelisted_key_specs: List[DnsKeySpec]=None):
        """Quota - a model defined in OpenAPI

        :param dns_keys_per_managed_zone: The dns_keys_per_managed_zone of this Quota.
        :param gke_clusters_per_managed_zone: The gke_clusters_per_managed_zone of this Quota.
        :param gke_clusters_per_policy: The gke_clusters_per_policy of this Quota.
        :param gke_clusters_per_response_policy: The gke_clusters_per_response_policy of this Quota.
        :param items_per_routing_policy: The items_per_routing_policy of this Quota.
        :param kind: The kind of this Quota.
        :param managed_zones: The managed_zones of this Quota.
        :param managed_zones_per_gke_cluster: The managed_zones_per_gke_cluster of this Quota.
        :param managed_zones_per_network: The managed_zones_per_network of this Quota.
        :param nameservers_per_delegation: The nameservers_per_delegation of this Quota.
        :param networks_per_managed_zone: The networks_per_managed_zone of this Quota.
        :param networks_per_policy: The networks_per_policy of this Quota.
        :param networks_per_response_policy: The networks_per_response_policy of this Quota.
        :param peering_zones_per_target_network: The peering_zones_per_target_network of this Quota.
        :param policies: The policies of this Quota.
        :param resource_records_per_rrset: The resource_records_per_rrset of this Quota.
        :param response_policies: The response_policies of this Quota.
        :param response_policy_rules_per_response_policy: The response_policy_rules_per_response_policy of this Quota.
        :param rrset_additions_per_change: The rrset_additions_per_change of this Quota.
        :param rrset_deletions_per_change: The rrset_deletions_per_change of this Quota.
        :param rrsets_per_managed_zone: The rrsets_per_managed_zone of this Quota.
        :param target_name_servers_per_managed_zone: The target_name_servers_per_managed_zone of this Quota.
        :param target_name_servers_per_policy: The target_name_servers_per_policy of this Quota.
        :param total_rrdata_size_per_change: The total_rrdata_size_per_change of this Quota.
        :param whitelisted_key_specs: The whitelisted_key_specs of this Quota.
        """
        self.openapi_types = {
            'dns_keys_per_managed_zone': int,
            'gke_clusters_per_managed_zone': int,
            'gke_clusters_per_policy': int,
            'gke_clusters_per_response_policy': int,
            'items_per_routing_policy': int,
            'kind': str,
            'managed_zones': int,
            'managed_zones_per_gke_cluster': int,
            'managed_zones_per_network': int,
            'nameservers_per_delegation': int,
            'networks_per_managed_zone': int,
            'networks_per_policy': int,
            'networks_per_response_policy': int,
            'peering_zones_per_target_network': int,
            'policies': int,
            'resource_records_per_rrset': int,
            'response_policies': int,
            'response_policy_rules_per_response_policy': int,
            'rrset_additions_per_change': int,
            'rrset_deletions_per_change': int,
            'rrsets_per_managed_zone': int,
            'target_name_servers_per_managed_zone': int,
            'target_name_servers_per_policy': int,
            'total_rrdata_size_per_change': int,
            'whitelisted_key_specs': List[DnsKeySpec]
        }

        self.attribute_map = {
            'dns_keys_per_managed_zone': 'dnsKeysPerManagedZone',
            'gke_clusters_per_managed_zone': 'gkeClustersPerManagedZone',
            'gke_clusters_per_policy': 'gkeClustersPerPolicy',
            'gke_clusters_per_response_policy': 'gkeClustersPerResponsePolicy',
            'items_per_routing_policy': 'itemsPerRoutingPolicy',
            'kind': 'kind',
            'managed_zones': 'managedZones',
            'managed_zones_per_gke_cluster': 'managedZonesPerGkeCluster',
            'managed_zones_per_network': 'managedZonesPerNetwork',
            'nameservers_per_delegation': 'nameserversPerDelegation',
            'networks_per_managed_zone': 'networksPerManagedZone',
            'networks_per_policy': 'networksPerPolicy',
            'networks_per_response_policy': 'networksPerResponsePolicy',
            'peering_zones_per_target_network': 'peeringZonesPerTargetNetwork',
            'policies': 'policies',
            'resource_records_per_rrset': 'resourceRecordsPerRrset',
            'response_policies': 'responsePolicies',
            'response_policy_rules_per_response_policy': 'responsePolicyRulesPerResponsePolicy',
            'rrset_additions_per_change': 'rrsetAdditionsPerChange',
            'rrset_deletions_per_change': 'rrsetDeletionsPerChange',
            'rrsets_per_managed_zone': 'rrsetsPerManagedZone',
            'target_name_servers_per_managed_zone': 'targetNameServersPerManagedZone',
            'target_name_servers_per_policy': 'targetNameServersPerPolicy',
            'total_rrdata_size_per_change': 'totalRrdataSizePerChange',
            'whitelisted_key_specs': 'whitelistedKeySpecs'
        }

        self._dns_keys_per_managed_zone = dns_keys_per_managed_zone
        self._gke_clusters_per_managed_zone = gke_clusters_per_managed_zone
        self._gke_clusters_per_policy = gke_clusters_per_policy
        self._gke_clusters_per_response_policy = gke_clusters_per_response_policy
        self._items_per_routing_policy = items_per_routing_policy
        self._kind = kind
        self._managed_zones = managed_zones
        self._managed_zones_per_gke_cluster = managed_zones_per_gke_cluster
        self._managed_zones_per_network = managed_zones_per_network
        self._nameservers_per_delegation = nameservers_per_delegation
        self._networks_per_managed_zone = networks_per_managed_zone
        self._networks_per_policy = networks_per_policy
        self._networks_per_response_policy = networks_per_response_policy
        self._peering_zones_per_target_network = peering_zones_per_target_network
        self._policies = policies
        self._resource_records_per_rrset = resource_records_per_rrset
        self._response_policies = response_policies
        self._response_policy_rules_per_response_policy = response_policy_rules_per_response_policy
        self._rrset_additions_per_change = rrset_additions_per_change
        self._rrset_deletions_per_change = rrset_deletions_per_change
        self._rrsets_per_managed_zone = rrsets_per_managed_zone
        self._target_name_servers_per_managed_zone = target_name_servers_per_managed_zone
        self._target_name_servers_per_policy = target_name_servers_per_policy
        self._total_rrdata_size_per_change = total_rrdata_size_per_change
        self._whitelisted_key_specs = whitelisted_key_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quota of this Quota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_keys_per_managed_zone(self):
        """Gets the dns_keys_per_managed_zone of this Quota.

        Maximum allowed number of DnsKeys per ManagedZone.

        :return: The dns_keys_per_managed_zone of this Quota.
        :rtype: int
        """
        return self._dns_keys_per_managed_zone

    @dns_keys_per_managed_zone.setter
    def dns_keys_per_managed_zone(self, dns_keys_per_managed_zone):
        """Sets the dns_keys_per_managed_zone of this Quota.

        Maximum allowed number of DnsKeys per ManagedZone.

        :param dns_keys_per_managed_zone: The dns_keys_per_managed_zone of this Quota.
        :type dns_keys_per_managed_zone: int
        """

        self._dns_keys_per_managed_zone = dns_keys_per_managed_zone

    @property
    def gke_clusters_per_managed_zone(self):
        """Gets the gke_clusters_per_managed_zone of this Quota.

        Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.

        :return: The gke_clusters_per_managed_zone of this Quota.
        :rtype: int
        """
        return self._gke_clusters_per_managed_zone

    @gke_clusters_per_managed_zone.setter
    def gke_clusters_per_managed_zone(self, gke_clusters_per_managed_zone):
        """Sets the gke_clusters_per_managed_zone of this Quota.

        Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.

        :param gke_clusters_per_managed_zone: The gke_clusters_per_managed_zone of this Quota.
        :type gke_clusters_per_managed_zone: int
        """

        self._gke_clusters_per_managed_zone = gke_clusters_per_managed_zone

    @property
    def gke_clusters_per_policy(self):
        """Gets the gke_clusters_per_policy of this Quota.

        Maximum allowed number of GKE clusters per policy.

        :return: The gke_clusters_per_policy of this Quota.
        :rtype: int
        """
        return self._gke_clusters_per_policy

    @gke_clusters_per_policy.setter
    def gke_clusters_per_policy(self, gke_clusters_per_policy):
        """Sets the gke_clusters_per_policy of this Quota.

        Maximum allowed number of GKE clusters per policy.

        :param gke_clusters_per_policy: The gke_clusters_per_policy of this Quota.
        :type gke_clusters_per_policy: int
        """

        self._gke_clusters_per_policy = gke_clusters_per_policy

    @property
    def gke_clusters_per_response_policy(self):
        """Gets the gke_clusters_per_response_policy of this Quota.

        Maximum allowed number of GKE clusters per response policy.

        :return: The gke_clusters_per_response_policy of this Quota.
        :rtype: int
        """
        return self._gke_clusters_per_response_policy

    @gke_clusters_per_response_policy.setter
    def gke_clusters_per_response_policy(self, gke_clusters_per_response_policy):
        """Sets the gke_clusters_per_response_policy of this Quota.

        Maximum allowed number of GKE clusters per response policy.

        :param gke_clusters_per_response_policy: The gke_clusters_per_response_policy of this Quota.
        :type gke_clusters_per_response_policy: int
        """

        self._gke_clusters_per_response_policy = gke_clusters_per_response_policy

    @property
    def items_per_routing_policy(self):
        """Gets the items_per_routing_policy of this Quota.

        Maximum allowed number of items per routing policy.

        :return: The items_per_routing_policy of this Quota.
        :rtype: int
        """
        return self._items_per_routing_policy

    @items_per_routing_policy.setter
    def items_per_routing_policy(self, items_per_routing_policy):
        """Sets the items_per_routing_policy of this Quota.

        Maximum allowed number of items per routing policy.

        :param items_per_routing_policy: The items_per_routing_policy of this Quota.
        :type items_per_routing_policy: int
        """

        self._items_per_routing_policy = items_per_routing_policy

    @property
    def kind(self):
        """Gets the kind of this Quota.


        :return: The kind of this Quota.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Quota.


        :param kind: The kind of this Quota.
        :type kind: str
        """

        self._kind = kind

    @property
    def managed_zones(self):
        """Gets the managed_zones of this Quota.

        Maximum allowed number of managed zones in the project.

        :return: The managed_zones of this Quota.
        :rtype: int
        """
        return self._managed_zones

    @managed_zones.setter
    def managed_zones(self, managed_zones):
        """Sets the managed_zones of this Quota.

        Maximum allowed number of managed zones in the project.

        :param managed_zones: The managed_zones of this Quota.
        :type managed_zones: int
        """

        self._managed_zones = managed_zones

    @property
    def managed_zones_per_gke_cluster(self):
        """Gets the managed_zones_per_gke_cluster of this Quota.

        Maximum allowed number of managed zones which can be attached to a GKE cluster.

        :return: The managed_zones_per_gke_cluster of this Quota.
        :rtype: int
        """
        return self._managed_zones_per_gke_cluster

    @managed_zones_per_gke_cluster.setter
    def managed_zones_per_gke_cluster(self, managed_zones_per_gke_cluster):
        """Sets the managed_zones_per_gke_cluster of this Quota.

        Maximum allowed number of managed zones which can be attached to a GKE cluster.

        :param managed_zones_per_gke_cluster: The managed_zones_per_gke_cluster of this Quota.
        :type managed_zones_per_gke_cluster: int
        """

        self._managed_zones_per_gke_cluster = managed_zones_per_gke_cluster

    @property
    def managed_zones_per_network(self):
        """Gets the managed_zones_per_network of this Quota.

        Maximum allowed number of managed zones which can be attached to a network.

        :return: The managed_zones_per_network of this Quota.
        :rtype: int
        """
        return self._managed_zones_per_network

    @managed_zones_per_network.setter
    def managed_zones_per_network(self, managed_zones_per_network):
        """Sets the managed_zones_per_network of this Quota.

        Maximum allowed number of managed zones which can be attached to a network.

        :param managed_zones_per_network: The managed_zones_per_network of this Quota.
        :type managed_zones_per_network: int
        """

        self._managed_zones_per_network = managed_zones_per_network

    @property
    def nameservers_per_delegation(self):
        """Gets the nameservers_per_delegation of this Quota.

        Maximum number of nameservers per delegation, meant to prevent abuse

        :return: The nameservers_per_delegation of this Quota.
        :rtype: int
        """
        return self._nameservers_per_delegation

    @nameservers_per_delegation.setter
    def nameservers_per_delegation(self, nameservers_per_delegation):
        """Sets the nameservers_per_delegation of this Quota.

        Maximum number of nameservers per delegation, meant to prevent abuse

        :param nameservers_per_delegation: The nameservers_per_delegation of this Quota.
        :type nameservers_per_delegation: int
        """

        self._nameservers_per_delegation = nameservers_per_delegation

    @property
    def networks_per_managed_zone(self):
        """Gets the networks_per_managed_zone of this Quota.

        Maximum allowed number of networks to which a privately scoped zone can be attached.

        :return: The networks_per_managed_zone of this Quota.
        :rtype: int
        """
        return self._networks_per_managed_zone

    @networks_per_managed_zone.setter
    def networks_per_managed_zone(self, networks_per_managed_zone):
        """Sets the networks_per_managed_zone of this Quota.

        Maximum allowed number of networks to which a privately scoped zone can be attached.

        :param networks_per_managed_zone: The networks_per_managed_zone of this Quota.
        :type networks_per_managed_zone: int
        """

        self._networks_per_managed_zone = networks_per_managed_zone

    @property
    def networks_per_policy(self):
        """Gets the networks_per_policy of this Quota.

        Maximum allowed number of networks per policy.

        :return: The networks_per_policy of this Quota.
        :rtype: int
        """
        return self._networks_per_policy

    @networks_per_policy.setter
    def networks_per_policy(self, networks_per_policy):
        """Sets the networks_per_policy of this Quota.

        Maximum allowed number of networks per policy.

        :param networks_per_policy: The networks_per_policy of this Quota.
        :type networks_per_policy: int
        """

        self._networks_per_policy = networks_per_policy

    @property
    def networks_per_response_policy(self):
        """Gets the networks_per_response_policy of this Quota.

        Maximum allowed number of networks per response policy.

        :return: The networks_per_response_policy of this Quota.
        :rtype: int
        """
        return self._networks_per_response_policy

    @networks_per_response_policy.setter
    def networks_per_response_policy(self, networks_per_response_policy):
        """Sets the networks_per_response_policy of this Quota.

        Maximum allowed number of networks per response policy.

        :param networks_per_response_policy: The networks_per_response_policy of this Quota.
        :type networks_per_response_policy: int
        """

        self._networks_per_response_policy = networks_per_response_policy

    @property
    def peering_zones_per_target_network(self):
        """Gets the peering_zones_per_target_network of this Quota.

        Maximum allowed number of consumer peering zones per target network owned by this producer project

        :return: The peering_zones_per_target_network of this Quota.
        :rtype: int
        """
        return self._peering_zones_per_target_network

    @peering_zones_per_target_network.setter
    def peering_zones_per_target_network(self, peering_zones_per_target_network):
        """Sets the peering_zones_per_target_network of this Quota.

        Maximum allowed number of consumer peering zones per target network owned by this producer project

        :param peering_zones_per_target_network: The peering_zones_per_target_network of this Quota.
        :type peering_zones_per_target_network: int
        """

        self._peering_zones_per_target_network = peering_zones_per_target_network

    @property
    def policies(self):
        """Gets the policies of this Quota.

        Maximum allowed number of policies per project.

        :return: The policies of this Quota.
        :rtype: int
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this Quota.

        Maximum allowed number of policies per project.

        :param policies: The policies of this Quota.
        :type policies: int
        """

        self._policies = policies

    @property
    def resource_records_per_rrset(self):
        """Gets the resource_records_per_rrset of this Quota.

        Maximum allowed number of ResourceRecords per ResourceRecordSet.

        :return: The resource_records_per_rrset of this Quota.
        :rtype: int
        """
        return self._resource_records_per_rrset

    @resource_records_per_rrset.setter
    def resource_records_per_rrset(self, resource_records_per_rrset):
        """Sets the resource_records_per_rrset of this Quota.

        Maximum allowed number of ResourceRecords per ResourceRecordSet.

        :param resource_records_per_rrset: The resource_records_per_rrset of this Quota.
        :type resource_records_per_rrset: int
        """

        self._resource_records_per_rrset = resource_records_per_rrset

    @property
    def response_policies(self):
        """Gets the response_policies of this Quota.

        Maximum allowed number of response policies per project.

        :return: The response_policies of this Quota.
        :rtype: int
        """
        return self._response_policies

    @response_policies.setter
    def response_policies(self, response_policies):
        """Sets the response_policies of this Quota.

        Maximum allowed number of response policies per project.

        :param response_policies: The response_policies of this Quota.
        :type response_policies: int
        """

        self._response_policies = response_policies

    @property
    def response_policy_rules_per_response_policy(self):
        """Gets the response_policy_rules_per_response_policy of this Quota.

        Maximum allowed number of rules per response policy.

        :return: The response_policy_rules_per_response_policy of this Quota.
        :rtype: int
        """
        return self._response_policy_rules_per_response_policy

    @response_policy_rules_per_response_policy.setter
    def response_policy_rules_per_response_policy(self, response_policy_rules_per_response_policy):
        """Sets the response_policy_rules_per_response_policy of this Quota.

        Maximum allowed number of rules per response policy.

        :param response_policy_rules_per_response_policy: The response_policy_rules_per_response_policy of this Quota.
        :type response_policy_rules_per_response_policy: int
        """

        self._response_policy_rules_per_response_policy = response_policy_rules_per_response_policy

    @property
    def rrset_additions_per_change(self):
        """Gets the rrset_additions_per_change of this Quota.

        Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.

        :return: The rrset_additions_per_change of this Quota.
        :rtype: int
        """
        return self._rrset_additions_per_change

    @rrset_additions_per_change.setter
    def rrset_additions_per_change(self, rrset_additions_per_change):
        """Sets the rrset_additions_per_change of this Quota.

        Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.

        :param rrset_additions_per_change: The rrset_additions_per_change of this Quota.
        :type rrset_additions_per_change: int
        """

        self._rrset_additions_per_change = rrset_additions_per_change

    @property
    def rrset_deletions_per_change(self):
        """Gets the rrset_deletions_per_change of this Quota.

        Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.

        :return: The rrset_deletions_per_change of this Quota.
        :rtype: int
        """
        return self._rrset_deletions_per_change

    @rrset_deletions_per_change.setter
    def rrset_deletions_per_change(self, rrset_deletions_per_change):
        """Sets the rrset_deletions_per_change of this Quota.

        Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.

        :param rrset_deletions_per_change: The rrset_deletions_per_change of this Quota.
        :type rrset_deletions_per_change: int
        """

        self._rrset_deletions_per_change = rrset_deletions_per_change

    @property
    def rrsets_per_managed_zone(self):
        """Gets the rrsets_per_managed_zone of this Quota.

        Maximum allowed number of ResourceRecordSets per zone in the project.

        :return: The rrsets_per_managed_zone of this Quota.
        :rtype: int
        """
        return self._rrsets_per_managed_zone

    @rrsets_per_managed_zone.setter
    def rrsets_per_managed_zone(self, rrsets_per_managed_zone):
        """Sets the rrsets_per_managed_zone of this Quota.

        Maximum allowed number of ResourceRecordSets per zone in the project.

        :param rrsets_per_managed_zone: The rrsets_per_managed_zone of this Quota.
        :type rrsets_per_managed_zone: int
        """

        self._rrsets_per_managed_zone = rrsets_per_managed_zone

    @property
    def target_name_servers_per_managed_zone(self):
        """Gets the target_name_servers_per_managed_zone of this Quota.

        Maximum allowed number of target name servers per managed forwarding zone.

        :return: The target_name_servers_per_managed_zone of this Quota.
        :rtype: int
        """
        return self._target_name_servers_per_managed_zone

    @target_name_servers_per_managed_zone.setter
    def target_name_servers_per_managed_zone(self, target_name_servers_per_managed_zone):
        """Sets the target_name_servers_per_managed_zone of this Quota.

        Maximum allowed number of target name servers per managed forwarding zone.

        :param target_name_servers_per_managed_zone: The target_name_servers_per_managed_zone of this Quota.
        :type target_name_servers_per_managed_zone: int
        """

        self._target_name_servers_per_managed_zone = target_name_servers_per_managed_zone

    @property
    def target_name_servers_per_policy(self):
        """Gets the target_name_servers_per_policy of this Quota.

        Maximum allowed number of alternative target name servers per policy.

        :return: The target_name_servers_per_policy of this Quota.
        :rtype: int
        """
        return self._target_name_servers_per_policy

    @target_name_servers_per_policy.setter
    def target_name_servers_per_policy(self, target_name_servers_per_policy):
        """Sets the target_name_servers_per_policy of this Quota.

        Maximum allowed number of alternative target name servers per policy.

        :param target_name_servers_per_policy: The target_name_servers_per_policy of this Quota.
        :type target_name_servers_per_policy: int
        """

        self._target_name_servers_per_policy = target_name_servers_per_policy

    @property
    def total_rrdata_size_per_change(self):
        """Gets the total_rrdata_size_per_change of this Quota.

        Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.

        :return: The total_rrdata_size_per_change of this Quota.
        :rtype: int
        """
        return self._total_rrdata_size_per_change

    @total_rrdata_size_per_change.setter
    def total_rrdata_size_per_change(self, total_rrdata_size_per_change):
        """Sets the total_rrdata_size_per_change of this Quota.

        Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.

        :param total_rrdata_size_per_change: The total_rrdata_size_per_change of this Quota.
        :type total_rrdata_size_per_change: int
        """

        self._total_rrdata_size_per_change = total_rrdata_size_per_change

    @property
    def whitelisted_key_specs(self):
        """Gets the whitelisted_key_specs of this Quota.

        DNSSEC algorithm and key length types that can be used for DnsKeys.

        :return: The whitelisted_key_specs of this Quota.
        :rtype: List[DnsKeySpec]
        """
        return self._whitelisted_key_specs

    @whitelisted_key_specs.setter
    def whitelisted_key_specs(self, whitelisted_key_specs):
        """Sets the whitelisted_key_specs of this Quota.

        DNSSEC algorithm and key length types that can be used for DnsKeys.

        :param whitelisted_key_specs: The whitelisted_key_specs of this Quota.
        :type whitelisted_key_specs: List[DnsKeySpec]
        """

        self._whitelisted_key_specs = whitelisted_key_specs
