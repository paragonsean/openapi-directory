# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_dns_key_context import OperationDnsKeyContext
from openapi_server.models.operation_managed_zone_context import OperationManagedZoneContext
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_key_context: OperationDnsKeyContext=None, id: str=None, kind: str='dns#operation', start_time: str=None, status: str=None, type: str=None, user: str=None, zone_context: OperationManagedZoneContext=None):
        """Operation - a model defined in OpenAPI

        :param dns_key_context: The dns_key_context of this Operation.
        :param id: The id of this Operation.
        :param kind: The kind of this Operation.
        :param start_time: The start_time of this Operation.
        :param status: The status of this Operation.
        :param type: The type of this Operation.
        :param user: The user of this Operation.
        :param zone_context: The zone_context of this Operation.
        """
        self.openapi_types = {
            'dns_key_context': OperationDnsKeyContext,
            'id': str,
            'kind': str,
            'start_time': str,
            'status': str,
            'type': str,
            'user': str,
            'zone_context': OperationManagedZoneContext
        }

        self.attribute_map = {
            'dns_key_context': 'dnsKeyContext',
            'id': 'id',
            'kind': 'kind',
            'start_time': 'startTime',
            'status': 'status',
            'type': 'type',
            'user': 'user',
            'zone_context': 'zoneContext'
        }

        self._dns_key_context = dns_key_context
        self._id = id
        self._kind = kind
        self._start_time = start_time
        self._status = status
        self._type = type
        self._user = user
        self._zone_context = zone_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_key_context(self):
        """Gets the dns_key_context of this Operation.


        :return: The dns_key_context of this Operation.
        :rtype: OperationDnsKeyContext
        """
        return self._dns_key_context

    @dns_key_context.setter
    def dns_key_context(self, dns_key_context):
        """Sets the dns_key_context of this Operation.


        :param dns_key_context: The dns_key_context of this Operation.
        :type dns_key_context: OperationDnsKeyContext
        """

        self._dns_key_context = dns_key_context

    @property
    def id(self):
        """Gets the id of this Operation.

        Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)

        :return: The id of this Operation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Operation.

        Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)

        :param id: The id of this Operation.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Operation.


        :return: The kind of this Operation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Operation.


        :param kind: The kind of this Operation.
        :type kind: str
        """

        self._kind = kind

    @property
    def start_time(self):
        """Gets the start_time of this Operation.

        The time that this operation was started by the server. This is in RFC3339 text format (output only).

        :return: The start_time of this Operation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Operation.

        The time that this operation was started by the server. This is in RFC3339 text format (output only).

        :param start_time: The start_time of this Operation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Operation.

        Status of the operation. Can be one of the following: \"PENDING\" or \"DONE\" (output only). A status of \"DONE\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.

        :return: The status of this Operation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.

        Status of the operation. Can be one of the following: \"PENDING\" or \"DONE\" (output only). A status of \"DONE\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.

        :param status: The status of this Operation.
        :type status: str
        """
        allowed_values = ["PENDING", "DONE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Operation.

        Type of the operation. Operations include insert, update, and delete (output only).

        :return: The type of this Operation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Operation.

        Type of the operation. Operations include insert, update, and delete (output only).

        :param type: The type of this Operation.
        :type type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this Operation.

        User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)

        :return: The user of this Operation.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Operation.

        User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)

        :param user: The user of this Operation.
        :type user: str
        """

        self._user = user

    @property
    def zone_context(self):
        """Gets the zone_context of this Operation.


        :return: The zone_context of this Operation.
        :rtype: OperationManagedZoneContext
        """
        return self._zone_context

    @zone_context.setter
    def zone_context(self, zone_context):
        """Sets the zone_context of this Operation.


        :param zone_context: The zone_context of this Operation.
        :type zone_context: OperationManagedZoneContext
        """

        self._zone_context = zone_context
