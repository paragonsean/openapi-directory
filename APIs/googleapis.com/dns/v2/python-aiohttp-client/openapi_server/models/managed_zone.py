# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_zone_cloud_logging_config import ManagedZoneCloudLoggingConfig
from openapi_server.models.managed_zone_dns_sec_config import ManagedZoneDnsSecConfig
from openapi_server.models.managed_zone_forwarding_config import ManagedZoneForwardingConfig
from openapi_server.models.managed_zone_peering_config import ManagedZonePeeringConfig
from openapi_server.models.managed_zone_private_visibility_config import ManagedZonePrivateVisibilityConfig
from openapi_server.models.managed_zone_reverse_lookup_config import ManagedZoneReverseLookupConfig
from openapi_server.models.managed_zone_service_directory_config import ManagedZoneServiceDirectoryConfig
from openapi_server import util


class ManagedZone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_logging_config: ManagedZoneCloudLoggingConfig=None, creation_time: str=None, description: str=None, dns_name: str=None, dnssec_config: ManagedZoneDnsSecConfig=None, forwarding_config: ManagedZoneForwardingConfig=None, id: str=None, kind: str='dns#managedZone', labels: Dict[str, str]=None, name: str=None, name_server_set: str=None, name_servers: List[str]=None, peering_config: ManagedZonePeeringConfig=None, private_visibility_config: ManagedZonePrivateVisibilityConfig=None, reverse_lookup_config: ManagedZoneReverseLookupConfig=None, service_directory_config: ManagedZoneServiceDirectoryConfig=None, visibility: str=None):
        """ManagedZone - a model defined in OpenAPI

        :param cloud_logging_config: The cloud_logging_config of this ManagedZone.
        :param creation_time: The creation_time of this ManagedZone.
        :param description: The description of this ManagedZone.
        :param dns_name: The dns_name of this ManagedZone.
        :param dnssec_config: The dnssec_config of this ManagedZone.
        :param forwarding_config: The forwarding_config of this ManagedZone.
        :param id: The id of this ManagedZone.
        :param kind: The kind of this ManagedZone.
        :param labels: The labels of this ManagedZone.
        :param name: The name of this ManagedZone.
        :param name_server_set: The name_server_set of this ManagedZone.
        :param name_servers: The name_servers of this ManagedZone.
        :param peering_config: The peering_config of this ManagedZone.
        :param private_visibility_config: The private_visibility_config of this ManagedZone.
        :param reverse_lookup_config: The reverse_lookup_config of this ManagedZone.
        :param service_directory_config: The service_directory_config of this ManagedZone.
        :param visibility: The visibility of this ManagedZone.
        """
        self.openapi_types = {
            'cloud_logging_config': ManagedZoneCloudLoggingConfig,
            'creation_time': str,
            'description': str,
            'dns_name': str,
            'dnssec_config': ManagedZoneDnsSecConfig,
            'forwarding_config': ManagedZoneForwardingConfig,
            'id': str,
            'kind': str,
            'labels': Dict[str, str],
            'name': str,
            'name_server_set': str,
            'name_servers': List[str],
            'peering_config': ManagedZonePeeringConfig,
            'private_visibility_config': ManagedZonePrivateVisibilityConfig,
            'reverse_lookup_config': ManagedZoneReverseLookupConfig,
            'service_directory_config': ManagedZoneServiceDirectoryConfig,
            'visibility': str
        }

        self.attribute_map = {
            'cloud_logging_config': 'cloudLoggingConfig',
            'creation_time': 'creationTime',
            'description': 'description',
            'dns_name': 'dnsName',
            'dnssec_config': 'dnssecConfig',
            'forwarding_config': 'forwardingConfig',
            'id': 'id',
            'kind': 'kind',
            'labels': 'labels',
            'name': 'name',
            'name_server_set': 'nameServerSet',
            'name_servers': 'nameServers',
            'peering_config': 'peeringConfig',
            'private_visibility_config': 'privateVisibilityConfig',
            'reverse_lookup_config': 'reverseLookupConfig',
            'service_directory_config': 'serviceDirectoryConfig',
            'visibility': 'visibility'
        }

        self._cloud_logging_config = cloud_logging_config
        self._creation_time = creation_time
        self._description = description
        self._dns_name = dns_name
        self._dnssec_config = dnssec_config
        self._forwarding_config = forwarding_config
        self._id = id
        self._kind = kind
        self._labels = labels
        self._name = name
        self._name_server_set = name_server_set
        self._name_servers = name_servers
        self._peering_config = peering_config
        self._private_visibility_config = private_visibility_config
        self._reverse_lookup_config = reverse_lookup_config
        self._service_directory_config = service_directory_config
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedZone of this ManagedZone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_logging_config(self):
        """Gets the cloud_logging_config of this ManagedZone.


        :return: The cloud_logging_config of this ManagedZone.
        :rtype: ManagedZoneCloudLoggingConfig
        """
        return self._cloud_logging_config

    @cloud_logging_config.setter
    def cloud_logging_config(self, cloud_logging_config):
        """Sets the cloud_logging_config of this ManagedZone.


        :param cloud_logging_config: The cloud_logging_config of this ManagedZone.
        :type cloud_logging_config: ManagedZoneCloudLoggingConfig
        """

        self._cloud_logging_config = cloud_logging_config

    @property
    def creation_time(self):
        """Gets the creation_time of this ManagedZone.

        The time that this resource was created on the server. This is in RFC3339 text format. Output only.

        :return: The creation_time of this ManagedZone.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ManagedZone.

        The time that this resource was created on the server. This is in RFC3339 text format. Output only.

        :param creation_time: The creation_time of this ManagedZone.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this ManagedZone.

        A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.

        :return: The description of this ManagedZone.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ManagedZone.

        A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.

        :param description: The description of this ManagedZone.
        :type description: str
        """

        self._description = description

    @property
    def dns_name(self):
        """Gets the dns_name of this ManagedZone.

        The DNS name of this managed zone, for instance \"example.com.\".

        :return: The dns_name of this ManagedZone.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this ManagedZone.

        The DNS name of this managed zone, for instance \"example.com.\".

        :param dns_name: The dns_name of this ManagedZone.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def dnssec_config(self):
        """Gets the dnssec_config of this ManagedZone.


        :return: The dnssec_config of this ManagedZone.
        :rtype: ManagedZoneDnsSecConfig
        """
        return self._dnssec_config

    @dnssec_config.setter
    def dnssec_config(self, dnssec_config):
        """Sets the dnssec_config of this ManagedZone.


        :param dnssec_config: The dnssec_config of this ManagedZone.
        :type dnssec_config: ManagedZoneDnsSecConfig
        """

        self._dnssec_config = dnssec_config

    @property
    def forwarding_config(self):
        """Gets the forwarding_config of this ManagedZone.


        :return: The forwarding_config of this ManagedZone.
        :rtype: ManagedZoneForwardingConfig
        """
        return self._forwarding_config

    @forwarding_config.setter
    def forwarding_config(self, forwarding_config):
        """Sets the forwarding_config of this ManagedZone.


        :param forwarding_config: The forwarding_config of this ManagedZone.
        :type forwarding_config: ManagedZoneForwardingConfig
        """

        self._forwarding_config = forwarding_config

    @property
    def id(self):
        """Gets the id of this ManagedZone.

        Unique identifier for the resource; defined by the server (output only)

        :return: The id of this ManagedZone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagedZone.

        Unique identifier for the resource; defined by the server (output only)

        :param id: The id of this ManagedZone.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this ManagedZone.


        :return: The kind of this ManagedZone.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ManagedZone.


        :param kind: The kind of this ManagedZone.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this ManagedZone.

        User labels.

        :return: The labels of this ManagedZone.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ManagedZone.

        User labels.

        :param labels: The labels of this ManagedZone.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ManagedZone.

        User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.

        :return: The name of this ManagedZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagedZone.

        User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.

        :param name: The name of this ManagedZone.
        :type name: str
        """

        self._name = name

    @property
    def name_server_set(self):
        """Gets the name_server_set of this ManagedZone.

        Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.

        :return: The name_server_set of this ManagedZone.
        :rtype: str
        """
        return self._name_server_set

    @name_server_set.setter
    def name_server_set(self, name_server_set):
        """Sets the name_server_set of this ManagedZone.

        Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.

        :param name_server_set: The name_server_set of this ManagedZone.
        :type name_server_set: str
        """

        self._name_server_set = name_server_set

    @property
    def name_servers(self):
        """Gets the name_servers of this ManagedZone.

        Delegate your managed_zone to these virtual name servers; defined by the server (output only)

        :return: The name_servers of this ManagedZone.
        :rtype: List[str]
        """
        return self._name_servers

    @name_servers.setter
    def name_servers(self, name_servers):
        """Sets the name_servers of this ManagedZone.

        Delegate your managed_zone to these virtual name servers; defined by the server (output only)

        :param name_servers: The name_servers of this ManagedZone.
        :type name_servers: List[str]
        """

        self._name_servers = name_servers

    @property
    def peering_config(self):
        """Gets the peering_config of this ManagedZone.


        :return: The peering_config of this ManagedZone.
        :rtype: ManagedZonePeeringConfig
        """
        return self._peering_config

    @peering_config.setter
    def peering_config(self, peering_config):
        """Sets the peering_config of this ManagedZone.


        :param peering_config: The peering_config of this ManagedZone.
        :type peering_config: ManagedZonePeeringConfig
        """

        self._peering_config = peering_config

    @property
    def private_visibility_config(self):
        """Gets the private_visibility_config of this ManagedZone.


        :return: The private_visibility_config of this ManagedZone.
        :rtype: ManagedZonePrivateVisibilityConfig
        """
        return self._private_visibility_config

    @private_visibility_config.setter
    def private_visibility_config(self, private_visibility_config):
        """Sets the private_visibility_config of this ManagedZone.


        :param private_visibility_config: The private_visibility_config of this ManagedZone.
        :type private_visibility_config: ManagedZonePrivateVisibilityConfig
        """

        self._private_visibility_config = private_visibility_config

    @property
    def reverse_lookup_config(self):
        """Gets the reverse_lookup_config of this ManagedZone.


        :return: The reverse_lookup_config of this ManagedZone.
        :rtype: ManagedZoneReverseLookupConfig
        """
        return self._reverse_lookup_config

    @reverse_lookup_config.setter
    def reverse_lookup_config(self, reverse_lookup_config):
        """Sets the reverse_lookup_config of this ManagedZone.


        :param reverse_lookup_config: The reverse_lookup_config of this ManagedZone.
        :type reverse_lookup_config: ManagedZoneReverseLookupConfig
        """

        self._reverse_lookup_config = reverse_lookup_config

    @property
    def service_directory_config(self):
        """Gets the service_directory_config of this ManagedZone.


        :return: The service_directory_config of this ManagedZone.
        :rtype: ManagedZoneServiceDirectoryConfig
        """
        return self._service_directory_config

    @service_directory_config.setter
    def service_directory_config(self, service_directory_config):
        """Sets the service_directory_config of this ManagedZone.


        :param service_directory_config: The service_directory_config of this ManagedZone.
        :type service_directory_config: ManagedZoneServiceDirectoryConfig
        """

        self._service_directory_config = service_directory_config

    @property
    def visibility(self):
        """Gets the visibility of this ManagedZone.

        The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.

        :return: The visibility of this ManagedZone.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ManagedZone.

        The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.

        :param visibility: The visibility of this ManagedZone.
        :type visibility: str
        """
        allowed_values = ["PUBLIC", "PRIVATE"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
