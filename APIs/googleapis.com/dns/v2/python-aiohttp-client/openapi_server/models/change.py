# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_record_set import ResourceRecordSet
from openapi_server import util


class Change(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additions: List[ResourceRecordSet]=None, deletions: List[ResourceRecordSet]=None, id: str=None, is_serving: bool=None, kind: str='dns#change', start_time: str=None, status: str=None):
        """Change - a model defined in OpenAPI

        :param additions: The additions of this Change.
        :param deletions: The deletions of this Change.
        :param id: The id of this Change.
        :param is_serving: The is_serving of this Change.
        :param kind: The kind of this Change.
        :param start_time: The start_time of this Change.
        :param status: The status of this Change.
        """
        self.openapi_types = {
            'additions': List[ResourceRecordSet],
            'deletions': List[ResourceRecordSet],
            'id': str,
            'is_serving': bool,
            'kind': str,
            'start_time': str,
            'status': str
        }

        self.attribute_map = {
            'additions': 'additions',
            'deletions': 'deletions',
            'id': 'id',
            'is_serving': 'isServing',
            'kind': 'kind',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._additions = additions
        self._deletions = deletions
        self._id = id
        self._is_serving = is_serving
        self._kind = kind
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Change':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Change of this Change.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additions(self):
        """Gets the additions of this Change.

        Which ResourceRecordSets to add?

        :return: The additions of this Change.
        :rtype: List[ResourceRecordSet]
        """
        return self._additions

    @additions.setter
    def additions(self, additions):
        """Sets the additions of this Change.

        Which ResourceRecordSets to add?

        :param additions: The additions of this Change.
        :type additions: List[ResourceRecordSet]
        """

        self._additions = additions

    @property
    def deletions(self):
        """Gets the deletions of this Change.

        Which ResourceRecordSets to remove? Must match existing data exactly.

        :return: The deletions of this Change.
        :rtype: List[ResourceRecordSet]
        """
        return self._deletions

    @deletions.setter
    def deletions(self, deletions):
        """Sets the deletions of this Change.

        Which ResourceRecordSets to remove? Must match existing data exactly.

        :param deletions: The deletions of this Change.
        :type deletions: List[ResourceRecordSet]
        """

        self._deletions = deletions

    @property
    def id(self):
        """Gets the id of this Change.

        Unique identifier for the resource; defined by the server (output only).

        :return: The id of this Change.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Change.

        Unique identifier for the resource; defined by the server (output only).

        :param id: The id of this Change.
        :type id: str
        """

        self._id = id

    @property
    def is_serving(self):
        """Gets the is_serving of this Change.

        If the DNS queries for the zone will be served.

        :return: The is_serving of this Change.
        :rtype: bool
        """
        return self._is_serving

    @is_serving.setter
    def is_serving(self, is_serving):
        """Sets the is_serving of this Change.

        If the DNS queries for the zone will be served.

        :param is_serving: The is_serving of this Change.
        :type is_serving: bool
        """

        self._is_serving = is_serving

    @property
    def kind(self):
        """Gets the kind of this Change.


        :return: The kind of this Change.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Change.


        :param kind: The kind of this Change.
        :type kind: str
        """

        self._kind = kind

    @property
    def start_time(self):
        """Gets the start_time of this Change.

        The time that this operation was started by the server (output only). This is in RFC3339 text format.

        :return: The start_time of this Change.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Change.

        The time that this operation was started by the server (output only). This is in RFC3339 text format.

        :param start_time: The start_time of this Change.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Change.

        Status of the operation (output only). A status of \"done\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.

        :return: The status of this Change.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Change.

        Status of the operation (output only). A status of \"done\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.

        :param status: The status of this Change.
        :type status: str
        """
        allowed_values = ["PENDING", "DONE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
