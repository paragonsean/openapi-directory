# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_key_spec import DnsKeySpec
from openapi_server import util


class ManagedZoneDnsSecConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_key_specs: List[DnsKeySpec]=None, kind: str='dns#managedZoneDnsSecConfig', non_existence: str=None, state: str=None):
        """ManagedZoneDnsSecConfig - a model defined in OpenAPI

        :param default_key_specs: The default_key_specs of this ManagedZoneDnsSecConfig.
        :param kind: The kind of this ManagedZoneDnsSecConfig.
        :param non_existence: The non_existence of this ManagedZoneDnsSecConfig.
        :param state: The state of this ManagedZoneDnsSecConfig.
        """
        self.openapi_types = {
            'default_key_specs': List[DnsKeySpec],
            'kind': str,
            'non_existence': str,
            'state': str
        }

        self.attribute_map = {
            'default_key_specs': 'defaultKeySpecs',
            'kind': 'kind',
            'non_existence': 'nonExistence',
            'state': 'state'
        }

        self._default_key_specs = default_key_specs
        self._kind = kind
        self._non_existence = non_existence
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedZoneDnsSecConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedZoneDnsSecConfig of this ManagedZoneDnsSecConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_key_specs(self):
        """Gets the default_key_specs of this ManagedZoneDnsSecConfig.

        Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.

        :return: The default_key_specs of this ManagedZoneDnsSecConfig.
        :rtype: List[DnsKeySpec]
        """
        return self._default_key_specs

    @default_key_specs.setter
    def default_key_specs(self, default_key_specs):
        """Sets the default_key_specs of this ManagedZoneDnsSecConfig.

        Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.

        :param default_key_specs: The default_key_specs of this ManagedZoneDnsSecConfig.
        :type default_key_specs: List[DnsKeySpec]
        """

        self._default_key_specs = default_key_specs

    @property
    def kind(self):
        """Gets the kind of this ManagedZoneDnsSecConfig.


        :return: The kind of this ManagedZoneDnsSecConfig.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ManagedZoneDnsSecConfig.


        :param kind: The kind of this ManagedZoneDnsSecConfig.
        :type kind: str
        """

        self._kind = kind

    @property
    def non_existence(self):
        """Gets the non_existence of this ManagedZoneDnsSecConfig.

        Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.

        :return: The non_existence of this ManagedZoneDnsSecConfig.
        :rtype: str
        """
        return self._non_existence

    @non_existence.setter
    def non_existence(self, non_existence):
        """Sets the non_existence of this ManagedZoneDnsSecConfig.

        Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.

        :param non_existence: The non_existence of this ManagedZoneDnsSecConfig.
        :type non_existence: str
        """
        allowed_values = ["NSEC", "NSEC3"]  # noqa: E501
        if non_existence not in allowed_values:
            raise ValueError(
                "Invalid value for `non_existence` ({0}), must be one of {1}"
                .format(non_existence, allowed_values)
            )

        self._non_existence = non_existence

    @property
    def state(self):
        """Gets the state of this ManagedZoneDnsSecConfig.

        Specifies whether DNSSEC is enabled, and what mode it is in.

        :return: The state of this ManagedZoneDnsSecConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ManagedZoneDnsSecConfig.

        Specifies whether DNSSEC is enabled, and what mode it is in.

        :param state: The state of this ManagedZoneDnsSecConfig.
        :type state: str
        """
        allowed_values = ["false", "true", "TRANSFER"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
