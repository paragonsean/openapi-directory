# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_alternative_name_server_config_target_name_server import PolicyAlternativeNameServerConfigTargetNameServer
from openapi_server import util


class PolicyAlternativeNameServerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str='dns#policyAlternativeNameServerConfig', target_name_servers: List[PolicyAlternativeNameServerConfigTargetNameServer]=None):
        """PolicyAlternativeNameServerConfig - a model defined in OpenAPI

        :param kind: The kind of this PolicyAlternativeNameServerConfig.
        :param target_name_servers: The target_name_servers of this PolicyAlternativeNameServerConfig.
        """
        self.openapi_types = {
            'kind': str,
            'target_name_servers': List[PolicyAlternativeNameServerConfigTargetNameServer]
        }

        self.attribute_map = {
            'kind': 'kind',
            'target_name_servers': 'targetNameServers'
        }

        self._kind = kind
        self._target_name_servers = target_name_servers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyAlternativeNameServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyAlternativeNameServerConfig of this PolicyAlternativeNameServerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this PolicyAlternativeNameServerConfig.


        :return: The kind of this PolicyAlternativeNameServerConfig.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PolicyAlternativeNameServerConfig.


        :param kind: The kind of this PolicyAlternativeNameServerConfig.
        :type kind: str
        """

        self._kind = kind

    @property
    def target_name_servers(self):
        """Gets the target_name_servers of this PolicyAlternativeNameServerConfig.

        Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.

        :return: The target_name_servers of this PolicyAlternativeNameServerConfig.
        :rtype: List[PolicyAlternativeNameServerConfigTargetNameServer]
        """
        return self._target_name_servers

    @target_name_servers.setter
    def target_name_servers(self, target_name_servers):
        """Sets the target_name_servers of this PolicyAlternativeNameServerConfig.

        Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.

        :param target_name_servers: The target_name_servers of this PolicyAlternativeNameServerConfig.
        :type target_name_servers: List[PolicyAlternativeNameServerConfigTargetNameServer]
        """

        self._target_name_servers = target_name_servers
