/**
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorProto from './ErrorProto';

/**
 * The Errors model module.
 * @module model/Errors
 * @version v2
 */
class Errors {
    /**
     * Constructs a new <code>Errors</code>.
     * Request Error information. The presence of an error field signals that the operation has failed.
     * @alias module:model/Errors
     */
    constructor() { 
        
        Errors.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Errors</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Errors} obj Optional instance to populate.
     * @return {module:model/Errors} The populated <code>Errors</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Errors();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], [ErrorProto]);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Errors</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Errors</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['error']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['error'])) {
                throw new Error("Expected the field `error` to be an array in the JSON data but got " + data['error']);
            }
            // validate the optional field `error` (array)
            for (const item of data['error']) {
                ErrorProto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead.
 * @member {module:model/Errors.CodeEnum} code
 */
Errors.prototype['code'] = undefined;

/**
 * Specific error description and codes
 * @member {Array.<module:model/ErrorProto>} error
 */
Errors.prototype['error'] = undefined;

/**
 * Request identifier generated by the service, which can be used to identify the error in the logs
 * @member {String} requestId
 */
Errors.prototype['requestId'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
Errors['CodeEnum'] = {

    /**
     * value: "BAD_REQUEST"
     * @const
     */
    "BAD_REQUEST": "BAD_REQUEST",

    /**
     * value: "FORBIDDEN"
     * @const
     */
    "FORBIDDEN": "FORBIDDEN",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "CONFLICT"
     * @const
     */
    "CONFLICT": "CONFLICT",

    /**
     * value: "GONE"
     * @const
     */
    "GONE": "GONE",

    /**
     * value: "PRECONDITION_FAILED"
     * @const
     */
    "PRECONDITION_FAILED": "PRECONDITION_FAILED",

    /**
     * value: "INTERNAL_ERROR"
     * @const
     */
    "INTERNAL_ERROR": "INTERNAL_ERROR",

    /**
     * value: "SERVICE_UNAVAILABLE"
     * @const
     */
    "SERVICE_UNAVAILABLE": "SERVICE_UNAVAILABLE"
};



export default Errors;

