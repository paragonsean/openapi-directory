/*
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes one specific error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.995639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorProto {
  public static final String SERIALIZED_NAME_ARGUMENT = "argument";
  @SerializedName(SERIALIZED_NAME_ARGUMENT)
  private List<String> argument = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private String debugInfo;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EXTERNAL_ERROR_MESSAGE = "externalErrorMessage";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ERROR_MESSAGE)
  private String externalErrorMessage;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * Gets or Sets locationType
   */
  @JsonAdapter(LocationTypeEnum.Adapter.class)
  public enum LocationTypeEnum {
    PATH("PATH"),
    
    OTHER("OTHER"),
    
    PARAMETER("PARAMETER");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationTypeEnum fromValue(String value) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LocationTypeEnum locationType;

  public ErrorProto() {
  }

  public ErrorProto argument(List<String> argument) {
    this.argument = argument;
    return this;
  }

  public ErrorProto addArgumentItem(String argumentItem) {
    if (this.argument == null) {
      this.argument = new ArrayList<>();
    }
    this.argument.add(argumentItem);
    return this;
  }

  /**
   * Error arguments, to be used when building user-friendly error messages given the error domain and code. Different error codes require different arguments.
   * @return argument
   */
  @javax.annotation.Nullable
  public List<String> getArgument() {
    return argument;
  }

  public void setArgument(List<String> argument) {
    this.argument = argument;
  }


  public ErrorProto code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Error code in the error domain. This should correspond to a value of the enum type whose name is in domain. See the core error domain in error_domain.proto.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ErrorProto debugInfo(String debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Debugging information, which should not be shared externally.
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public String getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(String debugInfo) {
    this.debugInfo = debugInfo;
  }


  public ErrorProto domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Error domain. RoSy services can define their own domain and error codes. This should normally be the name of an enum type, such as: gdata.CoreErrorDomain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ErrorProto externalErrorMessage(String externalErrorMessage) {
    this.externalErrorMessage = externalErrorMessage;
    return this;
  }

  /**
   * A short explanation for the error, which can be shared outside Google. Please set domain, code and arguments whenever possible instead of this error message so that external APIs can build safe error messages themselves. External messages built in a RoSy interface will most likely refer to information and concepts that are not available externally and should not be exposed. It is safer if external APIs can understand the errors and decide what the error message should look like.
   * @return externalErrorMessage
   */
  @javax.annotation.Nullable
  public String getExternalErrorMessage() {
    return externalErrorMessage;
  }

  public void setExternalErrorMessage(String externalErrorMessage) {
    this.externalErrorMessage = externalErrorMessage;
  }


  public ErrorProto location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the error, as specified by the location type. If location_type is PATH, this should be a path to a field that&#39;s relative to the request, using FieldPath notation (net/proto2/util/public/field_path.h). Examples: authenticated_user.gaia_id resource.address[2].country
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public ErrorProto locationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * Get locationType
   * @return locationType
   */
  @javax.annotation.Nullable
  public LocationTypeEnum getLocationType() {
    return locationType;
  }

  public void setLocationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorProto errorProto = (ErrorProto) o;
    return Objects.equals(this.argument, errorProto.argument) &&
        Objects.equals(this.code, errorProto.code) &&
        Objects.equals(this.debugInfo, errorProto.debugInfo) &&
        Objects.equals(this.domain, errorProto.domain) &&
        Objects.equals(this.externalErrorMessage, errorProto.externalErrorMessage) &&
        Objects.equals(this.location, errorProto.location) &&
        Objects.equals(this.locationType, errorProto.locationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(argument, code, debugInfo, domain, externalErrorMessage, location, locationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorProto {\n");
    sb.append("    argument: ").append(toIndentedString(argument)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    externalErrorMessage: ").append(toIndentedString(externalErrorMessage)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("argument");
    openapiFields.add("code");
    openapiFields.add("debugInfo");
    openapiFields.add("domain");
    openapiFields.add("externalErrorMessage");
    openapiFields.add("location");
    openapiFields.add("locationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorProto is not found in the empty JSON string", ErrorProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("argument") != null && !jsonObj.get("argument").isJsonNull() && !jsonObj.get("argument").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `argument` to be an array in the JSON string but got `%s`", jsonObj.get("argument").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) && !jsonObj.get("debugInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugInfo").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("externalErrorMessage") != null && !jsonObj.get("externalErrorMessage").isJsonNull()) && !jsonObj.get("externalErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalErrorMessage").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("locationType") != null && !jsonObj.get("locationType").isJsonNull()) && !jsonObj.get("locationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationType").toString()));
      }
      // validate the optional field `locationType`
      if (jsonObj.get("locationType") != null && !jsonObj.get("locationType").isJsonNull()) {
        LocationTypeEnum.validateJsonElement(jsonObj.get("locationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorProto.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorProto>() {
           @Override
           public void write(JsonWriter out, ErrorProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorProto
   * @throws IOException if the JSON string is invalid with respect to ErrorProto
   */
  public static ErrorProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorProto.class);
  }

  /**
   * Convert an instance of ErrorProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

