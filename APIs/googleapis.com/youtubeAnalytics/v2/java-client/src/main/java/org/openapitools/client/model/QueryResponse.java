/*
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ResultTableColumnHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for TargetedQueriesService.Query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:16.995639-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResponse {
  public static final String SERIALIZED_NAME_COLUMN_HEADERS = "columnHeaders";
  @SerializedName(SERIALIZED_NAME_COLUMN_HEADERS)
  private List<ResultTableColumnHeader> columnHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Errors errors;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<List<Object>> rows = new ArrayList<>();

  public QueryResponse() {
  }

  public QueryResponse columnHeaders(List<ResultTableColumnHeader> columnHeaders) {
    this.columnHeaders = columnHeaders;
    return this;
  }

  public QueryResponse addColumnHeadersItem(ResultTableColumnHeader columnHeadersItem) {
    if (this.columnHeaders == null) {
      this.columnHeaders = new ArrayList<>();
    }
    this.columnHeaders.add(columnHeadersItem);
    return this;
  }

  /**
   * This value specifies information about the data returned in the &#x60;rows&#x60; fields. Each item in the &#x60;columnHeaders&#x60; list identifies a field returned in the &#x60;rows&#x60; value, which contains a list of comma-delimited data. The &#x60;columnHeaders&#x60; list will begin with the dimensions specified in the API request, which will be followed by the metrics specified in the API request. The order of both dimensions and metrics will match the ordering in the API request. For example, if the API request contains the parameters &#x60;dimensions&#x3D;ageGroup,gender&amp;metrics&#x3D;viewerPercentage&#x60;, the API response will return columns in this order: &#x60;ageGroup&#x60;, &#x60;gender&#x60;, &#x60;viewerPercentage&#x60;.
   * @return columnHeaders
   */
  @javax.annotation.Nullable
  public List<ResultTableColumnHeader> getColumnHeaders() {
    return columnHeaders;
  }

  public void setColumnHeaders(List<ResultTableColumnHeader> columnHeaders) {
    this.columnHeaders = columnHeaders;
  }


  public QueryResponse errors(Errors errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public Errors getErrors() {
    return errors;
  }

  public void setErrors(Errors errors) {
    this.errors = errors;
  }


  public QueryResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This value specifies the type of data included in the API response. For the query method, the kind property value will be &#x60;youtubeAnalytics#resultTable&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public QueryResponse rows(List<List<Object>> rows) {
    this.rows = rows;
    return this;
  }

  public QueryResponse addRowsItem(List<Object> rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * The list contains all rows of the result table. Each item in the list is an array that contains comma-delimited data corresponding to a single row of data. The order of the comma-delimited data fields will match the order of the columns listed in the &#x60;columnHeaders&#x60; field. If no data is available for the given query, the &#x60;rows&#x60; element will be omitted from the response. The response for a query with the &#x60;day&#x60; dimension will not contain rows for the most recent days.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<List<Object>> getRows() {
    return rows;
  }

  public void setRows(List<List<Object>> rows) {
    this.rows = rows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResponse queryResponse = (QueryResponse) o;
    return Objects.equals(this.columnHeaders, queryResponse.columnHeaders) &&
        Objects.equals(this.errors, queryResponse.errors) &&
        Objects.equals(this.kind, queryResponse.kind) &&
        Objects.equals(this.rows, queryResponse.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnHeaders, errors, kind, rows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResponse {\n");
    sb.append("    columnHeaders: ").append(toIndentedString(columnHeaders)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnHeaders");
    openapiFields.add("errors");
    openapiFields.add("kind");
    openapiFields.add("rows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResponse is not found in the empty JSON string", QueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columnHeaders") != null && !jsonObj.get("columnHeaders").isJsonNull()) {
        JsonArray jsonArraycolumnHeaders = jsonObj.getAsJsonArray("columnHeaders");
        if (jsonArraycolumnHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columnHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("columnHeaders").toString()));
          }

          // validate the optional field `columnHeaders` (array)
          for (int i = 0; i < jsonArraycolumnHeaders.size(); i++) {
            ResultTableColumnHeader.validateJsonElement(jsonArraycolumnHeaders.get(i));
          };
        }
      }
      // validate the optional field `errors`
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        Errors.validateJsonElement(jsonObj.get("errors"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull() && !jsonObj.get("rows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResponse>() {
           @Override
           public void write(JsonWriter out, QueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResponse
   * @throws IOException if the JSON string is invalid with respect to QueryResponse
   */
  public static QueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResponse.class);
  }

  /**
   * Convert an instance of QueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

