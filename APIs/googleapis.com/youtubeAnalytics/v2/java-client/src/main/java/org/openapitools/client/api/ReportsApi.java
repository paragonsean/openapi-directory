/*
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for youtubeAnalyticsReportsQuery
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param currency The currency to which financial metrics should be converted. The default is US Dollar (USD). If the result contains no financial metrics, this flag will be ignored. Responds with an error if the specified currency is not recognized.\&quot;, pattern: [A-Z]{3} (optional)
     * @param dimensions A comma-separated list of YouTube Analytics dimensions, such as &#x60;views&#x60; or &#x60;ageGroup,gender&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the dimensions used for those reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document for definitions of those dimensions.\&quot; pattern: [0-9a-zA-Z,]+ (optional)
     * @param endDate The end date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param filters A list of filters that should be applied when retrieving YouTube Analytics data. The [Available Reports](/youtube/analytics/v2/available_reports) document identifies the dimensions that can be used to filter each report, and the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document defines those dimensions. If a request uses multiple filters, join them together with a semicolon (&#x60;;&#x60;), and the returned result table will satisfy both filters. For example, a filters parameter value of &#x60;video&#x3D;&#x3D;dMH0bHeiRNg;country&#x3D;&#x3D;IT&#x60; restricts the result set to include data for the given video in Italy.\&quot;, (optional)
     * @param ids Identifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data. - To request data for a YouTube user, set the &#x60;ids&#x60; parameter value to &#x60;channel&#x3D;&#x3D;CHANNEL_ID&#x60;, where &#x60;CHANNEL_ID&#x60; specifies the unique YouTube channel ID. - To request data for a YouTube CMS content owner, set the &#x60;ids&#x60; parameter value to &#x60;contentOwner&#x3D;&#x3D;OWNER_NAME&#x60;, where &#x60;OWNER_NAME&#x60; is the CMS name of the content owner. required: true, pattern: [a-zA-Z]+&#x3D;&#x3D;[a-zA-Z0-9_+-]+ (optional)
     * @param includeHistoricalChannelData If set to true historical data (i.e. channel data from before the linking of the channel to the content owner) will be retrieved.\&quot;, (optional)
     * @param maxResults The maximum number of rows to include in the response.\&quot;, minValue: 1 (optional)
     * @param metrics A comma-separated list of YouTube Analytics metrics, such as &#x60;views&#x60; or &#x60;likes,dislikes&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the metrics available in each report, and see the [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of those metrics. required: true, pattern: [0-9a-zA-Z,]+ (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The &#39;&#x60;-&#x60;&#39; prefix causes descending sort order.\&quot;, pattern: [-0-9a-zA-Z,]+ (optional)
     * @param startDate The start date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: \&quot;[0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter (one-based, inclusive).\&quot;, minValue: 1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeAnalyticsReportsQueryCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String currency, String dimensions, String endDate, String filters, String ids, Boolean includeHistoricalChannelData, Integer maxResults, String metrics, String sort, String startDate, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (dimensions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensions", dimensions));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (includeHistoricalChannelData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHistoricalChannelData", includeHistoricalChannelData));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeAnalyticsReportsQueryValidateBeforeCall(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String currency, String dimensions, String endDate, String filters, String ids, Boolean includeHistoricalChannelData, Integer maxResults, String metrics, String sort, String startDate, Integer startIndex, final ApiCallback _callback) throws ApiException {
        return youtubeAnalyticsReportsQueryCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, currency, dimensions, endDate, filters, ids, includeHistoricalChannelData, maxResults, metrics, sort, startDate, startIndex, _callback);

    }

    /**
     * 
     * Retrieve your YouTube Analytics reports.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param currency The currency to which financial metrics should be converted. The default is US Dollar (USD). If the result contains no financial metrics, this flag will be ignored. Responds with an error if the specified currency is not recognized.\&quot;, pattern: [A-Z]{3} (optional)
     * @param dimensions A comma-separated list of YouTube Analytics dimensions, such as &#x60;views&#x60; or &#x60;ageGroup,gender&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the dimensions used for those reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document for definitions of those dimensions.\&quot; pattern: [0-9a-zA-Z,]+ (optional)
     * @param endDate The end date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param filters A list of filters that should be applied when retrieving YouTube Analytics data. The [Available Reports](/youtube/analytics/v2/available_reports) document identifies the dimensions that can be used to filter each report, and the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document defines those dimensions. If a request uses multiple filters, join them together with a semicolon (&#x60;;&#x60;), and the returned result table will satisfy both filters. For example, a filters parameter value of &#x60;video&#x3D;&#x3D;dMH0bHeiRNg;country&#x3D;&#x3D;IT&#x60; restricts the result set to include data for the given video in Italy.\&quot;, (optional)
     * @param ids Identifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data. - To request data for a YouTube user, set the &#x60;ids&#x60; parameter value to &#x60;channel&#x3D;&#x3D;CHANNEL_ID&#x60;, where &#x60;CHANNEL_ID&#x60; specifies the unique YouTube channel ID. - To request data for a YouTube CMS content owner, set the &#x60;ids&#x60; parameter value to &#x60;contentOwner&#x3D;&#x3D;OWNER_NAME&#x60;, where &#x60;OWNER_NAME&#x60; is the CMS name of the content owner. required: true, pattern: [a-zA-Z]+&#x3D;&#x3D;[a-zA-Z0-9_+-]+ (optional)
     * @param includeHistoricalChannelData If set to true historical data (i.e. channel data from before the linking of the channel to the content owner) will be retrieved.\&quot;, (optional)
     * @param maxResults The maximum number of rows to include in the response.\&quot;, minValue: 1 (optional)
     * @param metrics A comma-separated list of YouTube Analytics metrics, such as &#x60;views&#x60; or &#x60;likes,dislikes&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the metrics available in each report, and see the [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of those metrics. required: true, pattern: [0-9a-zA-Z,]+ (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The &#39;&#x60;-&#x60;&#39; prefix causes descending sort order.\&quot;, pattern: [-0-9a-zA-Z,]+ (optional)
     * @param startDate The start date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: \&quot;[0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter (one-based, inclusive).\&quot;, minValue: 1 (optional)
     * @return QueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public QueryResponse youtubeAnalyticsReportsQuery(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String currency, String dimensions, String endDate, String filters, String ids, Boolean includeHistoricalChannelData, Integer maxResults, String metrics, String sort, String startDate, Integer startIndex) throws ApiException {
        ApiResponse<QueryResponse> localVarResp = youtubeAnalyticsReportsQueryWithHttpInfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, currency, dimensions, endDate, filters, ids, includeHistoricalChannelData, maxResults, metrics, sort, startDate, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve your YouTube Analytics reports.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param currency The currency to which financial metrics should be converted. The default is US Dollar (USD). If the result contains no financial metrics, this flag will be ignored. Responds with an error if the specified currency is not recognized.\&quot;, pattern: [A-Z]{3} (optional)
     * @param dimensions A comma-separated list of YouTube Analytics dimensions, such as &#x60;views&#x60; or &#x60;ageGroup,gender&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the dimensions used for those reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document for definitions of those dimensions.\&quot; pattern: [0-9a-zA-Z,]+ (optional)
     * @param endDate The end date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param filters A list of filters that should be applied when retrieving YouTube Analytics data. The [Available Reports](/youtube/analytics/v2/available_reports) document identifies the dimensions that can be used to filter each report, and the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document defines those dimensions. If a request uses multiple filters, join them together with a semicolon (&#x60;;&#x60;), and the returned result table will satisfy both filters. For example, a filters parameter value of &#x60;video&#x3D;&#x3D;dMH0bHeiRNg;country&#x3D;&#x3D;IT&#x60; restricts the result set to include data for the given video in Italy.\&quot;, (optional)
     * @param ids Identifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data. - To request data for a YouTube user, set the &#x60;ids&#x60; parameter value to &#x60;channel&#x3D;&#x3D;CHANNEL_ID&#x60;, where &#x60;CHANNEL_ID&#x60; specifies the unique YouTube channel ID. - To request data for a YouTube CMS content owner, set the &#x60;ids&#x60; parameter value to &#x60;contentOwner&#x3D;&#x3D;OWNER_NAME&#x60;, where &#x60;OWNER_NAME&#x60; is the CMS name of the content owner. required: true, pattern: [a-zA-Z]+&#x3D;&#x3D;[a-zA-Z0-9_+-]+ (optional)
     * @param includeHistoricalChannelData If set to true historical data (i.e. channel data from before the linking of the channel to the content owner) will be retrieved.\&quot;, (optional)
     * @param maxResults The maximum number of rows to include in the response.\&quot;, minValue: 1 (optional)
     * @param metrics A comma-separated list of YouTube Analytics metrics, such as &#x60;views&#x60; or &#x60;likes,dislikes&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the metrics available in each report, and see the [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of those metrics. required: true, pattern: [0-9a-zA-Z,]+ (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The &#39;&#x60;-&#x60;&#39; prefix causes descending sort order.\&quot;, pattern: [-0-9a-zA-Z,]+ (optional)
     * @param startDate The start date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: \&quot;[0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter (one-based, inclusive).\&quot;, minValue: 1 (optional)
     * @return ApiResponse&lt;QueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResponse> youtubeAnalyticsReportsQueryWithHttpInfo(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String currency, String dimensions, String endDate, String filters, String ids, Boolean includeHistoricalChannelData, Integer maxResults, String metrics, String sort, String startDate, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = youtubeAnalyticsReportsQueryValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, currency, dimensions, endDate, filters, ids, includeHistoricalChannelData, maxResults, metrics, sort, startDate, startIndex, null);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve your YouTube Analytics reports.
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param currency The currency to which financial metrics should be converted. The default is US Dollar (USD). If the result contains no financial metrics, this flag will be ignored. Responds with an error if the specified currency is not recognized.\&quot;, pattern: [A-Z]{3} (optional)
     * @param dimensions A comma-separated list of YouTube Analytics dimensions, such as &#x60;views&#x60; or &#x60;ageGroup,gender&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the dimensions used for those reports. Also see the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document for definitions of those dimensions.\&quot; pattern: [0-9a-zA-Z,]+ (optional)
     * @param endDate The end date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: [0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param filters A list of filters that should be applied when retrieving YouTube Analytics data. The [Available Reports](/youtube/analytics/v2/available_reports) document identifies the dimensions that can be used to filter each report, and the [Dimensions](/youtube/analytics/v2/dimsmets/dims) document defines those dimensions. If a request uses multiple filters, join them together with a semicolon (&#x60;;&#x60;), and the returned result table will satisfy both filters. For example, a filters parameter value of &#x60;video&#x3D;&#x3D;dMH0bHeiRNg;country&#x3D;&#x3D;IT&#x60; restricts the result set to include data for the given video in Italy.\&quot;, (optional)
     * @param ids Identifies the YouTube channel or content owner for which you are retrieving YouTube Analytics data. - To request data for a YouTube user, set the &#x60;ids&#x60; parameter value to &#x60;channel&#x3D;&#x3D;CHANNEL_ID&#x60;, where &#x60;CHANNEL_ID&#x60; specifies the unique YouTube channel ID. - To request data for a YouTube CMS content owner, set the &#x60;ids&#x60; parameter value to &#x60;contentOwner&#x3D;&#x3D;OWNER_NAME&#x60;, where &#x60;OWNER_NAME&#x60; is the CMS name of the content owner. required: true, pattern: [a-zA-Z]+&#x3D;&#x3D;[a-zA-Z0-9_+-]+ (optional)
     * @param includeHistoricalChannelData If set to true historical data (i.e. channel data from before the linking of the channel to the content owner) will be retrieved.\&quot;, (optional)
     * @param maxResults The maximum number of rows to include in the response.\&quot;, minValue: 1 (optional)
     * @param metrics A comma-separated list of YouTube Analytics metrics, such as &#x60;views&#x60; or &#x60;likes,dislikes&#x60;. See the [Available Reports](/youtube/analytics/v2/available_reports) document for a list of the reports that you can retrieve and the metrics available in each report, and see the [Metrics](/youtube/analytics/v2/dimsmets/mets) document for definitions of those metrics. required: true, pattern: [0-9a-zA-Z,]+ (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for YouTube Analytics data. By default the sort order is ascending. The &#39;&#x60;-&#x60;&#39; prefix causes descending sort order.\&quot;, pattern: [-0-9a-zA-Z,]+ (optional)
     * @param startDate The start date for fetching YouTube Analytics data. The value should be in &#x60;YYYY-MM-DD&#x60; format. required: true, pattern: \&quot;[0-9]{4}-[0-9]{2}-[0-9]{2} (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter (one-based, inclusive).\&quot;, minValue: 1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeAnalyticsReportsQueryAsync(String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String currency, String dimensions, String endDate, String filters, String ids, Boolean includeHistoricalChannelData, Integer maxResults, String metrics, String sort, String startDate, Integer startIndex, final ApiCallback<QueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeAnalyticsReportsQueryValidateBeforeCall($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, currency, dimensions, endDate, filters, ids, includeHistoricalChannelData, maxResults, metrics, sort, startDate, startIndex, _callback);
        Type localVarReturnType = new TypeToken<QueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
