# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_proto import ErrorProto
from openapi_server import util


class Errors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, error: List[ErrorProto]=None, request_id: str=None):
        """Errors - a model defined in OpenAPI

        :param code: The code of this Errors.
        :param error: The error of this Errors.
        :param request_id: The request_id of this Errors.
        """
        self.openapi_types = {
            'code': str,
            'error': List[ErrorProto],
            'request_id': str
        }

        self.attribute_map = {
            'code': 'code',
            'error': 'error',
            'request_id': 'requestId'
        }

        self._code = code
        self._error = error
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Errors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Errors of this Errors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Errors.

        Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead.

        :return: The code of this Errors.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Errors.

        Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead.

        :param code: The code of this Errors.
        :type code: str
        """
        allowed_values = ["BAD_REQUEST", "FORBIDDEN", "NOT_FOUND", "CONFLICT", "GONE", "PRECONDITION_FAILED", "INTERNAL_ERROR", "SERVICE_UNAVAILABLE"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def error(self):
        """Gets the error of this Errors.

        Specific error description and codes

        :return: The error of this Errors.
        :rtype: List[ErrorProto]
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Errors.

        Specific error description and codes

        :param error: The error of this Errors.
        :type error: List[ErrorProto]
        """

        self._error = error

    @property
    def request_id(self):
        """Gets the request_id of this Errors.

        Request identifier generated by the service, which can be used to identify the error in the logs

        :return: The request_id of this Errors.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Errors.

        Request identifier generated by the service, which can be used to identify the error in the logs

        :param request_id: The request_id of this Errors.
        :type request_id: str
        """

        self._request_id = request_id
