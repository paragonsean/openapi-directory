# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.errors import Errors
from openapi_server.models.result_table_column_header import ResultTableColumnHeader
from openapi_server import util


class QueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_headers: List[ResultTableColumnHeader]=None, errors: Errors=None, kind: str=None, rows: List[List[object]]=None):
        """QueryResponse - a model defined in OpenAPI

        :param column_headers: The column_headers of this QueryResponse.
        :param errors: The errors of this QueryResponse.
        :param kind: The kind of this QueryResponse.
        :param rows: The rows of this QueryResponse.
        """
        self.openapi_types = {
            'column_headers': List[ResultTableColumnHeader],
            'errors': Errors,
            'kind': str,
            'rows': List[List[object]]
        }

        self.attribute_map = {
            'column_headers': 'columnHeaders',
            'errors': 'errors',
            'kind': 'kind',
            'rows': 'rows'
        }

        self._column_headers = column_headers
        self._errors = errors
        self._kind = kind
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryResponse of this QueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_headers(self):
        """Gets the column_headers of this QueryResponse.

        This value specifies information about the data returned in the `rows` fields. Each item in the `columnHeaders` list identifies a field returned in the `rows` value, which contains a list of comma-delimited data. The `columnHeaders` list will begin with the dimensions specified in the API request, which will be followed by the metrics specified in the API request. The order of both dimensions and metrics will match the ordering in the API request. For example, if the API request contains the parameters `dimensions=ageGroup,gender&metrics=viewerPercentage`, the API response will return columns in this order: `ageGroup`, `gender`, `viewerPercentage`.

        :return: The column_headers of this QueryResponse.
        :rtype: List[ResultTableColumnHeader]
        """
        return self._column_headers

    @column_headers.setter
    def column_headers(self, column_headers):
        """Sets the column_headers of this QueryResponse.

        This value specifies information about the data returned in the `rows` fields. Each item in the `columnHeaders` list identifies a field returned in the `rows` value, which contains a list of comma-delimited data. The `columnHeaders` list will begin with the dimensions specified in the API request, which will be followed by the metrics specified in the API request. The order of both dimensions and metrics will match the ordering in the API request. For example, if the API request contains the parameters `dimensions=ageGroup,gender&metrics=viewerPercentage`, the API response will return columns in this order: `ageGroup`, `gender`, `viewerPercentage`.

        :param column_headers: The column_headers of this QueryResponse.
        :type column_headers: List[ResultTableColumnHeader]
        """

        self._column_headers = column_headers

    @property
    def errors(self):
        """Gets the errors of this QueryResponse.


        :return: The errors of this QueryResponse.
        :rtype: Errors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this QueryResponse.


        :param errors: The errors of this QueryResponse.
        :type errors: Errors
        """

        self._errors = errors

    @property
    def kind(self):
        """Gets the kind of this QueryResponse.

        This value specifies the type of data included in the API response. For the query method, the kind property value will be `youtubeAnalytics#resultTable`.

        :return: The kind of this QueryResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this QueryResponse.

        This value specifies the type of data included in the API response. For the query method, the kind property value will be `youtubeAnalytics#resultTable`.

        :param kind: The kind of this QueryResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def rows(self):
        """Gets the rows of this QueryResponse.

        The list contains all rows of the result table. Each item in the list is an array that contains comma-delimited data corresponding to a single row of data. The order of the comma-delimited data fields will match the order of the columns listed in the `columnHeaders` field. If no data is available for the given query, the `rows` element will be omitted from the response. The response for a query with the `day` dimension will not contain rows for the most recent days.

        :return: The rows of this QueryResponse.
        :rtype: List[List[object]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this QueryResponse.

        The list contains all rows of the result table. Each item in the list is an array that contains comma-delimited data corresponding to a single row of data. The order of the comma-delimited data fields will match the order of the columns listed in the `columnHeaders` field. If no data is available for the given query, the `rows` element will be omitted from the response. The response for a query with the `day` dimension will not contain rows for the most recent days.

        :param rows: The rows of this QueryResponse.
        :type rows: List[List[object]]
        """

        self._rows = rows
