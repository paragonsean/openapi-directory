# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, argument: List[str]=None, code: str=None, debug_info: str=None, domain: str=None, external_error_message: str=None, location: str=None, location_type: str=None):
        """ErrorProto - a model defined in OpenAPI

        :param argument: The argument of this ErrorProto.
        :param code: The code of this ErrorProto.
        :param debug_info: The debug_info of this ErrorProto.
        :param domain: The domain of this ErrorProto.
        :param external_error_message: The external_error_message of this ErrorProto.
        :param location: The location of this ErrorProto.
        :param location_type: The location_type of this ErrorProto.
        """
        self.openapi_types = {
            'argument': List[str],
            'code': str,
            'debug_info': str,
            'domain': str,
            'external_error_message': str,
            'location': str,
            'location_type': str
        }

        self.attribute_map = {
            'argument': 'argument',
            'code': 'code',
            'debug_info': 'debugInfo',
            'domain': 'domain',
            'external_error_message': 'externalErrorMessage',
            'location': 'location',
            'location_type': 'locationType'
        }

        self._argument = argument
        self._code = code
        self._debug_info = debug_info
        self._domain = domain
        self._external_error_message = external_error_message
        self._location = location
        self._location_type = location_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorProto of this ErrorProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def argument(self):
        """Gets the argument of this ErrorProto.

        Error arguments, to be used when building user-friendly error messages given the error domain and code. Different error codes require different arguments.

        :return: The argument of this ErrorProto.
        :rtype: List[str]
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this ErrorProto.

        Error arguments, to be used when building user-friendly error messages given the error domain and code. Different error codes require different arguments.

        :param argument: The argument of this ErrorProto.
        :type argument: List[str]
        """

        self._argument = argument

    @property
    def code(self):
        """Gets the code of this ErrorProto.

        Error code in the error domain. This should correspond to a value of the enum type whose name is in domain. See the core error domain in error_domain.proto.

        :return: The code of this ErrorProto.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorProto.

        Error code in the error domain. This should correspond to a value of the enum type whose name is in domain. See the core error domain in error_domain.proto.

        :param code: The code of this ErrorProto.
        :type code: str
        """

        self._code = code

    @property
    def debug_info(self):
        """Gets the debug_info of this ErrorProto.

        Debugging information, which should not be shared externally.

        :return: The debug_info of this ErrorProto.
        :rtype: str
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this ErrorProto.

        Debugging information, which should not be shared externally.

        :param debug_info: The debug_info of this ErrorProto.
        :type debug_info: str
        """

        self._debug_info = debug_info

    @property
    def domain(self):
        """Gets the domain of this ErrorProto.

        Error domain. RoSy services can define their own domain and error codes. This should normally be the name of an enum type, such as: gdata.CoreErrorDomain

        :return: The domain of this ErrorProto.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ErrorProto.

        Error domain. RoSy services can define their own domain and error codes. This should normally be the name of an enum type, such as: gdata.CoreErrorDomain

        :param domain: The domain of this ErrorProto.
        :type domain: str
        """

        self._domain = domain

    @property
    def external_error_message(self):
        """Gets the external_error_message of this ErrorProto.

        A short explanation for the error, which can be shared outside Google. Please set domain, code and arguments whenever possible instead of this error message so that external APIs can build safe error messages themselves. External messages built in a RoSy interface will most likely refer to information and concepts that are not available externally and should not be exposed. It is safer if external APIs can understand the errors and decide what the error message should look like.

        :return: The external_error_message of this ErrorProto.
        :rtype: str
        """
        return self._external_error_message

    @external_error_message.setter
    def external_error_message(self, external_error_message):
        """Sets the external_error_message of this ErrorProto.

        A short explanation for the error, which can be shared outside Google. Please set domain, code and arguments whenever possible instead of this error message so that external APIs can build safe error messages themselves. External messages built in a RoSy interface will most likely refer to information and concepts that are not available externally and should not be exposed. It is safer if external APIs can understand the errors and decide what the error message should look like.

        :param external_error_message: The external_error_message of this ErrorProto.
        :type external_error_message: str
        """

        self._external_error_message = external_error_message

    @property
    def location(self):
        """Gets the location of this ErrorProto.

        Location of the error, as specified by the location type. If location_type is PATH, this should be a path to a field that's relative to the request, using FieldPath notation (net/proto2/util/public/field_path.h). Examples: authenticated_user.gaia_id resource.address[2].country

        :return: The location of this ErrorProto.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ErrorProto.

        Location of the error, as specified by the location type. If location_type is PATH, this should be a path to a field that's relative to the request, using FieldPath notation (net/proto2/util/public/field_path.h). Examples: authenticated_user.gaia_id resource.address[2].country

        :param location: The location of this ErrorProto.
        :type location: str
        """

        self._location = location

    @property
    def location_type(self):
        """Gets the location_type of this ErrorProto.


        :return: The location_type of this ErrorProto.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this ErrorProto.


        :param location_type: The location_type of this ErrorProto.
        :type location_type: str
        """
        allowed_values = ["PATH", "OTHER", "PARAMETER"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type
