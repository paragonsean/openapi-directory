/**
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResponse::OAIQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResponse::OAIQueryResponse() {
    this->initializeModel();
}

OAIQueryResponse::~OAIQueryResponse() {}

void OAIQueryResponse::initializeModel() {

    m_column_headers_isSet = false;
    m_column_headers_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAIQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResponse::fromJsonObject(QJsonObject json) {

    m_column_headers_isValid = ::OpenAPI::fromJsonValue(m_column_headers, json[QString("columnHeaders")]);
    m_column_headers_isSet = !json[QString("columnHeaders")].isNull() && m_column_headers_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }
}

QString OAIQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_column_headers.size() > 0) {
        obj.insert(QString("columnHeaders"), ::OpenAPI::toJsonValue(m_column_headers));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    return obj;
}

QList<OAIResultTableColumnHeader> OAIQueryResponse::getColumnHeaders() const {
    return m_column_headers;
}
void OAIQueryResponse::setColumnHeaders(const QList<OAIResultTableColumnHeader> &column_headers) {
    m_column_headers = column_headers;
    m_column_headers_isSet = true;
}

bool OAIQueryResponse::is_column_headers_Set() const{
    return m_column_headers_isSet;
}

bool OAIQueryResponse::is_column_headers_Valid() const{
    return m_column_headers_isValid;
}

OAIErrors OAIQueryResponse::getErrors() const {
    return m_errors;
}
void OAIQueryResponse::setErrors(const OAIErrors &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIQueryResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIQueryResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIQueryResponse::getKind() const {
    return m_kind;
}
void OAIQueryResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIQueryResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIQueryResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QList<QJsonValue>> OAIQueryResponse::getRows() const {
    return m_rows;
}
void OAIQueryResponse::setRows(const QList<QList<QJsonValue>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryResponse::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryResponse::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAIQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
