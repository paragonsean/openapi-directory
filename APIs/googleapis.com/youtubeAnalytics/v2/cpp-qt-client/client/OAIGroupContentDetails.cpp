/**
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupContentDetails::OAIGroupContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupContentDetails::OAIGroupContentDetails() {
    this->initializeModel();
}

OAIGroupContentDetails::~OAIGroupContentDetails() {}

void OAIGroupContentDetails::initializeModel() {

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;
}

void OAIGroupContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupContentDetails::fromJsonObject(QJsonObject json) {

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("itemCount")]);
    m_item_count_isSet = !json[QString("itemCount")].isNull() && m_item_count_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;
}

QString OAIGroupContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_item_count_isSet) {
        obj.insert(QString("itemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    return obj;
}

QString OAIGroupContentDetails::getItemCount() const {
    return m_item_count;
}
void OAIGroupContentDetails::setItemCount(const QString &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIGroupContentDetails::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIGroupContentDetails::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QString OAIGroupContentDetails::getItemType() const {
    return m_item_type;
}
void OAIGroupContentDetails::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIGroupContentDetails::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIGroupContentDetails::is_item_type_Valid() const{
    return m_item_type_isValid;
}

bool OAIGroupContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
