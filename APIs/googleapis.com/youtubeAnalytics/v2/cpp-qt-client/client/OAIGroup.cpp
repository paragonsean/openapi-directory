/**
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_content_details_isSet = false;
    m_content_details_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_content_details_isValid = ::OpenAPI::fromJsonValue(m_content_details, json[QString("contentDetails")]);
    m_content_details_isSet = !json[QString("contentDetails")].isNull() && m_content_details_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_content_details.isSet()) {
        obj.insert(QString("contentDetails"), ::OpenAPI::toJsonValue(m_content_details));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    return obj;
}

OAIGroupContentDetails OAIGroup::getContentDetails() const {
    return m_content_details;
}
void OAIGroup::setContentDetails(const OAIGroupContentDetails &content_details) {
    m_content_details = content_details;
    m_content_details_isSet = true;
}

bool OAIGroup::is_content_details_Set() const{
    return m_content_details_isSet;
}

bool OAIGroup::is_content_details_Valid() const{
    return m_content_details_isValid;
}

OAIErrors OAIGroup::getErrors() const {
    return m_errors;
}
void OAIGroup::setErrors(const OAIErrors &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGroup::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGroup::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIGroup::getEtag() const {
    return m_etag;
}
void OAIGroup::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGroup::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGroup::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGroup::getId() const {
    return m_id;
}
void OAIGroup::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGroup::getKind() const {
    return m_kind;
}
void OAIGroup::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIGroup::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIGroup::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIGroupSnippet OAIGroup::getSnippet() const {
    return m_snippet;
}
void OAIGroup::setSnippet(const OAIGroupSnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIGroup::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIGroup::is_snippet_Valid() const{
    return m_snippet_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
