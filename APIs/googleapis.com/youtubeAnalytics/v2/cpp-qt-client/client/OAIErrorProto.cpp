/**
 * YouTube Analytics API
 * Retrieves your YouTube Analytics data.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorProto::OAIErrorProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorProto::OAIErrorProto() {
    this->initializeModel();
}

OAIErrorProto::~OAIErrorProto() {}

void OAIErrorProto::initializeModel() {

    m_argument_isSet = false;
    m_argument_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_debug_info_isSet = false;
    m_debug_info_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_external_error_message_isSet = false;
    m_external_error_message_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;
}

void OAIErrorProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorProto::fromJsonObject(QJsonObject json) {

    m_argument_isValid = ::OpenAPI::fromJsonValue(m_argument, json[QString("argument")]);
    m_argument_isSet = !json[QString("argument")].isNull() && m_argument_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_debug_info_isValid = ::OpenAPI::fromJsonValue(m_debug_info, json[QString("debugInfo")]);
    m_debug_info_isSet = !json[QString("debugInfo")].isNull() && m_debug_info_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_external_error_message_isValid = ::OpenAPI::fromJsonValue(m_external_error_message, json[QString("externalErrorMessage")]);
    m_external_error_message_isSet = !json[QString("externalErrorMessage")].isNull() && m_external_error_message_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;
}

QString OAIErrorProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorProto::asJsonObject() const {
    QJsonObject obj;
    if (m_argument.size() > 0) {
        obj.insert(QString("argument"), ::OpenAPI::toJsonValue(m_argument));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_debug_info_isSet) {
        obj.insert(QString("debugInfo"), ::OpenAPI::toJsonValue(m_debug_info));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_external_error_message_isSet) {
        obj.insert(QString("externalErrorMessage"), ::OpenAPI::toJsonValue(m_external_error_message));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_location_type_isSet) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    return obj;
}

QList<QString> OAIErrorProto::getArgument() const {
    return m_argument;
}
void OAIErrorProto::setArgument(const QList<QString> &argument) {
    m_argument = argument;
    m_argument_isSet = true;
}

bool OAIErrorProto::is_argument_Set() const{
    return m_argument_isSet;
}

bool OAIErrorProto::is_argument_Valid() const{
    return m_argument_isValid;
}

QString OAIErrorProto::getCode() const {
    return m_code;
}
void OAIErrorProto::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorProto::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorProto::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIErrorProto::getDebugInfo() const {
    return m_debug_info;
}
void OAIErrorProto::setDebugInfo(const QString &debug_info) {
    m_debug_info = debug_info;
    m_debug_info_isSet = true;
}

bool OAIErrorProto::is_debug_info_Set() const{
    return m_debug_info_isSet;
}

bool OAIErrorProto::is_debug_info_Valid() const{
    return m_debug_info_isValid;
}

QString OAIErrorProto::getDomain() const {
    return m_domain;
}
void OAIErrorProto::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIErrorProto::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIErrorProto::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIErrorProto::getExternalErrorMessage() const {
    return m_external_error_message;
}
void OAIErrorProto::setExternalErrorMessage(const QString &external_error_message) {
    m_external_error_message = external_error_message;
    m_external_error_message_isSet = true;
}

bool OAIErrorProto::is_external_error_message_Set() const{
    return m_external_error_message_isSet;
}

bool OAIErrorProto::is_external_error_message_Valid() const{
    return m_external_error_message_isValid;
}

QString OAIErrorProto::getLocation() const {
    return m_location;
}
void OAIErrorProto::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIErrorProto::is_location_Set() const{
    return m_location_isSet;
}

bool OAIErrorProto::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIErrorProto::getLocationType() const {
    return m_location_type;
}
void OAIErrorProto::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIErrorProto::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIErrorProto::is_location_type_Valid() const{
    return m_location_type_isValid;
}

bool OAIErrorProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_argument.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
