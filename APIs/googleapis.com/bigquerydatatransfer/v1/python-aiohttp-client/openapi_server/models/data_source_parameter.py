# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSourceParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: List[str]=None, deprecated: bool=None, description: str=None, display_name: str=None, fields: List[DataSourceParameter]=None, immutable: bool=None, max_value: float=None, min_value: float=None, param_id: str=None, recurse: bool=None, repeated: bool=None, required: bool=None, type: str=None, validation_description: str=None, validation_help_url: str=None, validation_regex: str=None):
        """DataSourceParameter - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this DataSourceParameter.
        :param deprecated: The deprecated of this DataSourceParameter.
        :param description: The description of this DataSourceParameter.
        :param display_name: The display_name of this DataSourceParameter.
        :param fields: The fields of this DataSourceParameter.
        :param immutable: The immutable of this DataSourceParameter.
        :param max_value: The max_value of this DataSourceParameter.
        :param min_value: The min_value of this DataSourceParameter.
        :param param_id: The param_id of this DataSourceParameter.
        :param recurse: The recurse of this DataSourceParameter.
        :param repeated: The repeated of this DataSourceParameter.
        :param required: The required of this DataSourceParameter.
        :param type: The type of this DataSourceParameter.
        :param validation_description: The validation_description of this DataSourceParameter.
        :param validation_help_url: The validation_help_url of this DataSourceParameter.
        :param validation_regex: The validation_regex of this DataSourceParameter.
        """
        self.openapi_types = {
            'allowed_values': List[str],
            'deprecated': bool,
            'description': str,
            'display_name': str,
            'fields': List[DataSourceParameter],
            'immutable': bool,
            'max_value': float,
            'min_value': float,
            'param_id': str,
            'recurse': bool,
            'repeated': bool,
            'required': bool,
            'type': str,
            'validation_description': str,
            'validation_help_url': str,
            'validation_regex': str
        }

        self.attribute_map = {
            'allowed_values': 'allowedValues',
            'deprecated': 'deprecated',
            'description': 'description',
            'display_name': 'displayName',
            'fields': 'fields',
            'immutable': 'immutable',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'param_id': 'paramId',
            'recurse': 'recurse',
            'repeated': 'repeated',
            'required': 'required',
            'type': 'type',
            'validation_description': 'validationDescription',
            'validation_help_url': 'validationHelpUrl',
            'validation_regex': 'validationRegex'
        }

        self._allowed_values = allowed_values
        self._deprecated = deprecated
        self._description = description
        self._display_name = display_name
        self._fields = fields
        self._immutable = immutable
        self._max_value = max_value
        self._min_value = min_value
        self._param_id = param_id
        self._recurse = recurse
        self._repeated = repeated
        self._required = required
        self._type = type
        self._validation_description = validation_description
        self._validation_help_url = validation_help_url
        self._validation_regex = validation_regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSourceParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSourceParameter of this DataSourceParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this DataSourceParameter.

        All possible values for the parameter.

        :return: The allowed_values of this DataSourceParameter.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this DataSourceParameter.

        All possible values for the parameter.

        :param allowed_values: The allowed_values of this DataSourceParameter.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values

    @property
    def deprecated(self):
        """Gets the deprecated of this DataSourceParameter.

        If true, it should not be used in new transfers, and it should not be visible to users.

        :return: The deprecated of this DataSourceParameter.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this DataSourceParameter.

        If true, it should not be used in new transfers, and it should not be visible to users.

        :param deprecated: The deprecated of this DataSourceParameter.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this DataSourceParameter.

        Parameter description.

        :return: The description of this DataSourceParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataSourceParameter.

        Parameter description.

        :param description: The description of this DataSourceParameter.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this DataSourceParameter.

        Parameter display name in the user interface.

        :return: The display_name of this DataSourceParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DataSourceParameter.

        Parameter display name in the user interface.

        :param display_name: The display_name of this DataSourceParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fields(self):
        """Gets the fields of this DataSourceParameter.

        Deprecated. This field has no effect.

        :return: The fields of this DataSourceParameter.
        :rtype: List[DataSourceParameter]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this DataSourceParameter.

        Deprecated. This field has no effect.

        :param fields: The fields of this DataSourceParameter.
        :type fields: List[DataSourceParameter]
        """

        self._fields = fields

    @property
    def immutable(self):
        """Gets the immutable of this DataSourceParameter.

        Cannot be changed after initial creation.

        :return: The immutable of this DataSourceParameter.
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this DataSourceParameter.

        Cannot be changed after initial creation.

        :param immutable: The immutable of this DataSourceParameter.
        :type immutable: bool
        """

        self._immutable = immutable

    @property
    def max_value(self):
        """Gets the max_value of this DataSourceParameter.

        For integer and double values specifies maximum allowed value.

        :return: The max_value of this DataSourceParameter.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this DataSourceParameter.

        For integer and double values specifies maximum allowed value.

        :param max_value: The max_value of this DataSourceParameter.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this DataSourceParameter.

        For integer and double values specifies minimum allowed value.

        :return: The min_value of this DataSourceParameter.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this DataSourceParameter.

        For integer and double values specifies minimum allowed value.

        :param min_value: The min_value of this DataSourceParameter.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def param_id(self):
        """Gets the param_id of this DataSourceParameter.

        Parameter identifier.

        :return: The param_id of this DataSourceParameter.
        :rtype: str
        """
        return self._param_id

    @param_id.setter
    def param_id(self, param_id):
        """Sets the param_id of this DataSourceParameter.

        Parameter identifier.

        :param param_id: The param_id of this DataSourceParameter.
        :type param_id: str
        """

        self._param_id = param_id

    @property
    def recurse(self):
        """Gets the recurse of this DataSourceParameter.

        Deprecated. This field has no effect.

        :return: The recurse of this DataSourceParameter.
        :rtype: bool
        """
        return self._recurse

    @recurse.setter
    def recurse(self, recurse):
        """Sets the recurse of this DataSourceParameter.

        Deprecated. This field has no effect.

        :param recurse: The recurse of this DataSourceParameter.
        :type recurse: bool
        """

        self._recurse = recurse

    @property
    def repeated(self):
        """Gets the repeated of this DataSourceParameter.

        Deprecated. This field has no effect.

        :return: The repeated of this DataSourceParameter.
        :rtype: bool
        """
        return self._repeated

    @repeated.setter
    def repeated(self, repeated):
        """Sets the repeated of this DataSourceParameter.

        Deprecated. This field has no effect.

        :param repeated: The repeated of this DataSourceParameter.
        :type repeated: bool
        """

        self._repeated = repeated

    @property
    def required(self):
        """Gets the required of this DataSourceParameter.

        Is parameter required.

        :return: The required of this DataSourceParameter.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this DataSourceParameter.

        Is parameter required.

        :param required: The required of this DataSourceParameter.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this DataSourceParameter.

        Parameter type.

        :return: The type of this DataSourceParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSourceParameter.

        Parameter type.

        :param type: The type of this DataSourceParameter.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "STRING", "INTEGER", "DOUBLE", "BOOLEAN", "RECORD", "PLUS_PAGE", "LIST"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validation_description(self):
        """Gets the validation_description of this DataSourceParameter.

        Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.

        :return: The validation_description of this DataSourceParameter.
        :rtype: str
        """
        return self._validation_description

    @validation_description.setter
    def validation_description(self, validation_description):
        """Sets the validation_description of this DataSourceParameter.

        Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.

        :param validation_description: The validation_description of this DataSourceParameter.
        :type validation_description: str
        """

        self._validation_description = validation_description

    @property
    def validation_help_url(self):
        """Gets the validation_help_url of this DataSourceParameter.

        URL to a help document to further explain the naming requirements.

        :return: The validation_help_url of this DataSourceParameter.
        :rtype: str
        """
        return self._validation_help_url

    @validation_help_url.setter
    def validation_help_url(self, validation_help_url):
        """Sets the validation_help_url of this DataSourceParameter.

        URL to a help document to further explain the naming requirements.

        :param validation_help_url: The validation_help_url of this DataSourceParameter.
        :type validation_help_url: str
        """

        self._validation_help_url = validation_help_url

    @property
    def validation_regex(self):
        """Gets the validation_regex of this DataSourceParameter.

        Regular expression which can be used for parameter validation.

        :return: The validation_regex of this DataSourceParameter.
        :rtype: str
        """
        return self._validation_regex

    @validation_regex.setter
    def validation_regex(self, validation_regex):
        """Sets the validation_regex of this DataSourceParameter.

        Regular expression which can be used for parameter validation.

        :param validation_regex: The validation_regex of this DataSourceParameter.
        :type validation_regex: str
        """

        self._validation_regex = validation_regex
