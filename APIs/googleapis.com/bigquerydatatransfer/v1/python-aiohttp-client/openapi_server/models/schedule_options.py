# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_auto_scheduling: bool=None, end_time: str=None, start_time: str=None):
        """ScheduleOptions - a model defined in OpenAPI

        :param disable_auto_scheduling: The disable_auto_scheduling of this ScheduleOptions.
        :param end_time: The end_time of this ScheduleOptions.
        :param start_time: The start_time of this ScheduleOptions.
        """
        self.openapi_types = {
            'disable_auto_scheduling': bool,
            'end_time': str,
            'start_time': str
        }

        self.attribute_map = {
            'disable_auto_scheduling': 'disableAutoScheduling',
            'end_time': 'endTime',
            'start_time': 'startTime'
        }

        self._disable_auto_scheduling = disable_auto_scheduling
        self._end_time = end_time
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleOptions of this ScheduleOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_auto_scheduling(self):
        """Gets the disable_auto_scheduling of this ScheduleOptions.

        If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.

        :return: The disable_auto_scheduling of this ScheduleOptions.
        :rtype: bool
        """
        return self._disable_auto_scheduling

    @disable_auto_scheduling.setter
    def disable_auto_scheduling(self, disable_auto_scheduling):
        """Sets the disable_auto_scheduling of this ScheduleOptions.

        If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.

        :param disable_auto_scheduling: The disable_auto_scheduling of this ScheduleOptions.
        :type disable_auto_scheduling: bool
        """

        self._disable_auto_scheduling = disable_auto_scheduling

    @property
    def end_time(self):
        """Gets the end_time of this ScheduleOptions.

        Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be triggered manually is not limited by this option.

        :return: The end_time of this ScheduleOptions.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScheduleOptions.

        Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be triggered manually is not limited by this option.

        :param end_time: The end_time of this ScheduleOptions.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this ScheduleOptions.

        Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be triggered manually is not limited by this option.

        :return: The start_time of this ScheduleOptions.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScheduleOptions.

        Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be triggered manually is not limited by this option.

        :param start_time: The start_time of this ScheduleOptions.
        :type start_time: str
        """

        self._start_time = start_time
