# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_preferences import EmailPreferences
from openapi_server.models.encryption_configuration import EncryptionConfiguration
from openapi_server.models.schedule_options import ScheduleOptions
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class TransferConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_refresh_window_days: int=None, data_source_id: str=None, dataset_region: str=None, destination_dataset_id: str=None, disabled: bool=None, display_name: str=None, email_preferences: EmailPreferences=None, encryption_configuration: EncryptionConfiguration=None, name: str=None, next_run_time: str=None, notification_pubsub_topic: str=None, owner_info: UserInfo=None, params: Dict[str, object]=None, schedule: str=None, schedule_options: ScheduleOptions=None, state: str=None, update_time: str=None, user_id: str=None):
        """TransferConfig - a model defined in OpenAPI

        :param data_refresh_window_days: The data_refresh_window_days of this TransferConfig.
        :param data_source_id: The data_source_id of this TransferConfig.
        :param dataset_region: The dataset_region of this TransferConfig.
        :param destination_dataset_id: The destination_dataset_id of this TransferConfig.
        :param disabled: The disabled of this TransferConfig.
        :param display_name: The display_name of this TransferConfig.
        :param email_preferences: The email_preferences of this TransferConfig.
        :param encryption_configuration: The encryption_configuration of this TransferConfig.
        :param name: The name of this TransferConfig.
        :param next_run_time: The next_run_time of this TransferConfig.
        :param notification_pubsub_topic: The notification_pubsub_topic of this TransferConfig.
        :param owner_info: The owner_info of this TransferConfig.
        :param params: The params of this TransferConfig.
        :param schedule: The schedule of this TransferConfig.
        :param schedule_options: The schedule_options of this TransferConfig.
        :param state: The state of this TransferConfig.
        :param update_time: The update_time of this TransferConfig.
        :param user_id: The user_id of this TransferConfig.
        """
        self.openapi_types = {
            'data_refresh_window_days': int,
            'data_source_id': str,
            'dataset_region': str,
            'destination_dataset_id': str,
            'disabled': bool,
            'display_name': str,
            'email_preferences': EmailPreferences,
            'encryption_configuration': EncryptionConfiguration,
            'name': str,
            'next_run_time': str,
            'notification_pubsub_topic': str,
            'owner_info': UserInfo,
            'params': Dict[str, object],
            'schedule': str,
            'schedule_options': ScheduleOptions,
            'state': str,
            'update_time': str,
            'user_id': str
        }

        self.attribute_map = {
            'data_refresh_window_days': 'dataRefreshWindowDays',
            'data_source_id': 'dataSourceId',
            'dataset_region': 'datasetRegion',
            'destination_dataset_id': 'destinationDatasetId',
            'disabled': 'disabled',
            'display_name': 'displayName',
            'email_preferences': 'emailPreferences',
            'encryption_configuration': 'encryptionConfiguration',
            'name': 'name',
            'next_run_time': 'nextRunTime',
            'notification_pubsub_topic': 'notificationPubsubTopic',
            'owner_info': 'ownerInfo',
            'params': 'params',
            'schedule': 'schedule',
            'schedule_options': 'scheduleOptions',
            'state': 'state',
            'update_time': 'updateTime',
            'user_id': 'userId'
        }

        self._data_refresh_window_days = data_refresh_window_days
        self._data_source_id = data_source_id
        self._dataset_region = dataset_region
        self._destination_dataset_id = destination_dataset_id
        self._disabled = disabled
        self._display_name = display_name
        self._email_preferences = email_preferences
        self._encryption_configuration = encryption_configuration
        self._name = name
        self._next_run_time = next_run_time
        self._notification_pubsub_topic = notification_pubsub_topic
        self._owner_info = owner_info
        self._params = params
        self._schedule = schedule
        self._schedule_options = schedule_options
        self._state = state
        self._update_time = update_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferConfig of this TransferConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_refresh_window_days(self):
        """Gets the data_refresh_window_days of this TransferConfig.

        The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.

        :return: The data_refresh_window_days of this TransferConfig.
        :rtype: int
        """
        return self._data_refresh_window_days

    @data_refresh_window_days.setter
    def data_refresh_window_days(self, data_refresh_window_days):
        """Sets the data_refresh_window_days of this TransferConfig.

        The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.

        :param data_refresh_window_days: The data_refresh_window_days of this TransferConfig.
        :type data_refresh_window_days: int
        """

        self._data_refresh_window_days = data_refresh_window_days

    @property
    def data_source_id(self):
        """Gets the data_source_id of this TransferConfig.

        Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list

        :return: The data_source_id of this TransferConfig.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this TransferConfig.

        Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list

        :param data_source_id: The data_source_id of this TransferConfig.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def dataset_region(self):
        """Gets the dataset_region of this TransferConfig.

        Output only. Region in which BigQuery dataset is located.

        :return: The dataset_region of this TransferConfig.
        :rtype: str
        """
        return self._dataset_region

    @dataset_region.setter
    def dataset_region(self, dataset_region):
        """Sets the dataset_region of this TransferConfig.

        Output only. Region in which BigQuery dataset is located.

        :param dataset_region: The dataset_region of this TransferConfig.
        :type dataset_region: str
        """

        self._dataset_region = dataset_region

    @property
    def destination_dataset_id(self):
        """Gets the destination_dataset_id of this TransferConfig.

        The BigQuery target dataset id.

        :return: The destination_dataset_id of this TransferConfig.
        :rtype: str
        """
        return self._destination_dataset_id

    @destination_dataset_id.setter
    def destination_dataset_id(self, destination_dataset_id):
        """Sets the destination_dataset_id of this TransferConfig.

        The BigQuery target dataset id.

        :param destination_dataset_id: The destination_dataset_id of this TransferConfig.
        :type destination_dataset_id: str
        """

        self._destination_dataset_id = destination_dataset_id

    @property
    def disabled(self):
        """Gets the disabled of this TransferConfig.

        Is this config disabled. When set to true, no runs will be scheduled for this transfer config.

        :return: The disabled of this TransferConfig.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this TransferConfig.

        Is this config disabled. When set to true, no runs will be scheduled for this transfer config.

        :param disabled: The disabled of this TransferConfig.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this TransferConfig.

        User specified display name for the data transfer.

        :return: The display_name of this TransferConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TransferConfig.

        User specified display name for the data transfer.

        :param display_name: The display_name of this TransferConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email_preferences(self):
        """Gets the email_preferences of this TransferConfig.


        :return: The email_preferences of this TransferConfig.
        :rtype: EmailPreferences
        """
        return self._email_preferences

    @email_preferences.setter
    def email_preferences(self, email_preferences):
        """Sets the email_preferences of this TransferConfig.


        :param email_preferences: The email_preferences of this TransferConfig.
        :type email_preferences: EmailPreferences
        """

        self._email_preferences = email_preferences

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this TransferConfig.


        :return: The encryption_configuration of this TransferConfig.
        :rtype: EncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this TransferConfig.


        :param encryption_configuration: The encryption_configuration of this TransferConfig.
        :type encryption_configuration: EncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def name(self):
        """Gets the name of this TransferConfig.

        The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.

        :return: The name of this TransferConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransferConfig.

        The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.

        :param name: The name of this TransferConfig.
        :type name: str
        """

        self._name = name

    @property
    def next_run_time(self):
        """Gets the next_run_time of this TransferConfig.

        Output only. Next time when data transfer will run.

        :return: The next_run_time of this TransferConfig.
        :rtype: str
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time):
        """Sets the next_run_time of this TransferConfig.

        Output only. Next time when data transfer will run.

        :param next_run_time: The next_run_time of this TransferConfig.
        :type next_run_time: str
        """

        self._next_run_time = next_run_time

    @property
    def notification_pubsub_topic(self):
        """Gets the notification_pubsub_topic of this TransferConfig.

        Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`

        :return: The notification_pubsub_topic of this TransferConfig.
        :rtype: str
        """
        return self._notification_pubsub_topic

    @notification_pubsub_topic.setter
    def notification_pubsub_topic(self, notification_pubsub_topic):
        """Sets the notification_pubsub_topic of this TransferConfig.

        Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`

        :param notification_pubsub_topic: The notification_pubsub_topic of this TransferConfig.
        :type notification_pubsub_topic: str
        """

        self._notification_pubsub_topic = notification_pubsub_topic

    @property
    def owner_info(self):
        """Gets the owner_info of this TransferConfig.


        :return: The owner_info of this TransferConfig.
        :rtype: UserInfo
        """
        return self._owner_info

    @owner_info.setter
    def owner_info(self, owner_info):
        """Sets the owner_info of this TransferConfig.


        :param owner_info: The owner_info of this TransferConfig.
        :type owner_info: UserInfo
        """

        self._owner_info = owner_info

    @property
    def params(self):
        """Gets the params of this TransferConfig.

        Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq

        :return: The params of this TransferConfig.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this TransferConfig.

        Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq

        :param params: The params of this TransferConfig.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def schedule(self):
        """Gets the schedule of this TransferConfig.

        Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.

        :return: The schedule of this TransferConfig.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TransferConfig.

        Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.

        :param schedule: The schedule of this TransferConfig.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def schedule_options(self):
        """Gets the schedule_options of this TransferConfig.


        :return: The schedule_options of this TransferConfig.
        :rtype: ScheduleOptions
        """
        return self._schedule_options

    @schedule_options.setter
    def schedule_options(self, schedule_options):
        """Sets the schedule_options of this TransferConfig.


        :param schedule_options: The schedule_options of this TransferConfig.
        :type schedule_options: ScheduleOptions
        """

        self._schedule_options = schedule_options

    @property
    def state(self):
        """Gets the state of this TransferConfig.

        Output only. State of the most recently updated transfer run.

        :return: The state of this TransferConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TransferConfig.

        Output only. State of the most recently updated transfer run.

        :param state: The state of this TransferConfig.
        :type state: str
        """
        allowed_values = ["TRANSFER_STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this TransferConfig.

        Output only. Data transfer modification time. Ignored by server on input.

        :return: The update_time of this TransferConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TransferConfig.

        Output only. Data transfer modification time. Ignored by server on input.

        :param update_time: The update_time of this TransferConfig.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user_id(self):
        """Gets the user_id of this TransferConfig.

        Deprecated. Unique ID of the user on whose behalf transfer is done.

        :return: The user_id of this TransferConfig.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TransferConfig.

        Deprecated. Unique ID of the user on whose behalf transfer is done.

        :param user_id: The user_id of this TransferConfig.
        :type user_id: str
        """

        self._user_id = user_id
