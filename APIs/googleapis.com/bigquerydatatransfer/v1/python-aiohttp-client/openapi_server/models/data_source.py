# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_parameter import DataSourceParameter
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_type: str=None, client_id: str=None, data_refresh_type: str=None, data_source_id: str=None, default_data_refresh_window_days: int=None, default_schedule: str=None, description: str=None, display_name: str=None, help_url: str=None, manual_runs_disabled: bool=None, minimum_schedule_interval: str=None, name: str=None, parameters: List[DataSourceParameter]=None, scopes: List[str]=None, supports_custom_schedule: bool=None, supports_multiple_transfers: bool=None, transfer_type: str=None, update_deadline_seconds: int=None):
        """DataSource - a model defined in OpenAPI

        :param authorization_type: The authorization_type of this DataSource.
        :param client_id: The client_id of this DataSource.
        :param data_refresh_type: The data_refresh_type of this DataSource.
        :param data_source_id: The data_source_id of this DataSource.
        :param default_data_refresh_window_days: The default_data_refresh_window_days of this DataSource.
        :param default_schedule: The default_schedule of this DataSource.
        :param description: The description of this DataSource.
        :param display_name: The display_name of this DataSource.
        :param help_url: The help_url of this DataSource.
        :param manual_runs_disabled: The manual_runs_disabled of this DataSource.
        :param minimum_schedule_interval: The minimum_schedule_interval of this DataSource.
        :param name: The name of this DataSource.
        :param parameters: The parameters of this DataSource.
        :param scopes: The scopes of this DataSource.
        :param supports_custom_schedule: The supports_custom_schedule of this DataSource.
        :param supports_multiple_transfers: The supports_multiple_transfers of this DataSource.
        :param transfer_type: The transfer_type of this DataSource.
        :param update_deadline_seconds: The update_deadline_seconds of this DataSource.
        """
        self.openapi_types = {
            'authorization_type': str,
            'client_id': str,
            'data_refresh_type': str,
            'data_source_id': str,
            'default_data_refresh_window_days': int,
            'default_schedule': str,
            'description': str,
            'display_name': str,
            'help_url': str,
            'manual_runs_disabled': bool,
            'minimum_schedule_interval': str,
            'name': str,
            'parameters': List[DataSourceParameter],
            'scopes': List[str],
            'supports_custom_schedule': bool,
            'supports_multiple_transfers': bool,
            'transfer_type': str,
            'update_deadline_seconds': int
        }

        self.attribute_map = {
            'authorization_type': 'authorizationType',
            'client_id': 'clientId',
            'data_refresh_type': 'dataRefreshType',
            'data_source_id': 'dataSourceId',
            'default_data_refresh_window_days': 'defaultDataRefreshWindowDays',
            'default_schedule': 'defaultSchedule',
            'description': 'description',
            'display_name': 'displayName',
            'help_url': 'helpUrl',
            'manual_runs_disabled': 'manualRunsDisabled',
            'minimum_schedule_interval': 'minimumScheduleInterval',
            'name': 'name',
            'parameters': 'parameters',
            'scopes': 'scopes',
            'supports_custom_schedule': 'supportsCustomSchedule',
            'supports_multiple_transfers': 'supportsMultipleTransfers',
            'transfer_type': 'transferType',
            'update_deadline_seconds': 'updateDeadlineSeconds'
        }

        self._authorization_type = authorization_type
        self._client_id = client_id
        self._data_refresh_type = data_refresh_type
        self._data_source_id = data_source_id
        self._default_data_refresh_window_days = default_data_refresh_window_days
        self._default_schedule = default_schedule
        self._description = description
        self._display_name = display_name
        self._help_url = help_url
        self._manual_runs_disabled = manual_runs_disabled
        self._minimum_schedule_interval = minimum_schedule_interval
        self._name = name
        self._parameters = parameters
        self._scopes = scopes
        self._supports_custom_schedule = supports_custom_schedule
        self._supports_multiple_transfers = supports_multiple_transfers
        self._transfer_type = transfer_type
        self._update_deadline_seconds = update_deadline_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource of this DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_type(self):
        """Gets the authorization_type of this DataSource.

        Indicates the type of authorization.

        :return: The authorization_type of this DataSource.
        :rtype: str
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this DataSource.

        Indicates the type of authorization.

        :param authorization_type: The authorization_type of this DataSource.
        :type authorization_type: str
        """
        allowed_values = ["AUTHORIZATION_TYPE_UNSPECIFIED", "AUTHORIZATION_CODE", "GOOGLE_PLUS_AUTHORIZATION_CODE", "FIRST_PARTY_OAUTH"]  # noqa: E501
        if authorization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_type` ({0}), must be one of {1}"
                .format(authorization_type, allowed_values)
            )

        self._authorization_type = authorization_type

    @property
    def client_id(self):
        """Gets the client_id of this DataSource.

        Data source client id which should be used to receive refresh token.

        :return: The client_id of this DataSource.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DataSource.

        Data source client id which should be used to receive refresh token.

        :param client_id: The client_id of this DataSource.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def data_refresh_type(self):
        """Gets the data_refresh_type of this DataSource.

        Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.

        :return: The data_refresh_type of this DataSource.
        :rtype: str
        """
        return self._data_refresh_type

    @data_refresh_type.setter
    def data_refresh_type(self, data_refresh_type):
        """Sets the data_refresh_type of this DataSource.

        Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.

        :param data_refresh_type: The data_refresh_type of this DataSource.
        :type data_refresh_type: str
        """
        allowed_values = ["DATA_REFRESH_TYPE_UNSPECIFIED", "SLIDING_WINDOW", "CUSTOM_SLIDING_WINDOW"]  # noqa: E501
        if data_refresh_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_refresh_type` ({0}), must be one of {1}"
                .format(data_refresh_type, allowed_values)
            )

        self._data_refresh_type = data_refresh_type

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DataSource.

        Data source id.

        :return: The data_source_id of this DataSource.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DataSource.

        Data source id.

        :param data_source_id: The data_source_id of this DataSource.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def default_data_refresh_window_days(self):
        """Gets the default_data_refresh_window_days of this DataSource.

        Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.

        :return: The default_data_refresh_window_days of this DataSource.
        :rtype: int
        """
        return self._default_data_refresh_window_days

    @default_data_refresh_window_days.setter
    def default_data_refresh_window_days(self, default_data_refresh_window_days):
        """Sets the default_data_refresh_window_days of this DataSource.

        Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.

        :param default_data_refresh_window_days: The default_data_refresh_window_days of this DataSource.
        :type default_data_refresh_window_days: int
        """

        self._default_data_refresh_window_days = default_data_refresh_window_days

    @property
    def default_schedule(self):
        """Gets the default_schedule of this DataSource.

        Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.

        :return: The default_schedule of this DataSource.
        :rtype: str
        """
        return self._default_schedule

    @default_schedule.setter
    def default_schedule(self, default_schedule):
        """Sets the default_schedule of this DataSource.

        Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.

        :param default_schedule: The default_schedule of this DataSource.
        :type default_schedule: str
        """

        self._default_schedule = default_schedule

    @property
    def description(self):
        """Gets the description of this DataSource.

        User friendly data source description string.

        :return: The description of this DataSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataSource.

        User friendly data source description string.

        :param description: The description of this DataSource.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this DataSource.

        User friendly data source name.

        :return: The display_name of this DataSource.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DataSource.

        User friendly data source name.

        :param display_name: The display_name of this DataSource.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def help_url(self):
        """Gets the help_url of this DataSource.

        Url for the help document for this data source.

        :return: The help_url of this DataSource.
        :rtype: str
        """
        return self._help_url

    @help_url.setter
    def help_url(self, help_url):
        """Sets the help_url of this DataSource.

        Url for the help document for this data source.

        :param help_url: The help_url of this DataSource.
        :type help_url: str
        """

        self._help_url = help_url

    @property
    def manual_runs_disabled(self):
        """Gets the manual_runs_disabled of this DataSource.

        Disables backfilling and manual run scheduling for the data source.

        :return: The manual_runs_disabled of this DataSource.
        :rtype: bool
        """
        return self._manual_runs_disabled

    @manual_runs_disabled.setter
    def manual_runs_disabled(self, manual_runs_disabled):
        """Sets the manual_runs_disabled of this DataSource.

        Disables backfilling and manual run scheduling for the data source.

        :param manual_runs_disabled: The manual_runs_disabled of this DataSource.
        :type manual_runs_disabled: bool
        """

        self._manual_runs_disabled = manual_runs_disabled

    @property
    def minimum_schedule_interval(self):
        """Gets the minimum_schedule_interval of this DataSource.

        The minimum interval for scheduler to schedule runs.

        :return: The minimum_schedule_interval of this DataSource.
        :rtype: str
        """
        return self._minimum_schedule_interval

    @minimum_schedule_interval.setter
    def minimum_schedule_interval(self, minimum_schedule_interval):
        """Sets the minimum_schedule_interval of this DataSource.

        The minimum interval for scheduler to schedule runs.

        :param minimum_schedule_interval: The minimum_schedule_interval of this DataSource.
        :type minimum_schedule_interval: str
        """

        self._minimum_schedule_interval = minimum_schedule_interval

    @property
    def name(self):
        """Gets the name of this DataSource.

        Output only. Data source resource name.

        :return: The name of this DataSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSource.

        Output only. Data source resource name.

        :param name: The name of this DataSource.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this DataSource.

        Data source parameters.

        :return: The parameters of this DataSource.
        :rtype: List[DataSourceParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DataSource.

        Data source parameters.

        :param parameters: The parameters of this DataSource.
        :type parameters: List[DataSourceParameter]
        """

        self._parameters = parameters

    @property
    def scopes(self):
        """Gets the scopes of this DataSource.

        Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery

        :return: The scopes of this DataSource.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this DataSource.

        Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery

        :param scopes: The scopes of this DataSource.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def supports_custom_schedule(self):
        """Gets the supports_custom_schedule of this DataSource.

        Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule.

        :return: The supports_custom_schedule of this DataSource.
        :rtype: bool
        """
        return self._supports_custom_schedule

    @supports_custom_schedule.setter
    def supports_custom_schedule(self, supports_custom_schedule):
        """Sets the supports_custom_schedule of this DataSource.

        Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule.

        :param supports_custom_schedule: The supports_custom_schedule of this DataSource.
        :type supports_custom_schedule: bool
        """

        self._supports_custom_schedule = supports_custom_schedule

    @property
    def supports_multiple_transfers(self):
        """Gets the supports_multiple_transfers of this DataSource.

        Deprecated. This field has no effect.

        :return: The supports_multiple_transfers of this DataSource.
        :rtype: bool
        """
        return self._supports_multiple_transfers

    @supports_multiple_transfers.setter
    def supports_multiple_transfers(self, supports_multiple_transfers):
        """Sets the supports_multiple_transfers of this DataSource.

        Deprecated. This field has no effect.

        :param supports_multiple_transfers: The supports_multiple_transfers of this DataSource.
        :type supports_multiple_transfers: bool
        """

        self._supports_multiple_transfers = supports_multiple_transfers

    @property
    def transfer_type(self):
        """Gets the transfer_type of this DataSource.

        Deprecated. This field has no effect.

        :return: The transfer_type of this DataSource.
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this DataSource.

        Deprecated. This field has no effect.

        :param transfer_type: The transfer_type of this DataSource.
        :type transfer_type: str
        """
        allowed_values = ["TRANSFER_TYPE_UNSPECIFIED", "BATCH", "STREAMING"]  # noqa: E501
        if transfer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transfer_type` ({0}), must be one of {1}"
                .format(transfer_type, allowed_values)
            )

        self._transfer_type = transfer_type

    @property
    def update_deadline_seconds(self):
        """Gets the update_deadline_seconds of this DataSource.

        The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.

        :return: The update_deadline_seconds of this DataSource.
        :rtype: int
        """
        return self._update_deadline_seconds

    @update_deadline_seconds.setter
    def update_deadline_seconds(self, update_deadline_seconds):
        """Sets the update_deadline_seconds of this DataSource.

        The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.

        :param update_deadline_seconds: The update_deadline_seconds of this DataSource.
        :type update_deadline_seconds: int
        """

        self._update_deadline_seconds = update_deadline_seconds
