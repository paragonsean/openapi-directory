# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_preferences import EmailPreferences
from openapi_server.models.status import Status
from openapi_server import util


class TransferRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_id: str=None, destination_dataset_id: str=None, email_preferences: EmailPreferences=None, end_time: str=None, error_status: Status=None, name: str=None, notification_pubsub_topic: str=None, params: Dict[str, object]=None, run_time: str=None, schedule: str=None, schedule_time: str=None, start_time: str=None, state: str=None, update_time: str=None, user_id: str=None):
        """TransferRun - a model defined in OpenAPI

        :param data_source_id: The data_source_id of this TransferRun.
        :param destination_dataset_id: The destination_dataset_id of this TransferRun.
        :param email_preferences: The email_preferences of this TransferRun.
        :param end_time: The end_time of this TransferRun.
        :param error_status: The error_status of this TransferRun.
        :param name: The name of this TransferRun.
        :param notification_pubsub_topic: The notification_pubsub_topic of this TransferRun.
        :param params: The params of this TransferRun.
        :param run_time: The run_time of this TransferRun.
        :param schedule: The schedule of this TransferRun.
        :param schedule_time: The schedule_time of this TransferRun.
        :param start_time: The start_time of this TransferRun.
        :param state: The state of this TransferRun.
        :param update_time: The update_time of this TransferRun.
        :param user_id: The user_id of this TransferRun.
        """
        self.openapi_types = {
            'data_source_id': str,
            'destination_dataset_id': str,
            'email_preferences': EmailPreferences,
            'end_time': str,
            'error_status': Status,
            'name': str,
            'notification_pubsub_topic': str,
            'params': Dict[str, object],
            'run_time': str,
            'schedule': str,
            'schedule_time': str,
            'start_time': str,
            'state': str,
            'update_time': str,
            'user_id': str
        }

        self.attribute_map = {
            'data_source_id': 'dataSourceId',
            'destination_dataset_id': 'destinationDatasetId',
            'email_preferences': 'emailPreferences',
            'end_time': 'endTime',
            'error_status': 'errorStatus',
            'name': 'name',
            'notification_pubsub_topic': 'notificationPubsubTopic',
            'params': 'params',
            'run_time': 'runTime',
            'schedule': 'schedule',
            'schedule_time': 'scheduleTime',
            'start_time': 'startTime',
            'state': 'state',
            'update_time': 'updateTime',
            'user_id': 'userId'
        }

        self._data_source_id = data_source_id
        self._destination_dataset_id = destination_dataset_id
        self._email_preferences = email_preferences
        self._end_time = end_time
        self._error_status = error_status
        self._name = name
        self._notification_pubsub_topic = notification_pubsub_topic
        self._params = params
        self._run_time = run_time
        self._schedule = schedule
        self._schedule_time = schedule_time
        self._start_time = start_time
        self._state = state
        self._update_time = update_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferRun of this TransferRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this TransferRun.

        Output only. Data source id.

        :return: The data_source_id of this TransferRun.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this TransferRun.

        Output only. Data source id.

        :param data_source_id: The data_source_id of this TransferRun.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def destination_dataset_id(self):
        """Gets the destination_dataset_id of this TransferRun.

        Output only. The BigQuery target dataset id.

        :return: The destination_dataset_id of this TransferRun.
        :rtype: str
        """
        return self._destination_dataset_id

    @destination_dataset_id.setter
    def destination_dataset_id(self, destination_dataset_id):
        """Sets the destination_dataset_id of this TransferRun.

        Output only. The BigQuery target dataset id.

        :param destination_dataset_id: The destination_dataset_id of this TransferRun.
        :type destination_dataset_id: str
        """

        self._destination_dataset_id = destination_dataset_id

    @property
    def email_preferences(self):
        """Gets the email_preferences of this TransferRun.


        :return: The email_preferences of this TransferRun.
        :rtype: EmailPreferences
        """
        return self._email_preferences

    @email_preferences.setter
    def email_preferences(self, email_preferences):
        """Sets the email_preferences of this TransferRun.


        :param email_preferences: The email_preferences of this TransferRun.
        :type email_preferences: EmailPreferences
        """

        self._email_preferences = email_preferences

    @property
    def end_time(self):
        """Gets the end_time of this TransferRun.

        Output only. Time when transfer run ended. Parameter ignored by server for input requests.

        :return: The end_time of this TransferRun.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TransferRun.

        Output only. Time when transfer run ended. Parameter ignored by server for input requests.

        :param end_time: The end_time of this TransferRun.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error_status(self):
        """Gets the error_status of this TransferRun.


        :return: The error_status of this TransferRun.
        :rtype: Status
        """
        return self._error_status

    @error_status.setter
    def error_status(self, error_status):
        """Sets the error_status of this TransferRun.


        :param error_status: The error_status of this TransferRun.
        :type error_status: Status
        """

        self._error_status = error_status

    @property
    def name(self):
        """Gets the name of this TransferRun.

        The resource name of the transfer run. Transfer run names have the form `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The name is ignored when creating a transfer run.

        :return: The name of this TransferRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransferRun.

        The resource name of the transfer run. Transfer run names have the form `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The name is ignored when creating a transfer run.

        :param name: The name of this TransferRun.
        :type name: str
        """

        self._name = name

    @property
    def notification_pubsub_topic(self):
        """Gets the notification_pubsub_topic of this TransferRun.

        Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`

        :return: The notification_pubsub_topic of this TransferRun.
        :rtype: str
        """
        return self._notification_pubsub_topic

    @notification_pubsub_topic.setter
    def notification_pubsub_topic(self, notification_pubsub_topic):
        """Sets the notification_pubsub_topic of this TransferRun.

        Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`

        :param notification_pubsub_topic: The notification_pubsub_topic of this TransferRun.
        :type notification_pubsub_topic: str
        """

        self._notification_pubsub_topic = notification_pubsub_topic

    @property
    def params(self):
        """Gets the params of this TransferRun.

        Output only. Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq

        :return: The params of this TransferRun.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this TransferRun.

        Output only. Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq

        :param params: The params of this TransferRun.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def run_time(self):
        """Gets the run_time of this TransferRun.

        For batch transfer runs, specifies the date and time of the data should be ingested.

        :return: The run_time of this TransferRun.
        :rtype: str
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this TransferRun.

        For batch transfer runs, specifies the date and time of the data should be ingested.

        :param run_time: The run_time of this TransferRun.
        :type run_time: str
        """

        self._run_time = run_time

    @property
    def schedule(self):
        """Gets the schedule of this TransferRun.

        Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so `schedule_time` doesn't always match this.

        :return: The schedule of this TransferRun.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TransferRun.

        Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so `schedule_time` doesn't always match this.

        :param schedule: The schedule of this TransferRun.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def schedule_time(self):
        """Gets the schedule_time of this TransferRun.

        Minimum time after which a transfer run can be started.

        :return: The schedule_time of this TransferRun.
        :rtype: str
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this TransferRun.

        Minimum time after which a transfer run can be started.

        :param schedule_time: The schedule_time of this TransferRun.
        :type schedule_time: str
        """

        self._schedule_time = schedule_time

    @property
    def start_time(self):
        """Gets the start_time of this TransferRun.

        Output only. Time when transfer run was started. Parameter ignored by server for input requests.

        :return: The start_time of this TransferRun.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TransferRun.

        Output only. Time when transfer run was started. Parameter ignored by server for input requests.

        :param start_time: The start_time of this TransferRun.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this TransferRun.

        Data transfer run state. Ignored for input requests.

        :return: The state of this TransferRun.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TransferRun.

        Data transfer run state. Ignored for input requests.

        :param state: The state of this TransferRun.
        :type state: str
        """
        allowed_values = ["TRANSFER_STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this TransferRun.

        Output only. Last time the data transfer run state was updated.

        :return: The update_time of this TransferRun.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TransferRun.

        Output only. Last time the data transfer run state was updated.

        :param update_time: The update_time of this TransferRun.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user_id(self):
        """Gets the user_id of this TransferRun.

        Deprecated. Unique ID of the user on whose behalf transfer is done.

        :return: The user_id of this TransferRun.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TransferRun.

        Deprecated. Unique ID of the user on whose behalf transfer is done.

        :param user_id: The user_id of this TransferRun.
        :type user_id: str
        """

        self._user_id = user_id
