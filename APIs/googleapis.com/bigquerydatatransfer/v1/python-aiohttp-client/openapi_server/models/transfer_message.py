# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_text: str=None, message_time: str=None, severity: str=None):
        """TransferMessage - a model defined in OpenAPI

        :param message_text: The message_text of this TransferMessage.
        :param message_time: The message_time of this TransferMessage.
        :param severity: The severity of this TransferMessage.
        """
        self.openapi_types = {
            'message_text': str,
            'message_time': str,
            'severity': str
        }

        self.attribute_map = {
            'message_text': 'messageText',
            'message_time': 'messageTime',
            'severity': 'severity'
        }

        self._message_text = message_text
        self._message_time = message_time
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferMessage of this TransferMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_text(self):
        """Gets the message_text of this TransferMessage.

        Message text.

        :return: The message_text of this TransferMessage.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this TransferMessage.

        Message text.

        :param message_text: The message_text of this TransferMessage.
        :type message_text: str
        """

        self._message_text = message_text

    @property
    def message_time(self):
        """Gets the message_time of this TransferMessage.

        Time when message was logged.

        :return: The message_time of this TransferMessage.
        :rtype: str
        """
        return self._message_time

    @message_time.setter
    def message_time(self, message_time):
        """Sets the message_time of this TransferMessage.

        Time when message was logged.

        :param message_time: The message_time of this TransferMessage.
        :type message_time: str
        """

        self._message_time = message_time

    @property
    def severity(self):
        """Gets the severity of this TransferMessage.

        Message severity.

        :return: The severity of this TransferMessage.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TransferMessage.

        Message severity.

        :param severity: The severity of this TransferMessage.
        :type severity: str
        """
        allowed_values = ["MESSAGE_SEVERITY_UNSPECIFIED", "INFO", "WARNING", "ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
