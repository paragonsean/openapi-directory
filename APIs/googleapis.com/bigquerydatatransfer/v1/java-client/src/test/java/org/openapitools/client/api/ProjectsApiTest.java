/*
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckValidCredsResponse;
import org.openapitools.client.model.EnrollDataSourcesRequest;
import org.openapitools.client.model.ListDataSourcesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListTransferConfigsResponse;
import org.openapitools.client.model.ListTransferLogsResponse;
import org.openapitools.client.model.ListTransferRunsResponse;
import org.openapitools.client.model.ScheduleTransferRunsRequest;
import org.openapitools.client.model.ScheduleTransferRunsResponse;
import org.openapitools.client.model.StartManualTransferRunsRequest;
import org.openapitools.client.model.StartManualTransferRunsResponse;
import org.openapitools.client.model.TransferConfig;
import org.openapitools.client.model.TransferRun;
import org.openapitools.client.model.UnenrollDataSourcesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Returns true if valid credentials exist for the given data source and requesting user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CheckValidCredsResponse response = api.bigquerydatatransferProjectsLocationsDataSourcesCheckValidCreds(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists supported data sources and returns their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsLocationsDataSourcesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDataSourcesResponse response = api.bigquerydatatransferProjectsLocationsDataSourcesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsLocationsEnrollDataSourcesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EnrollDataSourcesRequest enrollDataSourcesRequest = null;
        Object response = api.bigquerydatatransferProjectsLocationsEnrollDataSources(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enrollDataSourcesRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.bigquerydatatransferProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Unenroll data sources in a user project. This allows users to remove transfer configurations for these data sources. They will no longer appear in the ListDataSources RPC and will also no longer appear in the [BigQuery UI](https://console.cloud.google.com/bigquery). Data transfers configurations of unenrolled data sources will not be scheduled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsLocationsUnenrollDataSourcesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnenrollDataSourcesRequest unenrollDataSourcesRequest = null;
        Object response = api.bigquerydatatransferProjectsLocationsUnenrollDataSources(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unenrollDataSourcesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new data transfer configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String authorizationCode = null;
        String serviceAccountName = null;
        String versionInfo = null;
        TransferConfig transferConfig = null;
        TransferConfig response = api.bigquerydatatransferProjectsTransferConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, authorizationCode, serviceAccountName, versionInfo, transferConfig);
        // TODO: test validations
    }

    /**
     * Returns information about all transfer configs owned by a project in the specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> dataSourceIds = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTransferConfigsResponse response = api.bigquerydatatransferProjectsTransferConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataSourceIds, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a data transfer configuration. All fields must be set, even if they are not updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String authorizationCode = null;
        String serviceAccountName = null;
        String updateMask = null;
        String versionInfo = null;
        TransferConfig transferConfig = null;
        TransferConfig response = api.bigquerydatatransferProjectsTransferConfigsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, authorizationCode, serviceAccountName, updateMask, versionInfo, transferConfig);
        // TODO: test validations
    }

    /**
     * Deletes the specified transfer run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsRunsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.bigquerydatatransferProjectsTransferConfigsRunsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns information about the particular transfer run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsRunsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TransferRun response = api.bigquerydatatransferProjectsTransferConfigsRunsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns information about running and completed transfer runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsRunsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String runAttempt = null;
        List<String> states = null;
        ListTransferRunsResponse response = api.bigquerydatatransferProjectsTransferConfigsRunsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, runAttempt, states);
        // TODO: test validations
    }

    /**
     * Returns log messages for the transfer run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsRunsTransferLogsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> messageTypes = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTransferLogsResponse response = api.bigquerydatatransferProjectsTransferConfigsRunsTransferLogsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, messageTypes, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsScheduleRunsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ScheduleTransferRunsRequest scheduleTransferRunsRequest = null;
        ScheduleTransferRunsResponse response = api.bigquerydatatransferProjectsTransferConfigsScheduleRuns(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, scheduleTransferRunsRequest);
        // TODO: test validations
    }

    /**
     * Start manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigquerydatatransferProjectsTransferConfigsStartManualRunsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartManualTransferRunsRequest startManualTransferRunsRequest = null;
        StartManualTransferRunsResponse response = api.bigquerydatatransferProjectsTransferConfigsStartManualRuns(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startManualTransferRunsRequest);
        // TODO: test validations
    }

}
