/*
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A parameter used to define custom fields in a data source definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.654289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSourceParameter {
  public static final String SERIALIZED_NAME_ALLOWED_VALUES = "allowedValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUES)
  private List<String> allowedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<DataSourceParameter> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMMUTABLE = "immutable";
  @SerializedName(SERIALIZED_NAME_IMMUTABLE)
  private Boolean immutable;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Double maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Double minValue;

  public static final String SERIALIZED_NAME_PARAM_ID = "paramId";
  @SerializedName(SERIALIZED_NAME_PARAM_ID)
  private String paramId;

  public static final String SERIALIZED_NAME_RECURSE = "recurse";
  @SerializedName(SERIALIZED_NAME_RECURSE)
  private Boolean recurse;

  public static final String SERIALIZED_NAME_REPEATED = "repeated";
  @SerializedName(SERIALIZED_NAME_REPEATED)
  private Boolean repeated;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  /**
   * Parameter type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    STRING("STRING"),
    
    INTEGER("INTEGER"),
    
    DOUBLE("DOUBLE"),
    
    BOOLEAN("BOOLEAN"),
    
    RECORD("RECORD"),
    
    PLUS_PAGE("PLUS_PAGE"),
    
    LIST("LIST");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALIDATION_DESCRIPTION = "validationDescription";
  @SerializedName(SERIALIZED_NAME_VALIDATION_DESCRIPTION)
  private String validationDescription;

  public static final String SERIALIZED_NAME_VALIDATION_HELP_URL = "validationHelpUrl";
  @SerializedName(SERIALIZED_NAME_VALIDATION_HELP_URL)
  private String validationHelpUrl;

  public static final String SERIALIZED_NAME_VALIDATION_REGEX = "validationRegex";
  @SerializedName(SERIALIZED_NAME_VALIDATION_REGEX)
  private String validationRegex;

  public DataSourceParameter() {
  }

  public DataSourceParameter allowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public DataSourceParameter addAllowedValuesItem(String allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

  /**
   * All possible values for the parameter.
   * @return allowedValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
  }


  public DataSourceParameter deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * If true, it should not be used in new transfers, and it should not be visible to users.
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public DataSourceParameter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Parameter description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DataSourceParameter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Parameter display name in the user interface.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DataSourceParameter fields(List<DataSourceParameter> fields) {
    this.fields = fields;
    return this;
  }

  public DataSourceParameter addFieldsItem(DataSourceParameter fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<DataSourceParameter> getFields() {
    return fields;
  }

  public void setFields(List<DataSourceParameter> fields) {
    this.fields = fields;
  }


  public DataSourceParameter immutable(Boolean immutable) {
    this.immutable = immutable;
    return this;
  }

  /**
   * Cannot be changed after initial creation.
   * @return immutable
   */
  @javax.annotation.Nullable
  public Boolean getImmutable() {
    return immutable;
  }

  public void setImmutable(Boolean immutable) {
    this.immutable = immutable;
  }


  public DataSourceParameter maxValue(Double maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * For integer and double values specifies maximum allowed value.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Double getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Double maxValue) {
    this.maxValue = maxValue;
  }


  public DataSourceParameter minValue(Double minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * For integer and double values specifies minimum allowed value.
   * @return minValue
   */
  @javax.annotation.Nullable
  public Double getMinValue() {
    return minValue;
  }

  public void setMinValue(Double minValue) {
    this.minValue = minValue;
  }


  public DataSourceParameter paramId(String paramId) {
    this.paramId = paramId;
    return this;
  }

  /**
   * Parameter identifier.
   * @return paramId
   */
  @javax.annotation.Nullable
  public String getParamId() {
    return paramId;
  }

  public void setParamId(String paramId) {
    this.paramId = paramId;
  }


  public DataSourceParameter recurse(Boolean recurse) {
    this.recurse = recurse;
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return recurse
   */
  @javax.annotation.Nullable
  public Boolean getRecurse() {
    return recurse;
  }

  public void setRecurse(Boolean recurse) {
    this.recurse = recurse;
  }


  public DataSourceParameter repeated(Boolean repeated) {
    this.repeated = repeated;
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return repeated
   */
  @javax.annotation.Nullable
  public Boolean getRepeated() {
    return repeated;
  }

  public void setRepeated(Boolean repeated) {
    this.repeated = repeated;
  }


  public DataSourceParameter required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Is parameter required.
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public DataSourceParameter type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Parameter type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DataSourceParameter validationDescription(String validationDescription) {
    this.validationDescription = validationDescription;
    return this;
  }

  /**
   * Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.
   * @return validationDescription
   */
  @javax.annotation.Nullable
  public String getValidationDescription() {
    return validationDescription;
  }

  public void setValidationDescription(String validationDescription) {
    this.validationDescription = validationDescription;
  }


  public DataSourceParameter validationHelpUrl(String validationHelpUrl) {
    this.validationHelpUrl = validationHelpUrl;
    return this;
  }

  /**
   * URL to a help document to further explain the naming requirements.
   * @return validationHelpUrl
   */
  @javax.annotation.Nullable
  public String getValidationHelpUrl() {
    return validationHelpUrl;
  }

  public void setValidationHelpUrl(String validationHelpUrl) {
    this.validationHelpUrl = validationHelpUrl;
  }


  public DataSourceParameter validationRegex(String validationRegex) {
    this.validationRegex = validationRegex;
    return this;
  }

  /**
   * Regular expression which can be used for parameter validation.
   * @return validationRegex
   */
  @javax.annotation.Nullable
  public String getValidationRegex() {
    return validationRegex;
  }

  public void setValidationRegex(String validationRegex) {
    this.validationRegex = validationRegex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceParameter dataSourceParameter = (DataSourceParameter) o;
    return Objects.equals(this.allowedValues, dataSourceParameter.allowedValues) &&
        Objects.equals(this.deprecated, dataSourceParameter.deprecated) &&
        Objects.equals(this.description, dataSourceParameter.description) &&
        Objects.equals(this.displayName, dataSourceParameter.displayName) &&
        Objects.equals(this.fields, dataSourceParameter.fields) &&
        Objects.equals(this.immutable, dataSourceParameter.immutable) &&
        Objects.equals(this.maxValue, dataSourceParameter.maxValue) &&
        Objects.equals(this.minValue, dataSourceParameter.minValue) &&
        Objects.equals(this.paramId, dataSourceParameter.paramId) &&
        Objects.equals(this.recurse, dataSourceParameter.recurse) &&
        Objects.equals(this.repeated, dataSourceParameter.repeated) &&
        Objects.equals(this.required, dataSourceParameter.required) &&
        Objects.equals(this.type, dataSourceParameter.type) &&
        Objects.equals(this.validationDescription, dataSourceParameter.validationDescription) &&
        Objects.equals(this.validationHelpUrl, dataSourceParameter.validationHelpUrl) &&
        Objects.equals(this.validationRegex, dataSourceParameter.validationRegex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedValues, deprecated, description, displayName, fields, immutable, maxValue, minValue, paramId, recurse, repeated, required, type, validationDescription, validationHelpUrl, validationRegex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceParameter {\n");
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    immutable: ").append(toIndentedString(immutable)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    paramId: ").append(toIndentedString(paramId)).append("\n");
    sb.append("    recurse: ").append(toIndentedString(recurse)).append("\n");
    sb.append("    repeated: ").append(toIndentedString(repeated)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationDescription: ").append(toIndentedString(validationDescription)).append("\n");
    sb.append("    validationHelpUrl: ").append(toIndentedString(validationHelpUrl)).append("\n");
    sb.append("    validationRegex: ").append(toIndentedString(validationRegex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedValues");
    openapiFields.add("deprecated");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("fields");
    openapiFields.add("immutable");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("paramId");
    openapiFields.add("recurse");
    openapiFields.add("repeated");
    openapiFields.add("required");
    openapiFields.add("type");
    openapiFields.add("validationDescription");
    openapiFields.add("validationHelpUrl");
    openapiFields.add("validationRegex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSourceParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSourceParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceParameter is not found in the empty JSON string", DataSourceParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSourceParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedValues") != null && !jsonObj.get("allowedValues").isJsonNull() && !jsonObj.get("allowedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValues").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            DataSourceParameter.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("paramId") != null && !jsonObj.get("paramId").isJsonNull()) && !jsonObj.get("paramId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("validationDescription") != null && !jsonObj.get("validationDescription").isJsonNull()) && !jsonObj.get("validationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationDescription").toString()));
      }
      if ((jsonObj.get("validationHelpUrl") != null && !jsonObj.get("validationHelpUrl").isJsonNull()) && !jsonObj.get("validationHelpUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationHelpUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationHelpUrl").toString()));
      }
      if ((jsonObj.get("validationRegex") != null && !jsonObj.get("validationRegex").isJsonNull()) && !jsonObj.get("validationRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationRegex").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceParameter>() {
           @Override
           public void write(JsonWriter out, DataSourceParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSourceParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSourceParameter
   * @throws IOException if the JSON string is invalid with respect to DataSourceParameter
   */
  public static DataSourceParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceParameter.class);
  }

  /**
   * Convert an instance of DataSourceParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

