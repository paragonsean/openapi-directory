/*
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EmailPreferences;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a data transfer run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.654289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferRun {
  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_DESTINATION_DATASET_ID = "destinationDatasetId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DATASET_ID)
  private String destinationDatasetId;

  public static final String SERIALIZED_NAME_EMAIL_PREFERENCES = "emailPreferences";
  @SerializedName(SERIALIZED_NAME_EMAIL_PREFERENCES)
  private EmailPreferences emailPreferences;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ERROR_STATUS = "errorStatus";
  @SerializedName(SERIALIZED_NAME_ERROR_STATUS)
  private Status errorStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_PUBSUB_TOPIC = "notificationPubsubTopic";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PUBSUB_TOPIC)
  private String notificationPubsubTopic;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, Object> params = new HashMap<>();

  public static final String SERIALIZED_NAME_RUN_TIME = "runTime";
  @SerializedName(SERIALIZED_NAME_RUN_TIME)
  private String runTime;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_SCHEDULE_TIME = "scheduleTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TIME)
  private String scheduleTime;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Data transfer run state. Ignored for input requests.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    TRANSFER_STATE_UNSPECIFIED("TRANSFER_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public TransferRun() {
  }

  public TransferRun(
     String dataSourceId, 
     String destinationDatasetId, 
     String endTime, 
     String notificationPubsubTopic, 
     Map<String, Object> params, 
     String schedule, 
     String startTime, 
     String updateTime
  ) {
    this();
    this.dataSourceId = dataSourceId;
    this.destinationDatasetId = destinationDatasetId;
    this.endTime = endTime;
    this.notificationPubsubTopic = notificationPubsubTopic;
    this.params = params;
    this.schedule = schedule;
    this.startTime = startTime;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Data source id.
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }



  /**
   * Output only. The BigQuery target dataset id.
   * @return destinationDatasetId
   */
  @javax.annotation.Nullable
  public String getDestinationDatasetId() {
    return destinationDatasetId;
  }



  public TransferRun emailPreferences(EmailPreferences emailPreferences) {
    this.emailPreferences = emailPreferences;
    return this;
  }

  /**
   * Get emailPreferences
   * @return emailPreferences
   */
  @javax.annotation.Nullable
  public EmailPreferences getEmailPreferences() {
    return emailPreferences;
  }

  public void setEmailPreferences(EmailPreferences emailPreferences) {
    this.emailPreferences = emailPreferences;
  }


  /**
   * Output only. Time when transfer run ended. Parameter ignored by server for input requests.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  public TransferRun errorStatus(Status errorStatus) {
    this.errorStatus = errorStatus;
    return this;
  }

  /**
   * Get errorStatus
   * @return errorStatus
   */
  @javax.annotation.Nullable
  public Status getErrorStatus() {
    return errorStatus;
  }

  public void setErrorStatus(Status errorStatus) {
    this.errorStatus = errorStatus;
  }


  public TransferRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the transfer run. Transfer run names have the form &#x60;projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}&#x60;. The name is ignored when creating a transfer run.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: &#x60;projects/{project_id}/topics/{topic_id}&#x60;
   * @return notificationPubsubTopic
   */
  @javax.annotation.Nullable
  public String getNotificationPubsubTopic() {
    return notificationPubsubTopic;
  }



  /**
   * Output only. Parameters specific to each data source. For more information see the bq tab in the &#39;Setting up a data transfer&#39; section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
   * @return params
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParams() {
    return params;
  }



  public TransferRun runTime(String runTime) {
    this.runTime = runTime;
    return this;
  }

  /**
   * For batch transfer runs, specifies the date and time of the data should be ingested.
   * @return runTime
   */
  @javax.annotation.Nullable
  public String getRunTime() {
    return runTime;
  }

  public void setRunTime(String runTime) {
    this.runTime = runTime;
  }


  /**
   * Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so &#x60;schedule_time&#x60; doesn&#39;t always match this.
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }



  public TransferRun scheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
    return this;
  }

  /**
   * Minimum time after which a transfer run can be started.
   * @return scheduleTime
   */
  @javax.annotation.Nullable
  public String getScheduleTime() {
    return scheduleTime;
  }

  public void setScheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
  }


  /**
   * Output only. Time when transfer run was started. Parameter ignored by server for input requests.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  public TransferRun state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Data transfer run state. Ignored for input requests.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  /**
   * Output only. Last time the data transfer run state was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public TransferRun userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferRun transferRun = (TransferRun) o;
    return Objects.equals(this.dataSourceId, transferRun.dataSourceId) &&
        Objects.equals(this.destinationDatasetId, transferRun.destinationDatasetId) &&
        Objects.equals(this.emailPreferences, transferRun.emailPreferences) &&
        Objects.equals(this.endTime, transferRun.endTime) &&
        Objects.equals(this.errorStatus, transferRun.errorStatus) &&
        Objects.equals(this.name, transferRun.name) &&
        Objects.equals(this.notificationPubsubTopic, transferRun.notificationPubsubTopic) &&
        Objects.equals(this.params, transferRun.params) &&
        Objects.equals(this.runTime, transferRun.runTime) &&
        Objects.equals(this.schedule, transferRun.schedule) &&
        Objects.equals(this.scheduleTime, transferRun.scheduleTime) &&
        Objects.equals(this.startTime, transferRun.startTime) &&
        Objects.equals(this.state, transferRun.state) &&
        Objects.equals(this.updateTime, transferRun.updateTime) &&
        Objects.equals(this.userId, transferRun.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceId, destinationDatasetId, emailPreferences, endTime, errorStatus, name, notificationPubsubTopic, params, runTime, schedule, scheduleTime, startTime, state, updateTime, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferRun {\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    destinationDatasetId: ").append(toIndentedString(destinationDatasetId)).append("\n");
    sb.append("    emailPreferences: ").append(toIndentedString(emailPreferences)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorStatus: ").append(toIndentedString(errorStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationPubsubTopic: ").append(toIndentedString(notificationPubsubTopic)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    runTime: ").append(toIndentedString(runTime)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    scheduleTime: ").append(toIndentedString(scheduleTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceId");
    openapiFields.add("destinationDatasetId");
    openapiFields.add("emailPreferences");
    openapiFields.add("endTime");
    openapiFields.add("errorStatus");
    openapiFields.add("name");
    openapiFields.add("notificationPubsubTopic");
    openapiFields.add("params");
    openapiFields.add("runTime");
    openapiFields.add("schedule");
    openapiFields.add("scheduleTime");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferRun is not found in the empty JSON string", TransferRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if ((jsonObj.get("destinationDatasetId") != null && !jsonObj.get("destinationDatasetId").isJsonNull()) && !jsonObj.get("destinationDatasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationDatasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationDatasetId").toString()));
      }
      // validate the optional field `emailPreferences`
      if (jsonObj.get("emailPreferences") != null && !jsonObj.get("emailPreferences").isJsonNull()) {
        EmailPreferences.validateJsonElement(jsonObj.get("emailPreferences"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `errorStatus`
      if (jsonObj.get("errorStatus") != null && !jsonObj.get("errorStatus").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("errorStatus"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notificationPubsubTopic") != null && !jsonObj.get("notificationPubsubTopic").isJsonNull()) && !jsonObj.get("notificationPubsubTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationPubsubTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationPubsubTopic").toString()));
      }
      if ((jsonObj.get("runTime") != null && !jsonObj.get("runTime").isJsonNull()) && !jsonObj.get("runTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runTime").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if ((jsonObj.get("scheduleTime") != null && !jsonObj.get("scheduleTime").isJsonNull()) && !jsonObj.get("scheduleTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleTime").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferRun>() {
           @Override
           public void write(JsonWriter out, TransferRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferRun
   * @throws IOException if the JSON string is invalid with respect to TransferRun
   */
  public static TransferRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferRun.class);
  }

  /**
   * Convert an instance of TransferRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

