/*
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataSourceParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the properties and custom parameters for a data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.654289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSource {
  /**
   * Indicates the type of authorization.
   */
  @JsonAdapter(AuthorizationTypeEnum.Adapter.class)
  public enum AuthorizationTypeEnum {
    AUTHORIZATION_TYPE_UNSPECIFIED("AUTHORIZATION_TYPE_UNSPECIFIED"),
    
    AUTHORIZATION_CODE("AUTHORIZATION_CODE"),
    
    GOOGLE_PLUS_AUTHORIZATION_CODE("GOOGLE_PLUS_AUTHORIZATION_CODE"),
    
    FIRST_PARTY_OAUTH("FIRST_PARTY_OAUTH");

    private String value;

    AuthorizationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationTypeEnum fromValue(String value) {
      for (AuthorizationTypeEnum b : AuthorizationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "authorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  private AuthorizationTypeEnum authorizationType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  /**
   * Specifies whether the data source supports automatic data refresh for the past few days, and how it&#39;s supported. For some data sources, data might not be complete until a few days later, so it&#39;s useful to refresh data automatically.
   */
  @JsonAdapter(DataRefreshTypeEnum.Adapter.class)
  public enum DataRefreshTypeEnum {
    DATA_REFRESH_TYPE_UNSPECIFIED("DATA_REFRESH_TYPE_UNSPECIFIED"),
    
    SLIDING_WINDOW("SLIDING_WINDOW"),
    
    CUSTOM_SLIDING_WINDOW("CUSTOM_SLIDING_WINDOW");

    private String value;

    DataRefreshTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataRefreshTypeEnum fromValue(String value) {
      for (DataRefreshTypeEnum b : DataRefreshTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataRefreshTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataRefreshTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataRefreshTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataRefreshTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataRefreshTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_REFRESH_TYPE = "dataRefreshType";
  @SerializedName(SERIALIZED_NAME_DATA_REFRESH_TYPE)
  private DataRefreshTypeEnum dataRefreshType;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_DEFAULT_DATA_REFRESH_WINDOW_DAYS = "defaultDataRefreshWindowDays";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DATA_REFRESH_WINDOW_DAYS)
  private Integer defaultDataRefreshWindowDays;

  public static final String SERIALIZED_NAME_DEFAULT_SCHEDULE = "defaultSchedule";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SCHEDULE)
  private String defaultSchedule;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HELP_URL = "helpUrl";
  @SerializedName(SERIALIZED_NAME_HELP_URL)
  private String helpUrl;

  public static final String SERIALIZED_NAME_MANUAL_RUNS_DISABLED = "manualRunsDisabled";
  @SerializedName(SERIALIZED_NAME_MANUAL_RUNS_DISABLED)
  private Boolean manualRunsDisabled;

  public static final String SERIALIZED_NAME_MINIMUM_SCHEDULE_INTERVAL = "minimumScheduleInterval";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SCHEDULE_INTERVAL)
  private String minimumScheduleInterval;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<DataSourceParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTS_CUSTOM_SCHEDULE = "supportsCustomSchedule";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_CUSTOM_SCHEDULE)
  private Boolean supportsCustomSchedule;

  public static final String SERIALIZED_NAME_SUPPORTS_MULTIPLE_TRANSFERS = "supportsMultipleTransfers";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MULTIPLE_TRANSFERS)
  private Boolean supportsMultipleTransfers;

  /**
   * Deprecated. This field has no effect.
   */
  @JsonAdapter(TransferTypeEnum.Adapter.class)
  public enum TransferTypeEnum {
    TRANSFER_TYPE_UNSPECIFIED("TRANSFER_TYPE_UNSPECIFIED"),
    
    BATCH("BATCH"),
    
    STREAMING("STREAMING");

    private String value;

    TransferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferTypeEnum fromValue(String value) {
      for (TransferTypeEnum b : TransferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_TYPE = "transferType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE)
  private TransferTypeEnum transferType;

  public static final String SERIALIZED_NAME_UPDATE_DEADLINE_SECONDS = "updateDeadlineSeconds";
  @SerializedName(SERIALIZED_NAME_UPDATE_DEADLINE_SECONDS)
  private Integer updateDeadlineSeconds;

  public DataSource() {
  }

  public DataSource(
     String name
  ) {
    this();
    this.name = name;
  }

  public DataSource authorizationType(AuthorizationTypeEnum authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * Indicates the type of authorization.
   * @return authorizationType
   */
  @javax.annotation.Nullable
  public AuthorizationTypeEnum getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(AuthorizationTypeEnum authorizationType) {
    this.authorizationType = authorizationType;
  }


  public DataSource clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Data source client id which should be used to receive refresh token.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public DataSource dataRefreshType(DataRefreshTypeEnum dataRefreshType) {
    this.dataRefreshType = dataRefreshType;
    return this;
  }

  /**
   * Specifies whether the data source supports automatic data refresh for the past few days, and how it&#39;s supported. For some data sources, data might not be complete until a few days later, so it&#39;s useful to refresh data automatically.
   * @return dataRefreshType
   */
  @javax.annotation.Nullable
  public DataRefreshTypeEnum getDataRefreshType() {
    return dataRefreshType;
  }

  public void setDataRefreshType(DataRefreshTypeEnum dataRefreshType) {
    this.dataRefreshType = dataRefreshType;
  }


  public DataSource dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Data source id.
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public DataSource defaultDataRefreshWindowDays(Integer defaultDataRefreshWindowDays) {
    this.defaultDataRefreshWindowDays = defaultDataRefreshWindowDays;
    return this;
  }

  /**
   * Default data refresh window on days. Only meaningful when &#x60;data_refresh_type&#x60; &#x3D; &#x60;SLIDING_WINDOW&#x60;.
   * @return defaultDataRefreshWindowDays
   */
  @javax.annotation.Nullable
  public Integer getDefaultDataRefreshWindowDays() {
    return defaultDataRefreshWindowDays;
  }

  public void setDefaultDataRefreshWindowDays(Integer defaultDataRefreshWindowDays) {
    this.defaultDataRefreshWindowDays = defaultDataRefreshWindowDays;
  }


  public DataSource defaultSchedule(String defaultSchedule) {
    this.defaultSchedule = defaultSchedule;
    return this;
  }

  /**
   * Default data transfer schedule. Examples of valid schedules include: &#x60;1st,3rd monday of month 15:30&#x60;, &#x60;every wed,fri of jan,jun 13:15&#x60;, and &#x60;first sunday of quarter 00:00&#x60;.
   * @return defaultSchedule
   */
  @javax.annotation.Nullable
  public String getDefaultSchedule() {
    return defaultSchedule;
  }

  public void setDefaultSchedule(String defaultSchedule) {
    this.defaultSchedule = defaultSchedule;
  }


  public DataSource description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User friendly data source description string.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DataSource displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User friendly data source name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DataSource helpUrl(String helpUrl) {
    this.helpUrl = helpUrl;
    return this;
  }

  /**
   * Url for the help document for this data source.
   * @return helpUrl
   */
  @javax.annotation.Nullable
  public String getHelpUrl() {
    return helpUrl;
  }

  public void setHelpUrl(String helpUrl) {
    this.helpUrl = helpUrl;
  }


  public DataSource manualRunsDisabled(Boolean manualRunsDisabled) {
    this.manualRunsDisabled = manualRunsDisabled;
    return this;
  }

  /**
   * Disables backfilling and manual run scheduling for the data source.
   * @return manualRunsDisabled
   */
  @javax.annotation.Nullable
  public Boolean getManualRunsDisabled() {
    return manualRunsDisabled;
  }

  public void setManualRunsDisabled(Boolean manualRunsDisabled) {
    this.manualRunsDisabled = manualRunsDisabled;
  }


  public DataSource minimumScheduleInterval(String minimumScheduleInterval) {
    this.minimumScheduleInterval = minimumScheduleInterval;
    return this;
  }

  /**
   * The minimum interval for scheduler to schedule runs.
   * @return minimumScheduleInterval
   */
  @javax.annotation.Nullable
  public String getMinimumScheduleInterval() {
    return minimumScheduleInterval;
  }

  public void setMinimumScheduleInterval(String minimumScheduleInterval) {
    this.minimumScheduleInterval = minimumScheduleInterval;
  }


  /**
   * Output only. Data source resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public DataSource parameters(List<DataSourceParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public DataSource addParametersItem(DataSourceParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Data source parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<DataSourceParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<DataSourceParameter> parameters) {
    this.parameters = parameters;
  }


  public DataSource scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public DataSource addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public DataSource supportsCustomSchedule(Boolean supportsCustomSchedule) {
    this.supportsCustomSchedule = supportsCustomSchedule;
    return this;
  }

  /**
   * Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to &#x60;true&#x60;, user can override default schedule.
   * @return supportsCustomSchedule
   */
  @javax.annotation.Nullable
  public Boolean getSupportsCustomSchedule() {
    return supportsCustomSchedule;
  }

  public void setSupportsCustomSchedule(Boolean supportsCustomSchedule) {
    this.supportsCustomSchedule = supportsCustomSchedule;
  }


  @Deprecated
  public DataSource supportsMultipleTransfers(Boolean supportsMultipleTransfers) {
    this.supportsMultipleTransfers = supportsMultipleTransfers;
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return supportsMultipleTransfers
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getSupportsMultipleTransfers() {
    return supportsMultipleTransfers;
  }

  @Deprecated
  public void setSupportsMultipleTransfers(Boolean supportsMultipleTransfers) {
    this.supportsMultipleTransfers = supportsMultipleTransfers;
  }


  @Deprecated
  public DataSource transferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
    return this;
  }

  /**
   * Deprecated. This field has no effect.
   * @return transferType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public TransferTypeEnum getTransferType() {
    return transferType;
  }

  @Deprecated
  public void setTransferType(TransferTypeEnum transferType) {
    this.transferType = transferType;
  }


  public DataSource updateDeadlineSeconds(Integer updateDeadlineSeconds) {
    this.updateDeadlineSeconds = updateDeadlineSeconds;
    return this;
  }

  /**
   * The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.
   * @return updateDeadlineSeconds
   */
  @javax.annotation.Nullable
  public Integer getUpdateDeadlineSeconds() {
    return updateDeadlineSeconds;
  }

  public void setUpdateDeadlineSeconds(Integer updateDeadlineSeconds) {
    this.updateDeadlineSeconds = updateDeadlineSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSource dataSource = (DataSource) o;
    return Objects.equals(this.authorizationType, dataSource.authorizationType) &&
        Objects.equals(this.clientId, dataSource.clientId) &&
        Objects.equals(this.dataRefreshType, dataSource.dataRefreshType) &&
        Objects.equals(this.dataSourceId, dataSource.dataSourceId) &&
        Objects.equals(this.defaultDataRefreshWindowDays, dataSource.defaultDataRefreshWindowDays) &&
        Objects.equals(this.defaultSchedule, dataSource.defaultSchedule) &&
        Objects.equals(this.description, dataSource.description) &&
        Objects.equals(this.displayName, dataSource.displayName) &&
        Objects.equals(this.helpUrl, dataSource.helpUrl) &&
        Objects.equals(this.manualRunsDisabled, dataSource.manualRunsDisabled) &&
        Objects.equals(this.minimumScheduleInterval, dataSource.minimumScheduleInterval) &&
        Objects.equals(this.name, dataSource.name) &&
        Objects.equals(this.parameters, dataSource.parameters) &&
        Objects.equals(this.scopes, dataSource.scopes) &&
        Objects.equals(this.supportsCustomSchedule, dataSource.supportsCustomSchedule) &&
        Objects.equals(this.supportsMultipleTransfers, dataSource.supportsMultipleTransfers) &&
        Objects.equals(this.transferType, dataSource.transferType) &&
        Objects.equals(this.updateDeadlineSeconds, dataSource.updateDeadlineSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationType, clientId, dataRefreshType, dataSourceId, defaultDataRefreshWindowDays, defaultSchedule, description, displayName, helpUrl, manualRunsDisabled, minimumScheduleInterval, name, parameters, scopes, supportsCustomSchedule, supportsMultipleTransfers, transferType, updateDeadlineSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSource {\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    dataRefreshType: ").append(toIndentedString(dataRefreshType)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    defaultDataRefreshWindowDays: ").append(toIndentedString(defaultDataRefreshWindowDays)).append("\n");
    sb.append("    defaultSchedule: ").append(toIndentedString(defaultSchedule)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    helpUrl: ").append(toIndentedString(helpUrl)).append("\n");
    sb.append("    manualRunsDisabled: ").append(toIndentedString(manualRunsDisabled)).append("\n");
    sb.append("    minimumScheduleInterval: ").append(toIndentedString(minimumScheduleInterval)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    supportsCustomSchedule: ").append(toIndentedString(supportsCustomSchedule)).append("\n");
    sb.append("    supportsMultipleTransfers: ").append(toIndentedString(supportsMultipleTransfers)).append("\n");
    sb.append("    transferType: ").append(toIndentedString(transferType)).append("\n");
    sb.append("    updateDeadlineSeconds: ").append(toIndentedString(updateDeadlineSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationType");
    openapiFields.add("clientId");
    openapiFields.add("dataRefreshType");
    openapiFields.add("dataSourceId");
    openapiFields.add("defaultDataRefreshWindowDays");
    openapiFields.add("defaultSchedule");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("helpUrl");
    openapiFields.add("manualRunsDisabled");
    openapiFields.add("minimumScheduleInterval");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("scopes");
    openapiFields.add("supportsCustomSchedule");
    openapiFields.add("supportsMultipleTransfers");
    openapiFields.add("transferType");
    openapiFields.add("updateDeadlineSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSource is not found in the empty JSON string", DataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) && !jsonObj.get("authorizationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationType").toString()));
      }
      // validate the optional field `authorizationType`
      if (jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) {
        AuthorizationTypeEnum.validateJsonElement(jsonObj.get("authorizationType"));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("dataRefreshType") != null && !jsonObj.get("dataRefreshType").isJsonNull()) && !jsonObj.get("dataRefreshType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRefreshType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRefreshType").toString()));
      }
      // validate the optional field `dataRefreshType`
      if (jsonObj.get("dataRefreshType") != null && !jsonObj.get("dataRefreshType").isJsonNull()) {
        DataRefreshTypeEnum.validateJsonElement(jsonObj.get("dataRefreshType"));
      }
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if ((jsonObj.get("defaultSchedule") != null && !jsonObj.get("defaultSchedule").isJsonNull()) && !jsonObj.get("defaultSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSchedule").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("helpUrl") != null && !jsonObj.get("helpUrl").isJsonNull()) && !jsonObj.get("helpUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpUrl").toString()));
      }
      if ((jsonObj.get("minimumScheduleInterval") != null && !jsonObj.get("minimumScheduleInterval").isJsonNull()) && !jsonObj.get("minimumScheduleInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumScheduleInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumScheduleInterval").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            DataSourceParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("transferType") != null && !jsonObj.get("transferType").isJsonNull()) && !jsonObj.get("transferType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferType").toString()));
      }
      // validate the optional field `transferType`
      if (jsonObj.get("transferType") != null && !jsonObj.get("transferType").isJsonNull()) {
        TransferTypeEnum.validateJsonElement(jsonObj.get("transferType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSource>() {
           @Override
           public void write(JsonWriter out, DataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSource
   * @throws IOException if the JSON string is invalid with respect to DataSource
   */
  public static DataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSource.class);
  }

  /**
   * Convert an instance of DataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

