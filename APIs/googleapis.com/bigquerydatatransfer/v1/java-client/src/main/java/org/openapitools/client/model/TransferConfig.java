/*
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EmailPreferences;
import org.openapitools.client.model.EncryptionConfiguration;
import org.openapitools.client.model.ScheduleOptions;
import org.openapitools.client.model.UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a data transfer configuration. A transfer configuration contains all metadata needed to perform a data transfer. For example, &#x60;destination_dataset_id&#x60; specifies where data should be stored. When a new transfer configuration is created, the specified &#x60;destination_dataset_id&#x60; is created when needed and shared with the appropriate data source service account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.654289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferConfig {
  public static final String SERIALIZED_NAME_DATA_REFRESH_WINDOW_DAYS = "dataRefreshWindowDays";
  @SerializedName(SERIALIZED_NAME_DATA_REFRESH_WINDOW_DAYS)
  private Integer dataRefreshWindowDays;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_DATASET_REGION = "datasetRegion";
  @SerializedName(SERIALIZED_NAME_DATASET_REGION)
  private String datasetRegion;

  public static final String SERIALIZED_NAME_DESTINATION_DATASET_ID = "destinationDatasetId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DATASET_ID)
  private String destinationDatasetId;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL_PREFERENCES = "emailPreferences";
  @SerializedName(SERIALIZED_NAME_EMAIL_PREFERENCES)
  private EmailPreferences emailPreferences;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIGURATION = "encryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIGURATION)
  private EncryptionConfiguration encryptionConfiguration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_RUN_TIME = "nextRunTime";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN_TIME)
  private String nextRunTime;

  public static final String SERIALIZED_NAME_NOTIFICATION_PUBSUB_TOPIC = "notificationPubsubTopic";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PUBSUB_TOPIC)
  private String notificationPubsubTopic;

  public static final String SERIALIZED_NAME_OWNER_INFO = "ownerInfo";
  @SerializedName(SERIALIZED_NAME_OWNER_INFO)
  private UserInfo ownerInfo;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, Object> params = new HashMap<>();

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_SCHEDULE_OPTIONS = "scheduleOptions";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_OPTIONS)
  private ScheduleOptions scheduleOptions;

  /**
   * Output only. State of the most recently updated transfer run.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    TRANSFER_STATE_UNSPECIFIED("TRANSFER_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public TransferConfig() {
  }

  public TransferConfig(
     String datasetRegion, 
     String nextRunTime, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.datasetRegion = datasetRegion;
    this.nextRunTime = nextRunTime;
    this.state = state;
    this.updateTime = updateTime;
  }

  public TransferConfig dataRefreshWindowDays(Integer dataRefreshWindowDays) {
    this.dataRefreshWindowDays = dataRefreshWindowDays;
    return this;
  }

  /**
   * The number of days to look back to automatically refresh the data. For example, if &#x60;data_refresh_window_days &#x3D; 10&#x60;, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
   * @return dataRefreshWindowDays
   */
  @javax.annotation.Nullable
  public Integer getDataRefreshWindowDays() {
    return dataRefreshWindowDays;
  }

  public void setDataRefreshWindowDays(Integer dataRefreshWindowDays) {
    this.dataRefreshWindowDays = dataRefreshWindowDays;
  }


  public TransferConfig dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  /**
   * Output only. Region in which BigQuery dataset is located.
   * @return datasetRegion
   */
  @javax.annotation.Nullable
  public String getDatasetRegion() {
    return datasetRegion;
  }



  public TransferConfig destinationDatasetId(String destinationDatasetId) {
    this.destinationDatasetId = destinationDatasetId;
    return this;
  }

  /**
   * The BigQuery target dataset id.
   * @return destinationDatasetId
   */
  @javax.annotation.Nullable
  public String getDestinationDatasetId() {
    return destinationDatasetId;
  }

  public void setDestinationDatasetId(String destinationDatasetId) {
    this.destinationDatasetId = destinationDatasetId;
  }


  public TransferConfig disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Is this config disabled. When set to true, no runs will be scheduled for this transfer config.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public TransferConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User specified display name for the data transfer.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TransferConfig emailPreferences(EmailPreferences emailPreferences) {
    this.emailPreferences = emailPreferences;
    return this;
  }

  /**
   * Get emailPreferences
   * @return emailPreferences
   */
  @javax.annotation.Nullable
  public EmailPreferences getEmailPreferences() {
    return emailPreferences;
  }

  public void setEmailPreferences(EmailPreferences emailPreferences) {
    this.emailPreferences = emailPreferences;
  }


  public TransferConfig encryptionConfiguration(EncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
    return this;
  }

  /**
   * Get encryptionConfiguration
   * @return encryptionConfiguration
   */
  @javax.annotation.Nullable
  public EncryptionConfiguration getEncryptionConfiguration() {
    return encryptionConfiguration;
  }

  public void setEncryptionConfiguration(EncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
  }


  public TransferConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the transfer config. Transfer config names have the form either &#x60;projects/{project_id}/locations/{region}/transferConfigs/{config_id}&#x60; or &#x60;projects/{project_id}/transferConfigs/{config_id}&#x60;, where &#x60;config_id&#x60; is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Next time when data transfer will run.
   * @return nextRunTime
   */
  @javax.annotation.Nullable
  public String getNextRunTime() {
    return nextRunTime;
  }



  public TransferConfig notificationPubsubTopic(String notificationPubsubTopic) {
    this.notificationPubsubTopic = notificationPubsubTopic;
    return this;
  }

  /**
   * Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: &#x60;projects/{project_id}/topics/{topic_id}&#x60;
   * @return notificationPubsubTopic
   */
  @javax.annotation.Nullable
  public String getNotificationPubsubTopic() {
    return notificationPubsubTopic;
  }

  public void setNotificationPubsubTopic(String notificationPubsubTopic) {
    this.notificationPubsubTopic = notificationPubsubTopic;
  }


  public TransferConfig ownerInfo(UserInfo ownerInfo) {
    this.ownerInfo = ownerInfo;
    return this;
  }

  /**
   * Get ownerInfo
   * @return ownerInfo
   */
  @javax.annotation.Nullable
  public UserInfo getOwnerInfo() {
    return ownerInfo;
  }

  public void setOwnerInfo(UserInfo ownerInfo) {
    this.ownerInfo = ownerInfo;
  }


  public TransferConfig params(Map<String, Object> params) {
    this.params = params;
    return this;
  }

  public TransferConfig putParamsItem(String key, Object paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

  /**
   * Parameters specific to each data source. For more information see the bq tab in the &#39;Setting up a data transfer&#39; section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
   * @return params
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParams() {
    return params;
  }

  public void setParams(Map<String, Object> params) {
    this.params = params;
  }


  public TransferConfig schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: &#x60;1st,3rd monday of month 15:30&#x60;, &#x60;every wed,fri of jan,jun 13:15&#x60;, and &#x60;first sunday of quarter 00:00&#x60;. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public TransferConfig scheduleOptions(ScheduleOptions scheduleOptions) {
    this.scheduleOptions = scheduleOptions;
    return this;
  }

  /**
   * Get scheduleOptions
   * @return scheduleOptions
   */
  @javax.annotation.Nullable
  public ScheduleOptions getScheduleOptions() {
    return scheduleOptions;
  }

  public void setScheduleOptions(ScheduleOptions scheduleOptions) {
    this.scheduleOptions = scheduleOptions;
  }


  /**
   * Output only. State of the most recently updated transfer run.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Data transfer modification time. Ignored by server on input.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public TransferConfig userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferConfig transferConfig = (TransferConfig) o;
    return Objects.equals(this.dataRefreshWindowDays, transferConfig.dataRefreshWindowDays) &&
        Objects.equals(this.dataSourceId, transferConfig.dataSourceId) &&
        Objects.equals(this.datasetRegion, transferConfig.datasetRegion) &&
        Objects.equals(this.destinationDatasetId, transferConfig.destinationDatasetId) &&
        Objects.equals(this.disabled, transferConfig.disabled) &&
        Objects.equals(this.displayName, transferConfig.displayName) &&
        Objects.equals(this.emailPreferences, transferConfig.emailPreferences) &&
        Objects.equals(this.encryptionConfiguration, transferConfig.encryptionConfiguration) &&
        Objects.equals(this.name, transferConfig.name) &&
        Objects.equals(this.nextRunTime, transferConfig.nextRunTime) &&
        Objects.equals(this.notificationPubsubTopic, transferConfig.notificationPubsubTopic) &&
        Objects.equals(this.ownerInfo, transferConfig.ownerInfo) &&
        Objects.equals(this.params, transferConfig.params) &&
        Objects.equals(this.schedule, transferConfig.schedule) &&
        Objects.equals(this.scheduleOptions, transferConfig.scheduleOptions) &&
        Objects.equals(this.state, transferConfig.state) &&
        Objects.equals(this.updateTime, transferConfig.updateTime) &&
        Objects.equals(this.userId, transferConfig.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataRefreshWindowDays, dataSourceId, datasetRegion, destinationDatasetId, disabled, displayName, emailPreferences, encryptionConfiguration, name, nextRunTime, notificationPubsubTopic, ownerInfo, params, schedule, scheduleOptions, state, updateTime, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferConfig {\n");
    sb.append("    dataRefreshWindowDays: ").append(toIndentedString(dataRefreshWindowDays)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    datasetRegion: ").append(toIndentedString(datasetRegion)).append("\n");
    sb.append("    destinationDatasetId: ").append(toIndentedString(destinationDatasetId)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    emailPreferences: ").append(toIndentedString(emailPreferences)).append("\n");
    sb.append("    encryptionConfiguration: ").append(toIndentedString(encryptionConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextRunTime: ").append(toIndentedString(nextRunTime)).append("\n");
    sb.append("    notificationPubsubTopic: ").append(toIndentedString(notificationPubsubTopic)).append("\n");
    sb.append("    ownerInfo: ").append(toIndentedString(ownerInfo)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    scheduleOptions: ").append(toIndentedString(scheduleOptions)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataRefreshWindowDays");
    openapiFields.add("dataSourceId");
    openapiFields.add("datasetRegion");
    openapiFields.add("destinationDatasetId");
    openapiFields.add("disabled");
    openapiFields.add("displayName");
    openapiFields.add("emailPreferences");
    openapiFields.add("encryptionConfiguration");
    openapiFields.add("name");
    openapiFields.add("nextRunTime");
    openapiFields.add("notificationPubsubTopic");
    openapiFields.add("ownerInfo");
    openapiFields.add("params");
    openapiFields.add("schedule");
    openapiFields.add("scheduleOptions");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferConfig is not found in the empty JSON string", TransferConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if ((jsonObj.get("datasetRegion") != null && !jsonObj.get("datasetRegion").isJsonNull()) && !jsonObj.get("datasetRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetRegion").toString()));
      }
      if ((jsonObj.get("destinationDatasetId") != null && !jsonObj.get("destinationDatasetId").isJsonNull()) && !jsonObj.get("destinationDatasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationDatasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationDatasetId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `emailPreferences`
      if (jsonObj.get("emailPreferences") != null && !jsonObj.get("emailPreferences").isJsonNull()) {
        EmailPreferences.validateJsonElement(jsonObj.get("emailPreferences"));
      }
      // validate the optional field `encryptionConfiguration`
      if (jsonObj.get("encryptionConfiguration") != null && !jsonObj.get("encryptionConfiguration").isJsonNull()) {
        EncryptionConfiguration.validateJsonElement(jsonObj.get("encryptionConfiguration"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nextRunTime") != null && !jsonObj.get("nextRunTime").isJsonNull()) && !jsonObj.get("nextRunTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextRunTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextRunTime").toString()));
      }
      if ((jsonObj.get("notificationPubsubTopic") != null && !jsonObj.get("notificationPubsubTopic").isJsonNull()) && !jsonObj.get("notificationPubsubTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationPubsubTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationPubsubTopic").toString()));
      }
      // validate the optional field `ownerInfo`
      if (jsonObj.get("ownerInfo") != null && !jsonObj.get("ownerInfo").isJsonNull()) {
        UserInfo.validateJsonElement(jsonObj.get("ownerInfo"));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      // validate the optional field `scheduleOptions`
      if (jsonObj.get("scheduleOptions") != null && !jsonObj.get("scheduleOptions").isJsonNull()) {
        ScheduleOptions.validateJsonElement(jsonObj.get("scheduleOptions"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferConfig>() {
           @Override
           public void write(JsonWriter out, TransferConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferConfig
   * @throws IOException if the JSON string is invalid with respect to TransferConfig
   */
  public static TransferConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferConfig.class);
  }

  /**
   * Convert an instance of TransferConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

