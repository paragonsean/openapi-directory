/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BigQueryDataTransferApi);
  }
}(this, function(expect, BigQueryDataTransferApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BigQueryDataTransferApi.DataSource();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataSource', function() {
    it('should create an instance of DataSource', function() {
      // uncomment below and update the code to test DataSource
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be.a(BigQueryDataTransferApi.DataSource);
    });

    it('should have the property authorizationType (base name: "authorizationType")', function() {
      // uncomment below and update the code to test the property authorizationType
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property dataRefreshType (base name: "dataRefreshType")', function() {
      // uncomment below and update the code to test the property dataRefreshType
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property dataSourceId (base name: "dataSourceId")', function() {
      // uncomment below and update the code to test the property dataSourceId
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property defaultDataRefreshWindowDays (base name: "defaultDataRefreshWindowDays")', function() {
      // uncomment below and update the code to test the property defaultDataRefreshWindowDays
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property defaultSchedule (base name: "defaultSchedule")', function() {
      // uncomment below and update the code to test the property defaultSchedule
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property helpUrl (base name: "helpUrl")', function() {
      // uncomment below and update the code to test the property helpUrl
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property manualRunsDisabled (base name: "manualRunsDisabled")', function() {
      // uncomment below and update the code to test the property manualRunsDisabled
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property minimumScheduleInterval (base name: "minimumScheduleInterval")', function() {
      // uncomment below and update the code to test the property minimumScheduleInterval
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property scopes (base name: "scopes")', function() {
      // uncomment below and update the code to test the property scopes
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property supportsCustomSchedule (base name: "supportsCustomSchedule")', function() {
      // uncomment below and update the code to test the property supportsCustomSchedule
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property supportsMultipleTransfers (base name: "supportsMultipleTransfers")', function() {
      // uncomment below and update the code to test the property supportsMultipleTransfers
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property transferType (base name: "transferType")', function() {
      // uncomment below and update the code to test the property transferType
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

    it('should have the property updateDeadlineSeconds (base name: "updateDeadlineSeconds")', function() {
      // uncomment below and update the code to test the property updateDeadlineSeconds
      //var instance = new BigQueryDataTransferApi.DataSource();
      //expect(instance).to.be();
    });

  });

}));
