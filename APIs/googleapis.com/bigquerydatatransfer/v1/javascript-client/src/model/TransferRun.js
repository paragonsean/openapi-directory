/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailPreferences from './EmailPreferences';
import Status from './Status';

/**
 * The TransferRun model module.
 * @module model/TransferRun
 * @version v1
 */
class TransferRun {
    /**
     * Constructs a new <code>TransferRun</code>.
     * Represents a data transfer run.
     * @alias module:model/TransferRun
     */
    constructor() { 
        
        TransferRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferRun} obj Optional instance to populate.
     * @return {module:model/TransferRun} The populated <code>TransferRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferRun();

            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('destinationDatasetId')) {
                obj['destinationDatasetId'] = ApiClient.convertToType(data['destinationDatasetId'], 'String');
            }
            if (data.hasOwnProperty('emailPreferences')) {
                obj['emailPreferences'] = EmailPreferences.constructFromObject(data['emailPreferences']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('errorStatus')) {
                obj['errorStatus'] = Status.constructFromObject(data['errorStatus']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationPubsubTopic')) {
                obj['notificationPubsubTopic'] = ApiClient.convertToType(data['notificationPubsubTopic'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('runTime')) {
                obj['runTime'] = ApiClient.convertToType(data['runTime'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('scheduleTime')) {
                obj['scheduleTime'] = ApiClient.convertToType(data['scheduleTime'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferRun</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // ensure the json data is a string
        if (data['destinationDatasetId'] && !(typeof data['destinationDatasetId'] === 'string' || data['destinationDatasetId'] instanceof String)) {
            throw new Error("Expected the field `destinationDatasetId` to be a primitive type in the JSON string but got " + data['destinationDatasetId']);
        }
        // validate the optional field `emailPreferences`
        if (data['emailPreferences']) { // data not null
          EmailPreferences.validateJSON(data['emailPreferences']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `errorStatus`
        if (data['errorStatus']) { // data not null
          Status.validateJSON(data['errorStatus']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notificationPubsubTopic'] && !(typeof data['notificationPubsubTopic'] === 'string' || data['notificationPubsubTopic'] instanceof String)) {
            throw new Error("Expected the field `notificationPubsubTopic` to be a primitive type in the JSON string but got " + data['notificationPubsubTopic']);
        }
        // ensure the json data is a string
        if (data['runTime'] && !(typeof data['runTime'] === 'string' || data['runTime'] instanceof String)) {
            throw new Error("Expected the field `runTime` to be a primitive type in the JSON string but got " + data['runTime']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['scheduleTime'] && !(typeof data['scheduleTime'] === 'string' || data['scheduleTime'] instanceof String)) {
            throw new Error("Expected the field `scheduleTime` to be a primitive type in the JSON string but got " + data['scheduleTime']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Output only. Data source id.
 * @member {String} dataSourceId
 */
TransferRun.prototype['dataSourceId'] = undefined;

/**
 * Output only. The BigQuery target dataset id.
 * @member {String} destinationDatasetId
 */
TransferRun.prototype['destinationDatasetId'] = undefined;

/**
 * @member {module:model/EmailPreferences} emailPreferences
 */
TransferRun.prototype['emailPreferences'] = undefined;

/**
 * Output only. Time when transfer run ended. Parameter ignored by server for input requests.
 * @member {String} endTime
 */
TransferRun.prototype['endTime'] = undefined;

/**
 * @member {module:model/Status} errorStatus
 */
TransferRun.prototype['errorStatus'] = undefined;

/**
 * The resource name of the transfer run. Transfer run names have the form `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The name is ignored when creating a transfer run.
 * @member {String} name
 */
TransferRun.prototype['name'] = undefined;

/**
 * Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`
 * @member {String} notificationPubsubTopic
 */
TransferRun.prototype['notificationPubsubTopic'] = undefined;

/**
 * Output only. Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
 * @member {Object.<String, Object>} params
 */
TransferRun.prototype['params'] = undefined;

/**
 * For batch transfer runs, specifies the date and time of the data should be ingested.
 * @member {String} runTime
 */
TransferRun.prototype['runTime'] = undefined;

/**
 * Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so `schedule_time` doesn't always match this.
 * @member {String} schedule
 */
TransferRun.prototype['schedule'] = undefined;

/**
 * Minimum time after which a transfer run can be started.
 * @member {String} scheduleTime
 */
TransferRun.prototype['scheduleTime'] = undefined;

/**
 * Output only. Time when transfer run was started. Parameter ignored by server for input requests.
 * @member {String} startTime
 */
TransferRun.prototype['startTime'] = undefined;

/**
 * Data transfer run state. Ignored for input requests.
 * @member {module:model/TransferRun.StateEnum} state
 */
TransferRun.prototype['state'] = undefined;

/**
 * Output only. Last time the data transfer run state was updated.
 * @member {String} updateTime
 */
TransferRun.prototype['updateTime'] = undefined;

/**
 * Deprecated. Unique ID of the user on whose behalf transfer is done.
 * @member {String} userId
 */
TransferRun.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
TransferRun['StateEnum'] = {

    /**
     * value: "TRANSFER_STATE_UNSPECIFIED"
     * @const
     */
    "TRANSFER_STATE_UNSPECIFIED": "TRANSFER_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};



export default TransferRun;

