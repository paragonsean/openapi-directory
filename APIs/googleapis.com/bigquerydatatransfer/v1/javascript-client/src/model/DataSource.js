/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceParameter from './DataSourceParameter';

/**
 * The DataSource model module.
 * @module model/DataSource
 * @version v1
 */
class DataSource {
    /**
     * Constructs a new <code>DataSource</code>.
     * Defines the properties and custom parameters for a data source.
     * @alias module:model/DataSource
     */
    constructor() { 
        
        DataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSource} obj Optional instance to populate.
     * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSource();

            if (data.hasOwnProperty('authorizationType')) {
                obj['authorizationType'] = ApiClient.convertToType(data['authorizationType'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('dataRefreshType')) {
                obj['dataRefreshType'] = ApiClient.convertToType(data['dataRefreshType'], 'String');
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('defaultDataRefreshWindowDays')) {
                obj['defaultDataRefreshWindowDays'] = ApiClient.convertToType(data['defaultDataRefreshWindowDays'], 'Number');
            }
            if (data.hasOwnProperty('defaultSchedule')) {
                obj['defaultSchedule'] = ApiClient.convertToType(data['defaultSchedule'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('helpUrl')) {
                obj['helpUrl'] = ApiClient.convertToType(data['helpUrl'], 'String');
            }
            if (data.hasOwnProperty('manualRunsDisabled')) {
                obj['manualRunsDisabled'] = ApiClient.convertToType(data['manualRunsDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('minimumScheduleInterval')) {
                obj['minimumScheduleInterval'] = ApiClient.convertToType(data['minimumScheduleInterval'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [DataSourceParameter]);
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('supportsCustomSchedule')) {
                obj['supportsCustomSchedule'] = ApiClient.convertToType(data['supportsCustomSchedule'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsMultipleTransfers')) {
                obj['supportsMultipleTransfers'] = ApiClient.convertToType(data['supportsMultipleTransfers'], 'Boolean');
            }
            if (data.hasOwnProperty('transferType')) {
                obj['transferType'] = ApiClient.convertToType(data['transferType'], 'String');
            }
            if (data.hasOwnProperty('updateDeadlineSeconds')) {
                obj['updateDeadlineSeconds'] = ApiClient.convertToType(data['updateDeadlineSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorizationType'] && !(typeof data['authorizationType'] === 'string' || data['authorizationType'] instanceof String)) {
            throw new Error("Expected the field `authorizationType` to be a primitive type in the JSON string but got " + data['authorizationType']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['dataRefreshType'] && !(typeof data['dataRefreshType'] === 'string' || data['dataRefreshType'] instanceof String)) {
            throw new Error("Expected the field `dataRefreshType` to be a primitive type in the JSON string but got " + data['dataRefreshType']);
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // ensure the json data is a string
        if (data['defaultSchedule'] && !(typeof data['defaultSchedule'] === 'string' || data['defaultSchedule'] instanceof String)) {
            throw new Error("Expected the field `defaultSchedule` to be a primitive type in the JSON string but got " + data['defaultSchedule']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['helpUrl'] && !(typeof data['helpUrl'] === 'string' || data['helpUrl'] instanceof String)) {
            throw new Error("Expected the field `helpUrl` to be a primitive type in the JSON string but got " + data['helpUrl']);
        }
        // ensure the json data is a string
        if (data['minimumScheduleInterval'] && !(typeof data['minimumScheduleInterval'] === 'string' || data['minimumScheduleInterval'] instanceof String)) {
            throw new Error("Expected the field `minimumScheduleInterval` to be a primitive type in the JSON string but got " + data['minimumScheduleInterval']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                DataSourceParameter.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['transferType'] && !(typeof data['transferType'] === 'string' || data['transferType'] instanceof String)) {
            throw new Error("Expected the field `transferType` to be a primitive type in the JSON string but got " + data['transferType']);
        }

        return true;
    }


}



/**
 * Indicates the type of authorization.
 * @member {module:model/DataSource.AuthorizationTypeEnum} authorizationType
 */
DataSource.prototype['authorizationType'] = undefined;

/**
 * Data source client id which should be used to receive refresh token.
 * @member {String} clientId
 */
DataSource.prototype['clientId'] = undefined;

/**
 * Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.
 * @member {module:model/DataSource.DataRefreshTypeEnum} dataRefreshType
 */
DataSource.prototype['dataRefreshType'] = undefined;

/**
 * Data source id.
 * @member {String} dataSourceId
 */
DataSource.prototype['dataSourceId'] = undefined;

/**
 * Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
 * @member {Number} defaultDataRefreshWindowDays
 */
DataSource.prototype['defaultDataRefreshWindowDays'] = undefined;

/**
 * Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
 * @member {String} defaultSchedule
 */
DataSource.prototype['defaultSchedule'] = undefined;

/**
 * User friendly data source description string.
 * @member {String} description
 */
DataSource.prototype['description'] = undefined;

/**
 * User friendly data source name.
 * @member {String} displayName
 */
DataSource.prototype['displayName'] = undefined;

/**
 * Url for the help document for this data source.
 * @member {String} helpUrl
 */
DataSource.prototype['helpUrl'] = undefined;

/**
 * Disables backfilling and manual run scheduling for the data source.
 * @member {Boolean} manualRunsDisabled
 */
DataSource.prototype['manualRunsDisabled'] = undefined;

/**
 * The minimum interval for scheduler to schedule runs.
 * @member {String} minimumScheduleInterval
 */
DataSource.prototype['minimumScheduleInterval'] = undefined;

/**
 * Output only. Data source resource name.
 * @member {String} name
 */
DataSource.prototype['name'] = undefined;

/**
 * Data source parameters.
 * @member {Array.<module:model/DataSourceParameter>} parameters
 */
DataSource.prototype['parameters'] = undefined;

/**
 * Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery
 * @member {Array.<String>} scopes
 */
DataSource.prototype['scopes'] = undefined;

/**
 * Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule.
 * @member {Boolean} supportsCustomSchedule
 */
DataSource.prototype['supportsCustomSchedule'] = undefined;

/**
 * Deprecated. This field has no effect.
 * @member {Boolean} supportsMultipleTransfers
 */
DataSource.prototype['supportsMultipleTransfers'] = undefined;

/**
 * Deprecated. This field has no effect.
 * @member {module:model/DataSource.TransferTypeEnum} transferType
 */
DataSource.prototype['transferType'] = undefined;

/**
 * The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.
 * @member {Number} updateDeadlineSeconds
 */
DataSource.prototype['updateDeadlineSeconds'] = undefined;





/**
 * Allowed values for the <code>authorizationType</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['AuthorizationTypeEnum'] = {

    /**
     * value: "AUTHORIZATION_TYPE_UNSPECIFIED"
     * @const
     */
    "AUTHORIZATION_TYPE_UNSPECIFIED": "AUTHORIZATION_TYPE_UNSPECIFIED",

    /**
     * value: "AUTHORIZATION_CODE"
     * @const
     */
    "AUTHORIZATION_CODE": "AUTHORIZATION_CODE",

    /**
     * value: "GOOGLE_PLUS_AUTHORIZATION_CODE"
     * @const
     */
    "GOOGLE_PLUS_AUTHORIZATION_CODE": "GOOGLE_PLUS_AUTHORIZATION_CODE",

    /**
     * value: "FIRST_PARTY_OAUTH"
     * @const
     */
    "FIRST_PARTY_OAUTH": "FIRST_PARTY_OAUTH"
};


/**
 * Allowed values for the <code>dataRefreshType</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['DataRefreshTypeEnum'] = {

    /**
     * value: "DATA_REFRESH_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_REFRESH_TYPE_UNSPECIFIED": "DATA_REFRESH_TYPE_UNSPECIFIED",

    /**
     * value: "SLIDING_WINDOW"
     * @const
     */
    "SLIDING_WINDOW": "SLIDING_WINDOW",

    /**
     * value: "CUSTOM_SLIDING_WINDOW"
     * @const
     */
    "CUSTOM_SLIDING_WINDOW": "CUSTOM_SLIDING_WINDOW"
};


/**
 * Allowed values for the <code>transferType</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['TransferTypeEnum'] = {

    /**
     * value: "TRANSFER_TYPE_UNSPECIFIED"
     * @const
     */
    "TRANSFER_TYPE_UNSPECIFIED": "TRANSFER_TYPE_UNSPECIFIED",

    /**
     * value: "BATCH"
     * @const
     */
    "BATCH": "BATCH",

    /**
     * value: "STREAMING"
     * @const
     */
    "STREAMING": "STREAMING"
};



export default DataSource;

