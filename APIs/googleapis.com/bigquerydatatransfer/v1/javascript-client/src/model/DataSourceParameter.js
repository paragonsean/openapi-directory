/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataSourceParameter model module.
 * @module model/DataSourceParameter
 * @version v1
 */
class DataSourceParameter {
    /**
     * Constructs a new <code>DataSourceParameter</code>.
     * A parameter used to define custom fields in a data source definition.
     * @alias module:model/DataSourceParameter
     */
    constructor() { 
        
        DataSourceParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceParameter} obj Optional instance to populate.
     * @return {module:model/DataSourceParameter} The populated <code>DataSourceParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceParameter();

            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], ['String']);
            }
            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [DataSourceParameter]);
            }
            if (data.hasOwnProperty('immutable')) {
                obj['immutable'] = ApiClient.convertToType(data['immutable'], 'Boolean');
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
            }
            if (data.hasOwnProperty('paramId')) {
                obj['paramId'] = ApiClient.convertToType(data['paramId'], 'String');
            }
            if (data.hasOwnProperty('recurse')) {
                obj['recurse'] = ApiClient.convertToType(data['recurse'], 'Boolean');
            }
            if (data.hasOwnProperty('repeated')) {
                obj['repeated'] = ApiClient.convertToType(data['repeated'], 'Boolean');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validationDescription')) {
                obj['validationDescription'] = ApiClient.convertToType(data['validationDescription'], 'String');
            }
            if (data.hasOwnProperty('validationHelpUrl')) {
                obj['validationHelpUrl'] = ApiClient.convertToType(data['validationHelpUrl'], 'String');
            }
            if (data.hasOwnProperty('validationRegex')) {
                obj['validationRegex'] = ApiClient.convertToType(data['validationRegex'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedValues'])) {
            throw new Error("Expected the field `allowedValues` to be an array in the JSON data but got " + data['allowedValues']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                DataSourceParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paramId'] && !(typeof data['paramId'] === 'string' || data['paramId'] instanceof String)) {
            throw new Error("Expected the field `paramId` to be a primitive type in the JSON string but got " + data['paramId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['validationDescription'] && !(typeof data['validationDescription'] === 'string' || data['validationDescription'] instanceof String)) {
            throw new Error("Expected the field `validationDescription` to be a primitive type in the JSON string but got " + data['validationDescription']);
        }
        // ensure the json data is a string
        if (data['validationHelpUrl'] && !(typeof data['validationHelpUrl'] === 'string' || data['validationHelpUrl'] instanceof String)) {
            throw new Error("Expected the field `validationHelpUrl` to be a primitive type in the JSON string but got " + data['validationHelpUrl']);
        }
        // ensure the json data is a string
        if (data['validationRegex'] && !(typeof data['validationRegex'] === 'string' || data['validationRegex'] instanceof String)) {
            throw new Error("Expected the field `validationRegex` to be a primitive type in the JSON string but got " + data['validationRegex']);
        }

        return true;
    }


}



/**
 * All possible values for the parameter.
 * @member {Array.<String>} allowedValues
 */
DataSourceParameter.prototype['allowedValues'] = undefined;

/**
 * If true, it should not be used in new transfers, and it should not be visible to users.
 * @member {Boolean} deprecated
 */
DataSourceParameter.prototype['deprecated'] = undefined;

/**
 * Parameter description.
 * @member {String} description
 */
DataSourceParameter.prototype['description'] = undefined;

/**
 * Parameter display name in the user interface.
 * @member {String} displayName
 */
DataSourceParameter.prototype['displayName'] = undefined;

/**
 * Deprecated. This field has no effect.
 * @member {Array.<module:model/DataSourceParameter>} fields
 */
DataSourceParameter.prototype['fields'] = undefined;

/**
 * Cannot be changed after initial creation.
 * @member {Boolean} immutable
 */
DataSourceParameter.prototype['immutable'] = undefined;

/**
 * For integer and double values specifies maximum allowed value.
 * @member {Number} maxValue
 */
DataSourceParameter.prototype['maxValue'] = undefined;

/**
 * For integer and double values specifies minimum allowed value.
 * @member {Number} minValue
 */
DataSourceParameter.prototype['minValue'] = undefined;

/**
 * Parameter identifier.
 * @member {String} paramId
 */
DataSourceParameter.prototype['paramId'] = undefined;

/**
 * Deprecated. This field has no effect.
 * @member {Boolean} recurse
 */
DataSourceParameter.prototype['recurse'] = undefined;

/**
 * Deprecated. This field has no effect.
 * @member {Boolean} repeated
 */
DataSourceParameter.prototype['repeated'] = undefined;

/**
 * Is parameter required.
 * @member {Boolean} required
 */
DataSourceParameter.prototype['required'] = undefined;

/**
 * Parameter type.
 * @member {module:model/DataSourceParameter.TypeEnum} type
 */
DataSourceParameter.prototype['type'] = undefined;

/**
 * Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.
 * @member {String} validationDescription
 */
DataSourceParameter.prototype['validationDescription'] = undefined;

/**
 * URL to a help document to further explain the naming requirements.
 * @member {String} validationHelpUrl
 */
DataSourceParameter.prototype['validationHelpUrl'] = undefined;

/**
 * Regular expression which can be used for parameter validation.
 * @member {String} validationRegex
 */
DataSourceParameter.prototype['validationRegex'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DataSourceParameter['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "RECORD"
     * @const
     */
    "RECORD": "RECORD",

    /**
     * value: "PLUS_PAGE"
     * @const
     */
    "PLUS_PAGE": "PLUS_PAGE",

    /**
     * value: "LIST"
     * @const
     */
    "LIST": "LIST"
};



export default DataSourceParameter;

