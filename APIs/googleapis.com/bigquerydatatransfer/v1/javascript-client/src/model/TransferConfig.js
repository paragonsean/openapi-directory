/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailPreferences from './EmailPreferences';
import EncryptionConfiguration from './EncryptionConfiguration';
import ScheduleOptions from './ScheduleOptions';
import UserInfo from './UserInfo';

/**
 * The TransferConfig model module.
 * @module model/TransferConfig
 * @version v1
 */
class TransferConfig {
    /**
     * Constructs a new <code>TransferConfig</code>.
     * Represents a data transfer configuration. A transfer configuration contains all metadata needed to perform a data transfer. For example, &#x60;destination_dataset_id&#x60; specifies where data should be stored. When a new transfer configuration is created, the specified &#x60;destination_dataset_id&#x60; is created when needed and shared with the appropriate data source service account.
     * @alias module:model/TransferConfig
     */
    constructor() { 
        
        TransferConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferConfig} obj Optional instance to populate.
     * @return {module:model/TransferConfig} The populated <code>TransferConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferConfig();

            if (data.hasOwnProperty('dataRefreshWindowDays')) {
                obj['dataRefreshWindowDays'] = ApiClient.convertToType(data['dataRefreshWindowDays'], 'Number');
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('datasetRegion')) {
                obj['datasetRegion'] = ApiClient.convertToType(data['datasetRegion'], 'String');
            }
            if (data.hasOwnProperty('destinationDatasetId')) {
                obj['destinationDatasetId'] = ApiClient.convertToType(data['destinationDatasetId'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('emailPreferences')) {
                obj['emailPreferences'] = EmailPreferences.constructFromObject(data['emailPreferences']);
            }
            if (data.hasOwnProperty('encryptionConfiguration')) {
                obj['encryptionConfiguration'] = EncryptionConfiguration.constructFromObject(data['encryptionConfiguration']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nextRunTime')) {
                obj['nextRunTime'] = ApiClient.convertToType(data['nextRunTime'], 'String');
            }
            if (data.hasOwnProperty('notificationPubsubTopic')) {
                obj['notificationPubsubTopic'] = ApiClient.convertToType(data['notificationPubsubTopic'], 'String');
            }
            if (data.hasOwnProperty('ownerInfo')) {
                obj['ownerInfo'] = UserInfo.constructFromObject(data['ownerInfo']);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('scheduleOptions')) {
                obj['scheduleOptions'] = ScheduleOptions.constructFromObject(data['scheduleOptions']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // ensure the json data is a string
        if (data['datasetRegion'] && !(typeof data['datasetRegion'] === 'string' || data['datasetRegion'] instanceof String)) {
            throw new Error("Expected the field `datasetRegion` to be a primitive type in the JSON string but got " + data['datasetRegion']);
        }
        // ensure the json data is a string
        if (data['destinationDatasetId'] && !(typeof data['destinationDatasetId'] === 'string' || data['destinationDatasetId'] instanceof String)) {
            throw new Error("Expected the field `destinationDatasetId` to be a primitive type in the JSON string but got " + data['destinationDatasetId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `emailPreferences`
        if (data['emailPreferences']) { // data not null
          EmailPreferences.validateJSON(data['emailPreferences']);
        }
        // validate the optional field `encryptionConfiguration`
        if (data['encryptionConfiguration']) { // data not null
          EncryptionConfiguration.validateJSON(data['encryptionConfiguration']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nextRunTime'] && !(typeof data['nextRunTime'] === 'string' || data['nextRunTime'] instanceof String)) {
            throw new Error("Expected the field `nextRunTime` to be a primitive type in the JSON string but got " + data['nextRunTime']);
        }
        // ensure the json data is a string
        if (data['notificationPubsubTopic'] && !(typeof data['notificationPubsubTopic'] === 'string' || data['notificationPubsubTopic'] instanceof String)) {
            throw new Error("Expected the field `notificationPubsubTopic` to be a primitive type in the JSON string but got " + data['notificationPubsubTopic']);
        }
        // validate the optional field `ownerInfo`
        if (data['ownerInfo']) { // data not null
          UserInfo.validateJSON(data['ownerInfo']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // validate the optional field `scheduleOptions`
        if (data['scheduleOptions']) { // data not null
          ScheduleOptions.validateJSON(data['scheduleOptions']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
 * @member {Number} dataRefreshWindowDays
 */
TransferConfig.prototype['dataRefreshWindowDays'] = undefined;

/**
 * Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
 * @member {String} dataSourceId
 */
TransferConfig.prototype['dataSourceId'] = undefined;

/**
 * Output only. Region in which BigQuery dataset is located.
 * @member {String} datasetRegion
 */
TransferConfig.prototype['datasetRegion'] = undefined;

/**
 * The BigQuery target dataset id.
 * @member {String} destinationDatasetId
 */
TransferConfig.prototype['destinationDatasetId'] = undefined;

/**
 * Is this config disabled. When set to true, no runs will be scheduled for this transfer config.
 * @member {Boolean} disabled
 */
TransferConfig.prototype['disabled'] = undefined;

/**
 * User specified display name for the data transfer.
 * @member {String} displayName
 */
TransferConfig.prototype['displayName'] = undefined;

/**
 * @member {module:model/EmailPreferences} emailPreferences
 */
TransferConfig.prototype['emailPreferences'] = undefined;

/**
 * @member {module:model/EncryptionConfiguration} encryptionConfiguration
 */
TransferConfig.prototype['encryptionConfiguration'] = undefined;

/**
 * The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
 * @member {String} name
 */
TransferConfig.prototype['name'] = undefined;

/**
 * Output only. Next time when data transfer will run.
 * @member {String} nextRunTime
 */
TransferConfig.prototype['nextRunTime'] = undefined;

/**
 * Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project_id}/topics/{topic_id}`
 * @member {String} notificationPubsubTopic
 */
TransferConfig.prototype['notificationPubsubTopic'] = undefined;

/**
 * @member {module:model/UserInfo} ownerInfo
 */
TransferConfig.prototype['ownerInfo'] = undefined;

/**
 * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
 * @member {Object.<String, Object>} params
 */
TransferConfig.prototype['params'] = undefined;

/**
 * Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
 * @member {String} schedule
 */
TransferConfig.prototype['schedule'] = undefined;

/**
 * @member {module:model/ScheduleOptions} scheduleOptions
 */
TransferConfig.prototype['scheduleOptions'] = undefined;

/**
 * Output only. State of the most recently updated transfer run.
 * @member {module:model/TransferConfig.StateEnum} state
 */
TransferConfig.prototype['state'] = undefined;

/**
 * Output only. Data transfer modification time. Ignored by server on input.
 * @member {String} updateTime
 */
TransferConfig.prototype['updateTime'] = undefined;

/**
 * Deprecated. Unique ID of the user on whose behalf transfer is done.
 * @member {String} userId
 */
TransferConfig.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
TransferConfig['StateEnum'] = {

    /**
     * value: "TRANSFER_STATE_UNSPECIFIED"
     * @const
     */
    "TRANSFER_STATE_UNSPECIFIED": "TRANSFER_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED"
};



export default TransferConfig;

