/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferConfig::OAITransferConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferConfig::OAITransferConfig() {
    this->initializeModel();
}

OAITransferConfig::~OAITransferConfig() {}

void OAITransferConfig::initializeModel() {

    m_data_refresh_window_days_isSet = false;
    m_data_refresh_window_days_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_dataset_region_isSet = false;
    m_dataset_region_isValid = false;

    m_destination_dataset_id_isSet = false;
    m_destination_dataset_id_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_preferences_isSet = false;
    m_email_preferences_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_run_time_isSet = false;
    m_next_run_time_isValid = false;

    m_notification_pubsub_topic_isSet = false;
    m_notification_pubsub_topic_isValid = false;

    m_owner_info_isSet = false;
    m_owner_info_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_schedule_options_isSet = false;
    m_schedule_options_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITransferConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferConfig::fromJsonObject(QJsonObject json) {

    m_data_refresh_window_days_isValid = ::OpenAPI::fromJsonValue(m_data_refresh_window_days, json[QString("dataRefreshWindowDays")]);
    m_data_refresh_window_days_isSet = !json[QString("dataRefreshWindowDays")].isNull() && m_data_refresh_window_days_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_dataset_region_isValid = ::OpenAPI::fromJsonValue(m_dataset_region, json[QString("datasetRegion")]);
    m_dataset_region_isSet = !json[QString("datasetRegion")].isNull() && m_dataset_region_isValid;

    m_destination_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_destination_dataset_id, json[QString("destinationDatasetId")]);
    m_destination_dataset_id_isSet = !json[QString("destinationDatasetId")].isNull() && m_destination_dataset_id_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_preferences_isValid = ::OpenAPI::fromJsonValue(m_email_preferences, json[QString("emailPreferences")]);
    m_email_preferences_isSet = !json[QString("emailPreferences")].isNull() && m_email_preferences_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("encryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("encryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_run_time_isValid = ::OpenAPI::fromJsonValue(m_next_run_time, json[QString("nextRunTime")]);
    m_next_run_time_isSet = !json[QString("nextRunTime")].isNull() && m_next_run_time_isValid;

    m_notification_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_notification_pubsub_topic, json[QString("notificationPubsubTopic")]);
    m_notification_pubsub_topic_isSet = !json[QString("notificationPubsubTopic")].isNull() && m_notification_pubsub_topic_isValid;

    m_owner_info_isValid = ::OpenAPI::fromJsonValue(m_owner_info, json[QString("ownerInfo")]);
    m_owner_info_isSet = !json[QString("ownerInfo")].isNull() && m_owner_info_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_schedule_options_isValid = ::OpenAPI::fromJsonValue(m_schedule_options, json[QString("scheduleOptions")]);
    m_schedule_options_isSet = !json[QString("scheduleOptions")].isNull() && m_schedule_options_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAITransferConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_data_refresh_window_days_isSet) {
        obj.insert(QString("dataRefreshWindowDays"), ::OpenAPI::toJsonValue(m_data_refresh_window_days));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_dataset_region_isSet) {
        obj.insert(QString("datasetRegion"), ::OpenAPI::toJsonValue(m_dataset_region));
    }
    if (m_destination_dataset_id_isSet) {
        obj.insert(QString("destinationDatasetId"), ::OpenAPI::toJsonValue(m_destination_dataset_id));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_preferences.isSet()) {
        obj.insert(QString("emailPreferences"), ::OpenAPI::toJsonValue(m_email_preferences));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("encryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_run_time_isSet) {
        obj.insert(QString("nextRunTime"), ::OpenAPI::toJsonValue(m_next_run_time));
    }
    if (m_notification_pubsub_topic_isSet) {
        obj.insert(QString("notificationPubsubTopic"), ::OpenAPI::toJsonValue(m_notification_pubsub_topic));
    }
    if (m_owner_info.isSet()) {
        obj.insert(QString("ownerInfo"), ::OpenAPI::toJsonValue(m_owner_info));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_schedule_options.isSet()) {
        obj.insert(QString("scheduleOptions"), ::OpenAPI::toJsonValue(m_schedule_options));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAITransferConfig::getDataRefreshWindowDays() const {
    return m_data_refresh_window_days;
}
void OAITransferConfig::setDataRefreshWindowDays(const qint32 &data_refresh_window_days) {
    m_data_refresh_window_days = data_refresh_window_days;
    m_data_refresh_window_days_isSet = true;
}

bool OAITransferConfig::is_data_refresh_window_days_Set() const{
    return m_data_refresh_window_days_isSet;
}

bool OAITransferConfig::is_data_refresh_window_days_Valid() const{
    return m_data_refresh_window_days_isValid;
}

QString OAITransferConfig::getDataSourceId() const {
    return m_data_source_id;
}
void OAITransferConfig::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAITransferConfig::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAITransferConfig::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAITransferConfig::getDatasetRegion() const {
    return m_dataset_region;
}
void OAITransferConfig::setDatasetRegion(const QString &dataset_region) {
    m_dataset_region = dataset_region;
    m_dataset_region_isSet = true;
}

bool OAITransferConfig::is_dataset_region_Set() const{
    return m_dataset_region_isSet;
}

bool OAITransferConfig::is_dataset_region_Valid() const{
    return m_dataset_region_isValid;
}

QString OAITransferConfig::getDestinationDatasetId() const {
    return m_destination_dataset_id;
}
void OAITransferConfig::setDestinationDatasetId(const QString &destination_dataset_id) {
    m_destination_dataset_id = destination_dataset_id;
    m_destination_dataset_id_isSet = true;
}

bool OAITransferConfig::is_destination_dataset_id_Set() const{
    return m_destination_dataset_id_isSet;
}

bool OAITransferConfig::is_destination_dataset_id_Valid() const{
    return m_destination_dataset_id_isValid;
}

bool OAITransferConfig::isDisabled() const {
    return m_disabled;
}
void OAITransferConfig::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAITransferConfig::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAITransferConfig::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAITransferConfig::getDisplayName() const {
    return m_display_name;
}
void OAITransferConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITransferConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITransferConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEmailPreferences OAITransferConfig::getEmailPreferences() const {
    return m_email_preferences;
}
void OAITransferConfig::setEmailPreferences(const OAIEmailPreferences &email_preferences) {
    m_email_preferences = email_preferences;
    m_email_preferences_isSet = true;
}

bool OAITransferConfig::is_email_preferences_Set() const{
    return m_email_preferences_isSet;
}

bool OAITransferConfig::is_email_preferences_Valid() const{
    return m_email_preferences_isValid;
}

OAIEncryptionConfiguration OAITransferConfig::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAITransferConfig::setEncryptionConfiguration(const OAIEncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAITransferConfig::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAITransferConfig::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

QString OAITransferConfig::getName() const {
    return m_name;
}
void OAITransferConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransferConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransferConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITransferConfig::getNextRunTime() const {
    return m_next_run_time;
}
void OAITransferConfig::setNextRunTime(const QString &next_run_time) {
    m_next_run_time = next_run_time;
    m_next_run_time_isSet = true;
}

bool OAITransferConfig::is_next_run_time_Set() const{
    return m_next_run_time_isSet;
}

bool OAITransferConfig::is_next_run_time_Valid() const{
    return m_next_run_time_isValid;
}

QString OAITransferConfig::getNotificationPubsubTopic() const {
    return m_notification_pubsub_topic;
}
void OAITransferConfig::setNotificationPubsubTopic(const QString &notification_pubsub_topic) {
    m_notification_pubsub_topic = notification_pubsub_topic;
    m_notification_pubsub_topic_isSet = true;
}

bool OAITransferConfig::is_notification_pubsub_topic_Set() const{
    return m_notification_pubsub_topic_isSet;
}

bool OAITransferConfig::is_notification_pubsub_topic_Valid() const{
    return m_notification_pubsub_topic_isValid;
}

OAIUserInfo OAITransferConfig::getOwnerInfo() const {
    return m_owner_info;
}
void OAITransferConfig::setOwnerInfo(const OAIUserInfo &owner_info) {
    m_owner_info = owner_info;
    m_owner_info_isSet = true;
}

bool OAITransferConfig::is_owner_info_Set() const{
    return m_owner_info_isSet;
}

bool OAITransferConfig::is_owner_info_Valid() const{
    return m_owner_info_isValid;
}

QMap<QString, QJsonValue> OAITransferConfig::getParams() const {
    return m_params;
}
void OAITransferConfig::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAITransferConfig::is_params_Set() const{
    return m_params_isSet;
}

bool OAITransferConfig::is_params_Valid() const{
    return m_params_isValid;
}

QString OAITransferConfig::getSchedule() const {
    return m_schedule;
}
void OAITransferConfig::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAITransferConfig::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAITransferConfig::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAIScheduleOptions OAITransferConfig::getScheduleOptions() const {
    return m_schedule_options;
}
void OAITransferConfig::setScheduleOptions(const OAIScheduleOptions &schedule_options) {
    m_schedule_options = schedule_options;
    m_schedule_options_isSet = true;
}

bool OAITransferConfig::is_schedule_options_Set() const{
    return m_schedule_options_isSet;
}

bool OAITransferConfig::is_schedule_options_Valid() const{
    return m_schedule_options_isValid;
}

QString OAITransferConfig::getState() const {
    return m_state;
}
void OAITransferConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITransferConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAITransferConfig::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITransferConfig::getUpdateTime() const {
    return m_update_time;
}
void OAITransferConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAITransferConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAITransferConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAITransferConfig::getUserId() const {
    return m_user_id;
}
void OAITransferConfig::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITransferConfig::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITransferConfig::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITransferConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_refresh_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
