/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataSourcesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataSourcesResponse::OAIListDataSourcesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataSourcesResponse::OAIListDataSourcesResponse() {
    this->initializeModel();
}

OAIListDataSourcesResponse::~OAIListDataSourcesResponse() {}

void OAIListDataSourcesResponse::initializeModel() {

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListDataSourcesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataSourcesResponse::fromJsonObject(QJsonObject json) {

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("dataSources")]);
    m_data_sources_isSet = !json[QString("dataSources")].isNull() && m_data_sources_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListDataSourcesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataSourcesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sources.size() > 0) {
        obj.insert(QString("dataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIDataSource> OAIListDataSourcesResponse::getDataSources() const {
    return m_data_sources;
}
void OAIListDataSourcesResponse::setDataSources(const QList<OAIDataSource> &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAIListDataSourcesResponse::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAIListDataSourcesResponse::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QString OAIListDataSourcesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListDataSourcesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListDataSourcesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListDataSourcesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListDataSourcesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataSourcesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
