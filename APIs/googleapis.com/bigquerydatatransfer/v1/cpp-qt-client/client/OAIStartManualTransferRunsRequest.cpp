/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartManualTransferRunsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartManualTransferRunsRequest::OAIStartManualTransferRunsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartManualTransferRunsRequest::OAIStartManualTransferRunsRequest() {
    this->initializeModel();
}

OAIStartManualTransferRunsRequest::~OAIStartManualTransferRunsRequest() {}

void OAIStartManualTransferRunsRequest::initializeModel() {

    m_requested_run_time_isSet = false;
    m_requested_run_time_isValid = false;

    m_requested_time_range_isSet = false;
    m_requested_time_range_isValid = false;
}

void OAIStartManualTransferRunsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartManualTransferRunsRequest::fromJsonObject(QJsonObject json) {

    m_requested_run_time_isValid = ::OpenAPI::fromJsonValue(m_requested_run_time, json[QString("requestedRunTime")]);
    m_requested_run_time_isSet = !json[QString("requestedRunTime")].isNull() && m_requested_run_time_isValid;

    m_requested_time_range_isValid = ::OpenAPI::fromJsonValue(m_requested_time_range, json[QString("requestedTimeRange")]);
    m_requested_time_range_isSet = !json[QString("requestedTimeRange")].isNull() && m_requested_time_range_isValid;
}

QString OAIStartManualTransferRunsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartManualTransferRunsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_requested_run_time_isSet) {
        obj.insert(QString("requestedRunTime"), ::OpenAPI::toJsonValue(m_requested_run_time));
    }
    if (m_requested_time_range.isSet()) {
        obj.insert(QString("requestedTimeRange"), ::OpenAPI::toJsonValue(m_requested_time_range));
    }
    return obj;
}

QString OAIStartManualTransferRunsRequest::getRequestedRunTime() const {
    return m_requested_run_time;
}
void OAIStartManualTransferRunsRequest::setRequestedRunTime(const QString &requested_run_time) {
    m_requested_run_time = requested_run_time;
    m_requested_run_time_isSet = true;
}

bool OAIStartManualTransferRunsRequest::is_requested_run_time_Set() const{
    return m_requested_run_time_isSet;
}

bool OAIStartManualTransferRunsRequest::is_requested_run_time_Valid() const{
    return m_requested_run_time_isValid;
}

OAITimeRange OAIStartManualTransferRunsRequest::getRequestedTimeRange() const {
    return m_requested_time_range;
}
void OAIStartManualTransferRunsRequest::setRequestedTimeRange(const OAITimeRange &requested_time_range) {
    m_requested_time_range = requested_time_range;
    m_requested_time_range_isSet = true;
}

bool OAIStartManualTransferRunsRequest::is_requested_time_range_Set() const{
    return m_requested_time_range_isSet;
}

bool OAIStartManualTransferRunsRequest::is_requested_time_range_Valid() const{
    return m_requested_time_range_isValid;
}

bool OAIStartManualTransferRunsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requested_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartManualTransferRunsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
