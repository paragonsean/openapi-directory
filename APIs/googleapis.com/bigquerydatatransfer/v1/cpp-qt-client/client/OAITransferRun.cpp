/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferRun::OAITransferRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferRun::OAITransferRun() {
    this->initializeModel();
}

OAITransferRun::~OAITransferRun() {}

void OAITransferRun::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_destination_dataset_id_isSet = false;
    m_destination_dataset_id_isValid = false;

    m_email_preferences_isSet = false;
    m_email_preferences_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_status_isSet = false;
    m_error_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_pubsub_topic_isSet = false;
    m_notification_pubsub_topic_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_run_time_isSet = false;
    m_run_time_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_schedule_time_isSet = false;
    m_schedule_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITransferRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferRun::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_destination_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_destination_dataset_id, json[QString("destinationDatasetId")]);
    m_destination_dataset_id_isSet = !json[QString("destinationDatasetId")].isNull() && m_destination_dataset_id_isValid;

    m_email_preferences_isValid = ::OpenAPI::fromJsonValue(m_email_preferences, json[QString("emailPreferences")]);
    m_email_preferences_isSet = !json[QString("emailPreferences")].isNull() && m_email_preferences_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_status_isValid = ::OpenAPI::fromJsonValue(m_error_status, json[QString("errorStatus")]);
    m_error_status_isSet = !json[QString("errorStatus")].isNull() && m_error_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_notification_pubsub_topic, json[QString("notificationPubsubTopic")]);
    m_notification_pubsub_topic_isSet = !json[QString("notificationPubsubTopic")].isNull() && m_notification_pubsub_topic_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_run_time_isValid = ::OpenAPI::fromJsonValue(m_run_time, json[QString("runTime")]);
    m_run_time_isSet = !json[QString("runTime")].isNull() && m_run_time_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_schedule_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_time, json[QString("scheduleTime")]);
    m_schedule_time_isSet = !json[QString("scheduleTime")].isNull() && m_schedule_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAITransferRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferRun::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_destination_dataset_id_isSet) {
        obj.insert(QString("destinationDatasetId"), ::OpenAPI::toJsonValue(m_destination_dataset_id));
    }
    if (m_email_preferences.isSet()) {
        obj.insert(QString("emailPreferences"), ::OpenAPI::toJsonValue(m_email_preferences));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_status.isSet()) {
        obj.insert(QString("errorStatus"), ::OpenAPI::toJsonValue(m_error_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_pubsub_topic_isSet) {
        obj.insert(QString("notificationPubsubTopic"), ::OpenAPI::toJsonValue(m_notification_pubsub_topic));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_run_time_isSet) {
        obj.insert(QString("runTime"), ::OpenAPI::toJsonValue(m_run_time));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_schedule_time_isSet) {
        obj.insert(QString("scheduleTime"), ::OpenAPI::toJsonValue(m_schedule_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAITransferRun::getDataSourceId() const {
    return m_data_source_id;
}
void OAITransferRun::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAITransferRun::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAITransferRun::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAITransferRun::getDestinationDatasetId() const {
    return m_destination_dataset_id;
}
void OAITransferRun::setDestinationDatasetId(const QString &destination_dataset_id) {
    m_destination_dataset_id = destination_dataset_id;
    m_destination_dataset_id_isSet = true;
}

bool OAITransferRun::is_destination_dataset_id_Set() const{
    return m_destination_dataset_id_isSet;
}

bool OAITransferRun::is_destination_dataset_id_Valid() const{
    return m_destination_dataset_id_isValid;
}

OAIEmailPreferences OAITransferRun::getEmailPreferences() const {
    return m_email_preferences;
}
void OAITransferRun::setEmailPreferences(const OAIEmailPreferences &email_preferences) {
    m_email_preferences = email_preferences;
    m_email_preferences_isSet = true;
}

bool OAITransferRun::is_email_preferences_Set() const{
    return m_email_preferences_isSet;
}

bool OAITransferRun::is_email_preferences_Valid() const{
    return m_email_preferences_isValid;
}

QString OAITransferRun::getEndTime() const {
    return m_end_time;
}
void OAITransferRun::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITransferRun::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITransferRun::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIStatus OAITransferRun::getErrorStatus() const {
    return m_error_status;
}
void OAITransferRun::setErrorStatus(const OAIStatus &error_status) {
    m_error_status = error_status;
    m_error_status_isSet = true;
}

bool OAITransferRun::is_error_status_Set() const{
    return m_error_status_isSet;
}

bool OAITransferRun::is_error_status_Valid() const{
    return m_error_status_isValid;
}

QString OAITransferRun::getName() const {
    return m_name;
}
void OAITransferRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransferRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransferRun::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITransferRun::getNotificationPubsubTopic() const {
    return m_notification_pubsub_topic;
}
void OAITransferRun::setNotificationPubsubTopic(const QString &notification_pubsub_topic) {
    m_notification_pubsub_topic = notification_pubsub_topic;
    m_notification_pubsub_topic_isSet = true;
}

bool OAITransferRun::is_notification_pubsub_topic_Set() const{
    return m_notification_pubsub_topic_isSet;
}

bool OAITransferRun::is_notification_pubsub_topic_Valid() const{
    return m_notification_pubsub_topic_isValid;
}

QMap<QString, QJsonValue> OAITransferRun::getParams() const {
    return m_params;
}
void OAITransferRun::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAITransferRun::is_params_Set() const{
    return m_params_isSet;
}

bool OAITransferRun::is_params_Valid() const{
    return m_params_isValid;
}

QString OAITransferRun::getRunTime() const {
    return m_run_time;
}
void OAITransferRun::setRunTime(const QString &run_time) {
    m_run_time = run_time;
    m_run_time_isSet = true;
}

bool OAITransferRun::is_run_time_Set() const{
    return m_run_time_isSet;
}

bool OAITransferRun::is_run_time_Valid() const{
    return m_run_time_isValid;
}

QString OAITransferRun::getSchedule() const {
    return m_schedule;
}
void OAITransferRun::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAITransferRun::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAITransferRun::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAITransferRun::getScheduleTime() const {
    return m_schedule_time;
}
void OAITransferRun::setScheduleTime(const QString &schedule_time) {
    m_schedule_time = schedule_time;
    m_schedule_time_isSet = true;
}

bool OAITransferRun::is_schedule_time_Set() const{
    return m_schedule_time_isSet;
}

bool OAITransferRun::is_schedule_time_Valid() const{
    return m_schedule_time_isValid;
}

QString OAITransferRun::getStartTime() const {
    return m_start_time;
}
void OAITransferRun::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITransferRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITransferRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITransferRun::getState() const {
    return m_state;
}
void OAITransferRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITransferRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAITransferRun::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITransferRun::getUpdateTime() const {
    return m_update_time;
}
void OAITransferRun::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAITransferRun::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAITransferRun::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAITransferRun::getUserId() const {
    return m_user_id;
}
void OAITransferRun::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITransferRun::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITransferRun::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITransferRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
