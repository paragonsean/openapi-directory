/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_data_refresh_type_isSet = false;
    m_data_refresh_type_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_default_data_refresh_window_days_isSet = false;
    m_default_data_refresh_window_days_isValid = false;

    m_default_schedule_isSet = false;
    m_default_schedule_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_help_url_isSet = false;
    m_help_url_isValid = false;

    m_manual_runs_disabled_isSet = false;
    m_manual_runs_disabled_isValid = false;

    m_minimum_schedule_interval_isSet = false;
    m_minimum_schedule_interval_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_supports_custom_schedule_isSet = false;
    m_supports_custom_schedule_isValid = false;

    m_supports_multiple_transfers_isSet = false;
    m_supports_multiple_transfers_isValid = false;

    m_transfer_type_isSet = false;
    m_transfer_type_isValid = false;

    m_update_deadline_seconds_isSet = false;
    m_update_deadline_seconds_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("authorizationType")]);
    m_authorization_type_isSet = !json[QString("authorizationType")].isNull() && m_authorization_type_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_data_refresh_type_isValid = ::OpenAPI::fromJsonValue(m_data_refresh_type, json[QString("dataRefreshType")]);
    m_data_refresh_type_isSet = !json[QString("dataRefreshType")].isNull() && m_data_refresh_type_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_default_data_refresh_window_days_isValid = ::OpenAPI::fromJsonValue(m_default_data_refresh_window_days, json[QString("defaultDataRefreshWindowDays")]);
    m_default_data_refresh_window_days_isSet = !json[QString("defaultDataRefreshWindowDays")].isNull() && m_default_data_refresh_window_days_isValid;

    m_default_schedule_isValid = ::OpenAPI::fromJsonValue(m_default_schedule, json[QString("defaultSchedule")]);
    m_default_schedule_isSet = !json[QString("defaultSchedule")].isNull() && m_default_schedule_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_help_url_isValid = ::OpenAPI::fromJsonValue(m_help_url, json[QString("helpUrl")]);
    m_help_url_isSet = !json[QString("helpUrl")].isNull() && m_help_url_isValid;

    m_manual_runs_disabled_isValid = ::OpenAPI::fromJsonValue(m_manual_runs_disabled, json[QString("manualRunsDisabled")]);
    m_manual_runs_disabled_isSet = !json[QString("manualRunsDisabled")].isNull() && m_manual_runs_disabled_isValid;

    m_minimum_schedule_interval_isValid = ::OpenAPI::fromJsonValue(m_minimum_schedule_interval, json[QString("minimumScheduleInterval")]);
    m_minimum_schedule_interval_isSet = !json[QString("minimumScheduleInterval")].isNull() && m_minimum_schedule_interval_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_supports_custom_schedule_isValid = ::OpenAPI::fromJsonValue(m_supports_custom_schedule, json[QString("supportsCustomSchedule")]);
    m_supports_custom_schedule_isSet = !json[QString("supportsCustomSchedule")].isNull() && m_supports_custom_schedule_isValid;

    m_supports_multiple_transfers_isValid = ::OpenAPI::fromJsonValue(m_supports_multiple_transfers, json[QString("supportsMultipleTransfers")]);
    m_supports_multiple_transfers_isSet = !json[QString("supportsMultipleTransfers")].isNull() && m_supports_multiple_transfers_isValid;

    m_transfer_type_isValid = ::OpenAPI::fromJsonValue(m_transfer_type, json[QString("transferType")]);
    m_transfer_type_isSet = !json[QString("transferType")].isNull() && m_transfer_type_isValid;

    m_update_deadline_seconds_isValid = ::OpenAPI::fromJsonValue(m_update_deadline_seconds, json[QString("updateDeadlineSeconds")]);
    m_update_deadline_seconds_isSet = !json[QString("updateDeadlineSeconds")].isNull() && m_update_deadline_seconds_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_type_isSet) {
        obj.insert(QString("authorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_data_refresh_type_isSet) {
        obj.insert(QString("dataRefreshType"), ::OpenAPI::toJsonValue(m_data_refresh_type));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_default_data_refresh_window_days_isSet) {
        obj.insert(QString("defaultDataRefreshWindowDays"), ::OpenAPI::toJsonValue(m_default_data_refresh_window_days));
    }
    if (m_default_schedule_isSet) {
        obj.insert(QString("defaultSchedule"), ::OpenAPI::toJsonValue(m_default_schedule));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_help_url_isSet) {
        obj.insert(QString("helpUrl"), ::OpenAPI::toJsonValue(m_help_url));
    }
    if (m_manual_runs_disabled_isSet) {
        obj.insert(QString("manualRunsDisabled"), ::OpenAPI::toJsonValue(m_manual_runs_disabled));
    }
    if (m_minimum_schedule_interval_isSet) {
        obj.insert(QString("minimumScheduleInterval"), ::OpenAPI::toJsonValue(m_minimum_schedule_interval));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_supports_custom_schedule_isSet) {
        obj.insert(QString("supportsCustomSchedule"), ::OpenAPI::toJsonValue(m_supports_custom_schedule));
    }
    if (m_supports_multiple_transfers_isSet) {
        obj.insert(QString("supportsMultipleTransfers"), ::OpenAPI::toJsonValue(m_supports_multiple_transfers));
    }
    if (m_transfer_type_isSet) {
        obj.insert(QString("transferType"), ::OpenAPI::toJsonValue(m_transfer_type));
    }
    if (m_update_deadline_seconds_isSet) {
        obj.insert(QString("updateDeadlineSeconds"), ::OpenAPI::toJsonValue(m_update_deadline_seconds));
    }
    return obj;
}

QString OAIDataSource::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIDataSource::setAuthorizationType(const QString &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIDataSource::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIDataSource::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

QString OAIDataSource::getClientId() const {
    return m_client_id;
}
void OAIDataSource::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIDataSource::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIDataSource::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIDataSource::getDataRefreshType() const {
    return m_data_refresh_type;
}
void OAIDataSource::setDataRefreshType(const QString &data_refresh_type) {
    m_data_refresh_type = data_refresh_type;
    m_data_refresh_type_isSet = true;
}

bool OAIDataSource::is_data_refresh_type_Set() const{
    return m_data_refresh_type_isSet;
}

bool OAIDataSource::is_data_refresh_type_Valid() const{
    return m_data_refresh_type_isValid;
}

QString OAIDataSource::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDataSource::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDataSource::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDataSource::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

qint32 OAIDataSource::getDefaultDataRefreshWindowDays() const {
    return m_default_data_refresh_window_days;
}
void OAIDataSource::setDefaultDataRefreshWindowDays(const qint32 &default_data_refresh_window_days) {
    m_default_data_refresh_window_days = default_data_refresh_window_days;
    m_default_data_refresh_window_days_isSet = true;
}

bool OAIDataSource::is_default_data_refresh_window_days_Set() const{
    return m_default_data_refresh_window_days_isSet;
}

bool OAIDataSource::is_default_data_refresh_window_days_Valid() const{
    return m_default_data_refresh_window_days_isValid;
}

QString OAIDataSource::getDefaultSchedule() const {
    return m_default_schedule;
}
void OAIDataSource::setDefaultSchedule(const QString &default_schedule) {
    m_default_schedule = default_schedule;
    m_default_schedule_isSet = true;
}

bool OAIDataSource::is_default_schedule_Set() const{
    return m_default_schedule_isSet;
}

bool OAIDataSource::is_default_schedule_Valid() const{
    return m_default_schedule_isValid;
}

QString OAIDataSource::getDescription() const {
    return m_description;
}
void OAIDataSource::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataSource::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataSource::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataSource::getDisplayName() const {
    return m_display_name;
}
void OAIDataSource::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDataSource::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDataSource::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDataSource::getHelpUrl() const {
    return m_help_url;
}
void OAIDataSource::setHelpUrl(const QString &help_url) {
    m_help_url = help_url;
    m_help_url_isSet = true;
}

bool OAIDataSource::is_help_url_Set() const{
    return m_help_url_isSet;
}

bool OAIDataSource::is_help_url_Valid() const{
    return m_help_url_isValid;
}

bool OAIDataSource::isManualRunsDisabled() const {
    return m_manual_runs_disabled;
}
void OAIDataSource::setManualRunsDisabled(const bool &manual_runs_disabled) {
    m_manual_runs_disabled = manual_runs_disabled;
    m_manual_runs_disabled_isSet = true;
}

bool OAIDataSource::is_manual_runs_disabled_Set() const{
    return m_manual_runs_disabled_isSet;
}

bool OAIDataSource::is_manual_runs_disabled_Valid() const{
    return m_manual_runs_disabled_isValid;
}

QString OAIDataSource::getMinimumScheduleInterval() const {
    return m_minimum_schedule_interval;
}
void OAIDataSource::setMinimumScheduleInterval(const QString &minimum_schedule_interval) {
    m_minimum_schedule_interval = minimum_schedule_interval;
    m_minimum_schedule_interval_isSet = true;
}

bool OAIDataSource::is_minimum_schedule_interval_Set() const{
    return m_minimum_schedule_interval_isSet;
}

bool OAIDataSource::is_minimum_schedule_interval_Valid() const{
    return m_minimum_schedule_interval_isValid;
}

QString OAIDataSource::getName() const {
    return m_name;
}
void OAIDataSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSource::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIDataSourceParameter> OAIDataSource::getParameters() const {
    return m_parameters;
}
void OAIDataSource::setParameters(const QList<OAIDataSourceParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDataSource::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDataSource::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<QString> OAIDataSource::getScopes() const {
    return m_scopes;
}
void OAIDataSource::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIDataSource::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIDataSource::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIDataSource::isSupportsCustomSchedule() const {
    return m_supports_custom_schedule;
}
void OAIDataSource::setSupportsCustomSchedule(const bool &supports_custom_schedule) {
    m_supports_custom_schedule = supports_custom_schedule;
    m_supports_custom_schedule_isSet = true;
}

bool OAIDataSource::is_supports_custom_schedule_Set() const{
    return m_supports_custom_schedule_isSet;
}

bool OAIDataSource::is_supports_custom_schedule_Valid() const{
    return m_supports_custom_schedule_isValid;
}

bool OAIDataSource::isSupportsMultipleTransfers() const {
    return m_supports_multiple_transfers;
}
void OAIDataSource::setSupportsMultipleTransfers(const bool &supports_multiple_transfers) {
    m_supports_multiple_transfers = supports_multiple_transfers;
    m_supports_multiple_transfers_isSet = true;
}

bool OAIDataSource::is_supports_multiple_transfers_Set() const{
    return m_supports_multiple_transfers_isSet;
}

bool OAIDataSource::is_supports_multiple_transfers_Valid() const{
    return m_supports_multiple_transfers_isValid;
}

QString OAIDataSource::getTransferType() const {
    return m_transfer_type;
}
void OAIDataSource::setTransferType(const QString &transfer_type) {
    m_transfer_type = transfer_type;
    m_transfer_type_isSet = true;
}

bool OAIDataSource::is_transfer_type_Set() const{
    return m_transfer_type_isSet;
}

bool OAIDataSource::is_transfer_type_Valid() const{
    return m_transfer_type_isValid;
}

qint32 OAIDataSource::getUpdateDeadlineSeconds() const {
    return m_update_deadline_seconds;
}
void OAIDataSource::setUpdateDeadlineSeconds(const qint32 &update_deadline_seconds) {
    m_update_deadline_seconds = update_deadline_seconds;
    m_update_deadline_seconds_isSet = true;
}

bool OAIDataSource::is_update_deadline_seconds_Set() const{
    return m_update_deadline_seconds_isSet;
}

bool OAIDataSource::is_update_deadline_seconds_Valid() const{
    return m_update_deadline_seconds_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_refresh_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_data_refresh_window_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_runs_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_schedule_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_custom_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_multiple_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_deadline_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
