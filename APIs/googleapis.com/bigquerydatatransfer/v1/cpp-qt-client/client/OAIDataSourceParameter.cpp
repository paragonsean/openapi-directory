/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceParameter::OAIDataSourceParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceParameter::OAIDataSourceParameter() {
    this->initializeModel();
}

OAIDataSourceParameter::~OAIDataSourceParameter() {}

void OAIDataSourceParameter::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_immutable_isSet = false;
    m_immutable_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_param_id_isSet = false;
    m_param_id_isValid = false;

    m_recurse_isSet = false;
    m_recurse_isValid = false;

    m_repeated_isSet = false;
    m_repeated_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validation_description_isSet = false;
    m_validation_description_isValid = false;

    m_validation_help_url_isSet = false;
    m_validation_help_url_isValid = false;

    m_validation_regex_isSet = false;
    m_validation_regex_isValid = false;
}

void OAIDataSourceParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceParameter::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_immutable_isValid = ::OpenAPI::fromJsonValue(m_immutable, json[QString("immutable")]);
    m_immutable_isSet = !json[QString("immutable")].isNull() && m_immutable_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_param_id_isValid = ::OpenAPI::fromJsonValue(m_param_id, json[QString("paramId")]);
    m_param_id_isSet = !json[QString("paramId")].isNull() && m_param_id_isValid;

    m_recurse_isValid = ::OpenAPI::fromJsonValue(m_recurse, json[QString("recurse")]);
    m_recurse_isSet = !json[QString("recurse")].isNull() && m_recurse_isValid;

    m_repeated_isValid = ::OpenAPI::fromJsonValue(m_repeated, json[QString("repeated")]);
    m_repeated_isSet = !json[QString("repeated")].isNull() && m_repeated_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validation_description_isValid = ::OpenAPI::fromJsonValue(m_validation_description, json[QString("validationDescription")]);
    m_validation_description_isSet = !json[QString("validationDescription")].isNull() && m_validation_description_isValid;

    m_validation_help_url_isValid = ::OpenAPI::fromJsonValue(m_validation_help_url, json[QString("validationHelpUrl")]);
    m_validation_help_url_isSet = !json[QString("validationHelpUrl")].isNull() && m_validation_help_url_isValid;

    m_validation_regex_isValid = ::OpenAPI::fromJsonValue(m_validation_regex, json[QString("validationRegex")]);
    m_validation_regex_isSet = !json[QString("validationRegex")].isNull() && m_validation_regex_isValid;
}

QString OAIDataSourceParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_immutable_isSet) {
        obj.insert(QString("immutable"), ::OpenAPI::toJsonValue(m_immutable));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_param_id_isSet) {
        obj.insert(QString("paramId"), ::OpenAPI::toJsonValue(m_param_id));
    }
    if (m_recurse_isSet) {
        obj.insert(QString("recurse"), ::OpenAPI::toJsonValue(m_recurse));
    }
    if (m_repeated_isSet) {
        obj.insert(QString("repeated"), ::OpenAPI::toJsonValue(m_repeated));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validation_description_isSet) {
        obj.insert(QString("validationDescription"), ::OpenAPI::toJsonValue(m_validation_description));
    }
    if (m_validation_help_url_isSet) {
        obj.insert(QString("validationHelpUrl"), ::OpenAPI::toJsonValue(m_validation_help_url));
    }
    if (m_validation_regex_isSet) {
        obj.insert(QString("validationRegex"), ::OpenAPI::toJsonValue(m_validation_regex));
    }
    return obj;
}

QList<QString> OAIDataSourceParameter::getAllowedValues() const {
    return m_allowed_values;
}
void OAIDataSourceParameter::setAllowedValues(const QList<QString> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIDataSourceParameter::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIDataSourceParameter::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

bool OAIDataSourceParameter::isDeprecated() const {
    return m_deprecated;
}
void OAIDataSourceParameter::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIDataSourceParameter::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIDataSourceParameter::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIDataSourceParameter::getDescription() const {
    return m_description;
}
void OAIDataSourceParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataSourceParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataSourceParameter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataSourceParameter::getDisplayName() const {
    return m_display_name;
}
void OAIDataSourceParameter::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDataSourceParameter::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDataSourceParameter::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIDataSourceParameter> OAIDataSourceParameter::getFields() const {
    return m_fields;
}
void OAIDataSourceParameter::setFields(const QList<OAIDataSourceParameter> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIDataSourceParameter::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIDataSourceParameter::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIDataSourceParameter::isImmutable() const {
    return m_immutable;
}
void OAIDataSourceParameter::setImmutable(const bool &immutable) {
    m_immutable = immutable;
    m_immutable_isSet = true;
}

bool OAIDataSourceParameter::is_immutable_Set() const{
    return m_immutable_isSet;
}

bool OAIDataSourceParameter::is_immutable_Valid() const{
    return m_immutable_isValid;
}

double OAIDataSourceParameter::getMaxValue() const {
    return m_max_value;
}
void OAIDataSourceParameter::setMaxValue(const double &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIDataSourceParameter::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIDataSourceParameter::is_max_value_Valid() const{
    return m_max_value_isValid;
}

double OAIDataSourceParameter::getMinValue() const {
    return m_min_value;
}
void OAIDataSourceParameter::setMinValue(const double &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIDataSourceParameter::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIDataSourceParameter::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIDataSourceParameter::getParamId() const {
    return m_param_id;
}
void OAIDataSourceParameter::setParamId(const QString &param_id) {
    m_param_id = param_id;
    m_param_id_isSet = true;
}

bool OAIDataSourceParameter::is_param_id_Set() const{
    return m_param_id_isSet;
}

bool OAIDataSourceParameter::is_param_id_Valid() const{
    return m_param_id_isValid;
}

bool OAIDataSourceParameter::isRecurse() const {
    return m_recurse;
}
void OAIDataSourceParameter::setRecurse(const bool &recurse) {
    m_recurse = recurse;
    m_recurse_isSet = true;
}

bool OAIDataSourceParameter::is_recurse_Set() const{
    return m_recurse_isSet;
}

bool OAIDataSourceParameter::is_recurse_Valid() const{
    return m_recurse_isValid;
}

bool OAIDataSourceParameter::isRepeated() const {
    return m_repeated;
}
void OAIDataSourceParameter::setRepeated(const bool &repeated) {
    m_repeated = repeated;
    m_repeated_isSet = true;
}

bool OAIDataSourceParameter::is_repeated_Set() const{
    return m_repeated_isSet;
}

bool OAIDataSourceParameter::is_repeated_Valid() const{
    return m_repeated_isValid;
}

bool OAIDataSourceParameter::isRequired() const {
    return m_required;
}
void OAIDataSourceParameter::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIDataSourceParameter::is_required_Set() const{
    return m_required_isSet;
}

bool OAIDataSourceParameter::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIDataSourceParameter::getType() const {
    return m_type;
}
void OAIDataSourceParameter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataSourceParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataSourceParameter::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDataSourceParameter::getValidationDescription() const {
    return m_validation_description;
}
void OAIDataSourceParameter::setValidationDescription(const QString &validation_description) {
    m_validation_description = validation_description;
    m_validation_description_isSet = true;
}

bool OAIDataSourceParameter::is_validation_description_Set() const{
    return m_validation_description_isSet;
}

bool OAIDataSourceParameter::is_validation_description_Valid() const{
    return m_validation_description_isValid;
}

QString OAIDataSourceParameter::getValidationHelpUrl() const {
    return m_validation_help_url;
}
void OAIDataSourceParameter::setValidationHelpUrl(const QString &validation_help_url) {
    m_validation_help_url = validation_help_url;
    m_validation_help_url_isSet = true;
}

bool OAIDataSourceParameter::is_validation_help_url_Set() const{
    return m_validation_help_url_isSet;
}

bool OAIDataSourceParameter::is_validation_help_url_Valid() const{
    return m_validation_help_url_isValid;
}

QString OAIDataSourceParameter::getValidationRegex() const {
    return m_validation_regex;
}
void OAIDataSourceParameter::setValidationRegex(const QString &validation_regex) {
    m_validation_regex = validation_regex;
    m_validation_regex_isSet = true;
}

bool OAIDataSourceParameter::is_validation_regex_Set() const{
    return m_validation_regex_isSet;
}

bool OAIDataSourceParameter::is_validation_regex_Valid() const{
    return m_validation_regex_isValid;
}

bool OAIDataSourceParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_param_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_help_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_regex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
