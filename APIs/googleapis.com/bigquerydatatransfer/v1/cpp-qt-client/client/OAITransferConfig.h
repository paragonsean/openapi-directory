/**
 * BigQuery Data Transfer API
 * Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransferConfig.h
 *
 * Represents a data transfer configuration. A transfer configuration contains all metadata needed to perform a data transfer. For example, &#x60;destination_dataset_id&#x60; specifies where data should be stored. When a new transfer configuration is created, the specified &#x60;destination_dataset_id&#x60; is created when needed and shared with the appropriate data source service account.
 */

#ifndef OAITransferConfig_H
#define OAITransferConfig_H

#include <QJsonObject>

#include "OAIEmailPreferences.h"
#include "OAIEncryptionConfiguration.h"
#include "OAIScheduleOptions.h"
#include "OAIUserInfo.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEmailPreferences;
class OAIEncryptionConfiguration;
class OAIUserInfo;
class OAIScheduleOptions;

class OAITransferConfig : public OAIObject {
public:
    OAITransferConfig();
    OAITransferConfig(QString json);
    ~OAITransferConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDataRefreshWindowDays() const;
    void setDataRefreshWindowDays(const qint32 &data_refresh_window_days);
    bool is_data_refresh_window_days_Set() const;
    bool is_data_refresh_window_days_Valid() const;

    QString getDataSourceId() const;
    void setDataSourceId(const QString &data_source_id);
    bool is_data_source_id_Set() const;
    bool is_data_source_id_Valid() const;

    QString getDatasetRegion() const;
    void setDatasetRegion(const QString &dataset_region);
    bool is_dataset_region_Set() const;
    bool is_dataset_region_Valid() const;

    QString getDestinationDatasetId() const;
    void setDestinationDatasetId(const QString &destination_dataset_id);
    bool is_destination_dataset_id_Set() const;
    bool is_destination_dataset_id_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIEmailPreferences getEmailPreferences() const;
    void setEmailPreferences(const OAIEmailPreferences &email_preferences);
    bool is_email_preferences_Set() const;
    bool is_email_preferences_Valid() const;

    OAIEncryptionConfiguration getEncryptionConfiguration() const;
    void setEncryptionConfiguration(const OAIEncryptionConfiguration &encryption_configuration);
    bool is_encryption_configuration_Set() const;
    bool is_encryption_configuration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNextRunTime() const;
    void setNextRunTime(const QString &next_run_time);
    bool is_next_run_time_Set() const;
    bool is_next_run_time_Valid() const;

    QString getNotificationPubsubTopic() const;
    void setNotificationPubsubTopic(const QString &notification_pubsub_topic);
    bool is_notification_pubsub_topic_Set() const;
    bool is_notification_pubsub_topic_Valid() const;

    OAIUserInfo getOwnerInfo() const;
    void setOwnerInfo(const OAIUserInfo &owner_info);
    bool is_owner_info_Set() const;
    bool is_owner_info_Valid() const;

    QMap<QString, QJsonValue> getParams() const;
    void setParams(const QMap<QString, QJsonValue> &params);
    bool is_params_Set() const;
    bool is_params_Valid() const;

    QString getSchedule() const;
    void setSchedule(const QString &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    OAIScheduleOptions getScheduleOptions() const;
    void setScheduleOptions(const OAIScheduleOptions &schedule_options);
    bool is_schedule_options_Set() const;
    bool is_schedule_options_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_data_refresh_window_days;
    bool m_data_refresh_window_days_isSet;
    bool m_data_refresh_window_days_isValid;

    QString m_data_source_id;
    bool m_data_source_id_isSet;
    bool m_data_source_id_isValid;

    QString m_dataset_region;
    bool m_dataset_region_isSet;
    bool m_dataset_region_isValid;

    QString m_destination_dataset_id;
    bool m_destination_dataset_id_isSet;
    bool m_destination_dataset_id_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIEmailPreferences m_email_preferences;
    bool m_email_preferences_isSet;
    bool m_email_preferences_isValid;

    OAIEncryptionConfiguration m_encryption_configuration;
    bool m_encryption_configuration_isSet;
    bool m_encryption_configuration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_next_run_time;
    bool m_next_run_time_isSet;
    bool m_next_run_time_isValid;

    QString m_notification_pubsub_topic;
    bool m_notification_pubsub_topic_isSet;
    bool m_notification_pubsub_topic_isValid;

    OAIUserInfo m_owner_info;
    bool m_owner_info_isSet;
    bool m_owner_info_isValid;

    QMap<QString, QJsonValue> m_params;
    bool m_params_isSet;
    bool m_params_isValid;

    QString m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    OAIScheduleOptions m_schedule_options;
    bool m_schedule_options_isSet;
    bool m_schedule_options_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransferConfig)

#endif // OAITransferConfig_H
