/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OutputConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a sink used to export traces to a BigQuery dataset. The sink must be created within a project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:50.496087-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TraceSink {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_CONFIG = "outputConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONFIG)
  private OutputConfig outputConfig;

  public static final String SERIALIZED_NAME_WRITER_IDENTITY = "writerIdentity";
  @SerializedName(SERIALIZED_NAME_WRITER_IDENTITY)
  private String writerIdentity;

  public TraceSink() {
  }

  public TraceSink(
     String writerIdentity
  ) {
    this();
    this.writerIdentity = writerIdentity;
  }

  public TraceSink name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The canonical sink resource name, unique within the project. Must be of the form: projects/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: &#x60;\&quot;projects/12345/traceSinks/my-project-trace-sink\&quot;&#x60;. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TraceSink outputConfig(OutputConfig outputConfig) {
    this.outputConfig = outputConfig;
    return this;
  }

  /**
   * Get outputConfig
   * @return outputConfig
   */
  @javax.annotation.Nullable
  public OutputConfig getOutputConfig() {
    return outputConfig;
  }

  public void setOutputConfig(OutputConfig outputConfig) {
    this.outputConfig = outputConfig;
  }


  /**
   * Output only. A service account name for exporting the data. This field is set by sinks.create and sinks.update. The service account will need to be granted write access to the destination specified in the output configuration, see [Granting access for a resource](/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource). To create tables and to write data, this account needs the &#x60;dataEditor&#x60; role. Read more about roles in the [BigQuery documentation](https://cloud.google.com/bigquery/docs/access-control). E.g.: \&quot;service-00000001@00000002.iam.gserviceaccount.com\&quot;
   * @return writerIdentity
   */
  @javax.annotation.Nullable
  public String getWriterIdentity() {
    return writerIdentity;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceSink traceSink = (TraceSink) o;
    return Objects.equals(this.name, traceSink.name) &&
        Objects.equals(this.outputConfig, traceSink.outputConfig) &&
        Objects.equals(this.writerIdentity, traceSink.writerIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, outputConfig, writerIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceSink {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputConfig: ").append(toIndentedString(outputConfig)).append("\n");
    sb.append("    writerIdentity: ").append(toIndentedString(writerIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("outputConfig");
    openapiFields.add("writerIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TraceSink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TraceSink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TraceSink is not found in the empty JSON string", TraceSink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TraceSink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TraceSink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `outputConfig`
      if (jsonObj.get("outputConfig") != null && !jsonObj.get("outputConfig").isJsonNull()) {
        OutputConfig.validateJsonElement(jsonObj.get("outputConfig"));
      }
      if ((jsonObj.get("writerIdentity") != null && !jsonObj.get("writerIdentity").isJsonNull()) && !jsonObj.get("writerIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writerIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writerIdentity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TraceSink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TraceSink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TraceSink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TraceSink.class));

       return (TypeAdapter<T>) new TypeAdapter<TraceSink>() {
           @Override
           public void write(JsonWriter out, TraceSink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TraceSink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TraceSink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TraceSink
   * @throws IOException if the JSON string is invalid with respect to TraceSink
   */
  public static TraceSink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TraceSink.class);
  }

  /**
   * Convert an instance of TraceSink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

