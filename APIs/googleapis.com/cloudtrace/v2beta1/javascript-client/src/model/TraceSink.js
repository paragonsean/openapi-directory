/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutputConfig from './OutputConfig';

/**
 * The TraceSink model module.
 * @module model/TraceSink
 * @version v2beta1
 */
class TraceSink {
    /**
     * Constructs a new <code>TraceSink</code>.
     * Describes a sink used to export traces to a BigQuery dataset. The sink must be created within a project.
     * @alias module:model/TraceSink
     */
    constructor() { 
        
        TraceSink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TraceSink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TraceSink} obj Optional instance to populate.
     * @return {module:model/TraceSink} The populated <code>TraceSink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TraceSink();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputConfig')) {
                obj['outputConfig'] = OutputConfig.constructFromObject(data['outputConfig']);
            }
            if (data.hasOwnProperty('writerIdentity')) {
                obj['writerIdentity'] = ApiClient.convertToType(data['writerIdentity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TraceSink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TraceSink</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `outputConfig`
        if (data['outputConfig']) { // data not null
          OutputConfig.validateJSON(data['outputConfig']);
        }
        // ensure the json data is a string
        if (data['writerIdentity'] && !(typeof data['writerIdentity'] === 'string' || data['writerIdentity'] instanceof String)) {
            throw new Error("Expected the field `writerIdentity` to be a primitive type in the JSON string but got " + data['writerIdentity']);
        }

        return true;
    }


}



/**
 * Required. The canonical sink resource name, unique within the project. Must be of the form: projects/[PROJECT_NUMBER]/traceSinks/[SINK_ID]. E.g.: `\"projects/12345/traceSinks/my-project-trace-sink\"`. Sink identifiers are limited to 256 characters and can include only the following characters: upper and lower-case alphanumeric characters, underscores, hyphens, and periods.
 * @member {String} name
 */
TraceSink.prototype['name'] = undefined;

/**
 * @member {module:model/OutputConfig} outputConfig
 */
TraceSink.prototype['outputConfig'] = undefined;

/**
 * Output only. A service account name for exporting the data. This field is set by sinks.create and sinks.update. The service account will need to be granted write access to the destination specified in the output configuration, see [Granting access for a resource](/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource). To create tables and to write data, this account needs the `dataEditor` role. Read more about roles in the [BigQuery documentation](https://cloud.google.com/bigquery/docs/access-control). E.g.: \"service-00000001@00000002.iam.gserviceaccount.com\"
 * @member {String} writerIdentity
 */
TraceSink.prototype['writerIdentity'] = undefined;






export default TraceSink;

