/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraceSink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraceSink::OAITraceSink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraceSink::OAITraceSink() {
    this->initializeModel();
}

OAITraceSink::~OAITraceSink() {}

void OAITraceSink::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_writer_identity_isSet = false;
    m_writer_identity_isValid = false;
}

void OAITraceSink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraceSink::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_writer_identity_isValid = ::OpenAPI::fromJsonValue(m_writer_identity, json[QString("writerIdentity")]);
    m_writer_identity_isSet = !json[QString("writerIdentity")].isNull() && m_writer_identity_isValid;
}

QString OAITraceSink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraceSink::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_writer_identity_isSet) {
        obj.insert(QString("writerIdentity"), ::OpenAPI::toJsonValue(m_writer_identity));
    }
    return obj;
}

QString OAITraceSink::getName() const {
    return m_name;
}
void OAITraceSink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITraceSink::is_name_Set() const{
    return m_name_isSet;
}

bool OAITraceSink::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutputConfig OAITraceSink::getOutputConfig() const {
    return m_output_config;
}
void OAITraceSink::setOutputConfig(const OAIOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAITraceSink::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAITraceSink::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAITraceSink::getWriterIdentity() const {
    return m_writer_identity;
}
void OAITraceSink::setWriterIdentity(const QString &writer_identity) {
    m_writer_identity = writer_identity;
    m_writer_identity_isSet = true;
}

bool OAITraceSink::is_writer_identity_Set() const{
    return m_writer_identity_isSet;
}

bool OAITraceSink::is_writer_identity_Valid() const{
    return m_writer_identity_isValid;
}

bool OAITraceSink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_writer_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraceSink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
