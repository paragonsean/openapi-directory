/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTraceSinksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTraceSinksResponse::OAIListTraceSinksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTraceSinksResponse::OAIListTraceSinksResponse() {
    this->initializeModel();
}

OAIListTraceSinksResponse::~OAIListTraceSinksResponse() {}

void OAIListTraceSinksResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;
}

void OAIListTraceSinksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTraceSinksResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("sinks")]);
    m_sinks_isSet = !json[QString("sinks")].isNull() && m_sinks_isValid;
}

QString OAIListTraceSinksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTraceSinksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_sinks.size() > 0) {
        obj.insert(QString("sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    return obj;
}

QString OAIListTraceSinksResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListTraceSinksResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListTraceSinksResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListTraceSinksResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAITraceSink> OAIListTraceSinksResponse::getSinks() const {
    return m_sinks;
}
void OAIListTraceSinksResponse::setSinks(const QList<OAITraceSink> &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAIListTraceSinksResponse::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAIListTraceSinksResponse::is_sinks_Valid() const{
    return m_sinks_isValid;
}

bool OAIListTraceSinksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTraceSinksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
