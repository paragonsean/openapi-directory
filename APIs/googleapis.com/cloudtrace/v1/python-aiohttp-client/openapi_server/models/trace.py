# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trace_span import TraceSpan
from openapi_server import util


class Trace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, spans: List[TraceSpan]=None, trace_id: str=None):
        """Trace - a model defined in OpenAPI

        :param project_id: The project_id of this Trace.
        :param spans: The spans of this Trace.
        :param trace_id: The trace_id of this Trace.
        """
        self.openapi_types = {
            'project_id': str,
            'spans': List[TraceSpan],
            'trace_id': str
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'spans': 'spans',
            'trace_id': 'traceId'
        }

        self._project_id = project_id
        self._spans = spans
        self._trace_id = trace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trace of this Trace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this Trace.

        Project ID of the Cloud project where the trace data is stored.

        :return: The project_id of this Trace.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Trace.

        Project ID of the Cloud project where the trace data is stored.

        :param project_id: The project_id of this Trace.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def spans(self):
        """Gets the spans of this Trace.

        Collection of spans in the trace.

        :return: The spans of this Trace.
        :rtype: List[TraceSpan]
        """
        return self._spans

    @spans.setter
    def spans(self, spans):
        """Sets the spans of this Trace.

        Collection of spans in the trace.

        :param spans: The spans of this Trace.
        :type spans: List[TraceSpan]
        """

        self._spans = spans

    @property
    def trace_id(self):
        """Gets the trace_id of this Trace.

        Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted as a 32-byte hex string. For example, `382d4f4c6b7bb2f4a972559d9085001d`. The numeric value should not be zero.

        :return: The trace_id of this Trace.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this Trace.

        Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted as a 32-byte hex string. For example, `382d4f4c6b7bb2f4a972559d9085001d`. The numeric value should not be zero.

        :param trace_id: The trace_id of this Trace.
        :type trace_id: str
        """

        self._trace_id = trace_id
