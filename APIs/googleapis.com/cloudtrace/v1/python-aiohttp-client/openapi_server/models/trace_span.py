# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TraceSpan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, kind: str=None, labels: Dict[str, str]=None, name: str=None, parent_span_id: str=None, span_id: str=None, start_time: str=None):
        """TraceSpan - a model defined in OpenAPI

        :param end_time: The end_time of this TraceSpan.
        :param kind: The kind of this TraceSpan.
        :param labels: The labels of this TraceSpan.
        :param name: The name of this TraceSpan.
        :param parent_span_id: The parent_span_id of this TraceSpan.
        :param span_id: The span_id of this TraceSpan.
        :param start_time: The start_time of this TraceSpan.
        """
        self.openapi_types = {
            'end_time': str,
            'kind': str,
            'labels': Dict[str, str],
            'name': str,
            'parent_span_id': str,
            'span_id': str,
            'start_time': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'kind': 'kind',
            'labels': 'labels',
            'name': 'name',
            'parent_span_id': 'parentSpanId',
            'span_id': 'spanId',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._kind = kind
        self._labels = labels
        self._name = name
        self._parent_span_id = parent_span_id
        self._span_id = span_id
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TraceSpan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TraceSpan of this TraceSpan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this TraceSpan.

        End time of the span in seconds and nanoseconds from the UNIX epoch.

        :return: The end_time of this TraceSpan.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TraceSpan.

        End time of the span in seconds and nanoseconds from the UNIX epoch.

        :param end_time: The end_time of this TraceSpan.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def kind(self):
        """Gets the kind of this TraceSpan.

        Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `RPC_CLIENT` and `RPC_SERVER` to identify queueing latency associated with the span.

        :return: The kind of this TraceSpan.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TraceSpan.

        Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `RPC_CLIENT` and `RPC_SERVER` to identify queueing latency associated with the span.

        :param kind: The kind of this TraceSpan.
        :type kind: str
        """
        allowed_values = ["SPAN_KIND_UNSPECIFIED", "RPC_SERVER", "RPC_CLIENT"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this TraceSpan.

        Collection of labels associated with the span. Label keys must be less than 128 bytes. Label values must be less than 16 kilobytes (10MB for `/stacktrace` values). Some predefined label keys exist, or you may create your own. When creating your own, we recommend the following formats: * `/category/product/key` for agents of well-known products (e.g. `/db/mongodb/read_size`). * `short_host/path/key` for domain-specific keys (e.g. `foo.com/myproduct/bar`) Predefined labels include: * `/agent` * `/component` * `/error/message` * `/error/name` * `/http/client_city` * `/http/client_country` * `/http/client_protocol` * `/http/client_region` * `/http/host` * `/http/method` * `/http/path` * `/http/redirected_url` * `/http/request/size` * `/http/response/size` * `/http/route` * `/http/status_code` * `/http/url` * `/http/user_agent` * `/pid` * `/stacktrace` * `/tid`

        :return: The labels of this TraceSpan.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TraceSpan.

        Collection of labels associated with the span. Label keys must be less than 128 bytes. Label values must be less than 16 kilobytes (10MB for `/stacktrace` values). Some predefined label keys exist, or you may create your own. When creating your own, we recommend the following formats: * `/category/product/key` for agents of well-known products (e.g. `/db/mongodb/read_size`). * `short_host/path/key` for domain-specific keys (e.g. `foo.com/myproduct/bar`) Predefined labels include: * `/agent` * `/component` * `/error/message` * `/error/name` * `/http/client_city` * `/http/client_country` * `/http/client_protocol` * `/http/client_region` * `/http/host` * `/http/method` * `/http/path` * `/http/redirected_url` * `/http/request/size` * `/http/response/size` * `/http/route` * `/http/status_code` * `/http/url` * `/http/user_agent` * `/pid` * `/stacktrace` * `/tid`

        :param labels: The labels of this TraceSpan.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this TraceSpan.

        Name of the span. Must be less than 128 bytes. The span name is sanitized and displayed in the Trace tool in the Google Cloud Platform Console. The name may be a method name or some other per-call site name. For the same executable and the same call point, a best practice is to use a consistent name, which makes it easier to correlate cross-trace spans.

        :return: The name of this TraceSpan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TraceSpan.

        Name of the span. Must be less than 128 bytes. The span name is sanitized and displayed in the Trace tool in the Google Cloud Platform Console. The name may be a method name or some other per-call site name. For the same executable and the same call point, a best practice is to use a consistent name, which makes it easier to correlate cross-trace spans.

        :param name: The name of this TraceSpan.
        :type name: str
        """

        self._name = name

    @property
    def parent_span_id(self):
        """Gets the parent_span_id of this TraceSpan.

        Optional. ID of the parent span, if any.

        :return: The parent_span_id of this TraceSpan.
        :rtype: str
        """
        return self._parent_span_id

    @parent_span_id.setter
    def parent_span_id(self, parent_span_id):
        """Sets the parent_span_id of this TraceSpan.

        Optional. ID of the parent span, if any.

        :param parent_span_id: The parent_span_id of this TraceSpan.
        :type parent_span_id: str
        """

        self._parent_span_id = parent_span_id

    @property
    def span_id(self):
        """Gets the span_id of this TraceSpan.

        Identifier for the span. Must be a 64-bit integer other than 0 and unique within a trace. For example, `2205310701640571284`.

        :return: The span_id of this TraceSpan.
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this TraceSpan.

        Identifier for the span. Must be a 64-bit integer other than 0 and unique within a trace. For example, `2205310701640571284`.

        :param span_id: The span_id of this TraceSpan.
        :type span_id: str
        """

        self._span_id = span_id

    @property
    def start_time(self):
        """Gets the start_time of this TraceSpan.

        Start time of the span in seconds and nanoseconds from the UNIX epoch.

        :return: The start_time of this TraceSpan.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TraceSpan.

        Start time of the span in seconds and nanoseconds from the UNIX epoch.

        :param start_time: The start_time of this TraceSpan.
        :type start_time: str
        """

        self._start_time = start_time
