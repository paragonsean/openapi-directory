/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TraceSpan model module.
 * @module model/TraceSpan
 * @version v1
 */
class TraceSpan {
    /**
     * Constructs a new <code>TraceSpan</code>.
     * A span represents a single timed event within a trace. Spans can be nested and form a trace tree. Often, a trace contains a root span that describes the end-to-end latency of an operation and, optionally, one or more subspans for its suboperations. Spans do not need to be contiguous. There may be gaps between spans in a trace.
     * @alias module:model/TraceSpan
     */
    constructor() { 
        
        TraceSpan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TraceSpan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TraceSpan} obj Optional instance to populate.
     * @return {module:model/TraceSpan} The populated <code>TraceSpan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TraceSpan();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentSpanId')) {
                obj['parentSpanId'] = ApiClient.convertToType(data['parentSpanId'], 'String');
            }
            if (data.hasOwnProperty('spanId')) {
                obj['spanId'] = ApiClient.convertToType(data['spanId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TraceSpan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TraceSpan</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentSpanId'] && !(typeof data['parentSpanId'] === 'string' || data['parentSpanId'] instanceof String)) {
            throw new Error("Expected the field `parentSpanId` to be a primitive type in the JSON string but got " + data['parentSpanId']);
        }
        // ensure the json data is a string
        if (data['spanId'] && !(typeof data['spanId'] === 'string' || data['spanId'] instanceof String)) {
            throw new Error("Expected the field `spanId` to be a primitive type in the JSON string but got " + data['spanId']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * End time of the span in seconds and nanoseconds from the UNIX epoch.
 * @member {String} endTime
 */
TraceSpan.prototype['endTime'] = undefined;

/**
 * Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `RPC_CLIENT` and `RPC_SERVER` to identify queueing latency associated with the span.
 * @member {module:model/TraceSpan.KindEnum} kind
 */
TraceSpan.prototype['kind'] = undefined;

/**
 * Collection of labels associated with the span. Label keys must be less than 128 bytes. Label values must be less than 16 kilobytes (10MB for `/stacktrace` values). Some predefined label keys exist, or you may create your own. When creating your own, we recommend the following formats: * `/category/product/key` for agents of well-known products (e.g. `/db/mongodb/read_size`). * `short_host/path/key` for domain-specific keys (e.g. `foo.com/myproduct/bar`) Predefined labels include: * `/agent` * `/component` * `/error/message` * `/error/name` * `/http/client_city` * `/http/client_country` * `/http/client_protocol` * `/http/client_region` * `/http/host` * `/http/method` * `/http/path` * `/http/redirected_url` * `/http/request/size` * `/http/response/size` * `/http/route` * `/http/status_code` * `/http/url` * `/http/user_agent` * `/pid` * `/stacktrace` * `/tid`
 * @member {Object.<String, String>} labels
 */
TraceSpan.prototype['labels'] = undefined;

/**
 * Name of the span. Must be less than 128 bytes. The span name is sanitized and displayed in the Trace tool in the Google Cloud Platform Console. The name may be a method name or some other per-call site name. For the same executable and the same call point, a best practice is to use a consistent name, which makes it easier to correlate cross-trace spans.
 * @member {String} name
 */
TraceSpan.prototype['name'] = undefined;

/**
 * Optional. ID of the parent span, if any.
 * @member {String} parentSpanId
 */
TraceSpan.prototype['parentSpanId'] = undefined;

/**
 * Identifier for the span. Must be a 64-bit integer other than 0 and unique within a trace. For example, `2205310701640571284`.
 * @member {String} spanId
 */
TraceSpan.prototype['spanId'] = undefined;

/**
 * Start time of the span in seconds and nanoseconds from the UNIX epoch.
 * @member {String} startTime
 */
TraceSpan.prototype['startTime'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
TraceSpan['KindEnum'] = {

    /**
     * value: "SPAN_KIND_UNSPECIFIED"
     * @const
     */
    "SPAN_KIND_UNSPECIFIED": "SPAN_KIND_UNSPECIFIED",

    /**
     * value: "RPC_SERVER"
     * @const
     */
    "RPC_SERVER": "RPC_SERVER",

    /**
     * value: "RPC_CLIENT"
     * @const
     */
    "RPC_CLIENT": "RPC_CLIENT"
};



export default TraceSpan;

