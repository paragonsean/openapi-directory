/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrace::OAITrace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrace::OAITrace() {
    this->initializeModel();
}

OAITrace::~OAITrace() {}

void OAITrace::initializeModel() {

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_spans_isSet = false;
    m_spans_isValid = false;

    m_trace_id_isSet = false;
    m_trace_id_isValid = false;
}

void OAITrace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrace::fromJsonObject(QJsonObject json) {

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_spans_isValid = ::OpenAPI::fromJsonValue(m_spans, json[QString("spans")]);
    m_spans_isSet = !json[QString("spans")].isNull() && m_spans_isValid;

    m_trace_id_isValid = ::OpenAPI::fromJsonValue(m_trace_id, json[QString("traceId")]);
    m_trace_id_isSet = !json[QString("traceId")].isNull() && m_trace_id_isValid;
}

QString OAITrace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrace::asJsonObject() const {
    QJsonObject obj;
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_spans.size() > 0) {
        obj.insert(QString("spans"), ::OpenAPI::toJsonValue(m_spans));
    }
    if (m_trace_id_isSet) {
        obj.insert(QString("traceId"), ::OpenAPI::toJsonValue(m_trace_id));
    }
    return obj;
}

QString OAITrace::getProjectId() const {
    return m_project_id;
}
void OAITrace::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITrace::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITrace::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QList<OAITraceSpan> OAITrace::getSpans() const {
    return m_spans;
}
void OAITrace::setSpans(const QList<OAITraceSpan> &spans) {
    m_spans = spans;
    m_spans_isSet = true;
}

bool OAITrace::is_spans_Set() const{
    return m_spans_isSet;
}

bool OAITrace::is_spans_Valid() const{
    return m_spans_isValid;
}

QString OAITrace::getTraceId() const {
    return m_trace_id;
}
void OAITrace::setTraceId(const QString &trace_id) {
    m_trace_id = trace_id;
    m_trace_id_isSet = true;
}

bool OAITrace::is_trace_id_Set() const{
    return m_trace_id_isSet;
}

bool OAITrace::is_trace_id_Valid() const{
    return m_trace_id_isValid;
}

bool OAITrace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
