/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraces.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraces::OAITraces(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraces::OAITraces() {
    this->initializeModel();
}

OAITraces::~OAITraces() {}

void OAITraces::initializeModel() {

    m_traces_isSet = false;
    m_traces_isValid = false;
}

void OAITraces::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraces::fromJsonObject(QJsonObject json) {

    m_traces_isValid = ::OpenAPI::fromJsonValue(m_traces, json[QString("traces")]);
    m_traces_isSet = !json[QString("traces")].isNull() && m_traces_isValid;
}

QString OAITraces::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraces::asJsonObject() const {
    QJsonObject obj;
    if (m_traces.size() > 0) {
        obj.insert(QString("traces"), ::OpenAPI::toJsonValue(m_traces));
    }
    return obj;
}

QList<OAITrace> OAITraces::getTraces() const {
    return m_traces;
}
void OAITraces::setTraces(const QList<OAITrace> &traces) {
    m_traces = traces;
    m_traces_isSet = true;
}

bool OAITraces::is_traces_Set() const{
    return m_traces_isSet;
}

bool OAITraces::is_traces_Valid() const{
    return m_traces_isValid;
}

bool OAITraces::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_traces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraces::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
