/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTracesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTracesResponse::OAIListTracesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTracesResponse::OAIListTracesResponse() {
    this->initializeModel();
}

OAIListTracesResponse::~OAIListTracesResponse() {}

void OAIListTracesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_traces_isSet = false;
    m_traces_isValid = false;
}

void OAIListTracesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTracesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_traces_isValid = ::OpenAPI::fromJsonValue(m_traces, json[QString("traces")]);
    m_traces_isSet = !json[QString("traces")].isNull() && m_traces_isValid;
}

QString OAIListTracesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTracesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_traces.size() > 0) {
        obj.insert(QString("traces"), ::OpenAPI::toJsonValue(m_traces));
    }
    return obj;
}

QString OAIListTracesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListTracesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListTracesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListTracesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAITrace> OAIListTracesResponse::getTraces() const {
    return m_traces;
}
void OAIListTracesResponse::setTraces(const QList<OAITrace> &traces) {
    m_traces = traces;
    m_traces_isSet = true;
}

bool OAIListTracesResponse::is_traces_Set() const{
    return m_traces_isSet;
}

bool OAIListTracesResponse::is_traces_Valid() const{
    return m_traces_isValid;
}

bool OAIListTracesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTracesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
