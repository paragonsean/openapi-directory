/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraceSpan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraceSpan::OAITraceSpan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraceSpan::OAITraceSpan() {
    this->initializeModel();
}

OAITraceSpan::~OAITraceSpan() {}

void OAITraceSpan::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_span_id_isSet = false;
    m_parent_span_id_isValid = false;

    m_span_id_isSet = false;
    m_span_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAITraceSpan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraceSpan::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_span_id_isValid = ::OpenAPI::fromJsonValue(m_parent_span_id, json[QString("parentSpanId")]);
    m_parent_span_id_isSet = !json[QString("parentSpanId")].isNull() && m_parent_span_id_isValid;

    m_span_id_isValid = ::OpenAPI::fromJsonValue(m_span_id, json[QString("spanId")]);
    m_span_id_isSet = !json[QString("spanId")].isNull() && m_span_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAITraceSpan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraceSpan::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_span_id_isSet) {
        obj.insert(QString("parentSpanId"), ::OpenAPI::toJsonValue(m_parent_span_id));
    }
    if (m_span_id_isSet) {
        obj.insert(QString("spanId"), ::OpenAPI::toJsonValue(m_span_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAITraceSpan::getEndTime() const {
    return m_end_time;
}
void OAITraceSpan::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITraceSpan::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITraceSpan::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAITraceSpan::getKind() const {
    return m_kind;
}
void OAITraceSpan::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITraceSpan::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITraceSpan::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAITraceSpan::getLabels() const {
    return m_labels;
}
void OAITraceSpan::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITraceSpan::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITraceSpan::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAITraceSpan::getName() const {
    return m_name;
}
void OAITraceSpan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITraceSpan::is_name_Set() const{
    return m_name_isSet;
}

bool OAITraceSpan::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITraceSpan::getParentSpanId() const {
    return m_parent_span_id;
}
void OAITraceSpan::setParentSpanId(const QString &parent_span_id) {
    m_parent_span_id = parent_span_id;
    m_parent_span_id_isSet = true;
}

bool OAITraceSpan::is_parent_span_id_Set() const{
    return m_parent_span_id_isSet;
}

bool OAITraceSpan::is_parent_span_id_Valid() const{
    return m_parent_span_id_isValid;
}

QString OAITraceSpan::getSpanId() const {
    return m_span_id;
}
void OAITraceSpan::setSpanId(const QString &span_id) {
    m_span_id = span_id;
    m_span_id_isSet = true;
}

bool OAITraceSpan::is_span_id_Set() const{
    return m_span_id_isSet;
}

bool OAITraceSpan::is_span_id_Valid() const{
    return m_span_id_isValid;
}

QString OAITraceSpan::getStartTime() const {
    return m_start_time;
}
void OAITraceSpan::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITraceSpan::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITraceSpan::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAITraceSpan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraceSpan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
