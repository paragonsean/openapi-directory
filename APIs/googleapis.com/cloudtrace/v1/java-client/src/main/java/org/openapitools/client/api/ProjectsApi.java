/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListTracesResponse;
import org.openapitools.client.model.Trace;
import org.openapitools.client.model.Traces;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloudtraceProjectsPatchTraces
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param traces  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudtraceProjectsPatchTracesCall(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Traces traces, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = traces;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectId}/traces"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudtraceProjectsPatchTracesValidateBeforeCall(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Traces traces, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling cloudtraceProjectsPatchTraces(Async)");
        }

        return cloudtraceProjectsPatchTracesCall(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, traces, _callback);

    }

    /**
     * 
     * Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param traces  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Object cloudtraceProjectsPatchTraces(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Traces traces) throws ApiException {
        ApiResponse<Object> localVarResp = cloudtraceProjectsPatchTracesWithHttpInfo(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, traces);
        return localVarResp.getData();
    }

    /**
     * 
     * Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param traces  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> cloudtraceProjectsPatchTracesWithHttpInfo(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Traces traces) throws ApiException {
        okhttp3.Call localVarCall = cloudtraceProjectsPatchTracesValidateBeforeCall(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, traces, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param traces  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudtraceProjectsPatchTracesAsync(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Traces traces, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudtraceProjectsPatchTracesValidateBeforeCall(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, traces, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudtraceProjectsTracesGet
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param traceId Required. ID of the trace to return. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudtraceProjectsTracesGetCall(String projectId, String traceId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectId}/traces/{traceId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "traceId" + "}", localVarApiClient.escapeString(traceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudtraceProjectsTracesGetValidateBeforeCall(String projectId, String traceId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling cloudtraceProjectsTracesGet(Async)");
        }

        // verify the required parameter 'traceId' is set
        if (traceId == null) {
            throw new ApiException("Missing the required parameter 'traceId' when calling cloudtraceProjectsTracesGet(Async)");
        }

        return cloudtraceProjectsTracesGetCall(projectId, traceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _callback);

    }

    /**
     * 
     * Gets a single trace by its ID.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param traceId Required. ID of the trace to return. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @return Trace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Trace cloudtraceProjectsTracesGet(String projectId, String traceId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType) throws ApiException {
        ApiResponse<Trace> localVarResp = cloudtraceProjectsTracesGetWithHttpInfo(projectId, traceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a single trace by its ID.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param traceId Required. ID of the trace to return. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @return ApiResponse&lt;Trace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trace> cloudtraceProjectsTracesGetWithHttpInfo(String projectId, String traceId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType) throws ApiException {
        okhttp3.Call localVarCall = cloudtraceProjectsTracesGetValidateBeforeCall(projectId, traceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, null);
        Type localVarReturnType = new TypeToken<Trace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a single trace by its ID.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param traceId Required. ID of the trace to return. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudtraceProjectsTracesGetAsync(String projectId, String traceId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback<Trace> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudtraceProjectsTracesGetValidateBeforeCall(projectId, traceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _callback);
        Type localVarReturnType = new TypeToken<Trace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudtraceProjectsTracesList
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endTime End of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param filter Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (&#x60;+&#x60;) to the search term. Multiple terms are ANDed. Syntax: * &#x60;root:NAME_PREFIX&#x60; or &#x60;NAME_PREFIX&#x60;: Return traces where any root span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+root:NAME&#x60; or &#x60;+NAME&#x60;: Return traces where any root span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;span:NAME_PREFIX&#x60;: Return traces where any span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+span:NAME&#x60;: Return traces where any span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;latency:DURATION&#x60;: Return traces whose overall latency is greater or equal to than &#x60;DURATION&#x60;. Accepted units are nanoseconds (&#x60;ns&#x60;), milliseconds (&#x60;ms&#x60;), and seconds (&#x60;s&#x60;). Default is &#x60;ms&#x60;. For example, &#x60;latency:24ms&#x60; returns traces whose overall latency is greater than or equal to 24 milliseconds. * &#x60;label:LABEL_KEY&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair&#39;s value (including empty values). * &#x60;LABEL_KEY:VALUE_PREFIX&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with &#x60;VALUE_PREFIX&#x60;. Both a key and a value must be specified. * &#x60;+LABEL_KEY:VALUE&#x60;: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * &#x60;method:VALUE&#x60;: Equivalent to &#x60;/http/method:VALUE&#x60;. * &#x60;url:VALUE&#x60;: Equivalent to &#x60;/http/url:VALUE&#x60;. (optional)
     * @param orderBy Optional. Field used to sort the returned traces. Can be one of the following: * &#x60;trace_id&#x60; * &#x60;name&#x60; (&#x60;name&#x60; field of root span in the trace) * &#x60;duration&#x60; (difference between &#x60;end_time&#x60; and &#x60;start_time&#x60; fields of the root span) * &#x60;start&#x60; (&#x60;start_time&#x60; field of the root span) Descending order can be specified by appending &#x60;desc&#x60; to the sort field (for example, &#x60;name desc&#x60;). Only one sort field is permitted. (optional)
     * @param pageSize Optional. Maximum number of traces to return. If not specified or &lt;&#x3D; 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. (optional)
     * @param pageToken Token identifying the page of results to return. If provided, use the value of the &#x60;next_page_token&#x60; field from a previous request. (optional)
     * @param startTime Start of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param view Optional. Type of data returned for traces in the list. Default is &#x60;MINIMAL&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudtraceProjectsTracesListCall(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endTime, String filter, String orderBy, Integer pageSize, String pageToken, String startTime, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{projectId}/traces"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudtraceProjectsTracesListValidateBeforeCall(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endTime, String filter, String orderBy, Integer pageSize, String pageToken, String startTime, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling cloudtraceProjectsTracesList(Async)");
        }

        return cloudtraceProjectsTracesListCall(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, filter, orderBy, pageSize, pageToken, startTime, view, _callback);

    }

    /**
     * 
     * Returns a list of traces that match the specified filter conditions.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endTime End of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param filter Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (&#x60;+&#x60;) to the search term. Multiple terms are ANDed. Syntax: * &#x60;root:NAME_PREFIX&#x60; or &#x60;NAME_PREFIX&#x60;: Return traces where any root span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+root:NAME&#x60; or &#x60;+NAME&#x60;: Return traces where any root span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;span:NAME_PREFIX&#x60;: Return traces where any span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+span:NAME&#x60;: Return traces where any span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;latency:DURATION&#x60;: Return traces whose overall latency is greater or equal to than &#x60;DURATION&#x60;. Accepted units are nanoseconds (&#x60;ns&#x60;), milliseconds (&#x60;ms&#x60;), and seconds (&#x60;s&#x60;). Default is &#x60;ms&#x60;. For example, &#x60;latency:24ms&#x60; returns traces whose overall latency is greater than or equal to 24 milliseconds. * &#x60;label:LABEL_KEY&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair&#39;s value (including empty values). * &#x60;LABEL_KEY:VALUE_PREFIX&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with &#x60;VALUE_PREFIX&#x60;. Both a key and a value must be specified. * &#x60;+LABEL_KEY:VALUE&#x60;: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * &#x60;method:VALUE&#x60;: Equivalent to &#x60;/http/method:VALUE&#x60;. * &#x60;url:VALUE&#x60;: Equivalent to &#x60;/http/url:VALUE&#x60;. (optional)
     * @param orderBy Optional. Field used to sort the returned traces. Can be one of the following: * &#x60;trace_id&#x60; * &#x60;name&#x60; (&#x60;name&#x60; field of root span in the trace) * &#x60;duration&#x60; (difference between &#x60;end_time&#x60; and &#x60;start_time&#x60; fields of the root span) * &#x60;start&#x60; (&#x60;start_time&#x60; field of the root span) Descending order can be specified by appending &#x60;desc&#x60; to the sort field (for example, &#x60;name desc&#x60;). Only one sort field is permitted. (optional)
     * @param pageSize Optional. Maximum number of traces to return. If not specified or &lt;&#x3D; 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. (optional)
     * @param pageToken Token identifying the page of results to return. If provided, use the value of the &#x60;next_page_token&#x60; field from a previous request. (optional)
     * @param startTime Start of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param view Optional. Type of data returned for traces in the list. Default is &#x60;MINIMAL&#x60;. (optional)
     * @return ListTracesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ListTracesResponse cloudtraceProjectsTracesList(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endTime, String filter, String orderBy, Integer pageSize, String pageToken, String startTime, String view) throws ApiException {
        ApiResponse<ListTracesResponse> localVarResp = cloudtraceProjectsTracesListWithHttpInfo(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, filter, orderBy, pageSize, pageToken, startTime, view);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of traces that match the specified filter conditions.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endTime End of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param filter Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (&#x60;+&#x60;) to the search term. Multiple terms are ANDed. Syntax: * &#x60;root:NAME_PREFIX&#x60; or &#x60;NAME_PREFIX&#x60;: Return traces where any root span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+root:NAME&#x60; or &#x60;+NAME&#x60;: Return traces where any root span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;span:NAME_PREFIX&#x60;: Return traces where any span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+span:NAME&#x60;: Return traces where any span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;latency:DURATION&#x60;: Return traces whose overall latency is greater or equal to than &#x60;DURATION&#x60;. Accepted units are nanoseconds (&#x60;ns&#x60;), milliseconds (&#x60;ms&#x60;), and seconds (&#x60;s&#x60;). Default is &#x60;ms&#x60;. For example, &#x60;latency:24ms&#x60; returns traces whose overall latency is greater than or equal to 24 milliseconds. * &#x60;label:LABEL_KEY&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair&#39;s value (including empty values). * &#x60;LABEL_KEY:VALUE_PREFIX&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with &#x60;VALUE_PREFIX&#x60;. Both a key and a value must be specified. * &#x60;+LABEL_KEY:VALUE&#x60;: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * &#x60;method:VALUE&#x60;: Equivalent to &#x60;/http/method:VALUE&#x60;. * &#x60;url:VALUE&#x60;: Equivalent to &#x60;/http/url:VALUE&#x60;. (optional)
     * @param orderBy Optional. Field used to sort the returned traces. Can be one of the following: * &#x60;trace_id&#x60; * &#x60;name&#x60; (&#x60;name&#x60; field of root span in the trace) * &#x60;duration&#x60; (difference between &#x60;end_time&#x60; and &#x60;start_time&#x60; fields of the root span) * &#x60;start&#x60; (&#x60;start_time&#x60; field of the root span) Descending order can be specified by appending &#x60;desc&#x60; to the sort field (for example, &#x60;name desc&#x60;). Only one sort field is permitted. (optional)
     * @param pageSize Optional. Maximum number of traces to return. If not specified or &lt;&#x3D; 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. (optional)
     * @param pageToken Token identifying the page of results to return. If provided, use the value of the &#x60;next_page_token&#x60; field from a previous request. (optional)
     * @param startTime Start of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param view Optional. Type of data returned for traces in the list. Default is &#x60;MINIMAL&#x60;. (optional)
     * @return ApiResponse&lt;ListTracesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTracesResponse> cloudtraceProjectsTracesListWithHttpInfo(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endTime, String filter, String orderBy, Integer pageSize, String pageToken, String startTime, String view) throws ApiException {
        okhttp3.Call localVarCall = cloudtraceProjectsTracesListValidateBeforeCall(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, filter, orderBy, pageSize, pageToken, startTime, view, null);
        Type localVarReturnType = new TypeToken<ListTracesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of traces that match the specified filter conditions.
     * @param projectId Required. ID of the Cloud project where the trace data is stored. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param endTime End of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param filter Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (&#x60;+&#x60;) to the search term. Multiple terms are ANDed. Syntax: * &#x60;root:NAME_PREFIX&#x60; or &#x60;NAME_PREFIX&#x60;: Return traces where any root span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+root:NAME&#x60; or &#x60;+NAME&#x60;: Return traces where any root span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;span:NAME_PREFIX&#x60;: Return traces where any span starts with &#x60;NAME_PREFIX&#x60;. * &#x60;+span:NAME&#x60;: Return traces where any span&#39;s name is exactly &#x60;NAME&#x60;. * &#x60;latency:DURATION&#x60;: Return traces whose overall latency is greater or equal to than &#x60;DURATION&#x60;. Accepted units are nanoseconds (&#x60;ns&#x60;), milliseconds (&#x60;ms&#x60;), and seconds (&#x60;s&#x60;). Default is &#x60;ms&#x60;. For example, &#x60;latency:24ms&#x60; returns traces whose overall latency is greater than or equal to 24 milliseconds. * &#x60;label:LABEL_KEY&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair&#39;s value (including empty values). * &#x60;LABEL_KEY:VALUE_PREFIX&#x60;: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with &#x60;VALUE_PREFIX&#x60;. Both a key and a value must be specified. * &#x60;+LABEL_KEY:VALUE&#x60;: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. * &#x60;method:VALUE&#x60;: Equivalent to &#x60;/http/method:VALUE&#x60;. * &#x60;url:VALUE&#x60;: Equivalent to &#x60;/http/url:VALUE&#x60;. (optional)
     * @param orderBy Optional. Field used to sort the returned traces. Can be one of the following: * &#x60;trace_id&#x60; * &#x60;name&#x60; (&#x60;name&#x60; field of root span in the trace) * &#x60;duration&#x60; (difference between &#x60;end_time&#x60; and &#x60;start_time&#x60; fields of the root span) * &#x60;start&#x60; (&#x60;start_time&#x60; field of the root span) Descending order can be specified by appending &#x60;desc&#x60; to the sort field (for example, &#x60;name desc&#x60;). Only one sort field is permitted. (optional)
     * @param pageSize Optional. Maximum number of traces to return. If not specified or &lt;&#x3D; 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size. (optional)
     * @param pageToken Token identifying the page of results to return. If provided, use the value of the &#x60;next_page_token&#x60; field from a previous request. (optional)
     * @param startTime Start of the time interval (inclusive) during which the trace data was collected from the application. (optional)
     * @param view Optional. Type of data returned for traces in the list. Default is &#x60;MINIMAL&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudtraceProjectsTracesListAsync(String projectId, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String endTime, String filter, String orderBy, Integer pageSize, String pageToken, String startTime, String view, final ApiCallback<ListTracesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudtraceProjectsTracesListValidateBeforeCall(projectId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endTime, filter, orderBy, pageSize, pageToken, startTime, view, _callback);
        Type localVarReturnType = new TypeToken<ListTracesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
