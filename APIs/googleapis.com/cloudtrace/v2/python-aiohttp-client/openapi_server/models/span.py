# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes import Attributes
from openapi_server.models.links import Links
from openapi_server.models.stack_trace import StackTrace
from openapi_server.models.status import Status
from openapi_server.models.time_events import TimeEvents
from openapi_server.models.truncatable_string import TruncatableString
from openapi_server import util


class Span(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Attributes=None, child_span_count: int=None, display_name: TruncatableString=None, end_time: str=None, links: Links=None, name: str=None, parent_span_id: str=None, same_process_as_parent_span: bool=None, span_id: str=None, span_kind: str=None, stack_trace: StackTrace=None, start_time: str=None, status: Status=None, time_events: TimeEvents=None):
        """Span - a model defined in OpenAPI

        :param attributes: The attributes of this Span.
        :param child_span_count: The child_span_count of this Span.
        :param display_name: The display_name of this Span.
        :param end_time: The end_time of this Span.
        :param links: The links of this Span.
        :param name: The name of this Span.
        :param parent_span_id: The parent_span_id of this Span.
        :param same_process_as_parent_span: The same_process_as_parent_span of this Span.
        :param span_id: The span_id of this Span.
        :param span_kind: The span_kind of this Span.
        :param stack_trace: The stack_trace of this Span.
        :param start_time: The start_time of this Span.
        :param status: The status of this Span.
        :param time_events: The time_events of this Span.
        """
        self.openapi_types = {
            'attributes': Attributes,
            'child_span_count': int,
            'display_name': TruncatableString,
            'end_time': str,
            'links': Links,
            'name': str,
            'parent_span_id': str,
            'same_process_as_parent_span': bool,
            'span_id': str,
            'span_kind': str,
            'stack_trace': StackTrace,
            'start_time': str,
            'status': Status,
            'time_events': TimeEvents
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'child_span_count': 'childSpanCount',
            'display_name': 'displayName',
            'end_time': 'endTime',
            'links': 'links',
            'name': 'name',
            'parent_span_id': 'parentSpanId',
            'same_process_as_parent_span': 'sameProcessAsParentSpan',
            'span_id': 'spanId',
            'span_kind': 'spanKind',
            'stack_trace': 'stackTrace',
            'start_time': 'startTime',
            'status': 'status',
            'time_events': 'timeEvents'
        }

        self._attributes = attributes
        self._child_span_count = child_span_count
        self._display_name = display_name
        self._end_time = end_time
        self._links = links
        self._name = name
        self._parent_span_id = parent_span_id
        self._same_process_as_parent_span = same_process_as_parent_span
        self._span_id = span_id
        self._span_kind = span_kind
        self._stack_trace = stack_trace
        self._start_time = start_time
        self._status = status
        self._time_events = time_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Span':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Span of this Span.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Span.


        :return: The attributes of this Span.
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Span.


        :param attributes: The attributes of this Span.
        :type attributes: Attributes
        """

        self._attributes = attributes

    @property
    def child_span_count(self):
        """Gets the child_span_count of this Span.

        Optional. The number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.

        :return: The child_span_count of this Span.
        :rtype: int
        """
        return self._child_span_count

    @child_span_count.setter
    def child_span_count(self, child_span_count):
        """Sets the child_span_count of this Span.

        Optional. The number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.

        :param child_span_count: The child_span_count of this Span.
        :type child_span_count: int
        """

        self._child_span_count = child_span_count

    @property
    def display_name(self):
        """Gets the display_name of this Span.


        :return: The display_name of this Span.
        :rtype: TruncatableString
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Span.


        :param display_name: The display_name of this Span.
        :type display_name: TruncatableString
        """

        self._display_name = display_name

    @property
    def end_time(self):
        """Gets the end_time of this Span.

        Required. The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.

        :return: The end_time of this Span.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Span.

        Required. The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.

        :param end_time: The end_time of this Span.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def links(self):
        """Gets the links of this Span.


        :return: The links of this Span.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Span.


        :param links: The links of this Span.
        :type links: Links
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Span.

        Required. The resource name of the span in the following format: * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. It should not be zero. .

        :return: The name of this Span.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Span.

        Required. The resource name of the span in the following format: * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. It should not be zero. .

        :param name: The name of this Span.
        :type name: str
        """

        self._name = name

    @property
    def parent_span_id(self):
        """Gets the parent_span_id of this Span.

        The `[SPAN_ID]` of this span's parent span. If this is a root span, then this field must be empty.

        :return: The parent_span_id of this Span.
        :rtype: str
        """
        return self._parent_span_id

    @parent_span_id.setter
    def parent_span_id(self, parent_span_id):
        """Sets the parent_span_id of this Span.

        The `[SPAN_ID]` of this span's parent span. If this is a root span, then this field must be empty.

        :param parent_span_id: The parent_span_id of this Span.
        :type parent_span_id: str
        """

        self._parent_span_id = parent_span_id

    @property
    def same_process_as_parent_span(self):
        """Gets the same_process_as_parent_span of this Span.

        Optional. Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Trace is unable to take advantage of this helpful information.

        :return: The same_process_as_parent_span of this Span.
        :rtype: bool
        """
        return self._same_process_as_parent_span

    @same_process_as_parent_span.setter
    def same_process_as_parent_span(self, same_process_as_parent_span):
        """Sets the same_process_as_parent_span of this Span.

        Optional. Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Trace is unable to take advantage of this helpful information.

        :param same_process_as_parent_span: The same_process_as_parent_span of this Span.
        :type same_process_as_parent_span: bool
        """

        self._same_process_as_parent_span = same_process_as_parent_span

    @property
    def span_id(self):
        """Gets the span_id of this Span.

        Required. The `[SPAN_ID]` portion of the span's resource name.

        :return: The span_id of this Span.
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this Span.

        Required. The `[SPAN_ID]` portion of the span's resource name.

        :param span_id: The span_id of this Span.
        :type span_id: str
        """

        self._span_id = span_id

    @property
    def span_kind(self):
        """Gets the span_kind of this Span.

        Optional. Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.

        :return: The span_kind of this Span.
        :rtype: str
        """
        return self._span_kind

    @span_kind.setter
    def span_kind(self, span_kind):
        """Sets the span_kind of this Span.

        Optional. Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.

        :param span_kind: The span_kind of this Span.
        :type span_kind: str
        """
        allowed_values = ["SPAN_KIND_UNSPECIFIED", "INTERNAL", "SERVER", "CLIENT", "PRODUCER", "CONSUMER"]  # noqa: E501
        if span_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `span_kind` ({0}), must be one of {1}"
                .format(span_kind, allowed_values)
            )

        self._span_kind = span_kind

    @property
    def stack_trace(self):
        """Gets the stack_trace of this Span.


        :return: The stack_trace of this Span.
        :rtype: StackTrace
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this Span.


        :param stack_trace: The stack_trace of this Span.
        :type stack_trace: StackTrace
        """

        self._stack_trace = stack_trace

    @property
    def start_time(self):
        """Gets the start_time of this Span.

        Required. The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.

        :return: The start_time of this Span.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Span.

        Required. The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.

        :param start_time: The start_time of this Span.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Span.


        :return: The status of this Span.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Span.


        :param status: The status of this Span.
        :type status: Status
        """

        self._status = status

    @property
    def time_events(self):
        """Gets the time_events of this Span.


        :return: The time_events of this Span.
        :rtype: TimeEvents
        """
        return self._time_events

    @time_events.setter
    def time_events(self, time_events):
        """Sets the time_events of this Span.


        :param time_events: The time_events of this Span.
        :type time_events: TimeEvents
        """

        self._time_events = time_events
