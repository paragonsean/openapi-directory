# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes import Attributes
from openapi_server import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Attributes=None, span_id: str=None, trace_id: str=None, type: str=None):
        """Link - a model defined in OpenAPI

        :param attributes: The attributes of this Link.
        :param span_id: The span_id of this Link.
        :param trace_id: The trace_id of this Link.
        :param type: The type of this Link.
        """
        self.openapi_types = {
            'attributes': Attributes,
            'span_id': str,
            'trace_id': str,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'span_id': 'spanId',
            'trace_id': 'traceId',
            'type': 'type'
        }

        self._attributes = attributes
        self._span_id = span_id
        self._trace_id = trace_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Link of this Link.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Link.


        :return: The attributes of this Link.
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Link.


        :param attributes: The attributes of this Link.
        :type attributes: Attributes
        """

        self._attributes = attributes

    @property
    def span_id(self):
        """Gets the span_id of this Link.

        The `[SPAN_ID]` for a span within a trace.

        :return: The span_id of this Link.
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this Link.

        The `[SPAN_ID]` for a span within a trace.

        :param span_id: The span_id of this Link.
        :type span_id: str
        """

        self._span_id = span_id

    @property
    def trace_id(self):
        """Gets the trace_id of this Link.

        The `[TRACE_ID]` for a trace within a project.

        :return: The trace_id of this Link.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this Link.

        The `[TRACE_ID]` for a trace within a project.

        :param trace_id: The trace_id of this Link.
        :type trace_id: str
        """

        self._trace_id = trace_id

    @property
    def type(self):
        """Gets the type of this Link.

        The relationship of the current span relative to the linked span.

        :return: The type of this Link.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.

        The relationship of the current span relative to the linked span.

        :param type: The type of this Link.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "CHILD_LINKED_SPAN", "PARENT_LINKED_SPAN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
