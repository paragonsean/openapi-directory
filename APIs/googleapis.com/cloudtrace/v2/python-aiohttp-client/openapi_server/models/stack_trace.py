# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_frames import StackFrames
from openapi_server import util


class StackTrace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_frames: StackFrames=None, stack_trace_hash_id: str=None):
        """StackTrace - a model defined in OpenAPI

        :param stack_frames: The stack_frames of this StackTrace.
        :param stack_trace_hash_id: The stack_trace_hash_id of this StackTrace.
        """
        self.openapi_types = {
            'stack_frames': StackFrames,
            'stack_trace_hash_id': str
        }

        self.attribute_map = {
            'stack_frames': 'stackFrames',
            'stack_trace_hash_id': 'stackTraceHashId'
        }

        self._stack_frames = stack_frames
        self._stack_trace_hash_id = stack_trace_hash_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackTrace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackTrace of this StackTrace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_frames(self):
        """Gets the stack_frames of this StackTrace.


        :return: The stack_frames of this StackTrace.
        :rtype: StackFrames
        """
        return self._stack_frames

    @stack_frames.setter
    def stack_frames(self, stack_frames):
        """Sets the stack_frames of this StackTrace.


        :param stack_frames: The stack_frames of this StackTrace.
        :type stack_frames: StackFrames
        """

        self._stack_frames = stack_frames

    @property
    def stack_trace_hash_id(self):
        """Gets the stack_trace_hash_id of this StackTrace.

        The hash ID is used to conserve network bandwidth for duplicate stack traces within a single trace. Often multiple spans will have identical stack traces. The first occurrence of a stack trace should contain both the `stackFrame` content and a value in `stackTraceHashId`. Subsequent spans within the same request can refer to that stack trace by only setting `stackTraceHashId`.

        :return: The stack_trace_hash_id of this StackTrace.
        :rtype: str
        """
        return self._stack_trace_hash_id

    @stack_trace_hash_id.setter
    def stack_trace_hash_id(self, stack_trace_hash_id):
        """Sets the stack_trace_hash_id of this StackTrace.

        The hash ID is used to conserve network bandwidth for duplicate stack traces within a single trace. Often multiple spans will have identical stack traces. The first occurrence of a stack trace should contain both the `stackFrame` content and a value in `stackTraceHashId`. Subsequent spans within the same request can refer to that stack trace by only setting `stackTraceHashId`.

        :param stack_trace_hash_id: The stack_trace_hash_id of this StackTrace.
        :type stack_trace_hash_id: str
        """

        self._stack_trace_hash_id = stack_trace_hash_id
