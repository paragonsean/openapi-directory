# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation import Annotation
from openapi_server.models.message_event import MessageEvent
from openapi_server import util


class TimeEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation: Annotation=None, message_event: MessageEvent=None, time: str=None):
        """TimeEvent - a model defined in OpenAPI

        :param annotation: The annotation of this TimeEvent.
        :param message_event: The message_event of this TimeEvent.
        :param time: The time of this TimeEvent.
        """
        self.openapi_types = {
            'annotation': Annotation,
            'message_event': MessageEvent,
            'time': str
        }

        self.attribute_map = {
            'annotation': 'annotation',
            'message_event': 'messageEvent',
            'time': 'time'
        }

        self._annotation = annotation
        self._message_event = message_event
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeEvent of this TimeEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation(self):
        """Gets the annotation of this TimeEvent.


        :return: The annotation of this TimeEvent.
        :rtype: Annotation
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this TimeEvent.


        :param annotation: The annotation of this TimeEvent.
        :type annotation: Annotation
        """

        self._annotation = annotation

    @property
    def message_event(self):
        """Gets the message_event of this TimeEvent.


        :return: The message_event of this TimeEvent.
        :rtype: MessageEvent
        """
        return self._message_event

    @message_event.setter
    def message_event(self, message_event):
        """Sets the message_event of this TimeEvent.


        :param message_event: The message_event of this TimeEvent.
        :type message_event: MessageEvent
        """

        self._message_event = message_event

    @property
    def time(self):
        """Gets the time of this TimeEvent.

        The timestamp indicating the time the event occurred.

        :return: The time of this TimeEvent.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TimeEvent.

        The timestamp indicating the time the event occurred.

        :param time: The time of this TimeEvent.
        :type time: str
        """

        self._time = time
