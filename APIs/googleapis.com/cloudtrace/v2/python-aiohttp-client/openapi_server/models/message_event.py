# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compressed_size_bytes: str=None, id: str=None, type: str=None, uncompressed_size_bytes: str=None):
        """MessageEvent - a model defined in OpenAPI

        :param compressed_size_bytes: The compressed_size_bytes of this MessageEvent.
        :param id: The id of this MessageEvent.
        :param type: The type of this MessageEvent.
        :param uncompressed_size_bytes: The uncompressed_size_bytes of this MessageEvent.
        """
        self.openapi_types = {
            'compressed_size_bytes': str,
            'id': str,
            'type': str,
            'uncompressed_size_bytes': str
        }

        self.attribute_map = {
            'compressed_size_bytes': 'compressedSizeBytes',
            'id': 'id',
            'type': 'type',
            'uncompressed_size_bytes': 'uncompressedSizeBytes'
        }

        self._compressed_size_bytes = compressed_size_bytes
        self._id = id
        self._type = type
        self._uncompressed_size_bytes = uncompressed_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageEvent of this MessageEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compressed_size_bytes(self):
        """Gets the compressed_size_bytes of this MessageEvent.

        The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.

        :return: The compressed_size_bytes of this MessageEvent.
        :rtype: str
        """
        return self._compressed_size_bytes

    @compressed_size_bytes.setter
    def compressed_size_bytes(self, compressed_size_bytes):
        """Sets the compressed_size_bytes of this MessageEvent.

        The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.

        :param compressed_size_bytes: The compressed_size_bytes of this MessageEvent.
        :type compressed_size_bytes: str
        """

        self._compressed_size_bytes = compressed_size_bytes

    @property
    def id(self):
        """Gets the id of this MessageEvent.

        An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents.

        :return: The id of this MessageEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageEvent.

        An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents.

        :param id: The id of this MessageEvent.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this MessageEvent.

        Type of MessageEvent. Indicates whether the message was sent or received.

        :return: The type of this MessageEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessageEvent.

        Type of MessageEvent. Indicates whether the message was sent or received.

        :param type: The type of this MessageEvent.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "SENT", "RECEIVED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uncompressed_size_bytes(self):
        """Gets the uncompressed_size_bytes of this MessageEvent.

        The number of uncompressed bytes sent or received.

        :return: The uncompressed_size_bytes of this MessageEvent.
        :rtype: str
        """
        return self._uncompressed_size_bytes

    @uncompressed_size_bytes.setter
    def uncompressed_size_bytes(self, uncompressed_size_bytes):
        """Sets the uncompressed_size_bytes of this MessageEvent.

        The number of uncompressed bytes sent or received.

        :param uncompressed_size_bytes: The uncompressed_size_bytes of this MessageEvent.
        :type uncompressed_size_bytes: str
        """

        self._uncompressed_size_bytes = uncompressed_size_bytes
