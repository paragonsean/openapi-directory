# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TruncatableString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, truncated_byte_count: int=None, value: str=None):
        """TruncatableString - a model defined in OpenAPI

        :param truncated_byte_count: The truncated_byte_count of this TruncatableString.
        :param value: The value of this TruncatableString.
        """
        self.openapi_types = {
            'truncated_byte_count': int,
            'value': str
        }

        self.attribute_map = {
            'truncated_byte_count': 'truncatedByteCount',
            'value': 'value'
        }

        self._truncated_byte_count = truncated_byte_count
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TruncatableString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TruncatableString of this TruncatableString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def truncated_byte_count(self):
        """Gets the truncated_byte_count of this TruncatableString.

        The number of bytes removed from the original string. If this value is 0, then the string was not shortened.

        :return: The truncated_byte_count of this TruncatableString.
        :rtype: int
        """
        return self._truncated_byte_count

    @truncated_byte_count.setter
    def truncated_byte_count(self, truncated_byte_count):
        """Sets the truncated_byte_count of this TruncatableString.

        The number of bytes removed from the original string. If this value is 0, then the string was not shortened.

        :param truncated_byte_count: The truncated_byte_count of this TruncatableString.
        :type truncated_byte_count: int
        """

        self._truncated_byte_count = truncated_byte_count

    @property
    def value(self):
        """Gets the value of this TruncatableString.

        The shortened string. For example, if the original string is 500 bytes long and the limit of the string is 128 bytes, then `value` contains the first 128 bytes of the 500-byte string. Truncation always happens on a UTF8 character boundary. If there are multi-byte characters in the string, then the length of the shortened string might be less than the size limit.

        :return: The value of this TruncatableString.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TruncatableString.

        The shortened string. For example, if the original string is 500 bytes long and the limit of the string is 128 bytes, then `value` contains the first 128 bytes of the 500-byte string. Truncation always happens on a UTF8 character boundary. If there are multi-byte characters in the string, then the length of the shortened string might be less than the size limit.

        :param value: The value of this TruncatableString.
        :type value: str
        """

        self._value = value
