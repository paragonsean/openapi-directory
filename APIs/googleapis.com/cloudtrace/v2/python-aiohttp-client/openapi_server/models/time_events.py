# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_event import TimeEvent
from openapi_server import util


class TimeEvents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dropped_annotations_count: int=None, dropped_message_events_count: int=None, time_event: List[TimeEvent]=None):
        """TimeEvents - a model defined in OpenAPI

        :param dropped_annotations_count: The dropped_annotations_count of this TimeEvents.
        :param dropped_message_events_count: The dropped_message_events_count of this TimeEvents.
        :param time_event: The time_event of this TimeEvents.
        """
        self.openapi_types = {
            'dropped_annotations_count': int,
            'dropped_message_events_count': int,
            'time_event': List[TimeEvent]
        }

        self.attribute_map = {
            'dropped_annotations_count': 'droppedAnnotationsCount',
            'dropped_message_events_count': 'droppedMessageEventsCount',
            'time_event': 'timeEvent'
        }

        self._dropped_annotations_count = dropped_annotations_count
        self._dropped_message_events_count = dropped_message_events_count
        self._time_event = time_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeEvents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeEvents of this TimeEvents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dropped_annotations_count(self):
        """Gets the dropped_annotations_count of this TimeEvents.

        The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.

        :return: The dropped_annotations_count of this TimeEvents.
        :rtype: int
        """
        return self._dropped_annotations_count

    @dropped_annotations_count.setter
    def dropped_annotations_count(self, dropped_annotations_count):
        """Sets the dropped_annotations_count of this TimeEvents.

        The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.

        :param dropped_annotations_count: The dropped_annotations_count of this TimeEvents.
        :type dropped_annotations_count: int
        """

        self._dropped_annotations_count = dropped_annotations_count

    @property
    def dropped_message_events_count(self):
        """Gets the dropped_message_events_count of this TimeEvents.

        The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.

        :return: The dropped_message_events_count of this TimeEvents.
        :rtype: int
        """
        return self._dropped_message_events_count

    @dropped_message_events_count.setter
    def dropped_message_events_count(self, dropped_message_events_count):
        """Sets the dropped_message_events_count of this TimeEvents.

        The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.

        :param dropped_message_events_count: The dropped_message_events_count of this TimeEvents.
        :type dropped_message_events_count: int
        """

        self._dropped_message_events_count = dropped_message_events_count

    @property
    def time_event(self):
        """Gets the time_event of this TimeEvents.

        A collection of `TimeEvent`s.

        :return: The time_event of this TimeEvents.
        :rtype: List[TimeEvent]
        """
        return self._time_event

    @time_event.setter
    def time_event(self, time_event):
        """Sets the time_event of this TimeEvents.

        A collection of `TimeEvent`s.

        :param time_event: The time_event of this TimeEvents.
        :type time_event: List[TimeEvent]
        """

        self._time_event = time_event
