/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Module;
import org.openapitools.client.model.TruncatableString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single stack frame in a stack trace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:47.366499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackFrame {
  public static final String SERIALIZED_NAME_COLUMN_NUMBER = "columnNumber";
  @SerializedName(SERIALIZED_NAME_COLUMN_NUMBER)
  private String columnNumber;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private TruncatableString fileName;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private TruncatableString functionName;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private String lineNumber;

  public static final String SERIALIZED_NAME_LOAD_MODULE = "loadModule";
  @SerializedName(SERIALIZED_NAME_LOAD_MODULE)
  private Module loadModule;

  public static final String SERIALIZED_NAME_ORIGINAL_FUNCTION_NAME = "originalFunctionName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FUNCTION_NAME)
  private TruncatableString originalFunctionName;

  public static final String SERIALIZED_NAME_SOURCE_VERSION = "sourceVersion";
  @SerializedName(SERIALIZED_NAME_SOURCE_VERSION)
  private TruncatableString sourceVersion;

  public StackFrame() {
  }

  public StackFrame columnNumber(String columnNumber) {
    this.columnNumber = columnNumber;
    return this;
  }

  /**
   * The column number where the function call appears, if available. This is important in JavaScript because of its anonymous functions.
   * @return columnNumber
   */
  @javax.annotation.Nullable
  public String getColumnNumber() {
    return columnNumber;
  }

  public void setColumnNumber(String columnNumber) {
    this.columnNumber = columnNumber;
  }


  public StackFrame fileName(TruncatableString fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public TruncatableString getFileName() {
    return fileName;
  }

  public void setFileName(TruncatableString fileName) {
    this.fileName = fileName;
  }


  public StackFrame functionName(TruncatableString functionName) {
    this.functionName = functionName;
    return this;
  }

  /**
   * Get functionName
   * @return functionName
   */
  @javax.annotation.Nullable
  public TruncatableString getFunctionName() {
    return functionName;
  }

  public void setFunctionName(TruncatableString functionName) {
    this.functionName = functionName;
  }


  public StackFrame lineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * The line number in &#x60;file_name&#x60; where the function call appears.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public String getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
  }


  public StackFrame loadModule(Module loadModule) {
    this.loadModule = loadModule;
    return this;
  }

  /**
   * Get loadModule
   * @return loadModule
   */
  @javax.annotation.Nullable
  public Module getLoadModule() {
    return loadModule;
  }

  public void setLoadModule(Module loadModule) {
    this.loadModule = loadModule;
  }


  public StackFrame originalFunctionName(TruncatableString originalFunctionName) {
    this.originalFunctionName = originalFunctionName;
    return this;
  }

  /**
   * Get originalFunctionName
   * @return originalFunctionName
   */
  @javax.annotation.Nullable
  public TruncatableString getOriginalFunctionName() {
    return originalFunctionName;
  }

  public void setOriginalFunctionName(TruncatableString originalFunctionName) {
    this.originalFunctionName = originalFunctionName;
  }


  public StackFrame sourceVersion(TruncatableString sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  /**
   * Get sourceVersion
   * @return sourceVersion
   */
  @javax.annotation.Nullable
  public TruncatableString getSourceVersion() {
    return sourceVersion;
  }

  public void setSourceVersion(TruncatableString sourceVersion) {
    this.sourceVersion = sourceVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackFrame stackFrame = (StackFrame) o;
    return Objects.equals(this.columnNumber, stackFrame.columnNumber) &&
        Objects.equals(this.fileName, stackFrame.fileName) &&
        Objects.equals(this.functionName, stackFrame.functionName) &&
        Objects.equals(this.lineNumber, stackFrame.lineNumber) &&
        Objects.equals(this.loadModule, stackFrame.loadModule) &&
        Objects.equals(this.originalFunctionName, stackFrame.originalFunctionName) &&
        Objects.equals(this.sourceVersion, stackFrame.sourceVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnNumber, fileName, functionName, lineNumber, loadModule, originalFunctionName, sourceVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackFrame {\n");
    sb.append("    columnNumber: ").append(toIndentedString(columnNumber)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    loadModule: ").append(toIndentedString(loadModule)).append("\n");
    sb.append("    originalFunctionName: ").append(toIndentedString(originalFunctionName)).append("\n");
    sb.append("    sourceVersion: ").append(toIndentedString(sourceVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnNumber");
    openapiFields.add("fileName");
    openapiFields.add("functionName");
    openapiFields.add("lineNumber");
    openapiFields.add("loadModule");
    openapiFields.add("originalFunctionName");
    openapiFields.add("sourceVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackFrame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackFrame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackFrame is not found in the empty JSON string", StackFrame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackFrame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackFrame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("columnNumber") != null && !jsonObj.get("columnNumber").isJsonNull()) && !jsonObj.get("columnNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnNumber").toString()));
      }
      // validate the optional field `fileName`
      if (jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) {
        TruncatableString.validateJsonElement(jsonObj.get("fileName"));
      }
      // validate the optional field `functionName`
      if (jsonObj.get("functionName") != null && !jsonObj.get("functionName").isJsonNull()) {
        TruncatableString.validateJsonElement(jsonObj.get("functionName"));
      }
      if ((jsonObj.get("lineNumber") != null && !jsonObj.get("lineNumber").isJsonNull()) && !jsonObj.get("lineNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineNumber").toString()));
      }
      // validate the optional field `loadModule`
      if (jsonObj.get("loadModule") != null && !jsonObj.get("loadModule").isJsonNull()) {
        Module.validateJsonElement(jsonObj.get("loadModule"));
      }
      // validate the optional field `originalFunctionName`
      if (jsonObj.get("originalFunctionName") != null && !jsonObj.get("originalFunctionName").isJsonNull()) {
        TruncatableString.validateJsonElement(jsonObj.get("originalFunctionName"));
      }
      // validate the optional field `sourceVersion`
      if (jsonObj.get("sourceVersion") != null && !jsonObj.get("sourceVersion").isJsonNull()) {
        TruncatableString.validateJsonElement(jsonObj.get("sourceVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackFrame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackFrame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackFrame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackFrame.class));

       return (TypeAdapter<T>) new TypeAdapter<StackFrame>() {
           @Override
           public void write(JsonWriter out, StackFrame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackFrame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackFrame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackFrame
   * @throws IOException if the JSON string is invalid with respect to StackFrame
   */
  public static StackFrame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackFrame.class);
  }

  /**
   * Convert an instance of StackFrame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

