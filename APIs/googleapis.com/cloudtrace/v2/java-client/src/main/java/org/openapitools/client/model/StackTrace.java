/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StackFrames;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A call stack appearing in a trace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:47.366499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackTrace {
  public static final String SERIALIZED_NAME_STACK_FRAMES = "stackFrames";
  @SerializedName(SERIALIZED_NAME_STACK_FRAMES)
  private StackFrames stackFrames;

  public static final String SERIALIZED_NAME_STACK_TRACE_HASH_ID = "stackTraceHashId";
  @SerializedName(SERIALIZED_NAME_STACK_TRACE_HASH_ID)
  private String stackTraceHashId;

  public StackTrace() {
  }

  public StackTrace stackFrames(StackFrames stackFrames) {
    this.stackFrames = stackFrames;
    return this;
  }

  /**
   * Get stackFrames
   * @return stackFrames
   */
  @javax.annotation.Nullable
  public StackFrames getStackFrames() {
    return stackFrames;
  }

  public void setStackFrames(StackFrames stackFrames) {
    this.stackFrames = stackFrames;
  }


  public StackTrace stackTraceHashId(String stackTraceHashId) {
    this.stackTraceHashId = stackTraceHashId;
    return this;
  }

  /**
   * The hash ID is used to conserve network bandwidth for duplicate stack traces within a single trace. Often multiple spans will have identical stack traces. The first occurrence of a stack trace should contain both the &#x60;stackFrame&#x60; content and a value in &#x60;stackTraceHashId&#x60;. Subsequent spans within the same request can refer to that stack trace by only setting &#x60;stackTraceHashId&#x60;.
   * @return stackTraceHashId
   */
  @javax.annotation.Nullable
  public String getStackTraceHashId() {
    return stackTraceHashId;
  }

  public void setStackTraceHashId(String stackTraceHashId) {
    this.stackTraceHashId = stackTraceHashId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackTrace stackTrace = (StackTrace) o;
    return Objects.equals(this.stackFrames, stackTrace.stackFrames) &&
        Objects.equals(this.stackTraceHashId, stackTrace.stackTraceHashId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackFrames, stackTraceHashId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackTrace {\n");
    sb.append("    stackFrames: ").append(toIndentedString(stackFrames)).append("\n");
    sb.append("    stackTraceHashId: ").append(toIndentedString(stackTraceHashId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stackFrames");
    openapiFields.add("stackTraceHashId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackTrace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackTrace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackTrace is not found in the empty JSON string", StackTrace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackTrace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackTrace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `stackFrames`
      if (jsonObj.get("stackFrames") != null && !jsonObj.get("stackFrames").isJsonNull()) {
        StackFrames.validateJsonElement(jsonObj.get("stackFrames"));
      }
      if ((jsonObj.get("stackTraceHashId") != null && !jsonObj.get("stackTraceHashId").isJsonNull()) && !jsonObj.get("stackTraceHashId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackTraceHashId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackTraceHashId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackTrace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackTrace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackTrace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackTrace.class));

       return (TypeAdapter<T>) new TypeAdapter<StackTrace>() {
           @Override
           public void write(JsonWriter out, StackTrace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackTrace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackTrace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackTrace
   * @throws IOException if the JSON string is invalid with respect to StackTrace
   */
  public static StackTrace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackTrace.class);
  }

  /**
   * Convert an instance of StackTrace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

