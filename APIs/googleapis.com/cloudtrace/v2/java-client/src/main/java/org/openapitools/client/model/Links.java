/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of links, which are references from this span to a span in the same or different trace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:47.366499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Links {
  public static final String SERIALIZED_NAME_DROPPED_LINKS_COUNT = "droppedLinksCount";
  @SerializedName(SERIALIZED_NAME_DROPPED_LINKS_COUNT)
  private Integer droppedLinksCount;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private List<Link> link = new ArrayList<>();

  public Links() {
  }

  public Links droppedLinksCount(Integer droppedLinksCount) {
    this.droppedLinksCount = droppedLinksCount;
    return this;
  }

  /**
   * The number of dropped links after the maximum size was enforced. If this value is 0, then no links were dropped.
   * @return droppedLinksCount
   */
  @javax.annotation.Nullable
  public Integer getDroppedLinksCount() {
    return droppedLinksCount;
  }

  public void setDroppedLinksCount(Integer droppedLinksCount) {
    this.droppedLinksCount = droppedLinksCount;
  }


  public Links link(List<Link> link) {
    this.link = link;
    return this;
  }

  public Links addLinkItem(Link linkItem) {
    if (this.link == null) {
      this.link = new ArrayList<>();
    }
    this.link.add(linkItem);
    return this;
  }

  /**
   * A collection of links.
   * @return link
   */
  @javax.annotation.Nullable
  public List<Link> getLink() {
    return link;
  }

  public void setLink(List<Link> link) {
    this.link = link;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Links links = (Links) o;
    return Objects.equals(this.droppedLinksCount, links.droppedLinksCount) &&
        Objects.equals(this.link, links.link);
  }

  @Override
  public int hashCode() {
    return Objects.hash(droppedLinksCount, link);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Links {\n");
    sb.append("    droppedLinksCount: ").append(toIndentedString(droppedLinksCount)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("droppedLinksCount");
    openapiFields.add("link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Links
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Links.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Links is not found in the empty JSON string", Links.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Links.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Links` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        JsonArray jsonArraylink = jsonObj.getAsJsonArray("link");
        if (jsonArraylink != null) {
          // ensure the json data is an array
          if (!jsonObj.get("link").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `link` to be an array in the JSON string but got `%s`", jsonObj.get("link").toString()));
          }

          // validate the optional field `link` (array)
          for (int i = 0; i < jsonArraylink.size(); i++) {
            Link.validateJsonElement(jsonArraylink.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Links.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Links' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Links> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Links.class));

       return (TypeAdapter<T>) new TypeAdapter<Links>() {
           @Override
           public void write(JsonWriter out, Links value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Links read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Links given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Links
   * @throws IOException if the JSON string is invalid with respect to Links
   */
  public static Links fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Links.class);
  }

  /**
   * Convert an instance of Links to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

