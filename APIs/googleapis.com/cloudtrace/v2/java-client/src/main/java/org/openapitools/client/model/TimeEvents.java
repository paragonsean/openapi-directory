/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of &#x60;TimeEvent&#x60;s. A &#x60;TimeEvent&#x60; is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:47.366499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeEvents {
  public static final String SERIALIZED_NAME_DROPPED_ANNOTATIONS_COUNT = "droppedAnnotationsCount";
  @SerializedName(SERIALIZED_NAME_DROPPED_ANNOTATIONS_COUNT)
  private Integer droppedAnnotationsCount;

  public static final String SERIALIZED_NAME_DROPPED_MESSAGE_EVENTS_COUNT = "droppedMessageEventsCount";
  @SerializedName(SERIALIZED_NAME_DROPPED_MESSAGE_EVENTS_COUNT)
  private Integer droppedMessageEventsCount;

  public static final String SERIALIZED_NAME_TIME_EVENT = "timeEvent";
  @SerializedName(SERIALIZED_NAME_TIME_EVENT)
  private List<TimeEvent> timeEvent = new ArrayList<>();

  public TimeEvents() {
  }

  public TimeEvents droppedAnnotationsCount(Integer droppedAnnotationsCount) {
    this.droppedAnnotationsCount = droppedAnnotationsCount;
    return this;
  }

  /**
   * The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.
   * @return droppedAnnotationsCount
   */
  @javax.annotation.Nullable
  public Integer getDroppedAnnotationsCount() {
    return droppedAnnotationsCount;
  }

  public void setDroppedAnnotationsCount(Integer droppedAnnotationsCount) {
    this.droppedAnnotationsCount = droppedAnnotationsCount;
  }


  public TimeEvents droppedMessageEventsCount(Integer droppedMessageEventsCount) {
    this.droppedMessageEventsCount = droppedMessageEventsCount;
    return this;
  }

  /**
   * The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.
   * @return droppedMessageEventsCount
   */
  @javax.annotation.Nullable
  public Integer getDroppedMessageEventsCount() {
    return droppedMessageEventsCount;
  }

  public void setDroppedMessageEventsCount(Integer droppedMessageEventsCount) {
    this.droppedMessageEventsCount = droppedMessageEventsCount;
  }


  public TimeEvents timeEvent(List<TimeEvent> timeEvent) {
    this.timeEvent = timeEvent;
    return this;
  }

  public TimeEvents addTimeEventItem(TimeEvent timeEventItem) {
    if (this.timeEvent == null) {
      this.timeEvent = new ArrayList<>();
    }
    this.timeEvent.add(timeEventItem);
    return this;
  }

  /**
   * A collection of &#x60;TimeEvent&#x60;s.
   * @return timeEvent
   */
  @javax.annotation.Nullable
  public List<TimeEvent> getTimeEvent() {
    return timeEvent;
  }

  public void setTimeEvent(List<TimeEvent> timeEvent) {
    this.timeEvent = timeEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeEvents timeEvents = (TimeEvents) o;
    return Objects.equals(this.droppedAnnotationsCount, timeEvents.droppedAnnotationsCount) &&
        Objects.equals(this.droppedMessageEventsCount, timeEvents.droppedMessageEventsCount) &&
        Objects.equals(this.timeEvent, timeEvents.timeEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(droppedAnnotationsCount, droppedMessageEventsCount, timeEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeEvents {\n");
    sb.append("    droppedAnnotationsCount: ").append(toIndentedString(droppedAnnotationsCount)).append("\n");
    sb.append("    droppedMessageEventsCount: ").append(toIndentedString(droppedMessageEventsCount)).append("\n");
    sb.append("    timeEvent: ").append(toIndentedString(timeEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("droppedAnnotationsCount");
    openapiFields.add("droppedMessageEventsCount");
    openapiFields.add("timeEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeEvents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeEvents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeEvents is not found in the empty JSON string", TimeEvents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeEvents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeEvents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("timeEvent") != null && !jsonObj.get("timeEvent").isJsonNull()) {
        JsonArray jsonArraytimeEvent = jsonObj.getAsJsonArray("timeEvent");
        if (jsonArraytimeEvent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeEvent").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeEvent` to be an array in the JSON string but got `%s`", jsonObj.get("timeEvent").toString()));
          }

          // validate the optional field `timeEvent` (array)
          for (int i = 0; i < jsonArraytimeEvent.size(); i++) {
            TimeEvent.validateJsonElement(jsonArraytimeEvent.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeEvents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeEvents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeEvents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeEvents.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeEvents>() {
           @Override
           public void write(JsonWriter out, TimeEvents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeEvents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeEvents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeEvents
   * @throws IOException if the JSON string is invalid with respect to TimeEvents
   */
  public static TimeEvents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeEvents.class);
  }

  /**
   * Convert an instance of TimeEvents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

