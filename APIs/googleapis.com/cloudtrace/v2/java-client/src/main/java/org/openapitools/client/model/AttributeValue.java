/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TruncatableString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The allowed types for &#x60;[VALUE]&#x60; in a &#x60;[KEY]:[VALUE]&#x60; attribute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:47.366499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeValue {
  public static final String SERIALIZED_NAME_BOOL_VALUE = "boolValue";
  @SerializedName(SERIALIZED_NAME_BOOL_VALUE)
  private Boolean boolValue;

  public static final String SERIALIZED_NAME_INT_VALUE = "intValue";
  @SerializedName(SERIALIZED_NAME_INT_VALUE)
  private String intValue;

  public static final String SERIALIZED_NAME_STRING_VALUE = "stringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private TruncatableString stringValue;

  public AttributeValue() {
  }

  public AttributeValue boolValue(Boolean boolValue) {
    this.boolValue = boolValue;
    return this;
  }

  /**
   * A Boolean value represented by &#x60;true&#x60; or &#x60;false&#x60;.
   * @return boolValue
   */
  @javax.annotation.Nullable
  public Boolean getBoolValue() {
    return boolValue;
  }

  public void setBoolValue(Boolean boolValue) {
    this.boolValue = boolValue;
  }


  public AttributeValue intValue(String intValue) {
    this.intValue = intValue;
    return this;
  }

  /**
   * A 64-bit signed integer.
   * @return intValue
   */
  @javax.annotation.Nullable
  public String getIntValue() {
    return intValue;
  }

  public void setIntValue(String intValue) {
    this.intValue = intValue;
  }


  public AttributeValue stringValue(TruncatableString stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * Get stringValue
   * @return stringValue
   */
  @javax.annotation.Nullable
  public TruncatableString getStringValue() {
    return stringValue;
  }

  public void setStringValue(TruncatableString stringValue) {
    this.stringValue = stringValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeValue attributeValue = (AttributeValue) o;
    return Objects.equals(this.boolValue, attributeValue.boolValue) &&
        Objects.equals(this.intValue, attributeValue.intValue) &&
        Objects.equals(this.stringValue, attributeValue.stringValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolValue, intValue, stringValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeValue {\n");
    sb.append("    boolValue: ").append(toIndentedString(boolValue)).append("\n");
    sb.append("    intValue: ").append(toIndentedString(intValue)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolValue");
    openapiFields.add("intValue");
    openapiFields.add("stringValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeValue is not found in the empty JSON string", AttributeValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("intValue") != null && !jsonObj.get("intValue").isJsonNull()) && !jsonObj.get("intValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intValue").toString()));
      }
      // validate the optional field `stringValue`
      if (jsonObj.get("stringValue") != null && !jsonObj.get("stringValue").isJsonNull()) {
        TruncatableString.validateJsonElement(jsonObj.get("stringValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeValue.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeValue>() {
           @Override
           public void write(JsonWriter out, AttributeValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeValue
   * @throws IOException if the JSON string is invalid with respect to AttributeValue
   */
  public static AttributeValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeValue.class);
  }

  /**
   * Convert an instance of AttributeValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

