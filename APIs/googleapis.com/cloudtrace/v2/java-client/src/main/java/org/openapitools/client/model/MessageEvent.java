/*
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event describing a message sent/received between Spans.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:47.366499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageEvent {
  public static final String SERIALIZED_NAME_COMPRESSED_SIZE_BYTES = "compressedSizeBytes";
  @SerializedName(SERIALIZED_NAME_COMPRESSED_SIZE_BYTES)
  private String compressedSizeBytes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Type of MessageEvent. Indicates whether the message was sent or received.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    SENT("SENT"),
    
    RECEIVED("RECEIVED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNCOMPRESSED_SIZE_BYTES = "uncompressedSizeBytes";
  @SerializedName(SERIALIZED_NAME_UNCOMPRESSED_SIZE_BYTES)
  private String uncompressedSizeBytes;

  public MessageEvent() {
  }

  public MessageEvent compressedSizeBytes(String compressedSizeBytes) {
    this.compressedSizeBytes = compressedSizeBytes;
    return this;
  }

  /**
   * The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.
   * @return compressedSizeBytes
   */
  @javax.annotation.Nullable
  public String getCompressedSizeBytes() {
    return compressedSizeBytes;
  }

  public void setCompressedSizeBytes(String compressedSizeBytes) {
    this.compressedSizeBytes = compressedSizeBytes;
  }


  public MessageEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier for the MessageEvent&#39;s message that can be used to match &#x60;SENT&#x60; and &#x60;RECEIVED&#x60; MessageEvents.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MessageEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of MessageEvent. Indicates whether the message was sent or received.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MessageEvent uncompressedSizeBytes(String uncompressedSizeBytes) {
    this.uncompressedSizeBytes = uncompressedSizeBytes;
    return this;
  }

  /**
   * The number of uncompressed bytes sent or received.
   * @return uncompressedSizeBytes
   */
  @javax.annotation.Nullable
  public String getUncompressedSizeBytes() {
    return uncompressedSizeBytes;
  }

  public void setUncompressedSizeBytes(String uncompressedSizeBytes) {
    this.uncompressedSizeBytes = uncompressedSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageEvent messageEvent = (MessageEvent) o;
    return Objects.equals(this.compressedSizeBytes, messageEvent.compressedSizeBytes) &&
        Objects.equals(this.id, messageEvent.id) &&
        Objects.equals(this.type, messageEvent.type) &&
        Objects.equals(this.uncompressedSizeBytes, messageEvent.uncompressedSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compressedSizeBytes, id, type, uncompressedSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageEvent {\n");
    sb.append("    compressedSizeBytes: ").append(toIndentedString(compressedSizeBytes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uncompressedSizeBytes: ").append(toIndentedString(uncompressedSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compressedSizeBytes");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("uncompressedSizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageEvent is not found in the empty JSON string", MessageEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compressedSizeBytes") != null && !jsonObj.get("compressedSizeBytes").isJsonNull()) && !jsonObj.get("compressedSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compressedSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compressedSizeBytes").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uncompressedSizeBytes") != null && !jsonObj.get("uncompressedSizeBytes").isJsonNull()) && !jsonObj.get("uncompressedSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncompressedSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uncompressedSizeBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageEvent>() {
           @Override
           public void write(JsonWriter out, MessageEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageEvent
   * @throws IOException if the JSON string is invalid with respect to MessageEvent
   */
  public static MessageEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageEvent.class);
  }

  /**
   * Convert an instance of MessageEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

