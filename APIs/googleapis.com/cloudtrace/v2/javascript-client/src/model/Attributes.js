/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';

/**
 * The Attributes model module.
 * @module model/Attributes
 * @version v2
 */
class Attributes {
    /**
     * Constructs a new <code>Attributes</code>.
     * A set of attributes as key-value pairs.
     * @alias module:model/Attributes
     */
    constructor() { 
        
        Attributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes} obj Optional instance to populate.
     * @return {module:model/Attributes} The populated <code>Attributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes();

            if (data.hasOwnProperty('attributeMap')) {
                obj['attributeMap'] = ApiClient.convertToType(data['attributeMap'], {'String': AttributeValue});
            }
            if (data.hasOwnProperty('droppedAttributesCount')) {
                obj['droppedAttributesCount'] = ApiClient.convertToType(data['droppedAttributesCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the boolean values `true` or `false`. For example: \"/instance_id\": { \"string_value\": { \"value\": \"my-instance\" } } \"/http/request_bytes\": { \"int_value\": 300 } \"example.com/myattribute\": { \"bool_value\": false }
 * @member {Object.<String, module:model/AttributeValue>} attributeMap
 */
Attributes.prototype['attributeMap'] = undefined;

/**
 * The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.
 * @member {Number} droppedAttributesCount
 */
Attributes.prototype['droppedAttributesCount'] = undefined;






export default Attributes;

