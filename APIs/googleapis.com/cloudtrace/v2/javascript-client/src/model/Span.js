/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attributes from './Attributes';
import Links from './Links';
import StackTrace from './StackTrace';
import Status from './Status';
import TimeEvents from './TimeEvents';
import TruncatableString from './TruncatableString';

/**
 * The Span model module.
 * @module model/Span
 * @version v2
 */
class Span {
    /**
     * Constructs a new <code>Span</code>.
     * A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous. There might be gaps or overlaps between spans in a trace.
     * @alias module:model/Span
     */
    constructor() { 
        
        Span.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Span</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Span} obj Optional instance to populate.
     * @return {module:model/Span} The populated <code>Span</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Span();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = Attributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('childSpanCount')) {
                obj['childSpanCount'] = ApiClient.convertToType(data['childSpanCount'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = TruncatableString.constructFromObject(data['displayName']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = Links.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentSpanId')) {
                obj['parentSpanId'] = ApiClient.convertToType(data['parentSpanId'], 'String');
            }
            if (data.hasOwnProperty('sameProcessAsParentSpan')) {
                obj['sameProcessAsParentSpan'] = ApiClient.convertToType(data['sameProcessAsParentSpan'], 'Boolean');
            }
            if (data.hasOwnProperty('spanId')) {
                obj['spanId'] = ApiClient.convertToType(data['spanId'], 'String');
            }
            if (data.hasOwnProperty('spanKind')) {
                obj['spanKind'] = ApiClient.convertToType(data['spanKind'], 'String');
            }
            if (data.hasOwnProperty('stackTrace')) {
                obj['stackTrace'] = StackTrace.constructFromObject(data['stackTrace']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('timeEvents')) {
                obj['timeEvents'] = TimeEvents.constructFromObject(data['timeEvents']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Span</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Span</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          Attributes.validateJSON(data['attributes']);
        }
        // validate the optional field `displayName`
        if (data['displayName']) { // data not null
          TruncatableString.validateJSON(data['displayName']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          Links.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentSpanId'] && !(typeof data['parentSpanId'] === 'string' || data['parentSpanId'] instanceof String)) {
            throw new Error("Expected the field `parentSpanId` to be a primitive type in the JSON string but got " + data['parentSpanId']);
        }
        // ensure the json data is a string
        if (data['spanId'] && !(typeof data['spanId'] === 'string' || data['spanId'] instanceof String)) {
            throw new Error("Expected the field `spanId` to be a primitive type in the JSON string but got " + data['spanId']);
        }
        // ensure the json data is a string
        if (data['spanKind'] && !(typeof data['spanKind'] === 'string' || data['spanKind'] instanceof String)) {
            throw new Error("Expected the field `spanKind` to be a primitive type in the JSON string but got " + data['spanKind']);
        }
        // validate the optional field `stackTrace`
        if (data['stackTrace']) { // data not null
          StackTrace.validateJSON(data['stackTrace']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        // validate the optional field `timeEvents`
        if (data['timeEvents']) { // data not null
          TimeEvents.validateJSON(data['timeEvents']);
        }

        return true;
    }


}



/**
 * @member {module:model/Attributes} attributes
 */
Span.prototype['attributes'] = undefined;

/**
 * Optional. The number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.
 * @member {Number} childSpanCount
 */
Span.prototype['childSpanCount'] = undefined;

/**
 * @member {module:model/TruncatableString} displayName
 */
Span.prototype['displayName'] = undefined;

/**
 * Required. The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.
 * @member {String} endTime
 */
Span.prototype['endTime'] = undefined;

/**
 * @member {module:model/Links} links
 */
Span.prototype['links'] = undefined;

/**
 * Required. The resource name of the span in the following format: * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. It should not be zero. .
 * @member {String} name
 */
Span.prototype['name'] = undefined;

/**
 * The `[SPAN_ID]` of this span's parent span. If this is a root span, then this field must be empty.
 * @member {String} parentSpanId
 */
Span.prototype['parentSpanId'] = undefined;

/**
 * Optional. Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Trace is unable to take advantage of this helpful information.
 * @member {Boolean} sameProcessAsParentSpan
 */
Span.prototype['sameProcessAsParentSpan'] = undefined;

/**
 * Required. The `[SPAN_ID]` portion of the span's resource name.
 * @member {String} spanId
 */
Span.prototype['spanId'] = undefined;

/**
 * Optional. Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.
 * @member {module:model/Span.SpanKindEnum} spanKind
 */
Span.prototype['spanKind'] = undefined;

/**
 * @member {module:model/StackTrace} stackTrace
 */
Span.prototype['stackTrace'] = undefined;

/**
 * Required. The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.
 * @member {String} startTime
 */
Span.prototype['startTime'] = undefined;

/**
 * @member {module:model/Status} status
 */
Span.prototype['status'] = undefined;

/**
 * @member {module:model/TimeEvents} timeEvents
 */
Span.prototype['timeEvents'] = undefined;





/**
 * Allowed values for the <code>spanKind</code> property.
 * @enum {String}
 * @readonly
 */
Span['SpanKindEnum'] = {

    /**
     * value: "SPAN_KIND_UNSPECIFIED"
     * @const
     */
    "SPAN_KIND_UNSPECIFIED": "SPAN_KIND_UNSPECIFIED",

    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL",

    /**
     * value: "SERVER"
     * @const
     */
    "SERVER": "SERVER",

    /**
     * value: "CLIENT"
     * @const
     */
    "CLIENT": "CLIENT",

    /**
     * value: "PRODUCER"
     * @const
     */
    "PRODUCER": "PRODUCER",

    /**
     * value: "CONSUMER"
     * @const
     */
    "CONSUMER": "CONSUMER"
};



export default Span;

