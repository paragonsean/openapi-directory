/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudTraceApi);
  }
}(this, function(expect, CloudTraceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudTraceApi.Span();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Span', function() {
    it('should create an instance of Span', function() {
      // uncomment below and update the code to test Span
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be.a(CloudTraceApi.Span);
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property childSpanCount (base name: "childSpanCount")', function() {
      // uncomment below and update the code to test the property childSpanCount
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property parentSpanId (base name: "parentSpanId")', function() {
      // uncomment below and update the code to test the property parentSpanId
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property sameProcessAsParentSpan (base name: "sameProcessAsParentSpan")', function() {
      // uncomment below and update the code to test the property sameProcessAsParentSpan
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property spanId (base name: "spanId")', function() {
      // uncomment below and update the code to test the property spanId
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property spanKind (base name: "spanKind")', function() {
      // uncomment below and update the code to test the property spanKind
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property stackTrace (base name: "stackTrace")', function() {
      // uncomment below and update the code to test the property stackTrace
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

    it('should have the property timeEvents (base name: "timeEvents")', function() {
      // uncomment below and update the code to test the property timeEvents
      //var instance = new CloudTraceApi.Span();
      //expect(instance).to.be();
    });

  });

}));
