/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITruncatableString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITruncatableString::OAITruncatableString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITruncatableString::OAITruncatableString() {
    this->initializeModel();
}

OAITruncatableString::~OAITruncatableString() {}

void OAITruncatableString::initializeModel() {

    m_truncated_byte_count_isSet = false;
    m_truncated_byte_count_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITruncatableString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITruncatableString::fromJsonObject(QJsonObject json) {

    m_truncated_byte_count_isValid = ::OpenAPI::fromJsonValue(m_truncated_byte_count, json[QString("truncatedByteCount")]);
    m_truncated_byte_count_isSet = !json[QString("truncatedByteCount")].isNull() && m_truncated_byte_count_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITruncatableString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITruncatableString::asJsonObject() const {
    QJsonObject obj;
    if (m_truncated_byte_count_isSet) {
        obj.insert(QString("truncatedByteCount"), ::OpenAPI::toJsonValue(m_truncated_byte_count));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAITruncatableString::getTruncatedByteCount() const {
    return m_truncated_byte_count;
}
void OAITruncatableString::setTruncatedByteCount(const qint32 &truncated_byte_count) {
    m_truncated_byte_count = truncated_byte_count;
    m_truncated_byte_count_isSet = true;
}

bool OAITruncatableString::is_truncated_byte_count_Set() const{
    return m_truncated_byte_count_isSet;
}

bool OAITruncatableString::is_truncated_byte_count_Valid() const{
    return m_truncated_byte_count_isValid;
}

QString OAITruncatableString::getValue() const {
    return m_value;
}
void OAITruncatableString::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITruncatableString::is_value_Set() const{
    return m_value_isSet;
}

bool OAITruncatableString::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITruncatableString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_truncated_byte_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITruncatableString::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
