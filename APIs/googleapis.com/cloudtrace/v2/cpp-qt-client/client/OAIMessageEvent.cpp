/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageEvent::OAIMessageEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageEvent::OAIMessageEvent() {
    this->initializeModel();
}

OAIMessageEvent::~OAIMessageEvent() {}

void OAIMessageEvent::initializeModel() {

    m_compressed_size_bytes_isSet = false;
    m_compressed_size_bytes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uncompressed_size_bytes_isSet = false;
    m_uncompressed_size_bytes_isValid = false;
}

void OAIMessageEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageEvent::fromJsonObject(QJsonObject json) {

    m_compressed_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_compressed_size_bytes, json[QString("compressedSizeBytes")]);
    m_compressed_size_bytes_isSet = !json[QString("compressedSizeBytes")].isNull() && m_compressed_size_bytes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uncompressed_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_size_bytes, json[QString("uncompressedSizeBytes")]);
    m_uncompressed_size_bytes_isSet = !json[QString("uncompressedSizeBytes")].isNull() && m_uncompressed_size_bytes_isValid;
}

QString OAIMessageEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_compressed_size_bytes_isSet) {
        obj.insert(QString("compressedSizeBytes"), ::OpenAPI::toJsonValue(m_compressed_size_bytes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uncompressed_size_bytes_isSet) {
        obj.insert(QString("uncompressedSizeBytes"), ::OpenAPI::toJsonValue(m_uncompressed_size_bytes));
    }
    return obj;
}

QString OAIMessageEvent::getCompressedSizeBytes() const {
    return m_compressed_size_bytes;
}
void OAIMessageEvent::setCompressedSizeBytes(const QString &compressed_size_bytes) {
    m_compressed_size_bytes = compressed_size_bytes;
    m_compressed_size_bytes_isSet = true;
}

bool OAIMessageEvent::is_compressed_size_bytes_Set() const{
    return m_compressed_size_bytes_isSet;
}

bool OAIMessageEvent::is_compressed_size_bytes_Valid() const{
    return m_compressed_size_bytes_isValid;
}

QString OAIMessageEvent::getId() const {
    return m_id;
}
void OAIMessageEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessageEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessageEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMessageEvent::getType() const {
    return m_type;
}
void OAIMessageEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageEvent::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMessageEvent::getUncompressedSizeBytes() const {
    return m_uncompressed_size_bytes;
}
void OAIMessageEvent::setUncompressedSizeBytes(const QString &uncompressed_size_bytes) {
    m_uncompressed_size_bytes = uncompressed_size_bytes;
    m_uncompressed_size_bytes_isSet = true;
}

bool OAIMessageEvent::is_uncompressed_size_bytes_Set() const{
    return m_uncompressed_size_bytes_isSet;
}

bool OAIMessageEvent::is_uncompressed_size_bytes_Valid() const{
    return m_uncompressed_size_bytes_isValid;
}

bool OAIMessageEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compressed_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
