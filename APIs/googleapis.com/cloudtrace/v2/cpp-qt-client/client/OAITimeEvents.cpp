/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeEvents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeEvents::OAITimeEvents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeEvents::OAITimeEvents() {
    this->initializeModel();
}

OAITimeEvents::~OAITimeEvents() {}

void OAITimeEvents::initializeModel() {

    m_dropped_annotations_count_isSet = false;
    m_dropped_annotations_count_isValid = false;

    m_dropped_message_events_count_isSet = false;
    m_dropped_message_events_count_isValid = false;

    m_time_event_isSet = false;
    m_time_event_isValid = false;
}

void OAITimeEvents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeEvents::fromJsonObject(QJsonObject json) {

    m_dropped_annotations_count_isValid = ::OpenAPI::fromJsonValue(m_dropped_annotations_count, json[QString("droppedAnnotationsCount")]);
    m_dropped_annotations_count_isSet = !json[QString("droppedAnnotationsCount")].isNull() && m_dropped_annotations_count_isValid;

    m_dropped_message_events_count_isValid = ::OpenAPI::fromJsonValue(m_dropped_message_events_count, json[QString("droppedMessageEventsCount")]);
    m_dropped_message_events_count_isSet = !json[QString("droppedMessageEventsCount")].isNull() && m_dropped_message_events_count_isValid;

    m_time_event_isValid = ::OpenAPI::fromJsonValue(m_time_event, json[QString("timeEvent")]);
    m_time_event_isSet = !json[QString("timeEvent")].isNull() && m_time_event_isValid;
}

QString OAITimeEvents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeEvents::asJsonObject() const {
    QJsonObject obj;
    if (m_dropped_annotations_count_isSet) {
        obj.insert(QString("droppedAnnotationsCount"), ::OpenAPI::toJsonValue(m_dropped_annotations_count));
    }
    if (m_dropped_message_events_count_isSet) {
        obj.insert(QString("droppedMessageEventsCount"), ::OpenAPI::toJsonValue(m_dropped_message_events_count));
    }
    if (m_time_event.size() > 0) {
        obj.insert(QString("timeEvent"), ::OpenAPI::toJsonValue(m_time_event));
    }
    return obj;
}

qint32 OAITimeEvents::getDroppedAnnotationsCount() const {
    return m_dropped_annotations_count;
}
void OAITimeEvents::setDroppedAnnotationsCount(const qint32 &dropped_annotations_count) {
    m_dropped_annotations_count = dropped_annotations_count;
    m_dropped_annotations_count_isSet = true;
}

bool OAITimeEvents::is_dropped_annotations_count_Set() const{
    return m_dropped_annotations_count_isSet;
}

bool OAITimeEvents::is_dropped_annotations_count_Valid() const{
    return m_dropped_annotations_count_isValid;
}

qint32 OAITimeEvents::getDroppedMessageEventsCount() const {
    return m_dropped_message_events_count;
}
void OAITimeEvents::setDroppedMessageEventsCount(const qint32 &dropped_message_events_count) {
    m_dropped_message_events_count = dropped_message_events_count;
    m_dropped_message_events_count_isSet = true;
}

bool OAITimeEvents::is_dropped_message_events_count_Set() const{
    return m_dropped_message_events_count_isSet;
}

bool OAITimeEvents::is_dropped_message_events_count_Valid() const{
    return m_dropped_message_events_count_isValid;
}

QList<OAITimeEvent> OAITimeEvents::getTimeEvent() const {
    return m_time_event;
}
void OAITimeEvents::setTimeEvent(const QList<OAITimeEvent> &time_event) {
    m_time_event = time_event;
    m_time_event_isSet = true;
}

bool OAITimeEvents::is_time_event_Set() const{
    return m_time_event_isSet;
}

bool OAITimeEvents::is_time_event_Valid() const{
    return m_time_event_isValid;
}

bool OAITimeEvents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dropped_annotations_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropped_message_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeEvents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
