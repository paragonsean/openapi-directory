/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation::OAIAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation::OAIAnnotation() {
    this->initializeModel();
}

OAIAnnotation::~OAIAnnotation() {}

void OAIAnnotation::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotation::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

OAIAttributes OAIAnnotation::getAttributes() const {
    return m_attributes;
}
void OAIAnnotation::setAttributes(const OAIAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAnnotation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAnnotation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAITruncatableString OAIAnnotation::getDescription() const {
    return m_description;
}
void OAIAnnotation::setDescription(const OAITruncatableString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnnotation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnnotation::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
