/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackFrame::OAIStackFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackFrame::OAIStackFrame() {
    this->initializeModel();
}

OAIStackFrame::~OAIStackFrame() {}

void OAIStackFrame::initializeModel() {

    m_column_number_isSet = false;
    m_column_number_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_function_name_isSet = false;
    m_function_name_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_load_module_isSet = false;
    m_load_module_isValid = false;

    m_original_function_name_isSet = false;
    m_original_function_name_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;
}

void OAIStackFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackFrame::fromJsonObject(QJsonObject json) {

    m_column_number_isValid = ::OpenAPI::fromJsonValue(m_column_number, json[QString("columnNumber")]);
    m_column_number_isSet = !json[QString("columnNumber")].isNull() && m_column_number_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_load_module_isValid = ::OpenAPI::fromJsonValue(m_load_module, json[QString("loadModule")]);
    m_load_module_isSet = !json[QString("loadModule")].isNull() && m_load_module_isValid;

    m_original_function_name_isValid = ::OpenAPI::fromJsonValue(m_original_function_name, json[QString("originalFunctionName")]);
    m_original_function_name_isSet = !json[QString("originalFunctionName")].isNull() && m_original_function_name_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;
}

QString OAIStackFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_column_number_isSet) {
        obj.insert(QString("columnNumber"), ::OpenAPI::toJsonValue(m_column_number));
    }
    if (m_file_name.isSet()) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_function_name.isSet()) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_load_module.isSet()) {
        obj.insert(QString("loadModule"), ::OpenAPI::toJsonValue(m_load_module));
    }
    if (m_original_function_name.isSet()) {
        obj.insert(QString("originalFunctionName"), ::OpenAPI::toJsonValue(m_original_function_name));
    }
    if (m_source_version.isSet()) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    return obj;
}

QString OAIStackFrame::getColumnNumber() const {
    return m_column_number;
}
void OAIStackFrame::setColumnNumber(const QString &column_number) {
    m_column_number = column_number;
    m_column_number_isSet = true;
}

bool OAIStackFrame::is_column_number_Set() const{
    return m_column_number_isSet;
}

bool OAIStackFrame::is_column_number_Valid() const{
    return m_column_number_isValid;
}

OAITruncatableString OAIStackFrame::getFileName() const {
    return m_file_name;
}
void OAIStackFrame::setFileName(const OAITruncatableString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIStackFrame::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIStackFrame::is_file_name_Valid() const{
    return m_file_name_isValid;
}

OAITruncatableString OAIStackFrame::getFunctionName() const {
    return m_function_name;
}
void OAIStackFrame::setFunctionName(const OAITruncatableString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIStackFrame::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIStackFrame::is_function_name_Valid() const{
    return m_function_name_isValid;
}

QString OAIStackFrame::getLineNumber() const {
    return m_line_number;
}
void OAIStackFrame::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIStackFrame::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIStackFrame::is_line_number_Valid() const{
    return m_line_number_isValid;
}

OAIModule OAIStackFrame::getLoadModule() const {
    return m_load_module;
}
void OAIStackFrame::setLoadModule(const OAIModule &load_module) {
    m_load_module = load_module;
    m_load_module_isSet = true;
}

bool OAIStackFrame::is_load_module_Set() const{
    return m_load_module_isSet;
}

bool OAIStackFrame::is_load_module_Valid() const{
    return m_load_module_isValid;
}

OAITruncatableString OAIStackFrame::getOriginalFunctionName() const {
    return m_original_function_name;
}
void OAIStackFrame::setOriginalFunctionName(const OAITruncatableString &original_function_name) {
    m_original_function_name = original_function_name;
    m_original_function_name_isSet = true;
}

bool OAIStackFrame::is_original_function_name_Set() const{
    return m_original_function_name_isSet;
}

bool OAIStackFrame::is_original_function_name_Valid() const{
    return m_original_function_name_isValid;
}

OAITruncatableString OAIStackFrame::getSourceVersion() const {
    return m_source_version;
}
void OAIStackFrame::setSourceVersion(const OAITruncatableString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIStackFrame::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIStackFrame::is_source_version_Valid() const{
    return m_source_version_isValid;
}

bool OAIStackFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_module.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_function_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
