/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeEvent::OAITimeEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeEvent::OAITimeEvent() {
    this->initializeModel();
}

OAITimeEvent::~OAITimeEvent() {}

void OAITimeEvent::initializeModel() {

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_message_event_isSet = false;
    m_message_event_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAITimeEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeEvent::fromJsonObject(QJsonObject json) {

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_message_event_isValid = ::OpenAPI::fromJsonValue(m_message_event, json[QString("messageEvent")]);
    m_message_event_isSet = !json[QString("messageEvent")].isNull() && m_message_event_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAITimeEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation.isSet()) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_message_event.isSet()) {
        obj.insert(QString("messageEvent"), ::OpenAPI::toJsonValue(m_message_event));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

OAIAnnotation OAITimeEvent::getAnnotation() const {
    return m_annotation;
}
void OAITimeEvent::setAnnotation(const OAIAnnotation &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAITimeEvent::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAITimeEvent::is_annotation_Valid() const{
    return m_annotation_isValid;
}

OAIMessageEvent OAITimeEvent::getMessageEvent() const {
    return m_message_event;
}
void OAITimeEvent::setMessageEvent(const OAIMessageEvent &message_event) {
    m_message_event = message_event;
    m_message_event_isSet = true;
}

bool OAITimeEvent::is_message_event_Set() const{
    return m_message_event_isSet;
}

bool OAITimeEvent::is_message_event_Valid() const{
    return m_message_event_isValid;
}

QString OAITimeEvent::getTime() const {
    return m_time;
}
void OAITimeEvent::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAITimeEvent::is_time_Set() const{
    return m_time_isSet;
}

bool OAITimeEvent::is_time_Valid() const{
    return m_time_isValid;
}

bool OAITimeEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
