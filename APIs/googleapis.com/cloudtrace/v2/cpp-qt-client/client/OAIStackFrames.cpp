/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackFrames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackFrames::OAIStackFrames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackFrames::OAIStackFrames() {
    this->initializeModel();
}

OAIStackFrames::~OAIStackFrames() {}

void OAIStackFrames::initializeModel() {

    m_dropped_frames_count_isSet = false;
    m_dropped_frames_count_isValid = false;

    m_frame_isSet = false;
    m_frame_isValid = false;
}

void OAIStackFrames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackFrames::fromJsonObject(QJsonObject json) {

    m_dropped_frames_count_isValid = ::OpenAPI::fromJsonValue(m_dropped_frames_count, json[QString("droppedFramesCount")]);
    m_dropped_frames_count_isSet = !json[QString("droppedFramesCount")].isNull() && m_dropped_frames_count_isValid;

    m_frame_isValid = ::OpenAPI::fromJsonValue(m_frame, json[QString("frame")]);
    m_frame_isSet = !json[QString("frame")].isNull() && m_frame_isValid;
}

QString OAIStackFrames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackFrames::asJsonObject() const {
    QJsonObject obj;
    if (m_dropped_frames_count_isSet) {
        obj.insert(QString("droppedFramesCount"), ::OpenAPI::toJsonValue(m_dropped_frames_count));
    }
    if (m_frame.size() > 0) {
        obj.insert(QString("frame"), ::OpenAPI::toJsonValue(m_frame));
    }
    return obj;
}

qint32 OAIStackFrames::getDroppedFramesCount() const {
    return m_dropped_frames_count;
}
void OAIStackFrames::setDroppedFramesCount(const qint32 &dropped_frames_count) {
    m_dropped_frames_count = dropped_frames_count;
    m_dropped_frames_count_isSet = true;
}

bool OAIStackFrames::is_dropped_frames_count_Set() const{
    return m_dropped_frames_count_isSet;
}

bool OAIStackFrames::is_dropped_frames_count_Valid() const{
    return m_dropped_frames_count_isValid;
}

QList<OAIStackFrame> OAIStackFrames::getFrame() const {
    return m_frame;
}
void OAIStackFrames::setFrame(const QList<OAIStackFrame> &frame) {
    m_frame = frame;
    m_frame_isSet = true;
}

bool OAIStackFrames::is_frame_Set() const{
    return m_frame_isSet;
}

bool OAIStackFrames::is_frame_Valid() const{
    return m_frame_isValid;
}

bool OAIStackFrames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dropped_frames_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackFrames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
