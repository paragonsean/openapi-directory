/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpan::OAISpan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpan::OAISpan() {
    this->initializeModel();
}

OAISpan::~OAISpan() {}

void OAISpan::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_child_span_count_isSet = false;
    m_child_span_count_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_span_id_isSet = false;
    m_parent_span_id_isValid = false;

    m_same_process_as_parent_span_isSet = false;
    m_same_process_as_parent_span_isValid = false;

    m_span_id_isSet = false;
    m_span_id_isValid = false;

    m_span_kind_isSet = false;
    m_span_kind_isValid = false;

    m_stack_trace_isSet = false;
    m_stack_trace_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_events_isSet = false;
    m_time_events_isValid = false;
}

void OAISpan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpan::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_child_span_count_isValid = ::OpenAPI::fromJsonValue(m_child_span_count, json[QString("childSpanCount")]);
    m_child_span_count_isSet = !json[QString("childSpanCount")].isNull() && m_child_span_count_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_span_id_isValid = ::OpenAPI::fromJsonValue(m_parent_span_id, json[QString("parentSpanId")]);
    m_parent_span_id_isSet = !json[QString("parentSpanId")].isNull() && m_parent_span_id_isValid;

    m_same_process_as_parent_span_isValid = ::OpenAPI::fromJsonValue(m_same_process_as_parent_span, json[QString("sameProcessAsParentSpan")]);
    m_same_process_as_parent_span_isSet = !json[QString("sameProcessAsParentSpan")].isNull() && m_same_process_as_parent_span_isValid;

    m_span_id_isValid = ::OpenAPI::fromJsonValue(m_span_id, json[QString("spanId")]);
    m_span_id_isSet = !json[QString("spanId")].isNull() && m_span_id_isValid;

    m_span_kind_isValid = ::OpenAPI::fromJsonValue(m_span_kind, json[QString("spanKind")]);
    m_span_kind_isSet = !json[QString("spanKind")].isNull() && m_span_kind_isValid;

    m_stack_trace_isValid = ::OpenAPI::fromJsonValue(m_stack_trace, json[QString("stackTrace")]);
    m_stack_trace_isSet = !json[QString("stackTrace")].isNull() && m_stack_trace_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_events_isValid = ::OpenAPI::fromJsonValue(m_time_events, json[QString("timeEvents")]);
    m_time_events_isSet = !json[QString("timeEvents")].isNull() && m_time_events_isValid;
}

QString OAISpan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpan::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_child_span_count_isSet) {
        obj.insert(QString("childSpanCount"), ::OpenAPI::toJsonValue(m_child_span_count));
    }
    if (m_display_name.isSet()) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_span_id_isSet) {
        obj.insert(QString("parentSpanId"), ::OpenAPI::toJsonValue(m_parent_span_id));
    }
    if (m_same_process_as_parent_span_isSet) {
        obj.insert(QString("sameProcessAsParentSpan"), ::OpenAPI::toJsonValue(m_same_process_as_parent_span));
    }
    if (m_span_id_isSet) {
        obj.insert(QString("spanId"), ::OpenAPI::toJsonValue(m_span_id));
    }
    if (m_span_kind_isSet) {
        obj.insert(QString("spanKind"), ::OpenAPI::toJsonValue(m_span_kind));
    }
    if (m_stack_trace.isSet()) {
        obj.insert(QString("stackTrace"), ::OpenAPI::toJsonValue(m_stack_trace));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_events.isSet()) {
        obj.insert(QString("timeEvents"), ::OpenAPI::toJsonValue(m_time_events));
    }
    return obj;
}

OAIAttributes OAISpan::getAttributes() const {
    return m_attributes;
}
void OAISpan::setAttributes(const OAIAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISpan::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISpan::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAISpan::getChildSpanCount() const {
    return m_child_span_count;
}
void OAISpan::setChildSpanCount(const qint32 &child_span_count) {
    m_child_span_count = child_span_count;
    m_child_span_count_isSet = true;
}

bool OAISpan::is_child_span_count_Set() const{
    return m_child_span_count_isSet;
}

bool OAISpan::is_child_span_count_Valid() const{
    return m_child_span_count_isValid;
}

OAITruncatableString OAISpan::getDisplayName() const {
    return m_display_name;
}
void OAISpan::setDisplayName(const OAITruncatableString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISpan::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISpan::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISpan::getEndTime() const {
    return m_end_time;
}
void OAISpan::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAISpan::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAISpan::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAILinks OAISpan::getLinks() const {
    return m_links;
}
void OAISpan::setLinks(const OAILinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAISpan::is_links_Set() const{
    return m_links_isSet;
}

bool OAISpan::is_links_Valid() const{
    return m_links_isValid;
}

QString OAISpan::getName() const {
    return m_name;
}
void OAISpan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpan::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpan::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISpan::getParentSpanId() const {
    return m_parent_span_id;
}
void OAISpan::setParentSpanId(const QString &parent_span_id) {
    m_parent_span_id = parent_span_id;
    m_parent_span_id_isSet = true;
}

bool OAISpan::is_parent_span_id_Set() const{
    return m_parent_span_id_isSet;
}

bool OAISpan::is_parent_span_id_Valid() const{
    return m_parent_span_id_isValid;
}

bool OAISpan::isSameProcessAsParentSpan() const {
    return m_same_process_as_parent_span;
}
void OAISpan::setSameProcessAsParentSpan(const bool &same_process_as_parent_span) {
    m_same_process_as_parent_span = same_process_as_parent_span;
    m_same_process_as_parent_span_isSet = true;
}

bool OAISpan::is_same_process_as_parent_span_Set() const{
    return m_same_process_as_parent_span_isSet;
}

bool OAISpan::is_same_process_as_parent_span_Valid() const{
    return m_same_process_as_parent_span_isValid;
}

QString OAISpan::getSpanId() const {
    return m_span_id;
}
void OAISpan::setSpanId(const QString &span_id) {
    m_span_id = span_id;
    m_span_id_isSet = true;
}

bool OAISpan::is_span_id_Set() const{
    return m_span_id_isSet;
}

bool OAISpan::is_span_id_Valid() const{
    return m_span_id_isValid;
}

QString OAISpan::getSpanKind() const {
    return m_span_kind;
}
void OAISpan::setSpanKind(const QString &span_kind) {
    m_span_kind = span_kind;
    m_span_kind_isSet = true;
}

bool OAISpan::is_span_kind_Set() const{
    return m_span_kind_isSet;
}

bool OAISpan::is_span_kind_Valid() const{
    return m_span_kind_isValid;
}

OAIStackTrace OAISpan::getStackTrace() const {
    return m_stack_trace;
}
void OAISpan::setStackTrace(const OAIStackTrace &stack_trace) {
    m_stack_trace = stack_trace;
    m_stack_trace_isSet = true;
}

bool OAISpan::is_stack_trace_Set() const{
    return m_stack_trace_isSet;
}

bool OAISpan::is_stack_trace_Valid() const{
    return m_stack_trace_isValid;
}

QString OAISpan::getStartTime() const {
    return m_start_time;
}
void OAISpan::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISpan::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISpan::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIStatus OAISpan::getStatus() const {
    return m_status;
}
void OAISpan::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpan::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpan::is_status_Valid() const{
    return m_status_isValid;
}

OAITimeEvents OAISpan::getTimeEvents() const {
    return m_time_events;
}
void OAISpan::setTimeEvents(const OAITimeEvents &time_events) {
    m_time_events = time_events;
    m_time_events_isSet = true;
}

bool OAISpan::is_time_events_Set() const{
    return m_time_events_isSet;
}

bool OAISpan::is_time_events_Valid() const{
    return m_time_events_isValid;
}

bool OAISpan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_span_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_process_as_parent_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
