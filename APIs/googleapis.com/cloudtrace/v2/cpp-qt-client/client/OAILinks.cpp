/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinks::OAILinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinks::OAILinks() {
    this->initializeModel();
}

OAILinks::~OAILinks() {}

void OAILinks::initializeModel() {

    m_dropped_links_count_isSet = false;
    m_dropped_links_count_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;
}

void OAILinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinks::fromJsonObject(QJsonObject json) {

    m_dropped_links_count_isValid = ::OpenAPI::fromJsonValue(m_dropped_links_count, json[QString("droppedLinksCount")]);
    m_dropped_links_count_isSet = !json[QString("droppedLinksCount")].isNull() && m_dropped_links_count_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;
}

QString OAILinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinks::asJsonObject() const {
    QJsonObject obj;
    if (m_dropped_links_count_isSet) {
        obj.insert(QString("droppedLinksCount"), ::OpenAPI::toJsonValue(m_dropped_links_count));
    }
    if (m_link.size() > 0) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    return obj;
}

qint32 OAILinks::getDroppedLinksCount() const {
    return m_dropped_links_count;
}
void OAILinks::setDroppedLinksCount(const qint32 &dropped_links_count) {
    m_dropped_links_count = dropped_links_count;
    m_dropped_links_count_isSet = true;
}

bool OAILinks::is_dropped_links_count_Set() const{
    return m_dropped_links_count_isSet;
}

bool OAILinks::is_dropped_links_count_Valid() const{
    return m_dropped_links_count_isValid;
}

QList<OAILink> OAILinks::getLink() const {
    return m_link;
}
void OAILinks::setLink(const QList<OAILink> &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAILinks::is_link_Set() const{
    return m_link_isSet;
}

bool OAILinks::is_link_Valid() const{
    return m_link_isValid;
}

bool OAILinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dropped_links_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
