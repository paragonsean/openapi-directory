/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessageEvent.h
 *
 * An event describing a message sent/received between Spans.
 */

#ifndef OAIMessageEvent_H
#define OAIMessageEvent_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMessageEvent : public OAIObject {
public:
    OAIMessageEvent();
    OAIMessageEvent(QString json);
    ~OAIMessageEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompressedSizeBytes() const;
    void setCompressedSizeBytes(const QString &compressed_size_bytes);
    bool is_compressed_size_bytes_Set() const;
    bool is_compressed_size_bytes_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUncompressedSizeBytes() const;
    void setUncompressedSizeBytes(const QString &uncompressed_size_bytes);
    bool is_uncompressed_size_bytes_Set() const;
    bool is_uncompressed_size_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compressed_size_bytes;
    bool m_compressed_size_bytes_isSet;
    bool m_compressed_size_bytes_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_uncompressed_size_bytes;
    bool m_uncompressed_size_bytes_isSet;
    bool m_uncompressed_size_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessageEvent)

#endif // OAIMessageEvent_H
