/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILink::OAILink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILink::OAILink() {
    this->initializeModel();
}

OAILink::~OAILink() {}

void OAILink::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_span_id_isSet = false;
    m_span_id_isValid = false;

    m_trace_id_isSet = false;
    m_trace_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILink::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_span_id_isValid = ::OpenAPI::fromJsonValue(m_span_id, json[QString("spanId")]);
    m_span_id_isSet = !json[QString("spanId")].isNull() && m_span_id_isValid;

    m_trace_id_isValid = ::OpenAPI::fromJsonValue(m_trace_id, json[QString("traceId")]);
    m_trace_id_isSet = !json[QString("traceId")].isNull() && m_trace_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILink::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_span_id_isSet) {
        obj.insert(QString("spanId"), ::OpenAPI::toJsonValue(m_span_id));
    }
    if (m_trace_id_isSet) {
        obj.insert(QString("traceId"), ::OpenAPI::toJsonValue(m_trace_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAttributes OAILink::getAttributes() const {
    return m_attributes;
}
void OAILink::setAttributes(const OAIAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAILink::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAILink::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAILink::getSpanId() const {
    return m_span_id;
}
void OAILink::setSpanId(const QString &span_id) {
    m_span_id = span_id;
    m_span_id_isSet = true;
}

bool OAILink::is_span_id_Set() const{
    return m_span_id_isSet;
}

bool OAILink::is_span_id_Valid() const{
    return m_span_id_isValid;
}

QString OAILink::getTraceId() const {
    return m_trace_id;
}
void OAILink::setTraceId(const QString &trace_id) {
    m_trace_id = trace_id;
    m_trace_id_isSet = true;
}

bool OAILink::is_trace_id_Set() const{
    return m_trace_id_isSet;
}

bool OAILink::is_trace_id_Valid() const{
    return m_trace_id_isValid;
}

QString OAILink::getType() const {
    return m_type;
}
void OAILink::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILink::is_type_Set() const{
    return m_type_isSet;
}

bool OAILink::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
