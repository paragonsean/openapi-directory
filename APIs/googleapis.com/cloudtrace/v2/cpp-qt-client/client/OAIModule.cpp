/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModule::OAIModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModule::OAIModule() {
    this->initializeModel();
}

OAIModule::~OAIModule() {}

void OAIModule::initializeModel() {

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;
}

void OAIModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModule::fromJsonObject(QJsonObject json) {

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;
}

QString OAIModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModule::asJsonObject() const {
    QJsonObject obj;
    if (m_build_id.isSet()) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_module.isSet()) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    return obj;
}

OAITruncatableString OAIModule::getBuildId() const {
    return m_build_id;
}
void OAIModule::setBuildId(const OAITruncatableString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIModule::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIModule::is_build_id_Valid() const{
    return m_build_id_isValid;
}

OAITruncatableString OAIModule::getModule() const {
    return m_module;
}
void OAIModule::setModule(const OAITruncatableString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIModule::is_module_Set() const{
    return m_module_isSet;
}

bool OAIModule::is_module_Valid() const{
    return m_module_isValid;
}

bool OAIModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
