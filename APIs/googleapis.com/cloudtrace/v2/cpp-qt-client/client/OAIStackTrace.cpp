/**
 * Cloud Trace API
 * Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackTrace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackTrace::OAIStackTrace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackTrace::OAIStackTrace() {
    this->initializeModel();
}

OAIStackTrace::~OAIStackTrace() {}

void OAIStackTrace::initializeModel() {

    m_stack_frames_isSet = false;
    m_stack_frames_isValid = false;

    m_stack_trace_hash_id_isSet = false;
    m_stack_trace_hash_id_isValid = false;
}

void OAIStackTrace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackTrace::fromJsonObject(QJsonObject json) {

    m_stack_frames_isValid = ::OpenAPI::fromJsonValue(m_stack_frames, json[QString("stackFrames")]);
    m_stack_frames_isSet = !json[QString("stackFrames")].isNull() && m_stack_frames_isValid;

    m_stack_trace_hash_id_isValid = ::OpenAPI::fromJsonValue(m_stack_trace_hash_id, json[QString("stackTraceHashId")]);
    m_stack_trace_hash_id_isSet = !json[QString("stackTraceHashId")].isNull() && m_stack_trace_hash_id_isValid;
}

QString OAIStackTrace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackTrace::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_frames.isSet()) {
        obj.insert(QString("stackFrames"), ::OpenAPI::toJsonValue(m_stack_frames));
    }
    if (m_stack_trace_hash_id_isSet) {
        obj.insert(QString("stackTraceHashId"), ::OpenAPI::toJsonValue(m_stack_trace_hash_id));
    }
    return obj;
}

OAIStackFrames OAIStackTrace::getStackFrames() const {
    return m_stack_frames;
}
void OAIStackTrace::setStackFrames(const OAIStackFrames &stack_frames) {
    m_stack_frames = stack_frames;
    m_stack_frames_isSet = true;
}

bool OAIStackTrace::is_stack_frames_Set() const{
    return m_stack_frames_isSet;
}

bool OAIStackTrace::is_stack_frames_Valid() const{
    return m_stack_frames_isValid;
}

QString OAIStackTrace::getStackTraceHashId() const {
    return m_stack_trace_hash_id;
}
void OAIStackTrace::setStackTraceHashId(const QString &stack_trace_hash_id) {
    m_stack_trace_hash_id = stack_trace_hash_id;
    m_stack_trace_hash_id_isSet = true;
}

bool OAIStackTrace::is_stack_trace_hash_id_Set() const{
    return m_stack_trace_hash_id_isSet;
}

bool OAIStackTrace::is_stack_trace_hash_id_Valid() const{
    return m_stack_trace_hash_id_isValid;
}

bool OAIStackTrace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_frames.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace_hash_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackTrace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
