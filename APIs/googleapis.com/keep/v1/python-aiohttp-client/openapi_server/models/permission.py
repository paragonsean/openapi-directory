# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.user import User
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: bool=None, email: str=None, family: object=None, group: Group=None, name: str=None, role: str=None, user: User=None):
        """Permission - a model defined in OpenAPI

        :param deleted: The deleted of this Permission.
        :param email: The email of this Permission.
        :param family: The family of this Permission.
        :param group: The group of this Permission.
        :param name: The name of this Permission.
        :param role: The role of this Permission.
        :param user: The user of this Permission.
        """
        self.openapi_types = {
            'deleted': bool,
            'email': str,
            'family': object,
            'group': Group,
            'name': str,
            'role': str,
            'user': User
        }

        self.attribute_map = {
            'deleted': 'deleted',
            'email': 'email',
            'family': 'family',
            'group': 'group',
            'name': 'name',
            'role': 'role',
            'user': 'user'
        }

        self._deleted = deleted
        self._email = email
        self._family = family
        self._group = group
        self._name = name
        self._role = role
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this Permission.

        Output only. Whether this member has been deleted. If the member is recovered, this value is set to false and the recovered member retains the role on the note.

        :return: The deleted of this Permission.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Permission.

        Output only. Whether this member has been deleted. If the member is recovered, this value is set to false and the recovered member retains the role on the note.

        :param deleted: The deleted of this Permission.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def email(self):
        """Gets the email of this Permission.

        The email associated with the member. If set on create, the `email` field in the `User` or `Group` message must either be empty or match this field. On read, may be unset if the member does not have an associated email.

        :return: The email of this Permission.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Permission.

        The email associated with the member. If set on create, the `email` field in the `User` or `Group` message must either be empty or match this field. On read, may be unset if the member does not have an associated email.

        :param email: The email of this Permission.
        :type email: str
        """

        self._email = email

    @property
    def family(self):
        """Gets the family of this Permission.

        Describes a single Google Family.

        :return: The family of this Permission.
        :rtype: object
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Permission.

        Describes a single Google Family.

        :param family: The family of this Permission.
        :type family: object
        """

        self._family = family

    @property
    def group(self):
        """Gets the group of this Permission.


        :return: The group of this Permission.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Permission.


        :param group: The group of this Permission.
        :type group: Group
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this Permission.

        Output only. The resource name.

        :return: The name of this Permission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Permission.

        Output only. The resource name.

        :param name: The name of this Permission.
        :type name: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this Permission.

        The role granted by this permission. The role determines the entity’s ability to read, write, and share notes.

        :return: The role of this Permission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permission.

        The role granted by this permission. The role determines the entity’s ability to read, write, and share notes.

        :param role: The role of this Permission.
        :type role: str
        """
        allowed_values = ["ROLE_UNSPECIFIED", "OWNER", "WRITER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user(self):
        """Gets the user of this Permission.


        :return: The user of this Permission.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Permission.


        :param user: The user of this Permission.
        :type user: User
        """

        self._user = user
