# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_content import TextContent
from openapi_server import util


class ListItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checked: bool=None, child_list_items: List[ListItem]=None, text: TextContent=None):
        """ListItem - a model defined in OpenAPI

        :param checked: The checked of this ListItem.
        :param child_list_items: The child_list_items of this ListItem.
        :param text: The text of this ListItem.
        """
        self.openapi_types = {
            'checked': bool,
            'child_list_items': List[ListItem],
            'text': TextContent
        }

        self.attribute_map = {
            'checked': 'checked',
            'child_list_items': 'childListItems',
            'text': 'text'
        }

        self._checked = checked
        self._child_list_items = child_list_items
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListItem of this ListItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checked(self):
        """Gets the checked of this ListItem.

        Whether this item has been checked off or not.

        :return: The checked of this ListItem.
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this ListItem.

        Whether this item has been checked off or not.

        :param checked: The checked of this ListItem.
        :type checked: bool
        """

        self._checked = checked

    @property
    def child_list_items(self):
        """Gets the child_list_items of this ListItem.

        If set, list of list items nested under this list item. Only one level of nesting is allowed.

        :return: The child_list_items of this ListItem.
        :rtype: List[ListItem]
        """
        return self._child_list_items

    @child_list_items.setter
    def child_list_items(self, child_list_items):
        """Sets the child_list_items of this ListItem.

        If set, list of list items nested under this list item. Only one level of nesting is allowed.

        :param child_list_items: The child_list_items of this ListItem.
        :type child_list_items: List[ListItem]
        """

        self._child_list_items = child_list_items

    @property
    def text(self):
        """Gets the text of this ListItem.


        :return: The text of this ListItem.
        :rtype: TextContent
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ListItem.


        :param text: The text of this ListItem.
        :type text: TextContent
        """

        self._text = text
