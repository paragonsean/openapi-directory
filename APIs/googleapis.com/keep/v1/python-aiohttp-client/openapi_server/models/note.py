# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.permission import Permission
from openapi_server.models.section import Section
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, body: Section=None, create_time: str=None, name: str=None, permissions: List[Permission]=None, title: str=None, trash_time: str=None, trashed: bool=None, update_time: str=None):
        """Note - a model defined in OpenAPI

        :param attachments: The attachments of this Note.
        :param body: The body of this Note.
        :param create_time: The create_time of this Note.
        :param name: The name of this Note.
        :param permissions: The permissions of this Note.
        :param title: The title of this Note.
        :param trash_time: The trash_time of this Note.
        :param trashed: The trashed of this Note.
        :param update_time: The update_time of this Note.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'body': Section,
            'create_time': str,
            'name': str,
            'permissions': List[Permission],
            'title': str,
            'trash_time': str,
            'trashed': bool,
            'update_time': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'body': 'body',
            'create_time': 'createTime',
            'name': 'name',
            'permissions': 'permissions',
            'title': 'title',
            'trash_time': 'trashTime',
            'trashed': 'trashed',
            'update_time': 'updateTime'
        }

        self._attachments = attachments
        self._body = body
        self._create_time = create_time
        self._name = name
        self._permissions = permissions
        self._title = title
        self._trash_time = trash_time
        self._trashed = trashed
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Note.

        Output only. The attachments attached to this note.

        :return: The attachments of this Note.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Note.

        Output only. The attachments attached to this note.

        :param attachments: The attachments of this Note.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def body(self):
        """Gets the body of this Note.


        :return: The body of this Note.
        :rtype: Section
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Note.


        :param body: The body of this Note.
        :type body: Section
        """

        self._body = body

    @property
    def create_time(self):
        """Gets the create_time of this Note.

        Output only. When this note was created.

        :return: The create_time of this Note.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Note.

        Output only. When this note was created.

        :param create_time: The create_time of this Note.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Note.

        Output only. The resource name of this note. See general note on identifiers in KeepService.

        :return: The name of this Note.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Note.

        Output only. The resource name of this note. See general note on identifiers in KeepService.

        :param name: The name of this Note.
        :type name: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this Note.

        Output only. The list of permissions set on the note. Contains at least one entry for the note owner.

        :return: The permissions of this Note.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Note.

        Output only. The list of permissions set on the note. Contains at least one entry for the note owner.

        :param permissions: The permissions of this Note.
        :type permissions: List[Permission]
        """

        self._permissions = permissions

    @property
    def title(self):
        """Gets the title of this Note.

        The title of the note. Length must be less than 1,000 characters.

        :return: The title of this Note.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Note.

        The title of the note. Length must be less than 1,000 characters.

        :param title: The title of this Note.
        :type title: str
        """

        self._title = title

    @property
    def trash_time(self):
        """Gets the trash_time of this Note.

        Output only. When this note was trashed. If `trashed`, the note is eventually deleted. If the note is not trashed, this field is not set (and the trashed field is `false`).

        :return: The trash_time of this Note.
        :rtype: str
        """
        return self._trash_time

    @trash_time.setter
    def trash_time(self, trash_time):
        """Sets the trash_time of this Note.

        Output only. When this note was trashed. If `trashed`, the note is eventually deleted. If the note is not trashed, this field is not set (and the trashed field is `false`).

        :param trash_time: The trash_time of this Note.
        :type trash_time: str
        """

        self._trash_time = trash_time

    @property
    def trashed(self):
        """Gets the trashed of this Note.

        Output only. `true` if this note has been trashed. If trashed, the note is eventually deleted.

        :return: The trashed of this Note.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this Note.

        Output only. `true` if this note has been trashed. If trashed, the note is eventually deleted.

        :param trashed: The trashed of this Note.
        :type trashed: bool
        """

        self._trashed = trashed

    @property
    def update_time(self):
        """Gets the update_time of this Note.

        Output only. When this note was last modified.

        :return: The update_time of this Note.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Note.

        Output only. When this note was last modified.

        :param update_time: The update_time of this Note.
        :type update_time: str
        """

        self._update_time = update_time
