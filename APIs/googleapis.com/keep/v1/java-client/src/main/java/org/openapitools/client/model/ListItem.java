/*
 * Google Keep API
 * The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TextContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single list item in a note&#39;s list.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:05.898097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListItem {
  public static final String SERIALIZED_NAME_CHECKED = "checked";
  @SerializedName(SERIALIZED_NAME_CHECKED)
  private Boolean checked;

  public static final String SERIALIZED_NAME_CHILD_LIST_ITEMS = "childListItems";
  @SerializedName(SERIALIZED_NAME_CHILD_LIST_ITEMS)
  private List<ListItem> childListItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private TextContent text;

  public ListItem() {
  }

  public ListItem checked(Boolean checked) {
    this.checked = checked;
    return this;
  }

  /**
   * Whether this item has been checked off or not.
   * @return checked
   */
  @javax.annotation.Nullable
  public Boolean getChecked() {
    return checked;
  }

  public void setChecked(Boolean checked) {
    this.checked = checked;
  }


  public ListItem childListItems(List<ListItem> childListItems) {
    this.childListItems = childListItems;
    return this;
  }

  public ListItem addChildListItemsItem(ListItem childListItemsItem) {
    if (this.childListItems == null) {
      this.childListItems = new ArrayList<>();
    }
    this.childListItems.add(childListItemsItem);
    return this;
  }

  /**
   * If set, list of list items nested under this list item. Only one level of nesting is allowed.
   * @return childListItems
   */
  @javax.annotation.Nullable
  public List<ListItem> getChildListItems() {
    return childListItems;
  }

  public void setChildListItems(List<ListItem> childListItems) {
    this.childListItems = childListItems;
  }


  public ListItem text(TextContent text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public TextContent getText() {
    return text;
  }

  public void setText(TextContent text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListItem listItem = (ListItem) o;
    return Objects.equals(this.checked, listItem.checked) &&
        Objects.equals(this.childListItems, listItem.childListItems) &&
        Objects.equals(this.text, listItem.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checked, childListItems, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListItem {\n");
    sb.append("    checked: ").append(toIndentedString(checked)).append("\n");
    sb.append("    childListItems: ").append(toIndentedString(childListItems)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checked");
    openapiFields.add("childListItems");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListItem is not found in the empty JSON string", ListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childListItems") != null && !jsonObj.get("childListItems").isJsonNull()) {
        JsonArray jsonArraychildListItems = jsonObj.getAsJsonArray("childListItems");
        if (jsonArraychildListItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childListItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childListItems` to be an array in the JSON string but got `%s`", jsonObj.get("childListItems").toString()));
          }

          // validate the optional field `childListItems` (array)
          for (int i = 0; i < jsonArraychildListItems.size(); i++) {
            ListItem.validateJsonElement(jsonArraychildListItems.get(i));
          };
        }
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        TextContent.validateJsonElement(jsonObj.get("text"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ListItem>() {
           @Override
           public void write(JsonWriter out, ListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListItem
   * @throws IOException if the JSON string is invalid with respect to ListItem
   */
  public static ListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListItem.class);
  }

  /**
   * Convert an instance of ListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

