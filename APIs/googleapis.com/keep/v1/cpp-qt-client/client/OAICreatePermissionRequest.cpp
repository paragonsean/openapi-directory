/**
 * Google Keep API
 * The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePermissionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePermissionRequest::OAICreatePermissionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePermissionRequest::OAICreatePermissionRequest() {
    this->initializeModel();
}

OAICreatePermissionRequest::~OAICreatePermissionRequest() {}

void OAICreatePermissionRequest::initializeModel() {

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;
}

void OAICreatePermissionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePermissionRequest::fromJsonObject(QJsonObject json) {

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;
}

QString OAICreatePermissionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePermissionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    return obj;
}

QString OAICreatePermissionRequest::getParent() const {
    return m_parent;
}
void OAICreatePermissionRequest::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAICreatePermissionRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAICreatePermissionRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIPermission OAICreatePermissionRequest::getPermission() const {
    return m_permission;
}
void OAICreatePermissionRequest::setPermission(const OAIPermission &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAICreatePermissionRequest::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAICreatePermissionRequest::is_permission_Valid() const{
    return m_permission_isValid;
}

bool OAICreatePermissionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePermissionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
