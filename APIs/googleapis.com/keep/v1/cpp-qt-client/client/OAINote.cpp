/**
 * Google Keep API
 * The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_trash_time_isSet = false;
    m_trash_time_isValid = false;

    m_trashed_isSet = false;
    m_trashed_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_trash_time_isValid = ::OpenAPI::fromJsonValue(m_trash_time, json[QString("trashTime")]);
    m_trash_time_isSet = !json[QString("trashTime")].isNull() && m_trash_time_isValid;

    m_trashed_isValid = ::OpenAPI::fromJsonValue(m_trashed, json[QString("trashed")]);
    m_trashed_isSet = !json[QString("trashed")].isNull() && m_trashed_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_trash_time_isSet) {
        obj.insert(QString("trashTime"), ::OpenAPI::toJsonValue(m_trash_time));
    }
    if (m_trashed_isSet) {
        obj.insert(QString("trashed"), ::OpenAPI::toJsonValue(m_trashed));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIAttachment> OAINote::getAttachments() const {
    return m_attachments;
}
void OAINote::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAINote::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAINote::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAISection OAINote::getBody() const {
    return m_body;
}
void OAINote::setBody(const OAISection &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINote::is_body_Set() const{
    return m_body_isSet;
}

bool OAINote::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINote::getCreateTime() const {
    return m_create_time;
}
void OAINote::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINote::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINote::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAINote::getName() const {
    return m_name;
}
void OAINote::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINote::is_name_Set() const{
    return m_name_isSet;
}

bool OAINote::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPermission> OAINote::getPermissions() const {
    return m_permissions;
}
void OAINote::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAINote::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAINote::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAINote::getTitle() const {
    return m_title;
}
void OAINote::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINote::is_title_Set() const{
    return m_title_isSet;
}

bool OAINote::is_title_Valid() const{
    return m_title_isValid;
}

QString OAINote::getTrashTime() const {
    return m_trash_time;
}
void OAINote::setTrashTime(const QString &trash_time) {
    m_trash_time = trash_time;
    m_trash_time_isSet = true;
}

bool OAINote::is_trash_time_Set() const{
    return m_trash_time_isSet;
}

bool OAINote::is_trash_time_Valid() const{
    return m_trash_time_isValid;
}

bool OAINote::isTrashed() const {
    return m_trashed;
}
void OAINote::setTrashed(const bool &trashed) {
    m_trashed = trashed;
    m_trashed_isSet = true;
}

bool OAINote::is_trashed_Set() const{
    return m_trashed_isSet;
}

bool OAINote::is_trashed_Valid() const{
    return m_trashed_isValid;
}

QString OAINote::getUpdateTime() const {
    return m_update_time;
}
void OAINote::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAINote::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAINote::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trash_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trashed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
