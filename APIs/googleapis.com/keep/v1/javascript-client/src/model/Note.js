/**
 * Google Keep API
 * The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import Permission from './Permission';
import Section from './Section';

/**
 * The Note model module.
 * @module model/Note
 * @version v1
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * A single note.
     * @alias module:model/Note
     */
    constructor() { 
        
        Note.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = Section.constructFromObject(data['body']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [Permission]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trashTime')) {
                obj['trashTime'] = ApiClient.convertToType(data['trashTime'], 'String');
            }
            if (data.hasOwnProperty('trashed')) {
                obj['trashed'] = ApiClient.convertToType(data['trashed'], 'Boolean');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // validate the optional field `body`
        if (data['body']) { // data not null
          Section.validateJSON(data['body']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissions'])) {
                throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
            }
            // validate the optional field `permissions` (array)
            for (const item of data['permissions']) {
                Permission.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['trashTime'] && !(typeof data['trashTime'] === 'string' || data['trashTime'] instanceof String)) {
            throw new Error("Expected the field `trashTime` to be a primitive type in the JSON string but got " + data['trashTime']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The attachments attached to this note.
 * @member {Array.<module:model/Attachment>} attachments
 */
Note.prototype['attachments'] = undefined;

/**
 * @member {module:model/Section} body
 */
Note.prototype['body'] = undefined;

/**
 * Output only. When this note was created.
 * @member {String} createTime
 */
Note.prototype['createTime'] = undefined;

/**
 * Output only. The resource name of this note. See general note on identifiers in KeepService.
 * @member {String} name
 */
Note.prototype['name'] = undefined;

/**
 * Output only. The list of permissions set on the note. Contains at least one entry for the note owner.
 * @member {Array.<module:model/Permission>} permissions
 */
Note.prototype['permissions'] = undefined;

/**
 * The title of the note. Length must be less than 1,000 characters.
 * @member {String} title
 */
Note.prototype['title'] = undefined;

/**
 * Output only. When this note was trashed. If `trashed`, the note is eventually deleted. If the note is not trashed, this field is not set (and the trashed field is `false`).
 * @member {String} trashTime
 */
Note.prototype['trashTime'] = undefined;

/**
 * Output only. `true` if this note has been trashed. If trashed, the note is eventually deleted.
 * @member {Boolean} trashed
 */
Note.prototype['trashed'] = undefined;

/**
 * Output only. When this note was last modified.
 * @member {String} updateTime
 */
Note.prototype['updateTime'] = undefined;






export default Note;

