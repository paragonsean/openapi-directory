/**
 * Google Keep API
 * The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TextContent from './TextContent';

/**
 * The ListItem model module.
 * @module model/ListItem
 * @version v1
 */
class ListItem {
    /**
     * Constructs a new <code>ListItem</code>.
     * A single list item in a note&#39;s list.
     * @alias module:model/ListItem
     */
    constructor() { 
        
        ListItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListItem} obj Optional instance to populate.
     * @return {module:model/ListItem} The populated <code>ListItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListItem();

            if (data.hasOwnProperty('checked')) {
                obj['checked'] = ApiClient.convertToType(data['checked'], 'Boolean');
            }
            if (data.hasOwnProperty('childListItems')) {
                obj['childListItems'] = ApiClient.convertToType(data['childListItems'], [ListItem]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = TextContent.constructFromObject(data['text']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListItem</code>.
     */
    static validateJSON(data) {
        if (data['childListItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childListItems'])) {
                throw new Error("Expected the field `childListItems` to be an array in the JSON data but got " + data['childListItems']);
            }
            // validate the optional field `childListItems` (array)
            for (const item of data['childListItems']) {
                ListItem.validateJSON(item);
            };
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          TextContent.validateJSON(data['text']);
        }

        return true;
    }


}



/**
 * Whether this item has been checked off or not.
 * @member {Boolean} checked
 */
ListItem.prototype['checked'] = undefined;

/**
 * If set, list of list items nested under this list item. Only one level of nesting is allowed.
 * @member {Array.<module:model/ListItem>} childListItems
 */
ListItem.prototype['childListItems'] = undefined;

/**
 * @member {module:model/TextContent} text
 */
ListItem.prototype['text'] = undefined;






export default ListItem;

