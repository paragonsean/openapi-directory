/**
 * API Keys API
 * Manages the API keys associated with developer projects.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2Restrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2Restrictions::OAIV2Restrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2Restrictions::OAIV2Restrictions() {
    this->initializeModel();
}

OAIV2Restrictions::~OAIV2Restrictions() {}

void OAIV2Restrictions::initializeModel() {

    m_android_key_restrictions_isSet = false;
    m_android_key_restrictions_isValid = false;

    m_api_targets_isSet = false;
    m_api_targets_isValid = false;

    m_browser_key_restrictions_isSet = false;
    m_browser_key_restrictions_isValid = false;

    m_ios_key_restrictions_isSet = false;
    m_ios_key_restrictions_isValid = false;

    m_server_key_restrictions_isSet = false;
    m_server_key_restrictions_isValid = false;
}

void OAIV2Restrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2Restrictions::fromJsonObject(QJsonObject json) {

    m_android_key_restrictions_isValid = ::OpenAPI::fromJsonValue(m_android_key_restrictions, json[QString("androidKeyRestrictions")]);
    m_android_key_restrictions_isSet = !json[QString("androidKeyRestrictions")].isNull() && m_android_key_restrictions_isValid;

    m_api_targets_isValid = ::OpenAPI::fromJsonValue(m_api_targets, json[QString("apiTargets")]);
    m_api_targets_isSet = !json[QString("apiTargets")].isNull() && m_api_targets_isValid;

    m_browser_key_restrictions_isValid = ::OpenAPI::fromJsonValue(m_browser_key_restrictions, json[QString("browserKeyRestrictions")]);
    m_browser_key_restrictions_isSet = !json[QString("browserKeyRestrictions")].isNull() && m_browser_key_restrictions_isValid;

    m_ios_key_restrictions_isValid = ::OpenAPI::fromJsonValue(m_ios_key_restrictions, json[QString("iosKeyRestrictions")]);
    m_ios_key_restrictions_isSet = !json[QString("iosKeyRestrictions")].isNull() && m_ios_key_restrictions_isValid;

    m_server_key_restrictions_isValid = ::OpenAPI::fromJsonValue(m_server_key_restrictions, json[QString("serverKeyRestrictions")]);
    m_server_key_restrictions_isSet = !json[QString("serverKeyRestrictions")].isNull() && m_server_key_restrictions_isValid;
}

QString OAIV2Restrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2Restrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_android_key_restrictions.isSet()) {
        obj.insert(QString("androidKeyRestrictions"), ::OpenAPI::toJsonValue(m_android_key_restrictions));
    }
    if (m_api_targets.size() > 0) {
        obj.insert(QString("apiTargets"), ::OpenAPI::toJsonValue(m_api_targets));
    }
    if (m_browser_key_restrictions.isSet()) {
        obj.insert(QString("browserKeyRestrictions"), ::OpenAPI::toJsonValue(m_browser_key_restrictions));
    }
    if (m_ios_key_restrictions.isSet()) {
        obj.insert(QString("iosKeyRestrictions"), ::OpenAPI::toJsonValue(m_ios_key_restrictions));
    }
    if (m_server_key_restrictions.isSet()) {
        obj.insert(QString("serverKeyRestrictions"), ::OpenAPI::toJsonValue(m_server_key_restrictions));
    }
    return obj;
}

OAIV2AndroidKeyRestrictions OAIV2Restrictions::getAndroidKeyRestrictions() const {
    return m_android_key_restrictions;
}
void OAIV2Restrictions::setAndroidKeyRestrictions(const OAIV2AndroidKeyRestrictions &android_key_restrictions) {
    m_android_key_restrictions = android_key_restrictions;
    m_android_key_restrictions_isSet = true;
}

bool OAIV2Restrictions::is_android_key_restrictions_Set() const{
    return m_android_key_restrictions_isSet;
}

bool OAIV2Restrictions::is_android_key_restrictions_Valid() const{
    return m_android_key_restrictions_isValid;
}

QList<OAIV2ApiTarget> OAIV2Restrictions::getApiTargets() const {
    return m_api_targets;
}
void OAIV2Restrictions::setApiTargets(const QList<OAIV2ApiTarget> &api_targets) {
    m_api_targets = api_targets;
    m_api_targets_isSet = true;
}

bool OAIV2Restrictions::is_api_targets_Set() const{
    return m_api_targets_isSet;
}

bool OAIV2Restrictions::is_api_targets_Valid() const{
    return m_api_targets_isValid;
}

OAIV2BrowserKeyRestrictions OAIV2Restrictions::getBrowserKeyRestrictions() const {
    return m_browser_key_restrictions;
}
void OAIV2Restrictions::setBrowserKeyRestrictions(const OAIV2BrowserKeyRestrictions &browser_key_restrictions) {
    m_browser_key_restrictions = browser_key_restrictions;
    m_browser_key_restrictions_isSet = true;
}

bool OAIV2Restrictions::is_browser_key_restrictions_Set() const{
    return m_browser_key_restrictions_isSet;
}

bool OAIV2Restrictions::is_browser_key_restrictions_Valid() const{
    return m_browser_key_restrictions_isValid;
}

OAIV2IosKeyRestrictions OAIV2Restrictions::getIosKeyRestrictions() const {
    return m_ios_key_restrictions;
}
void OAIV2Restrictions::setIosKeyRestrictions(const OAIV2IosKeyRestrictions &ios_key_restrictions) {
    m_ios_key_restrictions = ios_key_restrictions;
    m_ios_key_restrictions_isSet = true;
}

bool OAIV2Restrictions::is_ios_key_restrictions_Set() const{
    return m_ios_key_restrictions_isSet;
}

bool OAIV2Restrictions::is_ios_key_restrictions_Valid() const{
    return m_ios_key_restrictions_isValid;
}

OAIV2ServerKeyRestrictions OAIV2Restrictions::getServerKeyRestrictions() const {
    return m_server_key_restrictions;
}
void OAIV2Restrictions::setServerKeyRestrictions(const OAIV2ServerKeyRestrictions &server_key_restrictions) {
    m_server_key_restrictions = server_key_restrictions;
    m_server_key_restrictions_isSet = true;
}

bool OAIV2Restrictions::is_server_key_restrictions_Set() const{
    return m_server_key_restrictions_isSet;
}

bool OAIV2Restrictions::is_server_key_restrictions_Valid() const{
    return m_server_key_restrictions_isValid;
}

bool OAIV2Restrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_key_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_key_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_key_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_key_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2Restrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
