/**
 * API Keys API
 * Manages the API keys associated with developer projects.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2Key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2Key::OAIV2Key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2Key::OAIV2Key() {
    this->initializeModel();
}

OAIV2Key::~OAIV2Key() {}

void OAIV2Key::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_key_string_isSet = false;
    m_key_string_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIV2Key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2Key::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_key_string_isValid = ::OpenAPI::fromJsonValue(m_key_string, json[QString("keyString")]);
    m_key_string_isSet = !json[QString("keyString")].isNull() && m_key_string_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIV2Key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2Key::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_key_string_isSet) {
        obj.insert(QString("keyString"), ::OpenAPI::toJsonValue(m_key_string));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIV2Key::getAnnotations() const {
    return m_annotations;
}
void OAIV2Key::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIV2Key::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIV2Key::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIV2Key::getCreateTime() const {
    return m_create_time;
}
void OAIV2Key::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIV2Key::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIV2Key::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIV2Key::getDeleteTime() const {
    return m_delete_time;
}
void OAIV2Key::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIV2Key::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIV2Key::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIV2Key::getDisplayName() const {
    return m_display_name;
}
void OAIV2Key::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIV2Key::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIV2Key::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIV2Key::getEtag() const {
    return m_etag;
}
void OAIV2Key::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIV2Key::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIV2Key::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIV2Key::getKeyString() const {
    return m_key_string;
}
void OAIV2Key::setKeyString(const QString &key_string) {
    m_key_string = key_string;
    m_key_string_isSet = true;
}

bool OAIV2Key::is_key_string_Set() const{
    return m_key_string_isSet;
}

bool OAIV2Key::is_key_string_Valid() const{
    return m_key_string_isValid;
}

QString OAIV2Key::getName() const {
    return m_name;
}
void OAIV2Key::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV2Key::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV2Key::is_name_Valid() const{
    return m_name_isValid;
}

OAIV2Restrictions OAIV2Key::getRestrictions() const {
    return m_restrictions;
}
void OAIV2Key::setRestrictions(const OAIV2Restrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIV2Key::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIV2Key::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAIV2Key::getUid() const {
    return m_uid;
}
void OAIV2Key::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIV2Key::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIV2Key::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIV2Key::getUpdateTime() const {
    return m_update_time;
}
void OAIV2Key::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIV2Key::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIV2Key::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIV2Key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2Key::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
