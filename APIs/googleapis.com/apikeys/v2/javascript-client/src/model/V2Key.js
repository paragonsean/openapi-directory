/**
 * API Keys API
 * Manages the API keys associated with developer projects.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V2Restrictions from './V2Restrictions';

/**
 * The V2Key model module.
 * @module model/V2Key
 * @version v2
 */
class V2Key {
    /**
     * Constructs a new <code>V2Key</code>.
     * The representation of a key managed by the API Keys API.
     * @alias module:model/V2Key
     */
    constructor() { 
        
        V2Key.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V2Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2Key} obj Optional instance to populate.
     * @return {module:model/V2Key} The populated <code>V2Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2Key();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('keyString')) {
                obj['keyString'] = ApiClient.convertToType(data['keyString'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = V2Restrictions.constructFromObject(data['restrictions']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2Key</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2Key</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['keyString'] && !(typeof data['keyString'] === 'string' || data['keyString'] instanceof String)) {
            throw new Error("Expected the field `keyString` to be a primitive type in the JSON string but got " + data['keyString']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `restrictions`
        if (data['restrictions']) { // data not null
          V2Restrictions.validateJSON(data['restrictions']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects.
 * @member {Object.<String, String>} annotations
 */
V2Key.prototype['annotations'] = undefined;

/**
 * Output only. A timestamp identifying the time this key was originally created.
 * @member {String} createTime
 */
V2Key.prototype['createTime'] = undefined;

/**
 * Output only. A timestamp when this key was deleted. If the resource is not deleted, this must be empty.
 * @member {String} deleteTime
 */
V2Key.prototype['deleteTime'] = undefined;

/**
 * Human-readable display name of this key that you can modify. The maximum length is 63 characters.
 * @member {String} displayName
 */
V2Key.prototype['displayName'] = undefined;

/**
 * Output only. A checksum computed by the server based on the current value of the Key resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. See https://google.aip.dev/154.
 * @member {String} etag
 */
V2Key.prototype['etag'] = undefined;

/**
 * Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString` method.
 * @member {String} keyString
 */
V2Key.prototype['keyString'] = undefined;

/**
 * Output only. The resource name of the key. The `name` has the form: `projects//locations/global/keys/`. For example: `projects/123456867718/locations/global/keys/b7ff1f9f-8275-410a-94dd-3855ee9b5dd2` NOTE: Key is a global resource; hence the only supported value for location is `global`.
 * @member {String} name
 */
V2Key.prototype['name'] = undefined;

/**
 * @member {module:model/V2Restrictions} restrictions
 */
V2Key.prototype['restrictions'] = undefined;

/**
 * Output only. Unique id in UUID4 format.
 * @member {String} uid
 */
V2Key.prototype['uid'] = undefined;

/**
 * Output only. A timestamp identifying the time this key was last updated.
 * @member {String} updateTime
 */
V2Key.prototype['updateTime'] = undefined;






export default V2Key;

