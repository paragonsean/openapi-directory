/*
 * API Keys API
 * Manages the API keys associated with developer projects.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V2AndroidKeyRestrictions;
import org.openapitools.client.model.V2ApiTarget;
import org.openapitools.client.model.V2BrowserKeyRestrictions;
import org.openapitools.client.model.V2IosKeyRestrictions;
import org.openapitools.client.model.V2ServerKeyRestrictions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the restrictions on the key.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:05.128694-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V2Restrictions {
  public static final String SERIALIZED_NAME_ANDROID_KEY_RESTRICTIONS = "androidKeyRestrictions";
  @SerializedName(SERIALIZED_NAME_ANDROID_KEY_RESTRICTIONS)
  private V2AndroidKeyRestrictions androidKeyRestrictions;

  public static final String SERIALIZED_NAME_API_TARGETS = "apiTargets";
  @SerializedName(SERIALIZED_NAME_API_TARGETS)
  private List<V2ApiTarget> apiTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_BROWSER_KEY_RESTRICTIONS = "browserKeyRestrictions";
  @SerializedName(SERIALIZED_NAME_BROWSER_KEY_RESTRICTIONS)
  private V2BrowserKeyRestrictions browserKeyRestrictions;

  public static final String SERIALIZED_NAME_IOS_KEY_RESTRICTIONS = "iosKeyRestrictions";
  @SerializedName(SERIALIZED_NAME_IOS_KEY_RESTRICTIONS)
  private V2IosKeyRestrictions iosKeyRestrictions;

  public static final String SERIALIZED_NAME_SERVER_KEY_RESTRICTIONS = "serverKeyRestrictions";
  @SerializedName(SERIALIZED_NAME_SERVER_KEY_RESTRICTIONS)
  private V2ServerKeyRestrictions serverKeyRestrictions;

  public V2Restrictions() {
  }

  public V2Restrictions androidKeyRestrictions(V2AndroidKeyRestrictions androidKeyRestrictions) {
    this.androidKeyRestrictions = androidKeyRestrictions;
    return this;
  }

  /**
   * Get androidKeyRestrictions
   * @return androidKeyRestrictions
   */
  @javax.annotation.Nullable
  public V2AndroidKeyRestrictions getAndroidKeyRestrictions() {
    return androidKeyRestrictions;
  }

  public void setAndroidKeyRestrictions(V2AndroidKeyRestrictions androidKeyRestrictions) {
    this.androidKeyRestrictions = androidKeyRestrictions;
  }


  public V2Restrictions apiTargets(List<V2ApiTarget> apiTargets) {
    this.apiTargets = apiTargets;
    return this;
  }

  public V2Restrictions addApiTargetsItem(V2ApiTarget apiTargetsItem) {
    if (this.apiTargets == null) {
      this.apiTargets = new ArrayList<>();
    }
    this.apiTargets.add(apiTargetsItem);
    return this;
  }

  /**
   * A restriction for a specific service and optionally one or more specific methods. Requests are allowed if they match any of these restrictions. If no restrictions are specified, all targets are allowed.
   * @return apiTargets
   */
  @javax.annotation.Nullable
  public List<V2ApiTarget> getApiTargets() {
    return apiTargets;
  }

  public void setApiTargets(List<V2ApiTarget> apiTargets) {
    this.apiTargets = apiTargets;
  }


  public V2Restrictions browserKeyRestrictions(V2BrowserKeyRestrictions browserKeyRestrictions) {
    this.browserKeyRestrictions = browserKeyRestrictions;
    return this;
  }

  /**
   * Get browserKeyRestrictions
   * @return browserKeyRestrictions
   */
  @javax.annotation.Nullable
  public V2BrowserKeyRestrictions getBrowserKeyRestrictions() {
    return browserKeyRestrictions;
  }

  public void setBrowserKeyRestrictions(V2BrowserKeyRestrictions browserKeyRestrictions) {
    this.browserKeyRestrictions = browserKeyRestrictions;
  }


  public V2Restrictions iosKeyRestrictions(V2IosKeyRestrictions iosKeyRestrictions) {
    this.iosKeyRestrictions = iosKeyRestrictions;
    return this;
  }

  /**
   * Get iosKeyRestrictions
   * @return iosKeyRestrictions
   */
  @javax.annotation.Nullable
  public V2IosKeyRestrictions getIosKeyRestrictions() {
    return iosKeyRestrictions;
  }

  public void setIosKeyRestrictions(V2IosKeyRestrictions iosKeyRestrictions) {
    this.iosKeyRestrictions = iosKeyRestrictions;
  }


  public V2Restrictions serverKeyRestrictions(V2ServerKeyRestrictions serverKeyRestrictions) {
    this.serverKeyRestrictions = serverKeyRestrictions;
    return this;
  }

  /**
   * Get serverKeyRestrictions
   * @return serverKeyRestrictions
   */
  @javax.annotation.Nullable
  public V2ServerKeyRestrictions getServerKeyRestrictions() {
    return serverKeyRestrictions;
  }

  public void setServerKeyRestrictions(V2ServerKeyRestrictions serverKeyRestrictions) {
    this.serverKeyRestrictions = serverKeyRestrictions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2Restrictions v2Restrictions = (V2Restrictions) o;
    return Objects.equals(this.androidKeyRestrictions, v2Restrictions.androidKeyRestrictions) &&
        Objects.equals(this.apiTargets, v2Restrictions.apiTargets) &&
        Objects.equals(this.browserKeyRestrictions, v2Restrictions.browserKeyRestrictions) &&
        Objects.equals(this.iosKeyRestrictions, v2Restrictions.iosKeyRestrictions) &&
        Objects.equals(this.serverKeyRestrictions, v2Restrictions.serverKeyRestrictions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidKeyRestrictions, apiTargets, browserKeyRestrictions, iosKeyRestrictions, serverKeyRestrictions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2Restrictions {\n");
    sb.append("    androidKeyRestrictions: ").append(toIndentedString(androidKeyRestrictions)).append("\n");
    sb.append("    apiTargets: ").append(toIndentedString(apiTargets)).append("\n");
    sb.append("    browserKeyRestrictions: ").append(toIndentedString(browserKeyRestrictions)).append("\n");
    sb.append("    iosKeyRestrictions: ").append(toIndentedString(iosKeyRestrictions)).append("\n");
    sb.append("    serverKeyRestrictions: ").append(toIndentedString(serverKeyRestrictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidKeyRestrictions");
    openapiFields.add("apiTargets");
    openapiFields.add("browserKeyRestrictions");
    openapiFields.add("iosKeyRestrictions");
    openapiFields.add("serverKeyRestrictions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V2Restrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2Restrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2Restrictions is not found in the empty JSON string", V2Restrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2Restrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2Restrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `androidKeyRestrictions`
      if (jsonObj.get("androidKeyRestrictions") != null && !jsonObj.get("androidKeyRestrictions").isJsonNull()) {
        V2AndroidKeyRestrictions.validateJsonElement(jsonObj.get("androidKeyRestrictions"));
      }
      if (jsonObj.get("apiTargets") != null && !jsonObj.get("apiTargets").isJsonNull()) {
        JsonArray jsonArrayapiTargets = jsonObj.getAsJsonArray("apiTargets");
        if (jsonArrayapiTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apiTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apiTargets` to be an array in the JSON string but got `%s`", jsonObj.get("apiTargets").toString()));
          }

          // validate the optional field `apiTargets` (array)
          for (int i = 0; i < jsonArrayapiTargets.size(); i++) {
            V2ApiTarget.validateJsonElement(jsonArrayapiTargets.get(i));
          };
        }
      }
      // validate the optional field `browserKeyRestrictions`
      if (jsonObj.get("browserKeyRestrictions") != null && !jsonObj.get("browserKeyRestrictions").isJsonNull()) {
        V2BrowserKeyRestrictions.validateJsonElement(jsonObj.get("browserKeyRestrictions"));
      }
      // validate the optional field `iosKeyRestrictions`
      if (jsonObj.get("iosKeyRestrictions") != null && !jsonObj.get("iosKeyRestrictions").isJsonNull()) {
        V2IosKeyRestrictions.validateJsonElement(jsonObj.get("iosKeyRestrictions"));
      }
      // validate the optional field `serverKeyRestrictions`
      if (jsonObj.get("serverKeyRestrictions") != null && !jsonObj.get("serverKeyRestrictions").isJsonNull()) {
        V2ServerKeyRestrictions.validateJsonElement(jsonObj.get("serverKeyRestrictions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2Restrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2Restrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2Restrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2Restrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<V2Restrictions>() {
           @Override
           public void write(JsonWriter out, V2Restrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2Restrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V2Restrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V2Restrictions
   * @throws IOException if the JSON string is invalid with respect to V2Restrictions
   */
  public static V2Restrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2Restrictions.class);
  }

  /**
   * Convert an instance of V2Restrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

