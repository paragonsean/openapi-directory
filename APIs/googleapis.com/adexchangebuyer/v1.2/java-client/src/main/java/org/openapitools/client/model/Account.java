/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountBidderLocationInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration data for an Ad Exchange buyer account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:38.562081-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_BIDDER_LOCATION = "bidderLocation";
  @SerializedName(SERIALIZED_NAME_BIDDER_LOCATION)
  private List<AccountBidderLocationInner> bidderLocation = new ArrayList<>();

  public static final String SERIALIZED_NAME_COOKIE_MATCHING_NID = "cookieMatchingNid";
  @SerializedName(SERIALIZED_NAME_COOKIE_MATCHING_NID)
  private String cookieMatchingNid;

  public static final String SERIALIZED_NAME_COOKIE_MATCHING_URL = "cookieMatchingUrl";
  @SerializedName(SERIALIZED_NAME_COOKIE_MATCHING_URL)
  private String cookieMatchingUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adexchangebuyer#account";

  public static final String SERIALIZED_NAME_MAXIMUM_ACTIVE_CREATIVES = "maximumActiveCreatives";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ACTIVE_CREATIVES)
  private Integer maximumActiveCreatives;

  public static final String SERIALIZED_NAME_MAXIMUM_TOTAL_QPS = "maximumTotalQps";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_TOTAL_QPS)
  private Integer maximumTotalQps;

  public static final String SERIALIZED_NAME_NUMBER_ACTIVE_CREATIVES = "numberActiveCreatives";
  @SerializedName(SERIALIZED_NAME_NUMBER_ACTIVE_CREATIVES)
  private Integer numberActiveCreatives;

  public Account() {
  }

  public Account bidderLocation(List<AccountBidderLocationInner> bidderLocation) {
    this.bidderLocation = bidderLocation;
    return this;
  }

  public Account addBidderLocationItem(AccountBidderLocationInner bidderLocationItem) {
    if (this.bidderLocation == null) {
      this.bidderLocation = new ArrayList<>();
    }
    this.bidderLocation.add(bidderLocationItem);
    return this;
  }

  /**
   * Your bidder locations that have distinct URLs.
   * @return bidderLocation
   */
  @javax.annotation.Nullable
  public List<AccountBidderLocationInner> getBidderLocation() {
    return bidderLocation;
  }

  public void setBidderLocation(List<AccountBidderLocationInner> bidderLocation) {
    this.bidderLocation = bidderLocation;
  }


  public Account cookieMatchingNid(String cookieMatchingNid) {
    this.cookieMatchingNid = cookieMatchingNid;
    return this;
  }

  /**
   * The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
   * @return cookieMatchingNid
   */
  @javax.annotation.Nullable
  public String getCookieMatchingNid() {
    return cookieMatchingNid;
  }

  public void setCookieMatchingNid(String cookieMatchingNid) {
    this.cookieMatchingNid = cookieMatchingNid;
  }


  public Account cookieMatchingUrl(String cookieMatchingUrl) {
    this.cookieMatchingUrl = cookieMatchingUrl;
    return this;
  }

  /**
   * The base URL used in cookie match requests.
   * @return cookieMatchingUrl
   */
  @javax.annotation.Nullable
  public String getCookieMatchingUrl() {
    return cookieMatchingUrl;
  }

  public void setCookieMatchingUrl(String cookieMatchingUrl) {
    this.cookieMatchingUrl = cookieMatchingUrl;
  }


  public Account id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Account id.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Account kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Account maximumActiveCreatives(Integer maximumActiveCreatives) {
    this.maximumActiveCreatives = maximumActiveCreatives;
    return this;
  }

  /**
   * The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
   * @return maximumActiveCreatives
   */
  @javax.annotation.Nullable
  public Integer getMaximumActiveCreatives() {
    return maximumActiveCreatives;
  }

  public void setMaximumActiveCreatives(Integer maximumActiveCreatives) {
    this.maximumActiveCreatives = maximumActiveCreatives;
  }


  public Account maximumTotalQps(Integer maximumTotalQps) {
    this.maximumTotalQps = maximumTotalQps;
    return this;
  }

  /**
   * The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
   * @return maximumTotalQps
   */
  @javax.annotation.Nullable
  public Integer getMaximumTotalQps() {
    return maximumTotalQps;
  }

  public void setMaximumTotalQps(Integer maximumTotalQps) {
    this.maximumTotalQps = maximumTotalQps;
  }


  public Account numberActiveCreatives(Integer numberActiveCreatives) {
    this.numberActiveCreatives = numberActiveCreatives;
    return this;
  }

  /**
   * The number of creatives that this account inserted or bid with in the last 30 days.
   * @return numberActiveCreatives
   */
  @javax.annotation.Nullable
  public Integer getNumberActiveCreatives() {
    return numberActiveCreatives;
  }

  public void setNumberActiveCreatives(Integer numberActiveCreatives) {
    this.numberActiveCreatives = numberActiveCreatives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.bidderLocation, account.bidderLocation) &&
        Objects.equals(this.cookieMatchingNid, account.cookieMatchingNid) &&
        Objects.equals(this.cookieMatchingUrl, account.cookieMatchingUrl) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.kind, account.kind) &&
        Objects.equals(this.maximumActiveCreatives, account.maximumActiveCreatives) &&
        Objects.equals(this.maximumTotalQps, account.maximumTotalQps) &&
        Objects.equals(this.numberActiveCreatives, account.numberActiveCreatives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bidderLocation, cookieMatchingNid, cookieMatchingUrl, id, kind, maximumActiveCreatives, maximumTotalQps, numberActiveCreatives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    bidderLocation: ").append(toIndentedString(bidderLocation)).append("\n");
    sb.append("    cookieMatchingNid: ").append(toIndentedString(cookieMatchingNid)).append("\n");
    sb.append("    cookieMatchingUrl: ").append(toIndentedString(cookieMatchingUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    maximumActiveCreatives: ").append(toIndentedString(maximumActiveCreatives)).append("\n");
    sb.append("    maximumTotalQps: ").append(toIndentedString(maximumTotalQps)).append("\n");
    sb.append("    numberActiveCreatives: ").append(toIndentedString(numberActiveCreatives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bidderLocation");
    openapiFields.add("cookieMatchingNid");
    openapiFields.add("cookieMatchingUrl");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("maximumActiveCreatives");
    openapiFields.add("maximumTotalQps");
    openapiFields.add("numberActiveCreatives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bidderLocation") != null && !jsonObj.get("bidderLocation").isJsonNull()) {
        JsonArray jsonArraybidderLocation = jsonObj.getAsJsonArray("bidderLocation");
        if (jsonArraybidderLocation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bidderLocation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bidderLocation` to be an array in the JSON string but got `%s`", jsonObj.get("bidderLocation").toString()));
          }

          // validate the optional field `bidderLocation` (array)
          for (int i = 0; i < jsonArraybidderLocation.size(); i++) {
            AccountBidderLocationInner.validateJsonElement(jsonArraybidderLocation.get(i));
          };
        }
      }
      if ((jsonObj.get("cookieMatchingNid") != null && !jsonObj.get("cookieMatchingNid").isJsonNull()) && !jsonObj.get("cookieMatchingNid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieMatchingNid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieMatchingNid").toString()));
      }
      if ((jsonObj.get("cookieMatchingUrl") != null && !jsonObj.get("cookieMatchingUrl").isJsonNull()) && !jsonObj.get("cookieMatchingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieMatchingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieMatchingUrl").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

