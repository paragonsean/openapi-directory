/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative_filteringReasons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative_filteringReasons::OAICreative_filteringReasons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative_filteringReasons::OAICreative_filteringReasons() {
    this->initializeModel();
}

OAICreative_filteringReasons::~OAICreative_filteringReasons() {}

void OAICreative_filteringReasons::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_reasons_isSet = false;
    m_reasons_isValid = false;
}

void OAICreative_filteringReasons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative_filteringReasons::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_reasons_isValid = ::OpenAPI::fromJsonValue(m_reasons, json[QString("reasons")]);
    m_reasons_isSet = !json[QString("reasons")].isNull() && m_reasons_isValid;
}

QString OAICreative_filteringReasons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative_filteringReasons::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_reasons.size() > 0) {
        obj.insert(QString("reasons"), ::OpenAPI::toJsonValue(m_reasons));
    }
    return obj;
}

QString OAICreative_filteringReasons::getDate() const {
    return m_date;
}
void OAICreative_filteringReasons::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICreative_filteringReasons::is_date_Set() const{
    return m_date_isSet;
}

bool OAICreative_filteringReasons::is_date_Valid() const{
    return m_date_isValid;
}

QList<OAICreative_filteringReasons_reasons_inner> OAICreative_filteringReasons::getReasons() const {
    return m_reasons;
}
void OAICreative_filteringReasons::setReasons(const QList<OAICreative_filteringReasons_reasons_inner> &reasons) {
    m_reasons = reasons;
    m_reasons_isSet = true;
}

bool OAICreative_filteringReasons::is_reasons_Set() const{
    return m_reasons_isSet;
}

bool OAICreative_filteringReasons::is_reasons_Valid() const{
    return m_reasons_isValid;
}

bool OAICreative_filteringReasons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative_filteringReasons::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
