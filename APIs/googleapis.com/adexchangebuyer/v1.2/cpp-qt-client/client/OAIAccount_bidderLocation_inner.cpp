/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount_bidderLocation_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount_bidderLocation_inner::OAIAccount_bidderLocation_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount_bidderLocation_inner::OAIAccount_bidderLocation_inner() {
    this->initializeModel();
}

OAIAccount_bidderLocation_inner::~OAIAccount_bidderLocation_inner() {}

void OAIAccount_bidderLocation_inner::initializeModel() {

    m_maximum_qps_isSet = false;
    m_maximum_qps_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAccount_bidderLocation_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount_bidderLocation_inner::fromJsonObject(QJsonObject json) {

    m_maximum_qps_isValid = ::OpenAPI::fromJsonValue(m_maximum_qps, json[QString("maximumQps")]);
    m_maximum_qps_isSet = !json[QString("maximumQps")].isNull() && m_maximum_qps_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAccount_bidderLocation_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount_bidderLocation_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_qps_isSet) {
        obj.insert(QString("maximumQps"), ::OpenAPI::toJsonValue(m_maximum_qps));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIAccount_bidderLocation_inner::getMaximumQps() const {
    return m_maximum_qps;
}
void OAIAccount_bidderLocation_inner::setMaximumQps(const qint32 &maximum_qps) {
    m_maximum_qps = maximum_qps;
    m_maximum_qps_isSet = true;
}

bool OAIAccount_bidderLocation_inner::is_maximum_qps_Set() const{
    return m_maximum_qps_isSet;
}

bool OAIAccount_bidderLocation_inner::is_maximum_qps_Valid() const{
    return m_maximum_qps_isValid;
}

QString OAIAccount_bidderLocation_inner::getRegion() const {
    return m_region;
}
void OAIAccount_bidderLocation_inner::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAccount_bidderLocation_inner::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAccount_bidderLocation_inner::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAccount_bidderLocation_inner::getUrl() const {
    return m_url;
}
void OAIAccount_bidderLocation_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAccount_bidderLocation_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAccount_bidderLocation_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAccount_bidderLocation_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount_bidderLocation_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
