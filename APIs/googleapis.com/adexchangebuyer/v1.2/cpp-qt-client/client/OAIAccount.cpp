/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_bidder_location_isSet = false;
    m_bidder_location_isValid = false;

    m_cookie_matching_nid_isSet = false;
    m_cookie_matching_nid_isValid = false;

    m_cookie_matching_url_isSet = false;
    m_cookie_matching_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_maximum_active_creatives_isSet = false;
    m_maximum_active_creatives_isValid = false;

    m_maximum_total_qps_isSet = false;
    m_maximum_total_qps_isValid = false;

    m_number_active_creatives_isSet = false;
    m_number_active_creatives_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_bidder_location_isValid = ::OpenAPI::fromJsonValue(m_bidder_location, json[QString("bidderLocation")]);
    m_bidder_location_isSet = !json[QString("bidderLocation")].isNull() && m_bidder_location_isValid;

    m_cookie_matching_nid_isValid = ::OpenAPI::fromJsonValue(m_cookie_matching_nid, json[QString("cookieMatchingNid")]);
    m_cookie_matching_nid_isSet = !json[QString("cookieMatchingNid")].isNull() && m_cookie_matching_nid_isValid;

    m_cookie_matching_url_isValid = ::OpenAPI::fromJsonValue(m_cookie_matching_url, json[QString("cookieMatchingUrl")]);
    m_cookie_matching_url_isSet = !json[QString("cookieMatchingUrl")].isNull() && m_cookie_matching_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_maximum_active_creatives_isValid = ::OpenAPI::fromJsonValue(m_maximum_active_creatives, json[QString("maximumActiveCreatives")]);
    m_maximum_active_creatives_isSet = !json[QString("maximumActiveCreatives")].isNull() && m_maximum_active_creatives_isValid;

    m_maximum_total_qps_isValid = ::OpenAPI::fromJsonValue(m_maximum_total_qps, json[QString("maximumTotalQps")]);
    m_maximum_total_qps_isSet = !json[QString("maximumTotalQps")].isNull() && m_maximum_total_qps_isValid;

    m_number_active_creatives_isValid = ::OpenAPI::fromJsonValue(m_number_active_creatives, json[QString("numberActiveCreatives")]);
    m_number_active_creatives_isSet = !json[QString("numberActiveCreatives")].isNull() && m_number_active_creatives_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_bidder_location.size() > 0) {
        obj.insert(QString("bidderLocation"), ::OpenAPI::toJsonValue(m_bidder_location));
    }
    if (m_cookie_matching_nid_isSet) {
        obj.insert(QString("cookieMatchingNid"), ::OpenAPI::toJsonValue(m_cookie_matching_nid));
    }
    if (m_cookie_matching_url_isSet) {
        obj.insert(QString("cookieMatchingUrl"), ::OpenAPI::toJsonValue(m_cookie_matching_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_maximum_active_creatives_isSet) {
        obj.insert(QString("maximumActiveCreatives"), ::OpenAPI::toJsonValue(m_maximum_active_creatives));
    }
    if (m_maximum_total_qps_isSet) {
        obj.insert(QString("maximumTotalQps"), ::OpenAPI::toJsonValue(m_maximum_total_qps));
    }
    if (m_number_active_creatives_isSet) {
        obj.insert(QString("numberActiveCreatives"), ::OpenAPI::toJsonValue(m_number_active_creatives));
    }
    return obj;
}

QList<OAIAccount_bidderLocation_inner> OAIAccount::getBidderLocation() const {
    return m_bidder_location;
}
void OAIAccount::setBidderLocation(const QList<OAIAccount_bidderLocation_inner> &bidder_location) {
    m_bidder_location = bidder_location;
    m_bidder_location_isSet = true;
}

bool OAIAccount::is_bidder_location_Set() const{
    return m_bidder_location_isSet;
}

bool OAIAccount::is_bidder_location_Valid() const{
    return m_bidder_location_isValid;
}

QString OAIAccount::getCookieMatchingNid() const {
    return m_cookie_matching_nid;
}
void OAIAccount::setCookieMatchingNid(const QString &cookie_matching_nid) {
    m_cookie_matching_nid = cookie_matching_nid;
    m_cookie_matching_nid_isSet = true;
}

bool OAIAccount::is_cookie_matching_nid_Set() const{
    return m_cookie_matching_nid_isSet;
}

bool OAIAccount::is_cookie_matching_nid_Valid() const{
    return m_cookie_matching_nid_isValid;
}

QString OAIAccount::getCookieMatchingUrl() const {
    return m_cookie_matching_url;
}
void OAIAccount::setCookieMatchingUrl(const QString &cookie_matching_url) {
    m_cookie_matching_url = cookie_matching_url;
    m_cookie_matching_url_isSet = true;
}

bool OAIAccount::is_cookie_matching_url_Set() const{
    return m_cookie_matching_url_isSet;
}

bool OAIAccount::is_cookie_matching_url_Valid() const{
    return m_cookie_matching_url_isValid;
}

qint32 OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccount::getKind() const {
    return m_kind;
}
void OAIAccount::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAccount::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAccount::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIAccount::getMaximumActiveCreatives() const {
    return m_maximum_active_creatives;
}
void OAIAccount::setMaximumActiveCreatives(const qint32 &maximum_active_creatives) {
    m_maximum_active_creatives = maximum_active_creatives;
    m_maximum_active_creatives_isSet = true;
}

bool OAIAccount::is_maximum_active_creatives_Set() const{
    return m_maximum_active_creatives_isSet;
}

bool OAIAccount::is_maximum_active_creatives_Valid() const{
    return m_maximum_active_creatives_isValid;
}

qint32 OAIAccount::getMaximumTotalQps() const {
    return m_maximum_total_qps;
}
void OAIAccount::setMaximumTotalQps(const qint32 &maximum_total_qps) {
    m_maximum_total_qps = maximum_total_qps;
    m_maximum_total_qps_isSet = true;
}

bool OAIAccount::is_maximum_total_qps_Set() const{
    return m_maximum_total_qps_isSet;
}

bool OAIAccount::is_maximum_total_qps_Valid() const{
    return m_maximum_total_qps_isValid;
}

qint32 OAIAccount::getNumberActiveCreatives() const {
    return m_number_active_creatives;
}
void OAIAccount::setNumberActiveCreatives(const qint32 &number_active_creatives) {
    m_number_active_creatives = number_active_creatives;
    m_number_active_creatives_isSet = true;
}

bool OAIAccount::is_number_active_creatives_Set() const{
    return m_number_active_creatives_isSet;
}

bool OAIAccount::is_number_active_creatives_Valid() const{
    return m_number_active_creatives_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bidder_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_matching_nid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_matching_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_active_creatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_total_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_active_creatives_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
