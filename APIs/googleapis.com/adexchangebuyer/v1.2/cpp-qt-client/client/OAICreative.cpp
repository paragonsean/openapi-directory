/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative::OAICreative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative::OAICreative() {
    this->initializeModel();
}

OAICreative::~OAICreative() {}

void OAICreative::initializeModel() {

    m_html_snippet_isSet = false;
    m_html_snippet_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_name_isSet = false;
    m_advertiser_name_isValid = false;

    m_agency_id_isSet = false;
    m_agency_id_isValid = false;

    m_api_upload_timestamp_isSet = false;
    m_api_upload_timestamp_isValid = false;

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_buyer_creative_id_isSet = false;
    m_buyer_creative_id_isValid = false;

    m_click_through_url_isSet = false;
    m_click_through_url_isValid = false;

    m_corrections_isSet = false;
    m_corrections_isValid = false;

    m_disapproval_reasons_isSet = false;
    m_disapproval_reasons_isValid = false;

    m_filtering_reasons_isSet = false;
    m_filtering_reasons_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_impression_tracking_url_isSet = false;
    m_impression_tracking_url_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_product_categories_isSet = false;
    m_product_categories_isValid = false;

    m_restricted_categories_isSet = false;
    m_restricted_categories_isValid = false;

    m_sensitive_categories_isSet = false;
    m_sensitive_categories_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vendor_type_isSet = false;
    m_vendor_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_video_url_isSet = false;
    m_video_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICreative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative::fromJsonObject(QJsonObject json) {

    m_html_snippet_isValid = ::OpenAPI::fromJsonValue(m_html_snippet, json[QString("HTMLSnippet")]);
    m_html_snippet_isSet = !json[QString("HTMLSnippet")].isNull() && m_html_snippet_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_name_isValid = ::OpenAPI::fromJsonValue(m_advertiser_name, json[QString("advertiserName")]);
    m_advertiser_name_isSet = !json[QString("advertiserName")].isNull() && m_advertiser_name_isValid;

    m_agency_id_isValid = ::OpenAPI::fromJsonValue(m_agency_id, json[QString("agencyId")]);
    m_agency_id_isSet = !json[QString("agencyId")].isNull() && m_agency_id_isValid;

    m_api_upload_timestamp_isValid = ::OpenAPI::fromJsonValue(m_api_upload_timestamp, json[QString("apiUploadTimestamp")]);
    m_api_upload_timestamp_isSet = !json[QString("apiUploadTimestamp")].isNull() && m_api_upload_timestamp_isValid;

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("attribute")]);
    m_attribute_isSet = !json[QString("attribute")].isNull() && m_attribute_isValid;

    m_buyer_creative_id_isValid = ::OpenAPI::fromJsonValue(m_buyer_creative_id, json[QString("buyerCreativeId")]);
    m_buyer_creative_id_isSet = !json[QString("buyerCreativeId")].isNull() && m_buyer_creative_id_isValid;

    m_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_click_through_url, json[QString("clickThroughUrl")]);
    m_click_through_url_isSet = !json[QString("clickThroughUrl")].isNull() && m_click_through_url_isValid;

    m_corrections_isValid = ::OpenAPI::fromJsonValue(m_corrections, json[QString("corrections")]);
    m_corrections_isSet = !json[QString("corrections")].isNull() && m_corrections_isValid;

    m_disapproval_reasons_isValid = ::OpenAPI::fromJsonValue(m_disapproval_reasons, json[QString("disapprovalReasons")]);
    m_disapproval_reasons_isSet = !json[QString("disapprovalReasons")].isNull() && m_disapproval_reasons_isValid;

    m_filtering_reasons_isValid = ::OpenAPI::fromJsonValue(m_filtering_reasons, json[QString("filteringReasons")]);
    m_filtering_reasons_isSet = !json[QString("filteringReasons")].isNull() && m_filtering_reasons_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_impression_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_impression_tracking_url, json[QString("impressionTrackingUrl")]);
    m_impression_tracking_url_isSet = !json[QString("impressionTrackingUrl")].isNull() && m_impression_tracking_url_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_product_categories_isValid = ::OpenAPI::fromJsonValue(m_product_categories, json[QString("productCategories")]);
    m_product_categories_isSet = !json[QString("productCategories")].isNull() && m_product_categories_isValid;

    m_restricted_categories_isValid = ::OpenAPI::fromJsonValue(m_restricted_categories, json[QString("restrictedCategories")]);
    m_restricted_categories_isSet = !json[QString("restrictedCategories")].isNull() && m_restricted_categories_isValid;

    m_sensitive_categories_isValid = ::OpenAPI::fromJsonValue(m_sensitive_categories, json[QString("sensitiveCategories")]);
    m_sensitive_categories_isSet = !json[QString("sensitiveCategories")].isNull() && m_sensitive_categories_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vendor_type_isValid = ::OpenAPI::fromJsonValue(m_vendor_type, json[QString("vendorType")]);
    m_vendor_type_isSet = !json[QString("vendorType")].isNull() && m_vendor_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_video_url_isValid = ::OpenAPI::fromJsonValue(m_video_url, json[QString("videoURL")]);
    m_video_url_isSet = !json[QString("videoURL")].isNull() && m_video_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAICreative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative::asJsonObject() const {
    QJsonObject obj;
    if (m_html_snippet_isSet) {
        obj.insert(QString("HTMLSnippet"), ::OpenAPI::toJsonValue(m_html_snippet));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_advertiser_id.size() > 0) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_name_isSet) {
        obj.insert(QString("advertiserName"), ::OpenAPI::toJsonValue(m_advertiser_name));
    }
    if (m_agency_id_isSet) {
        obj.insert(QString("agencyId"), ::OpenAPI::toJsonValue(m_agency_id));
    }
    if (m_api_upload_timestamp_isSet) {
        obj.insert(QString("apiUploadTimestamp"), ::OpenAPI::toJsonValue(m_api_upload_timestamp));
    }
    if (m_attribute.size() > 0) {
        obj.insert(QString("attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_buyer_creative_id_isSet) {
        obj.insert(QString("buyerCreativeId"), ::OpenAPI::toJsonValue(m_buyer_creative_id));
    }
    if (m_click_through_url.size() > 0) {
        obj.insert(QString("clickThroughUrl"), ::OpenAPI::toJsonValue(m_click_through_url));
    }
    if (m_corrections.size() > 0) {
        obj.insert(QString("corrections"), ::OpenAPI::toJsonValue(m_corrections));
    }
    if (m_disapproval_reasons.size() > 0) {
        obj.insert(QString("disapprovalReasons"), ::OpenAPI::toJsonValue(m_disapproval_reasons));
    }
    if (m_filtering_reasons.isSet()) {
        obj.insert(QString("filteringReasons"), ::OpenAPI::toJsonValue(m_filtering_reasons));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_impression_tracking_url.size() > 0) {
        obj.insert(QString("impressionTrackingUrl"), ::OpenAPI::toJsonValue(m_impression_tracking_url));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_product_categories.size() > 0) {
        obj.insert(QString("productCategories"), ::OpenAPI::toJsonValue(m_product_categories));
    }
    if (m_restricted_categories.size() > 0) {
        obj.insert(QString("restrictedCategories"), ::OpenAPI::toJsonValue(m_restricted_categories));
    }
    if (m_sensitive_categories.size() > 0) {
        obj.insert(QString("sensitiveCategories"), ::OpenAPI::toJsonValue(m_sensitive_categories));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vendor_type.size() > 0) {
        obj.insert(QString("vendorType"), ::OpenAPI::toJsonValue(m_vendor_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_video_url_isSet) {
        obj.insert(QString("videoURL"), ::OpenAPI::toJsonValue(m_video_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAICreative::getHtmlSnippet() const {
    return m_html_snippet;
}
void OAICreative::setHtmlSnippet(const QString &html_snippet) {
    m_html_snippet = html_snippet;
    m_html_snippet_isSet = true;
}

bool OAICreative::is_html_snippet_Set() const{
    return m_html_snippet_isSet;
}

bool OAICreative::is_html_snippet_Valid() const{
    return m_html_snippet_isValid;
}

qint32 OAICreative::getAccountId() const {
    return m_account_id;
}
void OAICreative::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreative::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreative::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<QString> OAICreative::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICreative::setAdvertiserId(const QList<QString> &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICreative::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICreative::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAICreative::getAdvertiserName() const {
    return m_advertiser_name;
}
void OAICreative::setAdvertiserName(const QString &advertiser_name) {
    m_advertiser_name = advertiser_name;
    m_advertiser_name_isSet = true;
}

bool OAICreative::is_advertiser_name_Set() const{
    return m_advertiser_name_isSet;
}

bool OAICreative::is_advertiser_name_Valid() const{
    return m_advertiser_name_isValid;
}

QString OAICreative::getAgencyId() const {
    return m_agency_id;
}
void OAICreative::setAgencyId(const QString &agency_id) {
    m_agency_id = agency_id;
    m_agency_id_isSet = true;
}

bool OAICreative::is_agency_id_Set() const{
    return m_agency_id_isSet;
}

bool OAICreative::is_agency_id_Valid() const{
    return m_agency_id_isValid;
}

QDateTime OAICreative::getApiUploadTimestamp() const {
    return m_api_upload_timestamp;
}
void OAICreative::setApiUploadTimestamp(const QDateTime &api_upload_timestamp) {
    m_api_upload_timestamp = api_upload_timestamp;
    m_api_upload_timestamp_isSet = true;
}

bool OAICreative::is_api_upload_timestamp_Set() const{
    return m_api_upload_timestamp_isSet;
}

bool OAICreative::is_api_upload_timestamp_Valid() const{
    return m_api_upload_timestamp_isValid;
}

QList<qint32> OAICreative::getAttribute() const {
    return m_attribute;
}
void OAICreative::setAttribute(const QList<qint32> &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAICreative::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAICreative::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QString OAICreative::getBuyerCreativeId() const {
    return m_buyer_creative_id;
}
void OAICreative::setBuyerCreativeId(const QString &buyer_creative_id) {
    m_buyer_creative_id = buyer_creative_id;
    m_buyer_creative_id_isSet = true;
}

bool OAICreative::is_buyer_creative_id_Set() const{
    return m_buyer_creative_id_isSet;
}

bool OAICreative::is_buyer_creative_id_Valid() const{
    return m_buyer_creative_id_isValid;
}

QList<QString> OAICreative::getClickThroughUrl() const {
    return m_click_through_url;
}
void OAICreative::setClickThroughUrl(const QList<QString> &click_through_url) {
    m_click_through_url = click_through_url;
    m_click_through_url_isSet = true;
}

bool OAICreative::is_click_through_url_Set() const{
    return m_click_through_url_isSet;
}

bool OAICreative::is_click_through_url_Valid() const{
    return m_click_through_url_isValid;
}

QList<OAICreative_corrections_inner> OAICreative::getCorrections() const {
    return m_corrections;
}
void OAICreative::setCorrections(const QList<OAICreative_corrections_inner> &corrections) {
    m_corrections = corrections;
    m_corrections_isSet = true;
}

bool OAICreative::is_corrections_Set() const{
    return m_corrections_isSet;
}

bool OAICreative::is_corrections_Valid() const{
    return m_corrections_isValid;
}

QList<OAICreative_disapprovalReasons_inner> OAICreative::getDisapprovalReasons() const {
    return m_disapproval_reasons;
}
void OAICreative::setDisapprovalReasons(const QList<OAICreative_disapprovalReasons_inner> &disapproval_reasons) {
    m_disapproval_reasons = disapproval_reasons;
    m_disapproval_reasons_isSet = true;
}

bool OAICreative::is_disapproval_reasons_Set() const{
    return m_disapproval_reasons_isSet;
}

bool OAICreative::is_disapproval_reasons_Valid() const{
    return m_disapproval_reasons_isValid;
}

OAICreative_filteringReasons OAICreative::getFilteringReasons() const {
    return m_filtering_reasons;
}
void OAICreative::setFilteringReasons(const OAICreative_filteringReasons &filtering_reasons) {
    m_filtering_reasons = filtering_reasons;
    m_filtering_reasons_isSet = true;
}

bool OAICreative::is_filtering_reasons_Set() const{
    return m_filtering_reasons_isSet;
}

bool OAICreative::is_filtering_reasons_Valid() const{
    return m_filtering_reasons_isValid;
}

qint32 OAICreative::getHeight() const {
    return m_height;
}
void OAICreative::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICreative::is_height_Set() const{
    return m_height_isSet;
}

bool OAICreative::is_height_Valid() const{
    return m_height_isValid;
}

QList<QString> OAICreative::getImpressionTrackingUrl() const {
    return m_impression_tracking_url;
}
void OAICreative::setImpressionTrackingUrl(const QList<QString> &impression_tracking_url) {
    m_impression_tracking_url = impression_tracking_url;
    m_impression_tracking_url_isSet = true;
}

bool OAICreative::is_impression_tracking_url_Set() const{
    return m_impression_tracking_url_isSet;
}

bool OAICreative::is_impression_tracking_url_Valid() const{
    return m_impression_tracking_url_isValid;
}

QString OAICreative::getKind() const {
    return m_kind;
}
void OAICreative::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICreative::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICreative::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<qint32> OAICreative::getProductCategories() const {
    return m_product_categories;
}
void OAICreative::setProductCategories(const QList<qint32> &product_categories) {
    m_product_categories = product_categories;
    m_product_categories_isSet = true;
}

bool OAICreative::is_product_categories_Set() const{
    return m_product_categories_isSet;
}

bool OAICreative::is_product_categories_Valid() const{
    return m_product_categories_isValid;
}

QList<qint32> OAICreative::getRestrictedCategories() const {
    return m_restricted_categories;
}
void OAICreative::setRestrictedCategories(const QList<qint32> &restricted_categories) {
    m_restricted_categories = restricted_categories;
    m_restricted_categories_isSet = true;
}

bool OAICreative::is_restricted_categories_Set() const{
    return m_restricted_categories_isSet;
}

bool OAICreative::is_restricted_categories_Valid() const{
    return m_restricted_categories_isValid;
}

QList<qint32> OAICreative::getSensitiveCategories() const {
    return m_sensitive_categories;
}
void OAICreative::setSensitiveCategories(const QList<qint32> &sensitive_categories) {
    m_sensitive_categories = sensitive_categories;
    m_sensitive_categories_isSet = true;
}

bool OAICreative::is_sensitive_categories_Set() const{
    return m_sensitive_categories_isSet;
}

bool OAICreative::is_sensitive_categories_Valid() const{
    return m_sensitive_categories_isValid;
}

QString OAICreative::getStatus() const {
    return m_status;
}
void OAICreative::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreative::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreative::is_status_Valid() const{
    return m_status_isValid;
}

QList<qint32> OAICreative::getVendorType() const {
    return m_vendor_type;
}
void OAICreative::setVendorType(const QList<qint32> &vendor_type) {
    m_vendor_type = vendor_type;
    m_vendor_type_isSet = true;
}

bool OAICreative::is_vendor_type_Set() const{
    return m_vendor_type_isSet;
}

bool OAICreative::is_vendor_type_Valid() const{
    return m_vendor_type_isValid;
}

qint32 OAICreative::getVersion() const {
    return m_version;
}
void OAICreative::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreative::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreative::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICreative::getVideoUrl() const {
    return m_video_url;
}
void OAICreative::setVideoUrl(const QString &video_url) {
    m_video_url = video_url;
    m_video_url_isSet = true;
}

bool OAICreative::is_video_url_Set() const{
    return m_video_url_isSet;
}

bool OAICreative::is_video_url_Valid() const{
    return m_video_url_isValid;
}

qint32 OAICreative::getWidth() const {
    return m_width;
}
void OAICreative::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICreative::is_width_Set() const{
    return m_width_isSet;
}

bool OAICreative::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICreative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_upload_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disapproval_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtering_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_tracking_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
