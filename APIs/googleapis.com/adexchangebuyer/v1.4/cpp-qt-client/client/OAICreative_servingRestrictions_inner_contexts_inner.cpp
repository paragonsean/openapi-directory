/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative_servingRestrictions_inner_contexts_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative_servingRestrictions_inner_contexts_inner::OAICreative_servingRestrictions_inner_contexts_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative_servingRestrictions_inner_contexts_inner::OAICreative_servingRestrictions_inner_contexts_inner() {
    this->initializeModel();
}

OAICreative_servingRestrictions_inner_contexts_inner::~OAICreative_servingRestrictions_inner_contexts_inner() {}

void OAICreative_servingRestrictions_inner_contexts_inner::initializeModel() {

    m_auction_type_isSet = false;
    m_auction_type_isValid = false;

    m_context_type_isSet = false;
    m_context_type_isValid = false;

    m_geo_criteria_id_isSet = false;
    m_geo_criteria_id_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;
}

void OAICreative_servingRestrictions_inner_contexts_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative_servingRestrictions_inner_contexts_inner::fromJsonObject(QJsonObject json) {

    m_auction_type_isValid = ::OpenAPI::fromJsonValue(m_auction_type, json[QString("auctionType")]);
    m_auction_type_isSet = !json[QString("auctionType")].isNull() && m_auction_type_isValid;

    m_context_type_isValid = ::OpenAPI::fromJsonValue(m_context_type, json[QString("contextType")]);
    m_context_type_isSet = !json[QString("contextType")].isNull() && m_context_type_isValid;

    m_geo_criteria_id_isValid = ::OpenAPI::fromJsonValue(m_geo_criteria_id, json[QString("geoCriteriaId")]);
    m_geo_criteria_id_isSet = !json[QString("geoCriteriaId")].isNull() && m_geo_criteria_id_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;
}

QString OAICreative_servingRestrictions_inner_contexts_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative_servingRestrictions_inner_contexts_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_auction_type.size() > 0) {
        obj.insert(QString("auctionType"), ::OpenAPI::toJsonValue(m_auction_type));
    }
    if (m_context_type_isSet) {
        obj.insert(QString("contextType"), ::OpenAPI::toJsonValue(m_context_type));
    }
    if (m_geo_criteria_id.size() > 0) {
        obj.insert(QString("geoCriteriaId"), ::OpenAPI::toJsonValue(m_geo_criteria_id));
    }
    if (m_platform.size() > 0) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    return obj;
}

QList<QString> OAICreative_servingRestrictions_inner_contexts_inner::getAuctionType() const {
    return m_auction_type;
}
void OAICreative_servingRestrictions_inner_contexts_inner::setAuctionType(const QList<QString> &auction_type) {
    m_auction_type = auction_type;
    m_auction_type_isSet = true;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_auction_type_Set() const{
    return m_auction_type_isSet;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_auction_type_Valid() const{
    return m_auction_type_isValid;
}

QString OAICreative_servingRestrictions_inner_contexts_inner::getContextType() const {
    return m_context_type;
}
void OAICreative_servingRestrictions_inner_contexts_inner::setContextType(const QString &context_type) {
    m_context_type = context_type;
    m_context_type_isSet = true;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_context_type_Set() const{
    return m_context_type_isSet;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_context_type_Valid() const{
    return m_context_type_isValid;
}

QList<qint32> OAICreative_servingRestrictions_inner_contexts_inner::getGeoCriteriaId() const {
    return m_geo_criteria_id;
}
void OAICreative_servingRestrictions_inner_contexts_inner::setGeoCriteriaId(const QList<qint32> &geo_criteria_id) {
    m_geo_criteria_id = geo_criteria_id;
    m_geo_criteria_id_isSet = true;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_geo_criteria_id_Set() const{
    return m_geo_criteria_id_isSet;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_geo_criteria_id_Valid() const{
    return m_geo_criteria_id_isValid;
}

QList<QString> OAICreative_servingRestrictions_inner_contexts_inner::getPlatform() const {
    return m_platform;
}
void OAICreative_servingRestrictions_inner_contexts_inner::setPlatform(const QList<QString> &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auction_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_criteria_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative_servingRestrictions_inner_contexts_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
