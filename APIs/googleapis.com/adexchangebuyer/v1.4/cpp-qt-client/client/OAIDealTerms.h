/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDealTerms.h
 *
 * 
 */

#ifndef OAIDealTerms_H
#define OAIDealTerms_H

#include <QJsonObject>

#include "OAIDealTermsGuaranteedFixedPriceTerms.h"
#include "OAIDealTermsNonGuaranteedAuctionTerms.h"
#include "OAIDealTermsNonGuaranteedFixedPriceTerms.h"
#include "OAIDealTermsRubiconNonGuaranteedTerms.h"
#include "OAIPrice.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrice;
class OAIDealTermsGuaranteedFixedPriceTerms;
class OAIDealTermsNonGuaranteedAuctionTerms;
class OAIDealTermsNonGuaranteedFixedPriceTerms;
class OAIDealTermsRubiconNonGuaranteedTerms;

class OAIDealTerms : public OAIObject {
public:
    OAIDealTerms();
    OAIDealTerms(QString json);
    ~OAIDealTerms() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBrandingType() const;
    void setBrandingType(const QString &branding_type);
    bool is_branding_type_Set() const;
    bool is_branding_type_Valid() const;

    QString getCrossListedExternalDealIdType() const;
    void setCrossListedExternalDealIdType(const QString &cross_listed_external_deal_id_type);
    bool is_cross_listed_external_deal_id_type_Set() const;
    bool is_cross_listed_external_deal_id_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIPrice getEstimatedGrossSpend() const;
    void setEstimatedGrossSpend(const OAIPrice &estimated_gross_spend);
    bool is_estimated_gross_spend_Set() const;
    bool is_estimated_gross_spend_Valid() const;

    QString getEstimatedImpressionsPerDay() const;
    void setEstimatedImpressionsPerDay(const QString &estimated_impressions_per_day);
    bool is_estimated_impressions_per_day_Set() const;
    bool is_estimated_impressions_per_day_Valid() const;

    OAIDealTermsGuaranteedFixedPriceTerms getGuaranteedFixedPriceTerms() const;
    void setGuaranteedFixedPriceTerms(const OAIDealTermsGuaranteedFixedPriceTerms &guaranteed_fixed_price_terms);
    bool is_guaranteed_fixed_price_terms_Set() const;
    bool is_guaranteed_fixed_price_terms_Valid() const;

    OAIDealTermsNonGuaranteedAuctionTerms getNonGuaranteedAuctionTerms() const;
    void setNonGuaranteedAuctionTerms(const OAIDealTermsNonGuaranteedAuctionTerms &non_guaranteed_auction_terms);
    bool is_non_guaranteed_auction_terms_Set() const;
    bool is_non_guaranteed_auction_terms_Valid() const;

    OAIDealTermsNonGuaranteedFixedPriceTerms getNonGuaranteedFixedPriceTerms() const;
    void setNonGuaranteedFixedPriceTerms(const OAIDealTermsNonGuaranteedFixedPriceTerms &non_guaranteed_fixed_price_terms);
    bool is_non_guaranteed_fixed_price_terms_Set() const;
    bool is_non_guaranteed_fixed_price_terms_Valid() const;

    OAIDealTermsRubiconNonGuaranteedTerms getRubiconNonGuaranteedTerms() const;
    void setRubiconNonGuaranteedTerms(const OAIDealTermsRubiconNonGuaranteedTerms &rubicon_non_guaranteed_terms);
    bool is_rubicon_non_guaranteed_terms_Set() const;
    bool is_rubicon_non_guaranteed_terms_Valid() const;

    QString getSellerTimeZone() const;
    void setSellerTimeZone(const QString &seller_time_zone);
    bool is_seller_time_zone_Set() const;
    bool is_seller_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_branding_type;
    bool m_branding_type_isSet;
    bool m_branding_type_isValid;

    QString m_cross_listed_external_deal_id_type;
    bool m_cross_listed_external_deal_id_type_isSet;
    bool m_cross_listed_external_deal_id_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIPrice m_estimated_gross_spend;
    bool m_estimated_gross_spend_isSet;
    bool m_estimated_gross_spend_isValid;

    QString m_estimated_impressions_per_day;
    bool m_estimated_impressions_per_day_isSet;
    bool m_estimated_impressions_per_day_isValid;

    OAIDealTermsGuaranteedFixedPriceTerms m_guaranteed_fixed_price_terms;
    bool m_guaranteed_fixed_price_terms_isSet;
    bool m_guaranteed_fixed_price_terms_isValid;

    OAIDealTermsNonGuaranteedAuctionTerms m_non_guaranteed_auction_terms;
    bool m_non_guaranteed_auction_terms_isSet;
    bool m_non_guaranteed_auction_terms_isValid;

    OAIDealTermsNonGuaranteedFixedPriceTerms m_non_guaranteed_fixed_price_terms;
    bool m_non_guaranteed_fixed_price_terms_isSet;
    bool m_non_guaranteed_fixed_price_terms_isValid;

    OAIDealTermsRubiconNonGuaranteedTerms m_rubicon_non_guaranteed_terms;
    bool m_rubicon_non_guaranteed_terms_isSet;
    bool m_rubicon_non_guaranteed_terms_isValid;

    QString m_seller_time_zone;
    bool m_seller_time_zone_isSet;
    bool m_seller_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDealTerms)

#endif // OAIDealTerms_H
