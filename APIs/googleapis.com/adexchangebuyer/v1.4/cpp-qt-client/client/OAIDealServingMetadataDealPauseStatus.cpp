/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealServingMetadataDealPauseStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealServingMetadataDealPauseStatus::OAIDealServingMetadataDealPauseStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealServingMetadataDealPauseStatus::OAIDealServingMetadataDealPauseStatus() {
    this->initializeModel();
}

OAIDealServingMetadataDealPauseStatus::~OAIDealServingMetadataDealPauseStatus() {}

void OAIDealServingMetadataDealPauseStatus::initializeModel() {

    m_buyer_pause_reason_isSet = false;
    m_buyer_pause_reason_isValid = false;

    m_first_paused_by_isSet = false;
    m_first_paused_by_isValid = false;

    m_has_buyer_paused_isSet = false;
    m_has_buyer_paused_isValid = false;

    m_has_seller_paused_isSet = false;
    m_has_seller_paused_isValid = false;

    m_seller_pause_reason_isSet = false;
    m_seller_pause_reason_isValid = false;
}

void OAIDealServingMetadataDealPauseStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealServingMetadataDealPauseStatus::fromJsonObject(QJsonObject json) {

    m_buyer_pause_reason_isValid = ::OpenAPI::fromJsonValue(m_buyer_pause_reason, json[QString("buyerPauseReason")]);
    m_buyer_pause_reason_isSet = !json[QString("buyerPauseReason")].isNull() && m_buyer_pause_reason_isValid;

    m_first_paused_by_isValid = ::OpenAPI::fromJsonValue(m_first_paused_by, json[QString("firstPausedBy")]);
    m_first_paused_by_isSet = !json[QString("firstPausedBy")].isNull() && m_first_paused_by_isValid;

    m_has_buyer_paused_isValid = ::OpenAPI::fromJsonValue(m_has_buyer_paused, json[QString("hasBuyerPaused")]);
    m_has_buyer_paused_isSet = !json[QString("hasBuyerPaused")].isNull() && m_has_buyer_paused_isValid;

    m_has_seller_paused_isValid = ::OpenAPI::fromJsonValue(m_has_seller_paused, json[QString("hasSellerPaused")]);
    m_has_seller_paused_isSet = !json[QString("hasSellerPaused")].isNull() && m_has_seller_paused_isValid;

    m_seller_pause_reason_isValid = ::OpenAPI::fromJsonValue(m_seller_pause_reason, json[QString("sellerPauseReason")]);
    m_seller_pause_reason_isSet = !json[QString("sellerPauseReason")].isNull() && m_seller_pause_reason_isValid;
}

QString OAIDealServingMetadataDealPauseStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealServingMetadataDealPauseStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer_pause_reason_isSet) {
        obj.insert(QString("buyerPauseReason"), ::OpenAPI::toJsonValue(m_buyer_pause_reason));
    }
    if (m_first_paused_by_isSet) {
        obj.insert(QString("firstPausedBy"), ::OpenAPI::toJsonValue(m_first_paused_by));
    }
    if (m_has_buyer_paused_isSet) {
        obj.insert(QString("hasBuyerPaused"), ::OpenAPI::toJsonValue(m_has_buyer_paused));
    }
    if (m_has_seller_paused_isSet) {
        obj.insert(QString("hasSellerPaused"), ::OpenAPI::toJsonValue(m_has_seller_paused));
    }
    if (m_seller_pause_reason_isSet) {
        obj.insert(QString("sellerPauseReason"), ::OpenAPI::toJsonValue(m_seller_pause_reason));
    }
    return obj;
}

QString OAIDealServingMetadataDealPauseStatus::getBuyerPauseReason() const {
    return m_buyer_pause_reason;
}
void OAIDealServingMetadataDealPauseStatus::setBuyerPauseReason(const QString &buyer_pause_reason) {
    m_buyer_pause_reason = buyer_pause_reason;
    m_buyer_pause_reason_isSet = true;
}

bool OAIDealServingMetadataDealPauseStatus::is_buyer_pause_reason_Set() const{
    return m_buyer_pause_reason_isSet;
}

bool OAIDealServingMetadataDealPauseStatus::is_buyer_pause_reason_Valid() const{
    return m_buyer_pause_reason_isValid;
}

QString OAIDealServingMetadataDealPauseStatus::getFirstPausedBy() const {
    return m_first_paused_by;
}
void OAIDealServingMetadataDealPauseStatus::setFirstPausedBy(const QString &first_paused_by) {
    m_first_paused_by = first_paused_by;
    m_first_paused_by_isSet = true;
}

bool OAIDealServingMetadataDealPauseStatus::is_first_paused_by_Set() const{
    return m_first_paused_by_isSet;
}

bool OAIDealServingMetadataDealPauseStatus::is_first_paused_by_Valid() const{
    return m_first_paused_by_isValid;
}

bool OAIDealServingMetadataDealPauseStatus::isHasBuyerPaused() const {
    return m_has_buyer_paused;
}
void OAIDealServingMetadataDealPauseStatus::setHasBuyerPaused(const bool &has_buyer_paused) {
    m_has_buyer_paused = has_buyer_paused;
    m_has_buyer_paused_isSet = true;
}

bool OAIDealServingMetadataDealPauseStatus::is_has_buyer_paused_Set() const{
    return m_has_buyer_paused_isSet;
}

bool OAIDealServingMetadataDealPauseStatus::is_has_buyer_paused_Valid() const{
    return m_has_buyer_paused_isValid;
}

bool OAIDealServingMetadataDealPauseStatus::isHasSellerPaused() const {
    return m_has_seller_paused;
}
void OAIDealServingMetadataDealPauseStatus::setHasSellerPaused(const bool &has_seller_paused) {
    m_has_seller_paused = has_seller_paused;
    m_has_seller_paused_isSet = true;
}

bool OAIDealServingMetadataDealPauseStatus::is_has_seller_paused_Set() const{
    return m_has_seller_paused_isSet;
}

bool OAIDealServingMetadataDealPauseStatus::is_has_seller_paused_Valid() const{
    return m_has_seller_paused_isValid;
}

QString OAIDealServingMetadataDealPauseStatus::getSellerPauseReason() const {
    return m_seller_pause_reason;
}
void OAIDealServingMetadataDealPauseStatus::setSellerPauseReason(const QString &seller_pause_reason) {
    m_seller_pause_reason = seller_pause_reason;
    m_seller_pause_reason_isSet = true;
}

bool OAIDealServingMetadataDealPauseStatus::is_seller_pause_reason_Set() const{
    return m_seller_pause_reason_isSet;
}

bool OAIDealServingMetadataDealPauseStatus::is_seller_pause_reason_Valid() const{
    return m_seller_pause_reason_isValid;
}

bool OAIDealServingMetadataDealPauseStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer_pause_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_paused_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_buyer_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_seller_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_pause_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealServingMetadataDealPauseStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
