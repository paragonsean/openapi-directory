/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryControl::OAIDeliveryControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryControl::OAIDeliveryControl() {
    this->initializeModel();
}

OAIDeliveryControl::~OAIDeliveryControl() {}

void OAIDeliveryControl::initializeModel() {

    m_creative_blocking_level_isSet = false;
    m_creative_blocking_level_isValid = false;

    m_delivery_rate_type_isSet = false;
    m_delivery_rate_type_isValid = false;

    m_frequency_caps_isSet = false;
    m_frequency_caps_isValid = false;
}

void OAIDeliveryControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryControl::fromJsonObject(QJsonObject json) {

    m_creative_blocking_level_isValid = ::OpenAPI::fromJsonValue(m_creative_blocking_level, json[QString("creativeBlockingLevel")]);
    m_creative_blocking_level_isSet = !json[QString("creativeBlockingLevel")].isNull() && m_creative_blocking_level_isValid;

    m_delivery_rate_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_rate_type, json[QString("deliveryRateType")]);
    m_delivery_rate_type_isSet = !json[QString("deliveryRateType")].isNull() && m_delivery_rate_type_isValid;

    m_frequency_caps_isValid = ::OpenAPI::fromJsonValue(m_frequency_caps, json[QString("frequencyCaps")]);
    m_frequency_caps_isSet = !json[QString("frequencyCaps")].isNull() && m_frequency_caps_isValid;
}

QString OAIDeliveryControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryControl::asJsonObject() const {
    QJsonObject obj;
    if (m_creative_blocking_level_isSet) {
        obj.insert(QString("creativeBlockingLevel"), ::OpenAPI::toJsonValue(m_creative_blocking_level));
    }
    if (m_delivery_rate_type_isSet) {
        obj.insert(QString("deliveryRateType"), ::OpenAPI::toJsonValue(m_delivery_rate_type));
    }
    if (m_frequency_caps.size() > 0) {
        obj.insert(QString("frequencyCaps"), ::OpenAPI::toJsonValue(m_frequency_caps));
    }
    return obj;
}

QString OAIDeliveryControl::getCreativeBlockingLevel() const {
    return m_creative_blocking_level;
}
void OAIDeliveryControl::setCreativeBlockingLevel(const QString &creative_blocking_level) {
    m_creative_blocking_level = creative_blocking_level;
    m_creative_blocking_level_isSet = true;
}

bool OAIDeliveryControl::is_creative_blocking_level_Set() const{
    return m_creative_blocking_level_isSet;
}

bool OAIDeliveryControl::is_creative_blocking_level_Valid() const{
    return m_creative_blocking_level_isValid;
}

QString OAIDeliveryControl::getDeliveryRateType() const {
    return m_delivery_rate_type;
}
void OAIDeliveryControl::setDeliveryRateType(const QString &delivery_rate_type) {
    m_delivery_rate_type = delivery_rate_type;
    m_delivery_rate_type_isSet = true;
}

bool OAIDeliveryControl::is_delivery_rate_type_Set() const{
    return m_delivery_rate_type_isSet;
}

bool OAIDeliveryControl::is_delivery_rate_type_Valid() const{
    return m_delivery_rate_type_isValid;
}

QList<OAIDeliveryControlFrequencyCap> OAIDeliveryControl::getFrequencyCaps() const {
    return m_frequency_caps;
}
void OAIDeliveryControl::setFrequencyCaps(const QList<OAIDeliveryControlFrequencyCap> &frequency_caps) {
    m_frequency_caps = frequency_caps;
    m_frequency_caps_isSet = true;
}

bool OAIDeliveryControl::is_frequency_caps_Set() const{
    return m_frequency_caps_isSet;
}

bool OAIDeliveryControl::is_frequency_caps_Valid() const{
    return m_frequency_caps_isValid;
}

bool OAIDeliveryControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creative_blocking_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_caps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
