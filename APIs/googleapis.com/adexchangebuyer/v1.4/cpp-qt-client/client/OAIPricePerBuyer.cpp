/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricePerBuyer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricePerBuyer::OAIPricePerBuyer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricePerBuyer::OAIPricePerBuyer() {
    this->initializeModel();
}

OAIPricePerBuyer::~OAIPricePerBuyer() {}

void OAIPricePerBuyer::initializeModel() {

    m_auction_tier_isSet = false;
    m_auction_tier_isValid = false;

    m_billed_buyer_isSet = false;
    m_billed_buyer_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIPricePerBuyer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricePerBuyer::fromJsonObject(QJsonObject json) {

    m_auction_tier_isValid = ::OpenAPI::fromJsonValue(m_auction_tier, json[QString("auctionTier")]);
    m_auction_tier_isSet = !json[QString("auctionTier")].isNull() && m_auction_tier_isValid;

    m_billed_buyer_isValid = ::OpenAPI::fromJsonValue(m_billed_buyer, json[QString("billedBuyer")]);
    m_billed_buyer_isSet = !json[QString("billedBuyer")].isNull() && m_billed_buyer_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIPricePerBuyer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricePerBuyer::asJsonObject() const {
    QJsonObject obj;
    if (m_auction_tier_isSet) {
        obj.insert(QString("auctionTier"), ::OpenAPI::toJsonValue(m_auction_tier));
    }
    if (m_billed_buyer.isSet()) {
        obj.insert(QString("billedBuyer"), ::OpenAPI::toJsonValue(m_billed_buyer));
    }
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QString OAIPricePerBuyer::getAuctionTier() const {
    return m_auction_tier;
}
void OAIPricePerBuyer::setAuctionTier(const QString &auction_tier) {
    m_auction_tier = auction_tier;
    m_auction_tier_isSet = true;
}

bool OAIPricePerBuyer::is_auction_tier_Set() const{
    return m_auction_tier_isSet;
}

bool OAIPricePerBuyer::is_auction_tier_Valid() const{
    return m_auction_tier_isValid;
}

OAIBuyer OAIPricePerBuyer::getBilledBuyer() const {
    return m_billed_buyer;
}
void OAIPricePerBuyer::setBilledBuyer(const OAIBuyer &billed_buyer) {
    m_billed_buyer = billed_buyer;
    m_billed_buyer_isSet = true;
}

bool OAIPricePerBuyer::is_billed_buyer_Set() const{
    return m_billed_buyer_isSet;
}

bool OAIPricePerBuyer::is_billed_buyer_Valid() const{
    return m_billed_buyer_isValid;
}

OAIBuyer OAIPricePerBuyer::getBuyer() const {
    return m_buyer;
}
void OAIPricePerBuyer::setBuyer(const OAIBuyer &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIPricePerBuyer::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIPricePerBuyer::is_buyer_Valid() const{
    return m_buyer_isValid;
}

OAIPrice OAIPricePerBuyer::getPrice() const {
    return m_price;
}
void OAIPricePerBuyer::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPricePerBuyer::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPricePerBuyer::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIPricePerBuyer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auction_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricePerBuyer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
