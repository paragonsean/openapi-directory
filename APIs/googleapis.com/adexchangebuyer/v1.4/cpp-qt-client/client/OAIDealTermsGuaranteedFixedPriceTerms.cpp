/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealTermsGuaranteedFixedPriceTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealTermsGuaranteedFixedPriceTerms::OAIDealTermsGuaranteedFixedPriceTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealTermsGuaranteedFixedPriceTerms::OAIDealTermsGuaranteedFixedPriceTerms() {
    this->initializeModel();
}

OAIDealTermsGuaranteedFixedPriceTerms::~OAIDealTermsGuaranteedFixedPriceTerms() {}

void OAIDealTermsGuaranteedFixedPriceTerms::initializeModel() {

    m_billing_info_isSet = false;
    m_billing_info_isValid = false;

    m_fixed_prices_isSet = false;
    m_fixed_prices_isValid = false;

    m_guaranteed_impressions_isSet = false;
    m_guaranteed_impressions_isValid = false;

    m_guaranteed_looks_isSet = false;
    m_guaranteed_looks_isValid = false;

    m_minimum_daily_looks_isSet = false;
    m_minimum_daily_looks_isValid = false;
}

void OAIDealTermsGuaranteedFixedPriceTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealTermsGuaranteedFixedPriceTerms::fromJsonObject(QJsonObject json) {

    m_billing_info_isValid = ::OpenAPI::fromJsonValue(m_billing_info, json[QString("billingInfo")]);
    m_billing_info_isSet = !json[QString("billingInfo")].isNull() && m_billing_info_isValid;

    m_fixed_prices_isValid = ::OpenAPI::fromJsonValue(m_fixed_prices, json[QString("fixedPrices")]);
    m_fixed_prices_isSet = !json[QString("fixedPrices")].isNull() && m_fixed_prices_isValid;

    m_guaranteed_impressions_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_impressions, json[QString("guaranteedImpressions")]);
    m_guaranteed_impressions_isSet = !json[QString("guaranteedImpressions")].isNull() && m_guaranteed_impressions_isValid;

    m_guaranteed_looks_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_looks, json[QString("guaranteedLooks")]);
    m_guaranteed_looks_isSet = !json[QString("guaranteedLooks")].isNull() && m_guaranteed_looks_isValid;

    m_minimum_daily_looks_isValid = ::OpenAPI::fromJsonValue(m_minimum_daily_looks, json[QString("minimumDailyLooks")]);
    m_minimum_daily_looks_isSet = !json[QString("minimumDailyLooks")].isNull() && m_minimum_daily_looks_isValid;
}

QString OAIDealTermsGuaranteedFixedPriceTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealTermsGuaranteedFixedPriceTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_info.isSet()) {
        obj.insert(QString("billingInfo"), ::OpenAPI::toJsonValue(m_billing_info));
    }
    if (m_fixed_prices.size() > 0) {
        obj.insert(QString("fixedPrices"), ::OpenAPI::toJsonValue(m_fixed_prices));
    }
    if (m_guaranteed_impressions_isSet) {
        obj.insert(QString("guaranteedImpressions"), ::OpenAPI::toJsonValue(m_guaranteed_impressions));
    }
    if (m_guaranteed_looks_isSet) {
        obj.insert(QString("guaranteedLooks"), ::OpenAPI::toJsonValue(m_guaranteed_looks));
    }
    if (m_minimum_daily_looks_isSet) {
        obj.insert(QString("minimumDailyLooks"), ::OpenAPI::toJsonValue(m_minimum_daily_looks));
    }
    return obj;
}

OAIDealTermsGuaranteedFixedPriceTermsBillingInfo OAIDealTermsGuaranteedFixedPriceTerms::getBillingInfo() const {
    return m_billing_info;
}
void OAIDealTermsGuaranteedFixedPriceTerms::setBillingInfo(const OAIDealTermsGuaranteedFixedPriceTermsBillingInfo &billing_info) {
    m_billing_info = billing_info;
    m_billing_info_isSet = true;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_billing_info_Set() const{
    return m_billing_info_isSet;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_billing_info_Valid() const{
    return m_billing_info_isValid;
}

QList<OAIPricePerBuyer> OAIDealTermsGuaranteedFixedPriceTerms::getFixedPrices() const {
    return m_fixed_prices;
}
void OAIDealTermsGuaranteedFixedPriceTerms::setFixedPrices(const QList<OAIPricePerBuyer> &fixed_prices) {
    m_fixed_prices = fixed_prices;
    m_fixed_prices_isSet = true;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_fixed_prices_Set() const{
    return m_fixed_prices_isSet;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_fixed_prices_Valid() const{
    return m_fixed_prices_isValid;
}

QString OAIDealTermsGuaranteedFixedPriceTerms::getGuaranteedImpressions() const {
    return m_guaranteed_impressions;
}
void OAIDealTermsGuaranteedFixedPriceTerms::setGuaranteedImpressions(const QString &guaranteed_impressions) {
    m_guaranteed_impressions = guaranteed_impressions;
    m_guaranteed_impressions_isSet = true;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_guaranteed_impressions_Set() const{
    return m_guaranteed_impressions_isSet;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_guaranteed_impressions_Valid() const{
    return m_guaranteed_impressions_isValid;
}

QString OAIDealTermsGuaranteedFixedPriceTerms::getGuaranteedLooks() const {
    return m_guaranteed_looks;
}
void OAIDealTermsGuaranteedFixedPriceTerms::setGuaranteedLooks(const QString &guaranteed_looks) {
    m_guaranteed_looks = guaranteed_looks;
    m_guaranteed_looks_isSet = true;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_guaranteed_looks_Set() const{
    return m_guaranteed_looks_isSet;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_guaranteed_looks_Valid() const{
    return m_guaranteed_looks_isValid;
}

QString OAIDealTermsGuaranteedFixedPriceTerms::getMinimumDailyLooks() const {
    return m_minimum_daily_looks;
}
void OAIDealTermsGuaranteedFixedPriceTerms::setMinimumDailyLooks(const QString &minimum_daily_looks) {
    m_minimum_daily_looks = minimum_daily_looks;
    m_minimum_daily_looks_isSet = true;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_minimum_daily_looks_Set() const{
    return m_minimum_daily_looks_isSet;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::is_minimum_daily_looks_Valid() const{
    return m_minimum_daily_looks_isValid;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_looks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_daily_looks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealTermsGuaranteedFixedPriceTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
