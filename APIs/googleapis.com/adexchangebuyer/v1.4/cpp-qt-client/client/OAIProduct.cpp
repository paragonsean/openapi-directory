/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_billed_buyer_isSet = false;
    m_billed_buyer_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_creation_time_ms_isSet = false;
    m_creation_time_ms_isValid = false;

    m_creator_contacts_isSet = false;
    m_creator_contacts_isValid = false;

    m_creator_role_isSet = false;
    m_creator_role_isValid = false;

    m_delivery_control_isSet = false;
    m_delivery_control_isValid = false;

    m_flight_end_time_ms_isSet = false;
    m_flight_end_time_ms_isValid = false;

    m_flight_start_time_ms_isSet = false;
    m_flight_start_time_ms_isValid = false;

    m_has_creator_signed_off_isSet = false;
    m_has_creator_signed_off_isValid = false;

    m_inventory_source_isSet = false;
    m_inventory_source_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_update_time_ms_isSet = false;
    m_last_update_time_ms_isValid = false;

    m_legacy_offer_id_isSet = false;
    m_legacy_offer_id_isValid = false;

    m_marketplace_publisher_profile_id_isSet = false;
    m_marketplace_publisher_profile_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_private_auction_id_isSet = false;
    m_private_auction_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_publisher_profile_id_isSet = false;
    m_publisher_profile_id_isValid = false;

    m_publisher_provided_forecast_isSet = false;
    m_publisher_provided_forecast_isValid = false;

    m_revision_number_isSet = false;
    m_revision_number_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_shared_targetings_isSet = false;
    m_shared_targetings_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_syndication_product_isSet = false;
    m_syndication_product_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_web_property_code_isSet = false;
    m_web_property_code_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_billed_buyer_isValid = ::OpenAPI::fromJsonValue(m_billed_buyer, json[QString("billedBuyer")]);
    m_billed_buyer_isSet = !json[QString("billedBuyer")].isNull() && m_billed_buyer_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_creation_time_ms_isValid = ::OpenAPI::fromJsonValue(m_creation_time_ms, json[QString("creationTimeMs")]);
    m_creation_time_ms_isSet = !json[QString("creationTimeMs")].isNull() && m_creation_time_ms_isValid;

    m_creator_contacts_isValid = ::OpenAPI::fromJsonValue(m_creator_contacts, json[QString("creatorContacts")]);
    m_creator_contacts_isSet = !json[QString("creatorContacts")].isNull() && m_creator_contacts_isValid;

    m_creator_role_isValid = ::OpenAPI::fromJsonValue(m_creator_role, json[QString("creatorRole")]);
    m_creator_role_isSet = !json[QString("creatorRole")].isNull() && m_creator_role_isValid;

    m_delivery_control_isValid = ::OpenAPI::fromJsonValue(m_delivery_control, json[QString("deliveryControl")]);
    m_delivery_control_isSet = !json[QString("deliveryControl")].isNull() && m_delivery_control_isValid;

    m_flight_end_time_ms_isValid = ::OpenAPI::fromJsonValue(m_flight_end_time_ms, json[QString("flightEndTimeMs")]);
    m_flight_end_time_ms_isSet = !json[QString("flightEndTimeMs")].isNull() && m_flight_end_time_ms_isValid;

    m_flight_start_time_ms_isValid = ::OpenAPI::fromJsonValue(m_flight_start_time_ms, json[QString("flightStartTimeMs")]);
    m_flight_start_time_ms_isSet = !json[QString("flightStartTimeMs")].isNull() && m_flight_start_time_ms_isValid;

    m_has_creator_signed_off_isValid = ::OpenAPI::fromJsonValue(m_has_creator_signed_off, json[QString("hasCreatorSignedOff")]);
    m_has_creator_signed_off_isSet = !json[QString("hasCreatorSignedOff")].isNull() && m_has_creator_signed_off_isValid;

    m_inventory_source_isValid = ::OpenAPI::fromJsonValue(m_inventory_source, json[QString("inventorySource")]);
    m_inventory_source_isSet = !json[QString("inventorySource")].isNull() && m_inventory_source_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_update_time_ms_isValid = ::OpenAPI::fromJsonValue(m_last_update_time_ms, json[QString("lastUpdateTimeMs")]);
    m_last_update_time_ms_isSet = !json[QString("lastUpdateTimeMs")].isNull() && m_last_update_time_ms_isValid;

    m_legacy_offer_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_offer_id, json[QString("legacyOfferId")]);
    m_legacy_offer_id_isSet = !json[QString("legacyOfferId")].isNull() && m_legacy_offer_id_isValid;

    m_marketplace_publisher_profile_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_publisher_profile_id, json[QString("marketplacePublisherProfileId")]);
    m_marketplace_publisher_profile_id_isSet = !json[QString("marketplacePublisherProfileId")].isNull() && m_marketplace_publisher_profile_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_private_auction_id_isValid = ::OpenAPI::fromJsonValue(m_private_auction_id, json[QString("privateAuctionId")]);
    m_private_auction_id_isSet = !json[QString("privateAuctionId")].isNull() && m_private_auction_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_publisher_profile_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_profile_id, json[QString("publisherProfileId")]);
    m_publisher_profile_id_isSet = !json[QString("publisherProfileId")].isNull() && m_publisher_profile_id_isValid;

    m_publisher_provided_forecast_isValid = ::OpenAPI::fromJsonValue(m_publisher_provided_forecast, json[QString("publisherProvidedForecast")]);
    m_publisher_provided_forecast_isSet = !json[QString("publisherProvidedForecast")].isNull() && m_publisher_provided_forecast_isValid;

    m_revision_number_isValid = ::OpenAPI::fromJsonValue(m_revision_number, json[QString("revisionNumber")]);
    m_revision_number_isSet = !json[QString("revisionNumber")].isNull() && m_revision_number_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_shared_targetings_isValid = ::OpenAPI::fromJsonValue(m_shared_targetings, json[QString("sharedTargetings")]);
    m_shared_targetings_isSet = !json[QString("sharedTargetings")].isNull() && m_shared_targetings_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_syndication_product_isValid = ::OpenAPI::fromJsonValue(m_syndication_product, json[QString("syndicationProduct")]);
    m_syndication_product_isSet = !json[QString("syndicationProduct")].isNull() && m_syndication_product_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_web_property_code_isValid = ::OpenAPI::fromJsonValue(m_web_property_code, json[QString("webPropertyCode")]);
    m_web_property_code_isSet = !json[QString("webPropertyCode")].isNull() && m_web_property_code_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_buyer.isSet()) {
        obj.insert(QString("billedBuyer"), ::OpenAPI::toJsonValue(m_billed_buyer));
    }
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_creation_time_ms_isSet) {
        obj.insert(QString("creationTimeMs"), ::OpenAPI::toJsonValue(m_creation_time_ms));
    }
    if (m_creator_contacts.size() > 0) {
        obj.insert(QString("creatorContacts"), ::OpenAPI::toJsonValue(m_creator_contacts));
    }
    if (m_creator_role_isSet) {
        obj.insert(QString("creatorRole"), ::OpenAPI::toJsonValue(m_creator_role));
    }
    if (m_delivery_control.isSet()) {
        obj.insert(QString("deliveryControl"), ::OpenAPI::toJsonValue(m_delivery_control));
    }
    if (m_flight_end_time_ms_isSet) {
        obj.insert(QString("flightEndTimeMs"), ::OpenAPI::toJsonValue(m_flight_end_time_ms));
    }
    if (m_flight_start_time_ms_isSet) {
        obj.insert(QString("flightStartTimeMs"), ::OpenAPI::toJsonValue(m_flight_start_time_ms));
    }
    if (m_has_creator_signed_off_isSet) {
        obj.insert(QString("hasCreatorSignedOff"), ::OpenAPI::toJsonValue(m_has_creator_signed_off));
    }
    if (m_inventory_source_isSet) {
        obj.insert(QString("inventorySource"), ::OpenAPI::toJsonValue(m_inventory_source));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_update_time_ms_isSet) {
        obj.insert(QString("lastUpdateTimeMs"), ::OpenAPI::toJsonValue(m_last_update_time_ms));
    }
    if (m_legacy_offer_id_isSet) {
        obj.insert(QString("legacyOfferId"), ::OpenAPI::toJsonValue(m_legacy_offer_id));
    }
    if (m_marketplace_publisher_profile_id_isSet) {
        obj.insert(QString("marketplacePublisherProfileId"), ::OpenAPI::toJsonValue(m_marketplace_publisher_profile_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_private_auction_id_isSet) {
        obj.insert(QString("privateAuctionId"), ::OpenAPI::toJsonValue(m_private_auction_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_publisher_profile_id_isSet) {
        obj.insert(QString("publisherProfileId"), ::OpenAPI::toJsonValue(m_publisher_profile_id));
    }
    if (m_publisher_provided_forecast.isSet()) {
        obj.insert(QString("publisherProvidedForecast"), ::OpenAPI::toJsonValue(m_publisher_provided_forecast));
    }
    if (m_revision_number_isSet) {
        obj.insert(QString("revisionNumber"), ::OpenAPI::toJsonValue(m_revision_number));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_shared_targetings.size() > 0) {
        obj.insert(QString("sharedTargetings"), ::OpenAPI::toJsonValue(m_shared_targetings));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_syndication_product_isSet) {
        obj.insert(QString("syndicationProduct"), ::OpenAPI::toJsonValue(m_syndication_product));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_web_property_code_isSet) {
        obj.insert(QString("webPropertyCode"), ::OpenAPI::toJsonValue(m_web_property_code));
    }
    return obj;
}

OAIBuyer OAIProduct::getBilledBuyer() const {
    return m_billed_buyer;
}
void OAIProduct::setBilledBuyer(const OAIBuyer &billed_buyer) {
    m_billed_buyer = billed_buyer;
    m_billed_buyer_isSet = true;
}

bool OAIProduct::is_billed_buyer_Set() const{
    return m_billed_buyer_isSet;
}

bool OAIProduct::is_billed_buyer_Valid() const{
    return m_billed_buyer_isValid;
}

OAIBuyer OAIProduct::getBuyer() const {
    return m_buyer;
}
void OAIProduct::setBuyer(const OAIBuyer &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIProduct::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIProduct::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QString OAIProduct::getCreationTimeMs() const {
    return m_creation_time_ms;
}
void OAIProduct::setCreationTimeMs(const QString &creation_time_ms) {
    m_creation_time_ms = creation_time_ms;
    m_creation_time_ms_isSet = true;
}

bool OAIProduct::is_creation_time_ms_Set() const{
    return m_creation_time_ms_isSet;
}

bool OAIProduct::is_creation_time_ms_Valid() const{
    return m_creation_time_ms_isValid;
}

QList<OAIContactInformation> OAIProduct::getCreatorContacts() const {
    return m_creator_contacts;
}
void OAIProduct::setCreatorContacts(const QList<OAIContactInformation> &creator_contacts) {
    m_creator_contacts = creator_contacts;
    m_creator_contacts_isSet = true;
}

bool OAIProduct::is_creator_contacts_Set() const{
    return m_creator_contacts_isSet;
}

bool OAIProduct::is_creator_contacts_Valid() const{
    return m_creator_contacts_isValid;
}

QString OAIProduct::getCreatorRole() const {
    return m_creator_role;
}
void OAIProduct::setCreatorRole(const QString &creator_role) {
    m_creator_role = creator_role;
    m_creator_role_isSet = true;
}

bool OAIProduct::is_creator_role_Set() const{
    return m_creator_role_isSet;
}

bool OAIProduct::is_creator_role_Valid() const{
    return m_creator_role_isValid;
}

OAIDeliveryControl OAIProduct::getDeliveryControl() const {
    return m_delivery_control;
}
void OAIProduct::setDeliveryControl(const OAIDeliveryControl &delivery_control) {
    m_delivery_control = delivery_control;
    m_delivery_control_isSet = true;
}

bool OAIProduct::is_delivery_control_Set() const{
    return m_delivery_control_isSet;
}

bool OAIProduct::is_delivery_control_Valid() const{
    return m_delivery_control_isValid;
}

QString OAIProduct::getFlightEndTimeMs() const {
    return m_flight_end_time_ms;
}
void OAIProduct::setFlightEndTimeMs(const QString &flight_end_time_ms) {
    m_flight_end_time_ms = flight_end_time_ms;
    m_flight_end_time_ms_isSet = true;
}

bool OAIProduct::is_flight_end_time_ms_Set() const{
    return m_flight_end_time_ms_isSet;
}

bool OAIProduct::is_flight_end_time_ms_Valid() const{
    return m_flight_end_time_ms_isValid;
}

QString OAIProduct::getFlightStartTimeMs() const {
    return m_flight_start_time_ms;
}
void OAIProduct::setFlightStartTimeMs(const QString &flight_start_time_ms) {
    m_flight_start_time_ms = flight_start_time_ms;
    m_flight_start_time_ms_isSet = true;
}

bool OAIProduct::is_flight_start_time_ms_Set() const{
    return m_flight_start_time_ms_isSet;
}

bool OAIProduct::is_flight_start_time_ms_Valid() const{
    return m_flight_start_time_ms_isValid;
}

bool OAIProduct::isHasCreatorSignedOff() const {
    return m_has_creator_signed_off;
}
void OAIProduct::setHasCreatorSignedOff(const bool &has_creator_signed_off) {
    m_has_creator_signed_off = has_creator_signed_off;
    m_has_creator_signed_off_isSet = true;
}

bool OAIProduct::is_has_creator_signed_off_Set() const{
    return m_has_creator_signed_off_isSet;
}

bool OAIProduct::is_has_creator_signed_off_Valid() const{
    return m_has_creator_signed_off_isValid;
}

QString OAIProduct::getInventorySource() const {
    return m_inventory_source;
}
void OAIProduct::setInventorySource(const QString &inventory_source) {
    m_inventory_source = inventory_source;
    m_inventory_source_isSet = true;
}

bool OAIProduct::is_inventory_source_Set() const{
    return m_inventory_source_isSet;
}

bool OAIProduct::is_inventory_source_Valid() const{
    return m_inventory_source_isValid;
}

QString OAIProduct::getKind() const {
    return m_kind;
}
void OAIProduct::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIProduct::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIProduct::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIMarketplaceLabel> OAIProduct::getLabels() const {
    return m_labels;
}
void OAIProduct::setLabels(const QList<OAIMarketplaceLabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIProduct::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIProduct::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIProduct::getLastUpdateTimeMs() const {
    return m_last_update_time_ms;
}
void OAIProduct::setLastUpdateTimeMs(const QString &last_update_time_ms) {
    m_last_update_time_ms = last_update_time_ms;
    m_last_update_time_ms_isSet = true;
}

bool OAIProduct::is_last_update_time_ms_Set() const{
    return m_last_update_time_ms_isSet;
}

bool OAIProduct::is_last_update_time_ms_Valid() const{
    return m_last_update_time_ms_isValid;
}

QString OAIProduct::getLegacyOfferId() const {
    return m_legacy_offer_id;
}
void OAIProduct::setLegacyOfferId(const QString &legacy_offer_id) {
    m_legacy_offer_id = legacy_offer_id;
    m_legacy_offer_id_isSet = true;
}

bool OAIProduct::is_legacy_offer_id_Set() const{
    return m_legacy_offer_id_isSet;
}

bool OAIProduct::is_legacy_offer_id_Valid() const{
    return m_legacy_offer_id_isValid;
}

QString OAIProduct::getMarketplacePublisherProfileId() const {
    return m_marketplace_publisher_profile_id;
}
void OAIProduct::setMarketplacePublisherProfileId(const QString &marketplace_publisher_profile_id) {
    m_marketplace_publisher_profile_id = marketplace_publisher_profile_id;
    m_marketplace_publisher_profile_id_isSet = true;
}

bool OAIProduct::is_marketplace_publisher_profile_id_Set() const{
    return m_marketplace_publisher_profile_id_isSet;
}

bool OAIProduct::is_marketplace_publisher_profile_id_Valid() const{
    return m_marketplace_publisher_profile_id_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProduct::getPrivateAuctionId() const {
    return m_private_auction_id;
}
void OAIProduct::setPrivateAuctionId(const QString &private_auction_id) {
    m_private_auction_id = private_auction_id;
    m_private_auction_id_isSet = true;
}

bool OAIProduct::is_private_auction_id_Set() const{
    return m_private_auction_id_isSet;
}

bool OAIProduct::is_private_auction_id_Valid() const{
    return m_private_auction_id_isValid;
}

QString OAIProduct::getProductId() const {
    return m_product_id;
}
void OAIProduct::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProduct::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProduct::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProduct::getPublisherProfileId() const {
    return m_publisher_profile_id;
}
void OAIProduct::setPublisherProfileId(const QString &publisher_profile_id) {
    m_publisher_profile_id = publisher_profile_id;
    m_publisher_profile_id_isSet = true;
}

bool OAIProduct::is_publisher_profile_id_Set() const{
    return m_publisher_profile_id_isSet;
}

bool OAIProduct::is_publisher_profile_id_Valid() const{
    return m_publisher_profile_id_isValid;
}

OAIPublisherProvidedForecast OAIProduct::getPublisherProvidedForecast() const {
    return m_publisher_provided_forecast;
}
void OAIProduct::setPublisherProvidedForecast(const OAIPublisherProvidedForecast &publisher_provided_forecast) {
    m_publisher_provided_forecast = publisher_provided_forecast;
    m_publisher_provided_forecast_isSet = true;
}

bool OAIProduct::is_publisher_provided_forecast_Set() const{
    return m_publisher_provided_forecast_isSet;
}

bool OAIProduct::is_publisher_provided_forecast_Valid() const{
    return m_publisher_provided_forecast_isValid;
}

QString OAIProduct::getRevisionNumber() const {
    return m_revision_number;
}
void OAIProduct::setRevisionNumber(const QString &revision_number) {
    m_revision_number = revision_number;
    m_revision_number_isSet = true;
}

bool OAIProduct::is_revision_number_Set() const{
    return m_revision_number_isSet;
}

bool OAIProduct::is_revision_number_Valid() const{
    return m_revision_number_isValid;
}

OAISeller OAIProduct::getSeller() const {
    return m_seller;
}
void OAIProduct::setSeller(const OAISeller &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIProduct::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIProduct::is_seller_Valid() const{
    return m_seller_isValid;
}

QList<OAISharedTargeting> OAIProduct::getSharedTargetings() const {
    return m_shared_targetings;
}
void OAIProduct::setSharedTargetings(const QList<OAISharedTargeting> &shared_targetings) {
    m_shared_targetings = shared_targetings;
    m_shared_targetings_isSet = true;
}

bool OAIProduct::is_shared_targetings_Set() const{
    return m_shared_targetings_isSet;
}

bool OAIProduct::is_shared_targetings_Valid() const{
    return m_shared_targetings_isValid;
}

QString OAIProduct::getState() const {
    return m_state;
}
void OAIProduct::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProduct::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProduct::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIProduct::getSyndicationProduct() const {
    return m_syndication_product;
}
void OAIProduct::setSyndicationProduct(const QString &syndication_product) {
    m_syndication_product = syndication_product;
    m_syndication_product_isSet = true;
}

bool OAIProduct::is_syndication_product_Set() const{
    return m_syndication_product_isSet;
}

bool OAIProduct::is_syndication_product_Valid() const{
    return m_syndication_product_isValid;
}

OAIDealTerms OAIProduct::getTerms() const {
    return m_terms;
}
void OAIProduct::setTerms(const OAIDealTerms &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIProduct::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIProduct::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIProduct::getWebPropertyCode() const {
    return m_web_property_code;
}
void OAIProduct::setWebPropertyCode(const QString &web_property_code) {
    m_web_property_code = web_property_code;
    m_web_property_code_isSet = true;
}

bool OAIProduct::is_web_property_code_Set() const{
    return m_web_property_code_isSet;
}

bool OAIProduct::is_web_property_code_Valid() const{
    return m_web_property_code_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_end_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_start_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_creator_signed_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_publisher_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_auction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_provided_forecast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_targetings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syndication_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_property_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
