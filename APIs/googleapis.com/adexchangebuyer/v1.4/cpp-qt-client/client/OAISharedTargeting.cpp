/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedTargeting::OAISharedTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedTargeting::OAISharedTargeting() {
    this->initializeModel();
}

OAISharedTargeting::~OAISharedTargeting() {}

void OAISharedTargeting::initializeModel() {

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_inclusions_isSet = false;
    m_inclusions_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAISharedTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedTargeting::fromJsonObject(QJsonObject json) {

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("exclusions")]);
    m_exclusions_isSet = !json[QString("exclusions")].isNull() && m_exclusions_isValid;

    m_inclusions_isValid = ::OpenAPI::fromJsonValue(m_inclusions, json[QString("inclusions")]);
    m_inclusions_isSet = !json[QString("inclusions")].isNull() && m_inclusions_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAISharedTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusions.size() > 0) {
        obj.insert(QString("exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_inclusions.size() > 0) {
        obj.insert(QString("inclusions"), ::OpenAPI::toJsonValue(m_inclusions));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QList<OAITargetingValue> OAISharedTargeting::getExclusions() const {
    return m_exclusions;
}
void OAISharedTargeting::setExclusions(const QList<OAITargetingValue> &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAISharedTargeting::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAISharedTargeting::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QList<OAITargetingValue> OAISharedTargeting::getInclusions() const {
    return m_inclusions;
}
void OAISharedTargeting::setInclusions(const QList<OAITargetingValue> &inclusions) {
    m_inclusions = inclusions;
    m_inclusions_isSet = true;
}

bool OAISharedTargeting::is_inclusions_Set() const{
    return m_inclusions_isSet;
}

bool OAISharedTargeting::is_inclusions_Valid() const{
    return m_inclusions_isValid;
}

QString OAISharedTargeting::getKey() const {
    return m_key;
}
void OAISharedTargeting::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISharedTargeting::is_key_Set() const{
    return m_key_isSet;
}

bool OAISharedTargeting::is_key_Valid() const{
    return m_key_isValid;
}

bool OAISharedTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
