/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeDealIds_dealStatuses_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeDealIds_dealStatuses_inner::OAICreativeDealIds_dealStatuses_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeDealIds_dealStatuses_inner::OAICreativeDealIds_dealStatuses_inner() {
    this->initializeModel();
}

OAICreativeDealIds_dealStatuses_inner::~OAICreativeDealIds_dealStatuses_inner() {}

void OAICreativeDealIds_dealStatuses_inner::initializeModel() {

    m_arc_status_isSet = false;
    m_arc_status_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_web_property_id_isSet = false;
    m_web_property_id_isValid = false;
}

void OAICreativeDealIds_dealStatuses_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeDealIds_dealStatuses_inner::fromJsonObject(QJsonObject json) {

    m_arc_status_isValid = ::OpenAPI::fromJsonValue(m_arc_status, json[QString("arcStatus")]);
    m_arc_status_isSet = !json[QString("arcStatus")].isNull() && m_arc_status_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_web_property_id_isValid = ::OpenAPI::fromJsonValue(m_web_property_id, json[QString("webPropertyId")]);
    m_web_property_id_isSet = !json[QString("webPropertyId")].isNull() && m_web_property_id_isValid;
}

QString OAICreativeDealIds_dealStatuses_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeDealIds_dealStatuses_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_arc_status_isSet) {
        obj.insert(QString("arcStatus"), ::OpenAPI::toJsonValue(m_arc_status));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_web_property_id_isSet) {
        obj.insert(QString("webPropertyId"), ::OpenAPI::toJsonValue(m_web_property_id));
    }
    return obj;
}

QString OAICreativeDealIds_dealStatuses_inner::getArcStatus() const {
    return m_arc_status;
}
void OAICreativeDealIds_dealStatuses_inner::setArcStatus(const QString &arc_status) {
    m_arc_status = arc_status;
    m_arc_status_isSet = true;
}

bool OAICreativeDealIds_dealStatuses_inner::is_arc_status_Set() const{
    return m_arc_status_isSet;
}

bool OAICreativeDealIds_dealStatuses_inner::is_arc_status_Valid() const{
    return m_arc_status_isValid;
}

QString OAICreativeDealIds_dealStatuses_inner::getDealId() const {
    return m_deal_id;
}
void OAICreativeDealIds_dealStatuses_inner::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAICreativeDealIds_dealStatuses_inner::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAICreativeDealIds_dealStatuses_inner::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

qint32 OAICreativeDealIds_dealStatuses_inner::getWebPropertyId() const {
    return m_web_property_id;
}
void OAICreativeDealIds_dealStatuses_inner::setWebPropertyId(const qint32 &web_property_id) {
    m_web_property_id = web_property_id;
    m_web_property_id_isSet = true;
}

bool OAICreativeDealIds_dealStatuses_inner::is_web_property_id_Set() const{
    return m_web_property_id_isSet;
}

bool OAICreativeDealIds_dealStatuses_inner::is_web_property_id_Valid() const{
    return m_web_property_id_isValid;
}

bool OAICreativeDealIds_dealStatuses_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arc_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeDealIds_dealStatuses_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
