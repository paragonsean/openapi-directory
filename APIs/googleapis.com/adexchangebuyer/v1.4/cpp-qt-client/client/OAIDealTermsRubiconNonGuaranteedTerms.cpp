/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealTermsRubiconNonGuaranteedTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealTermsRubiconNonGuaranteedTerms::OAIDealTermsRubiconNonGuaranteedTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealTermsRubiconNonGuaranteedTerms::OAIDealTermsRubiconNonGuaranteedTerms() {
    this->initializeModel();
}

OAIDealTermsRubiconNonGuaranteedTerms::~OAIDealTermsRubiconNonGuaranteedTerms() {}

void OAIDealTermsRubiconNonGuaranteedTerms::initializeModel() {

    m_priority_price_isSet = false;
    m_priority_price_isValid = false;

    m_standard_price_isSet = false;
    m_standard_price_isValid = false;
}

void OAIDealTermsRubiconNonGuaranteedTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealTermsRubiconNonGuaranteedTerms::fromJsonObject(QJsonObject json) {

    m_priority_price_isValid = ::OpenAPI::fromJsonValue(m_priority_price, json[QString("priorityPrice")]);
    m_priority_price_isSet = !json[QString("priorityPrice")].isNull() && m_priority_price_isValid;

    m_standard_price_isValid = ::OpenAPI::fromJsonValue(m_standard_price, json[QString("standardPrice")]);
    m_standard_price_isSet = !json[QString("standardPrice")].isNull() && m_standard_price_isValid;
}

QString OAIDealTermsRubiconNonGuaranteedTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealTermsRubiconNonGuaranteedTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_priority_price.isSet()) {
        obj.insert(QString("priorityPrice"), ::OpenAPI::toJsonValue(m_priority_price));
    }
    if (m_standard_price.isSet()) {
        obj.insert(QString("standardPrice"), ::OpenAPI::toJsonValue(m_standard_price));
    }
    return obj;
}

OAIPrice OAIDealTermsRubiconNonGuaranteedTerms::getPriorityPrice() const {
    return m_priority_price;
}
void OAIDealTermsRubiconNonGuaranteedTerms::setPriorityPrice(const OAIPrice &priority_price) {
    m_priority_price = priority_price;
    m_priority_price_isSet = true;
}

bool OAIDealTermsRubiconNonGuaranteedTerms::is_priority_price_Set() const{
    return m_priority_price_isSet;
}

bool OAIDealTermsRubiconNonGuaranteedTerms::is_priority_price_Valid() const{
    return m_priority_price_isValid;
}

OAIPrice OAIDealTermsRubiconNonGuaranteedTerms::getStandardPrice() const {
    return m_standard_price;
}
void OAIDealTermsRubiconNonGuaranteedTerms::setStandardPrice(const OAIPrice &standard_price) {
    m_standard_price = standard_price;
    m_standard_price_isSet = true;
}

bool OAIDealTermsRubiconNonGuaranteedTerms::is_standard_price_Set() const{
    return m_standard_price_isSet;
}

bool OAIDealTermsRubiconNonGuaranteedTerms::is_standard_price_Valid() const{
    return m_standard_price_isValid;
}

bool OAIDealTermsRubiconNonGuaranteedTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_priority_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealTermsRubiconNonGuaranteedTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
