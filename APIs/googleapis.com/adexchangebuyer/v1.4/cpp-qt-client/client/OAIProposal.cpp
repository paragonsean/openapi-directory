/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProposal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProposal::OAIProposal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProposal::OAIProposal() {
    this->initializeModel();
}

OAIProposal::~OAIProposal() {}

void OAIProposal::initializeModel() {

    m_billed_buyer_isSet = false;
    m_billed_buyer_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_buyer_contacts_isSet = false;
    m_buyer_contacts_isValid = false;

    m_buyer_private_data_isSet = false;
    m_buyer_private_data_isValid = false;

    m_dbm_advertiser_ids_isSet = false;
    m_dbm_advertiser_ids_isValid = false;

    m_has_buyer_signed_off_isSet = false;
    m_has_buyer_signed_off_isValid = false;

    m_has_seller_signed_off_isSet = false;
    m_has_seller_signed_off_isValid = false;

    m_inventory_source_isSet = false;
    m_inventory_source_isValid = false;

    m_is_renegotiating_isSet = false;
    m_is_renegotiating_isValid = false;

    m_is_setup_complete_isSet = false;
    m_is_setup_complete_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_updater_or_commentor_role_isSet = false;
    m_last_updater_or_commentor_role_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_negotiation_id_isSet = false;
    m_negotiation_id_isValid = false;

    m_originator_role_isSet = false;
    m_originator_role_isValid = false;

    m_private_auction_id_isSet = false;
    m_private_auction_id_isValid = false;

    m_proposal_id_isSet = false;
    m_proposal_id_isValid = false;

    m_proposal_state_isSet = false;
    m_proposal_state_isValid = false;

    m_revision_number_isSet = false;
    m_revision_number_isValid = false;

    m_revision_time_ms_isSet = false;
    m_revision_time_ms_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_seller_contacts_isSet = false;
    m_seller_contacts_isValid = false;
}

void OAIProposal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProposal::fromJsonObject(QJsonObject json) {

    m_billed_buyer_isValid = ::OpenAPI::fromJsonValue(m_billed_buyer, json[QString("billedBuyer")]);
    m_billed_buyer_isSet = !json[QString("billedBuyer")].isNull() && m_billed_buyer_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_buyer_contacts_isValid = ::OpenAPI::fromJsonValue(m_buyer_contacts, json[QString("buyerContacts")]);
    m_buyer_contacts_isSet = !json[QString("buyerContacts")].isNull() && m_buyer_contacts_isValid;

    m_buyer_private_data_isValid = ::OpenAPI::fromJsonValue(m_buyer_private_data, json[QString("buyerPrivateData")]);
    m_buyer_private_data_isSet = !json[QString("buyerPrivateData")].isNull() && m_buyer_private_data_isValid;

    m_dbm_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_dbm_advertiser_ids, json[QString("dbmAdvertiserIds")]);
    m_dbm_advertiser_ids_isSet = !json[QString("dbmAdvertiserIds")].isNull() && m_dbm_advertiser_ids_isValid;

    m_has_buyer_signed_off_isValid = ::OpenAPI::fromJsonValue(m_has_buyer_signed_off, json[QString("hasBuyerSignedOff")]);
    m_has_buyer_signed_off_isSet = !json[QString("hasBuyerSignedOff")].isNull() && m_has_buyer_signed_off_isValid;

    m_has_seller_signed_off_isValid = ::OpenAPI::fromJsonValue(m_has_seller_signed_off, json[QString("hasSellerSignedOff")]);
    m_has_seller_signed_off_isSet = !json[QString("hasSellerSignedOff")].isNull() && m_has_seller_signed_off_isValid;

    m_inventory_source_isValid = ::OpenAPI::fromJsonValue(m_inventory_source, json[QString("inventorySource")]);
    m_inventory_source_isSet = !json[QString("inventorySource")].isNull() && m_inventory_source_isValid;

    m_is_renegotiating_isValid = ::OpenAPI::fromJsonValue(m_is_renegotiating, json[QString("isRenegotiating")]);
    m_is_renegotiating_isSet = !json[QString("isRenegotiating")].isNull() && m_is_renegotiating_isValid;

    m_is_setup_complete_isValid = ::OpenAPI::fromJsonValue(m_is_setup_complete, json[QString("isSetupComplete")]);
    m_is_setup_complete_isSet = !json[QString("isSetupComplete")].isNull() && m_is_setup_complete_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_updater_or_commentor_role_isValid = ::OpenAPI::fromJsonValue(m_last_updater_or_commentor_role, json[QString("lastUpdaterOrCommentorRole")]);
    m_last_updater_or_commentor_role_isSet = !json[QString("lastUpdaterOrCommentorRole")].isNull() && m_last_updater_or_commentor_role_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_negotiation_id_isValid = ::OpenAPI::fromJsonValue(m_negotiation_id, json[QString("negotiationId")]);
    m_negotiation_id_isSet = !json[QString("negotiationId")].isNull() && m_negotiation_id_isValid;

    m_originator_role_isValid = ::OpenAPI::fromJsonValue(m_originator_role, json[QString("originatorRole")]);
    m_originator_role_isSet = !json[QString("originatorRole")].isNull() && m_originator_role_isValid;

    m_private_auction_id_isValid = ::OpenAPI::fromJsonValue(m_private_auction_id, json[QString("privateAuctionId")]);
    m_private_auction_id_isSet = !json[QString("privateAuctionId")].isNull() && m_private_auction_id_isValid;

    m_proposal_id_isValid = ::OpenAPI::fromJsonValue(m_proposal_id, json[QString("proposalId")]);
    m_proposal_id_isSet = !json[QString("proposalId")].isNull() && m_proposal_id_isValid;

    m_proposal_state_isValid = ::OpenAPI::fromJsonValue(m_proposal_state, json[QString("proposalState")]);
    m_proposal_state_isSet = !json[QString("proposalState")].isNull() && m_proposal_state_isValid;

    m_revision_number_isValid = ::OpenAPI::fromJsonValue(m_revision_number, json[QString("revisionNumber")]);
    m_revision_number_isSet = !json[QString("revisionNumber")].isNull() && m_revision_number_isValid;

    m_revision_time_ms_isValid = ::OpenAPI::fromJsonValue(m_revision_time_ms, json[QString("revisionTimeMs")]);
    m_revision_time_ms_isSet = !json[QString("revisionTimeMs")].isNull() && m_revision_time_ms_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_seller_contacts_isValid = ::OpenAPI::fromJsonValue(m_seller_contacts, json[QString("sellerContacts")]);
    m_seller_contacts_isSet = !json[QString("sellerContacts")].isNull() && m_seller_contacts_isValid;
}

QString OAIProposal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProposal::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_buyer.isSet()) {
        obj.insert(QString("billedBuyer"), ::OpenAPI::toJsonValue(m_billed_buyer));
    }
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_buyer_contacts.size() > 0) {
        obj.insert(QString("buyerContacts"), ::OpenAPI::toJsonValue(m_buyer_contacts));
    }
    if (m_buyer_private_data.isSet()) {
        obj.insert(QString("buyerPrivateData"), ::OpenAPI::toJsonValue(m_buyer_private_data));
    }
    if (m_dbm_advertiser_ids.size() > 0) {
        obj.insert(QString("dbmAdvertiserIds"), ::OpenAPI::toJsonValue(m_dbm_advertiser_ids));
    }
    if (m_has_buyer_signed_off_isSet) {
        obj.insert(QString("hasBuyerSignedOff"), ::OpenAPI::toJsonValue(m_has_buyer_signed_off));
    }
    if (m_has_seller_signed_off_isSet) {
        obj.insert(QString("hasSellerSignedOff"), ::OpenAPI::toJsonValue(m_has_seller_signed_off));
    }
    if (m_inventory_source_isSet) {
        obj.insert(QString("inventorySource"), ::OpenAPI::toJsonValue(m_inventory_source));
    }
    if (m_is_renegotiating_isSet) {
        obj.insert(QString("isRenegotiating"), ::OpenAPI::toJsonValue(m_is_renegotiating));
    }
    if (m_is_setup_complete_isSet) {
        obj.insert(QString("isSetupComplete"), ::OpenAPI::toJsonValue(m_is_setup_complete));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_updater_or_commentor_role_isSet) {
        obj.insert(QString("lastUpdaterOrCommentorRole"), ::OpenAPI::toJsonValue(m_last_updater_or_commentor_role));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_negotiation_id_isSet) {
        obj.insert(QString("negotiationId"), ::OpenAPI::toJsonValue(m_negotiation_id));
    }
    if (m_originator_role_isSet) {
        obj.insert(QString("originatorRole"), ::OpenAPI::toJsonValue(m_originator_role));
    }
    if (m_private_auction_id_isSet) {
        obj.insert(QString("privateAuctionId"), ::OpenAPI::toJsonValue(m_private_auction_id));
    }
    if (m_proposal_id_isSet) {
        obj.insert(QString("proposalId"), ::OpenAPI::toJsonValue(m_proposal_id));
    }
    if (m_proposal_state_isSet) {
        obj.insert(QString("proposalState"), ::OpenAPI::toJsonValue(m_proposal_state));
    }
    if (m_revision_number_isSet) {
        obj.insert(QString("revisionNumber"), ::OpenAPI::toJsonValue(m_revision_number));
    }
    if (m_revision_time_ms_isSet) {
        obj.insert(QString("revisionTimeMs"), ::OpenAPI::toJsonValue(m_revision_time_ms));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_seller_contacts.size() > 0) {
        obj.insert(QString("sellerContacts"), ::OpenAPI::toJsonValue(m_seller_contacts));
    }
    return obj;
}

OAIBuyer OAIProposal::getBilledBuyer() const {
    return m_billed_buyer;
}
void OAIProposal::setBilledBuyer(const OAIBuyer &billed_buyer) {
    m_billed_buyer = billed_buyer;
    m_billed_buyer_isSet = true;
}

bool OAIProposal::is_billed_buyer_Set() const{
    return m_billed_buyer_isSet;
}

bool OAIProposal::is_billed_buyer_Valid() const{
    return m_billed_buyer_isValid;
}

OAIBuyer OAIProposal::getBuyer() const {
    return m_buyer;
}
void OAIProposal::setBuyer(const OAIBuyer &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIProposal::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIProposal::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QList<OAIContactInformation> OAIProposal::getBuyerContacts() const {
    return m_buyer_contacts;
}
void OAIProposal::setBuyerContacts(const QList<OAIContactInformation> &buyer_contacts) {
    m_buyer_contacts = buyer_contacts;
    m_buyer_contacts_isSet = true;
}

bool OAIProposal::is_buyer_contacts_Set() const{
    return m_buyer_contacts_isSet;
}

bool OAIProposal::is_buyer_contacts_Valid() const{
    return m_buyer_contacts_isValid;
}

OAIPrivateData OAIProposal::getBuyerPrivateData() const {
    return m_buyer_private_data;
}
void OAIProposal::setBuyerPrivateData(const OAIPrivateData &buyer_private_data) {
    m_buyer_private_data = buyer_private_data;
    m_buyer_private_data_isSet = true;
}

bool OAIProposal::is_buyer_private_data_Set() const{
    return m_buyer_private_data_isSet;
}

bool OAIProposal::is_buyer_private_data_Valid() const{
    return m_buyer_private_data_isValid;
}

QList<QString> OAIProposal::getDbmAdvertiserIds() const {
    return m_dbm_advertiser_ids;
}
void OAIProposal::setDbmAdvertiserIds(const QList<QString> &dbm_advertiser_ids) {
    m_dbm_advertiser_ids = dbm_advertiser_ids;
    m_dbm_advertiser_ids_isSet = true;
}

bool OAIProposal::is_dbm_advertiser_ids_Set() const{
    return m_dbm_advertiser_ids_isSet;
}

bool OAIProposal::is_dbm_advertiser_ids_Valid() const{
    return m_dbm_advertiser_ids_isValid;
}

bool OAIProposal::isHasBuyerSignedOff() const {
    return m_has_buyer_signed_off;
}
void OAIProposal::setHasBuyerSignedOff(const bool &has_buyer_signed_off) {
    m_has_buyer_signed_off = has_buyer_signed_off;
    m_has_buyer_signed_off_isSet = true;
}

bool OAIProposal::is_has_buyer_signed_off_Set() const{
    return m_has_buyer_signed_off_isSet;
}

bool OAIProposal::is_has_buyer_signed_off_Valid() const{
    return m_has_buyer_signed_off_isValid;
}

bool OAIProposal::isHasSellerSignedOff() const {
    return m_has_seller_signed_off;
}
void OAIProposal::setHasSellerSignedOff(const bool &has_seller_signed_off) {
    m_has_seller_signed_off = has_seller_signed_off;
    m_has_seller_signed_off_isSet = true;
}

bool OAIProposal::is_has_seller_signed_off_Set() const{
    return m_has_seller_signed_off_isSet;
}

bool OAIProposal::is_has_seller_signed_off_Valid() const{
    return m_has_seller_signed_off_isValid;
}

QString OAIProposal::getInventorySource() const {
    return m_inventory_source;
}
void OAIProposal::setInventorySource(const QString &inventory_source) {
    m_inventory_source = inventory_source;
    m_inventory_source_isSet = true;
}

bool OAIProposal::is_inventory_source_Set() const{
    return m_inventory_source_isSet;
}

bool OAIProposal::is_inventory_source_Valid() const{
    return m_inventory_source_isValid;
}

bool OAIProposal::isIsRenegotiating() const {
    return m_is_renegotiating;
}
void OAIProposal::setIsRenegotiating(const bool &is_renegotiating) {
    m_is_renegotiating = is_renegotiating;
    m_is_renegotiating_isSet = true;
}

bool OAIProposal::is_is_renegotiating_Set() const{
    return m_is_renegotiating_isSet;
}

bool OAIProposal::is_is_renegotiating_Valid() const{
    return m_is_renegotiating_isValid;
}

bool OAIProposal::isIsSetupComplete() const {
    return m_is_setup_complete;
}
void OAIProposal::setIsSetupComplete(const bool &is_setup_complete) {
    m_is_setup_complete = is_setup_complete;
    m_is_setup_complete_isSet = true;
}

bool OAIProposal::is_is_setup_complete_Set() const{
    return m_is_setup_complete_isSet;
}

bool OAIProposal::is_is_setup_complete_Valid() const{
    return m_is_setup_complete_isValid;
}

QString OAIProposal::getKind() const {
    return m_kind;
}
void OAIProposal::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIProposal::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIProposal::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIMarketplaceLabel> OAIProposal::getLabels() const {
    return m_labels;
}
void OAIProposal::setLabels(const QList<OAIMarketplaceLabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIProposal::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIProposal::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIProposal::getLastUpdaterOrCommentorRole() const {
    return m_last_updater_or_commentor_role;
}
void OAIProposal::setLastUpdaterOrCommentorRole(const QString &last_updater_or_commentor_role) {
    m_last_updater_or_commentor_role = last_updater_or_commentor_role;
    m_last_updater_or_commentor_role_isSet = true;
}

bool OAIProposal::is_last_updater_or_commentor_role_Set() const{
    return m_last_updater_or_commentor_role_isSet;
}

bool OAIProposal::is_last_updater_or_commentor_role_Valid() const{
    return m_last_updater_or_commentor_role_isValid;
}

QString OAIProposal::getName() const {
    return m_name;
}
void OAIProposal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProposal::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProposal::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProposal::getNegotiationId() const {
    return m_negotiation_id;
}
void OAIProposal::setNegotiationId(const QString &negotiation_id) {
    m_negotiation_id = negotiation_id;
    m_negotiation_id_isSet = true;
}

bool OAIProposal::is_negotiation_id_Set() const{
    return m_negotiation_id_isSet;
}

bool OAIProposal::is_negotiation_id_Valid() const{
    return m_negotiation_id_isValid;
}

QString OAIProposal::getOriginatorRole() const {
    return m_originator_role;
}
void OAIProposal::setOriginatorRole(const QString &originator_role) {
    m_originator_role = originator_role;
    m_originator_role_isSet = true;
}

bool OAIProposal::is_originator_role_Set() const{
    return m_originator_role_isSet;
}

bool OAIProposal::is_originator_role_Valid() const{
    return m_originator_role_isValid;
}

QString OAIProposal::getPrivateAuctionId() const {
    return m_private_auction_id;
}
void OAIProposal::setPrivateAuctionId(const QString &private_auction_id) {
    m_private_auction_id = private_auction_id;
    m_private_auction_id_isSet = true;
}

bool OAIProposal::is_private_auction_id_Set() const{
    return m_private_auction_id_isSet;
}

bool OAIProposal::is_private_auction_id_Valid() const{
    return m_private_auction_id_isValid;
}

QString OAIProposal::getProposalId() const {
    return m_proposal_id;
}
void OAIProposal::setProposalId(const QString &proposal_id) {
    m_proposal_id = proposal_id;
    m_proposal_id_isSet = true;
}

bool OAIProposal::is_proposal_id_Set() const{
    return m_proposal_id_isSet;
}

bool OAIProposal::is_proposal_id_Valid() const{
    return m_proposal_id_isValid;
}

QString OAIProposal::getProposalState() const {
    return m_proposal_state;
}
void OAIProposal::setProposalState(const QString &proposal_state) {
    m_proposal_state = proposal_state;
    m_proposal_state_isSet = true;
}

bool OAIProposal::is_proposal_state_Set() const{
    return m_proposal_state_isSet;
}

bool OAIProposal::is_proposal_state_Valid() const{
    return m_proposal_state_isValid;
}

QString OAIProposal::getRevisionNumber() const {
    return m_revision_number;
}
void OAIProposal::setRevisionNumber(const QString &revision_number) {
    m_revision_number = revision_number;
    m_revision_number_isSet = true;
}

bool OAIProposal::is_revision_number_Set() const{
    return m_revision_number_isSet;
}

bool OAIProposal::is_revision_number_Valid() const{
    return m_revision_number_isValid;
}

QString OAIProposal::getRevisionTimeMs() const {
    return m_revision_time_ms;
}
void OAIProposal::setRevisionTimeMs(const QString &revision_time_ms) {
    m_revision_time_ms = revision_time_ms;
    m_revision_time_ms_isSet = true;
}

bool OAIProposal::is_revision_time_ms_Set() const{
    return m_revision_time_ms_isSet;
}

bool OAIProposal::is_revision_time_ms_Valid() const{
    return m_revision_time_ms_isValid;
}

OAISeller OAIProposal::getSeller() const {
    return m_seller;
}
void OAIProposal::setSeller(const OAISeller &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIProposal::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIProposal::is_seller_Valid() const{
    return m_seller_isValid;
}

QList<OAIContactInformation> OAIProposal::getSellerContacts() const {
    return m_seller_contacts;
}
void OAIProposal::setSellerContacts(const QList<OAIContactInformation> &seller_contacts) {
    m_seller_contacts = seller_contacts;
    m_seller_contacts_isSet = true;
}

bool OAIProposal::is_seller_contacts_Set() const{
    return m_seller_contacts_isSet;
}

bool OAIProposal::is_seller_contacts_Valid() const{
    return m_seller_contacts_isValid;
}

bool OAIProposal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_private_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dbm_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_buyer_signed_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_seller_signed_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_renegotiating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_setup_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_or_commentor_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_auction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProposal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
