/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPublisherProfilesByAccountIdResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPublisherProfilesByAccountIdResponse::OAIGetPublisherProfilesByAccountIdResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPublisherProfilesByAccountIdResponse::OAIGetPublisherProfilesByAccountIdResponse() {
    this->initializeModel();
}

OAIGetPublisherProfilesByAccountIdResponse::~OAIGetPublisherProfilesByAccountIdResponse() {}

void OAIGetPublisherProfilesByAccountIdResponse::initializeModel() {

    m_profiles_isSet = false;
    m_profiles_isValid = false;
}

void OAIGetPublisherProfilesByAccountIdResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPublisherProfilesByAccountIdResponse::fromJsonObject(QJsonObject json) {

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;
}

QString OAIGetPublisherProfilesByAccountIdResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPublisherProfilesByAccountIdResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    return obj;
}

QList<OAIPublisherProfileApiProto> OAIGetPublisherProfilesByAccountIdResponse::getProfiles() const {
    return m_profiles;
}
void OAIGetPublisherProfilesByAccountIdResponse::setProfiles(const QList<OAIPublisherProfileApiProto> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIGetPublisherProfilesByAccountIdResponse::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIGetPublisherProfilesByAccountIdResponse::is_profiles_Valid() const{
    return m_profiles_isValid;
}

bool OAIGetPublisherProfilesByAccountIdResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPublisherProfilesByAccountIdResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
