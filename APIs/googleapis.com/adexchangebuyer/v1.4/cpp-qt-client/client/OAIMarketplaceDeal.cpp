/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplaceDeal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplaceDeal::OAIMarketplaceDeal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplaceDeal::OAIMarketplaceDeal() {
    this->initializeModel();
}

OAIMarketplaceDeal::~OAIMarketplaceDeal() {}

void OAIMarketplaceDeal::initializeModel() {

    m_buyer_private_data_isSet = false;
    m_buyer_private_data_isValid = false;

    m_creation_time_ms_isSet = false;
    m_creation_time_ms_isValid = false;

    m_creative_pre_approval_policy_isSet = false;
    m_creative_pre_approval_policy_isValid = false;

    m_creative_safe_frame_compatibility_isSet = false;
    m_creative_safe_frame_compatibility_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_deal_serving_metadata_isSet = false;
    m_deal_serving_metadata_isValid = false;

    m_delivery_control_isSet = false;
    m_delivery_control_isValid = false;

    m_external_deal_id_isSet = false;
    m_external_deal_id_isValid = false;

    m_flight_end_time_ms_isSet = false;
    m_flight_end_time_ms_isValid = false;

    m_flight_start_time_ms_isSet = false;
    m_flight_start_time_ms_isValid = false;

    m_inventory_description_isSet = false;
    m_inventory_description_isValid = false;

    m_is_rfp_template_isSet = false;
    m_is_rfp_template_isValid = false;

    m_is_setup_complete_isSet = false;
    m_is_setup_complete_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_update_time_ms_isSet = false;
    m_last_update_time_ms_isValid = false;

    m_makegood_requested_reason_isSet = false;
    m_makegood_requested_reason_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_revision_number_isSet = false;
    m_product_revision_number_isValid = false;

    m_programmatic_creative_source_isSet = false;
    m_programmatic_creative_source_isValid = false;

    m_proposal_id_isSet = false;
    m_proposal_id_isValid = false;

    m_seller_contacts_isSet = false;
    m_seller_contacts_isValid = false;

    m_shared_targetings_isSet = false;
    m_shared_targetings_isValid = false;

    m_syndication_product_isSet = false;
    m_syndication_product_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_web_property_code_isSet = false;
    m_web_property_code_isValid = false;
}

void OAIMarketplaceDeal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplaceDeal::fromJsonObject(QJsonObject json) {

    m_buyer_private_data_isValid = ::OpenAPI::fromJsonValue(m_buyer_private_data, json[QString("buyerPrivateData")]);
    m_buyer_private_data_isSet = !json[QString("buyerPrivateData")].isNull() && m_buyer_private_data_isValid;

    m_creation_time_ms_isValid = ::OpenAPI::fromJsonValue(m_creation_time_ms, json[QString("creationTimeMs")]);
    m_creation_time_ms_isSet = !json[QString("creationTimeMs")].isNull() && m_creation_time_ms_isValid;

    m_creative_pre_approval_policy_isValid = ::OpenAPI::fromJsonValue(m_creative_pre_approval_policy, json[QString("creativePreApprovalPolicy")]);
    m_creative_pre_approval_policy_isSet = !json[QString("creativePreApprovalPolicy")].isNull() && m_creative_pre_approval_policy_isValid;

    m_creative_safe_frame_compatibility_isValid = ::OpenAPI::fromJsonValue(m_creative_safe_frame_compatibility, json[QString("creativeSafeFrameCompatibility")]);
    m_creative_safe_frame_compatibility_isSet = !json[QString("creativeSafeFrameCompatibility")].isNull() && m_creative_safe_frame_compatibility_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_deal_serving_metadata_isValid = ::OpenAPI::fromJsonValue(m_deal_serving_metadata, json[QString("dealServingMetadata")]);
    m_deal_serving_metadata_isSet = !json[QString("dealServingMetadata")].isNull() && m_deal_serving_metadata_isValid;

    m_delivery_control_isValid = ::OpenAPI::fromJsonValue(m_delivery_control, json[QString("deliveryControl")]);
    m_delivery_control_isSet = !json[QString("deliveryControl")].isNull() && m_delivery_control_isValid;

    m_external_deal_id_isValid = ::OpenAPI::fromJsonValue(m_external_deal_id, json[QString("externalDealId")]);
    m_external_deal_id_isSet = !json[QString("externalDealId")].isNull() && m_external_deal_id_isValid;

    m_flight_end_time_ms_isValid = ::OpenAPI::fromJsonValue(m_flight_end_time_ms, json[QString("flightEndTimeMs")]);
    m_flight_end_time_ms_isSet = !json[QString("flightEndTimeMs")].isNull() && m_flight_end_time_ms_isValid;

    m_flight_start_time_ms_isValid = ::OpenAPI::fromJsonValue(m_flight_start_time_ms, json[QString("flightStartTimeMs")]);
    m_flight_start_time_ms_isSet = !json[QString("flightStartTimeMs")].isNull() && m_flight_start_time_ms_isValid;

    m_inventory_description_isValid = ::OpenAPI::fromJsonValue(m_inventory_description, json[QString("inventoryDescription")]);
    m_inventory_description_isSet = !json[QString("inventoryDescription")].isNull() && m_inventory_description_isValid;

    m_is_rfp_template_isValid = ::OpenAPI::fromJsonValue(m_is_rfp_template, json[QString("isRfpTemplate")]);
    m_is_rfp_template_isSet = !json[QString("isRfpTemplate")].isNull() && m_is_rfp_template_isValid;

    m_is_setup_complete_isValid = ::OpenAPI::fromJsonValue(m_is_setup_complete, json[QString("isSetupComplete")]);
    m_is_setup_complete_isSet = !json[QString("isSetupComplete")].isNull() && m_is_setup_complete_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_update_time_ms_isValid = ::OpenAPI::fromJsonValue(m_last_update_time_ms, json[QString("lastUpdateTimeMs")]);
    m_last_update_time_ms_isSet = !json[QString("lastUpdateTimeMs")].isNull() && m_last_update_time_ms_isValid;

    m_makegood_requested_reason_isValid = ::OpenAPI::fromJsonValue(m_makegood_requested_reason, json[QString("makegoodRequestedReason")]);
    m_makegood_requested_reason_isSet = !json[QString("makegoodRequestedReason")].isNull() && m_makegood_requested_reason_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_revision_number_isValid = ::OpenAPI::fromJsonValue(m_product_revision_number, json[QString("productRevisionNumber")]);
    m_product_revision_number_isSet = !json[QString("productRevisionNumber")].isNull() && m_product_revision_number_isValid;

    m_programmatic_creative_source_isValid = ::OpenAPI::fromJsonValue(m_programmatic_creative_source, json[QString("programmaticCreativeSource")]);
    m_programmatic_creative_source_isSet = !json[QString("programmaticCreativeSource")].isNull() && m_programmatic_creative_source_isValid;

    m_proposal_id_isValid = ::OpenAPI::fromJsonValue(m_proposal_id, json[QString("proposalId")]);
    m_proposal_id_isSet = !json[QString("proposalId")].isNull() && m_proposal_id_isValid;

    m_seller_contacts_isValid = ::OpenAPI::fromJsonValue(m_seller_contacts, json[QString("sellerContacts")]);
    m_seller_contacts_isSet = !json[QString("sellerContacts")].isNull() && m_seller_contacts_isValid;

    m_shared_targetings_isValid = ::OpenAPI::fromJsonValue(m_shared_targetings, json[QString("sharedTargetings")]);
    m_shared_targetings_isSet = !json[QString("sharedTargetings")].isNull() && m_shared_targetings_isValid;

    m_syndication_product_isValid = ::OpenAPI::fromJsonValue(m_syndication_product, json[QString("syndicationProduct")]);
    m_syndication_product_isSet = !json[QString("syndicationProduct")].isNull() && m_syndication_product_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_web_property_code_isValid = ::OpenAPI::fromJsonValue(m_web_property_code, json[QString("webPropertyCode")]);
    m_web_property_code_isSet = !json[QString("webPropertyCode")].isNull() && m_web_property_code_isValid;
}

QString OAIMarketplaceDeal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplaceDeal::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer_private_data.isSet()) {
        obj.insert(QString("buyerPrivateData"), ::OpenAPI::toJsonValue(m_buyer_private_data));
    }
    if (m_creation_time_ms_isSet) {
        obj.insert(QString("creationTimeMs"), ::OpenAPI::toJsonValue(m_creation_time_ms));
    }
    if (m_creative_pre_approval_policy_isSet) {
        obj.insert(QString("creativePreApprovalPolicy"), ::OpenAPI::toJsonValue(m_creative_pre_approval_policy));
    }
    if (m_creative_safe_frame_compatibility_isSet) {
        obj.insert(QString("creativeSafeFrameCompatibility"), ::OpenAPI::toJsonValue(m_creative_safe_frame_compatibility));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_deal_serving_metadata.isSet()) {
        obj.insert(QString("dealServingMetadata"), ::OpenAPI::toJsonValue(m_deal_serving_metadata));
    }
    if (m_delivery_control.isSet()) {
        obj.insert(QString("deliveryControl"), ::OpenAPI::toJsonValue(m_delivery_control));
    }
    if (m_external_deal_id_isSet) {
        obj.insert(QString("externalDealId"), ::OpenAPI::toJsonValue(m_external_deal_id));
    }
    if (m_flight_end_time_ms_isSet) {
        obj.insert(QString("flightEndTimeMs"), ::OpenAPI::toJsonValue(m_flight_end_time_ms));
    }
    if (m_flight_start_time_ms_isSet) {
        obj.insert(QString("flightStartTimeMs"), ::OpenAPI::toJsonValue(m_flight_start_time_ms));
    }
    if (m_inventory_description_isSet) {
        obj.insert(QString("inventoryDescription"), ::OpenAPI::toJsonValue(m_inventory_description));
    }
    if (m_is_rfp_template_isSet) {
        obj.insert(QString("isRfpTemplate"), ::OpenAPI::toJsonValue(m_is_rfp_template));
    }
    if (m_is_setup_complete_isSet) {
        obj.insert(QString("isSetupComplete"), ::OpenAPI::toJsonValue(m_is_setup_complete));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_update_time_ms_isSet) {
        obj.insert(QString("lastUpdateTimeMs"), ::OpenAPI::toJsonValue(m_last_update_time_ms));
    }
    if (m_makegood_requested_reason_isSet) {
        obj.insert(QString("makegoodRequestedReason"), ::OpenAPI::toJsonValue(m_makegood_requested_reason));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_revision_number_isSet) {
        obj.insert(QString("productRevisionNumber"), ::OpenAPI::toJsonValue(m_product_revision_number));
    }
    if (m_programmatic_creative_source_isSet) {
        obj.insert(QString("programmaticCreativeSource"), ::OpenAPI::toJsonValue(m_programmatic_creative_source));
    }
    if (m_proposal_id_isSet) {
        obj.insert(QString("proposalId"), ::OpenAPI::toJsonValue(m_proposal_id));
    }
    if (m_seller_contacts.size() > 0) {
        obj.insert(QString("sellerContacts"), ::OpenAPI::toJsonValue(m_seller_contacts));
    }
    if (m_shared_targetings.size() > 0) {
        obj.insert(QString("sharedTargetings"), ::OpenAPI::toJsonValue(m_shared_targetings));
    }
    if (m_syndication_product_isSet) {
        obj.insert(QString("syndicationProduct"), ::OpenAPI::toJsonValue(m_syndication_product));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_web_property_code_isSet) {
        obj.insert(QString("webPropertyCode"), ::OpenAPI::toJsonValue(m_web_property_code));
    }
    return obj;
}

OAIPrivateData OAIMarketplaceDeal::getBuyerPrivateData() const {
    return m_buyer_private_data;
}
void OAIMarketplaceDeal::setBuyerPrivateData(const OAIPrivateData &buyer_private_data) {
    m_buyer_private_data = buyer_private_data;
    m_buyer_private_data_isSet = true;
}

bool OAIMarketplaceDeal::is_buyer_private_data_Set() const{
    return m_buyer_private_data_isSet;
}

bool OAIMarketplaceDeal::is_buyer_private_data_Valid() const{
    return m_buyer_private_data_isValid;
}

QString OAIMarketplaceDeal::getCreationTimeMs() const {
    return m_creation_time_ms;
}
void OAIMarketplaceDeal::setCreationTimeMs(const QString &creation_time_ms) {
    m_creation_time_ms = creation_time_ms;
    m_creation_time_ms_isSet = true;
}

bool OAIMarketplaceDeal::is_creation_time_ms_Set() const{
    return m_creation_time_ms_isSet;
}

bool OAIMarketplaceDeal::is_creation_time_ms_Valid() const{
    return m_creation_time_ms_isValid;
}

QString OAIMarketplaceDeal::getCreativePreApprovalPolicy() const {
    return m_creative_pre_approval_policy;
}
void OAIMarketplaceDeal::setCreativePreApprovalPolicy(const QString &creative_pre_approval_policy) {
    m_creative_pre_approval_policy = creative_pre_approval_policy;
    m_creative_pre_approval_policy_isSet = true;
}

bool OAIMarketplaceDeal::is_creative_pre_approval_policy_Set() const{
    return m_creative_pre_approval_policy_isSet;
}

bool OAIMarketplaceDeal::is_creative_pre_approval_policy_Valid() const{
    return m_creative_pre_approval_policy_isValid;
}

QString OAIMarketplaceDeal::getCreativeSafeFrameCompatibility() const {
    return m_creative_safe_frame_compatibility;
}
void OAIMarketplaceDeal::setCreativeSafeFrameCompatibility(const QString &creative_safe_frame_compatibility) {
    m_creative_safe_frame_compatibility = creative_safe_frame_compatibility;
    m_creative_safe_frame_compatibility_isSet = true;
}

bool OAIMarketplaceDeal::is_creative_safe_frame_compatibility_Set() const{
    return m_creative_safe_frame_compatibility_isSet;
}

bool OAIMarketplaceDeal::is_creative_safe_frame_compatibility_Valid() const{
    return m_creative_safe_frame_compatibility_isValid;
}

QString OAIMarketplaceDeal::getDealId() const {
    return m_deal_id;
}
void OAIMarketplaceDeal::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIMarketplaceDeal::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIMarketplaceDeal::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

OAIDealServingMetadata OAIMarketplaceDeal::getDealServingMetadata() const {
    return m_deal_serving_metadata;
}
void OAIMarketplaceDeal::setDealServingMetadata(const OAIDealServingMetadata &deal_serving_metadata) {
    m_deal_serving_metadata = deal_serving_metadata;
    m_deal_serving_metadata_isSet = true;
}

bool OAIMarketplaceDeal::is_deal_serving_metadata_Set() const{
    return m_deal_serving_metadata_isSet;
}

bool OAIMarketplaceDeal::is_deal_serving_metadata_Valid() const{
    return m_deal_serving_metadata_isValid;
}

OAIDeliveryControl OAIMarketplaceDeal::getDeliveryControl() const {
    return m_delivery_control;
}
void OAIMarketplaceDeal::setDeliveryControl(const OAIDeliveryControl &delivery_control) {
    m_delivery_control = delivery_control;
    m_delivery_control_isSet = true;
}

bool OAIMarketplaceDeal::is_delivery_control_Set() const{
    return m_delivery_control_isSet;
}

bool OAIMarketplaceDeal::is_delivery_control_Valid() const{
    return m_delivery_control_isValid;
}

QString OAIMarketplaceDeal::getExternalDealId() const {
    return m_external_deal_id;
}
void OAIMarketplaceDeal::setExternalDealId(const QString &external_deal_id) {
    m_external_deal_id = external_deal_id;
    m_external_deal_id_isSet = true;
}

bool OAIMarketplaceDeal::is_external_deal_id_Set() const{
    return m_external_deal_id_isSet;
}

bool OAIMarketplaceDeal::is_external_deal_id_Valid() const{
    return m_external_deal_id_isValid;
}

QString OAIMarketplaceDeal::getFlightEndTimeMs() const {
    return m_flight_end_time_ms;
}
void OAIMarketplaceDeal::setFlightEndTimeMs(const QString &flight_end_time_ms) {
    m_flight_end_time_ms = flight_end_time_ms;
    m_flight_end_time_ms_isSet = true;
}

bool OAIMarketplaceDeal::is_flight_end_time_ms_Set() const{
    return m_flight_end_time_ms_isSet;
}

bool OAIMarketplaceDeal::is_flight_end_time_ms_Valid() const{
    return m_flight_end_time_ms_isValid;
}

QString OAIMarketplaceDeal::getFlightStartTimeMs() const {
    return m_flight_start_time_ms;
}
void OAIMarketplaceDeal::setFlightStartTimeMs(const QString &flight_start_time_ms) {
    m_flight_start_time_ms = flight_start_time_ms;
    m_flight_start_time_ms_isSet = true;
}

bool OAIMarketplaceDeal::is_flight_start_time_ms_Set() const{
    return m_flight_start_time_ms_isSet;
}

bool OAIMarketplaceDeal::is_flight_start_time_ms_Valid() const{
    return m_flight_start_time_ms_isValid;
}

QString OAIMarketplaceDeal::getInventoryDescription() const {
    return m_inventory_description;
}
void OAIMarketplaceDeal::setInventoryDescription(const QString &inventory_description) {
    m_inventory_description = inventory_description;
    m_inventory_description_isSet = true;
}

bool OAIMarketplaceDeal::is_inventory_description_Set() const{
    return m_inventory_description_isSet;
}

bool OAIMarketplaceDeal::is_inventory_description_Valid() const{
    return m_inventory_description_isValid;
}

bool OAIMarketplaceDeal::isIsRfpTemplate() const {
    return m_is_rfp_template;
}
void OAIMarketplaceDeal::setIsRfpTemplate(const bool &is_rfp_template) {
    m_is_rfp_template = is_rfp_template;
    m_is_rfp_template_isSet = true;
}

bool OAIMarketplaceDeal::is_is_rfp_template_Set() const{
    return m_is_rfp_template_isSet;
}

bool OAIMarketplaceDeal::is_is_rfp_template_Valid() const{
    return m_is_rfp_template_isValid;
}

bool OAIMarketplaceDeal::isIsSetupComplete() const {
    return m_is_setup_complete;
}
void OAIMarketplaceDeal::setIsSetupComplete(const bool &is_setup_complete) {
    m_is_setup_complete = is_setup_complete;
    m_is_setup_complete_isSet = true;
}

bool OAIMarketplaceDeal::is_is_setup_complete_Set() const{
    return m_is_setup_complete_isSet;
}

bool OAIMarketplaceDeal::is_is_setup_complete_Valid() const{
    return m_is_setup_complete_isValid;
}

QString OAIMarketplaceDeal::getKind() const {
    return m_kind;
}
void OAIMarketplaceDeal::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMarketplaceDeal::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMarketplaceDeal::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIMarketplaceDeal::getLastUpdateTimeMs() const {
    return m_last_update_time_ms;
}
void OAIMarketplaceDeal::setLastUpdateTimeMs(const QString &last_update_time_ms) {
    m_last_update_time_ms = last_update_time_ms;
    m_last_update_time_ms_isSet = true;
}

bool OAIMarketplaceDeal::is_last_update_time_ms_Set() const{
    return m_last_update_time_ms_isSet;
}

bool OAIMarketplaceDeal::is_last_update_time_ms_Valid() const{
    return m_last_update_time_ms_isValid;
}

QString OAIMarketplaceDeal::getMakegoodRequestedReason() const {
    return m_makegood_requested_reason;
}
void OAIMarketplaceDeal::setMakegoodRequestedReason(const QString &makegood_requested_reason) {
    m_makegood_requested_reason = makegood_requested_reason;
    m_makegood_requested_reason_isSet = true;
}

bool OAIMarketplaceDeal::is_makegood_requested_reason_Set() const{
    return m_makegood_requested_reason_isSet;
}

bool OAIMarketplaceDeal::is_makegood_requested_reason_Valid() const{
    return m_makegood_requested_reason_isValid;
}

QString OAIMarketplaceDeal::getName() const {
    return m_name;
}
void OAIMarketplaceDeal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarketplaceDeal::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarketplaceDeal::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMarketplaceDeal::getProductId() const {
    return m_product_id;
}
void OAIMarketplaceDeal::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIMarketplaceDeal::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIMarketplaceDeal::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIMarketplaceDeal::getProductRevisionNumber() const {
    return m_product_revision_number;
}
void OAIMarketplaceDeal::setProductRevisionNumber(const QString &product_revision_number) {
    m_product_revision_number = product_revision_number;
    m_product_revision_number_isSet = true;
}

bool OAIMarketplaceDeal::is_product_revision_number_Set() const{
    return m_product_revision_number_isSet;
}

bool OAIMarketplaceDeal::is_product_revision_number_Valid() const{
    return m_product_revision_number_isValid;
}

QString OAIMarketplaceDeal::getProgrammaticCreativeSource() const {
    return m_programmatic_creative_source;
}
void OAIMarketplaceDeal::setProgrammaticCreativeSource(const QString &programmatic_creative_source) {
    m_programmatic_creative_source = programmatic_creative_source;
    m_programmatic_creative_source_isSet = true;
}

bool OAIMarketplaceDeal::is_programmatic_creative_source_Set() const{
    return m_programmatic_creative_source_isSet;
}

bool OAIMarketplaceDeal::is_programmatic_creative_source_Valid() const{
    return m_programmatic_creative_source_isValid;
}

QString OAIMarketplaceDeal::getProposalId() const {
    return m_proposal_id;
}
void OAIMarketplaceDeal::setProposalId(const QString &proposal_id) {
    m_proposal_id = proposal_id;
    m_proposal_id_isSet = true;
}

bool OAIMarketplaceDeal::is_proposal_id_Set() const{
    return m_proposal_id_isSet;
}

bool OAIMarketplaceDeal::is_proposal_id_Valid() const{
    return m_proposal_id_isValid;
}

QList<OAIContactInformation> OAIMarketplaceDeal::getSellerContacts() const {
    return m_seller_contacts;
}
void OAIMarketplaceDeal::setSellerContacts(const QList<OAIContactInformation> &seller_contacts) {
    m_seller_contacts = seller_contacts;
    m_seller_contacts_isSet = true;
}

bool OAIMarketplaceDeal::is_seller_contacts_Set() const{
    return m_seller_contacts_isSet;
}

bool OAIMarketplaceDeal::is_seller_contacts_Valid() const{
    return m_seller_contacts_isValid;
}

QList<OAISharedTargeting> OAIMarketplaceDeal::getSharedTargetings() const {
    return m_shared_targetings;
}
void OAIMarketplaceDeal::setSharedTargetings(const QList<OAISharedTargeting> &shared_targetings) {
    m_shared_targetings = shared_targetings;
    m_shared_targetings_isSet = true;
}

bool OAIMarketplaceDeal::is_shared_targetings_Set() const{
    return m_shared_targetings_isSet;
}

bool OAIMarketplaceDeal::is_shared_targetings_Valid() const{
    return m_shared_targetings_isValid;
}

QString OAIMarketplaceDeal::getSyndicationProduct() const {
    return m_syndication_product;
}
void OAIMarketplaceDeal::setSyndicationProduct(const QString &syndication_product) {
    m_syndication_product = syndication_product;
    m_syndication_product_isSet = true;
}

bool OAIMarketplaceDeal::is_syndication_product_Set() const{
    return m_syndication_product_isSet;
}

bool OAIMarketplaceDeal::is_syndication_product_Valid() const{
    return m_syndication_product_isValid;
}

OAIDealTerms OAIMarketplaceDeal::getTerms() const {
    return m_terms;
}
void OAIMarketplaceDeal::setTerms(const OAIDealTerms &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIMarketplaceDeal::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIMarketplaceDeal::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIMarketplaceDeal::getWebPropertyCode() const {
    return m_web_property_code;
}
void OAIMarketplaceDeal::setWebPropertyCode(const QString &web_property_code) {
    m_web_property_code = web_property_code;
    m_web_property_code_isSet = true;
}

bool OAIMarketplaceDeal::is_web_property_code_Set() const{
    return m_web_property_code_isSet;
}

bool OAIMarketplaceDeal::is_web_property_code_Valid() const{
    return m_web_property_code_isValid;
}

bool OAIMarketplaceDeal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer_private_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_pre_approval_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_safe_frame_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_serving_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_end_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_start_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rfp_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_setup_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_makegood_requested_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_creative_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_targetings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_syndication_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_property_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplaceDeal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
