/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplaceNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplaceNote::OAIMarketplaceNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplaceNote::OAIMarketplaceNote() {
    this->initializeModel();
}

OAIMarketplaceNote::~OAIMarketplaceNote() {}

void OAIMarketplaceNote::initializeModel() {

    m_creator_role_isSet = false;
    m_creator_role_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_note_id_isSet = false;
    m_note_id_isValid = false;

    m_proposal_id_isSet = false;
    m_proposal_id_isValid = false;

    m_proposal_revision_number_isSet = false;
    m_proposal_revision_number_isValid = false;

    m_timestamp_ms_isSet = false;
    m_timestamp_ms_isValid = false;
}

void OAIMarketplaceNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplaceNote::fromJsonObject(QJsonObject json) {

    m_creator_role_isValid = ::OpenAPI::fromJsonValue(m_creator_role, json[QString("creatorRole")]);
    m_creator_role_isSet = !json[QString("creatorRole")].isNull() && m_creator_role_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_note_id_isValid = ::OpenAPI::fromJsonValue(m_note_id, json[QString("noteId")]);
    m_note_id_isSet = !json[QString("noteId")].isNull() && m_note_id_isValid;

    m_proposal_id_isValid = ::OpenAPI::fromJsonValue(m_proposal_id, json[QString("proposalId")]);
    m_proposal_id_isSet = !json[QString("proposalId")].isNull() && m_proposal_id_isValid;

    m_proposal_revision_number_isValid = ::OpenAPI::fromJsonValue(m_proposal_revision_number, json[QString("proposalRevisionNumber")]);
    m_proposal_revision_number_isSet = !json[QString("proposalRevisionNumber")].isNull() && m_proposal_revision_number_isValid;

    m_timestamp_ms_isValid = ::OpenAPI::fromJsonValue(m_timestamp_ms, json[QString("timestampMs")]);
    m_timestamp_ms_isSet = !json[QString("timestampMs")].isNull() && m_timestamp_ms_isValid;
}

QString OAIMarketplaceNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplaceNote::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_role_isSet) {
        obj.insert(QString("creatorRole"), ::OpenAPI::toJsonValue(m_creator_role));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_note_id_isSet) {
        obj.insert(QString("noteId"), ::OpenAPI::toJsonValue(m_note_id));
    }
    if (m_proposal_id_isSet) {
        obj.insert(QString("proposalId"), ::OpenAPI::toJsonValue(m_proposal_id));
    }
    if (m_proposal_revision_number_isSet) {
        obj.insert(QString("proposalRevisionNumber"), ::OpenAPI::toJsonValue(m_proposal_revision_number));
    }
    if (m_timestamp_ms_isSet) {
        obj.insert(QString("timestampMs"), ::OpenAPI::toJsonValue(m_timestamp_ms));
    }
    return obj;
}

QString OAIMarketplaceNote::getCreatorRole() const {
    return m_creator_role;
}
void OAIMarketplaceNote::setCreatorRole(const QString &creator_role) {
    m_creator_role = creator_role;
    m_creator_role_isSet = true;
}

bool OAIMarketplaceNote::is_creator_role_Set() const{
    return m_creator_role_isSet;
}

bool OAIMarketplaceNote::is_creator_role_Valid() const{
    return m_creator_role_isValid;
}

QString OAIMarketplaceNote::getDealId() const {
    return m_deal_id;
}
void OAIMarketplaceNote::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIMarketplaceNote::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIMarketplaceNote::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

QString OAIMarketplaceNote::getKind() const {
    return m_kind;
}
void OAIMarketplaceNote::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMarketplaceNote::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMarketplaceNote::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIMarketplaceNote::getNote() const {
    return m_note;
}
void OAIMarketplaceNote::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIMarketplaceNote::is_note_Set() const{
    return m_note_isSet;
}

bool OAIMarketplaceNote::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIMarketplaceNote::getNoteId() const {
    return m_note_id;
}
void OAIMarketplaceNote::setNoteId(const QString &note_id) {
    m_note_id = note_id;
    m_note_id_isSet = true;
}

bool OAIMarketplaceNote::is_note_id_Set() const{
    return m_note_id_isSet;
}

bool OAIMarketplaceNote::is_note_id_Valid() const{
    return m_note_id_isValid;
}

QString OAIMarketplaceNote::getProposalId() const {
    return m_proposal_id;
}
void OAIMarketplaceNote::setProposalId(const QString &proposal_id) {
    m_proposal_id = proposal_id;
    m_proposal_id_isSet = true;
}

bool OAIMarketplaceNote::is_proposal_id_Set() const{
    return m_proposal_id_isSet;
}

bool OAIMarketplaceNote::is_proposal_id_Valid() const{
    return m_proposal_id_isValid;
}

QString OAIMarketplaceNote::getProposalRevisionNumber() const {
    return m_proposal_revision_number;
}
void OAIMarketplaceNote::setProposalRevisionNumber(const QString &proposal_revision_number) {
    m_proposal_revision_number = proposal_revision_number;
    m_proposal_revision_number_isSet = true;
}

bool OAIMarketplaceNote::is_proposal_revision_number_Set() const{
    return m_proposal_revision_number_isSet;
}

bool OAIMarketplaceNote::is_proposal_revision_number_Valid() const{
    return m_proposal_revision_number_isValid;
}

QString OAIMarketplaceNote::getTimestampMs() const {
    return m_timestamp_ms;
}
void OAIMarketplaceNote::setTimestampMs(const QString &timestamp_ms) {
    m_timestamp_ms = timestamp_ms;
    m_timestamp_ms_isSet = true;
}

bool OAIMarketplaceNote::is_timestamp_ms_Set() const{
    return m_timestamp_ms_isSet;
}

bool OAIMarketplaceNote::is_timestamp_ms_Valid() const{
    return m_timestamp_ms_isValid;
}

bool OAIMarketplaceNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplaceNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
