/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimension::OAIDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimension::OAIDimension() {
    this->initializeModel();
}

OAIDimension::~OAIDimension() {}

void OAIDimension::initializeModel() {

    m_dimension_type_isSet = false;
    m_dimension_type_isValid = false;

    m_dimension_values_isSet = false;
    m_dimension_values_isValid = false;
}

void OAIDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimension::fromJsonObject(QJsonObject json) {

    m_dimension_type_isValid = ::OpenAPI::fromJsonValue(m_dimension_type, json[QString("dimensionType")]);
    m_dimension_type_isSet = !json[QString("dimensionType")].isNull() && m_dimension_type_isValid;

    m_dimension_values_isValid = ::OpenAPI::fromJsonValue(m_dimension_values, json[QString("dimensionValues")]);
    m_dimension_values_isSet = !json[QString("dimensionValues")].isNull() && m_dimension_values_isValid;
}

QString OAIDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_type_isSet) {
        obj.insert(QString("dimensionType"), ::OpenAPI::toJsonValue(m_dimension_type));
    }
    if (m_dimension_values.size() > 0) {
        obj.insert(QString("dimensionValues"), ::OpenAPI::toJsonValue(m_dimension_values));
    }
    return obj;
}

QString OAIDimension::getDimensionType() const {
    return m_dimension_type;
}
void OAIDimension::setDimensionType(const QString &dimension_type) {
    m_dimension_type = dimension_type;
    m_dimension_type_isSet = true;
}

bool OAIDimension::is_dimension_type_Set() const{
    return m_dimension_type_isSet;
}

bool OAIDimension::is_dimension_type_Valid() const{
    return m_dimension_type_isValid;
}

QList<OAIDimensionDimensionValue> OAIDimension::getDimensionValues() const {
    return m_dimension_values;
}
void OAIDimension::setDimensionValues(const QList<OAIDimensionDimensionValue> &dimension_values) {
    m_dimension_values = dimension_values;
    m_dimension_values_isSet = true;
}

bool OAIDimension::is_dimension_values_Set() const{
    return m_dimension_values_isSet;
}

bool OAIDimension::is_dimension_values_Valid() const{
    return m_dimension_values_isValid;
}

bool OAIDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
