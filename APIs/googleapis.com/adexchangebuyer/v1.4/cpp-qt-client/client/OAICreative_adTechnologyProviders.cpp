/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative_adTechnologyProviders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative_adTechnologyProviders::OAICreative_adTechnologyProviders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative_adTechnologyProviders::OAICreative_adTechnologyProviders() {
    this->initializeModel();
}

OAICreative_adTechnologyProviders::~OAICreative_adTechnologyProviders() {}

void OAICreative_adTechnologyProviders::initializeModel() {

    m_detected_provider_ids_isSet = false;
    m_detected_provider_ids_isValid = false;

    m_has_unidentified_provider_isSet = false;
    m_has_unidentified_provider_isValid = false;
}

void OAICreative_adTechnologyProviders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative_adTechnologyProviders::fromJsonObject(QJsonObject json) {

    m_detected_provider_ids_isValid = ::OpenAPI::fromJsonValue(m_detected_provider_ids, json[QString("detectedProviderIds")]);
    m_detected_provider_ids_isSet = !json[QString("detectedProviderIds")].isNull() && m_detected_provider_ids_isValid;

    m_has_unidentified_provider_isValid = ::OpenAPI::fromJsonValue(m_has_unidentified_provider, json[QString("hasUnidentifiedProvider")]);
    m_has_unidentified_provider_isSet = !json[QString("hasUnidentifiedProvider")].isNull() && m_has_unidentified_provider_isValid;
}

QString OAICreative_adTechnologyProviders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative_adTechnologyProviders::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_provider_ids.size() > 0) {
        obj.insert(QString("detectedProviderIds"), ::OpenAPI::toJsonValue(m_detected_provider_ids));
    }
    if (m_has_unidentified_provider_isSet) {
        obj.insert(QString("hasUnidentifiedProvider"), ::OpenAPI::toJsonValue(m_has_unidentified_provider));
    }
    return obj;
}

QList<QString> OAICreative_adTechnologyProviders::getDetectedProviderIds() const {
    return m_detected_provider_ids;
}
void OAICreative_adTechnologyProviders::setDetectedProviderIds(const QList<QString> &detected_provider_ids) {
    m_detected_provider_ids = detected_provider_ids;
    m_detected_provider_ids_isSet = true;
}

bool OAICreative_adTechnologyProviders::is_detected_provider_ids_Set() const{
    return m_detected_provider_ids_isSet;
}

bool OAICreative_adTechnologyProviders::is_detected_provider_ids_Valid() const{
    return m_detected_provider_ids_isValid;
}

bool OAICreative_adTechnologyProviders::isHasUnidentifiedProvider() const {
    return m_has_unidentified_provider;
}
void OAICreative_adTechnologyProviders::setHasUnidentifiedProvider(const bool &has_unidentified_provider) {
    m_has_unidentified_provider = has_unidentified_provider;
    m_has_unidentified_provider_isSet = true;
}

bool OAICreative_adTechnologyProviders::is_has_unidentified_provider_Set() const{
    return m_has_unidentified_provider_isSet;
}

bool OAICreative_adTechnologyProviders::is_has_unidentified_provider_Valid() const{
    return m_has_unidentified_provider_isValid;
}

bool OAICreative_adTechnologyProviders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_provider_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_unidentified_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative_adTechnologyProviders::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
