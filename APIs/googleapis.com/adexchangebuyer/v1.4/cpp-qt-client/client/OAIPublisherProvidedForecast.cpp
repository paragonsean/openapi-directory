/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublisherProvidedForecast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublisherProvidedForecast::OAIPublisherProvidedForecast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublisherProvidedForecast::OAIPublisherProvidedForecast() {
    this->initializeModel();
}

OAIPublisherProvidedForecast::~OAIPublisherProvidedForecast() {}

void OAIPublisherProvidedForecast::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_weekly_impressions_isSet = false;
    m_weekly_impressions_isValid = false;

    m_weekly_uniques_isSet = false;
    m_weekly_uniques_isValid = false;
}

void OAIPublisherProvidedForecast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublisherProvidedForecast::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_weekly_impressions_isValid = ::OpenAPI::fromJsonValue(m_weekly_impressions, json[QString("weeklyImpressions")]);
    m_weekly_impressions_isSet = !json[QString("weeklyImpressions")].isNull() && m_weekly_impressions_isValid;

    m_weekly_uniques_isValid = ::OpenAPI::fromJsonValue(m_weekly_uniques, json[QString("weeklyUniques")]);
    m_weekly_uniques_isSet = !json[QString("weeklyUniques")].isNull() && m_weekly_uniques_isValid;
}

QString OAIPublisherProvidedForecast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublisherProvidedForecast::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_weekly_impressions_isSet) {
        obj.insert(QString("weeklyImpressions"), ::OpenAPI::toJsonValue(m_weekly_impressions));
    }
    if (m_weekly_uniques_isSet) {
        obj.insert(QString("weeklyUniques"), ::OpenAPI::toJsonValue(m_weekly_uniques));
    }
    return obj;
}

QList<OAIDimension> OAIPublisherProvidedForecast::getDimensions() const {
    return m_dimensions;
}
void OAIPublisherProvidedForecast::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPublisherProvidedForecast::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPublisherProvidedForecast::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIPublisherProvidedForecast::getWeeklyImpressions() const {
    return m_weekly_impressions;
}
void OAIPublisherProvidedForecast::setWeeklyImpressions(const QString &weekly_impressions) {
    m_weekly_impressions = weekly_impressions;
    m_weekly_impressions_isSet = true;
}

bool OAIPublisherProvidedForecast::is_weekly_impressions_Set() const{
    return m_weekly_impressions_isSet;
}

bool OAIPublisherProvidedForecast::is_weekly_impressions_Valid() const{
    return m_weekly_impressions_isValid;
}

QString OAIPublisherProvidedForecast::getWeeklyUniques() const {
    return m_weekly_uniques;
}
void OAIPublisherProvidedForecast::setWeeklyUniques(const QString &weekly_uniques) {
    m_weekly_uniques = weekly_uniques;
    m_weekly_uniques_isSet = true;
}

bool OAIPublisherProvidedForecast::is_weekly_uniques_Set() const{
    return m_weekly_uniques_isSet;
}

bool OAIPublisherProvidedForecast::is_weekly_uniques_Valid() const{
    return m_weekly_uniques_isValid;
}

bool OAIPublisherProvidedForecast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_uniques_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublisherProvidedForecast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
