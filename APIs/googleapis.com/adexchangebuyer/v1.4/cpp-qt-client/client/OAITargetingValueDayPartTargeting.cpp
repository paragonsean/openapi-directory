/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingValueDayPartTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingValueDayPartTargeting::OAITargetingValueDayPartTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingValueDayPartTargeting::OAITargetingValueDayPartTargeting() {
    this->initializeModel();
}

OAITargetingValueDayPartTargeting::~OAITargetingValueDayPartTargeting() {}

void OAITargetingValueDayPartTargeting::initializeModel() {

    m_day_parts_isSet = false;
    m_day_parts_isValid = false;

    m_time_zone_type_isSet = false;
    m_time_zone_type_isValid = false;
}

void OAITargetingValueDayPartTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingValueDayPartTargeting::fromJsonObject(QJsonObject json) {

    m_day_parts_isValid = ::OpenAPI::fromJsonValue(m_day_parts, json[QString("dayParts")]);
    m_day_parts_isSet = !json[QString("dayParts")].isNull() && m_day_parts_isValid;

    m_time_zone_type_isValid = ::OpenAPI::fromJsonValue(m_time_zone_type, json[QString("timeZoneType")]);
    m_time_zone_type_isSet = !json[QString("timeZoneType")].isNull() && m_time_zone_type_isValid;
}

QString OAITargetingValueDayPartTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingValueDayPartTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_day_parts.size() > 0) {
        obj.insert(QString("dayParts"), ::OpenAPI::toJsonValue(m_day_parts));
    }
    if (m_time_zone_type_isSet) {
        obj.insert(QString("timeZoneType"), ::OpenAPI::toJsonValue(m_time_zone_type));
    }
    return obj;
}

QList<OAITargetingValueDayPartTargetingDayPart> OAITargetingValueDayPartTargeting::getDayParts() const {
    return m_day_parts;
}
void OAITargetingValueDayPartTargeting::setDayParts(const QList<OAITargetingValueDayPartTargetingDayPart> &day_parts) {
    m_day_parts = day_parts;
    m_day_parts_isSet = true;
}

bool OAITargetingValueDayPartTargeting::is_day_parts_Set() const{
    return m_day_parts_isSet;
}

bool OAITargetingValueDayPartTargeting::is_day_parts_Valid() const{
    return m_day_parts_isValid;
}

QString OAITargetingValueDayPartTargeting::getTimeZoneType() const {
    return m_time_zone_type;
}
void OAITargetingValueDayPartTargeting::setTimeZoneType(const QString &time_zone_type) {
    m_time_zone_type = time_zone_type;
    m_time_zone_type_isSet = true;
}

bool OAITargetingValueDayPartTargeting::is_time_zone_type_Set() const{
    return m_time_zone_type_isSet;
}

bool OAITargetingValueDayPartTargeting::is_time_zone_type_Valid() const{
    return m_time_zone_type_isValid;
}

bool OAITargetingValueDayPartTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingValueDayPartTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
