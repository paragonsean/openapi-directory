/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProposalsApi_H
#define OAI_OAIProposalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrdersRequest.h"
#include "OAICreateOrdersResponse.h"
#include "OAIGetOrdersResponse.h"
#include "OAIProposal.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProposalsApi : public QObject {
    Q_OBJECT

public:
    OAIProposalsApi(const int timeOut = 0);
    ~OAIProposalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proposal_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void adexchangebuyer_proposals_get(const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_create_orders_request OAICreateOrdersRequest [optional]
    */
    virtual void adexchangebuyer_proposals_insert(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateOrdersRequest> &oai_create_orders_request = ::OpenAPI::OptionalParam<OAICreateOrdersRequest>());

    /**
    * @param[in]  proposal_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  update_action QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_proposal OAIProposal [optional]
    */
    virtual void adexchangebuyer_proposals_patch(const QString &proposal_id, const QString &revision_number, const QString &update_action, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProposal> &oai_proposal = ::OpenAPI::OptionalParam<OAIProposal>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  pql_query QString [optional]
    */
    virtual void adexchangebuyer_proposals_search(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pql_query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  proposal_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void adexchangebuyer_proposals_setupcomplete(const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  proposal_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  update_action QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_proposal OAIProposal [optional]
    */
    virtual void adexchangebuyer_proposals_update(const QString &proposal_id, const QString &revision_number, const QString &update_action, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProposal> &oai_proposal = ::OpenAPI::OptionalParam<OAIProposal>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adexchangebuyer_proposals_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer_proposals_insertCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer_proposals_patchCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer_proposals_searchCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer_proposals_setupcompleteCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer_proposals_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adexchangebuyer_proposals_getSignal(OAIProposal summary);
    void adexchangebuyer_proposals_insertSignal(OAICreateOrdersResponse summary);
    void adexchangebuyer_proposals_patchSignal(OAIProposal summary);
    void adexchangebuyer_proposals_searchSignal(OAIGetOrdersResponse summary);
    void adexchangebuyer_proposals_setupcompleteSignal();
    void adexchangebuyer_proposals_updateSignal(OAIProposal summary);


    void adexchangebuyer_proposals_getSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer_proposals_insertSignalFull(OAIHttpRequestWorker *worker, OAICreateOrdersResponse summary);
    void adexchangebuyer_proposals_patchSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer_proposals_searchSignalFull(OAIHttpRequestWorker *worker, OAIGetOrdersResponse summary);
    void adexchangebuyer_proposals_setupcompleteSignalFull(OAIHttpRequestWorker *worker);
    void adexchangebuyer_proposals_updateSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);

    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_getSignalError() instead")
    void adexchangebuyer_proposals_getSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_getSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_insertSignalError() instead")
    void adexchangebuyer_proposals_insertSignalE(OAICreateOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_insertSignalError(OAICreateOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_patchSignalError() instead")
    void adexchangebuyer_proposals_patchSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_patchSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_searchSignalError() instead")
    void adexchangebuyer_proposals_searchSignalE(OAIGetOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_searchSignalError(OAIGetOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_setupcompleteSignalError() instead")
    void adexchangebuyer_proposals_setupcompleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_setupcompleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_updateSignalError() instead")
    void adexchangebuyer_proposals_updateSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_updateSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_getSignalErrorFull() instead")
    void adexchangebuyer_proposals_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_insertSignalErrorFull() instead")
    void adexchangebuyer_proposals_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_patchSignalErrorFull() instead")
    void adexchangebuyer_proposals_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_searchSignalErrorFull() instead")
    void adexchangebuyer_proposals_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_setupcompleteSignalErrorFull() instead")
    void adexchangebuyer_proposals_setupcompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_setupcompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer_proposals_updateSignalErrorFull() instead")
    void adexchangebuyer_proposals_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer_proposals_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
