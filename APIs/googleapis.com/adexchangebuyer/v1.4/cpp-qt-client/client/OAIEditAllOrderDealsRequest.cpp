/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditAllOrderDealsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditAllOrderDealsRequest::OAIEditAllOrderDealsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditAllOrderDealsRequest::OAIEditAllOrderDealsRequest() {
    this->initializeModel();
}

OAIEditAllOrderDealsRequest::~OAIEditAllOrderDealsRequest() {}

void OAIEditAllOrderDealsRequest::initializeModel() {

    m_deals_isSet = false;
    m_deals_isValid = false;

    m_proposal_isSet = false;
    m_proposal_isValid = false;

    m_proposal_revision_number_isSet = false;
    m_proposal_revision_number_isValid = false;

    m_update_action_isSet = false;
    m_update_action_isValid = false;
}

void OAIEditAllOrderDealsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditAllOrderDealsRequest::fromJsonObject(QJsonObject json) {

    m_deals_isValid = ::OpenAPI::fromJsonValue(m_deals, json[QString("deals")]);
    m_deals_isSet = !json[QString("deals")].isNull() && m_deals_isValid;

    m_proposal_isValid = ::OpenAPI::fromJsonValue(m_proposal, json[QString("proposal")]);
    m_proposal_isSet = !json[QString("proposal")].isNull() && m_proposal_isValid;

    m_proposal_revision_number_isValid = ::OpenAPI::fromJsonValue(m_proposal_revision_number, json[QString("proposalRevisionNumber")]);
    m_proposal_revision_number_isSet = !json[QString("proposalRevisionNumber")].isNull() && m_proposal_revision_number_isValid;

    m_update_action_isValid = ::OpenAPI::fromJsonValue(m_update_action, json[QString("updateAction")]);
    m_update_action_isSet = !json[QString("updateAction")].isNull() && m_update_action_isValid;
}

QString OAIEditAllOrderDealsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditAllOrderDealsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_deals.size() > 0) {
        obj.insert(QString("deals"), ::OpenAPI::toJsonValue(m_deals));
    }
    if (m_proposal.isSet()) {
        obj.insert(QString("proposal"), ::OpenAPI::toJsonValue(m_proposal));
    }
    if (m_proposal_revision_number_isSet) {
        obj.insert(QString("proposalRevisionNumber"), ::OpenAPI::toJsonValue(m_proposal_revision_number));
    }
    if (m_update_action_isSet) {
        obj.insert(QString("updateAction"), ::OpenAPI::toJsonValue(m_update_action));
    }
    return obj;
}

QList<OAIMarketplaceDeal> OAIEditAllOrderDealsRequest::getDeals() const {
    return m_deals;
}
void OAIEditAllOrderDealsRequest::setDeals(const QList<OAIMarketplaceDeal> &deals) {
    m_deals = deals;
    m_deals_isSet = true;
}

bool OAIEditAllOrderDealsRequest::is_deals_Set() const{
    return m_deals_isSet;
}

bool OAIEditAllOrderDealsRequest::is_deals_Valid() const{
    return m_deals_isValid;
}

OAIProposal OAIEditAllOrderDealsRequest::getProposal() const {
    return m_proposal;
}
void OAIEditAllOrderDealsRequest::setProposal(const OAIProposal &proposal) {
    m_proposal = proposal;
    m_proposal_isSet = true;
}

bool OAIEditAllOrderDealsRequest::is_proposal_Set() const{
    return m_proposal_isSet;
}

bool OAIEditAllOrderDealsRequest::is_proposal_Valid() const{
    return m_proposal_isValid;
}

QString OAIEditAllOrderDealsRequest::getProposalRevisionNumber() const {
    return m_proposal_revision_number;
}
void OAIEditAllOrderDealsRequest::setProposalRevisionNumber(const QString &proposal_revision_number) {
    m_proposal_revision_number = proposal_revision_number;
    m_proposal_revision_number_isSet = true;
}

bool OAIEditAllOrderDealsRequest::is_proposal_revision_number_Set() const{
    return m_proposal_revision_number_isSet;
}

bool OAIEditAllOrderDealsRequest::is_proposal_revision_number_Valid() const{
    return m_proposal_revision_number_isValid;
}

QString OAIEditAllOrderDealsRequest::getUpdateAction() const {
    return m_update_action;
}
void OAIEditAllOrderDealsRequest::setUpdateAction(const QString &update_action) {
    m_update_action = update_action;
    m_update_action_isSet = true;
}

bool OAIEditAllOrderDealsRequest::is_update_action_Set() const{
    return m_update_action_isSet;
}

bool OAIEditAllOrderDealsRequest::is_update_action_Valid() const{
    return m_update_action_isValid;
}

bool OAIEditAllOrderDealsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditAllOrderDealsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
