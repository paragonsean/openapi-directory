/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingValueDayPartTargetingDayPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingValueDayPartTargetingDayPart::OAITargetingValueDayPartTargetingDayPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingValueDayPartTargetingDayPart::OAITargetingValueDayPartTargetingDayPart() {
    this->initializeModel();
}

OAITargetingValueDayPartTargetingDayPart::~OAITargetingValueDayPartTargetingDayPart() {}

void OAITargetingValueDayPartTargetingDayPart::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_end_hour_isSet = false;
    m_end_hour_isValid = false;

    m_end_minute_isSet = false;
    m_end_minute_isValid = false;

    m_start_hour_isSet = false;
    m_start_hour_isValid = false;

    m_start_minute_isSet = false;
    m_start_minute_isValid = false;
}

void OAITargetingValueDayPartTargetingDayPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingValueDayPartTargetingDayPart::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_end_hour_isValid = ::OpenAPI::fromJsonValue(m_end_hour, json[QString("endHour")]);
    m_end_hour_isSet = !json[QString("endHour")].isNull() && m_end_hour_isValid;

    m_end_minute_isValid = ::OpenAPI::fromJsonValue(m_end_minute, json[QString("endMinute")]);
    m_end_minute_isSet = !json[QString("endMinute")].isNull() && m_end_minute_isValid;

    m_start_hour_isValid = ::OpenAPI::fromJsonValue(m_start_hour, json[QString("startHour")]);
    m_start_hour_isSet = !json[QString("startHour")].isNull() && m_start_hour_isValid;

    m_start_minute_isValid = ::OpenAPI::fromJsonValue(m_start_minute, json[QString("startMinute")]);
    m_start_minute_isSet = !json[QString("startMinute")].isNull() && m_start_minute_isValid;
}

QString OAITargetingValueDayPartTargetingDayPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingValueDayPartTargetingDayPart::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_end_hour_isSet) {
        obj.insert(QString("endHour"), ::OpenAPI::toJsonValue(m_end_hour));
    }
    if (m_end_minute_isSet) {
        obj.insert(QString("endMinute"), ::OpenAPI::toJsonValue(m_end_minute));
    }
    if (m_start_hour_isSet) {
        obj.insert(QString("startHour"), ::OpenAPI::toJsonValue(m_start_hour));
    }
    if (m_start_minute_isSet) {
        obj.insert(QString("startMinute"), ::OpenAPI::toJsonValue(m_start_minute));
    }
    return obj;
}

QString OAITargetingValueDayPartTargetingDayPart::getDayOfWeek() const {
    return m_day_of_week;
}
void OAITargetingValueDayPartTargetingDayPart::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAITargetingValueDayPartTargetingDayPart::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAITargetingValueDayPartTargetingDayPart::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAITargetingValueDayPartTargetingDayPart::getEndHour() const {
    return m_end_hour;
}
void OAITargetingValueDayPartTargetingDayPart::setEndHour(const qint32 &end_hour) {
    m_end_hour = end_hour;
    m_end_hour_isSet = true;
}

bool OAITargetingValueDayPartTargetingDayPart::is_end_hour_Set() const{
    return m_end_hour_isSet;
}

bool OAITargetingValueDayPartTargetingDayPart::is_end_hour_Valid() const{
    return m_end_hour_isValid;
}

qint32 OAITargetingValueDayPartTargetingDayPart::getEndMinute() const {
    return m_end_minute;
}
void OAITargetingValueDayPartTargetingDayPart::setEndMinute(const qint32 &end_minute) {
    m_end_minute = end_minute;
    m_end_minute_isSet = true;
}

bool OAITargetingValueDayPartTargetingDayPart::is_end_minute_Set() const{
    return m_end_minute_isSet;
}

bool OAITargetingValueDayPartTargetingDayPart::is_end_minute_Valid() const{
    return m_end_minute_isValid;
}

qint32 OAITargetingValueDayPartTargetingDayPart::getStartHour() const {
    return m_start_hour;
}
void OAITargetingValueDayPartTargetingDayPart::setStartHour(const qint32 &start_hour) {
    m_start_hour = start_hour;
    m_start_hour_isSet = true;
}

bool OAITargetingValueDayPartTargetingDayPart::is_start_hour_Set() const{
    return m_start_hour_isSet;
}

bool OAITargetingValueDayPartTargetingDayPart::is_start_hour_Valid() const{
    return m_start_hour_isValid;
}

qint32 OAITargetingValueDayPartTargetingDayPart::getStartMinute() const {
    return m_start_minute;
}
void OAITargetingValueDayPartTargetingDayPart::setStartMinute(const qint32 &start_minute) {
    m_start_minute = start_minute;
    m_start_minute_isSet = true;
}

bool OAITargetingValueDayPartTargetingDayPart::is_start_minute_Set() const{
    return m_start_minute_isSet;
}

bool OAITargetingValueDayPartTargetingDayPart::is_start_minute_Valid() const{
    return m_start_minute_isValid;
}

bool OAITargetingValueDayPartTargetingDayPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_minute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingValueDayPartTargetingDayPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
