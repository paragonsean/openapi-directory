/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplaceLabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplaceLabel::OAIMarketplaceLabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplaceLabel::OAIMarketplaceLabel() {
    this->initializeModel();
}

OAIMarketplaceLabel::~OAIMarketplaceLabel() {}

void OAIMarketplaceLabel::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_create_time_ms_isSet = false;
    m_create_time_ms_isValid = false;

    m_deprecated_marketplace_deal_party_isSet = false;
    m_deprecated_marketplace_deal_party_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIMarketplaceLabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplaceLabel::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_create_time_ms_isValid = ::OpenAPI::fromJsonValue(m_create_time_ms, json[QString("createTimeMs")]);
    m_create_time_ms_isSet = !json[QString("createTimeMs")].isNull() && m_create_time_ms_isValid;

    m_deprecated_marketplace_deal_party_isValid = ::OpenAPI::fromJsonValue(m_deprecated_marketplace_deal_party, json[QString("deprecatedMarketplaceDealParty")]);
    m_deprecated_marketplace_deal_party_isSet = !json[QString("deprecatedMarketplaceDealParty")].isNull() && m_deprecated_marketplace_deal_party_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIMarketplaceLabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplaceLabel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_create_time_ms_isSet) {
        obj.insert(QString("createTimeMs"), ::OpenAPI::toJsonValue(m_create_time_ms));
    }
    if (m_deprecated_marketplace_deal_party.isSet()) {
        obj.insert(QString("deprecatedMarketplaceDealParty"), ::OpenAPI::toJsonValue(m_deprecated_marketplace_deal_party));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAIMarketplaceLabel::getAccountId() const {
    return m_account_id;
}
void OAIMarketplaceLabel::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMarketplaceLabel::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMarketplaceLabel::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIMarketplaceLabel::getCreateTimeMs() const {
    return m_create_time_ms;
}
void OAIMarketplaceLabel::setCreateTimeMs(const QString &create_time_ms) {
    m_create_time_ms = create_time_ms;
    m_create_time_ms_isSet = true;
}

bool OAIMarketplaceLabel::is_create_time_ms_Set() const{
    return m_create_time_ms_isSet;
}

bool OAIMarketplaceLabel::is_create_time_ms_Valid() const{
    return m_create_time_ms_isValid;
}

OAIMarketplaceDealParty OAIMarketplaceLabel::getDeprecatedMarketplaceDealParty() const {
    return m_deprecated_marketplace_deal_party;
}
void OAIMarketplaceLabel::setDeprecatedMarketplaceDealParty(const OAIMarketplaceDealParty &deprecated_marketplace_deal_party) {
    m_deprecated_marketplace_deal_party = deprecated_marketplace_deal_party;
    m_deprecated_marketplace_deal_party_isSet = true;
}

bool OAIMarketplaceLabel::is_deprecated_marketplace_deal_party_Set() const{
    return m_deprecated_marketplace_deal_party_isSet;
}

bool OAIMarketplaceLabel::is_deprecated_marketplace_deal_party_Valid() const{
    return m_deprecated_marketplace_deal_party_isValid;
}

QString OAIMarketplaceLabel::getLabel() const {
    return m_label;
}
void OAIMarketplaceLabel::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIMarketplaceLabel::is_label_Set() const{
    return m_label_isSet;
}

bool OAIMarketplaceLabel::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIMarketplaceLabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_marketplace_deal_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplaceLabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
