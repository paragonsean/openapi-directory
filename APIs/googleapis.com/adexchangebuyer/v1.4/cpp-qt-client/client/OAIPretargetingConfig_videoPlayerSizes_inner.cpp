/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPretargetingConfig_videoPlayerSizes_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPretargetingConfig_videoPlayerSizes_inner::OAIPretargetingConfig_videoPlayerSizes_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPretargetingConfig_videoPlayerSizes_inner::OAIPretargetingConfig_videoPlayerSizes_inner() {
    this->initializeModel();
}

OAIPretargetingConfig_videoPlayerSizes_inner::~OAIPretargetingConfig_videoPlayerSizes_inner() {}

void OAIPretargetingConfig_videoPlayerSizes_inner::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_min_height_isSet = false;
    m_min_height_isValid = false;

    m_min_width_isSet = false;
    m_min_width_isValid = false;
}

void OAIPretargetingConfig_videoPlayerSizes_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPretargetingConfig_videoPlayerSizes_inner::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("aspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_min_height_isValid = ::OpenAPI::fromJsonValue(m_min_height, json[QString("minHeight")]);
    m_min_height_isSet = !json[QString("minHeight")].isNull() && m_min_height_isValid;

    m_min_width_isValid = ::OpenAPI::fromJsonValue(m_min_width, json[QString("minWidth")]);
    m_min_width_isSet = !json[QString("minWidth")].isNull() && m_min_width_isValid;
}

QString OAIPretargetingConfig_videoPlayerSizes_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPretargetingConfig_videoPlayerSizes_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_min_height_isSet) {
        obj.insert(QString("minHeight"), ::OpenAPI::toJsonValue(m_min_height));
    }
    if (m_min_width_isSet) {
        obj.insert(QString("minWidth"), ::OpenAPI::toJsonValue(m_min_width));
    }
    return obj;
}

QString OAIPretargetingConfig_videoPlayerSizes_inner::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIPretargetingConfig_videoPlayerSizes_inner::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

QString OAIPretargetingConfig_videoPlayerSizes_inner::getMinHeight() const {
    return m_min_height;
}
void OAIPretargetingConfig_videoPlayerSizes_inner::setMinHeight(const QString &min_height) {
    m_min_height = min_height;
    m_min_height_isSet = true;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::is_min_height_Set() const{
    return m_min_height_isSet;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::is_min_height_Valid() const{
    return m_min_height_isValid;
}

QString OAIPretargetingConfig_videoPlayerSizes_inner::getMinWidth() const {
    return m_min_width;
}
void OAIPretargetingConfig_videoPlayerSizes_inner::setMinWidth(const QString &min_width) {
    m_min_width = min_width;
    m_min_width_isSet = true;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::is_min_width_Set() const{
    return m_min_width_isSet;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::is_min_width_Valid() const{
    return m_min_width_isValid;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPretargetingConfig_videoPlayerSizes_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
