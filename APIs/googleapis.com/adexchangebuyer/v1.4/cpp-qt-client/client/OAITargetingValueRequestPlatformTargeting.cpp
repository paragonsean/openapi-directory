/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingValueRequestPlatformTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingValueRequestPlatformTargeting::OAITargetingValueRequestPlatformTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingValueRequestPlatformTargeting::OAITargetingValueRequestPlatformTargeting() {
    this->initializeModel();
}

OAITargetingValueRequestPlatformTargeting::~OAITargetingValueRequestPlatformTargeting() {}

void OAITargetingValueRequestPlatformTargeting::initializeModel() {

    m_request_platforms_isSet = false;
    m_request_platforms_isValid = false;
}

void OAITargetingValueRequestPlatformTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingValueRequestPlatformTargeting::fromJsonObject(QJsonObject json) {

    m_request_platforms_isValid = ::OpenAPI::fromJsonValue(m_request_platforms, json[QString("requestPlatforms")]);
    m_request_platforms_isSet = !json[QString("requestPlatforms")].isNull() && m_request_platforms_isValid;
}

QString OAITargetingValueRequestPlatformTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingValueRequestPlatformTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_request_platforms.size() > 0) {
        obj.insert(QString("requestPlatforms"), ::OpenAPI::toJsonValue(m_request_platforms));
    }
    return obj;
}

QList<QString> OAITargetingValueRequestPlatformTargeting::getRequestPlatforms() const {
    return m_request_platforms;
}
void OAITargetingValueRequestPlatformTargeting::setRequestPlatforms(const QList<QString> &request_platforms) {
    m_request_platforms = request_platforms;
    m_request_platforms_isSet = true;
}

bool OAITargetingValueRequestPlatformTargeting::is_request_platforms_Set() const{
    return m_request_platforms_isSet;
}

bool OAITargetingValueRequestPlatformTargeting::is_request_platforms_Valid() const{
    return m_request_platforms_isValid;
}

bool OAITargetingValueRequestPlatformTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingValueRequestPlatformTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
