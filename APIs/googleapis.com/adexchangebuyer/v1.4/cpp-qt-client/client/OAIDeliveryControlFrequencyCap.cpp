/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryControlFrequencyCap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryControlFrequencyCap::OAIDeliveryControlFrequencyCap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryControlFrequencyCap::OAIDeliveryControlFrequencyCap() {
    this->initializeModel();
}

OAIDeliveryControlFrequencyCap::~OAIDeliveryControlFrequencyCap() {}

void OAIDeliveryControlFrequencyCap::initializeModel() {

    m_max_impressions_isSet = false;
    m_max_impressions_isValid = false;

    m_num_time_units_isSet = false;
    m_num_time_units_isValid = false;

    m_time_unit_type_isSet = false;
    m_time_unit_type_isValid = false;
}

void OAIDeliveryControlFrequencyCap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryControlFrequencyCap::fromJsonObject(QJsonObject json) {

    m_max_impressions_isValid = ::OpenAPI::fromJsonValue(m_max_impressions, json[QString("maxImpressions")]);
    m_max_impressions_isSet = !json[QString("maxImpressions")].isNull() && m_max_impressions_isValid;

    m_num_time_units_isValid = ::OpenAPI::fromJsonValue(m_num_time_units, json[QString("numTimeUnits")]);
    m_num_time_units_isSet = !json[QString("numTimeUnits")].isNull() && m_num_time_units_isValid;

    m_time_unit_type_isValid = ::OpenAPI::fromJsonValue(m_time_unit_type, json[QString("timeUnitType")]);
    m_time_unit_type_isSet = !json[QString("timeUnitType")].isNull() && m_time_unit_type_isValid;
}

QString OAIDeliveryControlFrequencyCap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryControlFrequencyCap::asJsonObject() const {
    QJsonObject obj;
    if (m_max_impressions_isSet) {
        obj.insert(QString("maxImpressions"), ::OpenAPI::toJsonValue(m_max_impressions));
    }
    if (m_num_time_units_isSet) {
        obj.insert(QString("numTimeUnits"), ::OpenAPI::toJsonValue(m_num_time_units));
    }
    if (m_time_unit_type_isSet) {
        obj.insert(QString("timeUnitType"), ::OpenAPI::toJsonValue(m_time_unit_type));
    }
    return obj;
}

qint32 OAIDeliveryControlFrequencyCap::getMaxImpressions() const {
    return m_max_impressions;
}
void OAIDeliveryControlFrequencyCap::setMaxImpressions(const qint32 &max_impressions) {
    m_max_impressions = max_impressions;
    m_max_impressions_isSet = true;
}

bool OAIDeliveryControlFrequencyCap::is_max_impressions_Set() const{
    return m_max_impressions_isSet;
}

bool OAIDeliveryControlFrequencyCap::is_max_impressions_Valid() const{
    return m_max_impressions_isValid;
}

qint32 OAIDeliveryControlFrequencyCap::getNumTimeUnits() const {
    return m_num_time_units;
}
void OAIDeliveryControlFrequencyCap::setNumTimeUnits(const qint32 &num_time_units) {
    m_num_time_units = num_time_units;
    m_num_time_units_isSet = true;
}

bool OAIDeliveryControlFrequencyCap::is_num_time_units_Set() const{
    return m_num_time_units_isSet;
}

bool OAIDeliveryControlFrequencyCap::is_num_time_units_Valid() const{
    return m_num_time_units_isValid;
}

QString OAIDeliveryControlFrequencyCap::getTimeUnitType() const {
    return m_time_unit_type;
}
void OAIDeliveryControlFrequencyCap::setTimeUnitType(const QString &time_unit_type) {
    m_time_unit_type = time_unit_type;
    m_time_unit_type_isSet = true;
}

bool OAIDeliveryControlFrequencyCap::is_time_unit_type_Set() const{
    return m_time_unit_type_isSet;
}

bool OAIDeliveryControlFrequencyCap::is_time_unit_type_Valid() const{
    return m_time_unit_type_isValid;
}

bool OAIDeliveryControlFrequencyCap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_time_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryControlFrequencyCap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
