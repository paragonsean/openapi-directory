/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MarketplaceNote model module.
 * @module model/MarketplaceNote
 * @version v1.4
 */
class MarketplaceNote {
    /**
     * Constructs a new <code>MarketplaceNote</code>.
     * A proposal is associated with a bunch of notes which may optionally be associated with a deal and/or revision number.
     * @alias module:model/MarketplaceNote
     */
    constructor() { 
        
        MarketplaceNote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#marketplaceNote';
    }

    /**
     * Constructs a <code>MarketplaceNote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MarketplaceNote} obj Optional instance to populate.
     * @return {module:model/MarketplaceNote} The populated <code>MarketplaceNote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MarketplaceNote();

            if (data.hasOwnProperty('creatorRole')) {
                obj['creatorRole'] = ApiClient.convertToType(data['creatorRole'], 'String');
            }
            if (data.hasOwnProperty('dealId')) {
                obj['dealId'] = ApiClient.convertToType(data['dealId'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('noteId')) {
                obj['noteId'] = ApiClient.convertToType(data['noteId'], 'String');
            }
            if (data.hasOwnProperty('proposalId')) {
                obj['proposalId'] = ApiClient.convertToType(data['proposalId'], 'String');
            }
            if (data.hasOwnProperty('proposalRevisionNumber')) {
                obj['proposalRevisionNumber'] = ApiClient.convertToType(data['proposalRevisionNumber'], 'String');
            }
            if (data.hasOwnProperty('timestampMs')) {
                obj['timestampMs'] = ApiClient.convertToType(data['timestampMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MarketplaceNote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MarketplaceNote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creatorRole'] && !(typeof data['creatorRole'] === 'string' || data['creatorRole'] instanceof String)) {
            throw new Error("Expected the field `creatorRole` to be a primitive type in the JSON string but got " + data['creatorRole']);
        }
        // ensure the json data is a string
        if (data['dealId'] && !(typeof data['dealId'] === 'string' || data['dealId'] instanceof String)) {
            throw new Error("Expected the field `dealId` to be a primitive type in the JSON string but got " + data['dealId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['noteId'] && !(typeof data['noteId'] === 'string' || data['noteId'] instanceof String)) {
            throw new Error("Expected the field `noteId` to be a primitive type in the JSON string but got " + data['noteId']);
        }
        // ensure the json data is a string
        if (data['proposalId'] && !(typeof data['proposalId'] === 'string' || data['proposalId'] instanceof String)) {
            throw new Error("Expected the field `proposalId` to be a primitive type in the JSON string but got " + data['proposalId']);
        }
        // ensure the json data is a string
        if (data['proposalRevisionNumber'] && !(typeof data['proposalRevisionNumber'] === 'string' || data['proposalRevisionNumber'] instanceof String)) {
            throw new Error("Expected the field `proposalRevisionNumber` to be a primitive type in the JSON string but got " + data['proposalRevisionNumber']);
        }
        // ensure the json data is a string
        if (data['timestampMs'] && !(typeof data['timestampMs'] === 'string' || data['timestampMs'] instanceof String)) {
            throw new Error("Expected the field `timestampMs` to be a primitive type in the JSON string but got " + data['timestampMs']);
        }

        return true;
    }


}



/**
 * The role of the person (buyer/seller) creating the note. (readonly)
 * @member {String} creatorRole
 */
MarketplaceNote.prototype['creatorRole'] = undefined;

/**
 * Notes can optionally be associated with a deal. (readonly, except on create)
 * @member {String} dealId
 */
MarketplaceNote.prototype['dealId'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#marketplaceNote\".
 * @member {String} kind
 * @default 'adexchangebuyer#marketplaceNote'
 */
MarketplaceNote.prototype['kind'] = 'adexchangebuyer#marketplaceNote';

/**
 * The actual note to attach. (readonly, except on create)
 * @member {String} note
 */
MarketplaceNote.prototype['note'] = undefined;

/**
 * The unique id for the note. (readonly)
 * @member {String} noteId
 */
MarketplaceNote.prototype['noteId'] = undefined;

/**
 * The proposalId that a note is attached to. (readonly)
 * @member {String} proposalId
 */
MarketplaceNote.prototype['proposalId'] = undefined;

/**
 * If the note is associated with a proposal revision number, then store that here. (readonly, except on create)
 * @member {String} proposalRevisionNumber
 */
MarketplaceNote.prototype['proposalRevisionNumber'] = undefined;

/**
 * The timestamp (ms since epoch) that this note was created. (readonly)
 * @member {String} timestampMs
 */
MarketplaceNote.prototype['timestampMs'] = undefined;






export default MarketplaceNote;

