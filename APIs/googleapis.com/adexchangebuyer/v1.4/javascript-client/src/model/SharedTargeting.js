/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TargetingValue from './TargetingValue';

/**
 * The SharedTargeting model module.
 * @module model/SharedTargeting
 * @version v1.4
 */
class SharedTargeting {
    /**
     * Constructs a new <code>SharedTargeting</code>.
     * @alias module:model/SharedTargeting
     */
    constructor() { 
        
        SharedTargeting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedTargeting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedTargeting} obj Optional instance to populate.
     * @return {module:model/SharedTargeting} The populated <code>SharedTargeting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedTargeting();

            if (data.hasOwnProperty('exclusions')) {
                obj['exclusions'] = ApiClient.convertToType(data['exclusions'], [TargetingValue]);
            }
            if (data.hasOwnProperty('inclusions')) {
                obj['inclusions'] = ApiClient.convertToType(data['inclusions'], [TargetingValue]);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedTargeting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedTargeting</code>.
     */
    static validateJSON(data) {
        if (data['exclusions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exclusions'])) {
                throw new Error("Expected the field `exclusions` to be an array in the JSON data but got " + data['exclusions']);
            }
            // validate the optional field `exclusions` (array)
            for (const item of data['exclusions']) {
                TargetingValue.validateJSON(item);
            };
        }
        if (data['inclusions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inclusions'])) {
                throw new Error("Expected the field `inclusions` to be an array in the JSON data but got " + data['inclusions']);
            }
            // validate the optional field `inclusions` (array)
            for (const item of data['inclusions']) {
                TargetingValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }

        return true;
    }


}



/**
 * The list of values to exclude from targeting. Each value is AND'd together.
 * @member {Array.<module:model/TargetingValue>} exclusions
 */
SharedTargeting.prototype['exclusions'] = undefined;

/**
 * The list of value to include as part of the targeting. Each value is OR'd together.
 * @member {Array.<module:model/TargetingValue>} inclusions
 */
SharedTargeting.prototype['inclusions'] = undefined;

/**
 * The key representing the shared targeting criterion.
 * @member {String} key
 */
SharedTargeting.prototype['key'] = undefined;






export default SharedTargeting;

