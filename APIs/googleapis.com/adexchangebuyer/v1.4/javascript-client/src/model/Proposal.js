/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Buyer from './Buyer';
import ContactInformation from './ContactInformation';
import MarketplaceLabel from './MarketplaceLabel';
import PrivateData from './PrivateData';
import Seller from './Seller';

/**
 * The Proposal model module.
 * @module model/Proposal
 * @version v1.4
 */
class Proposal {
    /**
     * Constructs a new <code>Proposal</code>.
     * Represents a proposal in the marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Each field in a proposal can have one of the following setting:  (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
     * @alias module:model/Proposal
     */
    constructor() { 
        
        Proposal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#proposal';
    }

    /**
     * Constructs a <code>Proposal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Proposal} obj Optional instance to populate.
     * @return {module:model/Proposal} The populated <code>Proposal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Proposal();

            if (data.hasOwnProperty('billedBuyer')) {
                obj['billedBuyer'] = Buyer.constructFromObject(data['billedBuyer']);
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = Buyer.constructFromObject(data['buyer']);
            }
            if (data.hasOwnProperty('buyerContacts')) {
                obj['buyerContacts'] = ApiClient.convertToType(data['buyerContacts'], [ContactInformation]);
            }
            if (data.hasOwnProperty('buyerPrivateData')) {
                obj['buyerPrivateData'] = PrivateData.constructFromObject(data['buyerPrivateData']);
            }
            if (data.hasOwnProperty('dbmAdvertiserIds')) {
                obj['dbmAdvertiserIds'] = ApiClient.convertToType(data['dbmAdvertiserIds'], ['String']);
            }
            if (data.hasOwnProperty('hasBuyerSignedOff')) {
                obj['hasBuyerSignedOff'] = ApiClient.convertToType(data['hasBuyerSignedOff'], 'Boolean');
            }
            if (data.hasOwnProperty('hasSellerSignedOff')) {
                obj['hasSellerSignedOff'] = ApiClient.convertToType(data['hasSellerSignedOff'], 'Boolean');
            }
            if (data.hasOwnProperty('inventorySource')) {
                obj['inventorySource'] = ApiClient.convertToType(data['inventorySource'], 'String');
            }
            if (data.hasOwnProperty('isRenegotiating')) {
                obj['isRenegotiating'] = ApiClient.convertToType(data['isRenegotiating'], 'Boolean');
            }
            if (data.hasOwnProperty('isSetupComplete')) {
                obj['isSetupComplete'] = ApiClient.convertToType(data['isSetupComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [MarketplaceLabel]);
            }
            if (data.hasOwnProperty('lastUpdaterOrCommentorRole')) {
                obj['lastUpdaterOrCommentorRole'] = ApiClient.convertToType(data['lastUpdaterOrCommentorRole'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('negotiationId')) {
                obj['negotiationId'] = ApiClient.convertToType(data['negotiationId'], 'String');
            }
            if (data.hasOwnProperty('originatorRole')) {
                obj['originatorRole'] = ApiClient.convertToType(data['originatorRole'], 'String');
            }
            if (data.hasOwnProperty('privateAuctionId')) {
                obj['privateAuctionId'] = ApiClient.convertToType(data['privateAuctionId'], 'String');
            }
            if (data.hasOwnProperty('proposalId')) {
                obj['proposalId'] = ApiClient.convertToType(data['proposalId'], 'String');
            }
            if (data.hasOwnProperty('proposalState')) {
                obj['proposalState'] = ApiClient.convertToType(data['proposalState'], 'String');
            }
            if (data.hasOwnProperty('revisionNumber')) {
                obj['revisionNumber'] = ApiClient.convertToType(data['revisionNumber'], 'String');
            }
            if (data.hasOwnProperty('revisionTimeMs')) {
                obj['revisionTimeMs'] = ApiClient.convertToType(data['revisionTimeMs'], 'String');
            }
            if (data.hasOwnProperty('seller')) {
                obj['seller'] = Seller.constructFromObject(data['seller']);
            }
            if (data.hasOwnProperty('sellerContacts')) {
                obj['sellerContacts'] = ApiClient.convertToType(data['sellerContacts'], [ContactInformation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Proposal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Proposal</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billedBuyer`
        if (data['billedBuyer']) { // data not null
          Buyer.validateJSON(data['billedBuyer']);
        }
        // validate the optional field `buyer`
        if (data['buyer']) { // data not null
          Buyer.validateJSON(data['buyer']);
        }
        if (data['buyerContacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buyerContacts'])) {
                throw new Error("Expected the field `buyerContacts` to be an array in the JSON data but got " + data['buyerContacts']);
            }
            // validate the optional field `buyerContacts` (array)
            for (const item of data['buyerContacts']) {
                ContactInformation.validateJSON(item);
            };
        }
        // validate the optional field `buyerPrivateData`
        if (data['buyerPrivateData']) { // data not null
          PrivateData.validateJSON(data['buyerPrivateData']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dbmAdvertiserIds'])) {
            throw new Error("Expected the field `dbmAdvertiserIds` to be an array in the JSON data but got " + data['dbmAdvertiserIds']);
        }
        // ensure the json data is a string
        if (data['inventorySource'] && !(typeof data['inventorySource'] === 'string' || data['inventorySource'] instanceof String)) {
            throw new Error("Expected the field `inventorySource` to be a primitive type in the JSON string but got " + data['inventorySource']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                MarketplaceLabel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastUpdaterOrCommentorRole'] && !(typeof data['lastUpdaterOrCommentorRole'] === 'string' || data['lastUpdaterOrCommentorRole'] instanceof String)) {
            throw new Error("Expected the field `lastUpdaterOrCommentorRole` to be a primitive type in the JSON string but got " + data['lastUpdaterOrCommentorRole']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['negotiationId'] && !(typeof data['negotiationId'] === 'string' || data['negotiationId'] instanceof String)) {
            throw new Error("Expected the field `negotiationId` to be a primitive type in the JSON string but got " + data['negotiationId']);
        }
        // ensure the json data is a string
        if (data['originatorRole'] && !(typeof data['originatorRole'] === 'string' || data['originatorRole'] instanceof String)) {
            throw new Error("Expected the field `originatorRole` to be a primitive type in the JSON string but got " + data['originatorRole']);
        }
        // ensure the json data is a string
        if (data['privateAuctionId'] && !(typeof data['privateAuctionId'] === 'string' || data['privateAuctionId'] instanceof String)) {
            throw new Error("Expected the field `privateAuctionId` to be a primitive type in the JSON string but got " + data['privateAuctionId']);
        }
        // ensure the json data is a string
        if (data['proposalId'] && !(typeof data['proposalId'] === 'string' || data['proposalId'] instanceof String)) {
            throw new Error("Expected the field `proposalId` to be a primitive type in the JSON string but got " + data['proposalId']);
        }
        // ensure the json data is a string
        if (data['proposalState'] && !(typeof data['proposalState'] === 'string' || data['proposalState'] instanceof String)) {
            throw new Error("Expected the field `proposalState` to be a primitive type in the JSON string but got " + data['proposalState']);
        }
        // ensure the json data is a string
        if (data['revisionNumber'] && !(typeof data['revisionNumber'] === 'string' || data['revisionNumber'] instanceof String)) {
            throw new Error("Expected the field `revisionNumber` to be a primitive type in the JSON string but got " + data['revisionNumber']);
        }
        // ensure the json data is a string
        if (data['revisionTimeMs'] && !(typeof data['revisionTimeMs'] === 'string' || data['revisionTimeMs'] instanceof String)) {
            throw new Error("Expected the field `revisionTimeMs` to be a primitive type in the JSON string but got " + data['revisionTimeMs']);
        }
        // validate the optional field `seller`
        if (data['seller']) { // data not null
          Seller.validateJSON(data['seller']);
        }
        if (data['sellerContacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellerContacts'])) {
                throw new Error("Expected the field `sellerContacts` to be an array in the JSON data but got " + data['sellerContacts']);
            }
            // validate the optional field `sellerContacts` (array)
            for (const item of data['sellerContacts']) {
                ContactInformation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Buyer} billedBuyer
 */
Proposal.prototype['billedBuyer'] = undefined;

/**
 * @member {module:model/Buyer} buyer
 */
Proposal.prototype['buyer'] = undefined;

/**
 * Optional contact information of the buyer. (seller-readonly)
 * @member {Array.<module:model/ContactInformation>} buyerContacts
 */
Proposal.prototype['buyerContacts'] = undefined;

/**
 * @member {module:model/PrivateData} buyerPrivateData
 */
Proposal.prototype['buyerPrivateData'] = undefined;

/**
 * IDs of DBM advertisers permission to this proposal.
 * @member {Array.<String>} dbmAdvertiserIds
 */
Proposal.prototype['dbmAdvertiserIds'] = undefined;

/**
 * When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)
 * @member {Boolean} hasBuyerSignedOff
 */
Proposal.prototype['hasBuyerSignedOff'] = undefined;

/**
 * When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)
 * @member {Boolean} hasSellerSignedOff
 */
Proposal.prototype['hasSellerSignedOff'] = undefined;

/**
 * What exchange will provide this inventory (readonly, except on create).
 * @member {String} inventorySource
 */
Proposal.prototype['inventorySource'] = undefined;

/**
 * True if the proposal is being renegotiated (readonly).
 * @member {Boolean} isRenegotiating
 */
Proposal.prototype['isRenegotiating'] = undefined;

/**
 * True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.
 * @member {Boolean} isSetupComplete
 */
Proposal.prototype['isSetupComplete'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#proposal\".
 * @member {String} kind
 * @default 'adexchangebuyer#proposal'
 */
Proposal.prototype['kind'] = 'adexchangebuyer#proposal';

/**
 * List of labels associated with the proposal. (readonly)
 * @member {Array.<module:model/MarketplaceLabel>} labels
 */
Proposal.prototype['labels'] = undefined;

/**
 * The role of the last user that either updated the proposal or left a comment. (readonly)
 * @member {String} lastUpdaterOrCommentorRole
 */
Proposal.prototype['lastUpdaterOrCommentorRole'] = undefined;

/**
 * The name for the proposal (updatable)
 * @member {String} name
 */
Proposal.prototype['name'] = undefined;

/**
 * Optional negotiation id if this proposal is a preferred deal proposal.
 * @member {String} negotiationId
 */
Proposal.prototype['negotiationId'] = undefined;

/**
 * Indicates whether the buyer/seller created the proposal.(readonly)
 * @member {String} originatorRole
 */
Proposal.prototype['originatorRole'] = undefined;

/**
 * Optional private auction id if this proposal is a private auction proposal.
 * @member {String} privateAuctionId
 */
Proposal.prototype['privateAuctionId'] = undefined;

/**
 * The unique id of the proposal. (readonly).
 * @member {String} proposalId
 */
Proposal.prototype['proposalId'] = undefined;

/**
 * The current state of the proposal. (readonly)
 * @member {String} proposalState
 */
Proposal.prototype['proposalState'] = undefined;

/**
 * The revision number for the proposal (readonly).
 * @member {String} revisionNumber
 */
Proposal.prototype['revisionNumber'] = undefined;

/**
 * The time (ms since epoch) when the proposal was last revised (readonly).
 * @member {String} revisionTimeMs
 */
Proposal.prototype['revisionTimeMs'] = undefined;

/**
 * @member {module:model/Seller} seller
 */
Proposal.prototype['seller'] = undefined;

/**
 * Optional contact information of the seller (buyer-readonly).
 * @member {Array.<module:model/ContactInformation>} sellerContacts
 */
Proposal.prototype['sellerContacts'] = undefined;






export default Proposal;

