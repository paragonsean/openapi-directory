/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TargetingValueSize from './TargetingValueSize';

/**
 * The TargetingValueCreativeSize model module.
 * @module model/TargetingValueCreativeSize
 * @version v1.4
 */
class TargetingValueCreativeSize {
    /**
     * Constructs a new <code>TargetingValueCreativeSize</code>.
     * Next Id: 7
     * @alias module:model/TargetingValueCreativeSize
     */
    constructor() { 
        
        TargetingValueCreativeSize.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetingValueCreativeSize</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetingValueCreativeSize} obj Optional instance to populate.
     * @return {module:model/TargetingValueCreativeSize} The populated <code>TargetingValueCreativeSize</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetingValueCreativeSize();

            if (data.hasOwnProperty('allowedFormats')) {
                obj['allowedFormats'] = ApiClient.convertToType(data['allowedFormats'], ['String']);
            }
            if (data.hasOwnProperty('companionSizes')) {
                obj['companionSizes'] = ApiClient.convertToType(data['companionSizes'], [TargetingValueSize]);
            }
            if (data.hasOwnProperty('creativeSizeType')) {
                obj['creativeSizeType'] = ApiClient.convertToType(data['creativeSizeType'], 'String');
            }
            if (data.hasOwnProperty('nativeTemplate')) {
                obj['nativeTemplate'] = ApiClient.convertToType(data['nativeTemplate'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = TargetingValueSize.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('skippableAdType')) {
                obj['skippableAdType'] = ApiClient.convertToType(data['skippableAdType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetingValueCreativeSize</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetingValueCreativeSize</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedFormats'])) {
            throw new Error("Expected the field `allowedFormats` to be an array in the JSON data but got " + data['allowedFormats']);
        }
        if (data['companionSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['companionSizes'])) {
                throw new Error("Expected the field `companionSizes` to be an array in the JSON data but got " + data['companionSizes']);
            }
            // validate the optional field `companionSizes` (array)
            for (const item of data['companionSizes']) {
                TargetingValueSize.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['creativeSizeType'] && !(typeof data['creativeSizeType'] === 'string' || data['creativeSizeType'] instanceof String)) {
            throw new Error("Expected the field `creativeSizeType` to be a primitive type in the JSON string but got " + data['creativeSizeType']);
        }
        // ensure the json data is a string
        if (data['nativeTemplate'] && !(typeof data['nativeTemplate'] === 'string' || data['nativeTemplate'] instanceof String)) {
            throw new Error("Expected the field `nativeTemplate` to be a primitive type in the JSON string but got " + data['nativeTemplate']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          TargetingValueSize.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['skippableAdType'] && !(typeof data['skippableAdType'] === 'string' || data['skippableAdType'] instanceof String)) {
            throw new Error("Expected the field `skippableAdType` to be a primitive type in the JSON string but got " + data['skippableAdType']);
        }

        return true;
    }


}



/**
 * The formats allowed by the publisher.
 * @member {Array.<String>} allowedFormats
 */
TargetingValueCreativeSize.prototype['allowedFormats'] = undefined;

/**
 * For video size type, the list of companion sizes.
 * @member {Array.<module:model/TargetingValueSize>} companionSizes
 */
TargetingValueCreativeSize.prototype['companionSizes'] = undefined;

/**
 * The Creative size type.
 * @member {String} creativeSizeType
 */
TargetingValueCreativeSize.prototype['creativeSizeType'] = undefined;

/**
 * The native template for native ad.
 * @member {String} nativeTemplate
 */
TargetingValueCreativeSize.prototype['nativeTemplate'] = undefined;

/**
 * @member {module:model/TargetingValueSize} size
 */
TargetingValueCreativeSize.prototype['size'] = undefined;

/**
 * The skippable ad type for video size.
 * @member {String} skippableAdType
 */
TargetingValueCreativeSize.prototype['skippableAdType'] = undefined;






export default TargetingValueCreativeSize;

