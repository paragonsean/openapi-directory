/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DealTermsGuaranteedFixedPriceTerms from './DealTermsGuaranteedFixedPriceTerms';
import DealTermsNonGuaranteedAuctionTerms from './DealTermsNonGuaranteedAuctionTerms';
import DealTermsNonGuaranteedFixedPriceTerms from './DealTermsNonGuaranteedFixedPriceTerms';
import DealTermsRubiconNonGuaranteedTerms from './DealTermsRubiconNonGuaranteedTerms';
import Price from './Price';

/**
 * The DealTerms model module.
 * @module model/DealTerms
 * @version v1.4
 */
class DealTerms {
    /**
     * Constructs a new <code>DealTerms</code>.
     * @alias module:model/DealTerms
     */
    constructor() { 
        
        DealTerms.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DealTerms</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealTerms} obj Optional instance to populate.
     * @return {module:model/DealTerms} The populated <code>DealTerms</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealTerms();

            if (data.hasOwnProperty('brandingType')) {
                obj['brandingType'] = ApiClient.convertToType(data['brandingType'], 'String');
            }
            if (data.hasOwnProperty('crossListedExternalDealIdType')) {
                obj['crossListedExternalDealIdType'] = ApiClient.convertToType(data['crossListedExternalDealIdType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('estimatedGrossSpend')) {
                obj['estimatedGrossSpend'] = Price.constructFromObject(data['estimatedGrossSpend']);
            }
            if (data.hasOwnProperty('estimatedImpressionsPerDay')) {
                obj['estimatedImpressionsPerDay'] = ApiClient.convertToType(data['estimatedImpressionsPerDay'], 'String');
            }
            if (data.hasOwnProperty('guaranteedFixedPriceTerms')) {
                obj['guaranteedFixedPriceTerms'] = DealTermsGuaranteedFixedPriceTerms.constructFromObject(data['guaranteedFixedPriceTerms']);
            }
            if (data.hasOwnProperty('nonGuaranteedAuctionTerms')) {
                obj['nonGuaranteedAuctionTerms'] = DealTermsNonGuaranteedAuctionTerms.constructFromObject(data['nonGuaranteedAuctionTerms']);
            }
            if (data.hasOwnProperty('nonGuaranteedFixedPriceTerms')) {
                obj['nonGuaranteedFixedPriceTerms'] = DealTermsNonGuaranteedFixedPriceTerms.constructFromObject(data['nonGuaranteedFixedPriceTerms']);
            }
            if (data.hasOwnProperty('rubiconNonGuaranteedTerms')) {
                obj['rubiconNonGuaranteedTerms'] = DealTermsRubiconNonGuaranteedTerms.constructFromObject(data['rubiconNonGuaranteedTerms']);
            }
            if (data.hasOwnProperty('sellerTimeZone')) {
                obj['sellerTimeZone'] = ApiClient.convertToType(data['sellerTimeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DealTerms</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DealTerms</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brandingType'] && !(typeof data['brandingType'] === 'string' || data['brandingType'] instanceof String)) {
            throw new Error("Expected the field `brandingType` to be a primitive type in the JSON string but got " + data['brandingType']);
        }
        // ensure the json data is a string
        if (data['crossListedExternalDealIdType'] && !(typeof data['crossListedExternalDealIdType'] === 'string' || data['crossListedExternalDealIdType'] instanceof String)) {
            throw new Error("Expected the field `crossListedExternalDealIdType` to be a primitive type in the JSON string but got " + data['crossListedExternalDealIdType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `estimatedGrossSpend`
        if (data['estimatedGrossSpend']) { // data not null
          Price.validateJSON(data['estimatedGrossSpend']);
        }
        // ensure the json data is a string
        if (data['estimatedImpressionsPerDay'] && !(typeof data['estimatedImpressionsPerDay'] === 'string' || data['estimatedImpressionsPerDay'] instanceof String)) {
            throw new Error("Expected the field `estimatedImpressionsPerDay` to be a primitive type in the JSON string but got " + data['estimatedImpressionsPerDay']);
        }
        // validate the optional field `guaranteedFixedPriceTerms`
        if (data['guaranteedFixedPriceTerms']) { // data not null
          DealTermsGuaranteedFixedPriceTerms.validateJSON(data['guaranteedFixedPriceTerms']);
        }
        // validate the optional field `nonGuaranteedAuctionTerms`
        if (data['nonGuaranteedAuctionTerms']) { // data not null
          DealTermsNonGuaranteedAuctionTerms.validateJSON(data['nonGuaranteedAuctionTerms']);
        }
        // validate the optional field `nonGuaranteedFixedPriceTerms`
        if (data['nonGuaranteedFixedPriceTerms']) { // data not null
          DealTermsNonGuaranteedFixedPriceTerms.validateJSON(data['nonGuaranteedFixedPriceTerms']);
        }
        // validate the optional field `rubiconNonGuaranteedTerms`
        if (data['rubiconNonGuaranteedTerms']) { // data not null
          DealTermsRubiconNonGuaranteedTerms.validateJSON(data['rubiconNonGuaranteedTerms']);
        }
        // ensure the json data is a string
        if (data['sellerTimeZone'] && !(typeof data['sellerTimeZone'] === 'string' || data['sellerTimeZone'] instanceof String)) {
            throw new Error("Expected the field `sellerTimeZone` to be a primitive type in the JSON string but got " + data['sellerTimeZone']);
        }

        return true;
    }


}



/**
 * Visibility of the URL in bid requests.
 * @member {String} brandingType
 */
DealTerms.prototype['brandingType'] = undefined;

/**
 * Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case.
 * @member {String} crossListedExternalDealIdType
 */
DealTerms.prototype['crossListedExternalDealIdType'] = undefined;

/**
 * Description for the proposed terms of the deal.
 * @member {String} description
 */
DealTerms.prototype['description'] = undefined;

/**
 * @member {module:model/Price} estimatedGrossSpend
 */
DealTerms.prototype['estimatedGrossSpend'] = undefined;

/**
 * Non-binding estimate of the impressions served per day Can be set by buyer or seller.
 * @member {String} estimatedImpressionsPerDay
 */
DealTerms.prototype['estimatedImpressionsPerDay'] = undefined;

/**
 * @member {module:model/DealTermsGuaranteedFixedPriceTerms} guaranteedFixedPriceTerms
 */
DealTerms.prototype['guaranteedFixedPriceTerms'] = undefined;

/**
 * @member {module:model/DealTermsNonGuaranteedAuctionTerms} nonGuaranteedAuctionTerms
 */
DealTerms.prototype['nonGuaranteedAuctionTerms'] = undefined;

/**
 * @member {module:model/DealTermsNonGuaranteedFixedPriceTerms} nonGuaranteedFixedPriceTerms
 */
DealTerms.prototype['nonGuaranteedFixedPriceTerms'] = undefined;

/**
 * @member {module:model/DealTermsRubiconNonGuaranteedTerms} rubiconNonGuaranteedTerms
 */
DealTerms.prototype['rubiconNonGuaranteedTerms'] = undefined;

/**
 * For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)
 * @member {String} sellerTimeZone
 */
DealTerms.prototype['sellerTimeZone'] = undefined;






export default DealTerms;

