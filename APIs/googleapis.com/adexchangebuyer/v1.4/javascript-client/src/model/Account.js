/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountBidderLocationInner from './AccountBidderLocationInner';

/**
 * The Account model module.
 * @module model/Account
 * @version v1.4
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * Configuration data for an Ad Exchange buyer account.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#account';
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('applyPretargetingToNonGuaranteedDeals')) {
                obj['applyPretargetingToNonGuaranteedDeals'] = ApiClient.convertToType(data['applyPretargetingToNonGuaranteedDeals'], 'Boolean');
            }
            if (data.hasOwnProperty('bidderLocation')) {
                obj['bidderLocation'] = ApiClient.convertToType(data['bidderLocation'], [AccountBidderLocationInner]);
            }
            if (data.hasOwnProperty('cookieMatchingNid')) {
                obj['cookieMatchingNid'] = ApiClient.convertToType(data['cookieMatchingNid'], 'String');
            }
            if (data.hasOwnProperty('cookieMatchingUrl')) {
                obj['cookieMatchingUrl'] = ApiClient.convertToType(data['cookieMatchingUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('maximumActiveCreatives')) {
                obj['maximumActiveCreatives'] = ApiClient.convertToType(data['maximumActiveCreatives'], 'Number');
            }
            if (data.hasOwnProperty('maximumTotalQps')) {
                obj['maximumTotalQps'] = ApiClient.convertToType(data['maximumTotalQps'], 'Number');
            }
            if (data.hasOwnProperty('numberActiveCreatives')) {
                obj['numberActiveCreatives'] = ApiClient.convertToType(data['numberActiveCreatives'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        if (data['bidderLocation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bidderLocation'])) {
                throw new Error("Expected the field `bidderLocation` to be an array in the JSON data but got " + data['bidderLocation']);
            }
            // validate the optional field `bidderLocation` (array)
            for (const item of data['bidderLocation']) {
                AccountBidderLocationInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['cookieMatchingNid'] && !(typeof data['cookieMatchingNid'] === 'string' || data['cookieMatchingNid'] instanceof String)) {
            throw new Error("Expected the field `cookieMatchingNid` to be a primitive type in the JSON string but got " + data['cookieMatchingNid']);
        }
        // ensure the json data is a string
        if (data['cookieMatchingUrl'] && !(typeof data['cookieMatchingUrl'] === 'string' || data['cookieMatchingUrl'] instanceof String)) {
            throw new Error("Expected the field `cookieMatchingUrl` to be a primitive type in the JSON string but got " + data['cookieMatchingUrl']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * When this is false, bid requests that include a deal ID for a private auction or preferred deal are always sent to your bidder. When true, all active pretargeting configs will be applied to private auctions and preferred deals. Programmatic Guaranteed deals (when enabled) are always sent to your bidder.
 * @member {Boolean} applyPretargetingToNonGuaranteedDeals
 */
Account.prototype['applyPretargetingToNonGuaranteedDeals'] = undefined;

/**
 * Your bidder locations that have distinct URLs.
 * @member {Array.<module:model/AccountBidderLocationInner>} bidderLocation
 */
Account.prototype['bidderLocation'] = undefined;

/**
 * The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
 * @member {String} cookieMatchingNid
 */
Account.prototype['cookieMatchingNid'] = undefined;

/**
 * The base URL used in cookie match requests.
 * @member {String} cookieMatchingUrl
 */
Account.prototype['cookieMatchingUrl'] = undefined;

/**
 * Account id.
 * @member {Number} id
 */
Account.prototype['id'] = undefined;

/**
 * Resource type.
 * @member {String} kind
 * @default 'adexchangebuyer#account'
 */
Account.prototype['kind'] = 'adexchangebuyer#account';

/**
 * The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
 * @member {Number} maximumActiveCreatives
 */
Account.prototype['maximumActiveCreatives'] = undefined;

/**
 * The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
 * @member {Number} maximumTotalQps
 */
Account.prototype['maximumTotalQps'] = undefined;

/**
 * The number of creatives that this account inserted or bid with in the last 30 days.
 * @member {Number} numberActiveCreatives
 */
Account.prototype['numberActiveCreatives'] = undefined;






export default Account;

