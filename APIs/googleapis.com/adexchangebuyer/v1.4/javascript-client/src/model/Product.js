/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Buyer from './Buyer';
import ContactInformation from './ContactInformation';
import DealTerms from './DealTerms';
import DeliveryControl from './DeliveryControl';
import MarketplaceLabel from './MarketplaceLabel';
import PublisherProvidedForecast from './PublisherProvidedForecast';
import Seller from './Seller';
import SharedTargeting from './SharedTargeting';

/**
 * The Product model module.
 * @module model/Product
 * @version v1.4
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * A product is segment of inventory that a seller wishes to sell. It is associated with certain terms and targeting information which helps buyer know more about the inventory. Each field in a product can have one of the following setting:  (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
     * @alias module:model/Product
     */
    constructor() { 
        
        Product.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#product';
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('billedBuyer')) {
                obj['billedBuyer'] = Buyer.constructFromObject(data['billedBuyer']);
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = Buyer.constructFromObject(data['buyer']);
            }
            if (data.hasOwnProperty('creationTimeMs')) {
                obj['creationTimeMs'] = ApiClient.convertToType(data['creationTimeMs'], 'String');
            }
            if (data.hasOwnProperty('creatorContacts')) {
                obj['creatorContacts'] = ApiClient.convertToType(data['creatorContacts'], [ContactInformation]);
            }
            if (data.hasOwnProperty('creatorRole')) {
                obj['creatorRole'] = ApiClient.convertToType(data['creatorRole'], 'String');
            }
            if (data.hasOwnProperty('deliveryControl')) {
                obj['deliveryControl'] = DeliveryControl.constructFromObject(data['deliveryControl']);
            }
            if (data.hasOwnProperty('flightEndTimeMs')) {
                obj['flightEndTimeMs'] = ApiClient.convertToType(data['flightEndTimeMs'], 'String');
            }
            if (data.hasOwnProperty('flightStartTimeMs')) {
                obj['flightStartTimeMs'] = ApiClient.convertToType(data['flightStartTimeMs'], 'String');
            }
            if (data.hasOwnProperty('hasCreatorSignedOff')) {
                obj['hasCreatorSignedOff'] = ApiClient.convertToType(data['hasCreatorSignedOff'], 'Boolean');
            }
            if (data.hasOwnProperty('inventorySource')) {
                obj['inventorySource'] = ApiClient.convertToType(data['inventorySource'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [MarketplaceLabel]);
            }
            if (data.hasOwnProperty('lastUpdateTimeMs')) {
                obj['lastUpdateTimeMs'] = ApiClient.convertToType(data['lastUpdateTimeMs'], 'String');
            }
            if (data.hasOwnProperty('legacyOfferId')) {
                obj['legacyOfferId'] = ApiClient.convertToType(data['legacyOfferId'], 'String');
            }
            if (data.hasOwnProperty('marketplacePublisherProfileId')) {
                obj['marketplacePublisherProfileId'] = ApiClient.convertToType(data['marketplacePublisherProfileId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('privateAuctionId')) {
                obj['privateAuctionId'] = ApiClient.convertToType(data['privateAuctionId'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('publisherProfileId')) {
                obj['publisherProfileId'] = ApiClient.convertToType(data['publisherProfileId'], 'String');
            }
            if (data.hasOwnProperty('publisherProvidedForecast')) {
                obj['publisherProvidedForecast'] = PublisherProvidedForecast.constructFromObject(data['publisherProvidedForecast']);
            }
            if (data.hasOwnProperty('revisionNumber')) {
                obj['revisionNumber'] = ApiClient.convertToType(data['revisionNumber'], 'String');
            }
            if (data.hasOwnProperty('seller')) {
                obj['seller'] = Seller.constructFromObject(data['seller']);
            }
            if (data.hasOwnProperty('sharedTargetings')) {
                obj['sharedTargetings'] = ApiClient.convertToType(data['sharedTargetings'], [SharedTargeting]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('syndicationProduct')) {
                obj['syndicationProduct'] = ApiClient.convertToType(data['syndicationProduct'], 'String');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = DealTerms.constructFromObject(data['terms']);
            }
            if (data.hasOwnProperty('webPropertyCode')) {
                obj['webPropertyCode'] = ApiClient.convertToType(data['webPropertyCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billedBuyer`
        if (data['billedBuyer']) { // data not null
          Buyer.validateJSON(data['billedBuyer']);
        }
        // validate the optional field `buyer`
        if (data['buyer']) { // data not null
          Buyer.validateJSON(data['buyer']);
        }
        // ensure the json data is a string
        if (data['creationTimeMs'] && !(typeof data['creationTimeMs'] === 'string' || data['creationTimeMs'] instanceof String)) {
            throw new Error("Expected the field `creationTimeMs` to be a primitive type in the JSON string but got " + data['creationTimeMs']);
        }
        if (data['creatorContacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['creatorContacts'])) {
                throw new Error("Expected the field `creatorContacts` to be an array in the JSON data but got " + data['creatorContacts']);
            }
            // validate the optional field `creatorContacts` (array)
            for (const item of data['creatorContacts']) {
                ContactInformation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['creatorRole'] && !(typeof data['creatorRole'] === 'string' || data['creatorRole'] instanceof String)) {
            throw new Error("Expected the field `creatorRole` to be a primitive type in the JSON string but got " + data['creatorRole']);
        }
        // validate the optional field `deliveryControl`
        if (data['deliveryControl']) { // data not null
          DeliveryControl.validateJSON(data['deliveryControl']);
        }
        // ensure the json data is a string
        if (data['flightEndTimeMs'] && !(typeof data['flightEndTimeMs'] === 'string' || data['flightEndTimeMs'] instanceof String)) {
            throw new Error("Expected the field `flightEndTimeMs` to be a primitive type in the JSON string but got " + data['flightEndTimeMs']);
        }
        // ensure the json data is a string
        if (data['flightStartTimeMs'] && !(typeof data['flightStartTimeMs'] === 'string' || data['flightStartTimeMs'] instanceof String)) {
            throw new Error("Expected the field `flightStartTimeMs` to be a primitive type in the JSON string but got " + data['flightStartTimeMs']);
        }
        // ensure the json data is a string
        if (data['inventorySource'] && !(typeof data['inventorySource'] === 'string' || data['inventorySource'] instanceof String)) {
            throw new Error("Expected the field `inventorySource` to be a primitive type in the JSON string but got " + data['inventorySource']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                MarketplaceLabel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastUpdateTimeMs'] && !(typeof data['lastUpdateTimeMs'] === 'string' || data['lastUpdateTimeMs'] instanceof String)) {
            throw new Error("Expected the field `lastUpdateTimeMs` to be a primitive type in the JSON string but got " + data['lastUpdateTimeMs']);
        }
        // ensure the json data is a string
        if (data['legacyOfferId'] && !(typeof data['legacyOfferId'] === 'string' || data['legacyOfferId'] instanceof String)) {
            throw new Error("Expected the field `legacyOfferId` to be a primitive type in the JSON string but got " + data['legacyOfferId']);
        }
        // ensure the json data is a string
        if (data['marketplacePublisherProfileId'] && !(typeof data['marketplacePublisherProfileId'] === 'string' || data['marketplacePublisherProfileId'] instanceof String)) {
            throw new Error("Expected the field `marketplacePublisherProfileId` to be a primitive type in the JSON string but got " + data['marketplacePublisherProfileId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['privateAuctionId'] && !(typeof data['privateAuctionId'] === 'string' || data['privateAuctionId'] instanceof String)) {
            throw new Error("Expected the field `privateAuctionId` to be a primitive type in the JSON string but got " + data['privateAuctionId']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['publisherProfileId'] && !(typeof data['publisherProfileId'] === 'string' || data['publisherProfileId'] instanceof String)) {
            throw new Error("Expected the field `publisherProfileId` to be a primitive type in the JSON string but got " + data['publisherProfileId']);
        }
        // validate the optional field `publisherProvidedForecast`
        if (data['publisherProvidedForecast']) { // data not null
          PublisherProvidedForecast.validateJSON(data['publisherProvidedForecast']);
        }
        // ensure the json data is a string
        if (data['revisionNumber'] && !(typeof data['revisionNumber'] === 'string' || data['revisionNumber'] instanceof String)) {
            throw new Error("Expected the field `revisionNumber` to be a primitive type in the JSON string but got " + data['revisionNumber']);
        }
        // validate the optional field `seller`
        if (data['seller']) { // data not null
          Seller.validateJSON(data['seller']);
        }
        if (data['sharedTargetings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sharedTargetings'])) {
                throw new Error("Expected the field `sharedTargetings` to be an array in the JSON data but got " + data['sharedTargetings']);
            }
            // validate the optional field `sharedTargetings` (array)
            for (const item of data['sharedTargetings']) {
                SharedTargeting.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['syndicationProduct'] && !(typeof data['syndicationProduct'] === 'string' || data['syndicationProduct'] instanceof String)) {
            throw new Error("Expected the field `syndicationProduct` to be a primitive type in the JSON string but got " + data['syndicationProduct']);
        }
        // validate the optional field `terms`
        if (data['terms']) { // data not null
          DealTerms.validateJSON(data['terms']);
        }
        // ensure the json data is a string
        if (data['webPropertyCode'] && !(typeof data['webPropertyCode'] === 'string' || data['webPropertyCode'] instanceof String)) {
            throw new Error("Expected the field `webPropertyCode` to be a primitive type in the JSON string but got " + data['webPropertyCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/Buyer} billedBuyer
 */
Product.prototype['billedBuyer'] = undefined;

/**
 * @member {module:model/Buyer} buyer
 */
Product.prototype['buyer'] = undefined;

/**
 * Creation time in ms. since epoch (readonly)
 * @member {String} creationTimeMs
 */
Product.prototype['creationTimeMs'] = undefined;

/**
 * Optional contact information for the creator of this product. (buyer-readonly)
 * @member {Array.<module:model/ContactInformation>} creatorContacts
 */
Product.prototype['creatorContacts'] = undefined;

/**
 * The role that created the offer. Set to BUYER for buyer initiated offers.
 * @member {String} creatorRole
 */
Product.prototype['creatorRole'] = undefined;

/**
 * @member {module:model/DeliveryControl} deliveryControl
 */
Product.prototype['deliveryControl'] = undefined;

/**
 * The proposed end time for the deal (ms since epoch) (buyer-readonly)
 * @member {String} flightEndTimeMs
 */
Product.prototype['flightEndTimeMs'] = undefined;

/**
 * Inventory availability dates. (times are in ms since epoch) The granularity is generally in the order of seconds. (buyer-readonly)
 * @member {String} flightStartTimeMs
 */
Product.prototype['flightStartTimeMs'] = undefined;

/**
 * If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.
 * @member {Boolean} hasCreatorSignedOff
 */
Product.prototype['hasCreatorSignedOff'] = undefined;

/**
 * What exchange will provide this inventory (readonly, except on create).
 * @member {String} inventorySource
 */
Product.prototype['inventorySource'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#product\".
 * @member {String} kind
 * @default 'adexchangebuyer#product'
 */
Product.prototype['kind'] = 'adexchangebuyer#product';

/**
 * Optional List of labels for the product (optional, buyer-readonly).
 * @member {Array.<module:model/MarketplaceLabel>} labels
 */
Product.prototype['labels'] = undefined;

/**
 * Time of last update in ms. since epoch (readonly)
 * @member {String} lastUpdateTimeMs
 */
Product.prototype['lastUpdateTimeMs'] = undefined;

/**
 * Optional legacy offer id if this offer is a preferred deal offer.
 * @member {String} legacyOfferId
 */
Product.prototype['legacyOfferId'] = undefined;

/**
 * Marketplace publisher profile Id. This Id differs from the regular publisher_profile_id in that 1. This is a new id, the old Id will be deprecated in 2017. 2. This id uniquely identifies a publisher profile by itself.
 * @member {String} marketplacePublisherProfileId
 */
Product.prototype['marketplacePublisherProfileId'] = undefined;

/**
 * The name for this product as set by the seller. (buyer-readonly)
 * @member {String} name
 */
Product.prototype['name'] = undefined;

/**
 * Optional private auction id if this offer is a private auction offer.
 * @member {String} privateAuctionId
 */
Product.prototype['privateAuctionId'] = undefined;

/**
 * The unique id for the product (readonly)
 * @member {String} productId
 */
Product.prototype['productId'] = undefined;

/**
 * Id of the publisher profile for a given seller. A (seller.account_id, publisher_profile_id) pair uniquely identifies a publisher profile. Buyers can call the PublisherProfiles::List endpoint to get a list of publisher profiles for a given seller.
 * @member {String} publisherProfileId
 */
Product.prototype['publisherProfileId'] = undefined;

/**
 * @member {module:model/PublisherProvidedForecast} publisherProvidedForecast
 */
Product.prototype['publisherProvidedForecast'] = undefined;

/**
 * The revision number of the product. (readonly)
 * @member {String} revisionNumber
 */
Product.prototype['revisionNumber'] = undefined;

/**
 * @member {module:model/Seller} seller
 */
Product.prototype['seller'] = undefined;

/**
 * Targeting that is shared between the buyer and the seller. Each targeting criteria has a specified key and for each key there is a list of inclusion value or exclusion values. (buyer-readonly)
 * @member {Array.<module:model/SharedTargeting>} sharedTargetings
 */
Product.prototype['sharedTargetings'] = undefined;

/**
 * The state of the product. (buyer-readonly)
 * @member {String} state
 */
Product.prototype['state'] = undefined;

/**
 * The syndication product associated with the deal. (readonly, except on create)
 * @member {String} syndicationProduct
 */
Product.prototype['syndicationProduct'] = undefined;

/**
 * @member {module:model/DealTerms} terms
 */
Product.prototype['terms'] = undefined;

/**
 * The web property code for the seller. This field is meant to be copied over as is when creating deals.
 * @member {String} webPropertyCode
 */
Product.prototype['webPropertyCode'] = undefined;






export default Product;

