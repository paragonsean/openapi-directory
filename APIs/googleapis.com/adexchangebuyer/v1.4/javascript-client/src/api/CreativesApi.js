/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Creative from '../model/Creative';
import CreativeDealIds from '../model/CreativeDealIds';
import CreativesList from '../model/CreativesList';

/**
* Creatives service.
* @module api/CreativesApi
* @version v1.4
*/
export default class CreativesApi {

    /**
    * Constructs a new CreativesApi. 
    * @alias module:api/CreativesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adexchangebuyerCreativesAddDeal operation.
     * @callback module:api/CreativesApi~adexchangebuyerCreativesAddDealCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a deal id association for the creative.
     * @param {Number} accountId The id for the account that will serve this creative.
     * @param {String} buyerCreativeId The buyer-specific id for this creative.
     * @param {String} dealId The id of the deal id to associate with this creative.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/CreativesApi~adexchangebuyerCreativesAddDealCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adexchangebuyerCreativesAddDeal(accountId, buyerCreativeId, dealId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerCreativesAddDeal");
      }
      // verify the required parameter 'buyerCreativeId' is set
      if (buyerCreativeId === undefined || buyerCreativeId === null) {
        throw new Error("Missing the required parameter 'buyerCreativeId' when calling adexchangebuyerCreativesAddDeal");
      }
      // verify the required parameter 'dealId' is set
      if (dealId === undefined || dealId === null) {
        throw new Error("Missing the required parameter 'dealId' when calling adexchangebuyerCreativesAddDeal");
      }

      let pathParams = {
        'accountId': accountId,
        'buyerCreativeId': buyerCreativeId,
        'dealId': dealId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/creatives/{accountId}/{buyerCreativeId}/addDeal/{dealId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerCreativesGet operation.
     * @callback module:api/CreativesApi~adexchangebuyerCreativesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
     * @param {Number} accountId The id for the account that will serve this creative.
     * @param {String} buyerCreativeId The buyer-specific id for this creative.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/CreativesApi~adexchangebuyerCreativesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    adexchangebuyerCreativesGet(accountId, buyerCreativeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerCreativesGet");
      }
      // verify the required parameter 'buyerCreativeId' is set
      if (buyerCreativeId === undefined || buyerCreativeId === null) {
        throw new Error("Missing the required parameter 'buyerCreativeId' when calling adexchangebuyerCreativesGet");
      }

      let pathParams = {
        'accountId': accountId,
        'buyerCreativeId': buyerCreativeId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/creatives/{accountId}/{buyerCreativeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerCreativesInsert operation.
     * @callback module:api/CreativesApi~adexchangebuyerCreativesInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new creative.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Creative} [creative] 
     * @param {module:api/CreativesApi~adexchangebuyerCreativesInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    adexchangebuyerCreativesInsert(opts, callback) {
      opts = opts || {};
      let postBody = opts['creative'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/creatives', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerCreativesList operation.
     * @callback module:api/CreativesApi~adexchangebuyerCreativesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreativesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Array.<Number>} [accountId] When specified, only creatives for the given account ids are returned.
     * @param {Array.<String>} [buyerCreativeId] When specified, only creatives for the given buyer creative ids are returned.
     * @param {module:model/String} [dealsStatusFilter] When specified, only creatives having the given deals status are returned.
     * @param {Number} [maxResults] Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
     * @param {module:model/String} [openAuctionStatusFilter] When specified, only creatives having the given open auction status are returned.
     * @param {String} [pageToken] A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response. Optional.
     * @param {module:api/CreativesApi~adexchangebuyerCreativesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreativesList}
     */
    adexchangebuyerCreativesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'accountId': this.apiClient.buildCollectionParam(opts['accountId'], 'multi'),
        'buyerCreativeId': this.apiClient.buildCollectionParam(opts['buyerCreativeId'], 'multi'),
        'dealsStatusFilter': opts['dealsStatusFilter'],
        'maxResults': opts['maxResults'],
        'openAuctionStatusFilter': opts['openAuctionStatusFilter'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreativesList;
      return this.apiClient.callApi(
        '/creatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerCreativesListDeals operation.
     * @callback module:api/CreativesApi~adexchangebuyerCreativesListDealsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreativeDealIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the external deal ids associated with the creative.
     * @param {Number} accountId The id for the account that will serve this creative.
     * @param {String} buyerCreativeId The buyer-specific id for this creative.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/CreativesApi~adexchangebuyerCreativesListDealsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreativeDealIds}
     */
    adexchangebuyerCreativesListDeals(accountId, buyerCreativeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerCreativesListDeals");
      }
      // verify the required parameter 'buyerCreativeId' is set
      if (buyerCreativeId === undefined || buyerCreativeId === null) {
        throw new Error("Missing the required parameter 'buyerCreativeId' when calling adexchangebuyerCreativesListDeals");
      }

      let pathParams = {
        'accountId': accountId,
        'buyerCreativeId': buyerCreativeId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreativeDealIds;
      return this.apiClient.callApi(
        '/creatives/{accountId}/{buyerCreativeId}/listDeals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerCreativesRemoveDeal operation.
     * @callback module:api/CreativesApi~adexchangebuyerCreativesRemoveDealCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a deal id associated with the creative.
     * @param {Number} accountId The id for the account that will serve this creative.
     * @param {String} buyerCreativeId The buyer-specific id for this creative.
     * @param {String} dealId The id of the deal id to disassociate with this creative.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/CreativesApi~adexchangebuyerCreativesRemoveDealCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adexchangebuyerCreativesRemoveDeal(accountId, buyerCreativeId, dealId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerCreativesRemoveDeal");
      }
      // verify the required parameter 'buyerCreativeId' is set
      if (buyerCreativeId === undefined || buyerCreativeId === null) {
        throw new Error("Missing the required parameter 'buyerCreativeId' when calling adexchangebuyerCreativesRemoveDeal");
      }
      // verify the required parameter 'dealId' is set
      if (dealId === undefined || dealId === null) {
        throw new Error("Missing the required parameter 'dealId' when calling adexchangebuyerCreativesRemoveDeal");
      }

      let pathParams = {
        'accountId': accountId,
        'buyerCreativeId': buyerCreativeId,
        'dealId': dealId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/creatives/{accountId}/{buyerCreativeId}/removeDeal/{dealId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
