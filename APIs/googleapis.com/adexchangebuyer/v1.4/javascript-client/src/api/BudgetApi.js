/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Budget from '../model/Budget';

/**
* Budget service.
* @module api/BudgetApi
* @version v1.4
*/
export default class BudgetApi {

    /**
    * Constructs a new BudgetApi. 
    * @alias module:api/BudgetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adexchangebuyerBudgetGet operation.
     * @callback module:api/BudgetApi~adexchangebuyerBudgetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Budget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the budget information for the adgroup specified by the accountId and billingId.
     * @param {String} accountId The account id to get the budget information for.
     * @param {String} billingId The billing id to get the budget information for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/BudgetApi~adexchangebuyerBudgetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Budget}
     */
    adexchangebuyerBudgetGet(accountId, billingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerBudgetGet");
      }
      // verify the required parameter 'billingId' is set
      if (billingId === undefined || billingId === null) {
        throw new Error("Missing the required parameter 'billingId' when calling adexchangebuyerBudgetGet");
      }

      let pathParams = {
        'accountId': accountId,
        'billingId': billingId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Budget;
      return this.apiClient.callApi(
        '/billinginfo/{accountId}/{billingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerBudgetPatch operation.
     * @callback module:api/BudgetApi~adexchangebuyerBudgetPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Budget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics.
     * @param {String} accountId The account id associated with the budget being updated.
     * @param {String} billingId The billing id associated with the budget being updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Budget} [budget] 
     * @param {module:api/BudgetApi~adexchangebuyerBudgetPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Budget}
     */
    adexchangebuyerBudgetPatch(accountId, billingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['budget'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerBudgetPatch");
      }
      // verify the required parameter 'billingId' is set
      if (billingId === undefined || billingId === null) {
        throw new Error("Missing the required parameter 'billingId' when calling adexchangebuyerBudgetPatch");
      }

      let pathParams = {
        'accountId': accountId,
        'billingId': billingId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Budget;
      return this.apiClient.callApi(
        '/billinginfo/{accountId}/{billingId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerBudgetUpdate operation.
     * @callback module:api/BudgetApi~adexchangebuyerBudgetUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Budget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.
     * @param {String} accountId The account id associated with the budget being updated.
     * @param {String} billingId The billing id associated with the budget being updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Budget} [budget] 
     * @param {module:api/BudgetApi~adexchangebuyerBudgetUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Budget}
     */
    adexchangebuyerBudgetUpdate(accountId, billingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['budget'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyerBudgetUpdate");
      }
      // verify the required parameter 'billingId' is set
      if (billingId === undefined || billingId === null) {
        throw new Error("Missing the required parameter 'billingId' when calling adexchangebuyerBudgetUpdate");
      }

      let pathParams = {
        'accountId': accountId,
        'billingId': billingId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Budget;
      return this.apiClient.callApi(
        '/billinginfo/{accountId}/{billingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
