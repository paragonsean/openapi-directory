/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrdersRequest from '../model/CreateOrdersRequest';
import CreateOrdersResponse from '../model/CreateOrdersResponse';
import GetOrdersResponse from '../model/GetOrdersResponse';
import Proposal from '../model/Proposal';

/**
* Proposals service.
* @module api/ProposalsApi
* @version v1.4
*/
export default class ProposalsApi {

    /**
    * Constructs a new ProposalsApi. 
    * @alias module:api/ProposalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adexchangebuyerProposalsGet operation.
     * @callback module:api/ProposalsApi~adexchangebuyerProposalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a proposal given its id
     * @param {String} proposalId Id of the proposal to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/ProposalsApi~adexchangebuyerProposalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyerProposalsGet(proposalId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyerProposalsGet");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/proposals/{proposalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerProposalsInsert operation.
     * @callback module:api/ProposalsApi~adexchangebuyerProposalsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the given list of proposals
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/CreateOrdersRequest} [createOrdersRequest] 
     * @param {module:api/ProposalsApi~adexchangebuyerProposalsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrdersResponse}
     */
    adexchangebuyerProposalsInsert(opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrdersRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrdersResponse;
      return this.apiClient.callApi(
        '/proposals/insert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerProposalsPatch operation.
     * @callback module:api/ProposalsApi~adexchangebuyerProposalsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the given proposal. This method supports patch semantics.
     * @param {String} proposalId The proposal id to update.
     * @param {String} revisionNumber The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.
     * @param {module:model/String} updateAction The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Proposal} [proposal] 
     * @param {module:api/ProposalsApi~adexchangebuyerProposalsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyerProposalsPatch(proposalId, revisionNumber, updateAction, opts, callback) {
      opts = opts || {};
      let postBody = opts['proposal'];
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyerProposalsPatch");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling adexchangebuyerProposalsPatch");
      }
      // verify the required parameter 'updateAction' is set
      if (updateAction === undefined || updateAction === null) {
        throw new Error("Missing the required parameter 'updateAction' when calling adexchangebuyerProposalsPatch");
      }

      let pathParams = {
        'proposalId': proposalId,
        'revisionNumber': revisionNumber,
        'updateAction': updateAction
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/proposals/{proposalId}/{revisionNumber}/{updateAction}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerProposalsSearch operation.
     * @callback module:api/ProposalsApi~adexchangebuyerProposalsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for proposals using pql query
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [pqlQuery] Query string to retrieve specific proposals.
     * @param {module:api/ProposalsApi~adexchangebuyerProposalsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrdersResponse}
     */
    adexchangebuyerProposalsSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'pqlQuery': opts['pqlQuery']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrdersResponse;
      return this.apiClient.callApi(
        '/proposals/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerProposalsSetupcomplete operation.
     * @callback module:api/ProposalsApi~adexchangebuyerProposalsSetupcompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the given proposal to indicate that setup has been completed.
     * @param {String} proposalId The proposal id for which the setup is complete
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/ProposalsApi~adexchangebuyerProposalsSetupcompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adexchangebuyerProposalsSetupcomplete(proposalId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyerProposalsSetupcomplete");
      }

      let pathParams = {
        'proposalId': proposalId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/proposals/{proposalId}/setupcomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyerProposalsUpdate operation.
     * @callback module:api/ProposalsApi~adexchangebuyerProposalsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the given proposal
     * @param {String} proposalId The proposal id to update.
     * @param {String} revisionNumber The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.
     * @param {module:model/String} updateAction The proposed action to take on the proposal. This field is required and it must be set when updating a proposal.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Proposal} [proposal] 
     * @param {module:api/ProposalsApi~adexchangebuyerProposalsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyerProposalsUpdate(proposalId, revisionNumber, updateAction, opts, callback) {
      opts = opts || {};
      let postBody = opts['proposal'];
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyerProposalsUpdate");
      }
      // verify the required parameter 'revisionNumber' is set
      if (revisionNumber === undefined || revisionNumber === null) {
        throw new Error("Missing the required parameter 'revisionNumber' when calling adexchangebuyerProposalsUpdate");
      }
      // verify the required parameter 'updateAction' is set
      if (updateAction === undefined || updateAction === null) {
        throw new Error("Missing the required parameter 'updateAction' when calling adexchangebuyerProposalsUpdate");
      }

      let pathParams = {
        'proposalId': proposalId,
        'revisionNumber': revisionNumber,
        'updateAction': updateAction
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/proposals/{proposalId}/{revisionNumber}/{updateAction}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
