# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.targeting_value_size import TargetingValueSize
from openapi_server import util


class TargetingValueCreativeSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_formats: List[str]=None, companion_sizes: List[TargetingValueSize]=None, creative_size_type: str=None, native_template: str=None, size: TargetingValueSize=None, skippable_ad_type: str=None):
        """TargetingValueCreativeSize - a model defined in OpenAPI

        :param allowed_formats: The allowed_formats of this TargetingValueCreativeSize.
        :param companion_sizes: The companion_sizes of this TargetingValueCreativeSize.
        :param creative_size_type: The creative_size_type of this TargetingValueCreativeSize.
        :param native_template: The native_template of this TargetingValueCreativeSize.
        :param size: The size of this TargetingValueCreativeSize.
        :param skippable_ad_type: The skippable_ad_type of this TargetingValueCreativeSize.
        """
        self.openapi_types = {
            'allowed_formats': List[str],
            'companion_sizes': List[TargetingValueSize],
            'creative_size_type': str,
            'native_template': str,
            'size': TargetingValueSize,
            'skippable_ad_type': str
        }

        self.attribute_map = {
            'allowed_formats': 'allowedFormats',
            'companion_sizes': 'companionSizes',
            'creative_size_type': 'creativeSizeType',
            'native_template': 'nativeTemplate',
            'size': 'size',
            'skippable_ad_type': 'skippableAdType'
        }

        self._allowed_formats = allowed_formats
        self._companion_sizes = companion_sizes
        self._creative_size_type = creative_size_type
        self._native_template = native_template
        self._size = size
        self._skippable_ad_type = skippable_ad_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetingValueCreativeSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetingValueCreativeSize of this TargetingValueCreativeSize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_formats(self):
        """Gets the allowed_formats of this TargetingValueCreativeSize.

        The formats allowed by the publisher.

        :return: The allowed_formats of this TargetingValueCreativeSize.
        :rtype: List[str]
        """
        return self._allowed_formats

    @allowed_formats.setter
    def allowed_formats(self, allowed_formats):
        """Sets the allowed_formats of this TargetingValueCreativeSize.

        The formats allowed by the publisher.

        :param allowed_formats: The allowed_formats of this TargetingValueCreativeSize.
        :type allowed_formats: List[str]
        """

        self._allowed_formats = allowed_formats

    @property
    def companion_sizes(self):
        """Gets the companion_sizes of this TargetingValueCreativeSize.

        For video size type, the list of companion sizes.

        :return: The companion_sizes of this TargetingValueCreativeSize.
        :rtype: List[TargetingValueSize]
        """
        return self._companion_sizes

    @companion_sizes.setter
    def companion_sizes(self, companion_sizes):
        """Sets the companion_sizes of this TargetingValueCreativeSize.

        For video size type, the list of companion sizes.

        :param companion_sizes: The companion_sizes of this TargetingValueCreativeSize.
        :type companion_sizes: List[TargetingValueSize]
        """

        self._companion_sizes = companion_sizes

    @property
    def creative_size_type(self):
        """Gets the creative_size_type of this TargetingValueCreativeSize.

        The Creative size type.

        :return: The creative_size_type of this TargetingValueCreativeSize.
        :rtype: str
        """
        return self._creative_size_type

    @creative_size_type.setter
    def creative_size_type(self, creative_size_type):
        """Sets the creative_size_type of this TargetingValueCreativeSize.

        The Creative size type.

        :param creative_size_type: The creative_size_type of this TargetingValueCreativeSize.
        :type creative_size_type: str
        """

        self._creative_size_type = creative_size_type

    @property
    def native_template(self):
        """Gets the native_template of this TargetingValueCreativeSize.

        The native template for native ad.

        :return: The native_template of this TargetingValueCreativeSize.
        :rtype: str
        """
        return self._native_template

    @native_template.setter
    def native_template(self, native_template):
        """Sets the native_template of this TargetingValueCreativeSize.

        The native template for native ad.

        :param native_template: The native_template of this TargetingValueCreativeSize.
        :type native_template: str
        """

        self._native_template = native_template

    @property
    def size(self):
        """Gets the size of this TargetingValueCreativeSize.


        :return: The size of this TargetingValueCreativeSize.
        :rtype: TargetingValueSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TargetingValueCreativeSize.


        :param size: The size of this TargetingValueCreativeSize.
        :type size: TargetingValueSize
        """

        self._size = size

    @property
    def skippable_ad_type(self):
        """Gets the skippable_ad_type of this TargetingValueCreativeSize.

        The skippable ad type for video size.

        :return: The skippable_ad_type of this TargetingValueCreativeSize.
        :rtype: str
        """
        return self._skippable_ad_type

    @skippable_ad_type.setter
    def skippable_ad_type(self, skippable_ad_type):
        """Sets the skippable_ad_type of this TargetingValueCreativeSize.

        The skippable ad type for video size.

        :param skippable_ad_type: The skippable_ad_type of this TargetingValueCreativeSize.
        :type skippable_ad_type: str
        """

        self._skippable_ad_type = skippable_ad_type
