# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pretargeting_config_dimensions_inner import PretargetingConfigDimensionsInner
from openapi_server.models.pretargeting_config_excluded_placements_inner import PretargetingConfigExcludedPlacementsInner
from openapi_server.models.pretargeting_config_video_player_sizes_inner import PretargetingConfigVideoPlayerSizesInner
from openapi_server import util


class PretargetingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_id: str=None, config_id: str=None, config_name: str=None, creative_type: List[str]=None, dimensions: List[PretargetingConfigDimensionsInner]=None, excluded_content_labels: List[str]=None, excluded_geo_criteria_ids: List[str]=None, excluded_placements: List[PretargetingConfigExcludedPlacementsInner]=None, excluded_user_lists: List[str]=None, excluded_verticals: List[str]=None, geo_criteria_ids: List[str]=None, is_active: bool=None, kind: str='adexchangebuyer#pretargetingConfig', languages: List[str]=None, maximum_qps: str=None, minimum_viewability_decile: int=None, mobile_carriers: List[str]=None, mobile_devices: List[str]=None, mobile_operating_system_versions: List[str]=None, placements: List[PretargetingConfigExcludedPlacementsInner]=None, platforms: List[str]=None, supported_creative_attributes: List[str]=None, user_identifier_data_required: List[str]=None, user_lists: List[str]=None, vendor_types: List[str]=None, verticals: List[str]=None, video_player_sizes: List[PretargetingConfigVideoPlayerSizesInner]=None):
        """PretargetingConfig - a model defined in OpenAPI

        :param billing_id: The billing_id of this PretargetingConfig.
        :param config_id: The config_id of this PretargetingConfig.
        :param config_name: The config_name of this PretargetingConfig.
        :param creative_type: The creative_type of this PretargetingConfig.
        :param dimensions: The dimensions of this PretargetingConfig.
        :param excluded_content_labels: The excluded_content_labels of this PretargetingConfig.
        :param excluded_geo_criteria_ids: The excluded_geo_criteria_ids of this PretargetingConfig.
        :param excluded_placements: The excluded_placements of this PretargetingConfig.
        :param excluded_user_lists: The excluded_user_lists of this PretargetingConfig.
        :param excluded_verticals: The excluded_verticals of this PretargetingConfig.
        :param geo_criteria_ids: The geo_criteria_ids of this PretargetingConfig.
        :param is_active: The is_active of this PretargetingConfig.
        :param kind: The kind of this PretargetingConfig.
        :param languages: The languages of this PretargetingConfig.
        :param maximum_qps: The maximum_qps of this PretargetingConfig.
        :param minimum_viewability_decile: The minimum_viewability_decile of this PretargetingConfig.
        :param mobile_carriers: The mobile_carriers of this PretargetingConfig.
        :param mobile_devices: The mobile_devices of this PretargetingConfig.
        :param mobile_operating_system_versions: The mobile_operating_system_versions of this PretargetingConfig.
        :param placements: The placements of this PretargetingConfig.
        :param platforms: The platforms of this PretargetingConfig.
        :param supported_creative_attributes: The supported_creative_attributes of this PretargetingConfig.
        :param user_identifier_data_required: The user_identifier_data_required of this PretargetingConfig.
        :param user_lists: The user_lists of this PretargetingConfig.
        :param vendor_types: The vendor_types of this PretargetingConfig.
        :param verticals: The verticals of this PretargetingConfig.
        :param video_player_sizes: The video_player_sizes of this PretargetingConfig.
        """
        self.openapi_types = {
            'billing_id': str,
            'config_id': str,
            'config_name': str,
            'creative_type': List[str],
            'dimensions': List[PretargetingConfigDimensionsInner],
            'excluded_content_labels': List[str],
            'excluded_geo_criteria_ids': List[str],
            'excluded_placements': List[PretargetingConfigExcludedPlacementsInner],
            'excluded_user_lists': List[str],
            'excluded_verticals': List[str],
            'geo_criteria_ids': List[str],
            'is_active': bool,
            'kind': str,
            'languages': List[str],
            'maximum_qps': str,
            'minimum_viewability_decile': int,
            'mobile_carriers': List[str],
            'mobile_devices': List[str],
            'mobile_operating_system_versions': List[str],
            'placements': List[PretargetingConfigExcludedPlacementsInner],
            'platforms': List[str],
            'supported_creative_attributes': List[str],
            'user_identifier_data_required': List[str],
            'user_lists': List[str],
            'vendor_types': List[str],
            'verticals': List[str],
            'video_player_sizes': List[PretargetingConfigVideoPlayerSizesInner]
        }

        self.attribute_map = {
            'billing_id': 'billingId',
            'config_id': 'configId',
            'config_name': 'configName',
            'creative_type': 'creativeType',
            'dimensions': 'dimensions',
            'excluded_content_labels': 'excludedContentLabels',
            'excluded_geo_criteria_ids': 'excludedGeoCriteriaIds',
            'excluded_placements': 'excludedPlacements',
            'excluded_user_lists': 'excludedUserLists',
            'excluded_verticals': 'excludedVerticals',
            'geo_criteria_ids': 'geoCriteriaIds',
            'is_active': 'isActive',
            'kind': 'kind',
            'languages': 'languages',
            'maximum_qps': 'maximumQps',
            'minimum_viewability_decile': 'minimumViewabilityDecile',
            'mobile_carriers': 'mobileCarriers',
            'mobile_devices': 'mobileDevices',
            'mobile_operating_system_versions': 'mobileOperatingSystemVersions',
            'placements': 'placements',
            'platforms': 'platforms',
            'supported_creative_attributes': 'supportedCreativeAttributes',
            'user_identifier_data_required': 'userIdentifierDataRequired',
            'user_lists': 'userLists',
            'vendor_types': 'vendorTypes',
            'verticals': 'verticals',
            'video_player_sizes': 'videoPlayerSizes'
        }

        self._billing_id = billing_id
        self._config_id = config_id
        self._config_name = config_name
        self._creative_type = creative_type
        self._dimensions = dimensions
        self._excluded_content_labels = excluded_content_labels
        self._excluded_geo_criteria_ids = excluded_geo_criteria_ids
        self._excluded_placements = excluded_placements
        self._excluded_user_lists = excluded_user_lists
        self._excluded_verticals = excluded_verticals
        self._geo_criteria_ids = geo_criteria_ids
        self._is_active = is_active
        self._kind = kind
        self._languages = languages
        self._maximum_qps = maximum_qps
        self._minimum_viewability_decile = minimum_viewability_decile
        self._mobile_carriers = mobile_carriers
        self._mobile_devices = mobile_devices
        self._mobile_operating_system_versions = mobile_operating_system_versions
        self._placements = placements
        self._platforms = platforms
        self._supported_creative_attributes = supported_creative_attributes
        self._user_identifier_data_required = user_identifier_data_required
        self._user_lists = user_lists
        self._vendor_types = vendor_types
        self._verticals = verticals
        self._video_player_sizes = video_player_sizes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PretargetingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PretargetingConfig of this PretargetingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_id(self):
        """Gets the billing_id of this PretargetingConfig.

        The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.

        :return: The billing_id of this PretargetingConfig.
        :rtype: str
        """
        return self._billing_id

    @billing_id.setter
    def billing_id(self, billing_id):
        """Sets the billing_id of this PretargetingConfig.

        The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.

        :param billing_id: The billing_id of this PretargetingConfig.
        :type billing_id: str
        """

        self._billing_id = billing_id

    @property
    def config_id(self):
        """Gets the config_id of this PretargetingConfig.

        The config id; generated automatically. Leave this field blank for insert requests.

        :return: The config_id of this PretargetingConfig.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this PretargetingConfig.

        The config id; generated automatically. Leave this field blank for insert requests.

        :param config_id: The config_id of this PretargetingConfig.
        :type config_id: str
        """

        self._config_id = config_id

    @property
    def config_name(self):
        """Gets the config_name of this PretargetingConfig.

        The name of the config. Must be unique. Required for all requests.

        :return: The config_name of this PretargetingConfig.
        :rtype: str
        """
        return self._config_name

    @config_name.setter
    def config_name(self, config_name):
        """Sets the config_name of this PretargetingConfig.

        The name of the config. Must be unique. Required for all requests.

        :param config_name: The config_name of this PretargetingConfig.
        :type config_name: str
        """

        self._config_name = config_name

    @property
    def creative_type(self):
        """Gets the creative_type of this PretargetingConfig.

        List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.

        :return: The creative_type of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._creative_type

    @creative_type.setter
    def creative_type(self, creative_type):
        """Sets the creative_type of this PretargetingConfig.

        List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.

        :param creative_type: The creative_type of this PretargetingConfig.
        :type creative_type: List[str]
        """

        self._creative_type = creative_type

    @property
    def dimensions(self):
        """Gets the dimensions of this PretargetingConfig.

        Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.

        :return: The dimensions of this PretargetingConfig.
        :rtype: List[PretargetingConfigDimensionsInner]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this PretargetingConfig.

        Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.

        :param dimensions: The dimensions of this PretargetingConfig.
        :type dimensions: List[PretargetingConfigDimensionsInner]
        """

        self._dimensions = dimensions

    @property
    def excluded_content_labels(self):
        """Gets the excluded_content_labels of this PretargetingConfig.

        Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.

        :return: The excluded_content_labels of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._excluded_content_labels

    @excluded_content_labels.setter
    def excluded_content_labels(self, excluded_content_labels):
        """Sets the excluded_content_labels of this PretargetingConfig.

        Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.

        :param excluded_content_labels: The excluded_content_labels of this PretargetingConfig.
        :type excluded_content_labels: List[str]
        """

        self._excluded_content_labels = excluded_content_labels

    @property
    def excluded_geo_criteria_ids(self):
        """Gets the excluded_geo_criteria_ids of this PretargetingConfig.

        Requests containing any of these geo criteria ids will not match.

        :return: The excluded_geo_criteria_ids of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._excluded_geo_criteria_ids

    @excluded_geo_criteria_ids.setter
    def excluded_geo_criteria_ids(self, excluded_geo_criteria_ids):
        """Sets the excluded_geo_criteria_ids of this PretargetingConfig.

        Requests containing any of these geo criteria ids will not match.

        :param excluded_geo_criteria_ids: The excluded_geo_criteria_ids of this PretargetingConfig.
        :type excluded_geo_criteria_ids: List[str]
        """

        self._excluded_geo_criteria_ids = excluded_geo_criteria_ids

    @property
    def excluded_placements(self):
        """Gets the excluded_placements of this PretargetingConfig.

        Requests containing any of these placements will not match.

        :return: The excluded_placements of this PretargetingConfig.
        :rtype: List[PretargetingConfigExcludedPlacementsInner]
        """
        return self._excluded_placements

    @excluded_placements.setter
    def excluded_placements(self, excluded_placements):
        """Sets the excluded_placements of this PretargetingConfig.

        Requests containing any of these placements will not match.

        :param excluded_placements: The excluded_placements of this PretargetingConfig.
        :type excluded_placements: List[PretargetingConfigExcludedPlacementsInner]
        """

        self._excluded_placements = excluded_placements

    @property
    def excluded_user_lists(self):
        """Gets the excluded_user_lists of this PretargetingConfig.

        Requests containing any of these users list ids will not match.

        :return: The excluded_user_lists of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._excluded_user_lists

    @excluded_user_lists.setter
    def excluded_user_lists(self, excluded_user_lists):
        """Sets the excluded_user_lists of this PretargetingConfig.

        Requests containing any of these users list ids will not match.

        :param excluded_user_lists: The excluded_user_lists of this PretargetingConfig.
        :type excluded_user_lists: List[str]
        """

        self._excluded_user_lists = excluded_user_lists

    @property
    def excluded_verticals(self):
        """Gets the excluded_verticals of this PretargetingConfig.

        Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.

        :return: The excluded_verticals of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._excluded_verticals

    @excluded_verticals.setter
    def excluded_verticals(self, excluded_verticals):
        """Sets the excluded_verticals of this PretargetingConfig.

        Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.

        :param excluded_verticals: The excluded_verticals of this PretargetingConfig.
        :type excluded_verticals: List[str]
        """

        self._excluded_verticals = excluded_verticals

    @property
    def geo_criteria_ids(self):
        """Gets the geo_criteria_ids of this PretargetingConfig.

        Requests containing any of these geo criteria ids will match.

        :return: The geo_criteria_ids of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._geo_criteria_ids

    @geo_criteria_ids.setter
    def geo_criteria_ids(self, geo_criteria_ids):
        """Sets the geo_criteria_ids of this PretargetingConfig.

        Requests containing any of these geo criteria ids will match.

        :param geo_criteria_ids: The geo_criteria_ids of this PretargetingConfig.
        :type geo_criteria_ids: List[str]
        """

        self._geo_criteria_ids = geo_criteria_ids

    @property
    def is_active(self):
        """Gets the is_active of this PretargetingConfig.

        Whether this config is active. Required for all requests.

        :return: The is_active of this PretargetingConfig.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PretargetingConfig.

        Whether this config is active. Required for all requests.

        :param is_active: The is_active of this PretargetingConfig.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def kind(self):
        """Gets the kind of this PretargetingConfig.

        The kind of the resource, i.e. \"adexchangebuyer#pretargetingConfig\".

        :return: The kind of this PretargetingConfig.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PretargetingConfig.

        The kind of the resource, i.e. \"adexchangebuyer#pretargetingConfig\".

        :param kind: The kind of this PretargetingConfig.
        :type kind: str
        """

        self._kind = kind

    @property
    def languages(self):
        """Gets the languages of this PretargetingConfig.

        Request containing any of these language codes will match.

        :return: The languages of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this PretargetingConfig.

        Request containing any of these language codes will match.

        :param languages: The languages of this PretargetingConfig.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def maximum_qps(self):
        """Gets the maximum_qps of this PretargetingConfig.

        The maximum QPS allocated to this pretargeting configuration, used for pretargeting-level QPS limits. By default, this is not set, which indicates that there is no QPS limit at the configuration level (a global or account-level limit may still be imposed).

        :return: The maximum_qps of this PretargetingConfig.
        :rtype: str
        """
        return self._maximum_qps

    @maximum_qps.setter
    def maximum_qps(self, maximum_qps):
        """Sets the maximum_qps of this PretargetingConfig.

        The maximum QPS allocated to this pretargeting configuration, used for pretargeting-level QPS limits. By default, this is not set, which indicates that there is no QPS limit at the configuration level (a global or account-level limit may still be imposed).

        :param maximum_qps: The maximum_qps of this PretargetingConfig.
        :type maximum_qps: str
        """

        self._maximum_qps = maximum_qps

    @property
    def minimum_viewability_decile(self):
        """Gets the minimum_viewability_decile of this PretargetingConfig.

        Requests where the predicted viewability is below the specified decile will not match. E.g. if the buyer sets this value to 5, requests from slots where the predicted viewability is below 50% will not match. If the predicted viewability is unknown this field will be ignored.

        :return: The minimum_viewability_decile of this PretargetingConfig.
        :rtype: int
        """
        return self._minimum_viewability_decile

    @minimum_viewability_decile.setter
    def minimum_viewability_decile(self, minimum_viewability_decile):
        """Sets the minimum_viewability_decile of this PretargetingConfig.

        Requests where the predicted viewability is below the specified decile will not match. E.g. if the buyer sets this value to 5, requests from slots where the predicted viewability is below 50% will not match. If the predicted viewability is unknown this field will be ignored.

        :param minimum_viewability_decile: The minimum_viewability_decile of this PretargetingConfig.
        :type minimum_viewability_decile: int
        """

        self._minimum_viewability_decile = minimum_viewability_decile

    @property
    def mobile_carriers(self):
        """Gets the mobile_carriers of this PretargetingConfig.

        Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.

        :return: The mobile_carriers of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._mobile_carriers

    @mobile_carriers.setter
    def mobile_carriers(self, mobile_carriers):
        """Sets the mobile_carriers of this PretargetingConfig.

        Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.

        :param mobile_carriers: The mobile_carriers of this PretargetingConfig.
        :type mobile_carriers: List[str]
        """

        self._mobile_carriers = mobile_carriers

    @property
    def mobile_devices(self):
        """Gets the mobile_devices of this PretargetingConfig.

        Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.

        :return: The mobile_devices of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._mobile_devices

    @mobile_devices.setter
    def mobile_devices(self, mobile_devices):
        """Sets the mobile_devices of this PretargetingConfig.

        Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.

        :param mobile_devices: The mobile_devices of this PretargetingConfig.
        :type mobile_devices: List[str]
        """

        self._mobile_devices = mobile_devices

    @property
    def mobile_operating_system_versions(self):
        """Gets the mobile_operating_system_versions of this PretargetingConfig.

        Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.

        :return: The mobile_operating_system_versions of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._mobile_operating_system_versions

    @mobile_operating_system_versions.setter
    def mobile_operating_system_versions(self, mobile_operating_system_versions):
        """Sets the mobile_operating_system_versions of this PretargetingConfig.

        Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.

        :param mobile_operating_system_versions: The mobile_operating_system_versions of this PretargetingConfig.
        :type mobile_operating_system_versions: List[str]
        """

        self._mobile_operating_system_versions = mobile_operating_system_versions

    @property
    def placements(self):
        """Gets the placements of this PretargetingConfig.

        Requests containing any of these placements will match.

        :return: The placements of this PretargetingConfig.
        :rtype: List[PretargetingConfigExcludedPlacementsInner]
        """
        return self._placements

    @placements.setter
    def placements(self, placements):
        """Sets the placements of this PretargetingConfig.

        Requests containing any of these placements will match.

        :param placements: The placements of this PretargetingConfig.
        :type placements: List[PretargetingConfigExcludedPlacementsInner]
        """

        self._placements = placements

    @property
    def platforms(self):
        """Gets the platforms of this PretargetingConfig.

        Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.

        :return: The platforms of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this PretargetingConfig.

        Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.

        :param platforms: The platforms of this PretargetingConfig.
        :type platforms: List[str]
        """

        self._platforms = platforms

    @property
    def supported_creative_attributes(self):
        """Gets the supported_creative_attributes of this PretargetingConfig.

        Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.

        :return: The supported_creative_attributes of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._supported_creative_attributes

    @supported_creative_attributes.setter
    def supported_creative_attributes(self, supported_creative_attributes):
        """Sets the supported_creative_attributes of this PretargetingConfig.

        Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.

        :param supported_creative_attributes: The supported_creative_attributes of this PretargetingConfig.
        :type supported_creative_attributes: List[str]
        """

        self._supported_creative_attributes = supported_creative_attributes

    @property
    def user_identifier_data_required(self):
        """Gets the user_identifier_data_required of this PretargetingConfig.

        Requests containing the specified type of user data will match. Possible values are HOSTED_MATCH_DATA, which means the request is cookie-targetable and has a match in the buyer's hosted match table, and COOKIE_OR_IDFA, which means the request has either a targetable cookie or an iOS IDFA.

        :return: The user_identifier_data_required of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._user_identifier_data_required

    @user_identifier_data_required.setter
    def user_identifier_data_required(self, user_identifier_data_required):
        """Sets the user_identifier_data_required of this PretargetingConfig.

        Requests containing the specified type of user data will match. Possible values are HOSTED_MATCH_DATA, which means the request is cookie-targetable and has a match in the buyer's hosted match table, and COOKIE_OR_IDFA, which means the request has either a targetable cookie or an iOS IDFA.

        :param user_identifier_data_required: The user_identifier_data_required of this PretargetingConfig.
        :type user_identifier_data_required: List[str]
        """

        self._user_identifier_data_required = user_identifier_data_required

    @property
    def user_lists(self):
        """Gets the user_lists of this PretargetingConfig.

        Requests containing any of these user list ids will match.

        :return: The user_lists of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._user_lists

    @user_lists.setter
    def user_lists(self, user_lists):
        """Sets the user_lists of this PretargetingConfig.

        Requests containing any of these user list ids will match.

        :param user_lists: The user_lists of this PretargetingConfig.
        :type user_lists: List[str]
        """

        self._user_lists = user_lists

    @property
    def vendor_types(self):
        """Gets the vendor_types of this PretargetingConfig.

        Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.

        :return: The vendor_types of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._vendor_types

    @vendor_types.setter
    def vendor_types(self, vendor_types):
        """Sets the vendor_types of this PretargetingConfig.

        Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.

        :param vendor_types: The vendor_types of this PretargetingConfig.
        :type vendor_types: List[str]
        """

        self._vendor_types = vendor_types

    @property
    def verticals(self):
        """Gets the verticals of this PretargetingConfig.

        Requests containing any of these vertical ids will match.

        :return: The verticals of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._verticals

    @verticals.setter
    def verticals(self, verticals):
        """Sets the verticals of this PretargetingConfig.

        Requests containing any of these vertical ids will match.

        :param verticals: The verticals of this PretargetingConfig.
        :type verticals: List[str]
        """

        self._verticals = verticals

    @property
    def video_player_sizes(self):
        """Gets the video_player_sizes of this PretargetingConfig.

        Video requests satisfying any of these player size constraints will match.

        :return: The video_player_sizes of this PretargetingConfig.
        :rtype: List[PretargetingConfigVideoPlayerSizesInner]
        """
        return self._video_player_sizes

    @video_player_sizes.setter
    def video_player_sizes(self, video_player_sizes):
        """Sets the video_player_sizes of this PretargetingConfig.

        Video requests satisfying any of these player size constraints will match.

        :param video_player_sizes: The video_player_sizes of this PretargetingConfig.
        :type video_player_sizes: List[PretargetingConfigVideoPlayerSizesInner]
        """

        self._video_player_sizes = video_player_sizes
