# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server import util


class PublisherProvidedForecast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: List[Dimension]=None, weekly_impressions: str=None, weekly_uniques: str=None):
        """PublisherProvidedForecast - a model defined in OpenAPI

        :param dimensions: The dimensions of this PublisherProvidedForecast.
        :param weekly_impressions: The weekly_impressions of this PublisherProvidedForecast.
        :param weekly_uniques: The weekly_uniques of this PublisherProvidedForecast.
        """
        self.openapi_types = {
            'dimensions': List[Dimension],
            'weekly_impressions': str,
            'weekly_uniques': str
        }

        self.attribute_map = {
            'dimensions': 'dimensions',
            'weekly_impressions': 'weeklyImpressions',
            'weekly_uniques': 'weeklyUniques'
        }

        self._dimensions = dimensions
        self._weekly_impressions = weekly_impressions
        self._weekly_uniques = weekly_uniques

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublisherProvidedForecast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublisherProvidedForecast of this PublisherProvidedForecast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this PublisherProvidedForecast.

        Publisher provided dimensions. E.g. geo, sizes etc...

        :return: The dimensions of this PublisherProvidedForecast.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this PublisherProvidedForecast.

        Publisher provided dimensions. E.g. geo, sizes etc...

        :param dimensions: The dimensions of this PublisherProvidedForecast.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def weekly_impressions(self):
        """Gets the weekly_impressions of this PublisherProvidedForecast.

        Publisher provided weekly impressions.

        :return: The weekly_impressions of this PublisherProvidedForecast.
        :rtype: str
        """
        return self._weekly_impressions

    @weekly_impressions.setter
    def weekly_impressions(self, weekly_impressions):
        """Sets the weekly_impressions of this PublisherProvidedForecast.

        Publisher provided weekly impressions.

        :param weekly_impressions: The weekly_impressions of this PublisherProvidedForecast.
        :type weekly_impressions: str
        """

        self._weekly_impressions = weekly_impressions

    @property
    def weekly_uniques(self):
        """Gets the weekly_uniques of this PublisherProvidedForecast.

        Publisher provided weekly uniques.

        :return: The weekly_uniques of this PublisherProvidedForecast.
        :rtype: str
        """
        return self._weekly_uniques

    @weekly_uniques.setter
    def weekly_uniques(self, weekly_uniques):
        """Sets the weekly_uniques of this PublisherProvidedForecast.

        Publisher provided weekly uniques.

        :param weekly_uniques: The weekly_uniques of this PublisherProvidedForecast.
        :type weekly_uniques: str
        """

        self._weekly_uniques = weekly_uniques
