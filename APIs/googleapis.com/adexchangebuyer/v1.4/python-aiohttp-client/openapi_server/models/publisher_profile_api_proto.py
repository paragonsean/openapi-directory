# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mobile_application import MobileApplication
from openapi_server.models.publisher_provided_forecast import PublisherProvidedForecast
from openapi_server.models.seller import Seller
from openapi_server import util


class PublisherProfileApiProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, buyer_pitch_statement: str=None, direct_contact: str=None, exchange: str=None, forecast_inventory: str=None, google_plus_link: str=None, is_parent: bool=None, is_published: bool=None, kind: str='adexchangebuyer#publisherProfileApiProto', logo_url: str=None, media_kit_link: str=None, name: str=None, overview: str=None, profile_id: int=None, programmatic_contact: str=None, publisher_app_ids: List[str]=None, publisher_apps: List[MobileApplication]=None, publisher_domains: List[str]=None, publisher_profile_id: str=None, publisher_provided_forecast: PublisherProvidedForecast=None, rate_card_info_link: str=None, sample_page_link: str=None, seller: Seller=None, state: str=None, top_headlines: List[str]=None):
        """PublisherProfileApiProto - a model defined in OpenAPI

        :param audience: The audience of this PublisherProfileApiProto.
        :param buyer_pitch_statement: The buyer_pitch_statement of this PublisherProfileApiProto.
        :param direct_contact: The direct_contact of this PublisherProfileApiProto.
        :param exchange: The exchange of this PublisherProfileApiProto.
        :param forecast_inventory: The forecast_inventory of this PublisherProfileApiProto.
        :param google_plus_link: The google_plus_link of this PublisherProfileApiProto.
        :param is_parent: The is_parent of this PublisherProfileApiProto.
        :param is_published: The is_published of this PublisherProfileApiProto.
        :param kind: The kind of this PublisherProfileApiProto.
        :param logo_url: The logo_url of this PublisherProfileApiProto.
        :param media_kit_link: The media_kit_link of this PublisherProfileApiProto.
        :param name: The name of this PublisherProfileApiProto.
        :param overview: The overview of this PublisherProfileApiProto.
        :param profile_id: The profile_id of this PublisherProfileApiProto.
        :param programmatic_contact: The programmatic_contact of this PublisherProfileApiProto.
        :param publisher_app_ids: The publisher_app_ids of this PublisherProfileApiProto.
        :param publisher_apps: The publisher_apps of this PublisherProfileApiProto.
        :param publisher_domains: The publisher_domains of this PublisherProfileApiProto.
        :param publisher_profile_id: The publisher_profile_id of this PublisherProfileApiProto.
        :param publisher_provided_forecast: The publisher_provided_forecast of this PublisherProfileApiProto.
        :param rate_card_info_link: The rate_card_info_link of this PublisherProfileApiProto.
        :param sample_page_link: The sample_page_link of this PublisherProfileApiProto.
        :param seller: The seller of this PublisherProfileApiProto.
        :param state: The state of this PublisherProfileApiProto.
        :param top_headlines: The top_headlines of this PublisherProfileApiProto.
        """
        self.openapi_types = {
            'audience': str,
            'buyer_pitch_statement': str,
            'direct_contact': str,
            'exchange': str,
            'forecast_inventory': str,
            'google_plus_link': str,
            'is_parent': bool,
            'is_published': bool,
            'kind': str,
            'logo_url': str,
            'media_kit_link': str,
            'name': str,
            'overview': str,
            'profile_id': int,
            'programmatic_contact': str,
            'publisher_app_ids': List[str],
            'publisher_apps': List[MobileApplication],
            'publisher_domains': List[str],
            'publisher_profile_id': str,
            'publisher_provided_forecast': PublisherProvidedForecast,
            'rate_card_info_link': str,
            'sample_page_link': str,
            'seller': Seller,
            'state': str,
            'top_headlines': List[str]
        }

        self.attribute_map = {
            'audience': 'audience',
            'buyer_pitch_statement': 'buyerPitchStatement',
            'direct_contact': 'directContact',
            'exchange': 'exchange',
            'forecast_inventory': 'forecastInventory',
            'google_plus_link': 'googlePlusLink',
            'is_parent': 'isParent',
            'is_published': 'isPublished',
            'kind': 'kind',
            'logo_url': 'logoUrl',
            'media_kit_link': 'mediaKitLink',
            'name': 'name',
            'overview': 'overview',
            'profile_id': 'profileId',
            'programmatic_contact': 'programmaticContact',
            'publisher_app_ids': 'publisherAppIds',
            'publisher_apps': 'publisherApps',
            'publisher_domains': 'publisherDomains',
            'publisher_profile_id': 'publisherProfileId',
            'publisher_provided_forecast': 'publisherProvidedForecast',
            'rate_card_info_link': 'rateCardInfoLink',
            'sample_page_link': 'samplePageLink',
            'seller': 'seller',
            'state': 'state',
            'top_headlines': 'topHeadlines'
        }

        self._audience = audience
        self._buyer_pitch_statement = buyer_pitch_statement
        self._direct_contact = direct_contact
        self._exchange = exchange
        self._forecast_inventory = forecast_inventory
        self._google_plus_link = google_plus_link
        self._is_parent = is_parent
        self._is_published = is_published
        self._kind = kind
        self._logo_url = logo_url
        self._media_kit_link = media_kit_link
        self._name = name
        self._overview = overview
        self._profile_id = profile_id
        self._programmatic_contact = programmatic_contact
        self._publisher_app_ids = publisher_app_ids
        self._publisher_apps = publisher_apps
        self._publisher_domains = publisher_domains
        self._publisher_profile_id = publisher_profile_id
        self._publisher_provided_forecast = publisher_provided_forecast
        self._rate_card_info_link = rate_card_info_link
        self._sample_page_link = sample_page_link
        self._seller = seller
        self._state = state
        self._top_headlines = top_headlines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublisherProfileApiProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublisherProfileApiProto of this PublisherProfileApiProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this PublisherProfileApiProto.

        Publisher provided info on its audience.

        :return: The audience of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this PublisherProfileApiProto.

        Publisher provided info on its audience.

        :param audience: The audience of this PublisherProfileApiProto.
        :type audience: str
        """

        self._audience = audience

    @property
    def buyer_pitch_statement(self):
        """Gets the buyer_pitch_statement of this PublisherProfileApiProto.

        A pitch statement for the buyer

        :return: The buyer_pitch_statement of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._buyer_pitch_statement

    @buyer_pitch_statement.setter
    def buyer_pitch_statement(self, buyer_pitch_statement):
        """Sets the buyer_pitch_statement of this PublisherProfileApiProto.

        A pitch statement for the buyer

        :param buyer_pitch_statement: The buyer_pitch_statement of this PublisherProfileApiProto.
        :type buyer_pitch_statement: str
        """

        self._buyer_pitch_statement = buyer_pitch_statement

    @property
    def direct_contact(self):
        """Gets the direct_contact of this PublisherProfileApiProto.

        Direct contact for the publisher profile.

        :return: The direct_contact of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._direct_contact

    @direct_contact.setter
    def direct_contact(self, direct_contact):
        """Sets the direct_contact of this PublisherProfileApiProto.

        Direct contact for the publisher profile.

        :param direct_contact: The direct_contact of this PublisherProfileApiProto.
        :type direct_contact: str
        """

        self._direct_contact = direct_contact

    @property
    def exchange(self):
        """Gets the exchange of this PublisherProfileApiProto.

        Exchange where this publisher profile is from. E.g. AdX, Rubicon etc...

        :return: The exchange of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this PublisherProfileApiProto.

        Exchange where this publisher profile is from. E.g. AdX, Rubicon etc...

        :param exchange: The exchange of this PublisherProfileApiProto.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def forecast_inventory(self):
        """Gets the forecast_inventory of this PublisherProfileApiProto.


        :return: The forecast_inventory of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._forecast_inventory

    @forecast_inventory.setter
    def forecast_inventory(self, forecast_inventory):
        """Sets the forecast_inventory of this PublisherProfileApiProto.


        :param forecast_inventory: The forecast_inventory of this PublisherProfileApiProto.
        :type forecast_inventory: str
        """

        self._forecast_inventory = forecast_inventory

    @property
    def google_plus_link(self):
        """Gets the google_plus_link of this PublisherProfileApiProto.

        Link to publisher's Google+ page.

        :return: The google_plus_link of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._google_plus_link

    @google_plus_link.setter
    def google_plus_link(self, google_plus_link):
        """Sets the google_plus_link of this PublisherProfileApiProto.

        Link to publisher's Google+ page.

        :param google_plus_link: The google_plus_link of this PublisherProfileApiProto.
        :type google_plus_link: str
        """

        self._google_plus_link = google_plus_link

    @property
    def is_parent(self):
        """Gets the is_parent of this PublisherProfileApiProto.

        True, if this is the parent profile, which represents all domains owned by the publisher.

        :return: The is_parent of this PublisherProfileApiProto.
        :rtype: bool
        """
        return self._is_parent

    @is_parent.setter
    def is_parent(self, is_parent):
        """Sets the is_parent of this PublisherProfileApiProto.

        True, if this is the parent profile, which represents all domains owned by the publisher.

        :param is_parent: The is_parent of this PublisherProfileApiProto.
        :type is_parent: bool
        """

        self._is_parent = is_parent

    @property
    def is_published(self):
        """Gets the is_published of this PublisherProfileApiProto.

        True, if this profile is published. Deprecated for state.

        :return: The is_published of this PublisherProfileApiProto.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this PublisherProfileApiProto.

        True, if this profile is published. Deprecated for state.

        :param is_published: The is_published of this PublisherProfileApiProto.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def kind(self):
        """Gets the kind of this PublisherProfileApiProto.

        Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#publisherProfileApiProto\".

        :return: The kind of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PublisherProfileApiProto.

        Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#publisherProfileApiProto\".

        :param kind: The kind of this PublisherProfileApiProto.
        :type kind: str
        """

        self._kind = kind

    @property
    def logo_url(self):
        """Gets the logo_url of this PublisherProfileApiProto.

        The url to the logo for the publisher.

        :return: The logo_url of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PublisherProfileApiProto.

        The url to the logo for the publisher.

        :param logo_url: The logo_url of this PublisherProfileApiProto.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def media_kit_link(self):
        """Gets the media_kit_link of this PublisherProfileApiProto.

        The url for additional marketing and sales materials.

        :return: The media_kit_link of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._media_kit_link

    @media_kit_link.setter
    def media_kit_link(self, media_kit_link):
        """Sets the media_kit_link of this PublisherProfileApiProto.

        The url for additional marketing and sales materials.

        :param media_kit_link: The media_kit_link of this PublisherProfileApiProto.
        :type media_kit_link: str
        """

        self._media_kit_link = media_kit_link

    @property
    def name(self):
        """Gets the name of this PublisherProfileApiProto.


        :return: The name of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublisherProfileApiProto.


        :param name: The name of this PublisherProfileApiProto.
        :type name: str
        """

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this PublisherProfileApiProto.

        Publisher provided overview.

        :return: The overview of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this PublisherProfileApiProto.

        Publisher provided overview.

        :param overview: The overview of this PublisherProfileApiProto.
        :type overview: str
        """

        self._overview = overview

    @property
    def profile_id(self):
        """Gets the profile_id of this PublisherProfileApiProto.

        The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher.

        :return: The profile_id of this PublisherProfileApiProto.
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this PublisherProfileApiProto.

        The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher.

        :param profile_id: The profile_id of this PublisherProfileApiProto.
        :type profile_id: int
        """

        self._profile_id = profile_id

    @property
    def programmatic_contact(self):
        """Gets the programmatic_contact of this PublisherProfileApiProto.

        Programmatic contact for the publisher profile.

        :return: The programmatic_contact of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._programmatic_contact

    @programmatic_contact.setter
    def programmatic_contact(self, programmatic_contact):
        """Sets the programmatic_contact of this PublisherProfileApiProto.

        Programmatic contact for the publisher profile.

        :param programmatic_contact: The programmatic_contact of this PublisherProfileApiProto.
        :type programmatic_contact: str
        """

        self._programmatic_contact = programmatic_contact

    @property
    def publisher_app_ids(self):
        """Gets the publisher_app_ids of this PublisherProfileApiProto.

        The list of app IDs represented in this publisher profile. Empty if this is a parent profile. Deprecated in favor of publisher_app.

        :return: The publisher_app_ids of this PublisherProfileApiProto.
        :rtype: List[str]
        """
        return self._publisher_app_ids

    @publisher_app_ids.setter
    def publisher_app_ids(self, publisher_app_ids):
        """Sets the publisher_app_ids of this PublisherProfileApiProto.

        The list of app IDs represented in this publisher profile. Empty if this is a parent profile. Deprecated in favor of publisher_app.

        :param publisher_app_ids: The publisher_app_ids of this PublisherProfileApiProto.
        :type publisher_app_ids: List[str]
        """

        self._publisher_app_ids = publisher_app_ids

    @property
    def publisher_apps(self):
        """Gets the publisher_apps of this PublisherProfileApiProto.

        The list of apps represented in this publisher profile. Empty if this is a parent profile.

        :return: The publisher_apps of this PublisherProfileApiProto.
        :rtype: List[MobileApplication]
        """
        return self._publisher_apps

    @publisher_apps.setter
    def publisher_apps(self, publisher_apps):
        """Sets the publisher_apps of this PublisherProfileApiProto.

        The list of apps represented in this publisher profile. Empty if this is a parent profile.

        :param publisher_apps: The publisher_apps of this PublisherProfileApiProto.
        :type publisher_apps: List[MobileApplication]
        """

        self._publisher_apps = publisher_apps

    @property
    def publisher_domains(self):
        """Gets the publisher_domains of this PublisherProfileApiProto.

        The list of domains represented in this publisher profile. Empty if this is a parent profile.

        :return: The publisher_domains of this PublisherProfileApiProto.
        :rtype: List[str]
        """
        return self._publisher_domains

    @publisher_domains.setter
    def publisher_domains(self, publisher_domains):
        """Sets the publisher_domains of this PublisherProfileApiProto.

        The list of domains represented in this publisher profile. Empty if this is a parent profile.

        :param publisher_domains: The publisher_domains of this PublisherProfileApiProto.
        :type publisher_domains: List[str]
        """

        self._publisher_domains = publisher_domains

    @property
    def publisher_profile_id(self):
        """Gets the publisher_profile_id of this PublisherProfileApiProto.

        Unique Id for publisher profile.

        :return: The publisher_profile_id of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._publisher_profile_id

    @publisher_profile_id.setter
    def publisher_profile_id(self, publisher_profile_id):
        """Sets the publisher_profile_id of this PublisherProfileApiProto.

        Unique Id for publisher profile.

        :param publisher_profile_id: The publisher_profile_id of this PublisherProfileApiProto.
        :type publisher_profile_id: str
        """

        self._publisher_profile_id = publisher_profile_id

    @property
    def publisher_provided_forecast(self):
        """Gets the publisher_provided_forecast of this PublisherProfileApiProto.


        :return: The publisher_provided_forecast of this PublisherProfileApiProto.
        :rtype: PublisherProvidedForecast
        """
        return self._publisher_provided_forecast

    @publisher_provided_forecast.setter
    def publisher_provided_forecast(self, publisher_provided_forecast):
        """Sets the publisher_provided_forecast of this PublisherProfileApiProto.


        :param publisher_provided_forecast: The publisher_provided_forecast of this PublisherProfileApiProto.
        :type publisher_provided_forecast: PublisherProvidedForecast
        """

        self._publisher_provided_forecast = publisher_provided_forecast

    @property
    def rate_card_info_link(self):
        """Gets the rate_card_info_link of this PublisherProfileApiProto.

        Link to publisher rate card

        :return: The rate_card_info_link of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._rate_card_info_link

    @rate_card_info_link.setter
    def rate_card_info_link(self, rate_card_info_link):
        """Sets the rate_card_info_link of this PublisherProfileApiProto.

        Link to publisher rate card

        :param rate_card_info_link: The rate_card_info_link of this PublisherProfileApiProto.
        :type rate_card_info_link: str
        """

        self._rate_card_info_link = rate_card_info_link

    @property
    def sample_page_link(self):
        """Gets the sample_page_link of this PublisherProfileApiProto.

        Link for a sample content page.

        :return: The sample_page_link of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._sample_page_link

    @sample_page_link.setter
    def sample_page_link(self, sample_page_link):
        """Sets the sample_page_link of this PublisherProfileApiProto.

        Link for a sample content page.

        :param sample_page_link: The sample_page_link of this PublisherProfileApiProto.
        :type sample_page_link: str
        """

        self._sample_page_link = sample_page_link

    @property
    def seller(self):
        """Gets the seller of this PublisherProfileApiProto.


        :return: The seller of this PublisherProfileApiProto.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this PublisherProfileApiProto.


        :param seller: The seller of this PublisherProfileApiProto.
        :type seller: Seller
        """

        self._seller = seller

    @property
    def state(self):
        """Gets the state of this PublisherProfileApiProto.

        State of the publisher profile.

        :return: The state of this PublisherProfileApiProto.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PublisherProfileApiProto.

        State of the publisher profile.

        :param state: The state of this PublisherProfileApiProto.
        :type state: str
        """

        self._state = state

    @property
    def top_headlines(self):
        """Gets the top_headlines of this PublisherProfileApiProto.

        Publisher provided key metrics and rankings.

        :return: The top_headlines of this PublisherProfileApiProto.
        :rtype: List[str]
        """
        return self._top_headlines

    @top_headlines.setter
    def top_headlines(self, top_headlines):
        """Sets the top_headlines of this PublisherProfileApiProto.

        Publisher provided key metrics and rankings.

        :param top_headlines: The top_headlines of this PublisherProfileApiProto.
        :type top_headlines: List[str]
        """

        self._top_headlines = top_headlines
