# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketplaceNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator_role: str=None, deal_id: str=None, kind: str='adexchangebuyer#marketplaceNote', note: str=None, note_id: str=None, proposal_id: str=None, proposal_revision_number: str=None, timestamp_ms: str=None):
        """MarketplaceNote - a model defined in OpenAPI

        :param creator_role: The creator_role of this MarketplaceNote.
        :param deal_id: The deal_id of this MarketplaceNote.
        :param kind: The kind of this MarketplaceNote.
        :param note: The note of this MarketplaceNote.
        :param note_id: The note_id of this MarketplaceNote.
        :param proposal_id: The proposal_id of this MarketplaceNote.
        :param proposal_revision_number: The proposal_revision_number of this MarketplaceNote.
        :param timestamp_ms: The timestamp_ms of this MarketplaceNote.
        """
        self.openapi_types = {
            'creator_role': str,
            'deal_id': str,
            'kind': str,
            'note': str,
            'note_id': str,
            'proposal_id': str,
            'proposal_revision_number': str,
            'timestamp_ms': str
        }

        self.attribute_map = {
            'creator_role': 'creatorRole',
            'deal_id': 'dealId',
            'kind': 'kind',
            'note': 'note',
            'note_id': 'noteId',
            'proposal_id': 'proposalId',
            'proposal_revision_number': 'proposalRevisionNumber',
            'timestamp_ms': 'timestampMs'
        }

        self._creator_role = creator_role
        self._deal_id = deal_id
        self._kind = kind
        self._note = note
        self._note_id = note_id
        self._proposal_id = proposal_id
        self._proposal_revision_number = proposal_revision_number
        self._timestamp_ms = timestamp_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketplaceNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketplaceNote of this MarketplaceNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator_role(self):
        """Gets the creator_role of this MarketplaceNote.

        The role of the person (buyer/seller) creating the note. (readonly)

        :return: The creator_role of this MarketplaceNote.
        :rtype: str
        """
        return self._creator_role

    @creator_role.setter
    def creator_role(self, creator_role):
        """Sets the creator_role of this MarketplaceNote.

        The role of the person (buyer/seller) creating the note. (readonly)

        :param creator_role: The creator_role of this MarketplaceNote.
        :type creator_role: str
        """

        self._creator_role = creator_role

    @property
    def deal_id(self):
        """Gets the deal_id of this MarketplaceNote.

        Notes can optionally be associated with a deal. (readonly, except on create)

        :return: The deal_id of this MarketplaceNote.
        :rtype: str
        """
        return self._deal_id

    @deal_id.setter
    def deal_id(self, deal_id):
        """Sets the deal_id of this MarketplaceNote.

        Notes can optionally be associated with a deal. (readonly, except on create)

        :param deal_id: The deal_id of this MarketplaceNote.
        :type deal_id: str
        """

        self._deal_id = deal_id

    @property
    def kind(self):
        """Gets the kind of this MarketplaceNote.

        Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#marketplaceNote\".

        :return: The kind of this MarketplaceNote.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MarketplaceNote.

        Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#marketplaceNote\".

        :param kind: The kind of this MarketplaceNote.
        :type kind: str
        """

        self._kind = kind

    @property
    def note(self):
        """Gets the note of this MarketplaceNote.

        The actual note to attach. (readonly, except on create)

        :return: The note of this MarketplaceNote.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this MarketplaceNote.

        The actual note to attach. (readonly, except on create)

        :param note: The note of this MarketplaceNote.
        :type note: str
        """

        self._note = note

    @property
    def note_id(self):
        """Gets the note_id of this MarketplaceNote.

        The unique id for the note. (readonly)

        :return: The note_id of this MarketplaceNote.
        :rtype: str
        """
        return self._note_id

    @note_id.setter
    def note_id(self, note_id):
        """Sets the note_id of this MarketplaceNote.

        The unique id for the note. (readonly)

        :param note_id: The note_id of this MarketplaceNote.
        :type note_id: str
        """

        self._note_id = note_id

    @property
    def proposal_id(self):
        """Gets the proposal_id of this MarketplaceNote.

        The proposalId that a note is attached to. (readonly)

        :return: The proposal_id of this MarketplaceNote.
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this MarketplaceNote.

        The proposalId that a note is attached to. (readonly)

        :param proposal_id: The proposal_id of this MarketplaceNote.
        :type proposal_id: str
        """

        self._proposal_id = proposal_id

    @property
    def proposal_revision_number(self):
        """Gets the proposal_revision_number of this MarketplaceNote.

        If the note is associated with a proposal revision number, then store that here. (readonly, except on create)

        :return: The proposal_revision_number of this MarketplaceNote.
        :rtype: str
        """
        return self._proposal_revision_number

    @proposal_revision_number.setter
    def proposal_revision_number(self, proposal_revision_number):
        """Sets the proposal_revision_number of this MarketplaceNote.

        If the note is associated with a proposal revision number, then store that here. (readonly, except on create)

        :param proposal_revision_number: The proposal_revision_number of this MarketplaceNote.
        :type proposal_revision_number: str
        """

        self._proposal_revision_number = proposal_revision_number

    @property
    def timestamp_ms(self):
        """Gets the timestamp_ms of this MarketplaceNote.

        The timestamp (ms since epoch) that this note was created. (readonly)

        :return: The timestamp_ms of this MarketplaceNote.
        :rtype: str
        """
        return self._timestamp_ms

    @timestamp_ms.setter
    def timestamp_ms(self, timestamp_ms):
        """Sets the timestamp_ms of this MarketplaceNote.

        The timestamp (ms since epoch) that this note was created. (readonly)

        :param timestamp_ms: The timestamp_ms of this MarketplaceNote.
        :type timestamp_ms: str
        """

        self._timestamp_ms = timestamp_ms
