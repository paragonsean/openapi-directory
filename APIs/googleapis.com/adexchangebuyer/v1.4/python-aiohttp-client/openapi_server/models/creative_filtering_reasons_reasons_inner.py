# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreativeFilteringReasonsReasonsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filtering_count: str=None, filtering_status: int=None):
        """CreativeFilteringReasonsReasonsInner - a model defined in OpenAPI

        :param filtering_count: The filtering_count of this CreativeFilteringReasonsReasonsInner.
        :param filtering_status: The filtering_status of this CreativeFilteringReasonsReasonsInner.
        """
        self.openapi_types = {
            'filtering_count': str,
            'filtering_status': int
        }

        self.attribute_map = {
            'filtering_count': 'filteringCount',
            'filtering_status': 'filteringStatus'
        }

        self._filtering_count = filtering_count
        self._filtering_status = filtering_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeFilteringReasonsReasonsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Creative_filteringReasons_reasons_inner of this CreativeFilteringReasonsReasonsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filtering_count(self):
        """Gets the filtering_count of this CreativeFilteringReasonsReasonsInner.

        The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.

        :return: The filtering_count of this CreativeFilteringReasonsReasonsInner.
        :rtype: str
        """
        return self._filtering_count

    @filtering_count.setter
    def filtering_count(self, filtering_count):
        """Sets the filtering_count of this CreativeFilteringReasonsReasonsInner.

        The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.

        :param filtering_count: The filtering_count of this CreativeFilteringReasonsReasonsInner.
        :type filtering_count: str
        """

        self._filtering_count = filtering_count

    @property
    def filtering_status(self):
        """Gets the filtering_status of this CreativeFilteringReasonsReasonsInner.

        The filtering status code as defined in  creative-status-codes.txt.

        :return: The filtering_status of this CreativeFilteringReasonsReasonsInner.
        :rtype: int
        """
        return self._filtering_status

    @filtering_status.setter
    def filtering_status(self, filtering_status):
        """Sets the filtering_status of this CreativeFilteringReasonsReasonsInner.

        The filtering status code as defined in  creative-status-codes.txt.

        :param filtering_status: The filtering_status of this CreativeFilteringReasonsReasonsInner.
        :type filtering_status: int
        """

        self._filtering_status = filtering_status
