# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.buyer import Buyer
from openapi_server.models.price import Price
from openapi_server import util


class PricePerBuyer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auction_tier: str=None, billed_buyer: Buyer=None, buyer: Buyer=None, price: Price=None):
        """PricePerBuyer - a model defined in OpenAPI

        :param auction_tier: The auction_tier of this PricePerBuyer.
        :param billed_buyer: The billed_buyer of this PricePerBuyer.
        :param buyer: The buyer of this PricePerBuyer.
        :param price: The price of this PricePerBuyer.
        """
        self.openapi_types = {
            'auction_tier': str,
            'billed_buyer': Buyer,
            'buyer': Buyer,
            'price': Price
        }

        self.attribute_map = {
            'auction_tier': 'auctionTier',
            'billed_buyer': 'billedBuyer',
            'buyer': 'buyer',
            'price': 'price'
        }

        self._auction_tier = auction_tier
        self._billed_buyer = billed_buyer
        self._buyer = buyer
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricePerBuyer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricePerBuyer of this PricePerBuyer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auction_tier(self):
        """Gets the auction_tier of this PricePerBuyer.

        Optional access type for this buyer.

        :return: The auction_tier of this PricePerBuyer.
        :rtype: str
        """
        return self._auction_tier

    @auction_tier.setter
    def auction_tier(self, auction_tier):
        """Sets the auction_tier of this PricePerBuyer.

        Optional access type for this buyer.

        :param auction_tier: The auction_tier of this PricePerBuyer.
        :type auction_tier: str
        """

        self._auction_tier = auction_tier

    @property
    def billed_buyer(self):
        """Gets the billed_buyer of this PricePerBuyer.


        :return: The billed_buyer of this PricePerBuyer.
        :rtype: Buyer
        """
        return self._billed_buyer

    @billed_buyer.setter
    def billed_buyer(self, billed_buyer):
        """Sets the billed_buyer of this PricePerBuyer.


        :param billed_buyer: The billed_buyer of this PricePerBuyer.
        :type billed_buyer: Buyer
        """

        self._billed_buyer = billed_buyer

    @property
    def buyer(self):
        """Gets the buyer of this PricePerBuyer.


        :return: The buyer of this PricePerBuyer.
        :rtype: Buyer
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this PricePerBuyer.


        :param buyer: The buyer of this PricePerBuyer.
        :type buyer: Buyer
        """

        self._buyer = buyer

    @property
    def price(self):
        """Gets the price of this PricePerBuyer.


        :return: The price of this PricePerBuyer.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PricePerBuyer.


        :param price: The price of this PricePerBuyer.
        :type price: Price
        """

        self._price = price
