# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marketplace_deal import MarketplaceDeal
from openapi_server.models.proposal import Proposal
from openapi_server import util


class EditAllOrderDealsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deals: List[MarketplaceDeal]=None, proposal: Proposal=None, proposal_revision_number: str=None, update_action: str=None):
        """EditAllOrderDealsRequest - a model defined in OpenAPI

        :param deals: The deals of this EditAllOrderDealsRequest.
        :param proposal: The proposal of this EditAllOrderDealsRequest.
        :param proposal_revision_number: The proposal_revision_number of this EditAllOrderDealsRequest.
        :param update_action: The update_action of this EditAllOrderDealsRequest.
        """
        self.openapi_types = {
            'deals': List[MarketplaceDeal],
            'proposal': Proposal,
            'proposal_revision_number': str,
            'update_action': str
        }

        self.attribute_map = {
            'deals': 'deals',
            'proposal': 'proposal',
            'proposal_revision_number': 'proposalRevisionNumber',
            'update_action': 'updateAction'
        }

        self._deals = deals
        self._proposal = proposal
        self._proposal_revision_number = proposal_revision_number
        self._update_action = update_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditAllOrderDealsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditAllOrderDealsRequest of this EditAllOrderDealsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deals(self):
        """Gets the deals of this EditAllOrderDealsRequest.

        List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.

        :return: The deals of this EditAllOrderDealsRequest.
        :rtype: List[MarketplaceDeal]
        """
        return self._deals

    @deals.setter
    def deals(self, deals):
        """Sets the deals of this EditAllOrderDealsRequest.

        List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.

        :param deals: The deals of this EditAllOrderDealsRequest.
        :type deals: List[MarketplaceDeal]
        """

        self._deals = deals

    @property
    def proposal(self):
        """Gets the proposal of this EditAllOrderDealsRequest.


        :return: The proposal of this EditAllOrderDealsRequest.
        :rtype: Proposal
        """
        return self._proposal

    @proposal.setter
    def proposal(self, proposal):
        """Sets the proposal of this EditAllOrderDealsRequest.


        :param proposal: The proposal of this EditAllOrderDealsRequest.
        :type proposal: Proposal
        """

        self._proposal = proposal

    @property
    def proposal_revision_number(self):
        """Gets the proposal_revision_number of this EditAllOrderDealsRequest.

        The last known revision number for the proposal.

        :return: The proposal_revision_number of this EditAllOrderDealsRequest.
        :rtype: str
        """
        return self._proposal_revision_number

    @proposal_revision_number.setter
    def proposal_revision_number(self, proposal_revision_number):
        """Sets the proposal_revision_number of this EditAllOrderDealsRequest.

        The last known revision number for the proposal.

        :param proposal_revision_number: The proposal_revision_number of this EditAllOrderDealsRequest.
        :type proposal_revision_number: str
        """

        self._proposal_revision_number = proposal_revision_number

    @property
    def update_action(self):
        """Gets the update_action of this EditAllOrderDealsRequest.

        Indicates an optional action to take on the proposal

        :return: The update_action of this EditAllOrderDealsRequest.
        :rtype: str
        """
        return self._update_action

    @update_action.setter
    def update_action(self, update_action):
        """Sets the update_action of this EditAllOrderDealsRequest.

        Indicates an optional action to take on the proposal

        :param update_action: The update_action of this EditAllOrderDealsRequest.
        :type update_action: str
        """

        self._update_action = update_action
