# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_micros: float=None, currency_code: str=None, expected_cpm_micros: float=None, pricing_type: str=None):
        """Price - a model defined in OpenAPI

        :param amount_micros: The amount_micros of this Price.
        :param currency_code: The currency_code of this Price.
        :param expected_cpm_micros: The expected_cpm_micros of this Price.
        :param pricing_type: The pricing_type of this Price.
        """
        self.openapi_types = {
            'amount_micros': float,
            'currency_code': str,
            'expected_cpm_micros': float,
            'pricing_type': str
        }

        self.attribute_map = {
            'amount_micros': 'amountMicros',
            'currency_code': 'currencyCode',
            'expected_cpm_micros': 'expectedCpmMicros',
            'pricing_type': 'pricingType'
        }

        self._amount_micros = amount_micros
        self._currency_code = currency_code
        self._expected_cpm_micros = expected_cpm_micros
        self._pricing_type = pricing_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_micros(self):
        """Gets the amount_micros of this Price.

        The price value in micros.

        :return: The amount_micros of this Price.
        :rtype: float
        """
        return self._amount_micros

    @amount_micros.setter
    def amount_micros(self, amount_micros):
        """Sets the amount_micros of this Price.

        The price value in micros.

        :param amount_micros: The amount_micros of this Price.
        :type amount_micros: float
        """

        self._amount_micros = amount_micros

    @property
    def currency_code(self):
        """Gets the currency_code of this Price.

        The currency code for the price.

        :return: The currency_code of this Price.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Price.

        The currency code for the price.

        :param currency_code: The currency_code of this Price.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def expected_cpm_micros(self):
        """Gets the expected_cpm_micros of this Price.

        In case of CPD deals, the expected CPM in micros.

        :return: The expected_cpm_micros of this Price.
        :rtype: float
        """
        return self._expected_cpm_micros

    @expected_cpm_micros.setter
    def expected_cpm_micros(self, expected_cpm_micros):
        """Sets the expected_cpm_micros of this Price.

        In case of CPD deals, the expected CPM in micros.

        :param expected_cpm_micros: The expected_cpm_micros of this Price.
        :type expected_cpm_micros: float
        """

        self._expected_cpm_micros = expected_cpm_micros

    @property
    def pricing_type(self):
        """Gets the pricing_type of this Price.

        The pricing type for the deal/product.

        :return: The pricing_type of this Price.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this Price.

        The pricing type for the deal/product.

        :param pricing_type: The pricing_type of this Price.
        :type pricing_type: str
        """

        self._pricing_type = pricing_type
