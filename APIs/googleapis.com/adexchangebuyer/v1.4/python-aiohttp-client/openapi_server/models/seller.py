# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Seller(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, sub_account_id: str=None):
        """Seller - a model defined in OpenAPI

        :param account_id: The account_id of this Seller.
        :param sub_account_id: The sub_account_id of this Seller.
        """
        self.openapi_types = {
            'account_id': str,
            'sub_account_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'sub_account_id': 'subAccountId'
        }

        self._account_id = account_id
        self._sub_account_id = sub_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Seller':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Seller of this Seller.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Seller.

        The unique id for the seller. The seller fills in this field. The seller account id is then available to buyer in the product.

        :return: The account_id of this Seller.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Seller.

        The unique id for the seller. The seller fills in this field. The seller account id is then available to buyer in the product.

        :param account_id: The account_id of this Seller.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this Seller.

        Optional sub-account id for the seller.

        :return: The sub_account_id of this Seller.
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this Seller.

        Optional sub-account id for the seller.

        :param sub_account_id: The sub_account_id of this Seller.
        :type sub_account_id: str
        """

        self._sub_account_id = sub_account_id
