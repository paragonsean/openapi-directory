# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.buyer import Buyer
from openapi_server.models.contact_information import ContactInformation
from openapi_server.models.marketplace_label import MarketplaceLabel
from openapi_server.models.private_data import PrivateData
from openapi_server.models.seller import Seller
from openapi_server import util


class Proposal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed_buyer: Buyer=None, buyer: Buyer=None, buyer_contacts: List[ContactInformation]=None, buyer_private_data: PrivateData=None, dbm_advertiser_ids: List[str]=None, has_buyer_signed_off: bool=None, has_seller_signed_off: bool=None, inventory_source: str=None, is_renegotiating: bool=None, is_setup_complete: bool=None, kind: str='adexchangebuyer#proposal', labels: List[MarketplaceLabel]=None, last_updater_or_commentor_role: str=None, name: str=None, negotiation_id: str=None, originator_role: str=None, private_auction_id: str=None, proposal_id: str=None, proposal_state: str=None, revision_number: str=None, revision_time_ms: str=None, seller: Seller=None, seller_contacts: List[ContactInformation]=None):
        """Proposal - a model defined in OpenAPI

        :param billed_buyer: The billed_buyer of this Proposal.
        :param buyer: The buyer of this Proposal.
        :param buyer_contacts: The buyer_contacts of this Proposal.
        :param buyer_private_data: The buyer_private_data of this Proposal.
        :param dbm_advertiser_ids: The dbm_advertiser_ids of this Proposal.
        :param has_buyer_signed_off: The has_buyer_signed_off of this Proposal.
        :param has_seller_signed_off: The has_seller_signed_off of this Proposal.
        :param inventory_source: The inventory_source of this Proposal.
        :param is_renegotiating: The is_renegotiating of this Proposal.
        :param is_setup_complete: The is_setup_complete of this Proposal.
        :param kind: The kind of this Proposal.
        :param labels: The labels of this Proposal.
        :param last_updater_or_commentor_role: The last_updater_or_commentor_role of this Proposal.
        :param name: The name of this Proposal.
        :param negotiation_id: The negotiation_id of this Proposal.
        :param originator_role: The originator_role of this Proposal.
        :param private_auction_id: The private_auction_id of this Proposal.
        :param proposal_id: The proposal_id of this Proposal.
        :param proposal_state: The proposal_state of this Proposal.
        :param revision_number: The revision_number of this Proposal.
        :param revision_time_ms: The revision_time_ms of this Proposal.
        :param seller: The seller of this Proposal.
        :param seller_contacts: The seller_contacts of this Proposal.
        """
        self.openapi_types = {
            'billed_buyer': Buyer,
            'buyer': Buyer,
            'buyer_contacts': List[ContactInformation],
            'buyer_private_data': PrivateData,
            'dbm_advertiser_ids': List[str],
            'has_buyer_signed_off': bool,
            'has_seller_signed_off': bool,
            'inventory_source': str,
            'is_renegotiating': bool,
            'is_setup_complete': bool,
            'kind': str,
            'labels': List[MarketplaceLabel],
            'last_updater_or_commentor_role': str,
            'name': str,
            'negotiation_id': str,
            'originator_role': str,
            'private_auction_id': str,
            'proposal_id': str,
            'proposal_state': str,
            'revision_number': str,
            'revision_time_ms': str,
            'seller': Seller,
            'seller_contacts': List[ContactInformation]
        }

        self.attribute_map = {
            'billed_buyer': 'billedBuyer',
            'buyer': 'buyer',
            'buyer_contacts': 'buyerContacts',
            'buyer_private_data': 'buyerPrivateData',
            'dbm_advertiser_ids': 'dbmAdvertiserIds',
            'has_buyer_signed_off': 'hasBuyerSignedOff',
            'has_seller_signed_off': 'hasSellerSignedOff',
            'inventory_source': 'inventorySource',
            'is_renegotiating': 'isRenegotiating',
            'is_setup_complete': 'isSetupComplete',
            'kind': 'kind',
            'labels': 'labels',
            'last_updater_or_commentor_role': 'lastUpdaterOrCommentorRole',
            'name': 'name',
            'negotiation_id': 'negotiationId',
            'originator_role': 'originatorRole',
            'private_auction_id': 'privateAuctionId',
            'proposal_id': 'proposalId',
            'proposal_state': 'proposalState',
            'revision_number': 'revisionNumber',
            'revision_time_ms': 'revisionTimeMs',
            'seller': 'seller',
            'seller_contacts': 'sellerContacts'
        }

        self._billed_buyer = billed_buyer
        self._buyer = buyer
        self._buyer_contacts = buyer_contacts
        self._buyer_private_data = buyer_private_data
        self._dbm_advertiser_ids = dbm_advertiser_ids
        self._has_buyer_signed_off = has_buyer_signed_off
        self._has_seller_signed_off = has_seller_signed_off
        self._inventory_source = inventory_source
        self._is_renegotiating = is_renegotiating
        self._is_setup_complete = is_setup_complete
        self._kind = kind
        self._labels = labels
        self._last_updater_or_commentor_role = last_updater_or_commentor_role
        self._name = name
        self._negotiation_id = negotiation_id
        self._originator_role = originator_role
        self._private_auction_id = private_auction_id
        self._proposal_id = proposal_id
        self._proposal_state = proposal_state
        self._revision_number = revision_number
        self._revision_time_ms = revision_time_ms
        self._seller = seller
        self._seller_contacts = seller_contacts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Proposal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Proposal of this Proposal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed_buyer(self):
        """Gets the billed_buyer of this Proposal.


        :return: The billed_buyer of this Proposal.
        :rtype: Buyer
        """
        return self._billed_buyer

    @billed_buyer.setter
    def billed_buyer(self, billed_buyer):
        """Sets the billed_buyer of this Proposal.


        :param billed_buyer: The billed_buyer of this Proposal.
        :type billed_buyer: Buyer
        """

        self._billed_buyer = billed_buyer

    @property
    def buyer(self):
        """Gets the buyer of this Proposal.


        :return: The buyer of this Proposal.
        :rtype: Buyer
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Proposal.


        :param buyer: The buyer of this Proposal.
        :type buyer: Buyer
        """

        self._buyer = buyer

    @property
    def buyer_contacts(self):
        """Gets the buyer_contacts of this Proposal.

        Optional contact information of the buyer. (seller-readonly)

        :return: The buyer_contacts of this Proposal.
        :rtype: List[ContactInformation]
        """
        return self._buyer_contacts

    @buyer_contacts.setter
    def buyer_contacts(self, buyer_contacts):
        """Sets the buyer_contacts of this Proposal.

        Optional contact information of the buyer. (seller-readonly)

        :param buyer_contacts: The buyer_contacts of this Proposal.
        :type buyer_contacts: List[ContactInformation]
        """

        self._buyer_contacts = buyer_contacts

    @property
    def buyer_private_data(self):
        """Gets the buyer_private_data of this Proposal.


        :return: The buyer_private_data of this Proposal.
        :rtype: PrivateData
        """
        return self._buyer_private_data

    @buyer_private_data.setter
    def buyer_private_data(self, buyer_private_data):
        """Sets the buyer_private_data of this Proposal.


        :param buyer_private_data: The buyer_private_data of this Proposal.
        :type buyer_private_data: PrivateData
        """

        self._buyer_private_data = buyer_private_data

    @property
    def dbm_advertiser_ids(self):
        """Gets the dbm_advertiser_ids of this Proposal.

        IDs of DBM advertisers permission to this proposal.

        :return: The dbm_advertiser_ids of this Proposal.
        :rtype: List[str]
        """
        return self._dbm_advertiser_ids

    @dbm_advertiser_ids.setter
    def dbm_advertiser_ids(self, dbm_advertiser_ids):
        """Sets the dbm_advertiser_ids of this Proposal.

        IDs of DBM advertisers permission to this proposal.

        :param dbm_advertiser_ids: The dbm_advertiser_ids of this Proposal.
        :type dbm_advertiser_ids: List[str]
        """

        self._dbm_advertiser_ids = dbm_advertiser_ids

    @property
    def has_buyer_signed_off(self):
        """Gets the has_buyer_signed_off of this Proposal.

        When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)

        :return: The has_buyer_signed_off of this Proposal.
        :rtype: bool
        """
        return self._has_buyer_signed_off

    @has_buyer_signed_off.setter
    def has_buyer_signed_off(self, has_buyer_signed_off):
        """Sets the has_buyer_signed_off of this Proposal.

        When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)

        :param has_buyer_signed_off: The has_buyer_signed_off of this Proposal.
        :type has_buyer_signed_off: bool
        """

        self._has_buyer_signed_off = has_buyer_signed_off

    @property
    def has_seller_signed_off(self):
        """Gets the has_seller_signed_off of this Proposal.

        When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)

        :return: The has_seller_signed_off of this Proposal.
        :rtype: bool
        """
        return self._has_seller_signed_off

    @has_seller_signed_off.setter
    def has_seller_signed_off(self, has_seller_signed_off):
        """Sets the has_seller_signed_off of this Proposal.

        When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)

        :param has_seller_signed_off: The has_seller_signed_off of this Proposal.
        :type has_seller_signed_off: bool
        """

        self._has_seller_signed_off = has_seller_signed_off

    @property
    def inventory_source(self):
        """Gets the inventory_source of this Proposal.

        What exchange will provide this inventory (readonly, except on create).

        :return: The inventory_source of this Proposal.
        :rtype: str
        """
        return self._inventory_source

    @inventory_source.setter
    def inventory_source(self, inventory_source):
        """Sets the inventory_source of this Proposal.

        What exchange will provide this inventory (readonly, except on create).

        :param inventory_source: The inventory_source of this Proposal.
        :type inventory_source: str
        """

        self._inventory_source = inventory_source

    @property
    def is_renegotiating(self):
        """Gets the is_renegotiating of this Proposal.

        True if the proposal is being renegotiated (readonly).

        :return: The is_renegotiating of this Proposal.
        :rtype: bool
        """
        return self._is_renegotiating

    @is_renegotiating.setter
    def is_renegotiating(self, is_renegotiating):
        """Sets the is_renegotiating of this Proposal.

        True if the proposal is being renegotiated (readonly).

        :param is_renegotiating: The is_renegotiating of this Proposal.
        :type is_renegotiating: bool
        """

        self._is_renegotiating = is_renegotiating

    @property
    def is_setup_complete(self):
        """Gets the is_setup_complete of this Proposal.

        True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.

        :return: The is_setup_complete of this Proposal.
        :rtype: bool
        """
        return self._is_setup_complete

    @is_setup_complete.setter
    def is_setup_complete(self, is_setup_complete):
        """Sets the is_setup_complete of this Proposal.

        True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.

        :param is_setup_complete: The is_setup_complete of this Proposal.
        :type is_setup_complete: bool
        """

        self._is_setup_complete = is_setup_complete

    @property
    def kind(self):
        """Gets the kind of this Proposal.

        Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#proposal\".

        :return: The kind of this Proposal.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Proposal.

        Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#proposal\".

        :param kind: The kind of this Proposal.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Proposal.

        List of labels associated with the proposal. (readonly)

        :return: The labels of this Proposal.
        :rtype: List[MarketplaceLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Proposal.

        List of labels associated with the proposal. (readonly)

        :param labels: The labels of this Proposal.
        :type labels: List[MarketplaceLabel]
        """

        self._labels = labels

    @property
    def last_updater_or_commentor_role(self):
        """Gets the last_updater_or_commentor_role of this Proposal.

        The role of the last user that either updated the proposal or left a comment. (readonly)

        :return: The last_updater_or_commentor_role of this Proposal.
        :rtype: str
        """
        return self._last_updater_or_commentor_role

    @last_updater_or_commentor_role.setter
    def last_updater_or_commentor_role(self, last_updater_or_commentor_role):
        """Sets the last_updater_or_commentor_role of this Proposal.

        The role of the last user that either updated the proposal or left a comment. (readonly)

        :param last_updater_or_commentor_role: The last_updater_or_commentor_role of this Proposal.
        :type last_updater_or_commentor_role: str
        """

        self._last_updater_or_commentor_role = last_updater_or_commentor_role

    @property
    def name(self):
        """Gets the name of this Proposal.

        The name for the proposal (updatable)

        :return: The name of this Proposal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Proposal.

        The name for the proposal (updatable)

        :param name: The name of this Proposal.
        :type name: str
        """

        self._name = name

    @property
    def negotiation_id(self):
        """Gets the negotiation_id of this Proposal.

        Optional negotiation id if this proposal is a preferred deal proposal.

        :return: The negotiation_id of this Proposal.
        :rtype: str
        """
        return self._negotiation_id

    @negotiation_id.setter
    def negotiation_id(self, negotiation_id):
        """Sets the negotiation_id of this Proposal.

        Optional negotiation id if this proposal is a preferred deal proposal.

        :param negotiation_id: The negotiation_id of this Proposal.
        :type negotiation_id: str
        """

        self._negotiation_id = negotiation_id

    @property
    def originator_role(self):
        """Gets the originator_role of this Proposal.

        Indicates whether the buyer/seller created the proposal.(readonly)

        :return: The originator_role of this Proposal.
        :rtype: str
        """
        return self._originator_role

    @originator_role.setter
    def originator_role(self, originator_role):
        """Sets the originator_role of this Proposal.

        Indicates whether the buyer/seller created the proposal.(readonly)

        :param originator_role: The originator_role of this Proposal.
        :type originator_role: str
        """

        self._originator_role = originator_role

    @property
    def private_auction_id(self):
        """Gets the private_auction_id of this Proposal.

        Optional private auction id if this proposal is a private auction proposal.

        :return: The private_auction_id of this Proposal.
        :rtype: str
        """
        return self._private_auction_id

    @private_auction_id.setter
    def private_auction_id(self, private_auction_id):
        """Sets the private_auction_id of this Proposal.

        Optional private auction id if this proposal is a private auction proposal.

        :param private_auction_id: The private_auction_id of this Proposal.
        :type private_auction_id: str
        """

        self._private_auction_id = private_auction_id

    @property
    def proposal_id(self):
        """Gets the proposal_id of this Proposal.

        The unique id of the proposal. (readonly).

        :return: The proposal_id of this Proposal.
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this Proposal.

        The unique id of the proposal. (readonly).

        :param proposal_id: The proposal_id of this Proposal.
        :type proposal_id: str
        """

        self._proposal_id = proposal_id

    @property
    def proposal_state(self):
        """Gets the proposal_state of this Proposal.

        The current state of the proposal. (readonly)

        :return: The proposal_state of this Proposal.
        :rtype: str
        """
        return self._proposal_state

    @proposal_state.setter
    def proposal_state(self, proposal_state):
        """Sets the proposal_state of this Proposal.

        The current state of the proposal. (readonly)

        :param proposal_state: The proposal_state of this Proposal.
        :type proposal_state: str
        """

        self._proposal_state = proposal_state

    @property
    def revision_number(self):
        """Gets the revision_number of this Proposal.

        The revision number for the proposal (readonly).

        :return: The revision_number of this Proposal.
        :rtype: str
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this Proposal.

        The revision number for the proposal (readonly).

        :param revision_number: The revision_number of this Proposal.
        :type revision_number: str
        """

        self._revision_number = revision_number

    @property
    def revision_time_ms(self):
        """Gets the revision_time_ms of this Proposal.

        The time (ms since epoch) when the proposal was last revised (readonly).

        :return: The revision_time_ms of this Proposal.
        :rtype: str
        """
        return self._revision_time_ms

    @revision_time_ms.setter
    def revision_time_ms(self, revision_time_ms):
        """Sets the revision_time_ms of this Proposal.

        The time (ms since epoch) when the proposal was last revised (readonly).

        :param revision_time_ms: The revision_time_ms of this Proposal.
        :type revision_time_ms: str
        """

        self._revision_time_ms = revision_time_ms

    @property
    def seller(self):
        """Gets the seller of this Proposal.


        :return: The seller of this Proposal.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Proposal.


        :param seller: The seller of this Proposal.
        :type seller: Seller
        """

        self._seller = seller

    @property
    def seller_contacts(self):
        """Gets the seller_contacts of this Proposal.

        Optional contact information of the seller (buyer-readonly).

        :return: The seller_contacts of this Proposal.
        :rtype: List[ContactInformation]
        """
        return self._seller_contacts

    @seller_contacts.setter
    def seller_contacts(self, seller_contacts):
        """Sets the seller_contacts of this Proposal.

        Optional contact information of the seller (buyer-readonly).

        :param seller_contacts: The seller_contacts of this Proposal.
        :type seller_contacts: List[ContactInformation]
        """

        self._seller_contacts = seller_contacts
