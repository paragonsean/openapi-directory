# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_serving_restrictions_inner_contexts_inner import CreativeServingRestrictionsInnerContextsInner
from openapi_server.models.creative_serving_restrictions_inner_disapproval_reasons_inner import CreativeServingRestrictionsInnerDisapprovalReasonsInner
from openapi_server import util


class CreativeServingRestrictionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List[CreativeServingRestrictionsInnerContextsInner]=None, disapproval_reasons: List[CreativeServingRestrictionsInnerDisapprovalReasonsInner]=None, reason: str=None):
        """CreativeServingRestrictionsInner - a model defined in OpenAPI

        :param contexts: The contexts of this CreativeServingRestrictionsInner.
        :param disapproval_reasons: The disapproval_reasons of this CreativeServingRestrictionsInner.
        :param reason: The reason of this CreativeServingRestrictionsInner.
        """
        self.openapi_types = {
            'contexts': List[CreativeServingRestrictionsInnerContextsInner],
            'disapproval_reasons': List[CreativeServingRestrictionsInnerDisapprovalReasonsInner],
            'reason': str
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'disapproval_reasons': 'disapprovalReasons',
            'reason': 'reason'
        }

        self._contexts = contexts
        self._disapproval_reasons = disapproval_reasons
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeServingRestrictionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Creative_servingRestrictions_inner of this CreativeServingRestrictionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this CreativeServingRestrictionsInner.

        All known contexts/restrictions.

        :return: The contexts of this CreativeServingRestrictionsInner.
        :rtype: List[CreativeServingRestrictionsInnerContextsInner]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this CreativeServingRestrictionsInner.

        All known contexts/restrictions.

        :param contexts: The contexts of this CreativeServingRestrictionsInner.
        :type contexts: List[CreativeServingRestrictionsInnerContextsInner]
        """

        self._contexts = contexts

    @property
    def disapproval_reasons(self):
        """Gets the disapproval_reasons of this CreativeServingRestrictionsInner.

        The reasons for disapproval within this restriction, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED or CONDITIONALLY_APPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue.

        :return: The disapproval_reasons of this CreativeServingRestrictionsInner.
        :rtype: List[CreativeServingRestrictionsInnerDisapprovalReasonsInner]
        """
        return self._disapproval_reasons

    @disapproval_reasons.setter
    def disapproval_reasons(self, disapproval_reasons):
        """Sets the disapproval_reasons of this CreativeServingRestrictionsInner.

        The reasons for disapproval within this restriction, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED or CONDITIONALLY_APPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue.

        :param disapproval_reasons: The disapproval_reasons of this CreativeServingRestrictionsInner.
        :type disapproval_reasons: List[CreativeServingRestrictionsInnerDisapprovalReasonsInner]
        """

        self._disapproval_reasons = disapproval_reasons

    @property
    def reason(self):
        """Gets the reason of this CreativeServingRestrictionsInner.

        Why the creative is ineligible to serve in this context (e.g., it has been explicitly disapproved or is pending review).

        :return: The reason of this CreativeServingRestrictionsInner.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreativeServingRestrictionsInner.

        Why the creative is ineligible to serve in this context (e.g., it has been explicitly disapproved or is pending review).

        :param reason: The reason of this CreativeServingRestrictionsInner.
        :type reason: str
        """

        self._reason = reason
