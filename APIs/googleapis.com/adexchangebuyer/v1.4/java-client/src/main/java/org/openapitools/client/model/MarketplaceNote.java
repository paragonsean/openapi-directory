/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A proposal is associated with a bunch of notes which may optionally be associated with a deal and/or revision number.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketplaceNote {
  public static final String SERIALIZED_NAME_CREATOR_ROLE = "creatorRole";
  @SerializedName(SERIALIZED_NAME_CREATOR_ROLE)
  private String creatorRole;

  public static final String SERIALIZED_NAME_DEAL_ID = "dealId";
  @SerializedName(SERIALIZED_NAME_DEAL_ID)
  private String dealId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adexchangebuyer#marketplaceNote";

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_NOTE_ID = "noteId";
  @SerializedName(SERIALIZED_NAME_NOTE_ID)
  private String noteId;

  public static final String SERIALIZED_NAME_PROPOSAL_ID = "proposalId";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_ID)
  private String proposalId;

  public static final String SERIALIZED_NAME_PROPOSAL_REVISION_NUMBER = "proposalRevisionNumber";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_REVISION_NUMBER)
  private String proposalRevisionNumber;

  public static final String SERIALIZED_NAME_TIMESTAMP_MS = "timestampMs";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_MS)
  private String timestampMs;

  public MarketplaceNote() {
  }

  public MarketplaceNote creatorRole(String creatorRole) {
    this.creatorRole = creatorRole;
    return this;
  }

  /**
   * The role of the person (buyer/seller) creating the note. (readonly)
   * @return creatorRole
   */
  @javax.annotation.Nullable
  public String getCreatorRole() {
    return creatorRole;
  }

  public void setCreatorRole(String creatorRole) {
    this.creatorRole = creatorRole;
  }


  public MarketplaceNote dealId(String dealId) {
    this.dealId = dealId;
    return this;
  }

  /**
   * Notes can optionally be associated with a deal. (readonly, except on create)
   * @return dealId
   */
  @javax.annotation.Nullable
  public String getDealId() {
    return dealId;
  }

  public void setDealId(String dealId) {
    this.dealId = dealId;
  }


  public MarketplaceNote kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;adexchangebuyer#marketplaceNote\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public MarketplaceNote note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The actual note to attach. (readonly, except on create)
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public MarketplaceNote noteId(String noteId) {
    this.noteId = noteId;
    return this;
  }

  /**
   * The unique id for the note. (readonly)
   * @return noteId
   */
  @javax.annotation.Nullable
  public String getNoteId() {
    return noteId;
  }

  public void setNoteId(String noteId) {
    this.noteId = noteId;
  }


  public MarketplaceNote proposalId(String proposalId) {
    this.proposalId = proposalId;
    return this;
  }

  /**
   * The proposalId that a note is attached to. (readonly)
   * @return proposalId
   */
  @javax.annotation.Nullable
  public String getProposalId() {
    return proposalId;
  }

  public void setProposalId(String proposalId) {
    this.proposalId = proposalId;
  }


  public MarketplaceNote proposalRevisionNumber(String proposalRevisionNumber) {
    this.proposalRevisionNumber = proposalRevisionNumber;
    return this;
  }

  /**
   * If the note is associated with a proposal revision number, then store that here. (readonly, except on create)
   * @return proposalRevisionNumber
   */
  @javax.annotation.Nullable
  public String getProposalRevisionNumber() {
    return proposalRevisionNumber;
  }

  public void setProposalRevisionNumber(String proposalRevisionNumber) {
    this.proposalRevisionNumber = proposalRevisionNumber;
  }


  public MarketplaceNote timestampMs(String timestampMs) {
    this.timestampMs = timestampMs;
    return this;
  }

  /**
   * The timestamp (ms since epoch) that this note was created. (readonly)
   * @return timestampMs
   */
  @javax.annotation.Nullable
  public String getTimestampMs() {
    return timestampMs;
  }

  public void setTimestampMs(String timestampMs) {
    this.timestampMs = timestampMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketplaceNote marketplaceNote = (MarketplaceNote) o;
    return Objects.equals(this.creatorRole, marketplaceNote.creatorRole) &&
        Objects.equals(this.dealId, marketplaceNote.dealId) &&
        Objects.equals(this.kind, marketplaceNote.kind) &&
        Objects.equals(this.note, marketplaceNote.note) &&
        Objects.equals(this.noteId, marketplaceNote.noteId) &&
        Objects.equals(this.proposalId, marketplaceNote.proposalId) &&
        Objects.equals(this.proposalRevisionNumber, marketplaceNote.proposalRevisionNumber) &&
        Objects.equals(this.timestampMs, marketplaceNote.timestampMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creatorRole, dealId, kind, note, noteId, proposalId, proposalRevisionNumber, timestampMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketplaceNote {\n");
    sb.append("    creatorRole: ").append(toIndentedString(creatorRole)).append("\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteId: ").append(toIndentedString(noteId)).append("\n");
    sb.append("    proposalId: ").append(toIndentedString(proposalId)).append("\n");
    sb.append("    proposalRevisionNumber: ").append(toIndentedString(proposalRevisionNumber)).append("\n");
    sb.append("    timestampMs: ").append(toIndentedString(timestampMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creatorRole");
    openapiFields.add("dealId");
    openapiFields.add("kind");
    openapiFields.add("note");
    openapiFields.add("noteId");
    openapiFields.add("proposalId");
    openapiFields.add("proposalRevisionNumber");
    openapiFields.add("timestampMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketplaceNote
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketplaceNote.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketplaceNote is not found in the empty JSON string", MarketplaceNote.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketplaceNote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketplaceNote` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creatorRole") != null && !jsonObj.get("creatorRole").isJsonNull()) && !jsonObj.get("creatorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorRole").toString()));
      }
      if ((jsonObj.get("dealId") != null && !jsonObj.get("dealId").isJsonNull()) && !jsonObj.get("dealId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("noteId") != null && !jsonObj.get("noteId").isJsonNull()) && !jsonObj.get("noteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noteId").toString()));
      }
      if ((jsonObj.get("proposalId") != null && !jsonObj.get("proposalId").isJsonNull()) && !jsonObj.get("proposalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalId").toString()));
      }
      if ((jsonObj.get("proposalRevisionNumber") != null && !jsonObj.get("proposalRevisionNumber").isJsonNull()) && !jsonObj.get("proposalRevisionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalRevisionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalRevisionNumber").toString()));
      }
      if ((jsonObj.get("timestampMs") != null && !jsonObj.get("timestampMs").isJsonNull()) && !jsonObj.get("timestampMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampMs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketplaceNote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketplaceNote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketplaceNote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketplaceNote.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketplaceNote>() {
           @Override
           public void write(JsonWriter out, MarketplaceNote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketplaceNote read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketplaceNote given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketplaceNote
   * @throws IOException if the JSON string is invalid with respect to MarketplaceNote
   */
  public static MarketplaceNote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketplaceNote.class);
  }

  /**
   * Convert an instance of MarketplaceNote to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

