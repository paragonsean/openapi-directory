/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Buyer;
import org.openapitools.client.model.ContactInformation;
import org.openapitools.client.model.MarketplaceLabel;
import org.openapitools.client.model.PrivateData;
import org.openapitools.client.model.Seller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a proposal in the marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Each field in a proposal can have one of the following setting:  (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Proposal {
  public static final String SERIALIZED_NAME_BILLED_BUYER = "billedBuyer";
  @SerializedName(SERIALIZED_NAME_BILLED_BUYER)
  private Buyer billedBuyer;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private Buyer buyer;

  public static final String SERIALIZED_NAME_BUYER_CONTACTS = "buyerContacts";
  @SerializedName(SERIALIZED_NAME_BUYER_CONTACTS)
  private List<ContactInformation> buyerContacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYER_PRIVATE_DATA = "buyerPrivateData";
  @SerializedName(SERIALIZED_NAME_BUYER_PRIVATE_DATA)
  private PrivateData buyerPrivateData;

  public static final String SERIALIZED_NAME_DBM_ADVERTISER_IDS = "dbmAdvertiserIds";
  @SerializedName(SERIALIZED_NAME_DBM_ADVERTISER_IDS)
  private List<String> dbmAdvertiserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_BUYER_SIGNED_OFF = "hasBuyerSignedOff";
  @SerializedName(SERIALIZED_NAME_HAS_BUYER_SIGNED_OFF)
  private Boolean hasBuyerSignedOff;

  public static final String SERIALIZED_NAME_HAS_SELLER_SIGNED_OFF = "hasSellerSignedOff";
  @SerializedName(SERIALIZED_NAME_HAS_SELLER_SIGNED_OFF)
  private Boolean hasSellerSignedOff;

  public static final String SERIALIZED_NAME_INVENTORY_SOURCE = "inventorySource";
  @SerializedName(SERIALIZED_NAME_INVENTORY_SOURCE)
  private String inventorySource;

  public static final String SERIALIZED_NAME_IS_RENEGOTIATING = "isRenegotiating";
  @SerializedName(SERIALIZED_NAME_IS_RENEGOTIATING)
  private Boolean isRenegotiating;

  public static final String SERIALIZED_NAME_IS_SETUP_COMPLETE = "isSetupComplete";
  @SerializedName(SERIALIZED_NAME_IS_SETUP_COMPLETE)
  private Boolean isSetupComplete;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adexchangebuyer#proposal";

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<MarketplaceLabel> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATER_OR_COMMENTOR_ROLE = "lastUpdaterOrCommentorRole";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATER_OR_COMMENTOR_ROLE)
  private String lastUpdaterOrCommentorRole;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEGOTIATION_ID = "negotiationId";
  @SerializedName(SERIALIZED_NAME_NEGOTIATION_ID)
  private String negotiationId;

  public static final String SERIALIZED_NAME_ORIGINATOR_ROLE = "originatorRole";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ROLE)
  private String originatorRole;

  public static final String SERIALIZED_NAME_PRIVATE_AUCTION_ID = "privateAuctionId";
  @SerializedName(SERIALIZED_NAME_PRIVATE_AUCTION_ID)
  private String privateAuctionId;

  public static final String SERIALIZED_NAME_PROPOSAL_ID = "proposalId";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_ID)
  private String proposalId;

  public static final String SERIALIZED_NAME_PROPOSAL_STATE = "proposalState";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_STATE)
  private String proposalState;

  public static final String SERIALIZED_NAME_REVISION_NUMBER = "revisionNumber";
  @SerializedName(SERIALIZED_NAME_REVISION_NUMBER)
  private String revisionNumber;

  public static final String SERIALIZED_NAME_REVISION_TIME_MS = "revisionTimeMs";
  @SerializedName(SERIALIZED_NAME_REVISION_TIME_MS)
  private String revisionTimeMs;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private Seller seller;

  public static final String SERIALIZED_NAME_SELLER_CONTACTS = "sellerContacts";
  @SerializedName(SERIALIZED_NAME_SELLER_CONTACTS)
  private List<ContactInformation> sellerContacts = new ArrayList<>();

  public Proposal() {
  }

  public Proposal billedBuyer(Buyer billedBuyer) {
    this.billedBuyer = billedBuyer;
    return this;
  }

  /**
   * Get billedBuyer
   * @return billedBuyer
   */
  @javax.annotation.Nullable
  public Buyer getBilledBuyer() {
    return billedBuyer;
  }

  public void setBilledBuyer(Buyer billedBuyer) {
    this.billedBuyer = billedBuyer;
  }


  public Proposal buyer(Buyer buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public Buyer getBuyer() {
    return buyer;
  }

  public void setBuyer(Buyer buyer) {
    this.buyer = buyer;
  }


  public Proposal buyerContacts(List<ContactInformation> buyerContacts) {
    this.buyerContacts = buyerContacts;
    return this;
  }

  public Proposal addBuyerContactsItem(ContactInformation buyerContactsItem) {
    if (this.buyerContacts == null) {
      this.buyerContacts = new ArrayList<>();
    }
    this.buyerContacts.add(buyerContactsItem);
    return this;
  }

  /**
   * Optional contact information of the buyer. (seller-readonly)
   * @return buyerContacts
   */
  @javax.annotation.Nullable
  public List<ContactInformation> getBuyerContacts() {
    return buyerContacts;
  }

  public void setBuyerContacts(List<ContactInformation> buyerContacts) {
    this.buyerContacts = buyerContacts;
  }


  public Proposal buyerPrivateData(PrivateData buyerPrivateData) {
    this.buyerPrivateData = buyerPrivateData;
    return this;
  }

  /**
   * Get buyerPrivateData
   * @return buyerPrivateData
   */
  @javax.annotation.Nullable
  public PrivateData getBuyerPrivateData() {
    return buyerPrivateData;
  }

  public void setBuyerPrivateData(PrivateData buyerPrivateData) {
    this.buyerPrivateData = buyerPrivateData;
  }


  public Proposal dbmAdvertiserIds(List<String> dbmAdvertiserIds) {
    this.dbmAdvertiserIds = dbmAdvertiserIds;
    return this;
  }

  public Proposal addDbmAdvertiserIdsItem(String dbmAdvertiserIdsItem) {
    if (this.dbmAdvertiserIds == null) {
      this.dbmAdvertiserIds = new ArrayList<>();
    }
    this.dbmAdvertiserIds.add(dbmAdvertiserIdsItem);
    return this;
  }

  /**
   * IDs of DBM advertisers permission to this proposal.
   * @return dbmAdvertiserIds
   */
  @javax.annotation.Nullable
  public List<String> getDbmAdvertiserIds() {
    return dbmAdvertiserIds;
  }

  public void setDbmAdvertiserIds(List<String> dbmAdvertiserIds) {
    this.dbmAdvertiserIds = dbmAdvertiserIds;
  }


  public Proposal hasBuyerSignedOff(Boolean hasBuyerSignedOff) {
    this.hasBuyerSignedOff = hasBuyerSignedOff;
    return this;
  }

  /**
   * When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)
   * @return hasBuyerSignedOff
   */
  @javax.annotation.Nullable
  public Boolean getHasBuyerSignedOff() {
    return hasBuyerSignedOff;
  }

  public void setHasBuyerSignedOff(Boolean hasBuyerSignedOff) {
    this.hasBuyerSignedOff = hasBuyerSignedOff;
  }


  public Proposal hasSellerSignedOff(Boolean hasSellerSignedOff) {
    this.hasSellerSignedOff = hasSellerSignedOff;
    return this;
  }

  /**
   * When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)
   * @return hasSellerSignedOff
   */
  @javax.annotation.Nullable
  public Boolean getHasSellerSignedOff() {
    return hasSellerSignedOff;
  }

  public void setHasSellerSignedOff(Boolean hasSellerSignedOff) {
    this.hasSellerSignedOff = hasSellerSignedOff;
  }


  public Proposal inventorySource(String inventorySource) {
    this.inventorySource = inventorySource;
    return this;
  }

  /**
   * What exchange will provide this inventory (readonly, except on create).
   * @return inventorySource
   */
  @javax.annotation.Nullable
  public String getInventorySource() {
    return inventorySource;
  }

  public void setInventorySource(String inventorySource) {
    this.inventorySource = inventorySource;
  }


  public Proposal isRenegotiating(Boolean isRenegotiating) {
    this.isRenegotiating = isRenegotiating;
    return this;
  }

  /**
   * True if the proposal is being renegotiated (readonly).
   * @return isRenegotiating
   */
  @javax.annotation.Nullable
  public Boolean getIsRenegotiating() {
    return isRenegotiating;
  }

  public void setIsRenegotiating(Boolean isRenegotiating) {
    this.isRenegotiating = isRenegotiating;
  }


  public Proposal isSetupComplete(Boolean isSetupComplete) {
    this.isSetupComplete = isSetupComplete;
    return this;
  }

  /**
   * True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag.
   * @return isSetupComplete
   */
  @javax.annotation.Nullable
  public Boolean getIsSetupComplete() {
    return isSetupComplete;
  }

  public void setIsSetupComplete(Boolean isSetupComplete) {
    this.isSetupComplete = isSetupComplete;
  }


  public Proposal kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;adexchangebuyer#proposal\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Proposal labels(List<MarketplaceLabel> labels) {
    this.labels = labels;
    return this;
  }

  public Proposal addLabelsItem(MarketplaceLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * List of labels associated with the proposal. (readonly)
   * @return labels
   */
  @javax.annotation.Nullable
  public List<MarketplaceLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<MarketplaceLabel> labels) {
    this.labels = labels;
  }


  public Proposal lastUpdaterOrCommentorRole(String lastUpdaterOrCommentorRole) {
    this.lastUpdaterOrCommentorRole = lastUpdaterOrCommentorRole;
    return this;
  }

  /**
   * The role of the last user that either updated the proposal or left a comment. (readonly)
   * @return lastUpdaterOrCommentorRole
   */
  @javax.annotation.Nullable
  public String getLastUpdaterOrCommentorRole() {
    return lastUpdaterOrCommentorRole;
  }

  public void setLastUpdaterOrCommentorRole(String lastUpdaterOrCommentorRole) {
    this.lastUpdaterOrCommentorRole = lastUpdaterOrCommentorRole;
  }


  public Proposal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the proposal (updatable)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Proposal negotiationId(String negotiationId) {
    this.negotiationId = negotiationId;
    return this;
  }

  /**
   * Optional negotiation id if this proposal is a preferred deal proposal.
   * @return negotiationId
   */
  @javax.annotation.Nullable
  public String getNegotiationId() {
    return negotiationId;
  }

  public void setNegotiationId(String negotiationId) {
    this.negotiationId = negotiationId;
  }


  public Proposal originatorRole(String originatorRole) {
    this.originatorRole = originatorRole;
    return this;
  }

  /**
   * Indicates whether the buyer/seller created the proposal.(readonly)
   * @return originatorRole
   */
  @javax.annotation.Nullable
  public String getOriginatorRole() {
    return originatorRole;
  }

  public void setOriginatorRole(String originatorRole) {
    this.originatorRole = originatorRole;
  }


  public Proposal privateAuctionId(String privateAuctionId) {
    this.privateAuctionId = privateAuctionId;
    return this;
  }

  /**
   * Optional private auction id if this proposal is a private auction proposal.
   * @return privateAuctionId
   */
  @javax.annotation.Nullable
  public String getPrivateAuctionId() {
    return privateAuctionId;
  }

  public void setPrivateAuctionId(String privateAuctionId) {
    this.privateAuctionId = privateAuctionId;
  }


  public Proposal proposalId(String proposalId) {
    this.proposalId = proposalId;
    return this;
  }

  /**
   * The unique id of the proposal. (readonly).
   * @return proposalId
   */
  @javax.annotation.Nullable
  public String getProposalId() {
    return proposalId;
  }

  public void setProposalId(String proposalId) {
    this.proposalId = proposalId;
  }


  public Proposal proposalState(String proposalState) {
    this.proposalState = proposalState;
    return this;
  }

  /**
   * The current state of the proposal. (readonly)
   * @return proposalState
   */
  @javax.annotation.Nullable
  public String getProposalState() {
    return proposalState;
  }

  public void setProposalState(String proposalState) {
    this.proposalState = proposalState;
  }


  public Proposal revisionNumber(String revisionNumber) {
    this.revisionNumber = revisionNumber;
    return this;
  }

  /**
   * The revision number for the proposal (readonly).
   * @return revisionNumber
   */
  @javax.annotation.Nullable
  public String getRevisionNumber() {
    return revisionNumber;
  }

  public void setRevisionNumber(String revisionNumber) {
    this.revisionNumber = revisionNumber;
  }


  public Proposal revisionTimeMs(String revisionTimeMs) {
    this.revisionTimeMs = revisionTimeMs;
    return this;
  }

  /**
   * The time (ms since epoch) when the proposal was last revised (readonly).
   * @return revisionTimeMs
   */
  @javax.annotation.Nullable
  public String getRevisionTimeMs() {
    return revisionTimeMs;
  }

  public void setRevisionTimeMs(String revisionTimeMs) {
    this.revisionTimeMs = revisionTimeMs;
  }


  public Proposal seller(Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(Seller seller) {
    this.seller = seller;
  }


  public Proposal sellerContacts(List<ContactInformation> sellerContacts) {
    this.sellerContacts = sellerContacts;
    return this;
  }

  public Proposal addSellerContactsItem(ContactInformation sellerContactsItem) {
    if (this.sellerContacts == null) {
      this.sellerContacts = new ArrayList<>();
    }
    this.sellerContacts.add(sellerContactsItem);
    return this;
  }

  /**
   * Optional contact information of the seller (buyer-readonly).
   * @return sellerContacts
   */
  @javax.annotation.Nullable
  public List<ContactInformation> getSellerContacts() {
    return sellerContacts;
  }

  public void setSellerContacts(List<ContactInformation> sellerContacts) {
    this.sellerContacts = sellerContacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Proposal proposal = (Proposal) o;
    return Objects.equals(this.billedBuyer, proposal.billedBuyer) &&
        Objects.equals(this.buyer, proposal.buyer) &&
        Objects.equals(this.buyerContacts, proposal.buyerContacts) &&
        Objects.equals(this.buyerPrivateData, proposal.buyerPrivateData) &&
        Objects.equals(this.dbmAdvertiserIds, proposal.dbmAdvertiserIds) &&
        Objects.equals(this.hasBuyerSignedOff, proposal.hasBuyerSignedOff) &&
        Objects.equals(this.hasSellerSignedOff, proposal.hasSellerSignedOff) &&
        Objects.equals(this.inventorySource, proposal.inventorySource) &&
        Objects.equals(this.isRenegotiating, proposal.isRenegotiating) &&
        Objects.equals(this.isSetupComplete, proposal.isSetupComplete) &&
        Objects.equals(this.kind, proposal.kind) &&
        Objects.equals(this.labels, proposal.labels) &&
        Objects.equals(this.lastUpdaterOrCommentorRole, proposal.lastUpdaterOrCommentorRole) &&
        Objects.equals(this.name, proposal.name) &&
        Objects.equals(this.negotiationId, proposal.negotiationId) &&
        Objects.equals(this.originatorRole, proposal.originatorRole) &&
        Objects.equals(this.privateAuctionId, proposal.privateAuctionId) &&
        Objects.equals(this.proposalId, proposal.proposalId) &&
        Objects.equals(this.proposalState, proposal.proposalState) &&
        Objects.equals(this.revisionNumber, proposal.revisionNumber) &&
        Objects.equals(this.revisionTimeMs, proposal.revisionTimeMs) &&
        Objects.equals(this.seller, proposal.seller) &&
        Objects.equals(this.sellerContacts, proposal.sellerContacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billedBuyer, buyer, buyerContacts, buyerPrivateData, dbmAdvertiserIds, hasBuyerSignedOff, hasSellerSignedOff, inventorySource, isRenegotiating, isSetupComplete, kind, labels, lastUpdaterOrCommentorRole, name, negotiationId, originatorRole, privateAuctionId, proposalId, proposalState, revisionNumber, revisionTimeMs, seller, sellerContacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Proposal {\n");
    sb.append("    billedBuyer: ").append(toIndentedString(billedBuyer)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    buyerContacts: ").append(toIndentedString(buyerContacts)).append("\n");
    sb.append("    buyerPrivateData: ").append(toIndentedString(buyerPrivateData)).append("\n");
    sb.append("    dbmAdvertiserIds: ").append(toIndentedString(dbmAdvertiserIds)).append("\n");
    sb.append("    hasBuyerSignedOff: ").append(toIndentedString(hasBuyerSignedOff)).append("\n");
    sb.append("    hasSellerSignedOff: ").append(toIndentedString(hasSellerSignedOff)).append("\n");
    sb.append("    inventorySource: ").append(toIndentedString(inventorySource)).append("\n");
    sb.append("    isRenegotiating: ").append(toIndentedString(isRenegotiating)).append("\n");
    sb.append("    isSetupComplete: ").append(toIndentedString(isSetupComplete)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastUpdaterOrCommentorRole: ").append(toIndentedString(lastUpdaterOrCommentorRole)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    negotiationId: ").append(toIndentedString(negotiationId)).append("\n");
    sb.append("    originatorRole: ").append(toIndentedString(originatorRole)).append("\n");
    sb.append("    privateAuctionId: ").append(toIndentedString(privateAuctionId)).append("\n");
    sb.append("    proposalId: ").append(toIndentedString(proposalId)).append("\n");
    sb.append("    proposalState: ").append(toIndentedString(proposalState)).append("\n");
    sb.append("    revisionNumber: ").append(toIndentedString(revisionNumber)).append("\n");
    sb.append("    revisionTimeMs: ").append(toIndentedString(revisionTimeMs)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    sellerContacts: ").append(toIndentedString(sellerContacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billedBuyer");
    openapiFields.add("buyer");
    openapiFields.add("buyerContacts");
    openapiFields.add("buyerPrivateData");
    openapiFields.add("dbmAdvertiserIds");
    openapiFields.add("hasBuyerSignedOff");
    openapiFields.add("hasSellerSignedOff");
    openapiFields.add("inventorySource");
    openapiFields.add("isRenegotiating");
    openapiFields.add("isSetupComplete");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("lastUpdaterOrCommentorRole");
    openapiFields.add("name");
    openapiFields.add("negotiationId");
    openapiFields.add("originatorRole");
    openapiFields.add("privateAuctionId");
    openapiFields.add("proposalId");
    openapiFields.add("proposalState");
    openapiFields.add("revisionNumber");
    openapiFields.add("revisionTimeMs");
    openapiFields.add("seller");
    openapiFields.add("sellerContacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Proposal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Proposal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Proposal is not found in the empty JSON string", Proposal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Proposal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Proposal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billedBuyer`
      if (jsonObj.get("billedBuyer") != null && !jsonObj.get("billedBuyer").isJsonNull()) {
        Buyer.validateJsonElement(jsonObj.get("billedBuyer"));
      }
      // validate the optional field `buyer`
      if (jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) {
        Buyer.validateJsonElement(jsonObj.get("buyer"));
      }
      if (jsonObj.get("buyerContacts") != null && !jsonObj.get("buyerContacts").isJsonNull()) {
        JsonArray jsonArraybuyerContacts = jsonObj.getAsJsonArray("buyerContacts");
        if (jsonArraybuyerContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buyerContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buyerContacts` to be an array in the JSON string but got `%s`", jsonObj.get("buyerContacts").toString()));
          }

          // validate the optional field `buyerContacts` (array)
          for (int i = 0; i < jsonArraybuyerContacts.size(); i++) {
            ContactInformation.validateJsonElement(jsonArraybuyerContacts.get(i));
          };
        }
      }
      // validate the optional field `buyerPrivateData`
      if (jsonObj.get("buyerPrivateData") != null && !jsonObj.get("buyerPrivateData").isJsonNull()) {
        PrivateData.validateJsonElement(jsonObj.get("buyerPrivateData"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dbmAdvertiserIds") != null && !jsonObj.get("dbmAdvertiserIds").isJsonNull() && !jsonObj.get("dbmAdvertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbmAdvertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("dbmAdvertiserIds").toString()));
      }
      if ((jsonObj.get("inventorySource") != null && !jsonObj.get("inventorySource").isJsonNull()) && !jsonObj.get("inventorySource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventorySource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventorySource").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            MarketplaceLabel.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if ((jsonObj.get("lastUpdaterOrCommentorRole") != null && !jsonObj.get("lastUpdaterOrCommentorRole").isJsonNull()) && !jsonObj.get("lastUpdaterOrCommentorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdaterOrCommentorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdaterOrCommentorRole").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("negotiationId") != null && !jsonObj.get("negotiationId").isJsonNull()) && !jsonObj.get("negotiationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negotiationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negotiationId").toString()));
      }
      if ((jsonObj.get("originatorRole") != null && !jsonObj.get("originatorRole").isJsonNull()) && !jsonObj.get("originatorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorRole").toString()));
      }
      if ((jsonObj.get("privateAuctionId") != null && !jsonObj.get("privateAuctionId").isJsonNull()) && !jsonObj.get("privateAuctionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateAuctionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateAuctionId").toString()));
      }
      if ((jsonObj.get("proposalId") != null && !jsonObj.get("proposalId").isJsonNull()) && !jsonObj.get("proposalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalId").toString()));
      }
      if ((jsonObj.get("proposalState") != null && !jsonObj.get("proposalState").isJsonNull()) && !jsonObj.get("proposalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalState").toString()));
      }
      if ((jsonObj.get("revisionNumber") != null && !jsonObj.get("revisionNumber").isJsonNull()) && !jsonObj.get("revisionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionNumber").toString()));
      }
      if ((jsonObj.get("revisionTimeMs") != null && !jsonObj.get("revisionTimeMs").isJsonNull()) && !jsonObj.get("revisionTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionTimeMs").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      if (jsonObj.get("sellerContacts") != null && !jsonObj.get("sellerContacts").isJsonNull()) {
        JsonArray jsonArraysellerContacts = jsonObj.getAsJsonArray("sellerContacts");
        if (jsonArraysellerContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sellerContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sellerContacts` to be an array in the JSON string but got `%s`", jsonObj.get("sellerContacts").toString()));
          }

          // validate the optional field `sellerContacts` (array)
          for (int i = 0; i < jsonArraysellerContacts.size(); i++) {
            ContactInformation.validateJsonElement(jsonArraysellerContacts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Proposal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Proposal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Proposal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Proposal.class));

       return (TypeAdapter<T>) new TypeAdapter<Proposal>() {
           @Override
           public void write(JsonWriter out, Proposal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Proposal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Proposal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Proposal
   * @throws IOException if the JSON string is invalid with respect to Proposal
   */
  public static Proposal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Proposal.class);
  }

  /**
   * Convert an instance of Proposal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

