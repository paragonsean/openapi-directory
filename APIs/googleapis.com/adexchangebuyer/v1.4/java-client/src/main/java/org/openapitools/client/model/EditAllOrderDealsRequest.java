/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MarketplaceDeal;
import org.openapitools.client.model.Proposal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EditAllOrderDealsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditAllOrderDealsRequest {
  public static final String SERIALIZED_NAME_DEALS = "deals";
  @SerializedName(SERIALIZED_NAME_DEALS)
  private List<MarketplaceDeal> deals = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPOSAL = "proposal";
  @SerializedName(SERIALIZED_NAME_PROPOSAL)
  private Proposal proposal;

  public static final String SERIALIZED_NAME_PROPOSAL_REVISION_NUMBER = "proposalRevisionNumber";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_REVISION_NUMBER)
  private String proposalRevisionNumber;

  public static final String SERIALIZED_NAME_UPDATE_ACTION = "updateAction";
  @SerializedName(SERIALIZED_NAME_UPDATE_ACTION)
  private String updateAction;

  public EditAllOrderDealsRequest() {
  }

  public EditAllOrderDealsRequest deals(List<MarketplaceDeal> deals) {
    this.deals = deals;
    return this;
  }

  public EditAllOrderDealsRequest addDealsItem(MarketplaceDeal dealsItem) {
    if (this.deals == null) {
      this.deals = new ArrayList<>();
    }
    this.deals.add(dealsItem);
    return this;
  }

  /**
   * List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.
   * @return deals
   */
  @javax.annotation.Nullable
  public List<MarketplaceDeal> getDeals() {
    return deals;
  }

  public void setDeals(List<MarketplaceDeal> deals) {
    this.deals = deals;
  }


  public EditAllOrderDealsRequest proposal(Proposal proposal) {
    this.proposal = proposal;
    return this;
  }

  /**
   * Get proposal
   * @return proposal
   */
  @javax.annotation.Nullable
  public Proposal getProposal() {
    return proposal;
  }

  public void setProposal(Proposal proposal) {
    this.proposal = proposal;
  }


  public EditAllOrderDealsRequest proposalRevisionNumber(String proposalRevisionNumber) {
    this.proposalRevisionNumber = proposalRevisionNumber;
    return this;
  }

  /**
   * The last known revision number for the proposal.
   * @return proposalRevisionNumber
   */
  @javax.annotation.Nullable
  public String getProposalRevisionNumber() {
    return proposalRevisionNumber;
  }

  public void setProposalRevisionNumber(String proposalRevisionNumber) {
    this.proposalRevisionNumber = proposalRevisionNumber;
  }


  public EditAllOrderDealsRequest updateAction(String updateAction) {
    this.updateAction = updateAction;
    return this;
  }

  /**
   * Indicates an optional action to take on the proposal
   * @return updateAction
   */
  @javax.annotation.Nullable
  public String getUpdateAction() {
    return updateAction;
  }

  public void setUpdateAction(String updateAction) {
    this.updateAction = updateAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditAllOrderDealsRequest editAllOrderDealsRequest = (EditAllOrderDealsRequest) o;
    return Objects.equals(this.deals, editAllOrderDealsRequest.deals) &&
        Objects.equals(this.proposal, editAllOrderDealsRequest.proposal) &&
        Objects.equals(this.proposalRevisionNumber, editAllOrderDealsRequest.proposalRevisionNumber) &&
        Objects.equals(this.updateAction, editAllOrderDealsRequest.updateAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deals, proposal, proposalRevisionNumber, updateAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditAllOrderDealsRequest {\n");
    sb.append("    deals: ").append(toIndentedString(deals)).append("\n");
    sb.append("    proposal: ").append(toIndentedString(proposal)).append("\n");
    sb.append("    proposalRevisionNumber: ").append(toIndentedString(proposalRevisionNumber)).append("\n");
    sb.append("    updateAction: ").append(toIndentedString(updateAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deals");
    openapiFields.add("proposal");
    openapiFields.add("proposalRevisionNumber");
    openapiFields.add("updateAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditAllOrderDealsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditAllOrderDealsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditAllOrderDealsRequest is not found in the empty JSON string", EditAllOrderDealsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditAllOrderDealsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditAllOrderDealsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("deals") != null && !jsonObj.get("deals").isJsonNull()) {
        JsonArray jsonArraydeals = jsonObj.getAsJsonArray("deals");
        if (jsonArraydeals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deals` to be an array in the JSON string but got `%s`", jsonObj.get("deals").toString()));
          }

          // validate the optional field `deals` (array)
          for (int i = 0; i < jsonArraydeals.size(); i++) {
            MarketplaceDeal.validateJsonElement(jsonArraydeals.get(i));
          };
        }
      }
      // validate the optional field `proposal`
      if (jsonObj.get("proposal") != null && !jsonObj.get("proposal").isJsonNull()) {
        Proposal.validateJsonElement(jsonObj.get("proposal"));
      }
      if ((jsonObj.get("proposalRevisionNumber") != null && !jsonObj.get("proposalRevisionNumber").isJsonNull()) && !jsonObj.get("proposalRevisionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalRevisionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalRevisionNumber").toString()));
      }
      if ((jsonObj.get("updateAction") != null && !jsonObj.get("updateAction").isJsonNull()) && !jsonObj.get("updateAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAction").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditAllOrderDealsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditAllOrderDealsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditAllOrderDealsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditAllOrderDealsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EditAllOrderDealsRequest>() {
           @Override
           public void write(JsonWriter out, EditAllOrderDealsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditAllOrderDealsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditAllOrderDealsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditAllOrderDealsRequest
   * @throws IOException if the JSON string is invalid with respect to EditAllOrderDealsRequest
   */
  public static EditAllOrderDealsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditAllOrderDealsRequest.class);
  }

  /**
   * Convert an instance of EditAllOrderDealsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

