/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DealTermsGuaranteedFixedPriceTermsBillingInfo;
import org.openapitools.client.model.PricePerBuyer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealTermsGuaranteedFixedPriceTerms
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealTermsGuaranteedFixedPriceTerms {
  public static final String SERIALIZED_NAME_BILLING_INFO = "billingInfo";
  @SerializedName(SERIALIZED_NAME_BILLING_INFO)
  private DealTermsGuaranteedFixedPriceTermsBillingInfo billingInfo;

  public static final String SERIALIZED_NAME_FIXED_PRICES = "fixedPrices";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICES)
  private List<PricePerBuyer> fixedPrices = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUARANTEED_IMPRESSIONS = "guaranteedImpressions";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_IMPRESSIONS)
  private String guaranteedImpressions;

  public static final String SERIALIZED_NAME_GUARANTEED_LOOKS = "guaranteedLooks";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_LOOKS)
  private String guaranteedLooks;

  public static final String SERIALIZED_NAME_MINIMUM_DAILY_LOOKS = "minimumDailyLooks";
  @SerializedName(SERIALIZED_NAME_MINIMUM_DAILY_LOOKS)
  private String minimumDailyLooks;

  public DealTermsGuaranteedFixedPriceTerms() {
  }

  public DealTermsGuaranteedFixedPriceTerms billingInfo(DealTermsGuaranteedFixedPriceTermsBillingInfo billingInfo) {
    this.billingInfo = billingInfo;
    return this;
  }

  /**
   * Get billingInfo
   * @return billingInfo
   */
  @javax.annotation.Nullable
  public DealTermsGuaranteedFixedPriceTermsBillingInfo getBillingInfo() {
    return billingInfo;
  }

  public void setBillingInfo(DealTermsGuaranteedFixedPriceTermsBillingInfo billingInfo) {
    this.billingInfo = billingInfo;
  }


  public DealTermsGuaranteedFixedPriceTerms fixedPrices(List<PricePerBuyer> fixedPrices) {
    this.fixedPrices = fixedPrices;
    return this;
  }

  public DealTermsGuaranteedFixedPriceTerms addFixedPricesItem(PricePerBuyer fixedPricesItem) {
    if (this.fixedPrices == null) {
      this.fixedPrices = new ArrayList<>();
    }
    this.fixedPrices.add(fixedPricesItem);
    return this;
  }

  /**
   * Fixed price for the specified buyer.
   * @return fixedPrices
   */
  @javax.annotation.Nullable
  public List<PricePerBuyer> getFixedPrices() {
    return fixedPrices;
  }

  public void setFixedPrices(List<PricePerBuyer> fixedPrices) {
    this.fixedPrices = fixedPrices;
  }


  public DealTermsGuaranteedFixedPriceTerms guaranteedImpressions(String guaranteedImpressions) {
    this.guaranteedImpressions = guaranteedImpressions;
    return this;
  }

  /**
   * Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.
   * @return guaranteedImpressions
   */
  @javax.annotation.Nullable
  public String getGuaranteedImpressions() {
    return guaranteedImpressions;
  }

  public void setGuaranteedImpressions(String guaranteedImpressions) {
    this.guaranteedImpressions = guaranteedImpressions;
  }


  public DealTermsGuaranteedFixedPriceTerms guaranteedLooks(String guaranteedLooks) {
    this.guaranteedLooks = guaranteedLooks;
    return this;
  }

  /**
   * Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.
   * @return guaranteedLooks
   */
  @javax.annotation.Nullable
  public String getGuaranteedLooks() {
    return guaranteedLooks;
  }

  public void setGuaranteedLooks(String guaranteedLooks) {
    this.guaranteedLooks = guaranteedLooks;
  }


  public DealTermsGuaranteedFixedPriceTerms minimumDailyLooks(String minimumDailyLooks) {
    this.minimumDailyLooks = minimumDailyLooks;
    return this;
  }

  /**
   * Count of minimum daily looks for a CPD deal. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.
   * @return minimumDailyLooks
   */
  @javax.annotation.Nullable
  public String getMinimumDailyLooks() {
    return minimumDailyLooks;
  }

  public void setMinimumDailyLooks(String minimumDailyLooks) {
    this.minimumDailyLooks = minimumDailyLooks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealTermsGuaranteedFixedPriceTerms dealTermsGuaranteedFixedPriceTerms = (DealTermsGuaranteedFixedPriceTerms) o;
    return Objects.equals(this.billingInfo, dealTermsGuaranteedFixedPriceTerms.billingInfo) &&
        Objects.equals(this.fixedPrices, dealTermsGuaranteedFixedPriceTerms.fixedPrices) &&
        Objects.equals(this.guaranteedImpressions, dealTermsGuaranteedFixedPriceTerms.guaranteedImpressions) &&
        Objects.equals(this.guaranteedLooks, dealTermsGuaranteedFixedPriceTerms.guaranteedLooks) &&
        Objects.equals(this.minimumDailyLooks, dealTermsGuaranteedFixedPriceTerms.minimumDailyLooks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingInfo, fixedPrices, guaranteedImpressions, guaranteedLooks, minimumDailyLooks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealTermsGuaranteedFixedPriceTerms {\n");
    sb.append("    billingInfo: ").append(toIndentedString(billingInfo)).append("\n");
    sb.append("    fixedPrices: ").append(toIndentedString(fixedPrices)).append("\n");
    sb.append("    guaranteedImpressions: ").append(toIndentedString(guaranteedImpressions)).append("\n");
    sb.append("    guaranteedLooks: ").append(toIndentedString(guaranteedLooks)).append("\n");
    sb.append("    minimumDailyLooks: ").append(toIndentedString(minimumDailyLooks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingInfo");
    openapiFields.add("fixedPrices");
    openapiFields.add("guaranteedImpressions");
    openapiFields.add("guaranteedLooks");
    openapiFields.add("minimumDailyLooks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealTermsGuaranteedFixedPriceTerms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealTermsGuaranteedFixedPriceTerms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealTermsGuaranteedFixedPriceTerms is not found in the empty JSON string", DealTermsGuaranteedFixedPriceTerms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealTermsGuaranteedFixedPriceTerms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealTermsGuaranteedFixedPriceTerms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingInfo`
      if (jsonObj.get("billingInfo") != null && !jsonObj.get("billingInfo").isJsonNull()) {
        DealTermsGuaranteedFixedPriceTermsBillingInfo.validateJsonElement(jsonObj.get("billingInfo"));
      }
      if (jsonObj.get("fixedPrices") != null && !jsonObj.get("fixedPrices").isJsonNull()) {
        JsonArray jsonArrayfixedPrices = jsonObj.getAsJsonArray("fixedPrices");
        if (jsonArrayfixedPrices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fixedPrices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fixedPrices` to be an array in the JSON string but got `%s`", jsonObj.get("fixedPrices").toString()));
          }

          // validate the optional field `fixedPrices` (array)
          for (int i = 0; i < jsonArrayfixedPrices.size(); i++) {
            PricePerBuyer.validateJsonElement(jsonArrayfixedPrices.get(i));
          };
        }
      }
      if ((jsonObj.get("guaranteedImpressions") != null && !jsonObj.get("guaranteedImpressions").isJsonNull()) && !jsonObj.get("guaranteedImpressions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guaranteedImpressions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guaranteedImpressions").toString()));
      }
      if ((jsonObj.get("guaranteedLooks") != null && !jsonObj.get("guaranteedLooks").isJsonNull()) && !jsonObj.get("guaranteedLooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guaranteedLooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guaranteedLooks").toString()));
      }
      if ((jsonObj.get("minimumDailyLooks") != null && !jsonObj.get("minimumDailyLooks").isJsonNull()) && !jsonObj.get("minimumDailyLooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumDailyLooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumDailyLooks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealTermsGuaranteedFixedPriceTerms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealTermsGuaranteedFixedPriceTerms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealTermsGuaranteedFixedPriceTerms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealTermsGuaranteedFixedPriceTerms.class));

       return (TypeAdapter<T>) new TypeAdapter<DealTermsGuaranteedFixedPriceTerms>() {
           @Override
           public void write(JsonWriter out, DealTermsGuaranteedFixedPriceTerms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealTermsGuaranteedFixedPriceTerms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealTermsGuaranteedFixedPriceTerms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealTermsGuaranteedFixedPriceTerms
   * @throws IOException if the JSON string is invalid with respect to DealTermsGuaranteedFixedPriceTerms
   */
  public static DealTermsGuaranteedFixedPriceTerms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealTermsGuaranteedFixedPriceTerms.class);
  }

  /**
   * Convert an instance of DealTermsGuaranteedFixedPriceTerms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

