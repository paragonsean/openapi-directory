/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TargetingValueSize;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Next Id: 7
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetingValueCreativeSize {
  public static final String SERIALIZED_NAME_ALLOWED_FORMATS = "allowedFormats";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FORMATS)
  private List<String> allowedFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANION_SIZES = "companionSizes";
  @SerializedName(SERIALIZED_NAME_COMPANION_SIZES)
  private List<TargetingValueSize> companionSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_SIZE_TYPE = "creativeSizeType";
  @SerializedName(SERIALIZED_NAME_CREATIVE_SIZE_TYPE)
  private String creativeSizeType;

  public static final String SERIALIZED_NAME_NATIVE_TEMPLATE = "nativeTemplate";
  @SerializedName(SERIALIZED_NAME_NATIVE_TEMPLATE)
  private String nativeTemplate;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private TargetingValueSize size;

  public static final String SERIALIZED_NAME_SKIPPABLE_AD_TYPE = "skippableAdType";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE_AD_TYPE)
  private String skippableAdType;

  public TargetingValueCreativeSize() {
  }

  public TargetingValueCreativeSize allowedFormats(List<String> allowedFormats) {
    this.allowedFormats = allowedFormats;
    return this;
  }

  public TargetingValueCreativeSize addAllowedFormatsItem(String allowedFormatsItem) {
    if (this.allowedFormats == null) {
      this.allowedFormats = new ArrayList<>();
    }
    this.allowedFormats.add(allowedFormatsItem);
    return this;
  }

  /**
   * The formats allowed by the publisher.
   * @return allowedFormats
   */
  @javax.annotation.Nullable
  public List<String> getAllowedFormats() {
    return allowedFormats;
  }

  public void setAllowedFormats(List<String> allowedFormats) {
    this.allowedFormats = allowedFormats;
  }


  public TargetingValueCreativeSize companionSizes(List<TargetingValueSize> companionSizes) {
    this.companionSizes = companionSizes;
    return this;
  }

  public TargetingValueCreativeSize addCompanionSizesItem(TargetingValueSize companionSizesItem) {
    if (this.companionSizes == null) {
      this.companionSizes = new ArrayList<>();
    }
    this.companionSizes.add(companionSizesItem);
    return this;
  }

  /**
   * For video size type, the list of companion sizes.
   * @return companionSizes
   */
  @javax.annotation.Nullable
  public List<TargetingValueSize> getCompanionSizes() {
    return companionSizes;
  }

  public void setCompanionSizes(List<TargetingValueSize> companionSizes) {
    this.companionSizes = companionSizes;
  }


  public TargetingValueCreativeSize creativeSizeType(String creativeSizeType) {
    this.creativeSizeType = creativeSizeType;
    return this;
  }

  /**
   * The Creative size type.
   * @return creativeSizeType
   */
  @javax.annotation.Nullable
  public String getCreativeSizeType() {
    return creativeSizeType;
  }

  public void setCreativeSizeType(String creativeSizeType) {
    this.creativeSizeType = creativeSizeType;
  }


  public TargetingValueCreativeSize nativeTemplate(String nativeTemplate) {
    this.nativeTemplate = nativeTemplate;
    return this;
  }

  /**
   * The native template for native ad.
   * @return nativeTemplate
   */
  @javax.annotation.Nullable
  public String getNativeTemplate() {
    return nativeTemplate;
  }

  public void setNativeTemplate(String nativeTemplate) {
    this.nativeTemplate = nativeTemplate;
  }


  public TargetingValueCreativeSize size(TargetingValueSize size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public TargetingValueSize getSize() {
    return size;
  }

  public void setSize(TargetingValueSize size) {
    this.size = size;
  }


  public TargetingValueCreativeSize skippableAdType(String skippableAdType) {
    this.skippableAdType = skippableAdType;
    return this;
  }

  /**
   * The skippable ad type for video size.
   * @return skippableAdType
   */
  @javax.annotation.Nullable
  public String getSkippableAdType() {
    return skippableAdType;
  }

  public void setSkippableAdType(String skippableAdType) {
    this.skippableAdType = skippableAdType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetingValueCreativeSize targetingValueCreativeSize = (TargetingValueCreativeSize) o;
    return Objects.equals(this.allowedFormats, targetingValueCreativeSize.allowedFormats) &&
        Objects.equals(this.companionSizes, targetingValueCreativeSize.companionSizes) &&
        Objects.equals(this.creativeSizeType, targetingValueCreativeSize.creativeSizeType) &&
        Objects.equals(this.nativeTemplate, targetingValueCreativeSize.nativeTemplate) &&
        Objects.equals(this.size, targetingValueCreativeSize.size) &&
        Objects.equals(this.skippableAdType, targetingValueCreativeSize.skippableAdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedFormats, companionSizes, creativeSizeType, nativeTemplate, size, skippableAdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetingValueCreativeSize {\n");
    sb.append("    allowedFormats: ").append(toIndentedString(allowedFormats)).append("\n");
    sb.append("    companionSizes: ").append(toIndentedString(companionSizes)).append("\n");
    sb.append("    creativeSizeType: ").append(toIndentedString(creativeSizeType)).append("\n");
    sb.append("    nativeTemplate: ").append(toIndentedString(nativeTemplate)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    skippableAdType: ").append(toIndentedString(skippableAdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedFormats");
    openapiFields.add("companionSizes");
    openapiFields.add("creativeSizeType");
    openapiFields.add("nativeTemplate");
    openapiFields.add("size");
    openapiFields.add("skippableAdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetingValueCreativeSize
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetingValueCreativeSize.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetingValueCreativeSize is not found in the empty JSON string", TargetingValueCreativeSize.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetingValueCreativeSize.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetingValueCreativeSize` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedFormats") != null && !jsonObj.get("allowedFormats").isJsonNull() && !jsonObj.get("allowedFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedFormats` to be an array in the JSON string but got `%s`", jsonObj.get("allowedFormats").toString()));
      }
      if (jsonObj.get("companionSizes") != null && !jsonObj.get("companionSizes").isJsonNull()) {
        JsonArray jsonArraycompanionSizes = jsonObj.getAsJsonArray("companionSizes");
        if (jsonArraycompanionSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("companionSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `companionSizes` to be an array in the JSON string but got `%s`", jsonObj.get("companionSizes").toString()));
          }

          // validate the optional field `companionSizes` (array)
          for (int i = 0; i < jsonArraycompanionSizes.size(); i++) {
            TargetingValueSize.validateJsonElement(jsonArraycompanionSizes.get(i));
          };
        }
      }
      if ((jsonObj.get("creativeSizeType") != null && !jsonObj.get("creativeSizeType").isJsonNull()) && !jsonObj.get("creativeSizeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeSizeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeSizeType").toString()));
      }
      if ((jsonObj.get("nativeTemplate") != null && !jsonObj.get("nativeTemplate").isJsonNull()) && !jsonObj.get("nativeTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nativeTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nativeTemplate").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        TargetingValueSize.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) && !jsonObj.get("skippableAdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skippableAdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skippableAdType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetingValueCreativeSize.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetingValueCreativeSize' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetingValueCreativeSize> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetingValueCreativeSize.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetingValueCreativeSize>() {
           @Override
           public void write(JsonWriter out, TargetingValueCreativeSize value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetingValueCreativeSize read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetingValueCreativeSize given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetingValueCreativeSize
   * @throws IOException if the JSON string is invalid with respect to TargetingValueCreativeSize
   */
  public static TargetingValueCreativeSize fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetingValueCreativeSize.class);
  }

  /**
   * Convert an instance of TargetingValueCreativeSize to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

