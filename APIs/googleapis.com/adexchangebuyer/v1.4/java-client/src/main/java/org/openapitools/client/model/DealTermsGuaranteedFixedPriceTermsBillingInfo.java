/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealTermsGuaranteedFixedPriceTermsBillingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealTermsGuaranteedFixedPriceTermsBillingInfo {
  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION_TIME_MS = "currencyConversionTimeMs";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION_TIME_MS)
  private String currencyConversionTimeMs;

  public static final String SERIALIZED_NAME_DFP_LINE_ITEM_ID = "dfpLineItemId";
  @SerializedName(SERIALIZED_NAME_DFP_LINE_ITEM_ID)
  private String dfpLineItemId;

  public static final String SERIALIZED_NAME_ORIGINAL_CONTRACTED_QUANTITY = "originalContractedQuantity";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CONTRACTED_QUANTITY)
  private String originalContractedQuantity;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public DealTermsGuaranteedFixedPriceTermsBillingInfo() {
  }

  public DealTermsGuaranteedFixedPriceTermsBillingInfo currencyConversionTimeMs(String currencyConversionTimeMs) {
    this.currencyConversionTimeMs = currencyConversionTimeMs;
    return this;
  }

  /**
   * The timestamp (in ms since epoch) when the original reservation price for the deal was first converted to DFP currency. This is used to convert the contracted price into buyer&#39;s currency without discrepancy.
   * @return currencyConversionTimeMs
   */
  @javax.annotation.Nullable
  public String getCurrencyConversionTimeMs() {
    return currencyConversionTimeMs;
  }

  public void setCurrencyConversionTimeMs(String currencyConversionTimeMs) {
    this.currencyConversionTimeMs = currencyConversionTimeMs;
  }


  public DealTermsGuaranteedFixedPriceTermsBillingInfo dfpLineItemId(String dfpLineItemId) {
    this.dfpLineItemId = dfpLineItemId;
    return this;
  }

  /**
   * The DFP line item id associated with this deal. For features like CPD, buyers can retrieve the DFP line item for billing reconciliation.
   * @return dfpLineItemId
   */
  @javax.annotation.Nullable
  public String getDfpLineItemId() {
    return dfpLineItemId;
  }

  public void setDfpLineItemId(String dfpLineItemId) {
    this.dfpLineItemId = dfpLineItemId;
  }


  public DealTermsGuaranteedFixedPriceTermsBillingInfo originalContractedQuantity(String originalContractedQuantity) {
    this.originalContractedQuantity = originalContractedQuantity;
    return this;
  }

  /**
   * The original contracted quantity (# impressions) for this deal. To ensure delivery, sometimes the publisher will book the deal with a impression buffer, such that guaranteed_looks is greater than the contracted quantity. However clients are billed using the original contracted quantity.
   * @return originalContractedQuantity
   */
  @javax.annotation.Nullable
  public String getOriginalContractedQuantity() {
    return originalContractedQuantity;
  }

  public void setOriginalContractedQuantity(String originalContractedQuantity) {
    this.originalContractedQuantity = originalContractedQuantity;
  }


  public DealTermsGuaranteedFixedPriceTermsBillingInfo price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealTermsGuaranteedFixedPriceTermsBillingInfo dealTermsGuaranteedFixedPriceTermsBillingInfo = (DealTermsGuaranteedFixedPriceTermsBillingInfo) o;
    return Objects.equals(this.currencyConversionTimeMs, dealTermsGuaranteedFixedPriceTermsBillingInfo.currencyConversionTimeMs) &&
        Objects.equals(this.dfpLineItemId, dealTermsGuaranteedFixedPriceTermsBillingInfo.dfpLineItemId) &&
        Objects.equals(this.originalContractedQuantity, dealTermsGuaranteedFixedPriceTermsBillingInfo.originalContractedQuantity) &&
        Objects.equals(this.price, dealTermsGuaranteedFixedPriceTermsBillingInfo.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyConversionTimeMs, dfpLineItemId, originalContractedQuantity, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealTermsGuaranteedFixedPriceTermsBillingInfo {\n");
    sb.append("    currencyConversionTimeMs: ").append(toIndentedString(currencyConversionTimeMs)).append("\n");
    sb.append("    dfpLineItemId: ").append(toIndentedString(dfpLineItemId)).append("\n");
    sb.append("    originalContractedQuantity: ").append(toIndentedString(originalContractedQuantity)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyConversionTimeMs");
    openapiFields.add("dfpLineItemId");
    openapiFields.add("originalContractedQuantity");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealTermsGuaranteedFixedPriceTermsBillingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealTermsGuaranteedFixedPriceTermsBillingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealTermsGuaranteedFixedPriceTermsBillingInfo is not found in the empty JSON string", DealTermsGuaranteedFixedPriceTermsBillingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealTermsGuaranteedFixedPriceTermsBillingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealTermsGuaranteedFixedPriceTermsBillingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyConversionTimeMs") != null && !jsonObj.get("currencyConversionTimeMs").isJsonNull()) && !jsonObj.get("currencyConversionTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyConversionTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyConversionTimeMs").toString()));
      }
      if ((jsonObj.get("dfpLineItemId") != null && !jsonObj.get("dfpLineItemId").isJsonNull()) && !jsonObj.get("dfpLineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dfpLineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dfpLineItemId").toString()));
      }
      if ((jsonObj.get("originalContractedQuantity") != null && !jsonObj.get("originalContractedQuantity").isJsonNull()) && !jsonObj.get("originalContractedQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalContractedQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalContractedQuantity").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealTermsGuaranteedFixedPriceTermsBillingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealTermsGuaranteedFixedPriceTermsBillingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealTermsGuaranteedFixedPriceTermsBillingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealTermsGuaranteedFixedPriceTermsBillingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DealTermsGuaranteedFixedPriceTermsBillingInfo>() {
           @Override
           public void write(JsonWriter out, DealTermsGuaranteedFixedPriceTermsBillingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealTermsGuaranteedFixedPriceTermsBillingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealTermsGuaranteedFixedPriceTermsBillingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealTermsGuaranteedFixedPriceTermsBillingInfo
   * @throws IOException if the JSON string is invalid with respect to DealTermsGuaranteedFixedPriceTermsBillingInfo
   */
  public static DealTermsGuaranteedFixedPriceTermsBillingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealTermsGuaranteedFixedPriceTermsBillingInfo.class);
  }

  /**
   * Convert an instance of DealTermsGuaranteedFixedPriceTermsBillingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

