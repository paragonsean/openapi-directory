/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tracks which parties (if any) have paused a deal. The deal is considered paused if has_buyer_paused || has_seller_paused. Each of the has_buyer_paused or the has_seller_paused bits can be set independently.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealServingMetadataDealPauseStatus {
  public static final String SERIALIZED_NAME_BUYER_PAUSE_REASON = "buyerPauseReason";
  @SerializedName(SERIALIZED_NAME_BUYER_PAUSE_REASON)
  private String buyerPauseReason;

  public static final String SERIALIZED_NAME_FIRST_PAUSED_BY = "firstPausedBy";
  @SerializedName(SERIALIZED_NAME_FIRST_PAUSED_BY)
  private String firstPausedBy;

  public static final String SERIALIZED_NAME_HAS_BUYER_PAUSED = "hasBuyerPaused";
  @SerializedName(SERIALIZED_NAME_HAS_BUYER_PAUSED)
  private Boolean hasBuyerPaused;

  public static final String SERIALIZED_NAME_HAS_SELLER_PAUSED = "hasSellerPaused";
  @SerializedName(SERIALIZED_NAME_HAS_SELLER_PAUSED)
  private Boolean hasSellerPaused;

  public static final String SERIALIZED_NAME_SELLER_PAUSE_REASON = "sellerPauseReason";
  @SerializedName(SERIALIZED_NAME_SELLER_PAUSE_REASON)
  private String sellerPauseReason;

  public DealServingMetadataDealPauseStatus() {
  }

  public DealServingMetadataDealPauseStatus buyerPauseReason(String buyerPauseReason) {
    this.buyerPauseReason = buyerPauseReason;
    return this;
  }

  /**
   * Get buyerPauseReason
   * @return buyerPauseReason
   */
  @javax.annotation.Nullable
  public String getBuyerPauseReason() {
    return buyerPauseReason;
  }

  public void setBuyerPauseReason(String buyerPauseReason) {
    this.buyerPauseReason = buyerPauseReason;
  }


  public DealServingMetadataDealPauseStatus firstPausedBy(String firstPausedBy) {
    this.firstPausedBy = firstPausedBy;
    return this;
  }

  /**
   * If the deal is paused, records which party paused the deal first.
   * @return firstPausedBy
   */
  @javax.annotation.Nullable
  public String getFirstPausedBy() {
    return firstPausedBy;
  }

  public void setFirstPausedBy(String firstPausedBy) {
    this.firstPausedBy = firstPausedBy;
  }


  public DealServingMetadataDealPauseStatus hasBuyerPaused(Boolean hasBuyerPaused) {
    this.hasBuyerPaused = hasBuyerPaused;
    return this;
  }

  /**
   * Get hasBuyerPaused
   * @return hasBuyerPaused
   */
  @javax.annotation.Nullable
  public Boolean getHasBuyerPaused() {
    return hasBuyerPaused;
  }

  public void setHasBuyerPaused(Boolean hasBuyerPaused) {
    this.hasBuyerPaused = hasBuyerPaused;
  }


  public DealServingMetadataDealPauseStatus hasSellerPaused(Boolean hasSellerPaused) {
    this.hasSellerPaused = hasSellerPaused;
    return this;
  }

  /**
   * Get hasSellerPaused
   * @return hasSellerPaused
   */
  @javax.annotation.Nullable
  public Boolean getHasSellerPaused() {
    return hasSellerPaused;
  }

  public void setHasSellerPaused(Boolean hasSellerPaused) {
    this.hasSellerPaused = hasSellerPaused;
  }


  public DealServingMetadataDealPauseStatus sellerPauseReason(String sellerPauseReason) {
    this.sellerPauseReason = sellerPauseReason;
    return this;
  }

  /**
   * Get sellerPauseReason
   * @return sellerPauseReason
   */
  @javax.annotation.Nullable
  public String getSellerPauseReason() {
    return sellerPauseReason;
  }

  public void setSellerPauseReason(String sellerPauseReason) {
    this.sellerPauseReason = sellerPauseReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealServingMetadataDealPauseStatus dealServingMetadataDealPauseStatus = (DealServingMetadataDealPauseStatus) o;
    return Objects.equals(this.buyerPauseReason, dealServingMetadataDealPauseStatus.buyerPauseReason) &&
        Objects.equals(this.firstPausedBy, dealServingMetadataDealPauseStatus.firstPausedBy) &&
        Objects.equals(this.hasBuyerPaused, dealServingMetadataDealPauseStatus.hasBuyerPaused) &&
        Objects.equals(this.hasSellerPaused, dealServingMetadataDealPauseStatus.hasSellerPaused) &&
        Objects.equals(this.sellerPauseReason, dealServingMetadataDealPauseStatus.sellerPauseReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyerPauseReason, firstPausedBy, hasBuyerPaused, hasSellerPaused, sellerPauseReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealServingMetadataDealPauseStatus {\n");
    sb.append("    buyerPauseReason: ").append(toIndentedString(buyerPauseReason)).append("\n");
    sb.append("    firstPausedBy: ").append(toIndentedString(firstPausedBy)).append("\n");
    sb.append("    hasBuyerPaused: ").append(toIndentedString(hasBuyerPaused)).append("\n");
    sb.append("    hasSellerPaused: ").append(toIndentedString(hasSellerPaused)).append("\n");
    sb.append("    sellerPauseReason: ").append(toIndentedString(sellerPauseReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyerPauseReason");
    openapiFields.add("firstPausedBy");
    openapiFields.add("hasBuyerPaused");
    openapiFields.add("hasSellerPaused");
    openapiFields.add("sellerPauseReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealServingMetadataDealPauseStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealServingMetadataDealPauseStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealServingMetadataDealPauseStatus is not found in the empty JSON string", DealServingMetadataDealPauseStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealServingMetadataDealPauseStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealServingMetadataDealPauseStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buyerPauseReason") != null && !jsonObj.get("buyerPauseReason").isJsonNull()) && !jsonObj.get("buyerPauseReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerPauseReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerPauseReason").toString()));
      }
      if ((jsonObj.get("firstPausedBy") != null && !jsonObj.get("firstPausedBy").isJsonNull()) && !jsonObj.get("firstPausedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstPausedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstPausedBy").toString()));
      }
      if ((jsonObj.get("sellerPauseReason") != null && !jsonObj.get("sellerPauseReason").isJsonNull()) && !jsonObj.get("sellerPauseReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerPauseReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerPauseReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealServingMetadataDealPauseStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealServingMetadataDealPauseStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealServingMetadataDealPauseStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealServingMetadataDealPauseStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DealServingMetadataDealPauseStatus>() {
           @Override
           public void write(JsonWriter out, DealServingMetadataDealPauseStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealServingMetadataDealPauseStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealServingMetadataDealPauseStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealServingMetadataDealPauseStatus
   * @throws IOException if the JSON string is invalid with respect to DealServingMetadataDealPauseStatus
   */
  public static DealServingMetadataDealPauseStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealServingMetadataDealPauseStatus.class);
  }

  /**
   * Convert an instance of DealServingMetadataDealPauseStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

