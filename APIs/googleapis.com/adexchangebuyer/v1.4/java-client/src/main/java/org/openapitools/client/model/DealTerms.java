/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DealTermsGuaranteedFixedPriceTerms;
import org.openapitools.client.model.DealTermsNonGuaranteedAuctionTerms;
import org.openapitools.client.model.DealTermsNonGuaranteedFixedPriceTerms;
import org.openapitools.client.model.DealTermsRubiconNonGuaranteedTerms;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealTerms
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DealTerms {
  public static final String SERIALIZED_NAME_BRANDING_TYPE = "brandingType";
  @SerializedName(SERIALIZED_NAME_BRANDING_TYPE)
  private String brandingType;

  public static final String SERIALIZED_NAME_CROSS_LISTED_EXTERNAL_DEAL_ID_TYPE = "crossListedExternalDealIdType";
  @SerializedName(SERIALIZED_NAME_CROSS_LISTED_EXTERNAL_DEAL_ID_TYPE)
  private String crossListedExternalDealIdType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ESTIMATED_GROSS_SPEND = "estimatedGrossSpend";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_GROSS_SPEND)
  private Price estimatedGrossSpend;

  public static final String SERIALIZED_NAME_ESTIMATED_IMPRESSIONS_PER_DAY = "estimatedImpressionsPerDay";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_IMPRESSIONS_PER_DAY)
  private String estimatedImpressionsPerDay;

  public static final String SERIALIZED_NAME_GUARANTEED_FIXED_PRICE_TERMS = "guaranteedFixedPriceTerms";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_FIXED_PRICE_TERMS)
  private DealTermsGuaranteedFixedPriceTerms guaranteedFixedPriceTerms;

  public static final String SERIALIZED_NAME_NON_GUARANTEED_AUCTION_TERMS = "nonGuaranteedAuctionTerms";
  @SerializedName(SERIALIZED_NAME_NON_GUARANTEED_AUCTION_TERMS)
  private DealTermsNonGuaranteedAuctionTerms nonGuaranteedAuctionTerms;

  public static final String SERIALIZED_NAME_NON_GUARANTEED_FIXED_PRICE_TERMS = "nonGuaranteedFixedPriceTerms";
  @SerializedName(SERIALIZED_NAME_NON_GUARANTEED_FIXED_PRICE_TERMS)
  private DealTermsNonGuaranteedFixedPriceTerms nonGuaranteedFixedPriceTerms;

  public static final String SERIALIZED_NAME_RUBICON_NON_GUARANTEED_TERMS = "rubiconNonGuaranteedTerms";
  @SerializedName(SERIALIZED_NAME_RUBICON_NON_GUARANTEED_TERMS)
  private DealTermsRubiconNonGuaranteedTerms rubiconNonGuaranteedTerms;

  public static final String SERIALIZED_NAME_SELLER_TIME_ZONE = "sellerTimeZone";
  @SerializedName(SERIALIZED_NAME_SELLER_TIME_ZONE)
  private String sellerTimeZone;

  public DealTerms() {
  }

  public DealTerms brandingType(String brandingType) {
    this.brandingType = brandingType;
    return this;
  }

  /**
   * Visibility of the URL in bid requests.
   * @return brandingType
   */
  @javax.annotation.Nullable
  public String getBrandingType() {
    return brandingType;
  }

  public void setBrandingType(String brandingType) {
    this.brandingType = brandingType;
  }


  public DealTerms crossListedExternalDealIdType(String crossListedExternalDealIdType) {
    this.crossListedExternalDealIdType = crossListedExternalDealIdType;
    return this;
  }

  /**
   * Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case.
   * @return crossListedExternalDealIdType
   */
  @javax.annotation.Nullable
  public String getCrossListedExternalDealIdType() {
    return crossListedExternalDealIdType;
  }

  public void setCrossListedExternalDealIdType(String crossListedExternalDealIdType) {
    this.crossListedExternalDealIdType = crossListedExternalDealIdType;
  }


  public DealTerms description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the proposed terms of the deal.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DealTerms estimatedGrossSpend(Price estimatedGrossSpend) {
    this.estimatedGrossSpend = estimatedGrossSpend;
    return this;
  }

  /**
   * Get estimatedGrossSpend
   * @return estimatedGrossSpend
   */
  @javax.annotation.Nullable
  public Price getEstimatedGrossSpend() {
    return estimatedGrossSpend;
  }

  public void setEstimatedGrossSpend(Price estimatedGrossSpend) {
    this.estimatedGrossSpend = estimatedGrossSpend;
  }


  public DealTerms estimatedImpressionsPerDay(String estimatedImpressionsPerDay) {
    this.estimatedImpressionsPerDay = estimatedImpressionsPerDay;
    return this;
  }

  /**
   * Non-binding estimate of the impressions served per day Can be set by buyer or seller.
   * @return estimatedImpressionsPerDay
   */
  @javax.annotation.Nullable
  public String getEstimatedImpressionsPerDay() {
    return estimatedImpressionsPerDay;
  }

  public void setEstimatedImpressionsPerDay(String estimatedImpressionsPerDay) {
    this.estimatedImpressionsPerDay = estimatedImpressionsPerDay;
  }


  public DealTerms guaranteedFixedPriceTerms(DealTermsGuaranteedFixedPriceTerms guaranteedFixedPriceTerms) {
    this.guaranteedFixedPriceTerms = guaranteedFixedPriceTerms;
    return this;
  }

  /**
   * Get guaranteedFixedPriceTerms
   * @return guaranteedFixedPriceTerms
   */
  @javax.annotation.Nullable
  public DealTermsGuaranteedFixedPriceTerms getGuaranteedFixedPriceTerms() {
    return guaranteedFixedPriceTerms;
  }

  public void setGuaranteedFixedPriceTerms(DealTermsGuaranteedFixedPriceTerms guaranteedFixedPriceTerms) {
    this.guaranteedFixedPriceTerms = guaranteedFixedPriceTerms;
  }


  public DealTerms nonGuaranteedAuctionTerms(DealTermsNonGuaranteedAuctionTerms nonGuaranteedAuctionTerms) {
    this.nonGuaranteedAuctionTerms = nonGuaranteedAuctionTerms;
    return this;
  }

  /**
   * Get nonGuaranteedAuctionTerms
   * @return nonGuaranteedAuctionTerms
   */
  @javax.annotation.Nullable
  public DealTermsNonGuaranteedAuctionTerms getNonGuaranteedAuctionTerms() {
    return nonGuaranteedAuctionTerms;
  }

  public void setNonGuaranteedAuctionTerms(DealTermsNonGuaranteedAuctionTerms nonGuaranteedAuctionTerms) {
    this.nonGuaranteedAuctionTerms = nonGuaranteedAuctionTerms;
  }


  public DealTerms nonGuaranteedFixedPriceTerms(DealTermsNonGuaranteedFixedPriceTerms nonGuaranteedFixedPriceTerms) {
    this.nonGuaranteedFixedPriceTerms = nonGuaranteedFixedPriceTerms;
    return this;
  }

  /**
   * Get nonGuaranteedFixedPriceTerms
   * @return nonGuaranteedFixedPriceTerms
   */
  @javax.annotation.Nullable
  public DealTermsNonGuaranteedFixedPriceTerms getNonGuaranteedFixedPriceTerms() {
    return nonGuaranteedFixedPriceTerms;
  }

  public void setNonGuaranteedFixedPriceTerms(DealTermsNonGuaranteedFixedPriceTerms nonGuaranteedFixedPriceTerms) {
    this.nonGuaranteedFixedPriceTerms = nonGuaranteedFixedPriceTerms;
  }


  public DealTerms rubiconNonGuaranteedTerms(DealTermsRubiconNonGuaranteedTerms rubiconNonGuaranteedTerms) {
    this.rubiconNonGuaranteedTerms = rubiconNonGuaranteedTerms;
    return this;
  }

  /**
   * Get rubiconNonGuaranteedTerms
   * @return rubiconNonGuaranteedTerms
   */
  @javax.annotation.Nullable
  public DealTermsRubiconNonGuaranteedTerms getRubiconNonGuaranteedTerms() {
    return rubiconNonGuaranteedTerms;
  }

  public void setRubiconNonGuaranteedTerms(DealTermsRubiconNonGuaranteedTerms rubiconNonGuaranteedTerms) {
    this.rubiconNonGuaranteedTerms = rubiconNonGuaranteedTerms;
  }


  public DealTerms sellerTimeZone(String sellerTimeZone) {
    this.sellerTimeZone = sellerTimeZone;
    return this;
  }

  /**
   * For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)
   * @return sellerTimeZone
   */
  @javax.annotation.Nullable
  public String getSellerTimeZone() {
    return sellerTimeZone;
  }

  public void setSellerTimeZone(String sellerTimeZone) {
    this.sellerTimeZone = sellerTimeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealTerms dealTerms = (DealTerms) o;
    return Objects.equals(this.brandingType, dealTerms.brandingType) &&
        Objects.equals(this.crossListedExternalDealIdType, dealTerms.crossListedExternalDealIdType) &&
        Objects.equals(this.description, dealTerms.description) &&
        Objects.equals(this.estimatedGrossSpend, dealTerms.estimatedGrossSpend) &&
        Objects.equals(this.estimatedImpressionsPerDay, dealTerms.estimatedImpressionsPerDay) &&
        Objects.equals(this.guaranteedFixedPriceTerms, dealTerms.guaranteedFixedPriceTerms) &&
        Objects.equals(this.nonGuaranteedAuctionTerms, dealTerms.nonGuaranteedAuctionTerms) &&
        Objects.equals(this.nonGuaranteedFixedPriceTerms, dealTerms.nonGuaranteedFixedPriceTerms) &&
        Objects.equals(this.rubiconNonGuaranteedTerms, dealTerms.rubiconNonGuaranteedTerms) &&
        Objects.equals(this.sellerTimeZone, dealTerms.sellerTimeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandingType, crossListedExternalDealIdType, description, estimatedGrossSpend, estimatedImpressionsPerDay, guaranteedFixedPriceTerms, nonGuaranteedAuctionTerms, nonGuaranteedFixedPriceTerms, rubiconNonGuaranteedTerms, sellerTimeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealTerms {\n");
    sb.append("    brandingType: ").append(toIndentedString(brandingType)).append("\n");
    sb.append("    crossListedExternalDealIdType: ").append(toIndentedString(crossListedExternalDealIdType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    estimatedGrossSpend: ").append(toIndentedString(estimatedGrossSpend)).append("\n");
    sb.append("    estimatedImpressionsPerDay: ").append(toIndentedString(estimatedImpressionsPerDay)).append("\n");
    sb.append("    guaranteedFixedPriceTerms: ").append(toIndentedString(guaranteedFixedPriceTerms)).append("\n");
    sb.append("    nonGuaranteedAuctionTerms: ").append(toIndentedString(nonGuaranteedAuctionTerms)).append("\n");
    sb.append("    nonGuaranteedFixedPriceTerms: ").append(toIndentedString(nonGuaranteedFixedPriceTerms)).append("\n");
    sb.append("    rubiconNonGuaranteedTerms: ").append(toIndentedString(rubiconNonGuaranteedTerms)).append("\n");
    sb.append("    sellerTimeZone: ").append(toIndentedString(sellerTimeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandingType");
    openapiFields.add("crossListedExternalDealIdType");
    openapiFields.add("description");
    openapiFields.add("estimatedGrossSpend");
    openapiFields.add("estimatedImpressionsPerDay");
    openapiFields.add("guaranteedFixedPriceTerms");
    openapiFields.add("nonGuaranteedAuctionTerms");
    openapiFields.add("nonGuaranteedFixedPriceTerms");
    openapiFields.add("rubiconNonGuaranteedTerms");
    openapiFields.add("sellerTimeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealTerms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealTerms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealTerms is not found in the empty JSON string", DealTerms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealTerms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealTerms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brandingType") != null && !jsonObj.get("brandingType").isJsonNull()) && !jsonObj.get("brandingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandingType").toString()));
      }
      if ((jsonObj.get("crossListedExternalDealIdType") != null && !jsonObj.get("crossListedExternalDealIdType").isJsonNull()) && !jsonObj.get("crossListedExternalDealIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossListedExternalDealIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossListedExternalDealIdType").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `estimatedGrossSpend`
      if (jsonObj.get("estimatedGrossSpend") != null && !jsonObj.get("estimatedGrossSpend").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("estimatedGrossSpend"));
      }
      if ((jsonObj.get("estimatedImpressionsPerDay") != null && !jsonObj.get("estimatedImpressionsPerDay").isJsonNull()) && !jsonObj.get("estimatedImpressionsPerDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedImpressionsPerDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedImpressionsPerDay").toString()));
      }
      // validate the optional field `guaranteedFixedPriceTerms`
      if (jsonObj.get("guaranteedFixedPriceTerms") != null && !jsonObj.get("guaranteedFixedPriceTerms").isJsonNull()) {
        DealTermsGuaranteedFixedPriceTerms.validateJsonElement(jsonObj.get("guaranteedFixedPriceTerms"));
      }
      // validate the optional field `nonGuaranteedAuctionTerms`
      if (jsonObj.get("nonGuaranteedAuctionTerms") != null && !jsonObj.get("nonGuaranteedAuctionTerms").isJsonNull()) {
        DealTermsNonGuaranteedAuctionTerms.validateJsonElement(jsonObj.get("nonGuaranteedAuctionTerms"));
      }
      // validate the optional field `nonGuaranteedFixedPriceTerms`
      if (jsonObj.get("nonGuaranteedFixedPriceTerms") != null && !jsonObj.get("nonGuaranteedFixedPriceTerms").isJsonNull()) {
        DealTermsNonGuaranteedFixedPriceTerms.validateJsonElement(jsonObj.get("nonGuaranteedFixedPriceTerms"));
      }
      // validate the optional field `rubiconNonGuaranteedTerms`
      if (jsonObj.get("rubiconNonGuaranteedTerms") != null && !jsonObj.get("rubiconNonGuaranteedTerms").isJsonNull()) {
        DealTermsRubiconNonGuaranteedTerms.validateJsonElement(jsonObj.get("rubiconNonGuaranteedTerms"));
      }
      if ((jsonObj.get("sellerTimeZone") != null && !jsonObj.get("sellerTimeZone").isJsonNull()) && !jsonObj.get("sellerTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerTimeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealTerms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealTerms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealTerms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealTerms.class));

       return (TypeAdapter<T>) new TypeAdapter<DealTerms>() {
           @Override
           public void write(JsonWriter out, DealTerms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealTerms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealTerms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealTerms
   * @throws IOException if the JSON string is invalid with respect to DealTerms
   */
  public static DealTerms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealTerms.class);
  }

  /**
   * Convert an instance of DealTerms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

