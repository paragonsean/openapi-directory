/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This message carries publisher provided forecasting information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublisherProvidedForecast {
  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEEKLY_IMPRESSIONS = "weeklyImpressions";
  @SerializedName(SERIALIZED_NAME_WEEKLY_IMPRESSIONS)
  private String weeklyImpressions;

  public static final String SERIALIZED_NAME_WEEKLY_UNIQUES = "weeklyUniques";
  @SerializedName(SERIALIZED_NAME_WEEKLY_UNIQUES)
  private String weeklyUniques;

  public PublisherProvidedForecast() {
  }

  public PublisherProvidedForecast dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public PublisherProvidedForecast addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * Publisher provided dimensions. E.g. geo, sizes etc...
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public PublisherProvidedForecast weeklyImpressions(String weeklyImpressions) {
    this.weeklyImpressions = weeklyImpressions;
    return this;
  }

  /**
   * Publisher provided weekly impressions.
   * @return weeklyImpressions
   */
  @javax.annotation.Nullable
  public String getWeeklyImpressions() {
    return weeklyImpressions;
  }

  public void setWeeklyImpressions(String weeklyImpressions) {
    this.weeklyImpressions = weeklyImpressions;
  }


  public PublisherProvidedForecast weeklyUniques(String weeklyUniques) {
    this.weeklyUniques = weeklyUniques;
    return this;
  }

  /**
   * Publisher provided weekly uniques.
   * @return weeklyUniques
   */
  @javax.annotation.Nullable
  public String getWeeklyUniques() {
    return weeklyUniques;
  }

  public void setWeeklyUniques(String weeklyUniques) {
    this.weeklyUniques = weeklyUniques;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublisherProvidedForecast publisherProvidedForecast = (PublisherProvidedForecast) o;
    return Objects.equals(this.dimensions, publisherProvidedForecast.dimensions) &&
        Objects.equals(this.weeklyImpressions, publisherProvidedForecast.weeklyImpressions) &&
        Objects.equals(this.weeklyUniques, publisherProvidedForecast.weeklyUniques);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, weeklyImpressions, weeklyUniques);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublisherProvidedForecast {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    weeklyImpressions: ").append(toIndentedString(weeklyImpressions)).append("\n");
    sb.append("    weeklyUniques: ").append(toIndentedString(weeklyUniques)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensions");
    openapiFields.add("weeklyImpressions");
    openapiFields.add("weeklyUniques");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublisherProvidedForecast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublisherProvidedForecast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublisherProvidedForecast is not found in the empty JSON string", PublisherProvidedForecast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublisherProvidedForecast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublisherProvidedForecast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("weeklyImpressions") != null && !jsonObj.get("weeklyImpressions").isJsonNull()) && !jsonObj.get("weeklyImpressions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weeklyImpressions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weeklyImpressions").toString()));
      }
      if ((jsonObj.get("weeklyUniques") != null && !jsonObj.get("weeklyUniques").isJsonNull()) && !jsonObj.get("weeklyUniques").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weeklyUniques` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weeklyUniques").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublisherProvidedForecast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublisherProvidedForecast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublisherProvidedForecast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublisherProvidedForecast.class));

       return (TypeAdapter<T>) new TypeAdapter<PublisherProvidedForecast>() {
           @Override
           public void write(JsonWriter out, PublisherProvidedForecast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublisherProvidedForecast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublisherProvidedForecast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublisherProvidedForecast
   * @throws IOException if the JSON string is invalid with respect to PublisherProvidedForecast
   */
  public static PublisherProvidedForecast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublisherProvidedForecast.class);
  }

  /**
   * Convert an instance of PublisherProvidedForecast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

