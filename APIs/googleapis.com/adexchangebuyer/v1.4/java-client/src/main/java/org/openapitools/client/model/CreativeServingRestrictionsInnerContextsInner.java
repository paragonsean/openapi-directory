/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreativeServingRestrictionsInnerContextsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:44.175931-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeServingRestrictionsInnerContextsInner {
  public static final String SERIALIZED_NAME_AUCTION_TYPE = "auctionType";
  @SerializedName(SERIALIZED_NAME_AUCTION_TYPE)
  private List<String> auctionType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT_TYPE = "contextType";
  @SerializedName(SERIALIZED_NAME_CONTEXT_TYPE)
  private String contextType;

  public static final String SERIALIZED_NAME_GEO_CRITERIA_ID = "geoCriteriaId";
  @SerializedName(SERIALIZED_NAME_GEO_CRITERIA_ID)
  private List<Integer> geoCriteriaId = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private List<String> platform = new ArrayList<>();

  public CreativeServingRestrictionsInnerContextsInner() {
  }

  public CreativeServingRestrictionsInnerContextsInner auctionType(List<String> auctionType) {
    this.auctionType = auctionType;
    return this;
  }

  public CreativeServingRestrictionsInnerContextsInner addAuctionTypeItem(String auctionTypeItem) {
    if (this.auctionType == null) {
      this.auctionType = new ArrayList<>();
    }
    this.auctionType.add(auctionTypeItem);
    return this;
  }

  /**
   * Only set when contextType&#x3D;AUCTION_TYPE. Represents the auction types this restriction applies to.
   * @return auctionType
   */
  @javax.annotation.Nullable
  public List<String> getAuctionType() {
    return auctionType;
  }

  public void setAuctionType(List<String> auctionType) {
    this.auctionType = auctionType;
  }


  public CreativeServingRestrictionsInnerContextsInner contextType(String contextType) {
    this.contextType = contextType;
    return this;
  }

  /**
   * The type of context (e.g., location, platform, auction type, SSL-ness).
   * @return contextType
   */
  @javax.annotation.Nullable
  public String getContextType() {
    return contextType;
  }

  public void setContextType(String contextType) {
    this.contextType = contextType;
  }


  public CreativeServingRestrictionsInnerContextsInner geoCriteriaId(List<Integer> geoCriteriaId) {
    this.geoCriteriaId = geoCriteriaId;
    return this;
  }

  public CreativeServingRestrictionsInnerContextsInner addGeoCriteriaIdItem(Integer geoCriteriaIdItem) {
    if (this.geoCriteriaId == null) {
      this.geoCriteriaId = new ArrayList<>();
    }
    this.geoCriteriaId.add(geoCriteriaIdItem);
    return this;
  }

  /**
   * Only set when contextType&#x3D;LOCATION. Represents the geo criterias this restriction applies to. Impressions are considered to match a context if either the user location or publisher location matches a given geoCriteriaId.
   * @return geoCriteriaId
   */
  @javax.annotation.Nullable
  public List<Integer> getGeoCriteriaId() {
    return geoCriteriaId;
  }

  public void setGeoCriteriaId(List<Integer> geoCriteriaId) {
    this.geoCriteriaId = geoCriteriaId;
  }


  public CreativeServingRestrictionsInnerContextsInner platform(List<String> platform) {
    this.platform = platform;
    return this;
  }

  public CreativeServingRestrictionsInnerContextsInner addPlatformItem(String platformItem) {
    if (this.platform == null) {
      this.platform = new ArrayList<>();
    }
    this.platform.add(platformItem);
    return this;
  }

  /**
   * Only set when contextType&#x3D;PLATFORM. Represents the platforms this restriction applies to.
   * @return platform
   */
  @javax.annotation.Nullable
  public List<String> getPlatform() {
    return platform;
  }

  public void setPlatform(List<String> platform) {
    this.platform = platform;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeServingRestrictionsInnerContextsInner creativeServingRestrictionsInnerContextsInner = (CreativeServingRestrictionsInnerContextsInner) o;
    return Objects.equals(this.auctionType, creativeServingRestrictionsInnerContextsInner.auctionType) &&
        Objects.equals(this.contextType, creativeServingRestrictionsInnerContextsInner.contextType) &&
        Objects.equals(this.geoCriteriaId, creativeServingRestrictionsInnerContextsInner.geoCriteriaId) &&
        Objects.equals(this.platform, creativeServingRestrictionsInnerContextsInner.platform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auctionType, contextType, geoCriteriaId, platform);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeServingRestrictionsInnerContextsInner {\n");
    sb.append("    auctionType: ").append(toIndentedString(auctionType)).append("\n");
    sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
    sb.append("    geoCriteriaId: ").append(toIndentedString(geoCriteriaId)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auctionType");
    openapiFields.add("contextType");
    openapiFields.add("geoCriteriaId");
    openapiFields.add("platform");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeServingRestrictionsInnerContextsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeServingRestrictionsInnerContextsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeServingRestrictionsInnerContextsInner is not found in the empty JSON string", CreativeServingRestrictionsInnerContextsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeServingRestrictionsInnerContextsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeServingRestrictionsInnerContextsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("auctionType") != null && !jsonObj.get("auctionType").isJsonNull() && !jsonObj.get("auctionType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auctionType` to be an array in the JSON string but got `%s`", jsonObj.get("auctionType").toString()));
      }
      if ((jsonObj.get("contextType") != null && !jsonObj.get("contextType").isJsonNull()) && !jsonObj.get("contextType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("geoCriteriaId") != null && !jsonObj.get("geoCriteriaId").isJsonNull() && !jsonObj.get("geoCriteriaId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoCriteriaId` to be an array in the JSON string but got `%s`", jsonObj.get("geoCriteriaId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull() && !jsonObj.get("platform").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be an array in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeServingRestrictionsInnerContextsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeServingRestrictionsInnerContextsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeServingRestrictionsInnerContextsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeServingRestrictionsInnerContextsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeServingRestrictionsInnerContextsInner>() {
           @Override
           public void write(JsonWriter out, CreativeServingRestrictionsInnerContextsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeServingRestrictionsInnerContextsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeServingRestrictionsInnerContextsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeServingRestrictionsInnerContextsInner
   * @throws IOException if the JSON string is invalid with respect to CreativeServingRestrictionsInnerContextsInner
   */
  public static CreativeServingRestrictionsInnerContextsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeServingRestrictionsInnerContextsInner.class);
  }

  /**
   * Convert an instance of CreativeServingRestrictionsInnerContextsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

