/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddOrderDealsRequest;
import org.openapitools.client.model.AddOrderDealsResponse;
import org.openapitools.client.model.DeleteOrderDealsRequest;
import org.openapitools.client.model.DeleteOrderDealsResponse;
import org.openapitools.client.model.EditAllOrderDealsRequest;
import org.openapitools.client.model.EditAllOrderDealsResponse;
import org.openapitools.client.model.GetOrderDealsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MarketplacedealsApi
 */
@Disabled
public class MarketplacedealsApiTest {

    private final MarketplacedealsApi api = new MarketplacedealsApi();

    /**
     * Delete the specified deals from the proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerMarketplacedealsDeleteTest() throws ApiException {
        String proposalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        DeleteOrderDealsRequest deleteOrderDealsRequest = null;
        DeleteOrderDealsResponse response = api.adexchangebuyerMarketplacedealsDelete(proposalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, deleteOrderDealsRequest);
        // TODO: test validations
    }

    /**
     * Add new deals for the specified proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerMarketplacedealsInsertTest() throws ApiException {
        String proposalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AddOrderDealsRequest addOrderDealsRequest = null;
        AddOrderDealsResponse response = api.adexchangebuyerMarketplacedealsInsert(proposalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, addOrderDealsRequest);
        // TODO: test validations
    }

    /**
     * List all the deals for a given proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerMarketplacedealsListTest() throws ApiException {
        String proposalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String pqlQuery = null;
        GetOrderDealsResponse response = api.adexchangebuyerMarketplacedealsList(proposalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pqlQuery);
        // TODO: test validations
    }

    /**
     * Replaces all the deals in the proposal with the passed in deals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerMarketplacedealsUpdateTest() throws ApiException {
        String proposalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EditAllOrderDealsRequest editAllOrderDealsRequest = null;
        EditAllOrderDealsResponse response = api.adexchangebuyerMarketplacedealsUpdate(proposalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, editAllOrderDealsRequest);
        // TODO: test validations
    }

}
