/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetOffersResponse;
import org.openapitools.client.model.Product;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Gets the requested product by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProductsGetTest() throws ApiException {
        String productId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Product response = api.adexchangebuyerProductsGet(productId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Gets the requested product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProductsSearchTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String pqlQuery = null;
        GetOffersResponse response = api.adexchangebuyerProductsSearch(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pqlQuery);
        // TODO: test validations
    }

}
