/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrdersRequest;
import org.openapitools.client.model.CreateOrdersResponse;
import org.openapitools.client.model.GetOrdersResponse;
import org.openapitools.client.model.Proposal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProposalsApi
 */
@Disabled
public class ProposalsApiTest {

    private final ProposalsApi api = new ProposalsApi();

    /**
     * Get a proposal given its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProposalsGetTest() throws ApiException {
        String proposalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Proposal response = api.adexchangebuyerProposalsGet(proposalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create the given list of proposals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProposalsInsertTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        CreateOrdersRequest createOrdersRequest = null;
        CreateOrdersResponse response = api.adexchangebuyerProposalsInsert(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, createOrdersRequest);
        // TODO: test validations
    }

    /**
     * Update the given proposal. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProposalsPatchTest() throws ApiException {
        String proposalId = null;
        String revisionNumber = null;
        String updateAction = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Proposal proposal = null;
        Proposal response = api.adexchangebuyerProposalsPatch(proposalId, revisionNumber, updateAction, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, proposal);
        // TODO: test validations
    }

    /**
     * Search for proposals using pql query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProposalsSearchTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String pqlQuery = null;
        GetOrdersResponse response = api.adexchangebuyerProposalsSearch(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, pqlQuery);
        // TODO: test validations
    }

    /**
     * Update the given proposal to indicate that setup has been completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProposalsSetupcompleteTest() throws ApiException {
        String proposalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.adexchangebuyerProposalsSetupcomplete(proposalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Update the given proposal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyerProposalsUpdateTest() throws ApiException {
        String proposalId = null;
        String revisionNumber = null;
        String updateAction = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Proposal proposal = null;
        Proposal response = api.adexchangebuyerProposalsUpdate(proposalId, revisionNumber, updateAction, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, proposal);
        // TODO: test validations
    }

}
