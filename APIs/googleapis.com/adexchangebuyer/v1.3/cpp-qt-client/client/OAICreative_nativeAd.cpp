/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative_nativeAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative_nativeAd::OAICreative_nativeAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative_nativeAd::OAICreative_nativeAd() {
    this->initializeModel();
}

OAICreative_nativeAd::~OAICreative_nativeAd() {}

void OAICreative_nativeAd::initializeModel() {

    m_advertiser_isSet = false;
    m_advertiser_isValid = false;

    m_app_icon_isSet = false;
    m_app_icon_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_call_to_action_isSet = false;
    m_call_to_action_isValid = false;

    m_click_tracking_url_isSet = false;
    m_click_tracking_url_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_impression_tracking_url_isSet = false;
    m_impression_tracking_url_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_star_rating_isSet = false;
    m_star_rating_isValid = false;
}

void OAICreative_nativeAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative_nativeAd::fromJsonObject(QJsonObject json) {

    m_advertiser_isValid = ::OpenAPI::fromJsonValue(m_advertiser, json[QString("advertiser")]);
    m_advertiser_isSet = !json[QString("advertiser")].isNull() && m_advertiser_isValid;

    m_app_icon_isValid = ::OpenAPI::fromJsonValue(m_app_icon, json[QString("appIcon")]);
    m_app_icon_isSet = !json[QString("appIcon")].isNull() && m_app_icon_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_call_to_action_isValid = ::OpenAPI::fromJsonValue(m_call_to_action, json[QString("callToAction")]);
    m_call_to_action_isSet = !json[QString("callToAction")].isNull() && m_call_to_action_isValid;

    m_click_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_click_tracking_url, json[QString("clickTrackingUrl")]);
    m_click_tracking_url_isSet = !json[QString("clickTrackingUrl")].isNull() && m_click_tracking_url_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_impression_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_impression_tracking_url, json[QString("impressionTrackingUrl")]);
    m_impression_tracking_url_isSet = !json[QString("impressionTrackingUrl")].isNull() && m_impression_tracking_url_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_star_rating_isValid = ::OpenAPI::fromJsonValue(m_star_rating, json[QString("starRating")]);
    m_star_rating_isSet = !json[QString("starRating")].isNull() && m_star_rating_isValid;
}

QString OAICreative_nativeAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative_nativeAd::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_isSet) {
        obj.insert(QString("advertiser"), ::OpenAPI::toJsonValue(m_advertiser));
    }
    if (m_app_icon.isSet()) {
        obj.insert(QString("appIcon"), ::OpenAPI::toJsonValue(m_app_icon));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_call_to_action_isSet) {
        obj.insert(QString("callToAction"), ::OpenAPI::toJsonValue(m_call_to_action));
    }
    if (m_click_tracking_url_isSet) {
        obj.insert(QString("clickTrackingUrl"), ::OpenAPI::toJsonValue(m_click_tracking_url));
    }
    if (m_headline_isSet) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_impression_tracking_url.size() > 0) {
        obj.insert(QString("impressionTrackingUrl"), ::OpenAPI::toJsonValue(m_impression_tracking_url));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_star_rating_isSet) {
        obj.insert(QString("starRating"), ::OpenAPI::toJsonValue(m_star_rating));
    }
    return obj;
}

QString OAICreative_nativeAd::getAdvertiser() const {
    return m_advertiser;
}
void OAICreative_nativeAd::setAdvertiser(const QString &advertiser) {
    m_advertiser = advertiser;
    m_advertiser_isSet = true;
}

bool OAICreative_nativeAd::is_advertiser_Set() const{
    return m_advertiser_isSet;
}

bool OAICreative_nativeAd::is_advertiser_Valid() const{
    return m_advertiser_isValid;
}

OAICreative_nativeAd_appIcon OAICreative_nativeAd::getAppIcon() const {
    return m_app_icon;
}
void OAICreative_nativeAd::setAppIcon(const OAICreative_nativeAd_appIcon &app_icon) {
    m_app_icon = app_icon;
    m_app_icon_isSet = true;
}

bool OAICreative_nativeAd::is_app_icon_Set() const{
    return m_app_icon_isSet;
}

bool OAICreative_nativeAd::is_app_icon_Valid() const{
    return m_app_icon_isValid;
}

QString OAICreative_nativeAd::getBody() const {
    return m_body;
}
void OAICreative_nativeAd::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICreative_nativeAd::is_body_Set() const{
    return m_body_isSet;
}

bool OAICreative_nativeAd::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICreative_nativeAd::getCallToAction() const {
    return m_call_to_action;
}
void OAICreative_nativeAd::setCallToAction(const QString &call_to_action) {
    m_call_to_action = call_to_action;
    m_call_to_action_isSet = true;
}

bool OAICreative_nativeAd::is_call_to_action_Set() const{
    return m_call_to_action_isSet;
}

bool OAICreative_nativeAd::is_call_to_action_Valid() const{
    return m_call_to_action_isValid;
}

QString OAICreative_nativeAd::getClickTrackingUrl() const {
    return m_click_tracking_url;
}
void OAICreative_nativeAd::setClickTrackingUrl(const QString &click_tracking_url) {
    m_click_tracking_url = click_tracking_url;
    m_click_tracking_url_isSet = true;
}

bool OAICreative_nativeAd::is_click_tracking_url_Set() const{
    return m_click_tracking_url_isSet;
}

bool OAICreative_nativeAd::is_click_tracking_url_Valid() const{
    return m_click_tracking_url_isValid;
}

QString OAICreative_nativeAd::getHeadline() const {
    return m_headline;
}
void OAICreative_nativeAd::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAICreative_nativeAd::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAICreative_nativeAd::is_headline_Valid() const{
    return m_headline_isValid;
}

OAICreative_nativeAd_image OAICreative_nativeAd::getImage() const {
    return m_image;
}
void OAICreative_nativeAd::setImage(const OAICreative_nativeAd_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAICreative_nativeAd::is_image_Set() const{
    return m_image_isSet;
}

bool OAICreative_nativeAd::is_image_Valid() const{
    return m_image_isValid;
}

QList<QString> OAICreative_nativeAd::getImpressionTrackingUrl() const {
    return m_impression_tracking_url;
}
void OAICreative_nativeAd::setImpressionTrackingUrl(const QList<QString> &impression_tracking_url) {
    m_impression_tracking_url = impression_tracking_url;
    m_impression_tracking_url_isSet = true;
}

bool OAICreative_nativeAd::is_impression_tracking_url_Set() const{
    return m_impression_tracking_url_isSet;
}

bool OAICreative_nativeAd::is_impression_tracking_url_Valid() const{
    return m_impression_tracking_url_isValid;
}

OAICreative_nativeAd_logo OAICreative_nativeAd::getLogo() const {
    return m_logo;
}
void OAICreative_nativeAd::setLogo(const OAICreative_nativeAd_logo &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAICreative_nativeAd::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAICreative_nativeAd::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAICreative_nativeAd::getPrice() const {
    return m_price;
}
void OAICreative_nativeAd::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICreative_nativeAd::is_price_Set() const{
    return m_price_isSet;
}

bool OAICreative_nativeAd::is_price_Valid() const{
    return m_price_isValid;
}

double OAICreative_nativeAd::getStarRating() const {
    return m_star_rating;
}
void OAICreative_nativeAd::setStarRating(const double &star_rating) {
    m_star_rating = star_rating;
    m_star_rating_isSet = true;
}

bool OAICreative_nativeAd::is_star_rating_Set() const{
    return m_star_rating_isSet;
}

bool OAICreative_nativeAd::is_star_rating_Valid() const{
    return m_star_rating_isValid;
}

bool OAICreative_nativeAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_to_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_tracking_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative_nativeAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
