/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPretargetingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPretargetingConfig::OAIPretargetingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPretargetingConfig::OAIPretargetingConfig() {
    this->initializeModel();
}

OAIPretargetingConfig::~OAIPretargetingConfig() {}

void OAIPretargetingConfig::initializeModel() {

    m_billing_id_isSet = false;
    m_billing_id_isValid = false;

    m_config_id_isSet = false;
    m_config_id_isValid = false;

    m_config_name_isSet = false;
    m_config_name_isValid = false;

    m_creative_type_isSet = false;
    m_creative_type_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_excluded_content_labels_isSet = false;
    m_excluded_content_labels_isValid = false;

    m_excluded_geo_criteria_ids_isSet = false;
    m_excluded_geo_criteria_ids_isValid = false;

    m_excluded_placements_isSet = false;
    m_excluded_placements_isValid = false;

    m_excluded_user_lists_isSet = false;
    m_excluded_user_lists_isValid = false;

    m_excluded_verticals_isSet = false;
    m_excluded_verticals_isValid = false;

    m_geo_criteria_ids_isSet = false;
    m_geo_criteria_ids_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_maximum_qps_isSet = false;
    m_maximum_qps_isValid = false;

    m_mobile_carriers_isSet = false;
    m_mobile_carriers_isValid = false;

    m_mobile_devices_isSet = false;
    m_mobile_devices_isValid = false;

    m_mobile_operating_system_versions_isSet = false;
    m_mobile_operating_system_versions_isValid = false;

    m_placements_isSet = false;
    m_placements_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_supported_creative_attributes_isSet = false;
    m_supported_creative_attributes_isValid = false;

    m_user_lists_isSet = false;
    m_user_lists_isValid = false;

    m_vendor_types_isSet = false;
    m_vendor_types_isValid = false;

    m_verticals_isSet = false;
    m_verticals_isValid = false;
}

void OAIPretargetingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPretargetingConfig::fromJsonObject(QJsonObject json) {

    m_billing_id_isValid = ::OpenAPI::fromJsonValue(m_billing_id, json[QString("billingId")]);
    m_billing_id_isSet = !json[QString("billingId")].isNull() && m_billing_id_isValid;

    m_config_id_isValid = ::OpenAPI::fromJsonValue(m_config_id, json[QString("configId")]);
    m_config_id_isSet = !json[QString("configId")].isNull() && m_config_id_isValid;

    m_config_name_isValid = ::OpenAPI::fromJsonValue(m_config_name, json[QString("configName")]);
    m_config_name_isSet = !json[QString("configName")].isNull() && m_config_name_isValid;

    m_creative_type_isValid = ::OpenAPI::fromJsonValue(m_creative_type, json[QString("creativeType")]);
    m_creative_type_isSet = !json[QString("creativeType")].isNull() && m_creative_type_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_excluded_content_labels_isValid = ::OpenAPI::fromJsonValue(m_excluded_content_labels, json[QString("excludedContentLabels")]);
    m_excluded_content_labels_isSet = !json[QString("excludedContentLabels")].isNull() && m_excluded_content_labels_isValid;

    m_excluded_geo_criteria_ids_isValid = ::OpenAPI::fromJsonValue(m_excluded_geo_criteria_ids, json[QString("excludedGeoCriteriaIds")]);
    m_excluded_geo_criteria_ids_isSet = !json[QString("excludedGeoCriteriaIds")].isNull() && m_excluded_geo_criteria_ids_isValid;

    m_excluded_placements_isValid = ::OpenAPI::fromJsonValue(m_excluded_placements, json[QString("excludedPlacements")]);
    m_excluded_placements_isSet = !json[QString("excludedPlacements")].isNull() && m_excluded_placements_isValid;

    m_excluded_user_lists_isValid = ::OpenAPI::fromJsonValue(m_excluded_user_lists, json[QString("excludedUserLists")]);
    m_excluded_user_lists_isSet = !json[QString("excludedUserLists")].isNull() && m_excluded_user_lists_isValid;

    m_excluded_verticals_isValid = ::OpenAPI::fromJsonValue(m_excluded_verticals, json[QString("excludedVerticals")]);
    m_excluded_verticals_isSet = !json[QString("excludedVerticals")].isNull() && m_excluded_verticals_isValid;

    m_geo_criteria_ids_isValid = ::OpenAPI::fromJsonValue(m_geo_criteria_ids, json[QString("geoCriteriaIds")]);
    m_geo_criteria_ids_isSet = !json[QString("geoCriteriaIds")].isNull() && m_geo_criteria_ids_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_maximum_qps_isValid = ::OpenAPI::fromJsonValue(m_maximum_qps, json[QString("maximumQps")]);
    m_maximum_qps_isSet = !json[QString("maximumQps")].isNull() && m_maximum_qps_isValid;

    m_mobile_carriers_isValid = ::OpenAPI::fromJsonValue(m_mobile_carriers, json[QString("mobileCarriers")]);
    m_mobile_carriers_isSet = !json[QString("mobileCarriers")].isNull() && m_mobile_carriers_isValid;

    m_mobile_devices_isValid = ::OpenAPI::fromJsonValue(m_mobile_devices, json[QString("mobileDevices")]);
    m_mobile_devices_isSet = !json[QString("mobileDevices")].isNull() && m_mobile_devices_isValid;

    m_mobile_operating_system_versions_isValid = ::OpenAPI::fromJsonValue(m_mobile_operating_system_versions, json[QString("mobileOperatingSystemVersions")]);
    m_mobile_operating_system_versions_isSet = !json[QString("mobileOperatingSystemVersions")].isNull() && m_mobile_operating_system_versions_isValid;

    m_placements_isValid = ::OpenAPI::fromJsonValue(m_placements, json[QString("placements")]);
    m_placements_isSet = !json[QString("placements")].isNull() && m_placements_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_supported_creative_attributes_isValid = ::OpenAPI::fromJsonValue(m_supported_creative_attributes, json[QString("supportedCreativeAttributes")]);
    m_supported_creative_attributes_isSet = !json[QString("supportedCreativeAttributes")].isNull() && m_supported_creative_attributes_isValid;

    m_user_lists_isValid = ::OpenAPI::fromJsonValue(m_user_lists, json[QString("userLists")]);
    m_user_lists_isSet = !json[QString("userLists")].isNull() && m_user_lists_isValid;

    m_vendor_types_isValid = ::OpenAPI::fromJsonValue(m_vendor_types, json[QString("vendorTypes")]);
    m_vendor_types_isSet = !json[QString("vendorTypes")].isNull() && m_vendor_types_isValid;

    m_verticals_isValid = ::OpenAPI::fromJsonValue(m_verticals, json[QString("verticals")]);
    m_verticals_isSet = !json[QString("verticals")].isNull() && m_verticals_isValid;
}

QString OAIPretargetingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPretargetingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_id_isSet) {
        obj.insert(QString("billingId"), ::OpenAPI::toJsonValue(m_billing_id));
    }
    if (m_config_id_isSet) {
        obj.insert(QString("configId"), ::OpenAPI::toJsonValue(m_config_id));
    }
    if (m_config_name_isSet) {
        obj.insert(QString("configName"), ::OpenAPI::toJsonValue(m_config_name));
    }
    if (m_creative_type.size() > 0) {
        obj.insert(QString("creativeType"), ::OpenAPI::toJsonValue(m_creative_type));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_excluded_content_labels.size() > 0) {
        obj.insert(QString("excludedContentLabels"), ::OpenAPI::toJsonValue(m_excluded_content_labels));
    }
    if (m_excluded_geo_criteria_ids.size() > 0) {
        obj.insert(QString("excludedGeoCriteriaIds"), ::OpenAPI::toJsonValue(m_excluded_geo_criteria_ids));
    }
    if (m_excluded_placements.size() > 0) {
        obj.insert(QString("excludedPlacements"), ::OpenAPI::toJsonValue(m_excluded_placements));
    }
    if (m_excluded_user_lists.size() > 0) {
        obj.insert(QString("excludedUserLists"), ::OpenAPI::toJsonValue(m_excluded_user_lists));
    }
    if (m_excluded_verticals.size() > 0) {
        obj.insert(QString("excludedVerticals"), ::OpenAPI::toJsonValue(m_excluded_verticals));
    }
    if (m_geo_criteria_ids.size() > 0) {
        obj.insert(QString("geoCriteriaIds"), ::OpenAPI::toJsonValue(m_geo_criteria_ids));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_maximum_qps_isSet) {
        obj.insert(QString("maximumQps"), ::OpenAPI::toJsonValue(m_maximum_qps));
    }
    if (m_mobile_carriers.size() > 0) {
        obj.insert(QString("mobileCarriers"), ::OpenAPI::toJsonValue(m_mobile_carriers));
    }
    if (m_mobile_devices.size() > 0) {
        obj.insert(QString("mobileDevices"), ::OpenAPI::toJsonValue(m_mobile_devices));
    }
    if (m_mobile_operating_system_versions.size() > 0) {
        obj.insert(QString("mobileOperatingSystemVersions"), ::OpenAPI::toJsonValue(m_mobile_operating_system_versions));
    }
    if (m_placements.size() > 0) {
        obj.insert(QString("placements"), ::OpenAPI::toJsonValue(m_placements));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_supported_creative_attributes.size() > 0) {
        obj.insert(QString("supportedCreativeAttributes"), ::OpenAPI::toJsonValue(m_supported_creative_attributes));
    }
    if (m_user_lists.size() > 0) {
        obj.insert(QString("userLists"), ::OpenAPI::toJsonValue(m_user_lists));
    }
    if (m_vendor_types.size() > 0) {
        obj.insert(QString("vendorTypes"), ::OpenAPI::toJsonValue(m_vendor_types));
    }
    if (m_verticals.size() > 0) {
        obj.insert(QString("verticals"), ::OpenAPI::toJsonValue(m_verticals));
    }
    return obj;
}

QString OAIPretargetingConfig::getBillingId() const {
    return m_billing_id;
}
void OAIPretargetingConfig::setBillingId(const QString &billing_id) {
    m_billing_id = billing_id;
    m_billing_id_isSet = true;
}

bool OAIPretargetingConfig::is_billing_id_Set() const{
    return m_billing_id_isSet;
}

bool OAIPretargetingConfig::is_billing_id_Valid() const{
    return m_billing_id_isValid;
}

QString OAIPretargetingConfig::getConfigId() const {
    return m_config_id;
}
void OAIPretargetingConfig::setConfigId(const QString &config_id) {
    m_config_id = config_id;
    m_config_id_isSet = true;
}

bool OAIPretargetingConfig::is_config_id_Set() const{
    return m_config_id_isSet;
}

bool OAIPretargetingConfig::is_config_id_Valid() const{
    return m_config_id_isValid;
}

QString OAIPretargetingConfig::getConfigName() const {
    return m_config_name;
}
void OAIPretargetingConfig::setConfigName(const QString &config_name) {
    m_config_name = config_name;
    m_config_name_isSet = true;
}

bool OAIPretargetingConfig::is_config_name_Set() const{
    return m_config_name_isSet;
}

bool OAIPretargetingConfig::is_config_name_Valid() const{
    return m_config_name_isValid;
}

QList<QString> OAIPretargetingConfig::getCreativeType() const {
    return m_creative_type;
}
void OAIPretargetingConfig::setCreativeType(const QList<QString> &creative_type) {
    m_creative_type = creative_type;
    m_creative_type_isSet = true;
}

bool OAIPretargetingConfig::is_creative_type_Set() const{
    return m_creative_type_isSet;
}

bool OAIPretargetingConfig::is_creative_type_Valid() const{
    return m_creative_type_isValid;
}

QList<OAIPretargetingConfig_dimensions_inner> OAIPretargetingConfig::getDimensions() const {
    return m_dimensions;
}
void OAIPretargetingConfig::setDimensions(const QList<OAIPretargetingConfig_dimensions_inner> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPretargetingConfig::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPretargetingConfig::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList<QString> OAIPretargetingConfig::getExcludedContentLabels() const {
    return m_excluded_content_labels;
}
void OAIPretargetingConfig::setExcludedContentLabels(const QList<QString> &excluded_content_labels) {
    m_excluded_content_labels = excluded_content_labels;
    m_excluded_content_labels_isSet = true;
}

bool OAIPretargetingConfig::is_excluded_content_labels_Set() const{
    return m_excluded_content_labels_isSet;
}

bool OAIPretargetingConfig::is_excluded_content_labels_Valid() const{
    return m_excluded_content_labels_isValid;
}

QList<QString> OAIPretargetingConfig::getExcludedGeoCriteriaIds() const {
    return m_excluded_geo_criteria_ids;
}
void OAIPretargetingConfig::setExcludedGeoCriteriaIds(const QList<QString> &excluded_geo_criteria_ids) {
    m_excluded_geo_criteria_ids = excluded_geo_criteria_ids;
    m_excluded_geo_criteria_ids_isSet = true;
}

bool OAIPretargetingConfig::is_excluded_geo_criteria_ids_Set() const{
    return m_excluded_geo_criteria_ids_isSet;
}

bool OAIPretargetingConfig::is_excluded_geo_criteria_ids_Valid() const{
    return m_excluded_geo_criteria_ids_isValid;
}

QList<OAIPretargetingConfig_excludedPlacements_inner> OAIPretargetingConfig::getExcludedPlacements() const {
    return m_excluded_placements;
}
void OAIPretargetingConfig::setExcludedPlacements(const QList<OAIPretargetingConfig_excludedPlacements_inner> &excluded_placements) {
    m_excluded_placements = excluded_placements;
    m_excluded_placements_isSet = true;
}

bool OAIPretargetingConfig::is_excluded_placements_Set() const{
    return m_excluded_placements_isSet;
}

bool OAIPretargetingConfig::is_excluded_placements_Valid() const{
    return m_excluded_placements_isValid;
}

QList<QString> OAIPretargetingConfig::getExcludedUserLists() const {
    return m_excluded_user_lists;
}
void OAIPretargetingConfig::setExcludedUserLists(const QList<QString> &excluded_user_lists) {
    m_excluded_user_lists = excluded_user_lists;
    m_excluded_user_lists_isSet = true;
}

bool OAIPretargetingConfig::is_excluded_user_lists_Set() const{
    return m_excluded_user_lists_isSet;
}

bool OAIPretargetingConfig::is_excluded_user_lists_Valid() const{
    return m_excluded_user_lists_isValid;
}

QList<QString> OAIPretargetingConfig::getExcludedVerticals() const {
    return m_excluded_verticals;
}
void OAIPretargetingConfig::setExcludedVerticals(const QList<QString> &excluded_verticals) {
    m_excluded_verticals = excluded_verticals;
    m_excluded_verticals_isSet = true;
}

bool OAIPretargetingConfig::is_excluded_verticals_Set() const{
    return m_excluded_verticals_isSet;
}

bool OAIPretargetingConfig::is_excluded_verticals_Valid() const{
    return m_excluded_verticals_isValid;
}

QList<QString> OAIPretargetingConfig::getGeoCriteriaIds() const {
    return m_geo_criteria_ids;
}
void OAIPretargetingConfig::setGeoCriteriaIds(const QList<QString> &geo_criteria_ids) {
    m_geo_criteria_ids = geo_criteria_ids;
    m_geo_criteria_ids_isSet = true;
}

bool OAIPretargetingConfig::is_geo_criteria_ids_Set() const{
    return m_geo_criteria_ids_isSet;
}

bool OAIPretargetingConfig::is_geo_criteria_ids_Valid() const{
    return m_geo_criteria_ids_isValid;
}

bool OAIPretargetingConfig::isIsActive() const {
    return m_is_active;
}
void OAIPretargetingConfig::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPretargetingConfig::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPretargetingConfig::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIPretargetingConfig::getKind() const {
    return m_kind;
}
void OAIPretargetingConfig::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPretargetingConfig::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPretargetingConfig::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAIPretargetingConfig::getLanguages() const {
    return m_languages;
}
void OAIPretargetingConfig::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIPretargetingConfig::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIPretargetingConfig::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIPretargetingConfig::getMaximumQps() const {
    return m_maximum_qps;
}
void OAIPretargetingConfig::setMaximumQps(const QString &maximum_qps) {
    m_maximum_qps = maximum_qps;
    m_maximum_qps_isSet = true;
}

bool OAIPretargetingConfig::is_maximum_qps_Set() const{
    return m_maximum_qps_isSet;
}

bool OAIPretargetingConfig::is_maximum_qps_Valid() const{
    return m_maximum_qps_isValid;
}

QList<QString> OAIPretargetingConfig::getMobileCarriers() const {
    return m_mobile_carriers;
}
void OAIPretargetingConfig::setMobileCarriers(const QList<QString> &mobile_carriers) {
    m_mobile_carriers = mobile_carriers;
    m_mobile_carriers_isSet = true;
}

bool OAIPretargetingConfig::is_mobile_carriers_Set() const{
    return m_mobile_carriers_isSet;
}

bool OAIPretargetingConfig::is_mobile_carriers_Valid() const{
    return m_mobile_carriers_isValid;
}

QList<QString> OAIPretargetingConfig::getMobileDevices() const {
    return m_mobile_devices;
}
void OAIPretargetingConfig::setMobileDevices(const QList<QString> &mobile_devices) {
    m_mobile_devices = mobile_devices;
    m_mobile_devices_isSet = true;
}

bool OAIPretargetingConfig::is_mobile_devices_Set() const{
    return m_mobile_devices_isSet;
}

bool OAIPretargetingConfig::is_mobile_devices_Valid() const{
    return m_mobile_devices_isValid;
}

QList<QString> OAIPretargetingConfig::getMobileOperatingSystemVersions() const {
    return m_mobile_operating_system_versions;
}
void OAIPretargetingConfig::setMobileOperatingSystemVersions(const QList<QString> &mobile_operating_system_versions) {
    m_mobile_operating_system_versions = mobile_operating_system_versions;
    m_mobile_operating_system_versions_isSet = true;
}

bool OAIPretargetingConfig::is_mobile_operating_system_versions_Set() const{
    return m_mobile_operating_system_versions_isSet;
}

bool OAIPretargetingConfig::is_mobile_operating_system_versions_Valid() const{
    return m_mobile_operating_system_versions_isValid;
}

QList<OAIPretargetingConfig_excludedPlacements_inner> OAIPretargetingConfig::getPlacements() const {
    return m_placements;
}
void OAIPretargetingConfig::setPlacements(const QList<OAIPretargetingConfig_excludedPlacements_inner> &placements) {
    m_placements = placements;
    m_placements_isSet = true;
}

bool OAIPretargetingConfig::is_placements_Set() const{
    return m_placements_isSet;
}

bool OAIPretargetingConfig::is_placements_Valid() const{
    return m_placements_isValid;
}

QList<QString> OAIPretargetingConfig::getPlatforms() const {
    return m_platforms;
}
void OAIPretargetingConfig::setPlatforms(const QList<QString> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIPretargetingConfig::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIPretargetingConfig::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QList<QString> OAIPretargetingConfig::getSupportedCreativeAttributes() const {
    return m_supported_creative_attributes;
}
void OAIPretargetingConfig::setSupportedCreativeAttributes(const QList<QString> &supported_creative_attributes) {
    m_supported_creative_attributes = supported_creative_attributes;
    m_supported_creative_attributes_isSet = true;
}

bool OAIPretargetingConfig::is_supported_creative_attributes_Set() const{
    return m_supported_creative_attributes_isSet;
}

bool OAIPretargetingConfig::is_supported_creative_attributes_Valid() const{
    return m_supported_creative_attributes_isValid;
}

QList<QString> OAIPretargetingConfig::getUserLists() const {
    return m_user_lists;
}
void OAIPretargetingConfig::setUserLists(const QList<QString> &user_lists) {
    m_user_lists = user_lists;
    m_user_lists_isSet = true;
}

bool OAIPretargetingConfig::is_user_lists_Set() const{
    return m_user_lists_isSet;
}

bool OAIPretargetingConfig::is_user_lists_Valid() const{
    return m_user_lists_isValid;
}

QList<QString> OAIPretargetingConfig::getVendorTypes() const {
    return m_vendor_types;
}
void OAIPretargetingConfig::setVendorTypes(const QList<QString> &vendor_types) {
    m_vendor_types = vendor_types;
    m_vendor_types_isSet = true;
}

bool OAIPretargetingConfig::is_vendor_types_Set() const{
    return m_vendor_types_isSet;
}

bool OAIPretargetingConfig::is_vendor_types_Valid() const{
    return m_vendor_types_isValid;
}

QList<QString> OAIPretargetingConfig::getVerticals() const {
    return m_verticals;
}
void OAIPretargetingConfig::setVerticals(const QList<QString> &verticals) {
    m_verticals = verticals;
    m_verticals_isSet = true;
}

bool OAIPretargetingConfig::is_verticals_Set() const{
    return m_verticals_isSet;
}

bool OAIPretargetingConfig::is_verticals_Valid() const{
    return m_verticals_isValid;
}

bool OAIPretargetingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_content_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_geo_criteria_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_placements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_user_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_verticals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_criteria_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_carriers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_operating_system_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_placements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_creative_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verticals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPretargetingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
