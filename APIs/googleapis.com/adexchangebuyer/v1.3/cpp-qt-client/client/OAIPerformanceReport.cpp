/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceReport::OAIPerformanceReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceReport::OAIPerformanceReport() {
    this->initializeModel();
}

OAIPerformanceReport::~OAIPerformanceReport() {}

void OAIPerformanceReport::initializeModel() {

    m_bid_rate_isSet = false;
    m_bid_rate_isValid = false;

    m_bid_request_rate_isSet = false;
    m_bid_request_rate_isValid = false;

    m_callout_status_rate_isSet = false;
    m_callout_status_rate_isValid = false;

    m_cookie_matcher_status_rate_isSet = false;
    m_cookie_matcher_status_rate_isValid = false;

    m_creative_status_rate_isSet = false;
    m_creative_status_rate_isValid = false;

    m_filtered_bid_rate_isSet = false;
    m_filtered_bid_rate_isValid = false;

    m_hosted_match_status_rate_isSet = false;
    m_hosted_match_status_rate_isValid = false;

    m_inventory_match_rate_isSet = false;
    m_inventory_match_rate_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_latency50th_percentile_isSet = false;
    m_latency50th_percentile_isValid = false;

    m_latency85th_percentile_isSet = false;
    m_latency85th_percentile_isValid = false;

    m_latency95th_percentile_isSet = false;
    m_latency95th_percentile_isValid = false;

    m_no_quota_in_region_isSet = false;
    m_no_quota_in_region_isValid = false;

    m_out_of_quota_isSet = false;
    m_out_of_quota_isValid = false;

    m_pixel_match_requests_isSet = false;
    m_pixel_match_requests_isValid = false;

    m_pixel_match_responses_isSet = false;
    m_pixel_match_responses_isValid = false;

    m_quota_configured_limit_isSet = false;
    m_quota_configured_limit_isValid = false;

    m_quota_throttled_limit_isSet = false;
    m_quota_throttled_limit_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_successful_request_rate_isSet = false;
    m_successful_request_rate_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_unsuccessful_request_rate_isSet = false;
    m_unsuccessful_request_rate_isValid = false;
}

void OAIPerformanceReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceReport::fromJsonObject(QJsonObject json) {

    m_bid_rate_isValid = ::OpenAPI::fromJsonValue(m_bid_rate, json[QString("bidRate")]);
    m_bid_rate_isSet = !json[QString("bidRate")].isNull() && m_bid_rate_isValid;

    m_bid_request_rate_isValid = ::OpenAPI::fromJsonValue(m_bid_request_rate, json[QString("bidRequestRate")]);
    m_bid_request_rate_isSet = !json[QString("bidRequestRate")].isNull() && m_bid_request_rate_isValid;

    m_callout_status_rate_isValid = ::OpenAPI::fromJsonValue(m_callout_status_rate, json[QString("calloutStatusRate")]);
    m_callout_status_rate_isSet = !json[QString("calloutStatusRate")].isNull() && m_callout_status_rate_isValid;

    m_cookie_matcher_status_rate_isValid = ::OpenAPI::fromJsonValue(m_cookie_matcher_status_rate, json[QString("cookieMatcherStatusRate")]);
    m_cookie_matcher_status_rate_isSet = !json[QString("cookieMatcherStatusRate")].isNull() && m_cookie_matcher_status_rate_isValid;

    m_creative_status_rate_isValid = ::OpenAPI::fromJsonValue(m_creative_status_rate, json[QString("creativeStatusRate")]);
    m_creative_status_rate_isSet = !json[QString("creativeStatusRate")].isNull() && m_creative_status_rate_isValid;

    m_filtered_bid_rate_isValid = ::OpenAPI::fromJsonValue(m_filtered_bid_rate, json[QString("filteredBidRate")]);
    m_filtered_bid_rate_isSet = !json[QString("filteredBidRate")].isNull() && m_filtered_bid_rate_isValid;

    m_hosted_match_status_rate_isValid = ::OpenAPI::fromJsonValue(m_hosted_match_status_rate, json[QString("hostedMatchStatusRate")]);
    m_hosted_match_status_rate_isSet = !json[QString("hostedMatchStatusRate")].isNull() && m_hosted_match_status_rate_isValid;

    m_inventory_match_rate_isValid = ::OpenAPI::fromJsonValue(m_inventory_match_rate, json[QString("inventoryMatchRate")]);
    m_inventory_match_rate_isSet = !json[QString("inventoryMatchRate")].isNull() && m_inventory_match_rate_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_latency50th_percentile_isValid = ::OpenAPI::fromJsonValue(m_latency50th_percentile, json[QString("latency50thPercentile")]);
    m_latency50th_percentile_isSet = !json[QString("latency50thPercentile")].isNull() && m_latency50th_percentile_isValid;

    m_latency85th_percentile_isValid = ::OpenAPI::fromJsonValue(m_latency85th_percentile, json[QString("latency85thPercentile")]);
    m_latency85th_percentile_isSet = !json[QString("latency85thPercentile")].isNull() && m_latency85th_percentile_isValid;

    m_latency95th_percentile_isValid = ::OpenAPI::fromJsonValue(m_latency95th_percentile, json[QString("latency95thPercentile")]);
    m_latency95th_percentile_isSet = !json[QString("latency95thPercentile")].isNull() && m_latency95th_percentile_isValid;

    m_no_quota_in_region_isValid = ::OpenAPI::fromJsonValue(m_no_quota_in_region, json[QString("noQuotaInRegion")]);
    m_no_quota_in_region_isSet = !json[QString("noQuotaInRegion")].isNull() && m_no_quota_in_region_isValid;

    m_out_of_quota_isValid = ::OpenAPI::fromJsonValue(m_out_of_quota, json[QString("outOfQuota")]);
    m_out_of_quota_isSet = !json[QString("outOfQuota")].isNull() && m_out_of_quota_isValid;

    m_pixel_match_requests_isValid = ::OpenAPI::fromJsonValue(m_pixel_match_requests, json[QString("pixelMatchRequests")]);
    m_pixel_match_requests_isSet = !json[QString("pixelMatchRequests")].isNull() && m_pixel_match_requests_isValid;

    m_pixel_match_responses_isValid = ::OpenAPI::fromJsonValue(m_pixel_match_responses, json[QString("pixelMatchResponses")]);
    m_pixel_match_responses_isSet = !json[QString("pixelMatchResponses")].isNull() && m_pixel_match_responses_isValid;

    m_quota_configured_limit_isValid = ::OpenAPI::fromJsonValue(m_quota_configured_limit, json[QString("quotaConfiguredLimit")]);
    m_quota_configured_limit_isSet = !json[QString("quotaConfiguredLimit")].isNull() && m_quota_configured_limit_isValid;

    m_quota_throttled_limit_isValid = ::OpenAPI::fromJsonValue(m_quota_throttled_limit, json[QString("quotaThrottledLimit")]);
    m_quota_throttled_limit_isSet = !json[QString("quotaThrottledLimit")].isNull() && m_quota_throttled_limit_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_successful_request_rate_isValid = ::OpenAPI::fromJsonValue(m_successful_request_rate, json[QString("successfulRequestRate")]);
    m_successful_request_rate_isSet = !json[QString("successfulRequestRate")].isNull() && m_successful_request_rate_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_unsuccessful_request_rate_isValid = ::OpenAPI::fromJsonValue(m_unsuccessful_request_rate, json[QString("unsuccessfulRequestRate")]);
    m_unsuccessful_request_rate_isSet = !json[QString("unsuccessfulRequestRate")].isNull() && m_unsuccessful_request_rate_isValid;
}

QString OAIPerformanceReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceReport::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_rate_isSet) {
        obj.insert(QString("bidRate"), ::OpenAPI::toJsonValue(m_bid_rate));
    }
    if (m_bid_request_rate_isSet) {
        obj.insert(QString("bidRequestRate"), ::OpenAPI::toJsonValue(m_bid_request_rate));
    }
    if (m_callout_status_rate.size() > 0) {
        obj.insert(QString("calloutStatusRate"), ::OpenAPI::toJsonValue(m_callout_status_rate));
    }
    if (m_cookie_matcher_status_rate.size() > 0) {
        obj.insert(QString("cookieMatcherStatusRate"), ::OpenAPI::toJsonValue(m_cookie_matcher_status_rate));
    }
    if (m_creative_status_rate.size() > 0) {
        obj.insert(QString("creativeStatusRate"), ::OpenAPI::toJsonValue(m_creative_status_rate));
    }
    if (m_filtered_bid_rate_isSet) {
        obj.insert(QString("filteredBidRate"), ::OpenAPI::toJsonValue(m_filtered_bid_rate));
    }
    if (m_hosted_match_status_rate.size() > 0) {
        obj.insert(QString("hostedMatchStatusRate"), ::OpenAPI::toJsonValue(m_hosted_match_status_rate));
    }
    if (m_inventory_match_rate_isSet) {
        obj.insert(QString("inventoryMatchRate"), ::OpenAPI::toJsonValue(m_inventory_match_rate));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_latency50th_percentile_isSet) {
        obj.insert(QString("latency50thPercentile"), ::OpenAPI::toJsonValue(m_latency50th_percentile));
    }
    if (m_latency85th_percentile_isSet) {
        obj.insert(QString("latency85thPercentile"), ::OpenAPI::toJsonValue(m_latency85th_percentile));
    }
    if (m_latency95th_percentile_isSet) {
        obj.insert(QString("latency95thPercentile"), ::OpenAPI::toJsonValue(m_latency95th_percentile));
    }
    if (m_no_quota_in_region_isSet) {
        obj.insert(QString("noQuotaInRegion"), ::OpenAPI::toJsonValue(m_no_quota_in_region));
    }
    if (m_out_of_quota_isSet) {
        obj.insert(QString("outOfQuota"), ::OpenAPI::toJsonValue(m_out_of_quota));
    }
    if (m_pixel_match_requests_isSet) {
        obj.insert(QString("pixelMatchRequests"), ::OpenAPI::toJsonValue(m_pixel_match_requests));
    }
    if (m_pixel_match_responses_isSet) {
        obj.insert(QString("pixelMatchResponses"), ::OpenAPI::toJsonValue(m_pixel_match_responses));
    }
    if (m_quota_configured_limit_isSet) {
        obj.insert(QString("quotaConfiguredLimit"), ::OpenAPI::toJsonValue(m_quota_configured_limit));
    }
    if (m_quota_throttled_limit_isSet) {
        obj.insert(QString("quotaThrottledLimit"), ::OpenAPI::toJsonValue(m_quota_throttled_limit));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_successful_request_rate_isSet) {
        obj.insert(QString("successfulRequestRate"), ::OpenAPI::toJsonValue(m_successful_request_rate));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_unsuccessful_request_rate_isSet) {
        obj.insert(QString("unsuccessfulRequestRate"), ::OpenAPI::toJsonValue(m_unsuccessful_request_rate));
    }
    return obj;
}

double OAIPerformanceReport::getBidRate() const {
    return m_bid_rate;
}
void OAIPerformanceReport::setBidRate(const double &bid_rate) {
    m_bid_rate = bid_rate;
    m_bid_rate_isSet = true;
}

bool OAIPerformanceReport::is_bid_rate_Set() const{
    return m_bid_rate_isSet;
}

bool OAIPerformanceReport::is_bid_rate_Valid() const{
    return m_bid_rate_isValid;
}

double OAIPerformanceReport::getBidRequestRate() const {
    return m_bid_request_rate;
}
void OAIPerformanceReport::setBidRequestRate(const double &bid_request_rate) {
    m_bid_request_rate = bid_request_rate;
    m_bid_request_rate_isSet = true;
}

bool OAIPerformanceReport::is_bid_request_rate_Set() const{
    return m_bid_request_rate_isSet;
}

bool OAIPerformanceReport::is_bid_request_rate_Valid() const{
    return m_bid_request_rate_isValid;
}

QList<QJsonValue> OAIPerformanceReport::getCalloutStatusRate() const {
    return m_callout_status_rate;
}
void OAIPerformanceReport::setCalloutStatusRate(const QList<QJsonValue> &callout_status_rate) {
    m_callout_status_rate = callout_status_rate;
    m_callout_status_rate_isSet = true;
}

bool OAIPerformanceReport::is_callout_status_rate_Set() const{
    return m_callout_status_rate_isSet;
}

bool OAIPerformanceReport::is_callout_status_rate_Valid() const{
    return m_callout_status_rate_isValid;
}

QList<QJsonValue> OAIPerformanceReport::getCookieMatcherStatusRate() const {
    return m_cookie_matcher_status_rate;
}
void OAIPerformanceReport::setCookieMatcherStatusRate(const QList<QJsonValue> &cookie_matcher_status_rate) {
    m_cookie_matcher_status_rate = cookie_matcher_status_rate;
    m_cookie_matcher_status_rate_isSet = true;
}

bool OAIPerformanceReport::is_cookie_matcher_status_rate_Set() const{
    return m_cookie_matcher_status_rate_isSet;
}

bool OAIPerformanceReport::is_cookie_matcher_status_rate_Valid() const{
    return m_cookie_matcher_status_rate_isValid;
}

QList<QJsonValue> OAIPerformanceReport::getCreativeStatusRate() const {
    return m_creative_status_rate;
}
void OAIPerformanceReport::setCreativeStatusRate(const QList<QJsonValue> &creative_status_rate) {
    m_creative_status_rate = creative_status_rate;
    m_creative_status_rate_isSet = true;
}

bool OAIPerformanceReport::is_creative_status_rate_Set() const{
    return m_creative_status_rate_isSet;
}

bool OAIPerformanceReport::is_creative_status_rate_Valid() const{
    return m_creative_status_rate_isValid;
}

double OAIPerformanceReport::getFilteredBidRate() const {
    return m_filtered_bid_rate;
}
void OAIPerformanceReport::setFilteredBidRate(const double &filtered_bid_rate) {
    m_filtered_bid_rate = filtered_bid_rate;
    m_filtered_bid_rate_isSet = true;
}

bool OAIPerformanceReport::is_filtered_bid_rate_Set() const{
    return m_filtered_bid_rate_isSet;
}

bool OAIPerformanceReport::is_filtered_bid_rate_Valid() const{
    return m_filtered_bid_rate_isValid;
}

QList<QJsonValue> OAIPerformanceReport::getHostedMatchStatusRate() const {
    return m_hosted_match_status_rate;
}
void OAIPerformanceReport::setHostedMatchStatusRate(const QList<QJsonValue> &hosted_match_status_rate) {
    m_hosted_match_status_rate = hosted_match_status_rate;
    m_hosted_match_status_rate_isSet = true;
}

bool OAIPerformanceReport::is_hosted_match_status_rate_Set() const{
    return m_hosted_match_status_rate_isSet;
}

bool OAIPerformanceReport::is_hosted_match_status_rate_Valid() const{
    return m_hosted_match_status_rate_isValid;
}

double OAIPerformanceReport::getInventoryMatchRate() const {
    return m_inventory_match_rate;
}
void OAIPerformanceReport::setInventoryMatchRate(const double &inventory_match_rate) {
    m_inventory_match_rate = inventory_match_rate;
    m_inventory_match_rate_isSet = true;
}

bool OAIPerformanceReport::is_inventory_match_rate_Set() const{
    return m_inventory_match_rate_isSet;
}

bool OAIPerformanceReport::is_inventory_match_rate_Valid() const{
    return m_inventory_match_rate_isValid;
}

QString OAIPerformanceReport::getKind() const {
    return m_kind;
}
void OAIPerformanceReport::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPerformanceReport::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPerformanceReport::is_kind_Valid() const{
    return m_kind_isValid;
}

double OAIPerformanceReport::getLatency50thPercentile() const {
    return m_latency50th_percentile;
}
void OAIPerformanceReport::setLatency50thPercentile(const double &latency50th_percentile) {
    m_latency50th_percentile = latency50th_percentile;
    m_latency50th_percentile_isSet = true;
}

bool OAIPerformanceReport::is_latency50th_percentile_Set() const{
    return m_latency50th_percentile_isSet;
}

bool OAIPerformanceReport::is_latency50th_percentile_Valid() const{
    return m_latency50th_percentile_isValid;
}

double OAIPerformanceReport::getLatency85thPercentile() const {
    return m_latency85th_percentile;
}
void OAIPerformanceReport::setLatency85thPercentile(const double &latency85th_percentile) {
    m_latency85th_percentile = latency85th_percentile;
    m_latency85th_percentile_isSet = true;
}

bool OAIPerformanceReport::is_latency85th_percentile_Set() const{
    return m_latency85th_percentile_isSet;
}

bool OAIPerformanceReport::is_latency85th_percentile_Valid() const{
    return m_latency85th_percentile_isValid;
}

double OAIPerformanceReport::getLatency95thPercentile() const {
    return m_latency95th_percentile;
}
void OAIPerformanceReport::setLatency95thPercentile(const double &latency95th_percentile) {
    m_latency95th_percentile = latency95th_percentile;
    m_latency95th_percentile_isSet = true;
}

bool OAIPerformanceReport::is_latency95th_percentile_Set() const{
    return m_latency95th_percentile_isSet;
}

bool OAIPerformanceReport::is_latency95th_percentile_Valid() const{
    return m_latency95th_percentile_isValid;
}

double OAIPerformanceReport::getNoQuotaInRegion() const {
    return m_no_quota_in_region;
}
void OAIPerformanceReport::setNoQuotaInRegion(const double &no_quota_in_region) {
    m_no_quota_in_region = no_quota_in_region;
    m_no_quota_in_region_isSet = true;
}

bool OAIPerformanceReport::is_no_quota_in_region_Set() const{
    return m_no_quota_in_region_isSet;
}

bool OAIPerformanceReport::is_no_quota_in_region_Valid() const{
    return m_no_quota_in_region_isValid;
}

double OAIPerformanceReport::getOutOfQuota() const {
    return m_out_of_quota;
}
void OAIPerformanceReport::setOutOfQuota(const double &out_of_quota) {
    m_out_of_quota = out_of_quota;
    m_out_of_quota_isSet = true;
}

bool OAIPerformanceReport::is_out_of_quota_Set() const{
    return m_out_of_quota_isSet;
}

bool OAIPerformanceReport::is_out_of_quota_Valid() const{
    return m_out_of_quota_isValid;
}

double OAIPerformanceReport::getPixelMatchRequests() const {
    return m_pixel_match_requests;
}
void OAIPerformanceReport::setPixelMatchRequests(const double &pixel_match_requests) {
    m_pixel_match_requests = pixel_match_requests;
    m_pixel_match_requests_isSet = true;
}

bool OAIPerformanceReport::is_pixel_match_requests_Set() const{
    return m_pixel_match_requests_isSet;
}

bool OAIPerformanceReport::is_pixel_match_requests_Valid() const{
    return m_pixel_match_requests_isValid;
}

double OAIPerformanceReport::getPixelMatchResponses() const {
    return m_pixel_match_responses;
}
void OAIPerformanceReport::setPixelMatchResponses(const double &pixel_match_responses) {
    m_pixel_match_responses = pixel_match_responses;
    m_pixel_match_responses_isSet = true;
}

bool OAIPerformanceReport::is_pixel_match_responses_Set() const{
    return m_pixel_match_responses_isSet;
}

bool OAIPerformanceReport::is_pixel_match_responses_Valid() const{
    return m_pixel_match_responses_isValid;
}

double OAIPerformanceReport::getQuotaConfiguredLimit() const {
    return m_quota_configured_limit;
}
void OAIPerformanceReport::setQuotaConfiguredLimit(const double &quota_configured_limit) {
    m_quota_configured_limit = quota_configured_limit;
    m_quota_configured_limit_isSet = true;
}

bool OAIPerformanceReport::is_quota_configured_limit_Set() const{
    return m_quota_configured_limit_isSet;
}

bool OAIPerformanceReport::is_quota_configured_limit_Valid() const{
    return m_quota_configured_limit_isValid;
}

double OAIPerformanceReport::getQuotaThrottledLimit() const {
    return m_quota_throttled_limit;
}
void OAIPerformanceReport::setQuotaThrottledLimit(const double &quota_throttled_limit) {
    m_quota_throttled_limit = quota_throttled_limit;
    m_quota_throttled_limit_isSet = true;
}

bool OAIPerformanceReport::is_quota_throttled_limit_Set() const{
    return m_quota_throttled_limit_isSet;
}

bool OAIPerformanceReport::is_quota_throttled_limit_Valid() const{
    return m_quota_throttled_limit_isValid;
}

QString OAIPerformanceReport::getRegion() const {
    return m_region;
}
void OAIPerformanceReport::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPerformanceReport::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPerformanceReport::is_region_Valid() const{
    return m_region_isValid;
}

double OAIPerformanceReport::getSuccessfulRequestRate() const {
    return m_successful_request_rate;
}
void OAIPerformanceReport::setSuccessfulRequestRate(const double &successful_request_rate) {
    m_successful_request_rate = successful_request_rate;
    m_successful_request_rate_isSet = true;
}

bool OAIPerformanceReport::is_successful_request_rate_Set() const{
    return m_successful_request_rate_isSet;
}

bool OAIPerformanceReport::is_successful_request_rate_Valid() const{
    return m_successful_request_rate_isValid;
}

QString OAIPerformanceReport::getTimestamp() const {
    return m_timestamp;
}
void OAIPerformanceReport::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPerformanceReport::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPerformanceReport::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIPerformanceReport::getUnsuccessfulRequestRate() const {
    return m_unsuccessful_request_rate;
}
void OAIPerformanceReport::setUnsuccessfulRequestRate(const double &unsuccessful_request_rate) {
    m_unsuccessful_request_rate = unsuccessful_request_rate;
    m_unsuccessful_request_rate_isSet = true;
}

bool OAIPerformanceReport::is_unsuccessful_request_rate_Set() const{
    return m_unsuccessful_request_rate_isSet;
}

bool OAIPerformanceReport::is_unsuccessful_request_rate_Valid() const{
    return m_unsuccessful_request_rate_isValid;
}

bool OAIPerformanceReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_request_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callout_status_rate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_matcher_status_rate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_status_rate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtered_bid_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_match_status_rate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_match_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency50th_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency85th_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency95th_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_quota_in_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_match_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_match_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_configured_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_throttled_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_request_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsuccessful_request_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
