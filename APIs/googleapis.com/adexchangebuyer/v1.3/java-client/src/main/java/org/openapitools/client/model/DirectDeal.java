/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration data for an Ad Exchange direct deal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:40.731455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectDeal {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ADVERTISER = "advertiser";
  @SerializedName(SERIALIZED_NAME_ADVERTISER)
  private String advertiser;

  public static final String SERIALIZED_NAME_ALLOWS_ALCOHOL = "allowsAlcohol";
  @SerializedName(SERIALIZED_NAME_ALLOWS_ALCOHOL)
  private Boolean allowsAlcohol;

  public static final String SERIALIZED_NAME_BUYER_ACCOUNT_ID = "buyerAccountId";
  @SerializedName(SERIALIZED_NAME_BUYER_ACCOUNT_ID)
  private String buyerAccountId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DEAL_TIER = "dealTier";
  @SerializedName(SERIALIZED_NAME_DEAL_TIER)
  private String dealTier;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FIXED_CPM = "fixedCpm";
  @SerializedName(SERIALIZED_NAME_FIXED_CPM)
  private String fixedCpm;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adexchangebuyer#directDeal";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIVATE_EXCHANGE_MIN_CPM = "privateExchangeMinCpm";
  @SerializedName(SERIALIZED_NAME_PRIVATE_EXCHANGE_MIN_CPM)
  private String privateExchangeMinCpm;

  public static final String SERIALIZED_NAME_PUBLISHER_BLOCKS_OVERRIDEN = "publisherBlocksOverriden";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_BLOCKS_OVERRIDEN)
  private Boolean publisherBlocksOverriden;

  public static final String SERIALIZED_NAME_SELLER_NETWORK = "sellerNetwork";
  @SerializedName(SERIALIZED_NAME_SELLER_NETWORK)
  private String sellerNetwork;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public DirectDeal() {
  }

  public DirectDeal accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account id of the buyer this deal is for.
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public DirectDeal advertiser(String advertiser) {
    this.advertiser = advertiser;
    return this;
  }

  /**
   * The name of the advertiser this deal is for.
   * @return advertiser
   */
  @javax.annotation.Nullable
  public String getAdvertiser() {
    return advertiser;
  }

  public void setAdvertiser(String advertiser) {
    this.advertiser = advertiser;
  }


  public DirectDeal allowsAlcohol(Boolean allowsAlcohol) {
    this.allowsAlcohol = allowsAlcohol;
    return this;
  }

  /**
   * Whether the publisher for this deal is eligible for alcohol ads.
   * @return allowsAlcohol
   */
  @javax.annotation.Nullable
  public Boolean getAllowsAlcohol() {
    return allowsAlcohol;
  }

  public void setAllowsAlcohol(Boolean allowsAlcohol) {
    this.allowsAlcohol = allowsAlcohol;
  }


  public DirectDeal buyerAccountId(String buyerAccountId) {
    this.buyerAccountId = buyerAccountId;
    return this;
  }

  /**
   * The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.
   * @return buyerAccountId
   */
  @javax.annotation.Nullable
  public String getBuyerAccountId() {
    return buyerAccountId;
  }

  public void setBuyerAccountId(String buyerAccountId) {
    this.buyerAccountId = buyerAccountId;
  }


  public DirectDeal currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public DirectDeal dealTier(String dealTier) {
    this.dealTier = dealTier;
    return this;
  }

  /**
   * The deal type such as programmatic reservation or fixed price and so on.
   * @return dealTier
   */
  @javax.annotation.Nullable
  public String getDealTier() {
    return dealTier;
  }

  public void setDealTier(String dealTier) {
    this.dealTier = dealTier;
  }


  public DirectDeal endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public DirectDeal fixedCpm(String fixedCpm) {
    this.fixedCpm = fixedCpm;
    return this;
  }

  /**
   * The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).
   * @return fixedCpm
   */
  @javax.annotation.Nullable
  public String getFixedCpm() {
    return fixedCpm;
  }

  public void setFixedCpm(String fixedCpm) {
    this.fixedCpm = fixedCpm;
  }


  public DirectDeal id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Deal id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DirectDeal kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DirectDeal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Deal name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DirectDeal privateExchangeMinCpm(String privateExchangeMinCpm) {
    this.privateExchangeMinCpm = privateExchangeMinCpm;
    return this;
  }

  /**
   * The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).
   * @return privateExchangeMinCpm
   */
  @javax.annotation.Nullable
  public String getPrivateExchangeMinCpm() {
    return privateExchangeMinCpm;
  }

  public void setPrivateExchangeMinCpm(String privateExchangeMinCpm) {
    this.privateExchangeMinCpm = privateExchangeMinCpm;
  }


  public DirectDeal publisherBlocksOverriden(Boolean publisherBlocksOverriden) {
    this.publisherBlocksOverriden = publisherBlocksOverriden;
    return this;
  }

  /**
   * If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.
   * @return publisherBlocksOverriden
   */
  @javax.annotation.Nullable
  public Boolean getPublisherBlocksOverriden() {
    return publisherBlocksOverriden;
  }

  public void setPublisherBlocksOverriden(Boolean publisherBlocksOverriden) {
    this.publisherBlocksOverriden = publisherBlocksOverriden;
  }


  public DirectDeal sellerNetwork(String sellerNetwork) {
    this.sellerNetwork = sellerNetwork;
    return this;
  }

  /**
   * The name of the publisher offering this direct deal.
   * @return sellerNetwork
   */
  @javax.annotation.Nullable
  public String getSellerNetwork() {
    return sellerNetwork;
  }

  public void setSellerNetwork(String sellerNetwork) {
    this.sellerNetwork = sellerNetwork;
  }


  public DirectDeal startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDeal directDeal = (DirectDeal) o;
    return Objects.equals(this.accountId, directDeal.accountId) &&
        Objects.equals(this.advertiser, directDeal.advertiser) &&
        Objects.equals(this.allowsAlcohol, directDeal.allowsAlcohol) &&
        Objects.equals(this.buyerAccountId, directDeal.buyerAccountId) &&
        Objects.equals(this.currencyCode, directDeal.currencyCode) &&
        Objects.equals(this.dealTier, directDeal.dealTier) &&
        Objects.equals(this.endTime, directDeal.endTime) &&
        Objects.equals(this.fixedCpm, directDeal.fixedCpm) &&
        Objects.equals(this.id, directDeal.id) &&
        Objects.equals(this.kind, directDeal.kind) &&
        Objects.equals(this.name, directDeal.name) &&
        Objects.equals(this.privateExchangeMinCpm, directDeal.privateExchangeMinCpm) &&
        Objects.equals(this.publisherBlocksOverriden, directDeal.publisherBlocksOverriden) &&
        Objects.equals(this.sellerNetwork, directDeal.sellerNetwork) &&
        Objects.equals(this.startTime, directDeal.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiser, allowsAlcohol, buyerAccountId, currencyCode, dealTier, endTime, fixedCpm, id, kind, name, privateExchangeMinCpm, publisherBlocksOverriden, sellerNetwork, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDeal {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiser: ").append(toIndentedString(advertiser)).append("\n");
    sb.append("    allowsAlcohol: ").append(toIndentedString(allowsAlcohol)).append("\n");
    sb.append("    buyerAccountId: ").append(toIndentedString(buyerAccountId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    dealTier: ").append(toIndentedString(dealTier)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    fixedCpm: ").append(toIndentedString(fixedCpm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    privateExchangeMinCpm: ").append(toIndentedString(privateExchangeMinCpm)).append("\n");
    sb.append("    publisherBlocksOverriden: ").append(toIndentedString(publisherBlocksOverriden)).append("\n");
    sb.append("    sellerNetwork: ").append(toIndentedString(sellerNetwork)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiser");
    openapiFields.add("allowsAlcohol");
    openapiFields.add("buyerAccountId");
    openapiFields.add("currencyCode");
    openapiFields.add("dealTier");
    openapiFields.add("endTime");
    openapiFields.add("fixedCpm");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("privateExchangeMinCpm");
    openapiFields.add("publisherBlocksOverriden");
    openapiFields.add("sellerNetwork");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectDeal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectDeal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectDeal is not found in the empty JSON string", DirectDeal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectDeal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectDeal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiser") != null && !jsonObj.get("advertiser").isJsonNull()) && !jsonObj.get("advertiser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiser").toString()));
      }
      if ((jsonObj.get("buyerAccountId") != null && !jsonObj.get("buyerAccountId").isJsonNull()) && !jsonObj.get("buyerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerAccountId").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("dealTier") != null && !jsonObj.get("dealTier").isJsonNull()) && !jsonObj.get("dealTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealTier").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("fixedCpm") != null && !jsonObj.get("fixedCpm").isJsonNull()) && !jsonObj.get("fixedCpm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedCpm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedCpm").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("privateExchangeMinCpm") != null && !jsonObj.get("privateExchangeMinCpm").isJsonNull()) && !jsonObj.get("privateExchangeMinCpm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateExchangeMinCpm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateExchangeMinCpm").toString()));
      }
      if ((jsonObj.get("sellerNetwork") != null && !jsonObj.get("sellerNetwork").isJsonNull()) && !jsonObj.get("sellerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerNetwork").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectDeal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectDeal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectDeal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectDeal.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectDeal>() {
           @Override
           public void write(JsonWriter out, DirectDeal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectDeal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectDeal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectDeal
   * @throws IOException if the JSON string is invalid with respect to DirectDeal
   */
  public static DirectDeal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectDeal.class);
  }

  /**
   * Convert an instance of DirectDeal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

