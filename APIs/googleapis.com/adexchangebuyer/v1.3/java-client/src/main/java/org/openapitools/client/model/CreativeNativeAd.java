/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeNativeAdAppIcon;
import org.openapitools.client.model.CreativeNativeAdImage;
import org.openapitools.client.model.CreativeNativeAdLogo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If nativeAd is set, HTMLSnippet and videoURL should not be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:40.731455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeNativeAd {
  public static final String SERIALIZED_NAME_ADVERTISER = "advertiser";
  @SerializedName(SERIALIZED_NAME_ADVERTISER)
  private String advertiser;

  public static final String SERIALIZED_NAME_APP_ICON = "appIcon";
  @SerializedName(SERIALIZED_NAME_APP_ICON)
  private CreativeNativeAdAppIcon appIcon;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CALL_TO_ACTION = "callToAction";
  @SerializedName(SERIALIZED_NAME_CALL_TO_ACTION)
  private String callToAction;

  public static final String SERIALIZED_NAME_CLICK_TRACKING_URL = "clickTrackingUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_URL)
  private String clickTrackingUrl;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private CreativeNativeAdImage image;

  public static final String SERIALIZED_NAME_IMPRESSION_TRACKING_URL = "impressionTrackingUrl";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_TRACKING_URL)
  private List<String> impressionTrackingUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private CreativeNativeAdLogo logo;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_STAR_RATING = "starRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private Double starRating;

  public CreativeNativeAd() {
  }

  public CreativeNativeAd advertiser(String advertiser) {
    this.advertiser = advertiser;
    return this;
  }

  /**
   * Get advertiser
   * @return advertiser
   */
  @javax.annotation.Nullable
  public String getAdvertiser() {
    return advertiser;
  }

  public void setAdvertiser(String advertiser) {
    this.advertiser = advertiser;
  }


  public CreativeNativeAd appIcon(CreativeNativeAdAppIcon appIcon) {
    this.appIcon = appIcon;
    return this;
  }

  /**
   * Get appIcon
   * @return appIcon
   */
  @javax.annotation.Nullable
  public CreativeNativeAdAppIcon getAppIcon() {
    return appIcon;
  }

  public void setAppIcon(CreativeNativeAdAppIcon appIcon) {
    this.appIcon = appIcon;
  }


  public CreativeNativeAd body(String body) {
    this.body = body;
    return this;
  }

  /**
   * A long description of the ad.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public CreativeNativeAd callToAction(String callToAction) {
    this.callToAction = callToAction;
    return this;
  }

  /**
   * A label for the button that the user is supposed to click.
   * @return callToAction
   */
  @javax.annotation.Nullable
  public String getCallToAction() {
    return callToAction;
  }

  public void setCallToAction(String callToAction) {
    this.callToAction = callToAction;
  }


  public CreativeNativeAd clickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
    return this;
  }

  /**
   * The URL to use for click tracking.
   * @return clickTrackingUrl
   */
  @javax.annotation.Nullable
  public String getClickTrackingUrl() {
    return clickTrackingUrl;
  }

  public void setClickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
  }


  public CreativeNativeAd headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * A short title for the ad.
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public CreativeNativeAd image(CreativeNativeAdImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public CreativeNativeAdImage getImage() {
    return image;
  }

  public void setImage(CreativeNativeAdImage image) {
    this.image = image;
  }


  public CreativeNativeAd impressionTrackingUrl(List<String> impressionTrackingUrl) {
    this.impressionTrackingUrl = impressionTrackingUrl;
    return this;
  }

  public CreativeNativeAd addImpressionTrackingUrlItem(String impressionTrackingUrlItem) {
    if (this.impressionTrackingUrl == null) {
      this.impressionTrackingUrl = new ArrayList<>();
    }
    this.impressionTrackingUrl.add(impressionTrackingUrlItem);
    return this;
  }

  /**
   * The URLs are called when the impression is rendered.
   * @return impressionTrackingUrl
   */
  @javax.annotation.Nullable
  public List<String> getImpressionTrackingUrl() {
    return impressionTrackingUrl;
  }

  public void setImpressionTrackingUrl(List<String> impressionTrackingUrl) {
    this.impressionTrackingUrl = impressionTrackingUrl;
  }


  public CreativeNativeAd logo(CreativeNativeAdLogo logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public CreativeNativeAdLogo getLogo() {
    return logo;
  }

  public void setLogo(CreativeNativeAdLogo logo) {
    this.logo = logo;
  }


  public CreativeNativeAd price(String price) {
    this.price = price;
    return this;
  }

  /**
   * The price of the promoted app including the currency info.
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public CreativeNativeAd starRating(Double starRating) {
    this.starRating = starRating;
    return this;
  }

  /**
   * The app rating in the app store. Must be in the range [0-5].
   * @return starRating
   */
  @javax.annotation.Nullable
  public Double getStarRating() {
    return starRating;
  }

  public void setStarRating(Double starRating) {
    this.starRating = starRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeNativeAd creativeNativeAd = (CreativeNativeAd) o;
    return Objects.equals(this.advertiser, creativeNativeAd.advertiser) &&
        Objects.equals(this.appIcon, creativeNativeAd.appIcon) &&
        Objects.equals(this.body, creativeNativeAd.body) &&
        Objects.equals(this.callToAction, creativeNativeAd.callToAction) &&
        Objects.equals(this.clickTrackingUrl, creativeNativeAd.clickTrackingUrl) &&
        Objects.equals(this.headline, creativeNativeAd.headline) &&
        Objects.equals(this.image, creativeNativeAd.image) &&
        Objects.equals(this.impressionTrackingUrl, creativeNativeAd.impressionTrackingUrl) &&
        Objects.equals(this.logo, creativeNativeAd.logo) &&
        Objects.equals(this.price, creativeNativeAd.price) &&
        Objects.equals(this.starRating, creativeNativeAd.starRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiser, appIcon, body, callToAction, clickTrackingUrl, headline, image, impressionTrackingUrl, logo, price, starRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeNativeAd {\n");
    sb.append("    advertiser: ").append(toIndentedString(advertiser)).append("\n");
    sb.append("    appIcon: ").append(toIndentedString(appIcon)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    callToAction: ").append(toIndentedString(callToAction)).append("\n");
    sb.append("    clickTrackingUrl: ").append(toIndentedString(clickTrackingUrl)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    impressionTrackingUrl: ").append(toIndentedString(impressionTrackingUrl)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiser");
    openapiFields.add("appIcon");
    openapiFields.add("body");
    openapiFields.add("callToAction");
    openapiFields.add("clickTrackingUrl");
    openapiFields.add("headline");
    openapiFields.add("image");
    openapiFields.add("impressionTrackingUrl");
    openapiFields.add("logo");
    openapiFields.add("price");
    openapiFields.add("starRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeNativeAd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeNativeAd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeNativeAd is not found in the empty JSON string", CreativeNativeAd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeNativeAd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeNativeAd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiser") != null && !jsonObj.get("advertiser").isJsonNull()) && !jsonObj.get("advertiser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiser").toString()));
      }
      // validate the optional field `appIcon`
      if (jsonObj.get("appIcon") != null && !jsonObj.get("appIcon").isJsonNull()) {
        CreativeNativeAdAppIcon.validateJsonElement(jsonObj.get("appIcon"));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("callToAction") != null && !jsonObj.get("callToAction").isJsonNull()) && !jsonObj.get("callToAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callToAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callToAction").toString()));
      }
      if ((jsonObj.get("clickTrackingUrl") != null && !jsonObj.get("clickTrackingUrl").isJsonNull()) && !jsonObj.get("clickTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickTrackingUrl").toString()));
      }
      if ((jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) && !jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        CreativeNativeAdImage.validateJsonElement(jsonObj.get("image"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("impressionTrackingUrl") != null && !jsonObj.get("impressionTrackingUrl").isJsonNull() && !jsonObj.get("impressionTrackingUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionTrackingUrl` to be an array in the JSON string but got `%s`", jsonObj.get("impressionTrackingUrl").toString()));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        CreativeNativeAdLogo.validateJsonElement(jsonObj.get("logo"));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeNativeAd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeNativeAd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeNativeAd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeNativeAd.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeNativeAd>() {
           @Override
           public void write(JsonWriter out, CreativeNativeAd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeNativeAd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeNativeAd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeNativeAd
   * @throws IOException if the JSON string is invalid with respect to CreativeNativeAd
   */
  public static CreativeNativeAd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeNativeAd.class);
  }

  /**
   * Convert an instance of CreativeNativeAd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

