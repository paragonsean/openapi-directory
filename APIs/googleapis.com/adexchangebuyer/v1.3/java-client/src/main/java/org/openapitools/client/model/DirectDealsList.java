/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DirectDeal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A direct deals feed lists Direct Deals the Ad Exchange buyer account has access to. This includes direct deals set up for the buyer account as well as its merged stream seats.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:40.731455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectDealsList {
  public static final String SERIALIZED_NAME_DIRECT_DEALS = "directDeals";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEALS)
  private List<DirectDeal> directDeals = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adexchangebuyer#directDealsList";

  public DirectDealsList() {
  }

  public DirectDealsList directDeals(List<DirectDeal> directDeals) {
    this.directDeals = directDeals;
    return this;
  }

  public DirectDealsList addDirectDealsItem(DirectDeal directDealsItem) {
    if (this.directDeals == null) {
      this.directDeals = new ArrayList<>();
    }
    this.directDeals.add(directDealsItem);
    return this;
  }

  /**
   * A list of direct deals relevant for your account.
   * @return directDeals
   */
  @javax.annotation.Nullable
  public List<DirectDeal> getDirectDeals() {
    return directDeals;
  }

  public void setDirectDeals(List<DirectDeal> directDeals) {
    this.directDeals = directDeals;
  }


  public DirectDealsList kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDealsList directDealsList = (DirectDealsList) o;
    return Objects.equals(this.directDeals, directDealsList.directDeals) &&
        Objects.equals(this.kind, directDealsList.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directDeals, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDealsList {\n");
    sb.append("    directDeals: ").append(toIndentedString(directDeals)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directDeals");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectDealsList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectDealsList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectDealsList is not found in the empty JSON string", DirectDealsList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectDealsList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectDealsList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("directDeals") != null && !jsonObj.get("directDeals").isJsonNull()) {
        JsonArray jsonArraydirectDeals = jsonObj.getAsJsonArray("directDeals");
        if (jsonArraydirectDeals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("directDeals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `directDeals` to be an array in the JSON string but got `%s`", jsonObj.get("directDeals").toString()));
          }

          // validate the optional field `directDeals` (array)
          for (int i = 0; i < jsonArraydirectDeals.size(); i++) {
            DirectDeal.validateJsonElement(jsonArraydirectDeals.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectDealsList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectDealsList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectDealsList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectDealsList.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectDealsList>() {
           @Override
           public void write(JsonWriter out, DirectDealsList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectDealsList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectDealsList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectDealsList
   * @throws IOException if the JSON string is invalid with respect to DirectDealsList
   */
  public static DirectDealsList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectDealsList.class);
  }

  /**
   * Convert an instance of DirectDealsList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

