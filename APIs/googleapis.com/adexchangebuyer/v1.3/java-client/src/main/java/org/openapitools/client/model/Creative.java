/*
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeAdTechnologyProviders;
import org.openapitools.client.model.CreativeCorrectionsInner;
import org.openapitools.client.model.CreativeDisapprovalReasonsInner;
import org.openapitools.client.model.CreativeFilteringReasons;
import org.openapitools.client.model.CreativeNativeAd;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A creative and its classification data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:40.731455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Creative {
  public static final String SERIALIZED_NAME_HT_M_L_SNIPPET = "HTMLSnippet";
  @SerializedName(SERIALIZED_NAME_HT_M_L_SNIPPET)
  private String htMLSnippet;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_AD_TECHNOLOGY_PROVIDERS = "adTechnologyProviders";
  @SerializedName(SERIALIZED_NAME_AD_TECHNOLOGY_PROVIDERS)
  private CreativeAdTechnologyProviders adTechnologyProviders;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private List<String> advertiserId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERTISER_NAME = "advertiserName";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_NAME)
  private String advertiserName;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  private String agencyId;

  public static final String SERIALIZED_NAME_API_UPLOAD_TIMESTAMP = "apiUploadTimestamp";
  @SerializedName(SERIALIZED_NAME_API_UPLOAD_TIMESTAMP)
  private OffsetDateTime apiUploadTimestamp;

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private List<Integer> attribute = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYER_CREATIVE_ID = "buyerCreativeId";
  @SerializedName(SERIALIZED_NAME_BUYER_CREATIVE_ID)
  private String buyerCreativeId;

  public static final String SERIALIZED_NAME_CLICK_THROUGH_URL = "clickThroughUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_THROUGH_URL)
  private List<String> clickThroughUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORRECTIONS = "corrections";
  @SerializedName(SERIALIZED_NAME_CORRECTIONS)
  private List<CreativeCorrectionsInner> corrections = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISAPPROVAL_REASONS = "disapprovalReasons";
  @SerializedName(SERIALIZED_NAME_DISAPPROVAL_REASONS)
  private List<CreativeDisapprovalReasonsInner> disapprovalReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERING_REASONS = "filteringReasons";
  @SerializedName(SERIALIZED_NAME_FILTERING_REASONS)
  private CreativeFilteringReasons filteringReasons;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_IMPRESSION_TRACKING_URL = "impressionTrackingUrl";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_TRACKING_URL)
  private List<String> impressionTrackingUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adexchangebuyer#creative";

  public static final String SERIALIZED_NAME_NATIVE_AD = "nativeAd";
  @SerializedName(SERIALIZED_NAME_NATIVE_AD)
  private CreativeNativeAd nativeAd;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORIES = "productCategories";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORIES)
  private List<Integer> productCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICTED_CATEGORIES = "restrictedCategories";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_CATEGORIES)
  private List<Integer> restrictedCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVE_CATEGORIES = "sensitiveCategories";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_CATEGORIES)
  private List<Integer> sensitiveCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VENDOR_TYPE = "vendorType";
  @SerializedName(SERIALIZED_NAME_VENDOR_TYPE)
  private List<Integer> vendorType = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VIDEO_U_R_L = "videoURL";
  @SerializedName(SERIALIZED_NAME_VIDEO_U_R_L)
  private String videoURL;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public Creative() {
  }

  public Creative htMLSnippet(String htMLSnippet) {
    this.htMLSnippet = htMLSnippet;
    return this;
  }

  /**
   * The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
   * @return htMLSnippet
   */
  @javax.annotation.Nullable
  public String getHtMLSnippet() {
    return htMLSnippet;
  }

  public void setHtMLSnippet(String htMLSnippet) {
    this.htMLSnippet = htMLSnippet;
  }


  public Creative accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account id.
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public Creative adTechnologyProviders(CreativeAdTechnologyProviders adTechnologyProviders) {
    this.adTechnologyProviders = adTechnologyProviders;
    return this;
  }

  /**
   * Get adTechnologyProviders
   * @return adTechnologyProviders
   */
  @javax.annotation.Nullable
  public CreativeAdTechnologyProviders getAdTechnologyProviders() {
    return adTechnologyProviders;
  }

  public void setAdTechnologyProviders(CreativeAdTechnologyProviders adTechnologyProviders) {
    this.adTechnologyProviders = adTechnologyProviders;
  }


  public Creative advertiserId(List<String> advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  public Creative addAdvertiserIdItem(String advertiserIdItem) {
    if (this.advertiserId == null) {
      this.advertiserId = new ArrayList<>();
    }
    this.advertiserId.add(advertiserIdItem);
    return this;
  }

  /**
   * Detected advertiser id, if any. Read-only. This field should not be set in requests.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public List<String> getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(List<String> advertiserId) {
    this.advertiserId = advertiserId;
  }


  public Creative advertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
    return this;
  }

  /**
   * The name of the company being advertised in the creative.
   * @return advertiserName
   */
  @javax.annotation.Nullable
  public String getAdvertiserName() {
    return advertiserName;
  }

  public void setAdvertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
  }


  public Creative agencyId(String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * The agency id for this creative.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }


  public Creative apiUploadTimestamp(OffsetDateTime apiUploadTimestamp) {
    this.apiUploadTimestamp = apiUploadTimestamp;
    return this;
  }

  /**
   * The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
   * @return apiUploadTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApiUploadTimestamp() {
    return apiUploadTimestamp;
  }

  public void setApiUploadTimestamp(OffsetDateTime apiUploadTimestamp) {
    this.apiUploadTimestamp = apiUploadTimestamp;
  }


  public Creative attribute(List<Integer> attribute) {
    this.attribute = attribute;
    return this;
  }

  public Creative addAttributeItem(Integer attributeItem) {
    if (this.attribute == null) {
      this.attribute = new ArrayList<>();
    }
    this.attribute.add(attributeItem);
    return this;
  }

  /**
   * All attributes for the ads that may be shown from this snippet.
   * @return attribute
   */
  @javax.annotation.Nullable
  public List<Integer> getAttribute() {
    return attribute;
  }

  public void setAttribute(List<Integer> attribute) {
    this.attribute = attribute;
  }


  public Creative buyerCreativeId(String buyerCreativeId) {
    this.buyerCreativeId = buyerCreativeId;
    return this;
  }

  /**
   * A buyer-specific id identifying the creative in this ad.
   * @return buyerCreativeId
   */
  @javax.annotation.Nullable
  public String getBuyerCreativeId() {
    return buyerCreativeId;
  }

  public void setBuyerCreativeId(String buyerCreativeId) {
    this.buyerCreativeId = buyerCreativeId;
  }


  public Creative clickThroughUrl(List<String> clickThroughUrl) {
    this.clickThroughUrl = clickThroughUrl;
    return this;
  }

  public Creative addClickThroughUrlItem(String clickThroughUrlItem) {
    if (this.clickThroughUrl == null) {
      this.clickThroughUrl = new ArrayList<>();
    }
    this.clickThroughUrl.add(clickThroughUrlItem);
    return this;
  }

  /**
   * The set of destination urls for the snippet.
   * @return clickThroughUrl
   */
  @javax.annotation.Nullable
  public List<String> getClickThroughUrl() {
    return clickThroughUrl;
  }

  public void setClickThroughUrl(List<String> clickThroughUrl) {
    this.clickThroughUrl = clickThroughUrl;
  }


  public Creative corrections(List<CreativeCorrectionsInner> corrections) {
    this.corrections = corrections;
    return this;
  }

  public Creative addCorrectionsItem(CreativeCorrectionsInner correctionsItem) {
    if (this.corrections == null) {
      this.corrections = new ArrayList<>();
    }
    this.corrections.add(correctionsItem);
    return this;
  }

  /**
   * Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
   * @return corrections
   */
  @javax.annotation.Nullable
  public List<CreativeCorrectionsInner> getCorrections() {
    return corrections;
  }

  public void setCorrections(List<CreativeCorrectionsInner> corrections) {
    this.corrections = corrections;
  }


  public Creative disapprovalReasons(List<CreativeDisapprovalReasonsInner> disapprovalReasons) {
    this.disapprovalReasons = disapprovalReasons;
    return this;
  }

  public Creative addDisapprovalReasonsItem(CreativeDisapprovalReasonsInner disapprovalReasonsItem) {
    if (this.disapprovalReasons == null) {
      this.disapprovalReasons = new ArrayList<>();
    }
    this.disapprovalReasons.add(disapprovalReasonsItem);
    return this;
  }

  /**
   * The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
   * @return disapprovalReasons
   */
  @javax.annotation.Nullable
  public List<CreativeDisapprovalReasonsInner> getDisapprovalReasons() {
    return disapprovalReasons;
  }

  public void setDisapprovalReasons(List<CreativeDisapprovalReasonsInner> disapprovalReasons) {
    this.disapprovalReasons = disapprovalReasons;
  }


  public Creative filteringReasons(CreativeFilteringReasons filteringReasons) {
    this.filteringReasons = filteringReasons;
    return this;
  }

  /**
   * Get filteringReasons
   * @return filteringReasons
   */
  @javax.annotation.Nullable
  public CreativeFilteringReasons getFilteringReasons() {
    return filteringReasons;
  }

  public void setFilteringReasons(CreativeFilteringReasons filteringReasons) {
    this.filteringReasons = filteringReasons;
  }


  public Creative height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Ad height.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Creative impressionTrackingUrl(List<String> impressionTrackingUrl) {
    this.impressionTrackingUrl = impressionTrackingUrl;
    return this;
  }

  public Creative addImpressionTrackingUrlItem(String impressionTrackingUrlItem) {
    if (this.impressionTrackingUrl == null) {
      this.impressionTrackingUrl = new ArrayList<>();
    }
    this.impressionTrackingUrl.add(impressionTrackingUrlItem);
    return this;
  }

  /**
   * The set of urls to be called to record an impression.
   * @return impressionTrackingUrl
   */
  @javax.annotation.Nullable
  public List<String> getImpressionTrackingUrl() {
    return impressionTrackingUrl;
  }

  public void setImpressionTrackingUrl(List<String> impressionTrackingUrl) {
    this.impressionTrackingUrl = impressionTrackingUrl;
  }


  public Creative kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Creative nativeAd(CreativeNativeAd nativeAd) {
    this.nativeAd = nativeAd;
    return this;
  }

  /**
   * Get nativeAd
   * @return nativeAd
   */
  @javax.annotation.Nullable
  public CreativeNativeAd getNativeAd() {
    return nativeAd;
  }

  public void setNativeAd(CreativeNativeAd nativeAd) {
    this.nativeAd = nativeAd;
  }


  public Creative productCategories(List<Integer> productCategories) {
    this.productCategories = productCategories;
    return this;
  }

  public Creative addProductCategoriesItem(Integer productCategoriesItem) {
    if (this.productCategories == null) {
      this.productCategories = new ArrayList<>();
    }
    this.productCategories.add(productCategoriesItem);
    return this;
  }

  /**
   * Detected product categories, if any. Read-only. This field should not be set in requests.
   * @return productCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getProductCategories() {
    return productCategories;
  }

  public void setProductCategories(List<Integer> productCategories) {
    this.productCategories = productCategories;
  }


  public Creative restrictedCategories(List<Integer> restrictedCategories) {
    this.restrictedCategories = restrictedCategories;
    return this;
  }

  public Creative addRestrictedCategoriesItem(Integer restrictedCategoriesItem) {
    if (this.restrictedCategories == null) {
      this.restrictedCategories = new ArrayList<>();
    }
    this.restrictedCategories.add(restrictedCategoriesItem);
    return this;
  }

  /**
   * All restricted categories for the ads that may be shown from this snippet.
   * @return restrictedCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getRestrictedCategories() {
    return restrictedCategories;
  }

  public void setRestrictedCategories(List<Integer> restrictedCategories) {
    this.restrictedCategories = restrictedCategories;
  }


  public Creative sensitiveCategories(List<Integer> sensitiveCategories) {
    this.sensitiveCategories = sensitiveCategories;
    return this;
  }

  public Creative addSensitiveCategoriesItem(Integer sensitiveCategoriesItem) {
    if (this.sensitiveCategories == null) {
      this.sensitiveCategories = new ArrayList<>();
    }
    this.sensitiveCategories.add(sensitiveCategoriesItem);
    return this;
  }

  /**
   * Detected sensitive categories, if any. Read-only. This field should not be set in requests.
   * @return sensitiveCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getSensitiveCategories() {
    return sensitiveCategories;
  }

  public void setSensitiveCategories(List<Integer> sensitiveCategories) {
    this.sensitiveCategories = sensitiveCategories;
  }


  public Creative status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Creative serving status. Read-only. This field should not be set in requests.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Creative vendorType(List<Integer> vendorType) {
    this.vendorType = vendorType;
    return this;
  }

  public Creative addVendorTypeItem(Integer vendorTypeItem) {
    if (this.vendorType == null) {
      this.vendorType = new ArrayList<>();
    }
    this.vendorType.add(vendorTypeItem);
    return this;
  }

  /**
   * All vendor types for the ads that may be shown from this snippet.
   * @return vendorType
   */
  @javax.annotation.Nullable
  public List<Integer> getVendorType() {
    return vendorType;
  }

  public void setVendorType(List<Integer> vendorType) {
    this.vendorType = vendorType;
  }


  public Creative version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The version for this creative. Read-only. This field should not be set in requests.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public Creative videoURL(String videoURL) {
    this.videoURL = videoURL;
    return this;
  }

  /**
   * The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set.
   * @return videoURL
   */
  @javax.annotation.Nullable
  public String getVideoURL() {
    return videoURL;
  }

  public void setVideoURL(String videoURL) {
    this.videoURL = videoURL;
  }


  public Creative width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Ad width.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Creative creative = (Creative) o;
    return Objects.equals(this.htMLSnippet, creative.htMLSnippet) &&
        Objects.equals(this.accountId, creative.accountId) &&
        Objects.equals(this.adTechnologyProviders, creative.adTechnologyProviders) &&
        Objects.equals(this.advertiserId, creative.advertiserId) &&
        Objects.equals(this.advertiserName, creative.advertiserName) &&
        Objects.equals(this.agencyId, creative.agencyId) &&
        Objects.equals(this.apiUploadTimestamp, creative.apiUploadTimestamp) &&
        Objects.equals(this.attribute, creative.attribute) &&
        Objects.equals(this.buyerCreativeId, creative.buyerCreativeId) &&
        Objects.equals(this.clickThroughUrl, creative.clickThroughUrl) &&
        Objects.equals(this.corrections, creative.corrections) &&
        Objects.equals(this.disapprovalReasons, creative.disapprovalReasons) &&
        Objects.equals(this.filteringReasons, creative.filteringReasons) &&
        Objects.equals(this.height, creative.height) &&
        Objects.equals(this.impressionTrackingUrl, creative.impressionTrackingUrl) &&
        Objects.equals(this.kind, creative.kind) &&
        Objects.equals(this.nativeAd, creative.nativeAd) &&
        Objects.equals(this.productCategories, creative.productCategories) &&
        Objects.equals(this.restrictedCategories, creative.restrictedCategories) &&
        Objects.equals(this.sensitiveCategories, creative.sensitiveCategories) &&
        Objects.equals(this.status, creative.status) &&
        Objects.equals(this.vendorType, creative.vendorType) &&
        Objects.equals(this.version, creative.version) &&
        Objects.equals(this.videoURL, creative.videoURL) &&
        Objects.equals(this.width, creative.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(htMLSnippet, accountId, adTechnologyProviders, advertiserId, advertiserName, agencyId, apiUploadTimestamp, attribute, buyerCreativeId, clickThroughUrl, corrections, disapprovalReasons, filteringReasons, height, impressionTrackingUrl, kind, nativeAd, productCategories, restrictedCategories, sensitiveCategories, status, vendorType, version, videoURL, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Creative {\n");
    sb.append("    htMLSnippet: ").append(toIndentedString(htMLSnippet)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adTechnologyProviders: ").append(toIndentedString(adTechnologyProviders)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    advertiserName: ").append(toIndentedString(advertiserName)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    apiUploadTimestamp: ").append(toIndentedString(apiUploadTimestamp)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    buyerCreativeId: ").append(toIndentedString(buyerCreativeId)).append("\n");
    sb.append("    clickThroughUrl: ").append(toIndentedString(clickThroughUrl)).append("\n");
    sb.append("    corrections: ").append(toIndentedString(corrections)).append("\n");
    sb.append("    disapprovalReasons: ").append(toIndentedString(disapprovalReasons)).append("\n");
    sb.append("    filteringReasons: ").append(toIndentedString(filteringReasons)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    impressionTrackingUrl: ").append(toIndentedString(impressionTrackingUrl)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    nativeAd: ").append(toIndentedString(nativeAd)).append("\n");
    sb.append("    productCategories: ").append(toIndentedString(productCategories)).append("\n");
    sb.append("    restrictedCategories: ").append(toIndentedString(restrictedCategories)).append("\n");
    sb.append("    sensitiveCategories: ").append(toIndentedString(sensitiveCategories)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vendorType: ").append(toIndentedString(vendorType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    videoURL: ").append(toIndentedString(videoURL)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HTMLSnippet");
    openapiFields.add("accountId");
    openapiFields.add("adTechnologyProviders");
    openapiFields.add("advertiserId");
    openapiFields.add("advertiserName");
    openapiFields.add("agencyId");
    openapiFields.add("apiUploadTimestamp");
    openapiFields.add("attribute");
    openapiFields.add("buyerCreativeId");
    openapiFields.add("clickThroughUrl");
    openapiFields.add("corrections");
    openapiFields.add("disapprovalReasons");
    openapiFields.add("filteringReasons");
    openapiFields.add("height");
    openapiFields.add("impressionTrackingUrl");
    openapiFields.add("kind");
    openapiFields.add("nativeAd");
    openapiFields.add("productCategories");
    openapiFields.add("restrictedCategories");
    openapiFields.add("sensitiveCategories");
    openapiFields.add("status");
    openapiFields.add("vendorType");
    openapiFields.add("version");
    openapiFields.add("videoURL");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Creative
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Creative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Creative is not found in the empty JSON string", Creative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Creative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Creative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("HTMLSnippet") != null && !jsonObj.get("HTMLSnippet").isJsonNull()) && !jsonObj.get("HTMLSnippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HTMLSnippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HTMLSnippet").toString()));
      }
      // validate the optional field `adTechnologyProviders`
      if (jsonObj.get("adTechnologyProviders") != null && !jsonObj.get("adTechnologyProviders").isJsonNull()) {
        CreativeAdTechnologyProviders.validateJsonElement(jsonObj.get("adTechnologyProviders"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull() && !jsonObj.get("advertiserId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be an array in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("advertiserName") != null && !jsonObj.get("advertiserName").isJsonNull()) && !jsonObj.get("advertiserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserName").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attribute") != null && !jsonObj.get("attribute").isJsonNull() && !jsonObj.get("attribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute` to be an array in the JSON string but got `%s`", jsonObj.get("attribute").toString()));
      }
      if ((jsonObj.get("buyerCreativeId") != null && !jsonObj.get("buyerCreativeId").isJsonNull()) && !jsonObj.get("buyerCreativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerCreativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerCreativeId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clickThroughUrl") != null && !jsonObj.get("clickThroughUrl").isJsonNull() && !jsonObj.get("clickThroughUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickThroughUrl` to be an array in the JSON string but got `%s`", jsonObj.get("clickThroughUrl").toString()));
      }
      if (jsonObj.get("corrections") != null && !jsonObj.get("corrections").isJsonNull()) {
        JsonArray jsonArraycorrections = jsonObj.getAsJsonArray("corrections");
        if (jsonArraycorrections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("corrections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `corrections` to be an array in the JSON string but got `%s`", jsonObj.get("corrections").toString()));
          }

          // validate the optional field `corrections` (array)
          for (int i = 0; i < jsonArraycorrections.size(); i++) {
            CreativeCorrectionsInner.validateJsonElement(jsonArraycorrections.get(i));
          };
        }
      }
      if (jsonObj.get("disapprovalReasons") != null && !jsonObj.get("disapprovalReasons").isJsonNull()) {
        JsonArray jsonArraydisapprovalReasons = jsonObj.getAsJsonArray("disapprovalReasons");
        if (jsonArraydisapprovalReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disapprovalReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disapprovalReasons` to be an array in the JSON string but got `%s`", jsonObj.get("disapprovalReasons").toString()));
          }

          // validate the optional field `disapprovalReasons` (array)
          for (int i = 0; i < jsonArraydisapprovalReasons.size(); i++) {
            CreativeDisapprovalReasonsInner.validateJsonElement(jsonArraydisapprovalReasons.get(i));
          };
        }
      }
      // validate the optional field `filteringReasons`
      if (jsonObj.get("filteringReasons") != null && !jsonObj.get("filteringReasons").isJsonNull()) {
        CreativeFilteringReasons.validateJsonElement(jsonObj.get("filteringReasons"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("impressionTrackingUrl") != null && !jsonObj.get("impressionTrackingUrl").isJsonNull() && !jsonObj.get("impressionTrackingUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionTrackingUrl` to be an array in the JSON string but got `%s`", jsonObj.get("impressionTrackingUrl").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `nativeAd`
      if (jsonObj.get("nativeAd") != null && !jsonObj.get("nativeAd").isJsonNull()) {
        CreativeNativeAd.validateJsonElement(jsonObj.get("nativeAd"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productCategories") != null && !jsonObj.get("productCategories").isJsonNull() && !jsonObj.get("productCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCategories` to be an array in the JSON string but got `%s`", jsonObj.get("productCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedCategories") != null && !jsonObj.get("restrictedCategories").isJsonNull() && !jsonObj.get("restrictedCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedCategories` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sensitiveCategories") != null && !jsonObj.get("sensitiveCategories").isJsonNull() && !jsonObj.get("sensitiveCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitiveCategories` to be an array in the JSON string but got `%s`", jsonObj.get("sensitiveCategories").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vendorType") != null && !jsonObj.get("vendorType").isJsonNull() && !jsonObj.get("vendorType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorType` to be an array in the JSON string but got `%s`", jsonObj.get("vendorType").toString()));
      }
      if ((jsonObj.get("videoURL") != null && !jsonObj.get("videoURL").isJsonNull()) && !jsonObj.get("videoURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Creative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Creative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Creative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Creative.class));

       return (TypeAdapter<T>) new TypeAdapter<Creative>() {
           @Override
           public void write(JsonWriter out, Creative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Creative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Creative given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Creative
   * @throws IOException if the JSON string is invalid with respect to Creative
   */
  public static Creative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Creative.class);
  }

  /**
   * Convert an instance of Creative to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

