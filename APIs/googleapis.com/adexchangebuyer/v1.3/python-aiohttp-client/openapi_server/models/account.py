# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_bidder_location_inner import AccountBidderLocationInner
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bidder_location: List[AccountBidderLocationInner]=None, cookie_matching_nid: str=None, cookie_matching_url: str=None, id: int=None, kind: str='adexchangebuyer#account', maximum_active_creatives: int=None, maximum_total_qps: int=None, number_active_creatives: int=None):
        """Account - a model defined in OpenAPI

        :param bidder_location: The bidder_location of this Account.
        :param cookie_matching_nid: The cookie_matching_nid of this Account.
        :param cookie_matching_url: The cookie_matching_url of this Account.
        :param id: The id of this Account.
        :param kind: The kind of this Account.
        :param maximum_active_creatives: The maximum_active_creatives of this Account.
        :param maximum_total_qps: The maximum_total_qps of this Account.
        :param number_active_creatives: The number_active_creatives of this Account.
        """
        self.openapi_types = {
            'bidder_location': List[AccountBidderLocationInner],
            'cookie_matching_nid': str,
            'cookie_matching_url': str,
            'id': int,
            'kind': str,
            'maximum_active_creatives': int,
            'maximum_total_qps': int,
            'number_active_creatives': int
        }

        self.attribute_map = {
            'bidder_location': 'bidderLocation',
            'cookie_matching_nid': 'cookieMatchingNid',
            'cookie_matching_url': 'cookieMatchingUrl',
            'id': 'id',
            'kind': 'kind',
            'maximum_active_creatives': 'maximumActiveCreatives',
            'maximum_total_qps': 'maximumTotalQps',
            'number_active_creatives': 'numberActiveCreatives'
        }

        self._bidder_location = bidder_location
        self._cookie_matching_nid = cookie_matching_nid
        self._cookie_matching_url = cookie_matching_url
        self._id = id
        self._kind = kind
        self._maximum_active_creatives = maximum_active_creatives
        self._maximum_total_qps = maximum_total_qps
        self._number_active_creatives = number_active_creatives

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bidder_location(self):
        """Gets the bidder_location of this Account.

        Your bidder locations that have distinct URLs.

        :return: The bidder_location of this Account.
        :rtype: List[AccountBidderLocationInner]
        """
        return self._bidder_location

    @bidder_location.setter
    def bidder_location(self, bidder_location):
        """Sets the bidder_location of this Account.

        Your bidder locations that have distinct URLs.

        :param bidder_location: The bidder_location of this Account.
        :type bidder_location: List[AccountBidderLocationInner]
        """

        self._bidder_location = bidder_location

    @property
    def cookie_matching_nid(self):
        """Gets the cookie_matching_nid of this Account.

        The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.

        :return: The cookie_matching_nid of this Account.
        :rtype: str
        """
        return self._cookie_matching_nid

    @cookie_matching_nid.setter
    def cookie_matching_nid(self, cookie_matching_nid):
        """Sets the cookie_matching_nid of this Account.

        The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.

        :param cookie_matching_nid: The cookie_matching_nid of this Account.
        :type cookie_matching_nid: str
        """

        self._cookie_matching_nid = cookie_matching_nid

    @property
    def cookie_matching_url(self):
        """Gets the cookie_matching_url of this Account.

        The base URL used in cookie match requests.

        :return: The cookie_matching_url of this Account.
        :rtype: str
        """
        return self._cookie_matching_url

    @cookie_matching_url.setter
    def cookie_matching_url(self, cookie_matching_url):
        """Sets the cookie_matching_url of this Account.

        The base URL used in cookie match requests.

        :param cookie_matching_url: The cookie_matching_url of this Account.
        :type cookie_matching_url: str
        """

        self._cookie_matching_url = cookie_matching_url

    @property
    def id(self):
        """Gets the id of this Account.

        Account id.

        :return: The id of this Account.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Account id.

        :param id: The id of this Account.
        :type id: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Account.

        Resource type.

        :return: The kind of this Account.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Account.

        Resource type.

        :param kind: The kind of this Account.
        :type kind: str
        """

        self._kind = kind

    @property
    def maximum_active_creatives(self):
        """Gets the maximum_active_creatives of this Account.

        The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.

        :return: The maximum_active_creatives of this Account.
        :rtype: int
        """
        return self._maximum_active_creatives

    @maximum_active_creatives.setter
    def maximum_active_creatives(self, maximum_active_creatives):
        """Sets the maximum_active_creatives of this Account.

        The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.

        :param maximum_active_creatives: The maximum_active_creatives of this Account.
        :type maximum_active_creatives: int
        """

        self._maximum_active_creatives = maximum_active_creatives

    @property
    def maximum_total_qps(self):
        """Gets the maximum_total_qps of this Account.

        The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.

        :return: The maximum_total_qps of this Account.
        :rtype: int
        """
        return self._maximum_total_qps

    @maximum_total_qps.setter
    def maximum_total_qps(self, maximum_total_qps):
        """Sets the maximum_total_qps of this Account.

        The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.

        :param maximum_total_qps: The maximum_total_qps of this Account.
        :type maximum_total_qps: int
        """

        self._maximum_total_qps = maximum_total_qps

    @property
    def number_active_creatives(self):
        """Gets the number_active_creatives of this Account.

        The number of creatives that this account inserted or bid with in the last 30 days.

        :return: The number_active_creatives of this Account.
        :rtype: int
        """
        return self._number_active_creatives

    @number_active_creatives.setter
    def number_active_creatives(self, number_active_creatives):
        """Sets the number_active_creatives of this Account.

        The number of creatives that this account inserted or bid with in the last 30 days.

        :param number_active_creatives: The number_active_creatives of this Account.
        :type number_active_creatives: int
        """

        self._number_active_creatives = number_active_creatives
