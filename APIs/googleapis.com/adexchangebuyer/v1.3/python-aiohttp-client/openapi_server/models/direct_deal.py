# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DirectDeal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, advertiser: str=None, allows_alcohol: bool=None, buyer_account_id: str=None, currency_code: str=None, deal_tier: str=None, end_time: str=None, fixed_cpm: str=None, id: str=None, kind: str='adexchangebuyer#directDeal', name: str=None, private_exchange_min_cpm: str=None, publisher_blocks_overriden: bool=None, seller_network: str=None, start_time: str=None):
        """DirectDeal - a model defined in OpenAPI

        :param account_id: The account_id of this DirectDeal.
        :param advertiser: The advertiser of this DirectDeal.
        :param allows_alcohol: The allows_alcohol of this DirectDeal.
        :param buyer_account_id: The buyer_account_id of this DirectDeal.
        :param currency_code: The currency_code of this DirectDeal.
        :param deal_tier: The deal_tier of this DirectDeal.
        :param end_time: The end_time of this DirectDeal.
        :param fixed_cpm: The fixed_cpm of this DirectDeal.
        :param id: The id of this DirectDeal.
        :param kind: The kind of this DirectDeal.
        :param name: The name of this DirectDeal.
        :param private_exchange_min_cpm: The private_exchange_min_cpm of this DirectDeal.
        :param publisher_blocks_overriden: The publisher_blocks_overriden of this DirectDeal.
        :param seller_network: The seller_network of this DirectDeal.
        :param start_time: The start_time of this DirectDeal.
        """
        self.openapi_types = {
            'account_id': int,
            'advertiser': str,
            'allows_alcohol': bool,
            'buyer_account_id': str,
            'currency_code': str,
            'deal_tier': str,
            'end_time': str,
            'fixed_cpm': str,
            'id': str,
            'kind': str,
            'name': str,
            'private_exchange_min_cpm': str,
            'publisher_blocks_overriden': bool,
            'seller_network': str,
            'start_time': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'advertiser': 'advertiser',
            'allows_alcohol': 'allowsAlcohol',
            'buyer_account_id': 'buyerAccountId',
            'currency_code': 'currencyCode',
            'deal_tier': 'dealTier',
            'end_time': 'endTime',
            'fixed_cpm': 'fixedCpm',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'private_exchange_min_cpm': 'privateExchangeMinCpm',
            'publisher_blocks_overriden': 'publisherBlocksOverriden',
            'seller_network': 'sellerNetwork',
            'start_time': 'startTime'
        }

        self._account_id = account_id
        self._advertiser = advertiser
        self._allows_alcohol = allows_alcohol
        self._buyer_account_id = buyer_account_id
        self._currency_code = currency_code
        self._deal_tier = deal_tier
        self._end_time = end_time
        self._fixed_cpm = fixed_cpm
        self._id = id
        self._kind = kind
        self._name = name
        self._private_exchange_min_cpm = private_exchange_min_cpm
        self._publisher_blocks_overriden = publisher_blocks_overriden
        self._seller_network = seller_network
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectDeal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DirectDeal of this DirectDeal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DirectDeal.

        The account id of the buyer this deal is for.

        :return: The account_id of this DirectDeal.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DirectDeal.

        The account id of the buyer this deal is for.

        :param account_id: The account_id of this DirectDeal.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def advertiser(self):
        """Gets the advertiser of this DirectDeal.

        The name of the advertiser this deal is for.

        :return: The advertiser of this DirectDeal.
        :rtype: str
        """
        return self._advertiser

    @advertiser.setter
    def advertiser(self, advertiser):
        """Sets the advertiser of this DirectDeal.

        The name of the advertiser this deal is for.

        :param advertiser: The advertiser of this DirectDeal.
        :type advertiser: str
        """

        self._advertiser = advertiser

    @property
    def allows_alcohol(self):
        """Gets the allows_alcohol of this DirectDeal.

        Whether the publisher for this deal is eligible for alcohol ads.

        :return: The allows_alcohol of this DirectDeal.
        :rtype: bool
        """
        return self._allows_alcohol

    @allows_alcohol.setter
    def allows_alcohol(self, allows_alcohol):
        """Sets the allows_alcohol of this DirectDeal.

        Whether the publisher for this deal is eligible for alcohol ads.

        :param allows_alcohol: The allows_alcohol of this DirectDeal.
        :type allows_alcohol: bool
        """

        self._allows_alcohol = allows_alcohol

    @property
    def buyer_account_id(self):
        """Gets the buyer_account_id of this DirectDeal.

        The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.

        :return: The buyer_account_id of this DirectDeal.
        :rtype: str
        """
        return self._buyer_account_id

    @buyer_account_id.setter
    def buyer_account_id(self, buyer_account_id):
        """Sets the buyer_account_id of this DirectDeal.

        The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.

        :param buyer_account_id: The buyer_account_id of this DirectDeal.
        :type buyer_account_id: str
        """

        self._buyer_account_id = buyer_account_id

    @property
    def currency_code(self):
        """Gets the currency_code of this DirectDeal.

        The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.

        :return: The currency_code of this DirectDeal.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this DirectDeal.

        The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.

        :param currency_code: The currency_code of this DirectDeal.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def deal_tier(self):
        """Gets the deal_tier of this DirectDeal.

        The deal type such as programmatic reservation or fixed price and so on.

        :return: The deal_tier of this DirectDeal.
        :rtype: str
        """
        return self._deal_tier

    @deal_tier.setter
    def deal_tier(self, deal_tier):
        """Sets the deal_tier of this DirectDeal.

        The deal type such as programmatic reservation or fixed price and so on.

        :param deal_tier: The deal_tier of this DirectDeal.
        :type deal_tier: str
        """

        self._deal_tier = deal_tier

    @property
    def end_time(self):
        """Gets the end_time of this DirectDeal.

        End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.

        :return: The end_time of this DirectDeal.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DirectDeal.

        End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.

        :param end_time: The end_time of this DirectDeal.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def fixed_cpm(self):
        """Gets the fixed_cpm of this DirectDeal.

        The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).

        :return: The fixed_cpm of this DirectDeal.
        :rtype: str
        """
        return self._fixed_cpm

    @fixed_cpm.setter
    def fixed_cpm(self, fixed_cpm):
        """Sets the fixed_cpm of this DirectDeal.

        The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).

        :param fixed_cpm: The fixed_cpm of this DirectDeal.
        :type fixed_cpm: str
        """

        self._fixed_cpm = fixed_cpm

    @property
    def id(self):
        """Gets the id of this DirectDeal.

        Deal id.

        :return: The id of this DirectDeal.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectDeal.

        Deal id.

        :param id: The id of this DirectDeal.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this DirectDeal.

        Resource type.

        :return: The kind of this DirectDeal.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DirectDeal.

        Resource type.

        :param kind: The kind of this DirectDeal.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this DirectDeal.

        Deal name.

        :return: The name of this DirectDeal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectDeal.

        Deal name.

        :param name: The name of this DirectDeal.
        :type name: str
        """

        self._name = name

    @property
    def private_exchange_min_cpm(self):
        """Gets the private_exchange_min_cpm of this DirectDeal.

        The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).

        :return: The private_exchange_min_cpm of this DirectDeal.
        :rtype: str
        """
        return self._private_exchange_min_cpm

    @private_exchange_min_cpm.setter
    def private_exchange_min_cpm(self, private_exchange_min_cpm):
        """Sets the private_exchange_min_cpm of this DirectDeal.

        The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).

        :param private_exchange_min_cpm: The private_exchange_min_cpm of this DirectDeal.
        :type private_exchange_min_cpm: str
        """

        self._private_exchange_min_cpm = private_exchange_min_cpm

    @property
    def publisher_blocks_overriden(self):
        """Gets the publisher_blocks_overriden of this DirectDeal.

        If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.

        :return: The publisher_blocks_overriden of this DirectDeal.
        :rtype: bool
        """
        return self._publisher_blocks_overriden

    @publisher_blocks_overriden.setter
    def publisher_blocks_overriden(self, publisher_blocks_overriden):
        """Sets the publisher_blocks_overriden of this DirectDeal.

        If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.

        :param publisher_blocks_overriden: The publisher_blocks_overriden of this DirectDeal.
        :type publisher_blocks_overriden: bool
        """

        self._publisher_blocks_overriden = publisher_blocks_overriden

    @property
    def seller_network(self):
        """Gets the seller_network of this DirectDeal.

        The name of the publisher offering this direct deal.

        :return: The seller_network of this DirectDeal.
        :rtype: str
        """
        return self._seller_network

    @seller_network.setter
    def seller_network(self, seller_network):
        """Sets the seller_network of this DirectDeal.

        The name of the publisher offering this direct deal.

        :param seller_network: The seller_network of this DirectDeal.
        :type seller_network: str
        """

        self._seller_network = seller_network

    @property
    def start_time(self):
        """Gets the start_time of this DirectDeal.

        Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.

        :return: The start_time of this DirectDeal.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DirectDeal.

        Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.

        :param start_time: The start_time of this DirectDeal.
        :type start_time: str
        """

        self._start_time = start_time
