/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PretargetingConfigDimensionsInner from './PretargetingConfigDimensionsInner';
import PretargetingConfigExcludedPlacementsInner from './PretargetingConfigExcludedPlacementsInner';

/**
 * The PretargetingConfig model module.
 * @module model/PretargetingConfig
 * @version v1.3
 */
class PretargetingConfig {
    /**
     * Constructs a new <code>PretargetingConfig</code>.
     * @alias module:model/PretargetingConfig
     */
    constructor() { 
        
        PretargetingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#pretargetingConfig';
    }

    /**
     * Constructs a <code>PretargetingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PretargetingConfig} obj Optional instance to populate.
     * @return {module:model/PretargetingConfig} The populated <code>PretargetingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PretargetingConfig();

            if (data.hasOwnProperty('billingId')) {
                obj['billingId'] = ApiClient.convertToType(data['billingId'], 'String');
            }
            if (data.hasOwnProperty('configId')) {
                obj['configId'] = ApiClient.convertToType(data['configId'], 'String');
            }
            if (data.hasOwnProperty('configName')) {
                obj['configName'] = ApiClient.convertToType(data['configName'], 'String');
            }
            if (data.hasOwnProperty('creativeType')) {
                obj['creativeType'] = ApiClient.convertToType(data['creativeType'], ['String']);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [PretargetingConfigDimensionsInner]);
            }
            if (data.hasOwnProperty('excludedContentLabels')) {
                obj['excludedContentLabels'] = ApiClient.convertToType(data['excludedContentLabels'], ['String']);
            }
            if (data.hasOwnProperty('excludedGeoCriteriaIds')) {
                obj['excludedGeoCriteriaIds'] = ApiClient.convertToType(data['excludedGeoCriteriaIds'], ['String']);
            }
            if (data.hasOwnProperty('excludedPlacements')) {
                obj['excludedPlacements'] = ApiClient.convertToType(data['excludedPlacements'], [PretargetingConfigExcludedPlacementsInner]);
            }
            if (data.hasOwnProperty('excludedUserLists')) {
                obj['excludedUserLists'] = ApiClient.convertToType(data['excludedUserLists'], ['String']);
            }
            if (data.hasOwnProperty('excludedVerticals')) {
                obj['excludedVerticals'] = ApiClient.convertToType(data['excludedVerticals'], ['String']);
            }
            if (data.hasOwnProperty('geoCriteriaIds')) {
                obj['geoCriteriaIds'] = ApiClient.convertToType(data['geoCriteriaIds'], ['String']);
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('maximumQps')) {
                obj['maximumQps'] = ApiClient.convertToType(data['maximumQps'], 'String');
            }
            if (data.hasOwnProperty('mobileCarriers')) {
                obj['mobileCarriers'] = ApiClient.convertToType(data['mobileCarriers'], ['String']);
            }
            if (data.hasOwnProperty('mobileDevices')) {
                obj['mobileDevices'] = ApiClient.convertToType(data['mobileDevices'], ['String']);
            }
            if (data.hasOwnProperty('mobileOperatingSystemVersions')) {
                obj['mobileOperatingSystemVersions'] = ApiClient.convertToType(data['mobileOperatingSystemVersions'], ['String']);
            }
            if (data.hasOwnProperty('placements')) {
                obj['placements'] = ApiClient.convertToType(data['placements'], [PretargetingConfigExcludedPlacementsInner]);
            }
            if (data.hasOwnProperty('platforms')) {
                obj['platforms'] = ApiClient.convertToType(data['platforms'], ['String']);
            }
            if (data.hasOwnProperty('supportedCreativeAttributes')) {
                obj['supportedCreativeAttributes'] = ApiClient.convertToType(data['supportedCreativeAttributes'], ['String']);
            }
            if (data.hasOwnProperty('userLists')) {
                obj['userLists'] = ApiClient.convertToType(data['userLists'], ['String']);
            }
            if (data.hasOwnProperty('vendorTypes')) {
                obj['vendorTypes'] = ApiClient.convertToType(data['vendorTypes'], ['String']);
            }
            if (data.hasOwnProperty('verticals')) {
                obj['verticals'] = ApiClient.convertToType(data['verticals'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PretargetingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PretargetingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingId'] && !(typeof data['billingId'] === 'string' || data['billingId'] instanceof String)) {
            throw new Error("Expected the field `billingId` to be a primitive type in the JSON string but got " + data['billingId']);
        }
        // ensure the json data is a string
        if (data['configId'] && !(typeof data['configId'] === 'string' || data['configId'] instanceof String)) {
            throw new Error("Expected the field `configId` to be a primitive type in the JSON string but got " + data['configId']);
        }
        // ensure the json data is a string
        if (data['configName'] && !(typeof data['configName'] === 'string' || data['configName'] instanceof String)) {
            throw new Error("Expected the field `configName` to be a primitive type in the JSON string but got " + data['configName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['creativeType'])) {
            throw new Error("Expected the field `creativeType` to be an array in the JSON data but got " + data['creativeType']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                PretargetingConfigDimensionsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedContentLabels'])) {
            throw new Error("Expected the field `excludedContentLabels` to be an array in the JSON data but got " + data['excludedContentLabels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedGeoCriteriaIds'])) {
            throw new Error("Expected the field `excludedGeoCriteriaIds` to be an array in the JSON data but got " + data['excludedGeoCriteriaIds']);
        }
        if (data['excludedPlacements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludedPlacements'])) {
                throw new Error("Expected the field `excludedPlacements` to be an array in the JSON data but got " + data['excludedPlacements']);
            }
            // validate the optional field `excludedPlacements` (array)
            for (const item of data['excludedPlacements']) {
                PretargetingConfigExcludedPlacementsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedUserLists'])) {
            throw new Error("Expected the field `excludedUserLists` to be an array in the JSON data but got " + data['excludedUserLists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedVerticals'])) {
            throw new Error("Expected the field `excludedVerticals` to be an array in the JSON data but got " + data['excludedVerticals']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['geoCriteriaIds'])) {
            throw new Error("Expected the field `geoCriteriaIds` to be an array in the JSON data but got " + data['geoCriteriaIds']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }
        // ensure the json data is a string
        if (data['maximumQps'] && !(typeof data['maximumQps'] === 'string' || data['maximumQps'] instanceof String)) {
            throw new Error("Expected the field `maximumQps` to be a primitive type in the JSON string but got " + data['maximumQps']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mobileCarriers'])) {
            throw new Error("Expected the field `mobileCarriers` to be an array in the JSON data but got " + data['mobileCarriers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mobileDevices'])) {
            throw new Error("Expected the field `mobileDevices` to be an array in the JSON data but got " + data['mobileDevices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mobileOperatingSystemVersions'])) {
            throw new Error("Expected the field `mobileOperatingSystemVersions` to be an array in the JSON data but got " + data['mobileOperatingSystemVersions']);
        }
        if (data['placements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['placements'])) {
                throw new Error("Expected the field `placements` to be an array in the JSON data but got " + data['placements']);
            }
            // validate the optional field `placements` (array)
            for (const item of data['placements']) {
                PretargetingConfigExcludedPlacementsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['platforms'])) {
            throw new Error("Expected the field `platforms` to be an array in the JSON data but got " + data['platforms']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedCreativeAttributes'])) {
            throw new Error("Expected the field `supportedCreativeAttributes` to be an array in the JSON data but got " + data['supportedCreativeAttributes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userLists'])) {
            throw new Error("Expected the field `userLists` to be an array in the JSON data but got " + data['userLists']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vendorTypes'])) {
            throw new Error("Expected the field `vendorTypes` to be an array in the JSON data but got " + data['vendorTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['verticals'])) {
            throw new Error("Expected the field `verticals` to be an array in the JSON data but got " + data['verticals']);
        }

        return true;
    }


}



/**
 * The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.
 * @member {String} billingId
 */
PretargetingConfig.prototype['billingId'] = undefined;

/**
 * The config id; generated automatically. Leave this field blank for insert requests.
 * @member {String} configId
 */
PretargetingConfig.prototype['configId'] = undefined;

/**
 * The name of the config. Must be unique. Required for all requests.
 * @member {String} configName
 */
PretargetingConfig.prototype['configName'] = undefined;

/**
 * List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.
 * @member {Array.<String>} creativeType
 */
PretargetingConfig.prototype['creativeType'] = undefined;

/**
 * Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.
 * @member {Array.<module:model/PretargetingConfigDimensionsInner>} dimensions
 */
PretargetingConfig.prototype['dimensions'] = undefined;

/**
 * Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.
 * @member {Array.<String>} excludedContentLabels
 */
PretargetingConfig.prototype['excludedContentLabels'] = undefined;

/**
 * Requests containing any of these geo criteria ids will not match.
 * @member {Array.<String>} excludedGeoCriteriaIds
 */
PretargetingConfig.prototype['excludedGeoCriteriaIds'] = undefined;

/**
 * Requests containing any of these placements will not match.
 * @member {Array.<module:model/PretargetingConfigExcludedPlacementsInner>} excludedPlacements
 */
PretargetingConfig.prototype['excludedPlacements'] = undefined;

/**
 * Requests containing any of these users list ids will not match.
 * @member {Array.<String>} excludedUserLists
 */
PretargetingConfig.prototype['excludedUserLists'] = undefined;

/**
 * Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.
 * @member {Array.<String>} excludedVerticals
 */
PretargetingConfig.prototype['excludedVerticals'] = undefined;

/**
 * Requests containing any of these geo criteria ids will match.
 * @member {Array.<String>} geoCriteriaIds
 */
PretargetingConfig.prototype['geoCriteriaIds'] = undefined;

/**
 * Whether this config is active. Required for all requests.
 * @member {Boolean} isActive
 */
PretargetingConfig.prototype['isActive'] = undefined;

/**
 * The kind of the resource, i.e. \"adexchangebuyer#pretargetingConfig\".
 * @member {String} kind
 * @default 'adexchangebuyer#pretargetingConfig'
 */
PretargetingConfig.prototype['kind'] = 'adexchangebuyer#pretargetingConfig';

/**
 * Request containing any of these language codes will match.
 * @member {Array.<String>} languages
 */
PretargetingConfig.prototype['languages'] = undefined;

/**
 * The maximum QPS allocated to this pretargeting configuration, used for pretargeting-level QPS limits. By default, this is not set, which indicates that there is no QPS limit at the configuration level (a global or account-level limit may still be imposed).
 * @member {String} maximumQps
 */
PretargetingConfig.prototype['maximumQps'] = undefined;

/**
 * Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.
 * @member {Array.<String>} mobileCarriers
 */
PretargetingConfig.prototype['mobileCarriers'] = undefined;

/**
 * Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.
 * @member {Array.<String>} mobileDevices
 */
PretargetingConfig.prototype['mobileDevices'] = undefined;

/**
 * Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.
 * @member {Array.<String>} mobileOperatingSystemVersions
 */
PretargetingConfig.prototype['mobileOperatingSystemVersions'] = undefined;

/**
 * Requests containing any of these placements will match.
 * @member {Array.<module:model/PretargetingConfigExcludedPlacementsInner>} placements
 */
PretargetingConfig.prototype['placements'] = undefined;

/**
 * Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.
 * @member {Array.<String>} platforms
 */
PretargetingConfig.prototype['platforms'] = undefined;

/**
 * Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.
 * @member {Array.<String>} supportedCreativeAttributes
 */
PretargetingConfig.prototype['supportedCreativeAttributes'] = undefined;

/**
 * Requests containing any of these user list ids will match.
 * @member {Array.<String>} userLists
 */
PretargetingConfig.prototype['userLists'] = undefined;

/**
 * Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.
 * @member {Array.<String>} vendorTypes
 */
PretargetingConfig.prototype['vendorTypes'] = undefined;

/**
 * Requests containing any of these vertical ids will match.
 * @member {Array.<String>} verticals
 */
PretargetingConfig.prototype['verticals'] = undefined;






export default PretargetingConfig;

