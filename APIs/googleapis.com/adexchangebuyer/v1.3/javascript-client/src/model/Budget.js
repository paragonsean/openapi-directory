/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Budget model module.
 * @module model/Budget
 * @version v1.3
 */
class Budget {
    /**
     * Constructs a new <code>Budget</code>.
     * The configuration data for Ad Exchange RTB - Budget API.
     * @alias module:model/Budget
     */
    constructor() { 
        
        Budget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#budget';
    }

    /**
     * Constructs a <code>Budget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Budget} obj Optional instance to populate.
     * @return {module:model/Budget} The populated <code>Budget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Budget();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('billingId')) {
                obj['billingId'] = ApiClient.convertToType(data['billingId'], 'String');
            }
            if (data.hasOwnProperty('budgetAmount')) {
                obj['budgetAmount'] = ApiClient.convertToType(data['budgetAmount'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Budget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Budget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['billingId'] && !(typeof data['billingId'] === 'string' || data['billingId'] instanceof String)) {
            throw new Error("Expected the field `billingId` to be a primitive type in the JSON string but got " + data['billingId']);
        }
        // ensure the json data is a string
        if (data['budgetAmount'] && !(typeof data['budgetAmount'] === 'string' || data['budgetAmount'] instanceof String)) {
            throw new Error("Expected the field `budgetAmount` to be a primitive type in the JSON string but got " + data['budgetAmount']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * The id of the account. This is required for get and update requests.
 * @member {String} accountId
 */
Budget.prototype['accountId'] = undefined;

/**
 * The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.
 * @member {String} billingId
 */
Budget.prototype['billingId'] = undefined;

/**
 * The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.
 * @member {String} budgetAmount
 */
Budget.prototype['budgetAmount'] = undefined;

/**
 * The currency code for the buyer. This cannot be altered here.
 * @member {String} currencyCode
 */
Budget.prototype['currencyCode'] = undefined;

/**
 * The unique id that describes this item.
 * @member {String} id
 */
Budget.prototype['id'] = undefined;

/**
 * The kind of the resource, i.e. \"adexchangebuyer#budget\".
 * @member {String} kind
 * @default 'adexchangebuyer#budget'
 */
Budget.prototype['kind'] = 'adexchangebuyer#budget';






export default Budget;

