/**
 * Ad Exchange Buyer API
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 *
 * The version of the OpenAPI document: v1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreativeAdTechnologyProviders from './CreativeAdTechnologyProviders';
import CreativeCorrectionsInner from './CreativeCorrectionsInner';
import CreativeDisapprovalReasonsInner from './CreativeDisapprovalReasonsInner';
import CreativeFilteringReasons from './CreativeFilteringReasons';
import CreativeNativeAd from './CreativeNativeAd';

/**
 * The Creative model module.
 * @module model/Creative
 * @version v1.3
 */
class Creative {
    /**
     * Constructs a new <code>Creative</code>.
     * A creative and its classification data.
     * @alias module:model/Creative
     */
    constructor() { 
        
        Creative.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adexchangebuyer#creative';
    }

    /**
     * Constructs a <code>Creative</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Creative} obj Optional instance to populate.
     * @return {module:model/Creative} The populated <code>Creative</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Creative();

            if (data.hasOwnProperty('HTMLSnippet')) {
                obj['HTMLSnippet'] = ApiClient.convertToType(data['HTMLSnippet'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('adTechnologyProviders')) {
                obj['adTechnologyProviders'] = CreativeAdTechnologyProviders.constructFromObject(data['adTechnologyProviders']);
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], ['String']);
            }
            if (data.hasOwnProperty('advertiserName')) {
                obj['advertiserName'] = ApiClient.convertToType(data['advertiserName'], 'String');
            }
            if (data.hasOwnProperty('agencyId')) {
                obj['agencyId'] = ApiClient.convertToType(data['agencyId'], 'String');
            }
            if (data.hasOwnProperty('apiUploadTimestamp')) {
                obj['apiUploadTimestamp'] = ApiClient.convertToType(data['apiUploadTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('attribute')) {
                obj['attribute'] = ApiClient.convertToType(data['attribute'], ['Number']);
            }
            if (data.hasOwnProperty('buyerCreativeId')) {
                obj['buyerCreativeId'] = ApiClient.convertToType(data['buyerCreativeId'], 'String');
            }
            if (data.hasOwnProperty('clickThroughUrl')) {
                obj['clickThroughUrl'] = ApiClient.convertToType(data['clickThroughUrl'], ['String']);
            }
            if (data.hasOwnProperty('corrections')) {
                obj['corrections'] = ApiClient.convertToType(data['corrections'], [CreativeCorrectionsInner]);
            }
            if (data.hasOwnProperty('disapprovalReasons')) {
                obj['disapprovalReasons'] = ApiClient.convertToType(data['disapprovalReasons'], [CreativeDisapprovalReasonsInner]);
            }
            if (data.hasOwnProperty('filteringReasons')) {
                obj['filteringReasons'] = CreativeFilteringReasons.constructFromObject(data['filteringReasons']);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('impressionTrackingUrl')) {
                obj['impressionTrackingUrl'] = ApiClient.convertToType(data['impressionTrackingUrl'], ['String']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('nativeAd')) {
                obj['nativeAd'] = CreativeNativeAd.constructFromObject(data['nativeAd']);
            }
            if (data.hasOwnProperty('productCategories')) {
                obj['productCategories'] = ApiClient.convertToType(data['productCategories'], ['Number']);
            }
            if (data.hasOwnProperty('restrictedCategories')) {
                obj['restrictedCategories'] = ApiClient.convertToType(data['restrictedCategories'], ['Number']);
            }
            if (data.hasOwnProperty('sensitiveCategories')) {
                obj['sensitiveCategories'] = ApiClient.convertToType(data['sensitiveCategories'], ['Number']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('vendorType')) {
                obj['vendorType'] = ApiClient.convertToType(data['vendorType'], ['Number']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('videoURL')) {
                obj['videoURL'] = ApiClient.convertToType(data['videoURL'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Creative</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Creative</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['HTMLSnippet'] && !(typeof data['HTMLSnippet'] === 'string' || data['HTMLSnippet'] instanceof String)) {
            throw new Error("Expected the field `HTMLSnippet` to be a primitive type in the JSON string but got " + data['HTMLSnippet']);
        }
        // validate the optional field `adTechnologyProviders`
        if (data['adTechnologyProviders']) { // data not null
          CreativeAdTechnologyProviders.validateJSON(data['adTechnologyProviders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['advertiserId'])) {
            throw new Error("Expected the field `advertiserId` to be an array in the JSON data but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['advertiserName'] && !(typeof data['advertiserName'] === 'string' || data['advertiserName'] instanceof String)) {
            throw new Error("Expected the field `advertiserName` to be a primitive type in the JSON string but got " + data['advertiserName']);
        }
        // ensure the json data is a string
        if (data['agencyId'] && !(typeof data['agencyId'] === 'string' || data['agencyId'] instanceof String)) {
            throw new Error("Expected the field `agencyId` to be a primitive type in the JSON string but got " + data['agencyId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attribute'])) {
            throw new Error("Expected the field `attribute` to be an array in the JSON data but got " + data['attribute']);
        }
        // ensure the json data is a string
        if (data['buyerCreativeId'] && !(typeof data['buyerCreativeId'] === 'string' || data['buyerCreativeId'] instanceof String)) {
            throw new Error("Expected the field `buyerCreativeId` to be a primitive type in the JSON string but got " + data['buyerCreativeId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clickThroughUrl'])) {
            throw new Error("Expected the field `clickThroughUrl` to be an array in the JSON data but got " + data['clickThroughUrl']);
        }
        if (data['corrections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['corrections'])) {
                throw new Error("Expected the field `corrections` to be an array in the JSON data but got " + data['corrections']);
            }
            // validate the optional field `corrections` (array)
            for (const item of data['corrections']) {
                CreativeCorrectionsInner.validateJSON(item);
            };
        }
        if (data['disapprovalReasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disapprovalReasons'])) {
                throw new Error("Expected the field `disapprovalReasons` to be an array in the JSON data but got " + data['disapprovalReasons']);
            }
            // validate the optional field `disapprovalReasons` (array)
            for (const item of data['disapprovalReasons']) {
                CreativeDisapprovalReasonsInner.validateJSON(item);
            };
        }
        // validate the optional field `filteringReasons`
        if (data['filteringReasons']) { // data not null
          CreativeFilteringReasons.validateJSON(data['filteringReasons']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['impressionTrackingUrl'])) {
            throw new Error("Expected the field `impressionTrackingUrl` to be an array in the JSON data but got " + data['impressionTrackingUrl']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `nativeAd`
        if (data['nativeAd']) { // data not null
          CreativeNativeAd.validateJSON(data['nativeAd']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productCategories'])) {
            throw new Error("Expected the field `productCategories` to be an array in the JSON data but got " + data['productCategories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['restrictedCategories'])) {
            throw new Error("Expected the field `restrictedCategories` to be an array in the JSON data but got " + data['restrictedCategories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sensitiveCategories'])) {
            throw new Error("Expected the field `sensitiveCategories` to be an array in the JSON data but got " + data['sensitiveCategories']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vendorType'])) {
            throw new Error("Expected the field `vendorType` to be an array in the JSON data but got " + data['vendorType']);
        }
        // ensure the json data is a string
        if (data['videoURL'] && !(typeof data['videoURL'] === 'string' || data['videoURL'] instanceof String)) {
            throw new Error("Expected the field `videoURL` to be a primitive type in the JSON string but got " + data['videoURL']);
        }

        return true;
    }


}



/**
 * The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
 * @member {String} HTMLSnippet
 */
Creative.prototype['HTMLSnippet'] = undefined;

/**
 * Account id.
 * @member {Number} accountId
 */
Creative.prototype['accountId'] = undefined;

/**
 * @member {module:model/CreativeAdTechnologyProviders} adTechnologyProviders
 */
Creative.prototype['adTechnologyProviders'] = undefined;

/**
 * Detected advertiser id, if any. Read-only. This field should not be set in requests.
 * @member {Array.<String>} advertiserId
 */
Creative.prototype['advertiserId'] = undefined;

/**
 * The name of the company being advertised in the creative.
 * @member {String} advertiserName
 */
Creative.prototype['advertiserName'] = undefined;

/**
 * The agency id for this creative.
 * @member {String} agencyId
 */
Creative.prototype['agencyId'] = undefined;

/**
 * The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
 * @member {Date} apiUploadTimestamp
 */
Creative.prototype['apiUploadTimestamp'] = undefined;

/**
 * All attributes for the ads that may be shown from this snippet.
 * @member {Array.<Number>} attribute
 */
Creative.prototype['attribute'] = undefined;

/**
 * A buyer-specific id identifying the creative in this ad.
 * @member {String} buyerCreativeId
 */
Creative.prototype['buyerCreativeId'] = undefined;

/**
 * The set of destination urls for the snippet.
 * @member {Array.<String>} clickThroughUrl
 */
Creative.prototype['clickThroughUrl'] = undefined;

/**
 * Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
 * @member {Array.<module:model/CreativeCorrectionsInner>} corrections
 */
Creative.prototype['corrections'] = undefined;

/**
 * The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
 * @member {Array.<module:model/CreativeDisapprovalReasonsInner>} disapprovalReasons
 */
Creative.prototype['disapprovalReasons'] = undefined;

/**
 * @member {module:model/CreativeFilteringReasons} filteringReasons
 */
Creative.prototype['filteringReasons'] = undefined;

/**
 * Ad height.
 * @member {Number} height
 */
Creative.prototype['height'] = undefined;

/**
 * The set of urls to be called to record an impression.
 * @member {Array.<String>} impressionTrackingUrl
 */
Creative.prototype['impressionTrackingUrl'] = undefined;

/**
 * Resource type.
 * @member {String} kind
 * @default 'adexchangebuyer#creative'
 */
Creative.prototype['kind'] = 'adexchangebuyer#creative';

/**
 * @member {module:model/CreativeNativeAd} nativeAd
 */
Creative.prototype['nativeAd'] = undefined;

/**
 * Detected product categories, if any. Read-only. This field should not be set in requests.
 * @member {Array.<Number>} productCategories
 */
Creative.prototype['productCategories'] = undefined;

/**
 * All restricted categories for the ads that may be shown from this snippet.
 * @member {Array.<Number>} restrictedCategories
 */
Creative.prototype['restrictedCategories'] = undefined;

/**
 * Detected sensitive categories, if any. Read-only. This field should not be set in requests.
 * @member {Array.<Number>} sensitiveCategories
 */
Creative.prototype['sensitiveCategories'] = undefined;

/**
 * Creative serving status. Read-only. This field should not be set in requests.
 * @member {String} status
 */
Creative.prototype['status'] = undefined;

/**
 * All vendor types for the ads that may be shown from this snippet.
 * @member {Array.<Number>} vendorType
 */
Creative.prototype['vendorType'] = undefined;

/**
 * The version for this creative. Read-only. This field should not be set in requests.
 * @member {Number} version
 */
Creative.prototype['version'] = undefined;

/**
 * The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set.
 * @member {String} videoURL
 */
Creative.prototype['videoURL'] = undefined;

/**
 * Ad width.
 * @member {Number} width
 */
Creative.prototype['width'] = undefined;






export default Creative;

