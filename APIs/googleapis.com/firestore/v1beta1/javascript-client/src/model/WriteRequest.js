/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Write from './Write';

/**
 * The WriteRequest model module.
 * @module model/WriteRequest
 * @version v1beta1
 */
class WriteRequest {
    /**
     * Constructs a new <code>WriteRequest</code>.
     * The request for Firestore.Write. The first request creates a stream, or resumes an existing one from a token. When creating a new stream, the server replies with a response containing only an ID and a token, to use in the next request. When resuming a stream, the server first streams any responses later than the given token, then a response containing only an up-to-date token, to use in the next request.
     * @alias module:model/WriteRequest
     */
    constructor() { 
        
        WriteRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WriteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WriteRequest} obj Optional instance to populate.
     * @return {module:model/WriteRequest} The populated <code>WriteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WriteRequest();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('streamId')) {
                obj['streamId'] = ApiClient.convertToType(data['streamId'], 'String');
            }
            if (data.hasOwnProperty('streamToken')) {
                obj['streamToken'] = ApiClient.convertToType(data['streamToken'], 'Blob');
            }
            if (data.hasOwnProperty('writes')) {
                obj['writes'] = ApiClient.convertToType(data['writes'], [Write]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WriteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WriteRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['streamId'] && !(typeof data['streamId'] === 'string' || data['streamId'] instanceof String)) {
            throw new Error("Expected the field `streamId` to be a primitive type in the JSON string but got " + data['streamId']);
        }
        if (data['writes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['writes'])) {
                throw new Error("Expected the field `writes` to be an array in the JSON data but got " + data['writes']);
            }
            // validate the optional field `writes` (array)
            for (const item of data['writes']) {
                Write.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Labels associated with this write request.
 * @member {Object.<String, String>} labels
 */
WriteRequest.prototype['labels'] = undefined;

/**
 * The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.
 * @member {String} streamId
 */
WriteRequest.prototype['streamId'] = undefined;

/**
 * A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream.
 * @member {Blob} streamToken
 */
WriteRequest.prototype['streamToken'] = undefined;

/**
 * The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.
 * @member {Array.<module:model/Write>} writes
 */
WriteRequest.prototype['writes'] = undefined;






export default WriteRequest;

