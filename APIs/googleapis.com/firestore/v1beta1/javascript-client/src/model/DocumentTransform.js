/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldTransform from './FieldTransform';

/**
 * The DocumentTransform model module.
 * @module model/DocumentTransform
 * @version v1beta1
 */
class DocumentTransform {
    /**
     * Constructs a new <code>DocumentTransform</code>.
     * A transformation of a document.
     * @alias module:model/DocumentTransform
     */
    constructor() { 
        
        DocumentTransform.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentTransform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentTransform} obj Optional instance to populate.
     * @return {module:model/DocumentTransform} The populated <code>DocumentTransform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentTransform();

            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('fieldTransforms')) {
                obj['fieldTransforms'] = ApiClient.convertToType(data['fieldTransforms'], [FieldTransform]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentTransform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentTransform</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        if (data['fieldTransforms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldTransforms'])) {
                throw new Error("Expected the field `fieldTransforms` to be an array in the JSON data but got " + data['fieldTransforms']);
            }
            // validate the optional field `fieldTransforms` (array)
            for (const item of data['fieldTransforms']) {
                FieldTransform.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the document to transform.
 * @member {String} document
 */
DocumentTransform.prototype['document'] = undefined;

/**
 * The list of transformations to apply to the fields of the document, in order. This must not be empty.
 * @member {Array.<module:model/FieldTransform>} fieldTransforms
 */
DocumentTransform.prototype['fieldTransforms'] = undefined;






export default DocumentTransform;

