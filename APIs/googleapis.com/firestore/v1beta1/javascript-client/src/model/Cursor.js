/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Value from './Value';

/**
 * The Cursor model module.
 * @module model/Cursor
 * @version v1beta1
 */
class Cursor {
    /**
     * Constructs a new <code>Cursor</code>.
     * A position in a query result set.
     * @alias module:model/Cursor
     */
    constructor() { 
        
        Cursor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cursor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cursor} obj Optional instance to populate.
     * @return {module:model/Cursor} The populated <code>Cursor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cursor();

            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], 'Boolean');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Value]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cursor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cursor</code>.
     */
    static validateJSON(data) {
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                Value.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If the position is just before or just after the given values, relative to the sort order defined by the query.
 * @member {Boolean} before
 */
Cursor.prototype['before'] = undefined;

/**
 * The values that represent a position, in the order they appear in the order by clause of a query. Can contain fewer values than specified in the order by clause.
 * @member {Array.<module:model/Value>} values
 */
Cursor.prototype['values'] = undefined;






export default Cursor;

