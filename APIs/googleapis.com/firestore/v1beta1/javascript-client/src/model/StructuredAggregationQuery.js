/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aggregation from './Aggregation';
import StructuredQuery from './StructuredQuery';

/**
 * The StructuredAggregationQuery model module.
 * @module model/StructuredAggregationQuery
 * @version v1beta1
 */
class StructuredAggregationQuery {
    /**
     * Constructs a new <code>StructuredAggregationQuery</code>.
     * Firestore query for running an aggregation over a StructuredQuery.
     * @alias module:model/StructuredAggregationQuery
     */
    constructor() { 
        
        StructuredAggregationQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StructuredAggregationQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StructuredAggregationQuery} obj Optional instance to populate.
     * @return {module:model/StructuredAggregationQuery} The populated <code>StructuredAggregationQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StructuredAggregationQuery();

            if (data.hasOwnProperty('aggregations')) {
                obj['aggregations'] = ApiClient.convertToType(data['aggregations'], [Aggregation]);
            }
            if (data.hasOwnProperty('structuredQuery')) {
                obj['structuredQuery'] = StructuredQuery.constructFromObject(data['structuredQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StructuredAggregationQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StructuredAggregationQuery</code>.
     */
    static validateJSON(data) {
        if (data['aggregations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aggregations'])) {
                throw new Error("Expected the field `aggregations` to be an array in the JSON data but got " + data['aggregations']);
            }
            // validate the optional field `aggregations` (array)
            for (const item of data['aggregations']) {
                Aggregation.validateJSON(item);
            };
        }
        // validate the optional field `structuredQuery`
        if (data['structuredQuery']) { // data not null
          StructuredQuery.validateJSON(data['structuredQuery']);
        }

        return true;
    }


}



/**
 * Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query.
 * @member {Array.<module:model/Aggregation>} aggregations
 */
StructuredAggregationQuery.prototype['aggregations'] = undefined;

/**
 * @member {module:model/StructuredQuery} structuredQuery
 */
StructuredAggregationQuery.prototype['structuredQuery'] = undefined;






export default StructuredAggregationQuery;

