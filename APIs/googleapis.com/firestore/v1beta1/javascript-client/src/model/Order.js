/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldReference from './FieldReference';

/**
 * The Order model module.
 * @module model/Order
 * @version v1beta1
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * An order on a field.
     * @alias module:model/Order
     */
    constructor() { 
        
        Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = FieldReference.constructFromObject(data['field']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // validate the optional field `field`
        if (data['field']) { // data not null
          FieldReference.validateJSON(data['field']);
        }

        return true;
    }


}



/**
 * The direction to order by. Defaults to `ASCENDING`.
 * @member {module:model/Order.DirectionEnum} direction
 */
Order.prototype['direction'] = undefined;

/**
 * @member {module:model/FieldReference} field
 */
Order.prototype['field'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
Order['DirectionEnum'] = {

    /**
     * value: "DIRECTION_UNSPECIFIED"
     * @const
     */
    "DIRECTION_UNSPECIFIED": "DIRECTION_UNSPECIFIED",

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default Order;

