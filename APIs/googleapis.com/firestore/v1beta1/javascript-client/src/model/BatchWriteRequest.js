/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Write from './Write';

/**
 * The BatchWriteRequest model module.
 * @module model/BatchWriteRequest
 * @version v1beta1
 */
class BatchWriteRequest {
    /**
     * Constructs a new <code>BatchWriteRequest</code>.
     * The request for Firestore.BatchWrite.
     * @alias module:model/BatchWriteRequest
     */
    constructor() { 
        
        BatchWriteRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchWriteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchWriteRequest} obj Optional instance to populate.
     * @return {module:model/BatchWriteRequest} The populated <code>BatchWriteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchWriteRequest();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('writes')) {
                obj['writes'] = ApiClient.convertToType(data['writes'], [Write]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchWriteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchWriteRequest</code>.
     */
    static validateJSON(data) {
        if (data['writes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['writes'])) {
                throw new Error("Expected the field `writes` to be an array in the JSON data but got " + data['writes']);
            }
            // validate the optional field `writes` (array)
            for (const item of data['writes']) {
                Write.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Labels associated with this batch write.
 * @member {Object.<String, String>} labels
 */
BatchWriteRequest.prototype['labels'] = undefined;

/**
 * The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.
 * @member {Array.<module:model/Write>} writes
 */
BatchWriteRequest.prototype['writes'] = undefined;






export default BatchWriteRequest;

