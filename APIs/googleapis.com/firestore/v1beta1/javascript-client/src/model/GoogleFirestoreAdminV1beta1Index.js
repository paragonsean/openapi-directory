/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFirestoreAdminV1beta1IndexField from './GoogleFirestoreAdminV1beta1IndexField';

/**
 * The GoogleFirestoreAdminV1beta1Index model module.
 * @module model/GoogleFirestoreAdminV1beta1Index
 * @version v1beta1
 */
class GoogleFirestoreAdminV1beta1Index {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1beta1Index</code>.
     * An index definition.
     * @alias module:model/GoogleFirestoreAdminV1beta1Index
     */
    constructor() { 
        
        GoogleFirestoreAdminV1beta1Index.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1beta1Index</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1beta1Index} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1beta1Index} The populated <code>GoogleFirestoreAdminV1beta1Index</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1beta1Index();

            if (data.hasOwnProperty('collectionId')) {
                obj['collectionId'] = ApiClient.convertToType(data['collectionId'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [GoogleFirestoreAdminV1beta1IndexField]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1beta1Index</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1beta1Index</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collectionId'] && !(typeof data['collectionId'] === 'string' || data['collectionId'] instanceof String)) {
            throw new Error("Expected the field `collectionId` to be a primitive type in the JSON string but got " + data['collectionId']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                GoogleFirestoreAdminV1beta1IndexField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The collection ID to which this index applies. Required.
 * @member {String} collectionId
 */
GoogleFirestoreAdminV1beta1Index.prototype['collectionId'] = undefined;

/**
 * The fields to index.
 * @member {Array.<module:model/GoogleFirestoreAdminV1beta1IndexField>} fields
 */
GoogleFirestoreAdminV1beta1Index.prototype['fields'] = undefined;

/**
 * The resource name of the index. Output only.
 * @member {String} name
 */
GoogleFirestoreAdminV1beta1Index.prototype['name'] = undefined;

/**
 * The state of the index. Output only.
 * @member {module:model/GoogleFirestoreAdminV1beta1Index.StateEnum} state
 */
GoogleFirestoreAdminV1beta1Index.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1beta1Index['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default GoogleFirestoreAdminV1beta1Index;

