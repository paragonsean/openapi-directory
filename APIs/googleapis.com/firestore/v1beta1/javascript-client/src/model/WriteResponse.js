/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WriteResult from './WriteResult';

/**
 * The WriteResponse model module.
 * @module model/WriteResponse
 * @version v1beta1
 */
class WriteResponse {
    /**
     * Constructs a new <code>WriteResponse</code>.
     * The response for Firestore.Write.
     * @alias module:model/WriteResponse
     */
    constructor() { 
        
        WriteResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WriteResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WriteResponse} obj Optional instance to populate.
     * @return {module:model/WriteResponse} The populated <code>WriteResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WriteResponse();

            if (data.hasOwnProperty('commitTime')) {
                obj['commitTime'] = ApiClient.convertToType(data['commitTime'], 'String');
            }
            if (data.hasOwnProperty('streamId')) {
                obj['streamId'] = ApiClient.convertToType(data['streamId'], 'String');
            }
            if (data.hasOwnProperty('streamToken')) {
                obj['streamToken'] = ApiClient.convertToType(data['streamToken'], 'Blob');
            }
            if (data.hasOwnProperty('writeResults')) {
                obj['writeResults'] = ApiClient.convertToType(data['writeResults'], [WriteResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WriteResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WriteResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitTime'] && !(typeof data['commitTime'] === 'string' || data['commitTime'] instanceof String)) {
            throw new Error("Expected the field `commitTime` to be a primitive type in the JSON string but got " + data['commitTime']);
        }
        // ensure the json data is a string
        if (data['streamId'] && !(typeof data['streamId'] === 'string' || data['streamId'] instanceof String)) {
            throw new Error("Expected the field `streamId` to be a primitive type in the JSON string but got " + data['streamId']);
        }
        if (data['writeResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['writeResults'])) {
                throw new Error("Expected the field `writeResults` to be an array in the JSON data but got " + data['writeResults']);
            }
            // validate the optional field `writeResults` (array)
            for (const item of data['writeResults']) {
                WriteResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the write.
 * @member {String} commitTime
 */
WriteResponse.prototype['commitTime'] = undefined;

/**
 * The ID of the stream. Only set on the first message, when a new stream was created.
 * @member {String} streamId
 */
WriteResponse.prototype['streamId'] = undefined;

/**
 * A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set.
 * @member {Blob} streamToken
 */
WriteResponse.prototype['streamToken'] = undefined;

/**
 * The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
 * @member {Array.<module:model/WriteResult>} writeResults
 */
WriteResponse.prototype['writeResults'] = undefined;






export default WriteResponse;

