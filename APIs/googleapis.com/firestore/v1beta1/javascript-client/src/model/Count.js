/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Count model module.
 * @module model/Count
 * @version v1beta1
 */
class Count {
    /**
     * Constructs a new <code>Count</code>.
     * Count of documents that match the query. The &#x60;COUNT(*)&#x60; aggregation function operates on the entire document so it does not require a field reference.
     * @alias module:model/Count
     */
    constructor() { 
        
        Count.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Count</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Count} obj Optional instance to populate.
     * @return {module:model/Count} The populated <code>Count</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Count();

            if (data.hasOwnProperty('upTo')) {
                obj['upTo'] = ApiClient.convertToType(data['upTo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Count</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Count</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['upTo'] && !(typeof data['upTo'] === 'string' || data['upTo'] instanceof String)) {
            throw new Error("Expected the field `upTo` to be a primitive type in the JSON string but got " + data['upTo']);
        }

        return true;
    }


}



/**
 * Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present.
 * @member {String} upTo
 */
Count.prototype['upTo'] = undefined;






export default Count;

