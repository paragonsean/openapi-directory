/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentDelete model module.
 * @module model/DocumentDelete
 * @version v1beta1
 */
class DocumentDelete {
    /**
     * Constructs a new <code>DocumentDelete</code>.
     * A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.
     * @alias module:model/DocumentDelete
     */
    constructor() { 
        
        DocumentDelete.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentDelete</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentDelete} obj Optional instance to populate.
     * @return {module:model/DocumentDelete} The populated <code>DocumentDelete</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentDelete();

            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('removedTargetIds')) {
                obj['removedTargetIds'] = ApiClient.convertToType(data['removedTargetIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentDelete</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentDelete</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['removedTargetIds'])) {
            throw new Error("Expected the field `removedTargetIds` to be an array in the JSON data but got " + data['removedTargetIds']);
        }

        return true;
    }


}



/**
 * The resource name of the Document that was deleted.
 * @member {String} document
 */
DocumentDelete.prototype['document'] = undefined;

/**
 * The read timestamp at which the delete was observed. Greater or equal to the `commit_time` of the delete.
 * @member {String} readTime
 */
DocumentDelete.prototype['readTime'] = undefined;

/**
 * A set of target IDs for targets that previously matched this entity.
 * @member {Array.<Number>} removedTargetIds
 */
DocumentDelete.prototype['removedTargetIds'] = undefined;






export default DocumentDelete;

