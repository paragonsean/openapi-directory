/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentMask model module.
 * @module model/DocumentMask
 * @version v1beta1
 */
class DocumentMask {
    /**
     * Constructs a new <code>DocumentMask</code>.
     * A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.
     * @alias module:model/DocumentMask
     */
    constructor() { 
        
        DocumentMask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentMask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentMask} obj Optional instance to populate.
     * @return {module:model/DocumentMask} The populated <code>DocumentMask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentMask();

            if (data.hasOwnProperty('fieldPaths')) {
                obj['fieldPaths'] = ApiClient.convertToType(data['fieldPaths'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentMask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentMask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['fieldPaths'])) {
            throw new Error("Expected the field `fieldPaths` to be an array in the JSON data but got " + data['fieldPaths']);
        }

        return true;
    }


}



/**
 * The list of field paths in the mask. See Document.fields for a field path syntax reference.
 * @member {Array.<String>} fieldPaths
 */
DocumentMask.prototype['fieldPaths'] = undefined;






export default DocumentMask;

