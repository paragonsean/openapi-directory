/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Write from './Write';

/**
 * The CommitRequest model module.
 * @module model/CommitRequest
 * @version v1beta1
 */
class CommitRequest {
    /**
     * Constructs a new <code>CommitRequest</code>.
     * The request for Firestore.Commit.
     * @alias module:model/CommitRequest
     */
    constructor() { 
        
        CommitRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitRequest} obj Optional instance to populate.
     * @return {module:model/CommitRequest} The populated <code>CommitRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitRequest();

            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'Blob');
            }
            if (data.hasOwnProperty('writes')) {
                obj['writes'] = ApiClient.convertToType(data['writes'], [Write]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitRequest</code>.
     */
    static validateJSON(data) {
        if (data['writes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['writes'])) {
                throw new Error("Expected the field `writes` to be an array in the JSON data but got " + data['writes']);
            }
            // validate the optional field `writes` (array)
            for (const item of data['writes']) {
                Write.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If set, applies all writes in this transaction, and commits it.
 * @member {Blob} transaction
 */
CommitRequest.prototype['transaction'] = undefined;

/**
 * The writes to apply. Always executed atomically and in order.
 * @member {Array.<module:model/Write>} writes
 */
CommitRequest.prototype['writes'] = undefined;






export default CommitRequest;

