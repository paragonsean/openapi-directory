/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CollectionSelector model module.
 * @module model/CollectionSelector
 * @version v1beta1
 */
class CollectionSelector {
    /**
     * Constructs a new <code>CollectionSelector</code>.
     * A selection of a collection, such as &#x60;messages as m1&#x60;.
     * @alias module:model/CollectionSelector
     */
    constructor() { 
        
        CollectionSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CollectionSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectionSelector} obj Optional instance to populate.
     * @return {module:model/CollectionSelector} The populated <code>CollectionSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectionSelector();

            if (data.hasOwnProperty('allDescendants')) {
                obj['allDescendants'] = ApiClient.convertToType(data['allDescendants'], 'Boolean');
            }
            if (data.hasOwnProperty('collectionId')) {
                obj['collectionId'] = ApiClient.convertToType(data['collectionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectionSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectionSelector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collectionId'] && !(typeof data['collectionId'] === 'string' || data['collectionId'] instanceof String)) {
            throw new Error("Expected the field `collectionId` to be a primitive type in the JSON string but got " + data['collectionId']);
        }

        return true;
    }


}



/**
 * When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.
 * @member {Boolean} allDescendants
 */
CollectionSelector.prototype['allDescendants'] = undefined;

/**
 * The collection ID. When set, selects only collections with this ID.
 * @member {String} collectionId
 */
CollectionSelector.prototype['collectionId'] = undefined;






export default CollectionSelector;

