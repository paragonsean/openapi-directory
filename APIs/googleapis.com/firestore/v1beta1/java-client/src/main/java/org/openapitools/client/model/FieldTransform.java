/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayValue;
import org.openapitools.client.model.Value;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transformation of a field of the document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldTransform {
  public static final String SERIALIZED_NAME_APPEND_MISSING_ELEMENTS = "appendMissingElements";
  @SerializedName(SERIALIZED_NAME_APPEND_MISSING_ELEMENTS)
  private ArrayValue appendMissingElements;

  public static final String SERIALIZED_NAME_FIELD_PATH = "fieldPath";
  @SerializedName(SERIALIZED_NAME_FIELD_PATH)
  private String fieldPath;

  public static final String SERIALIZED_NAME_INCREMENT = "increment";
  @SerializedName(SERIALIZED_NAME_INCREMENT)
  private Value increment;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Value maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Value minimum;

  public static final String SERIALIZED_NAME_REMOVE_ALL_FROM_ARRAY = "removeAllFromArray";
  @SerializedName(SERIALIZED_NAME_REMOVE_ALL_FROM_ARRAY)
  private ArrayValue removeAllFromArray;

  /**
   * Sets the field to the given server value.
   */
  @JsonAdapter(SetToServerValueEnum.Adapter.class)
  public enum SetToServerValueEnum {
    SERVER_VALUE_UNSPECIFIED("SERVER_VALUE_UNSPECIFIED"),
    
    REQUEST_TIME("REQUEST_TIME");

    private String value;

    SetToServerValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SetToServerValueEnum fromValue(String value) {
      for (SetToServerValueEnum b : SetToServerValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SetToServerValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SetToServerValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SetToServerValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SetToServerValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SetToServerValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SET_TO_SERVER_VALUE = "setToServerValue";
  @SerializedName(SERIALIZED_NAME_SET_TO_SERVER_VALUE)
  private SetToServerValueEnum setToServerValue;

  public FieldTransform() {
  }

  public FieldTransform appendMissingElements(ArrayValue appendMissingElements) {
    this.appendMissingElements = appendMissingElements;
    return this;
  }

  /**
   * Get appendMissingElements
   * @return appendMissingElements
   */
  @javax.annotation.Nullable
  public ArrayValue getAppendMissingElements() {
    return appendMissingElements;
  }

  public void setAppendMissingElements(ArrayValue appendMissingElements) {
    this.appendMissingElements = appendMissingElements;
  }


  public FieldTransform fieldPath(String fieldPath) {
    this.fieldPath = fieldPath;
    return this;
  }

  /**
   * The path of the field. See Document.fields for the field path syntax reference.
   * @return fieldPath
   */
  @javax.annotation.Nullable
  public String getFieldPath() {
    return fieldPath;
  }

  public void setFieldPath(String fieldPath) {
    this.fieldPath = fieldPath;
  }


  public FieldTransform increment(Value increment) {
    this.increment = increment;
    return this;
  }

  /**
   * Get increment
   * @return increment
   */
  @javax.annotation.Nullable
  public Value getIncrement() {
    return increment;
  }

  public void setIncrement(Value increment) {
    this.increment = increment;
  }


  public FieldTransform maximum(Value maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Get maximum
   * @return maximum
   */
  @javax.annotation.Nullable
  public Value getMaximum() {
    return maximum;
  }

  public void setMaximum(Value maximum) {
    this.maximum = maximum;
  }


  public FieldTransform minimum(Value minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Get minimum
   * @return minimum
   */
  @javax.annotation.Nullable
  public Value getMinimum() {
    return minimum;
  }

  public void setMinimum(Value minimum) {
    this.minimum = minimum;
  }


  public FieldTransform removeAllFromArray(ArrayValue removeAllFromArray) {
    this.removeAllFromArray = removeAllFromArray;
    return this;
  }

  /**
   * Get removeAllFromArray
   * @return removeAllFromArray
   */
  @javax.annotation.Nullable
  public ArrayValue getRemoveAllFromArray() {
    return removeAllFromArray;
  }

  public void setRemoveAllFromArray(ArrayValue removeAllFromArray) {
    this.removeAllFromArray = removeAllFromArray;
  }


  public FieldTransform setToServerValue(SetToServerValueEnum setToServerValue) {
    this.setToServerValue = setToServerValue;
    return this;
  }

  /**
   * Sets the field to the given server value.
   * @return setToServerValue
   */
  @javax.annotation.Nullable
  public SetToServerValueEnum getSetToServerValue() {
    return setToServerValue;
  }

  public void setSetToServerValue(SetToServerValueEnum setToServerValue) {
    this.setToServerValue = setToServerValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldTransform fieldTransform = (FieldTransform) o;
    return Objects.equals(this.appendMissingElements, fieldTransform.appendMissingElements) &&
        Objects.equals(this.fieldPath, fieldTransform.fieldPath) &&
        Objects.equals(this.increment, fieldTransform.increment) &&
        Objects.equals(this.maximum, fieldTransform.maximum) &&
        Objects.equals(this.minimum, fieldTransform.minimum) &&
        Objects.equals(this.removeAllFromArray, fieldTransform.removeAllFromArray) &&
        Objects.equals(this.setToServerValue, fieldTransform.setToServerValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appendMissingElements, fieldPath, increment, maximum, minimum, removeAllFromArray, setToServerValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldTransform {\n");
    sb.append("    appendMissingElements: ").append(toIndentedString(appendMissingElements)).append("\n");
    sb.append("    fieldPath: ").append(toIndentedString(fieldPath)).append("\n");
    sb.append("    increment: ").append(toIndentedString(increment)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    removeAllFromArray: ").append(toIndentedString(removeAllFromArray)).append("\n");
    sb.append("    setToServerValue: ").append(toIndentedString(setToServerValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appendMissingElements");
    openapiFields.add("fieldPath");
    openapiFields.add("increment");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("removeAllFromArray");
    openapiFields.add("setToServerValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldTransform
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldTransform.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldTransform is not found in the empty JSON string", FieldTransform.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldTransform.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldTransform` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appendMissingElements`
      if (jsonObj.get("appendMissingElements") != null && !jsonObj.get("appendMissingElements").isJsonNull()) {
        ArrayValue.validateJsonElement(jsonObj.get("appendMissingElements"));
      }
      if ((jsonObj.get("fieldPath") != null && !jsonObj.get("fieldPath").isJsonNull()) && !jsonObj.get("fieldPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldPath").toString()));
      }
      // validate the optional field `increment`
      if (jsonObj.get("increment") != null && !jsonObj.get("increment").isJsonNull()) {
        Value.validateJsonElement(jsonObj.get("increment"));
      }
      // validate the optional field `maximum`
      if (jsonObj.get("maximum") != null && !jsonObj.get("maximum").isJsonNull()) {
        Value.validateJsonElement(jsonObj.get("maximum"));
      }
      // validate the optional field `minimum`
      if (jsonObj.get("minimum") != null && !jsonObj.get("minimum").isJsonNull()) {
        Value.validateJsonElement(jsonObj.get("minimum"));
      }
      // validate the optional field `removeAllFromArray`
      if (jsonObj.get("removeAllFromArray") != null && !jsonObj.get("removeAllFromArray").isJsonNull()) {
        ArrayValue.validateJsonElement(jsonObj.get("removeAllFromArray"));
      }
      if ((jsonObj.get("setToServerValue") != null && !jsonObj.get("setToServerValue").isJsonNull()) && !jsonObj.get("setToServerValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setToServerValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setToServerValue").toString()));
      }
      // validate the optional field `setToServerValue`
      if (jsonObj.get("setToServerValue") != null && !jsonObj.get("setToServerValue").isJsonNull()) {
        SetToServerValueEnum.validateJsonElement(jsonObj.get("setToServerValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldTransform.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldTransform' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldTransform> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldTransform.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldTransform>() {
           @Override
           public void write(JsonWriter out, FieldTransform value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldTransform read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldTransform given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldTransform
   * @throws IOException if the JSON string is invalid with respect to FieldTransform
   */
  public static FieldTransform fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldTransform.class);
  }

  /**
   * Convert an instance of FieldTransform to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

