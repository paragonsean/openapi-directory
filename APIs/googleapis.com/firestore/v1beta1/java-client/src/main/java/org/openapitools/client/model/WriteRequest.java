/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Write;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for Firestore.Write. The first request creates a stream, or resumes an existing one from a token. When creating a new stream, the server replies with a response containing only an ID and a token, to use in the next request. When resuming a stream, the server first streams any responses later than the given token, then a response containing only an up-to-date token, to use in the next request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WriteRequest {
  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_STREAM_ID = "streamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public static final String SERIALIZED_NAME_STREAM_TOKEN = "streamToken";
  @SerializedName(SERIALIZED_NAME_STREAM_TOKEN)
  private byte[] streamToken;

  public static final String SERIALIZED_NAME_WRITES = "writes";
  @SerializedName(SERIALIZED_NAME_WRITES)
  private List<Write> writes = new ArrayList<>();

  public WriteRequest() {
  }

  public WriteRequest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public WriteRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels associated with this write request.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public WriteRequest streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public WriteRequest streamToken(byte[] streamToken) {
    this.streamToken = streamToken;
    return this;
  }

  /**
   * A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the &#x60;stream_id&#x60; field. Leave this field unset when creating a new stream.
   * @return streamToken
   */
  @javax.annotation.Nullable
  public byte[] getStreamToken() {
    return streamToken;
  }

  public void setStreamToken(byte[] streamToken) {
    this.streamToken = streamToken;
  }


  public WriteRequest writes(List<Write> writes) {
    this.writes = writes;
    return this;
  }

  public WriteRequest addWritesItem(Write writesItem) {
    if (this.writes == null) {
      this.writes = new ArrayList<>();
    }
    this.writes.add(writesItem);
    return this;
  }

  /**
   * The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.
   * @return writes
   */
  @javax.annotation.Nullable
  public List<Write> getWrites() {
    return writes;
  }

  public void setWrites(List<Write> writes) {
    this.writes = writes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WriteRequest writeRequest = (WriteRequest) o;
    return Objects.equals(this.labels, writeRequest.labels) &&
        Objects.equals(this.streamId, writeRequest.streamId) &&
        Arrays.equals(this.streamToken, writeRequest.streamToken) &&
        Objects.equals(this.writes, writeRequest.writes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labels, streamId, Arrays.hashCode(streamToken), writes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WriteRequest {\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    streamToken: ").append(toIndentedString(streamToken)).append("\n");
    sb.append("    writes: ").append(toIndentedString(writes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labels");
    openapiFields.add("streamId");
    openapiFields.add("streamToken");
    openapiFields.add("writes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WriteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WriteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WriteRequest is not found in the empty JSON string", WriteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WriteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WriteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("streamId") != null && !jsonObj.get("streamId").isJsonNull()) && !jsonObj.get("streamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamId").toString()));
      }
      if (jsonObj.get("writes") != null && !jsonObj.get("writes").isJsonNull()) {
        JsonArray jsonArraywrites = jsonObj.getAsJsonArray("writes");
        if (jsonArraywrites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("writes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `writes` to be an array in the JSON string but got `%s`", jsonObj.get("writes").toString()));
          }

          // validate the optional field `writes` (array)
          for (int i = 0; i < jsonArraywrites.size(); i++) {
            Write.validateJsonElement(jsonArraywrites.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WriteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WriteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WriteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WriteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WriteRequest>() {
           @Override
           public void write(JsonWriter out, WriteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WriteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WriteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WriteRequest
   * @throws IOException if the JSON string is invalid with respect to WriteRequest
   */
  public static WriteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WriteRequest.class);
  }

  /**
   * Convert an instance of WriteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

