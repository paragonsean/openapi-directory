/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A sequence of bits, encoded in a byte array. Each byte in the &#x60;bitmap&#x60; byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The &#x60;padding&#x60; defines the number of bits of the last byte to be ignored as \&quot;padding\&quot;. The values of these \&quot;padding\&quot; bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: &#x60;(bitmap[0] &amp; 0x01) !&#x3D; 0&#x60;. To retrieve the second bit, bit 1, calculate: &#x60;(bitmap[0] &amp; 0x02) !&#x3D; 0&#x60;. To retrieve the third bit, bit 2, calculate: &#x60;(bitmap[0] &amp; 0x04) !&#x3D; 0&#x60;. To retrieve the fourth bit, bit 3, calculate: &#x60;(bitmap[0] &amp; 0x08) !&#x3D; 0&#x60;. To retrieve bit n, calculate: &#x60;(bitmap[n / 8] &amp; (0x01 &lt;&lt; (n % 8))) !&#x3D; 0&#x60;. The \&quot;size\&quot; of a &#x60;BitSequence&#x60; (the number of bits it contains) is calculated by this formula: &#x60;(bitmap.length * 8) - padding&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BitSequence {
  public static final String SERIALIZED_NAME_BITMAP = "bitmap";
  @SerializedName(SERIALIZED_NAME_BITMAP)
  private byte[] bitmap;

  public static final String SERIALIZED_NAME_PADDING = "padding";
  @SerializedName(SERIALIZED_NAME_PADDING)
  private Integer padding;

  public BitSequence() {
  }

  public BitSequence bitmap(byte[] bitmap) {
    this.bitmap = bitmap;
    return this;
  }

  /**
   * The bytes that encode the bit sequence. May have a length of zero.
   * @return bitmap
   */
  @javax.annotation.Nullable
  public byte[] getBitmap() {
    return bitmap;
  }

  public void setBitmap(byte[] bitmap) {
    this.bitmap = bitmap;
  }


  public BitSequence padding(Integer padding) {
    this.padding = padding;
    return this;
  }

  /**
   * The number of bits of the last byte in &#x60;bitmap&#x60; to ignore as \&quot;padding\&quot;. If the length of &#x60;bitmap&#x60; is zero, then this value must be &#x60;0&#x60;. Otherwise, this value must be between 0 and 7, inclusive.
   * @return padding
   */
  @javax.annotation.Nullable
  public Integer getPadding() {
    return padding;
  }

  public void setPadding(Integer padding) {
    this.padding = padding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BitSequence bitSequence = (BitSequence) o;
    return Arrays.equals(this.bitmap, bitSequence.bitmap) &&
        Objects.equals(this.padding, bitSequence.padding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(bitmap), padding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BitSequence {\n");
    sb.append("    bitmap: ").append(toIndentedString(bitmap)).append("\n");
    sb.append("    padding: ").append(toIndentedString(padding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bitmap");
    openapiFields.add("padding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BitSequence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BitSequence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BitSequence is not found in the empty JSON string", BitSequence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BitSequence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BitSequence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BitSequence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BitSequence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BitSequence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BitSequence.class));

       return (TypeAdapter<T>) new TypeAdapter<BitSequence>() {
           @Override
           public void write(JsonWriter out, BitSequence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BitSequence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BitSequence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BitSequence
   * @throws IOException if the JSON string is invalid with respect to BitSequence
   */
  public static BitSequence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BitSequence.class);
  }

  /**
   * Convert an instance of BitSequence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

