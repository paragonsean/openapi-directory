/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StructuredAggregationQuery;
import org.openapitools.client.model.TransactionOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for Firestore.RunAggregationQuery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunAggregationQueryRequest {
  public static final String SERIALIZED_NAME_NEW_TRANSACTION = "newTransaction";
  @SerializedName(SERIALIZED_NAME_NEW_TRANSACTION)
  private TransactionOptions newTransaction;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_STRUCTURED_AGGREGATION_QUERY = "structuredAggregationQuery";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_AGGREGATION_QUERY)
  private StructuredAggregationQuery structuredAggregationQuery;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private byte[] transaction;

  public RunAggregationQueryRequest() {
  }

  public RunAggregationQueryRequest newTransaction(TransactionOptions newTransaction) {
    this.newTransaction = newTransaction;
    return this;
  }

  /**
   * Get newTransaction
   * @return newTransaction
   */
  @javax.annotation.Nullable
  public TransactionOptions getNewTransaction() {
    return newTransaction;
  }

  public void setNewTransaction(TransactionOptions newTransaction) {
    this.newTransaction = newTransaction;
  }


  public RunAggregationQueryRequest readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public RunAggregationQueryRequest structuredAggregationQuery(StructuredAggregationQuery structuredAggregationQuery) {
    this.structuredAggregationQuery = structuredAggregationQuery;
    return this;
  }

  /**
   * Get structuredAggregationQuery
   * @return structuredAggregationQuery
   */
  @javax.annotation.Nullable
  public StructuredAggregationQuery getStructuredAggregationQuery() {
    return structuredAggregationQuery;
  }

  public void setStructuredAggregationQuery(StructuredAggregationQuery structuredAggregationQuery) {
    this.structuredAggregationQuery = structuredAggregationQuery;
  }


  public RunAggregationQueryRequest transaction(byte[] transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.
   * @return transaction
   */
  @javax.annotation.Nullable
  public byte[] getTransaction() {
    return transaction;
  }

  public void setTransaction(byte[] transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunAggregationQueryRequest runAggregationQueryRequest = (RunAggregationQueryRequest) o;
    return Objects.equals(this.newTransaction, runAggregationQueryRequest.newTransaction) &&
        Objects.equals(this.readTime, runAggregationQueryRequest.readTime) &&
        Objects.equals(this.structuredAggregationQuery, runAggregationQueryRequest.structuredAggregationQuery) &&
        Arrays.equals(this.transaction, runAggregationQueryRequest.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newTransaction, readTime, structuredAggregationQuery, Arrays.hashCode(transaction));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunAggregationQueryRequest {\n");
    sb.append("    newTransaction: ").append(toIndentedString(newTransaction)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    structuredAggregationQuery: ").append(toIndentedString(structuredAggregationQuery)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newTransaction");
    openapiFields.add("readTime");
    openapiFields.add("structuredAggregationQuery");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunAggregationQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunAggregationQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunAggregationQueryRequest is not found in the empty JSON string", RunAggregationQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunAggregationQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunAggregationQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `newTransaction`
      if (jsonObj.get("newTransaction") != null && !jsonObj.get("newTransaction").isJsonNull()) {
        TransactionOptions.validateJsonElement(jsonObj.get("newTransaction"));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
      // validate the optional field `structuredAggregationQuery`
      if (jsonObj.get("structuredAggregationQuery") != null && !jsonObj.get("structuredAggregationQuery").isJsonNull()) {
        StructuredAggregationQuery.validateJsonElement(jsonObj.get("structuredAggregationQuery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunAggregationQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunAggregationQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunAggregationQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunAggregationQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunAggregationQueryRequest>() {
           @Override
           public void write(JsonWriter out, RunAggregationQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunAggregationQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunAggregationQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunAggregationQueryRequest
   * @throws IOException if the JSON string is invalid with respect to RunAggregationQueryRequest
   */
  public static RunAggregationQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunAggregationQueryRequest.class);
  }

  /**
   * Convert an instance of RunAggregationQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

