/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WriteResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for Firestore.Write.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WriteResponse {
  public static final String SERIALIZED_NAME_COMMIT_TIME = "commitTime";
  @SerializedName(SERIALIZED_NAME_COMMIT_TIME)
  private String commitTime;

  public static final String SERIALIZED_NAME_STREAM_ID = "streamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public static final String SERIALIZED_NAME_STREAM_TOKEN = "streamToken";
  @SerializedName(SERIALIZED_NAME_STREAM_TOKEN)
  private byte[] streamToken;

  public static final String SERIALIZED_NAME_WRITE_RESULTS = "writeResults";
  @SerializedName(SERIALIZED_NAME_WRITE_RESULTS)
  private List<WriteResult> writeResults = new ArrayList<>();

  public WriteResponse() {
  }

  public WriteResponse commitTime(String commitTime) {
    this.commitTime = commitTime;
    return this;
  }

  /**
   * The time at which the commit occurred. Any read with an equal or greater &#x60;read_time&#x60; is guaranteed to see the effects of the write.
   * @return commitTime
   */
  @javax.annotation.Nullable
  public String getCommitTime() {
    return commitTime;
  }

  public void setCommitTime(String commitTime) {
    this.commitTime = commitTime;
  }


  public WriteResponse streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * The ID of the stream. Only set on the first message, when a new stream was created.
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public WriteResponse streamToken(byte[] streamToken) {
    this.streamToken = streamToken;
    return this;
  }

  /**
   * A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set.
   * @return streamToken
   */
  @javax.annotation.Nullable
  public byte[] getStreamToken() {
    return streamToken;
  }

  public void setStreamToken(byte[] streamToken) {
    this.streamToken = streamToken;
  }


  public WriteResponse writeResults(List<WriteResult> writeResults) {
    this.writeResults = writeResults;
    return this;
  }

  public WriteResponse addWriteResultsItem(WriteResult writeResultsItem) {
    if (this.writeResults == null) {
      this.writeResults = new ArrayList<>();
    }
    this.writeResults.add(writeResultsItem);
    return this;
  }

  /**
   * The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
   * @return writeResults
   */
  @javax.annotation.Nullable
  public List<WriteResult> getWriteResults() {
    return writeResults;
  }

  public void setWriteResults(List<WriteResult> writeResults) {
    this.writeResults = writeResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WriteResponse writeResponse = (WriteResponse) o;
    return Objects.equals(this.commitTime, writeResponse.commitTime) &&
        Objects.equals(this.streamId, writeResponse.streamId) &&
        Arrays.equals(this.streamToken, writeResponse.streamToken) &&
        Objects.equals(this.writeResults, writeResponse.writeResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitTime, streamId, Arrays.hashCode(streamToken), writeResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WriteResponse {\n");
    sb.append("    commitTime: ").append(toIndentedString(commitTime)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    streamToken: ").append(toIndentedString(streamToken)).append("\n");
    sb.append("    writeResults: ").append(toIndentedString(writeResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitTime");
    openapiFields.add("streamId");
    openapiFields.add("streamToken");
    openapiFields.add("writeResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WriteResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WriteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WriteResponse is not found in the empty JSON string", WriteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WriteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WriteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitTime") != null && !jsonObj.get("commitTime").isJsonNull()) && !jsonObj.get("commitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitTime").toString()));
      }
      if ((jsonObj.get("streamId") != null && !jsonObj.get("streamId").isJsonNull()) && !jsonObj.get("streamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamId").toString()));
      }
      if (jsonObj.get("writeResults") != null && !jsonObj.get("writeResults").isJsonNull()) {
        JsonArray jsonArraywriteResults = jsonObj.getAsJsonArray("writeResults");
        if (jsonArraywriteResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("writeResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `writeResults` to be an array in the JSON string but got `%s`", jsonObj.get("writeResults").toString()));
          }

          // validate the optional field `writeResults` (array)
          for (int i = 0; i < jsonArraywriteResults.size(); i++) {
            WriteResult.validateJsonElement(jsonArraywriteResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WriteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WriteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WriteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WriteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WriteResponse>() {
           @Override
           public void write(JsonWriter out, WriteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WriteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WriteResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WriteResponse
   * @throws IOException if the JSON string is invalid with respect to WriteResponse
   */
  public static WriteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WriteResponse.class);
  }

  /**
   * Convert an instance of WriteResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

