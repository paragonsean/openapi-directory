/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CollectionSelector;
import org.openapitools.client.model.Cursor;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.Projection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Firestore query. The query stages are executed in the following order: 1. from 2. where 3. select 4. order_by + start_at + end_at 5. offset 6. limit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StructuredQuery {
  public static final String SERIALIZED_NAME_END_AT = "endAt";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private Cursor endAt;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private List<CollectionSelector> from = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private List<Order> orderBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECT = "select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  private Projection select;

  public static final String SERIALIZED_NAME_START_AT = "startAt";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private Cursor startAt;

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private Filter where;

  public StructuredQuery() {
  }

  public StructuredQuery endAt(Cursor endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * Get endAt
   * @return endAt
   */
  @javax.annotation.Nullable
  public Cursor getEndAt() {
    return endAt;
  }

  public void setEndAt(Cursor endAt) {
    this.endAt = endAt;
  }


  public StructuredQuery from(List<CollectionSelector> from) {
    this.from = from;
    return this;
  }

  public StructuredQuery addFromItem(CollectionSelector fromItem) {
    if (this.from == null) {
      this.from = new ArrayList<>();
    }
    this.from.add(fromItem);
    return this;
  }

  /**
   * The collections to query.
   * @return from
   */
  @javax.annotation.Nullable
  public List<CollectionSelector> getFrom() {
    return from;
  }

  public void setFrom(List<CollectionSelector> from) {
    this.from = from;
  }


  public StructuredQuery limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public StructuredQuery offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of documents to skip before returning the first result. This applies after the constraints specified by the &#x60;WHERE&#x60;, &#x60;START AT&#x60;, &amp; &#x60;END AT&#x60; but before the &#x60;LIMIT&#x60; clause. Requires: * The value must be greater than or equal to zero if specified.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public StructuredQuery orderBy(List<Order> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public StructuredQuery addOrderByItem(Order orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

  /**
   * The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The &#x60;order_by&#x60; is required to reference all fields used with an inequality filter. * All fields that are required to be in the &#x60;order_by&#x60; but are not already present are appended in lexicographical ordering of the field name. * If an order on &#x60;__name__&#x60; is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or &#39;ASCENDING&#39; if no order was specified. For example: * &#x60;ORDER BY a&#x60; becomes &#x60;ORDER BY a ASC, __name__ ASC&#x60; * &#x60;ORDER BY a DESC&#x60; becomes &#x60;ORDER BY a DESC, __name__ DESC&#x60; * &#x60;WHERE a &gt; 1&#x60; becomes &#x60;WHERE a &gt; 1 ORDER BY a ASC, __name__ ASC&#x60; * &#x60;WHERE __name__ &gt; ... AND a &gt; 1&#x60; becomes &#x60;WHERE __name__ &gt; ... AND a &gt; 1 ORDER BY a ASC, __name__ ASC&#x60;
   * @return orderBy
   */
  @javax.annotation.Nullable
  public List<Order> getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(List<Order> orderBy) {
    this.orderBy = orderBy;
  }


  public StructuredQuery select(Projection select) {
    this.select = select;
    return this;
  }

  /**
   * Get select
   * @return select
   */
  @javax.annotation.Nullable
  public Projection getSelect() {
    return select;
  }

  public void setSelect(Projection select) {
    this.select = select;
  }


  public StructuredQuery startAt(Cursor startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * Get startAt
   * @return startAt
   */
  @javax.annotation.Nullable
  public Cursor getStartAt() {
    return startAt;
  }

  public void setStartAt(Cursor startAt) {
    this.startAt = startAt;
  }


  public StructuredQuery where(Filter where) {
    this.where = where;
    return this;
  }

  /**
   * Get where
   * @return where
   */
  @javax.annotation.Nullable
  public Filter getWhere() {
    return where;
  }

  public void setWhere(Filter where) {
    this.where = where;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StructuredQuery structuredQuery = (StructuredQuery) o;
    return Objects.equals(this.endAt, structuredQuery.endAt) &&
        Objects.equals(this.from, structuredQuery.from) &&
        Objects.equals(this.limit, structuredQuery.limit) &&
        Objects.equals(this.offset, structuredQuery.offset) &&
        Objects.equals(this.orderBy, structuredQuery.orderBy) &&
        Objects.equals(this.select, structuredQuery.select) &&
        Objects.equals(this.startAt, structuredQuery.startAt) &&
        Objects.equals(this.where, structuredQuery.where);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endAt, from, limit, offset, orderBy, select, startAt, where);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StructuredQuery {\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endAt");
    openapiFields.add("from");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("orderBy");
    openapiFields.add("select");
    openapiFields.add("startAt");
    openapiFields.add("where");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StructuredQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StructuredQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StructuredQuery is not found in the empty JSON string", StructuredQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StructuredQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StructuredQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endAt`
      if (jsonObj.get("endAt") != null && !jsonObj.get("endAt").isJsonNull()) {
        Cursor.validateJsonElement(jsonObj.get("endAt"));
      }
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        JsonArray jsonArrayfrom = jsonObj.getAsJsonArray("from");
        if (jsonArrayfrom != null) {
          // ensure the json data is an array
          if (!jsonObj.get("from").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `from` to be an array in the JSON string but got `%s`", jsonObj.get("from").toString()));
          }

          // validate the optional field `from` (array)
          for (int i = 0; i < jsonArrayfrom.size(); i++) {
            CollectionSelector.validateJsonElement(jsonArrayfrom.get(i));
          };
        }
      }
      if (jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) {
        JsonArray jsonArrayorderBy = jsonObj.getAsJsonArray("orderBy");
        if (jsonArrayorderBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBy` to be an array in the JSON string but got `%s`", jsonObj.get("orderBy").toString()));
          }

          // validate the optional field `orderBy` (array)
          for (int i = 0; i < jsonArrayorderBy.size(); i++) {
            Order.validateJsonElement(jsonArrayorderBy.get(i));
          };
        }
      }
      // validate the optional field `select`
      if (jsonObj.get("select") != null && !jsonObj.get("select").isJsonNull()) {
        Projection.validateJsonElement(jsonObj.get("select"));
      }
      // validate the optional field `startAt`
      if (jsonObj.get("startAt") != null && !jsonObj.get("startAt").isJsonNull()) {
        Cursor.validateJsonElement(jsonObj.get("startAt"));
      }
      // validate the optional field `where`
      if (jsonObj.get("where") != null && !jsonObj.get("where").isJsonNull()) {
        Filter.validateJsonElement(jsonObj.get("where"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StructuredQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StructuredQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StructuredQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StructuredQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<StructuredQuery>() {
           @Override
           public void write(JsonWriter out, StructuredQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StructuredQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StructuredQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StructuredQuery
   * @throws IOException if the JSON string is invalid with respect to StructuredQuery
   */
  public static StructuredQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StructuredQuery.class);
  }

  /**
   * Convert an instance of StructuredQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

