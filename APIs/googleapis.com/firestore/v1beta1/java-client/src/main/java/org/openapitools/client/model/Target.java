/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DocumentsTarget;
import org.openapitools.client.model.QueryTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specification of a set of documents to listen to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Target {
  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private DocumentsTarget documents;

  public static final String SERIALIZED_NAME_EXPECTED_COUNT = "expectedCount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_COUNT)
  private Integer expectedCount;

  public static final String SERIALIZED_NAME_ONCE = "once";
  @SerializedName(SERIALIZED_NAME_ONCE)
  private Boolean once;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private QueryTarget query;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_RESUME_TOKEN = "resumeToken";
  @SerializedName(SERIALIZED_NAME_RESUME_TOKEN)
  private byte[] resumeToken;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private Integer targetId;

  public Target() {
  }

  public Target documents(DocumentsTarget documents) {
    this.documents = documents;
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public DocumentsTarget getDocuments() {
    return documents;
  }

  public void setDocuments(DocumentsTarget documents) {
    this.documents = documents;
  }


  public Target expectedCount(Integer expectedCount) {
    this.expectedCount = expectedCount;
    return this;
  }

  /**
   * The number of documents that last matched the query at the resume token or read time. This value is only relevant when a &#x60;resume_type&#x60; is provided. This value being present and greater than zero signals that the client wants &#x60;ExistenceFilter.unchanged_names&#x60; to be included in the response.
   * @return expectedCount
   */
  @javax.annotation.Nullable
  public Integer getExpectedCount() {
    return expectedCount;
  }

  public void setExpectedCount(Integer expectedCount) {
    this.expectedCount = expectedCount;
  }


  public Target once(Boolean once) {
    this.once = once;
    return this;
  }

  /**
   * If the target should be removed once it is current and consistent.
   * @return once
   */
  @javax.annotation.Nullable
  public Boolean getOnce() {
    return once;
  }

  public void setOnce(Boolean once) {
    this.once = once;
  }


  public Target query(QueryTarget query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public QueryTarget getQuery() {
    return query;
  }

  public void setQuery(QueryTarget query) {
    this.query = query;
  }


  public Target readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * Start listening after a specific &#x60;read_time&#x60;. The client must know the state of matching documents at this time.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public Target resumeToken(byte[] resumeToken) {
    this.resumeToken = resumeToken;
    return this;
  }

  /**
   * A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.
   * @return resumeToken
   */
  @javax.annotation.Nullable
  public byte[] getResumeToken() {
    return resumeToken;
  }

  public void setResumeToken(byte[] resumeToken) {
    this.resumeToken = resumeToken;
  }


  public Target targetId(Integer targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * The target ID that identifies the target on the stream. Must be a positive number and non-zero. If &#x60;target_id&#x60; is 0 (or unspecified), the server will assign an ID for this target and return that in a &#x60;TargetChange::ADD&#x60; event. Once a target with &#x60;target_id&#x3D;0&#x60; is added, all subsequent targets must also have &#x60;target_id&#x3D;0&#x60;. If an &#x60;AddTarget&#x60; request with &#x60;target_id !&#x3D; 0&#x60; is sent to the server after a target with &#x60;target_id&#x3D;0&#x60; is added, the server will immediately send a response with a &#x60;TargetChange::Remove&#x60; event. Note that if the client sends multiple &#x60;AddTarget&#x60; requests without an ID, the order of IDs returned in &#x60;TargetChage.target_ids&#x60; are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If &#x60;target_id&#x60; is non-zero, there must not be an existing active target on this stream with the same ID.
   * @return targetId
   */
  @javax.annotation.Nullable
  public Integer getTargetId() {
    return targetId;
  }

  public void setTargetId(Integer targetId) {
    this.targetId = targetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Target target = (Target) o;
    return Objects.equals(this.documents, target.documents) &&
        Objects.equals(this.expectedCount, target.expectedCount) &&
        Objects.equals(this.once, target.once) &&
        Objects.equals(this.query, target.query) &&
        Objects.equals(this.readTime, target.readTime) &&
        Arrays.equals(this.resumeToken, target.resumeToken) &&
        Objects.equals(this.targetId, target.targetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documents, expectedCount, once, query, readTime, Arrays.hashCode(resumeToken), targetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Target {\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    expectedCount: ").append(toIndentedString(expectedCount)).append("\n");
    sb.append("    once: ").append(toIndentedString(once)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    resumeToken: ").append(toIndentedString(resumeToken)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documents");
    openapiFields.add("expectedCount");
    openapiFields.add("once");
    openapiFields.add("query");
    openapiFields.add("readTime");
    openapiFields.add("resumeToken");
    openapiFields.add("targetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Target
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Target.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Target is not found in the empty JSON string", Target.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Target.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Target` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `documents`
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        DocumentsTarget.validateJsonElement(jsonObj.get("documents"));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        QueryTarget.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Target.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Target' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Target> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Target.class));

       return (TypeAdapter<T>) new TypeAdapter<Target>() {
           @Override
           public void write(JsonWriter out, Target value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Target read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Target given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Target
   * @throws IOException if the JSON string is invalid with respect to Target
   */
  public static Target fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Target.class);
  }

  /**
   * Convert an instance of Target to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

