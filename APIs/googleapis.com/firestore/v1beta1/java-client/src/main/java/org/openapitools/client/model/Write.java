/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentMask;
import org.openapitools.client.model.DocumentTransform;
import org.openapitools.client.model.FieldTransform;
import org.openapitools.client.model.Precondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A write on a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:28.364880-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Write {
  public static final String SERIALIZED_NAME_CURRENT_DOCUMENT = "currentDocument";
  @SerializedName(SERIALIZED_NAME_CURRENT_DOCUMENT)
  private Precondition currentDocument;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private String delete;

  public static final String SERIALIZED_NAME_TRANSFORM = "transform";
  @SerializedName(SERIALIZED_NAME_TRANSFORM)
  private DocumentTransform transform;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private Document update;

  public static final String SERIALIZED_NAME_UPDATE_MASK = "updateMask";
  @SerializedName(SERIALIZED_NAME_UPDATE_MASK)
  private DocumentMask updateMask;

  public static final String SERIALIZED_NAME_UPDATE_TRANSFORMS = "updateTransforms";
  @SerializedName(SERIALIZED_NAME_UPDATE_TRANSFORMS)
  private List<FieldTransform> updateTransforms = new ArrayList<>();

  public Write() {
  }

  public Write currentDocument(Precondition currentDocument) {
    this.currentDocument = currentDocument;
    return this;
  }

  /**
   * Get currentDocument
   * @return currentDocument
   */
  @javax.annotation.Nullable
  public Precondition getCurrentDocument() {
    return currentDocument;
  }

  public void setCurrentDocument(Precondition currentDocument) {
    this.currentDocument = currentDocument;
  }


  public Write delete(String delete) {
    this.delete = delete;
    return this;
  }

  /**
   * A document name to delete. In the format: &#x60;projects/{project_id}/databases/{database_id}/documents/{document_path}&#x60;.
   * @return delete
   */
  @javax.annotation.Nullable
  public String getDelete() {
    return delete;
  }

  public void setDelete(String delete) {
    this.delete = delete;
  }


  public Write transform(DocumentTransform transform) {
    this.transform = transform;
    return this;
  }

  /**
   * Get transform
   * @return transform
   */
  @javax.annotation.Nullable
  public DocumentTransform getTransform() {
    return transform;
  }

  public void setTransform(DocumentTransform transform) {
    this.transform = transform;
  }


  public Write update(Document update) {
    this.update = update;
    return this;
  }

  /**
   * Get update
   * @return update
   */
  @javax.annotation.Nullable
  public Document getUpdate() {
    return update;
  }

  public void setUpdate(Document update) {
    this.update = update;
  }


  public Write updateMask(DocumentMask updateMask) {
    this.updateMask = updateMask;
    return this;
  }

  /**
   * Get updateMask
   * @return updateMask
   */
  @javax.annotation.Nullable
  public DocumentMask getUpdateMask() {
    return updateMask;
  }

  public void setUpdateMask(DocumentMask updateMask) {
    this.updateMask = updateMask;
  }


  public Write updateTransforms(List<FieldTransform> updateTransforms) {
    this.updateTransforms = updateTransforms;
    return this;
  }

  public Write addUpdateTransformsItem(FieldTransform updateTransformsItem) {
    if (this.updateTransforms == null) {
      this.updateTransforms = new ArrayList<>();
    }
    this.updateTransforms.add(updateTransformsItem);
    return this;
  }

  /**
   * The transforms to perform after update. This field can be set only when the operation is &#x60;update&#x60;. If present, this write is equivalent to performing &#x60;update&#x60; and &#x60;transform&#x60; to the same document atomically and in order.
   * @return updateTransforms
   */
  @javax.annotation.Nullable
  public List<FieldTransform> getUpdateTransforms() {
    return updateTransforms;
  }

  public void setUpdateTransforms(List<FieldTransform> updateTransforms) {
    this.updateTransforms = updateTransforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Write write = (Write) o;
    return Objects.equals(this.currentDocument, write.currentDocument) &&
        Objects.equals(this.delete, write.delete) &&
        Objects.equals(this.transform, write.transform) &&
        Objects.equals(this.update, write.update) &&
        Objects.equals(this.updateMask, write.updateMask) &&
        Objects.equals(this.updateTransforms, write.updateTransforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentDocument, delete, transform, update, updateMask, updateTransforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Write {\n");
    sb.append("    currentDocument: ").append(toIndentedString(currentDocument)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    updateMask: ").append(toIndentedString(updateMask)).append("\n");
    sb.append("    updateTransforms: ").append(toIndentedString(updateTransforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentDocument");
    openapiFields.add("delete");
    openapiFields.add("transform");
    openapiFields.add("update");
    openapiFields.add("updateMask");
    openapiFields.add("updateTransforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Write
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Write.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Write is not found in the empty JSON string", Write.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Write.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Write` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentDocument`
      if (jsonObj.get("currentDocument") != null && !jsonObj.get("currentDocument").isJsonNull()) {
        Precondition.validateJsonElement(jsonObj.get("currentDocument"));
      }
      if ((jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) && !jsonObj.get("delete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete").toString()));
      }
      // validate the optional field `transform`
      if (jsonObj.get("transform") != null && !jsonObj.get("transform").isJsonNull()) {
        DocumentTransform.validateJsonElement(jsonObj.get("transform"));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        Document.validateJsonElement(jsonObj.get("update"));
      }
      // validate the optional field `updateMask`
      if (jsonObj.get("updateMask") != null && !jsonObj.get("updateMask").isJsonNull()) {
        DocumentMask.validateJsonElement(jsonObj.get("updateMask"));
      }
      if (jsonObj.get("updateTransforms") != null && !jsonObj.get("updateTransforms").isJsonNull()) {
        JsonArray jsonArrayupdateTransforms = jsonObj.getAsJsonArray("updateTransforms");
        if (jsonArrayupdateTransforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("updateTransforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `updateTransforms` to be an array in the JSON string but got `%s`", jsonObj.get("updateTransforms").toString()));
          }

          // validate the optional field `updateTransforms` (array)
          for (int i = 0; i < jsonArrayupdateTransforms.size(); i++) {
            FieldTransform.validateJsonElement(jsonArrayupdateTransforms.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Write.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Write' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Write> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Write.class));

       return (TypeAdapter<T>) new TypeAdapter<Write>() {
           @Override
           public void write(JsonWriter out, Write value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Write read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Write given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Write
   * @throws IOException if the JSON string is invalid with respect to Write
   */
  public static Write fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Write.class);
  }

  /**
   * Convert an instance of Write to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

