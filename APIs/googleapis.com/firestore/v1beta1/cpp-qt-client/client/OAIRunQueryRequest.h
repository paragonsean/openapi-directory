/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRunQueryRequest.h
 *
 * The request for Firestore.RunQuery.
 */

#ifndef OAIRunQueryRequest_H
#define OAIRunQueryRequest_H

#include <QJsonObject>

#include "OAIStructuredQuery.h"
#include "OAITransactionOptions.h"
#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITransactionOptions;
class OAIStructuredQuery;

class OAIRunQueryRequest : public OAIObject {
public:
    OAIRunQueryRequest();
    OAIRunQueryRequest(QString json);
    ~OAIRunQueryRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITransactionOptions getNewTransaction() const;
    void setNewTransaction(const OAITransactionOptions &new_transaction);
    bool is_new_transaction_Set() const;
    bool is_new_transaction_Valid() const;

    QString getReadTime() const;
    void setReadTime(const QString &read_time);
    bool is_read_time_Set() const;
    bool is_read_time_Valid() const;

    OAIStructuredQuery getStructuredQuery() const;
    void setStructuredQuery(const OAIStructuredQuery &structured_query);
    bool is_structured_query_Set() const;
    bool is_structured_query_Valid() const;

    QByteArray getTransaction() const;
    void setTransaction(const QByteArray &transaction);
    bool is_transaction_Set() const;
    bool is_transaction_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITransactionOptions m_new_transaction;
    bool m_new_transaction_isSet;
    bool m_new_transaction_isValid;

    QString m_read_time;
    bool m_read_time_isSet;
    bool m_read_time_isValid;

    OAIStructuredQuery m_structured_query;
    bool m_structured_query_isSet;
    bool m_structured_query_isValid;

    QByteArray m_transaction;
    bool m_transaction_isSet;
    bool m_transaction_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRunQueryRequest)

#endif // OAIRunQueryRequest_H
