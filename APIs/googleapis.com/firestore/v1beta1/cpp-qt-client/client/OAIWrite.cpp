/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWrite::OAIWrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWrite::OAIWrite() {
    this->initializeModel();
}

OAIWrite::~OAIWrite() {}

void OAIWrite::initializeModel() {

    m_current_document_isSet = false;
    m_current_document_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_transform_isSet = false;
    m_transform_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;

    m_update_transforms_isSet = false;
    m_update_transforms_isValid = false;
}

void OAIWrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWrite::fromJsonObject(QJsonObject json) {

    m_current_document_isValid = ::OpenAPI::fromJsonValue(m_current_document, json[QString("currentDocument")]);
    m_current_document_isSet = !json[QString("currentDocument")].isNull() && m_current_document_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_transform_isValid = ::OpenAPI::fromJsonValue(m_transform, json[QString("transform")]);
    m_transform_isSet = !json[QString("transform")].isNull() && m_transform_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;

    m_update_transforms_isValid = ::OpenAPI::fromJsonValue(m_update_transforms, json[QString("updateTransforms")]);
    m_update_transforms_isSet = !json[QString("updateTransforms")].isNull() && m_update_transforms_isValid;
}

QString OAIWrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWrite::asJsonObject() const {
    QJsonObject obj;
    if (m_current_document.isSet()) {
        obj.insert(QString("currentDocument"), ::OpenAPI::toJsonValue(m_current_document));
    }
    if (m_r_delete_isSet) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_transform.isSet()) {
        obj.insert(QString("transform"), ::OpenAPI::toJsonValue(m_transform));
    }
    if (m_update.isSet()) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    if (m_update_mask.isSet()) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    if (m_update_transforms.size() > 0) {
        obj.insert(QString("updateTransforms"), ::OpenAPI::toJsonValue(m_update_transforms));
    }
    return obj;
}

OAIPrecondition OAIWrite::getCurrentDocument() const {
    return m_current_document;
}
void OAIWrite::setCurrentDocument(const OAIPrecondition &current_document) {
    m_current_document = current_document;
    m_current_document_isSet = true;
}

bool OAIWrite::is_current_document_Set() const{
    return m_current_document_isSet;
}

bool OAIWrite::is_current_document_Valid() const{
    return m_current_document_isValid;
}

QString OAIWrite::getRDelete() const {
    return m_r_delete;
}
void OAIWrite::setRDelete(const QString &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIWrite::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIWrite::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

OAIDocumentTransform OAIWrite::getTransform() const {
    return m_transform;
}
void OAIWrite::setTransform(const OAIDocumentTransform &transform) {
    m_transform = transform;
    m_transform_isSet = true;
}

bool OAIWrite::is_transform_Set() const{
    return m_transform_isSet;
}

bool OAIWrite::is_transform_Valid() const{
    return m_transform_isValid;
}

OAIDocument OAIWrite::getUpdate() const {
    return m_update;
}
void OAIWrite::setUpdate(const OAIDocument &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAIWrite::is_update_Set() const{
    return m_update_isSet;
}

bool OAIWrite::is_update_Valid() const{
    return m_update_isValid;
}

OAIDocumentMask OAIWrite::getUpdateMask() const {
    return m_update_mask;
}
void OAIWrite::setUpdateMask(const OAIDocumentMask &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIWrite::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIWrite::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

QList<OAIFieldTransform> OAIWrite::getUpdateTransforms() const {
    return m_update_transforms;
}
void OAIWrite::setUpdateTransforms(const QList<OAIFieldTransform> &update_transforms) {
    m_update_transforms = update_transforms;
    m_update_transforms_isSet = true;
}

bool OAIWrite::is_update_transforms_Set() const{
    return m_update_transforms_isSet;
}

bool OAIWrite::is_update_transforms_Valid() const{
    return m_update_transforms_isValid;
}

bool OAIWrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_transforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
