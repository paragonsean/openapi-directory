/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBloomFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBloomFilter::OAIBloomFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBloomFilter::OAIBloomFilter() {
    this->initializeModel();
}

OAIBloomFilter::~OAIBloomFilter() {}

void OAIBloomFilter::initializeModel() {

    m_bits_isSet = false;
    m_bits_isValid = false;

    m_hash_count_isSet = false;
    m_hash_count_isValid = false;
}

void OAIBloomFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBloomFilter::fromJsonObject(QJsonObject json) {

    m_bits_isValid = ::OpenAPI::fromJsonValue(m_bits, json[QString("bits")]);
    m_bits_isSet = !json[QString("bits")].isNull() && m_bits_isValid;

    m_hash_count_isValid = ::OpenAPI::fromJsonValue(m_hash_count, json[QString("hashCount")]);
    m_hash_count_isSet = !json[QString("hashCount")].isNull() && m_hash_count_isValid;
}

QString OAIBloomFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBloomFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_bits.isSet()) {
        obj.insert(QString("bits"), ::OpenAPI::toJsonValue(m_bits));
    }
    if (m_hash_count_isSet) {
        obj.insert(QString("hashCount"), ::OpenAPI::toJsonValue(m_hash_count));
    }
    return obj;
}

OAIBitSequence OAIBloomFilter::getBits() const {
    return m_bits;
}
void OAIBloomFilter::setBits(const OAIBitSequence &bits) {
    m_bits = bits;
    m_bits_isSet = true;
}

bool OAIBloomFilter::is_bits_Set() const{
    return m_bits_isSet;
}

bool OAIBloomFilter::is_bits_Valid() const{
    return m_bits_isValid;
}

qint32 OAIBloomFilter::getHashCount() const {
    return m_hash_count;
}
void OAIBloomFilter::setHashCount(const qint32 &hash_count) {
    m_hash_count = hash_count;
    m_hash_count_isSet = true;
}

bool OAIBloomFilter::is_hash_count_Set() const{
    return m_hash_count_isSet;
}

bool OAIBloomFilter::is_hash_count_Valid() const{
    return m_hash_count_isValid;
}

bool OAIBloomFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBloomFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
