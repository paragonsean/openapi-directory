/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentTransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentTransform::OAIDocumentTransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentTransform::OAIDocumentTransform() {
    this->initializeModel();
}

OAIDocumentTransform::~OAIDocumentTransform() {}

void OAIDocumentTransform::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_field_transforms_isSet = false;
    m_field_transforms_isValid = false;
}

void OAIDocumentTransform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentTransform::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_field_transforms_isValid = ::OpenAPI::fromJsonValue(m_field_transforms, json[QString("fieldTransforms")]);
    m_field_transforms_isSet = !json[QString("fieldTransforms")].isNull() && m_field_transforms_isValid;
}

QString OAIDocumentTransform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentTransform::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_field_transforms.size() > 0) {
        obj.insert(QString("fieldTransforms"), ::OpenAPI::toJsonValue(m_field_transforms));
    }
    return obj;
}

QString OAIDocumentTransform::getDocument() const {
    return m_document;
}
void OAIDocumentTransform::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIDocumentTransform::is_document_Set() const{
    return m_document_isSet;
}

bool OAIDocumentTransform::is_document_Valid() const{
    return m_document_isValid;
}

QList<OAIFieldTransform> OAIDocumentTransform::getFieldTransforms() const {
    return m_field_transforms;
}
void OAIDocumentTransform::setFieldTransforms(const QList<OAIFieldTransform> &field_transforms) {
    m_field_transforms = field_transforms;
    m_field_transforms_isSet = true;
}

bool OAIDocumentTransform::is_field_transforms_Set() const{
    return m_field_transforms_isSet;
}

bool OAIDocumentTransform::is_field_transforms_Valid() const{
    return m_field_transforms_isValid;
}

bool OAIDocumentTransform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_transforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentTransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
