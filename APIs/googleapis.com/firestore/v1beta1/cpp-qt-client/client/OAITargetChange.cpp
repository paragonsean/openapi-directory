/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetChange::OAITargetChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetChange::OAITargetChange() {
    this->initializeModel();
}

OAITargetChange::~OAITargetChange() {}

void OAITargetChange::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_resume_token_isSet = false;
    m_resume_token_isValid = false;

    m_target_change_type_isSet = false;
    m_target_change_type_isValid = false;

    m_target_ids_isSet = false;
    m_target_ids_isValid = false;
}

void OAITargetChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetChange::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_resume_token_isValid = ::OpenAPI::fromJsonValue(m_resume_token, json[QString("resumeToken")]);
    m_resume_token_isSet = !json[QString("resumeToken")].isNull() && m_resume_token_isValid;

    m_target_change_type_isValid = ::OpenAPI::fromJsonValue(m_target_change_type, json[QString("targetChangeType")]);
    m_target_change_type_isSet = !json[QString("targetChangeType")].isNull() && m_target_change_type_isValid;

    m_target_ids_isValid = ::OpenAPI::fromJsonValue(m_target_ids, json[QString("targetIds")]);
    m_target_ids_isSet = !json[QString("targetIds")].isNull() && m_target_ids_isValid;
}

QString OAITargetChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetChange::asJsonObject() const {
    QJsonObject obj;
    if (m_cause.isSet()) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_resume_token_isSet) {
        obj.insert(QString("resumeToken"), ::OpenAPI::toJsonValue(m_resume_token));
    }
    if (m_target_change_type_isSet) {
        obj.insert(QString("targetChangeType"), ::OpenAPI::toJsonValue(m_target_change_type));
    }
    if (m_target_ids.size() > 0) {
        obj.insert(QString("targetIds"), ::OpenAPI::toJsonValue(m_target_ids));
    }
    return obj;
}

OAIStatus OAITargetChange::getCause() const {
    return m_cause;
}
void OAITargetChange::setCause(const OAIStatus &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAITargetChange::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAITargetChange::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAITargetChange::getReadTime() const {
    return m_read_time;
}
void OAITargetChange::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAITargetChange::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAITargetChange::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QByteArray OAITargetChange::getResumeToken() const {
    return m_resume_token;
}
void OAITargetChange::setResumeToken(const QByteArray &resume_token) {
    m_resume_token = resume_token;
    m_resume_token_isSet = true;
}

bool OAITargetChange::is_resume_token_Set() const{
    return m_resume_token_isSet;
}

bool OAITargetChange::is_resume_token_Valid() const{
    return m_resume_token_isValid;
}

QString OAITargetChange::getTargetChangeType() const {
    return m_target_change_type;
}
void OAITargetChange::setTargetChangeType(const QString &target_change_type) {
    m_target_change_type = target_change_type;
    m_target_change_type_isSet = true;
}

bool OAITargetChange::is_target_change_type_Set() const{
    return m_target_change_type_isSet;
}

bool OAITargetChange::is_target_change_type_Valid() const{
    return m_target_change_type_isValid;
}

QList<qint32> OAITargetChange::getTargetIds() const {
    return m_target_ids;
}
void OAITargetChange::setTargetIds(const QList<qint32> &target_ids) {
    m_target_ids = target_ids;
    m_target_ids_isSet = true;
}

bool OAITargetChange::is_target_ids_Set() const{
    return m_target_ids_isSet;
}

bool OAITargetChange::is_target_ids_Valid() const{
    return m_target_ids_isValid;
}

bool OAITargetChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
