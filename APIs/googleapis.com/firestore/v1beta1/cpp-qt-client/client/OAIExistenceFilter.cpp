/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExistenceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExistenceFilter::OAIExistenceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExistenceFilter::OAIExistenceFilter() {
    this->initializeModel();
}

OAIExistenceFilter::~OAIExistenceFilter() {}

void OAIExistenceFilter::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_unchanged_names_isSet = false;
    m_unchanged_names_isValid = false;
}

void OAIExistenceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExistenceFilter::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_unchanged_names_isValid = ::OpenAPI::fromJsonValue(m_unchanged_names, json[QString("unchangedNames")]);
    m_unchanged_names_isSet = !json[QString("unchangedNames")].isNull() && m_unchanged_names_isValid;
}

QString OAIExistenceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExistenceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_unchanged_names.isSet()) {
        obj.insert(QString("unchangedNames"), ::OpenAPI::toJsonValue(m_unchanged_names));
    }
    return obj;
}

qint32 OAIExistenceFilter::getCount() const {
    return m_count;
}
void OAIExistenceFilter::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIExistenceFilter::is_count_Set() const{
    return m_count_isSet;
}

bool OAIExistenceFilter::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIExistenceFilter::getTargetId() const {
    return m_target_id;
}
void OAIExistenceFilter::setTargetId(const qint32 &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIExistenceFilter::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIExistenceFilter::is_target_id_Valid() const{
    return m_target_id_isValid;
}

OAIBloomFilter OAIExistenceFilter::getUnchangedNames() const {
    return m_unchanged_names;
}
void OAIExistenceFilter::setUnchangedNames(const OAIBloomFilter &unchanged_names) {
    m_unchanged_names = unchanged_names;
    m_unchanged_names_isSet = true;
}

bool OAIExistenceFilter::is_unchanged_names_Set() const{
    return m_unchanged_names_isSet;
}

bool OAIExistenceFilter::is_unchanged_names_Valid() const{
    return m_unchanged_names_isValid;
}

bool OAIExistenceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unchanged_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExistenceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
