/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunAggregationQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunAggregationQueryResponse::OAIRunAggregationQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunAggregationQueryResponse::OAIRunAggregationQueryResponse() {
    this->initializeModel();
}

OAIRunAggregationQueryResponse::~OAIRunAggregationQueryResponse() {}

void OAIRunAggregationQueryResponse::initializeModel() {

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIRunAggregationQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunAggregationQueryResponse::fromJsonObject(QJsonObject json) {

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIRunAggregationQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunAggregationQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QString OAIRunAggregationQueryResponse::getReadTime() const {
    return m_read_time;
}
void OAIRunAggregationQueryResponse::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIRunAggregationQueryResponse::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIRunAggregationQueryResponse::is_read_time_Valid() const{
    return m_read_time_isValid;
}

OAIAggregationResult OAIRunAggregationQueryResponse::getResult() const {
    return m_result;
}
void OAIRunAggregationQueryResponse::setResult(const OAIAggregationResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIRunAggregationQueryResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIRunAggregationQueryResponse::is_result_Valid() const{
    return m_result_isValid;
}

QByteArray OAIRunAggregationQueryResponse::getTransaction() const {
    return m_transaction;
}
void OAIRunAggregationQueryResponse::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIRunAggregationQueryResponse::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIRunAggregationQueryResponse::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIRunAggregationQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunAggregationQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
