/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_composite_filter_isSet = false;
    m_composite_filter_isValid = false;

    m_field_filter_isSet = false;
    m_field_filter_isValid = false;

    m_unary_filter_isSet = false;
    m_unary_filter_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_composite_filter_isValid = ::OpenAPI::fromJsonValue(m_composite_filter, json[QString("compositeFilter")]);
    m_composite_filter_isSet = !json[QString("compositeFilter")].isNull() && m_composite_filter_isValid;

    m_field_filter_isValid = ::OpenAPI::fromJsonValue(m_field_filter, json[QString("fieldFilter")]);
    m_field_filter_isSet = !json[QString("fieldFilter")].isNull() && m_field_filter_isValid;

    m_unary_filter_isValid = ::OpenAPI::fromJsonValue(m_unary_filter, json[QString("unaryFilter")]);
    m_unary_filter_isSet = !json[QString("unaryFilter")].isNull() && m_unary_filter_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_composite_filter.isSet()) {
        obj.insert(QString("compositeFilter"), ::OpenAPI::toJsonValue(m_composite_filter));
    }
    if (m_field_filter.isSet()) {
        obj.insert(QString("fieldFilter"), ::OpenAPI::toJsonValue(m_field_filter));
    }
    if (m_unary_filter.isSet()) {
        obj.insert(QString("unaryFilter"), ::OpenAPI::toJsonValue(m_unary_filter));
    }
    return obj;
}

OAICompositeFilter OAIFilter::getCompositeFilter() const {
    return m_composite_filter;
}
void OAIFilter::setCompositeFilter(const OAICompositeFilter &composite_filter) {
    m_composite_filter = composite_filter;
    m_composite_filter_isSet = true;
}

bool OAIFilter::is_composite_filter_Set() const{
    return m_composite_filter_isSet;
}

bool OAIFilter::is_composite_filter_Valid() const{
    return m_composite_filter_isValid;
}

OAIFieldFilter OAIFilter::getFieldFilter() const {
    return m_field_filter;
}
void OAIFilter::setFieldFilter(const OAIFieldFilter &field_filter) {
    m_field_filter = field_filter;
    m_field_filter_isSet = true;
}

bool OAIFilter::is_field_filter_Set() const{
    return m_field_filter_isSet;
}

bool OAIFilter::is_field_filter_Valid() const{
    return m_field_filter_isValid;
}

OAIUnaryFilter OAIFilter::getUnaryFilter() const {
    return m_unary_filter;
}
void OAIFilter::setUnaryFilter(const OAIUnaryFilter &unary_filter) {
    m_unary_filter = unary_filter;
    m_unary_filter_isSet = true;
}

bool OAIFilter::is_unary_filter_Set() const{
    return m_unary_filter_isSet;
}

bool OAIFilter::is_unary_filter_Valid() const{
    return m_unary_filter_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_composite_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unary_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
