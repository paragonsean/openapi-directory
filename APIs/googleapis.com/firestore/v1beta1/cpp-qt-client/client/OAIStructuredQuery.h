/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStructuredQuery.h
 *
 * A Firestore query. The query stages are executed in the following order: 1. from 2. where 3. select 4. order_by + start_at + end_at 5. offset 6. limit
 */

#ifndef OAIStructuredQuery_H
#define OAIStructuredQuery_H

#include <QJsonObject>

#include "OAICollectionSelector.h"
#include "OAICursor.h"
#include "OAIFilter.h"
#include "OAIOrder.h"
#include "OAIProjection.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICursor;
class OAICollectionSelector;
class OAIOrder;
class OAIProjection;
class OAIFilter;

class OAIStructuredQuery : public OAIObject {
public:
    OAIStructuredQuery();
    OAIStructuredQuery(QString json);
    ~OAIStructuredQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICursor getEndAt() const;
    void setEndAt(const OAICursor &end_at);
    bool is_end_at_Set() const;
    bool is_end_at_Valid() const;

    QList<OAICollectionSelector> getFrom() const;
    void setFrom(const QList<OAICollectionSelector> &from);
    bool is_from_Set() const;
    bool is_from_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<OAIOrder> getOrderBy() const;
    void setOrderBy(const QList<OAIOrder> &order_by);
    bool is_order_by_Set() const;
    bool is_order_by_Valid() const;

    OAIProjection getSelect() const;
    void setSelect(const OAIProjection &select);
    bool is_select_Set() const;
    bool is_select_Valid() const;

    OAICursor getStartAt() const;
    void setStartAt(const OAICursor &start_at);
    bool is_start_at_Set() const;
    bool is_start_at_Valid() const;

    OAIFilter getWhere() const;
    void setWhere(const OAIFilter &where);
    bool is_where_Set() const;
    bool is_where_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICursor m_end_at;
    bool m_end_at_isSet;
    bool m_end_at_isValid;

    QList<OAICollectionSelector> m_from;
    bool m_from_isSet;
    bool m_from_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<OAIOrder> m_order_by;
    bool m_order_by_isSet;
    bool m_order_by_isValid;

    OAIProjection m_select;
    bool m_select_isSet;
    bool m_select_isValid;

    OAICursor m_start_at;
    bool m_start_at_isSet;
    bool m_start_at_isValid;

    OAIFilter m_where;
    bool m_where_isSet;
    bool m_where_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStructuredQuery)

#endif // OAIStructuredQuery_H
