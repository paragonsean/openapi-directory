/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionQueryRequest::OAIPartitionQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionQueryRequest::OAIPartitionQueryRequest() {
    this->initializeModel();
}

OAIPartitionQueryRequest::~OAIPartitionQueryRequest() {}

void OAIPartitionQueryRequest::initializeModel() {

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_partition_count_isSet = false;
    m_partition_count_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_structured_query_isSet = false;
    m_structured_query_isValid = false;
}

void OAIPartitionQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionQueryRequest::fromJsonObject(QJsonObject json) {

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_partition_count_isValid = ::OpenAPI::fromJsonValue(m_partition_count, json[QString("partitionCount")]);
    m_partition_count_isSet = !json[QString("partitionCount")].isNull() && m_partition_count_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_structured_query_isValid = ::OpenAPI::fromJsonValue(m_structured_query, json[QString("structuredQuery")]);
    m_structured_query_isSet = !json[QString("structuredQuery")].isNull() && m_structured_query_isValid;
}

QString OAIPartitionQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_partition_count_isSet) {
        obj.insert(QString("partitionCount"), ::OpenAPI::toJsonValue(m_partition_count));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_structured_query.isSet()) {
        obj.insert(QString("structuredQuery"), ::OpenAPI::toJsonValue(m_structured_query));
    }
    return obj;
}

qint32 OAIPartitionQueryRequest::getPageSize() const {
    return m_page_size;
}
void OAIPartitionQueryRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPartitionQueryRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPartitionQueryRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIPartitionQueryRequest::getPageToken() const {
    return m_page_token;
}
void OAIPartitionQueryRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIPartitionQueryRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIPartitionQueryRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIPartitionQueryRequest::getPartitionCount() const {
    return m_partition_count;
}
void OAIPartitionQueryRequest::setPartitionCount(const QString &partition_count) {
    m_partition_count = partition_count;
    m_partition_count_isSet = true;
}

bool OAIPartitionQueryRequest::is_partition_count_Set() const{
    return m_partition_count_isSet;
}

bool OAIPartitionQueryRequest::is_partition_count_Valid() const{
    return m_partition_count_isValid;
}

QString OAIPartitionQueryRequest::getReadTime() const {
    return m_read_time;
}
void OAIPartitionQueryRequest::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIPartitionQueryRequest::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIPartitionQueryRequest::is_read_time_Valid() const{
    return m_read_time_isValid;
}

OAIStructuredQuery OAIPartitionQueryRequest::getStructuredQuery() const {
    return m_structured_query;
}
void OAIPartitionQueryRequest::setStructuredQuery(const OAIStructuredQuery &structured_query) {
    m_structured_query = structured_query;
    m_structured_query_isSet = true;
}

bool OAIPartitionQueryRequest::is_structured_query_Set() const{
    return m_structured_query_isSet;
}

bool OAIPartitionQueryRequest::is_structured_query_Valid() const{
    return m_structured_query_isValid;
}

bool OAIPartitionQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
