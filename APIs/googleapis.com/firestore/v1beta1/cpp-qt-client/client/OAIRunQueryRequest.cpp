/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunQueryRequest::OAIRunQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunQueryRequest::OAIRunQueryRequest() {
    this->initializeModel();
}

OAIRunQueryRequest::~OAIRunQueryRequest() {}

void OAIRunQueryRequest::initializeModel() {

    m_new_transaction_isSet = false;
    m_new_transaction_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_structured_query_isSet = false;
    m_structured_query_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIRunQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunQueryRequest::fromJsonObject(QJsonObject json) {

    m_new_transaction_isValid = ::OpenAPI::fromJsonValue(m_new_transaction, json[QString("newTransaction")]);
    m_new_transaction_isSet = !json[QString("newTransaction")].isNull() && m_new_transaction_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_structured_query_isValid = ::OpenAPI::fromJsonValue(m_structured_query, json[QString("structuredQuery")]);
    m_structured_query_isSet = !json[QString("structuredQuery")].isNull() && m_structured_query_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIRunQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_new_transaction.isSet()) {
        obj.insert(QString("newTransaction"), ::OpenAPI::toJsonValue(m_new_transaction));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_structured_query.isSet()) {
        obj.insert(QString("structuredQuery"), ::OpenAPI::toJsonValue(m_structured_query));
    }
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

OAITransactionOptions OAIRunQueryRequest::getNewTransaction() const {
    return m_new_transaction;
}
void OAIRunQueryRequest::setNewTransaction(const OAITransactionOptions &new_transaction) {
    m_new_transaction = new_transaction;
    m_new_transaction_isSet = true;
}

bool OAIRunQueryRequest::is_new_transaction_Set() const{
    return m_new_transaction_isSet;
}

bool OAIRunQueryRequest::is_new_transaction_Valid() const{
    return m_new_transaction_isValid;
}

QString OAIRunQueryRequest::getReadTime() const {
    return m_read_time;
}
void OAIRunQueryRequest::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIRunQueryRequest::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIRunQueryRequest::is_read_time_Valid() const{
    return m_read_time_isValid;
}

OAIStructuredQuery OAIRunQueryRequest::getStructuredQuery() const {
    return m_structured_query;
}
void OAIRunQueryRequest::setStructuredQuery(const OAIStructuredQuery &structured_query) {
    m_structured_query = structured_query;
    m_structured_query_isSet = true;
}

bool OAIRunQueryRequest::is_structured_query_Set() const{
    return m_structured_query_isSet;
}

bool OAIRunQueryRequest::is_structured_query_Valid() const{
    return m_structured_query_isValid;
}

QByteArray OAIRunQueryRequest::getTransaction() const {
    return m_transaction;
}
void OAIRunQueryRequest::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIRunQueryRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIRunQueryRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIRunQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
