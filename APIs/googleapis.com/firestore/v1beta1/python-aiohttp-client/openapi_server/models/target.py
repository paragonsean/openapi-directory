# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.documents_target import DocumentsTarget
from openapi_server.models.query_target import QueryTarget
from openapi_server import util


class Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: DocumentsTarget=None, expected_count: int=None, once: bool=None, query: QueryTarget=None, read_time: str=None, resume_token: str=None, target_id: int=None):
        """Target - a model defined in OpenAPI

        :param documents: The documents of this Target.
        :param expected_count: The expected_count of this Target.
        :param once: The once of this Target.
        :param query: The query of this Target.
        :param read_time: The read_time of this Target.
        :param resume_token: The resume_token of this Target.
        :param target_id: The target_id of this Target.
        """
        self.openapi_types = {
            'documents': DocumentsTarget,
            'expected_count': int,
            'once': bool,
            'query': QueryTarget,
            'read_time': str,
            'resume_token': str,
            'target_id': int
        }

        self.attribute_map = {
            'documents': 'documents',
            'expected_count': 'expectedCount',
            'once': 'once',
            'query': 'query',
            'read_time': 'readTime',
            'resume_token': 'resumeToken',
            'target_id': 'targetId'
        }

        self._documents = documents
        self._expected_count = expected_count
        self._once = once
        self._query = query
        self._read_time = read_time
        self._resume_token = resume_token
        self._target_id = target_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target of this Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this Target.


        :return: The documents of this Target.
        :rtype: DocumentsTarget
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Target.


        :param documents: The documents of this Target.
        :type documents: DocumentsTarget
        """

        self._documents = documents

    @property
    def expected_count(self):
        """Gets the expected_count of this Target.

        The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.

        :return: The expected_count of this Target.
        :rtype: int
        """
        return self._expected_count

    @expected_count.setter
    def expected_count(self, expected_count):
        """Sets the expected_count of this Target.

        The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.

        :param expected_count: The expected_count of this Target.
        :type expected_count: int
        """

        self._expected_count = expected_count

    @property
    def once(self):
        """Gets the once of this Target.

        If the target should be removed once it is current and consistent.

        :return: The once of this Target.
        :rtype: bool
        """
        return self._once

    @once.setter
    def once(self, once):
        """Sets the once of this Target.

        If the target should be removed once it is current and consistent.

        :param once: The once of this Target.
        :type once: bool
        """

        self._once = once

    @property
    def query(self):
        """Gets the query of this Target.


        :return: The query of this Target.
        :rtype: QueryTarget
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Target.


        :param query: The query of this Target.
        :type query: QueryTarget
        """

        self._query = query

    @property
    def read_time(self):
        """Gets the read_time of this Target.

        Start listening after a specific `read_time`. The client must know the state of matching documents at this time.

        :return: The read_time of this Target.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this Target.

        Start listening after a specific `read_time`. The client must know the state of matching documents at this time.

        :param read_time: The read_time of this Target.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def resume_token(self):
        """Gets the resume_token of this Target.

        A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.

        :return: The resume_token of this Target.
        :rtype: str
        """
        return self._resume_token

    @resume_token.setter
    def resume_token(self, resume_token):
        """Sets the resume_token of this Target.

        A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.

        :param resume_token: The resume_token of this Target.
        :type resume_token: str
        """

        self._resume_token = resume_token

    @property
    def target_id(self):
        """Gets the target_id of this Target.

        The target ID that identifies the target on the stream. Must be a positive number and non-zero. If `target_id` is 0 (or unspecified), the server will assign an ID for this target and return that in a `TargetChange::ADD` event. Once a target with `target_id=0` is added, all subsequent targets must also have `target_id=0`. If an `AddTarget` request with `target_id != 0` is sent to the server after a target with `target_id=0` is added, the server will immediately send a response with a `TargetChange::Remove` event. Note that if the client sends multiple `AddTarget` requests without an ID, the order of IDs returned in `TargetChage.target_ids` are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If `target_id` is non-zero, there must not be an existing active target on this stream with the same ID.

        :return: The target_id of this Target.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Target.

        The target ID that identifies the target on the stream. Must be a positive number and non-zero. If `target_id` is 0 (or unspecified), the server will assign an ID for this target and return that in a `TargetChange::ADD` event. Once a target with `target_id=0` is added, all subsequent targets must also have `target_id=0`. If an `AddTarget` request with `target_id != 0` is sent to the server after a target with `target_id=0` is added, the server will immediately send a response with a `TargetChange::Remove` event. Note that if the client sends multiple `AddTarget` requests without an ID, the order of IDs returned in `TargetChage.target_ids` are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If `target_id` is non-zero, there must not be an existing active target on this stream with the same ID.

        :param target_id: The target_id of this Target.
        :type target_id: int
        """

        self._target_id = target_id
