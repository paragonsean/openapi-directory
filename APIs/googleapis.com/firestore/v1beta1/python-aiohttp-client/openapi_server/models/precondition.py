# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Precondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exists: bool=None, update_time: str=None):
        """Precondition - a model defined in OpenAPI

        :param exists: The exists of this Precondition.
        :param update_time: The update_time of this Precondition.
        """
        self.openapi_types = {
            'exists': bool,
            'update_time': str
        }

        self.attribute_map = {
            'exists': 'exists',
            'update_time': 'updateTime'
        }

        self._exists = exists
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Precondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Precondition of this Precondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exists(self):
        """Gets the exists of this Precondition.

        When set to `true`, the target document must exist. When set to `false`, the target document must not exist.

        :return: The exists of this Precondition.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this Precondition.

        When set to `true`, the target document must exist. When set to `false`, the target document must not exist.

        :param exists: The exists of this Precondition.
        :type exists: bool
        """

        self._exists = exists

    @property
    def update_time(self):
        """Gets the update_time of this Precondition.

        When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.

        :return: The update_time of this Precondition.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Precondition.

        When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.

        :param update_time: The update_time of this Precondition.
        :type update_time: str
        """

        self._update_time = update_time
