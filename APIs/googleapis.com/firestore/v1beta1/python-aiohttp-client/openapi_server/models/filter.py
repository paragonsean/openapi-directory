# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composite_filter import CompositeFilter
from openapi_server.models.field_filter import FieldFilter
from openapi_server.models.unary_filter import UnaryFilter
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, composite_filter: CompositeFilter=None, field_filter: FieldFilter=None, unary_filter: UnaryFilter=None):
        """Filter - a model defined in OpenAPI

        :param composite_filter: The composite_filter of this Filter.
        :param field_filter: The field_filter of this Filter.
        :param unary_filter: The unary_filter of this Filter.
        """
        self.openapi_types = {
            'composite_filter': CompositeFilter,
            'field_filter': FieldFilter,
            'unary_filter': UnaryFilter
        }

        self.attribute_map = {
            'composite_filter': 'compositeFilter',
            'field_filter': 'fieldFilter',
            'unary_filter': 'unaryFilter'
        }

        self._composite_filter = composite_filter
        self._field_filter = field_filter
        self._unary_filter = unary_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def composite_filter(self):
        """Gets the composite_filter of this Filter.


        :return: The composite_filter of this Filter.
        :rtype: CompositeFilter
        """
        return self._composite_filter

    @composite_filter.setter
    def composite_filter(self, composite_filter):
        """Sets the composite_filter of this Filter.


        :param composite_filter: The composite_filter of this Filter.
        :type composite_filter: CompositeFilter
        """

        self._composite_filter = composite_filter

    @property
    def field_filter(self):
        """Gets the field_filter of this Filter.


        :return: The field_filter of this Filter.
        :rtype: FieldFilter
        """
        return self._field_filter

    @field_filter.setter
    def field_filter(self, field_filter):
        """Sets the field_filter of this Filter.


        :param field_filter: The field_filter of this Filter.
        :type field_filter: FieldFilter
        """

        self._field_filter = field_filter

    @property
    def unary_filter(self):
        """Gets the unary_filter of this Filter.


        :return: The unary_filter of this Filter.
        :rtype: UnaryFilter
        """
        return self._unary_filter

    @unary_filter.setter
    def unary_filter(self, unary_filter):
        """Sets the unary_filter of this Filter.


        :param unary_filter: The unary_filter of this Filter.
        :type unary_filter: UnaryFilter
        """

        self._unary_filter = unary_filter
