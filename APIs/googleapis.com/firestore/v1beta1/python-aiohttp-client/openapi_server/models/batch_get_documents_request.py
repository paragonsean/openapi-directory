# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_mask import DocumentMask
from openapi_server.models.transaction_options import TransactionOptions
from openapi_server import util


class BatchGetDocumentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[str]=None, mask: DocumentMask=None, new_transaction: TransactionOptions=None, read_time: str=None, transaction: str=None):
        """BatchGetDocumentsRequest - a model defined in OpenAPI

        :param documents: The documents of this BatchGetDocumentsRequest.
        :param mask: The mask of this BatchGetDocumentsRequest.
        :param new_transaction: The new_transaction of this BatchGetDocumentsRequest.
        :param read_time: The read_time of this BatchGetDocumentsRequest.
        :param transaction: The transaction of this BatchGetDocumentsRequest.
        """
        self.openapi_types = {
            'documents': List[str],
            'mask': DocumentMask,
            'new_transaction': TransactionOptions,
            'read_time': str,
            'transaction': str
        }

        self.attribute_map = {
            'documents': 'documents',
            'mask': 'mask',
            'new_transaction': 'newTransaction',
            'read_time': 'readTime',
            'transaction': 'transaction'
        }

        self._documents = documents
        self._mask = mask
        self._new_transaction = new_transaction
        self._read_time = read_time
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetDocumentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetDocumentsRequest of this BatchGetDocumentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this BatchGetDocumentsRequest.

        The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.

        :return: The documents of this BatchGetDocumentsRequest.
        :rtype: List[str]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this BatchGetDocumentsRequest.

        The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.

        :param documents: The documents of this BatchGetDocumentsRequest.
        :type documents: List[str]
        """

        self._documents = documents

    @property
    def mask(self):
        """Gets the mask of this BatchGetDocumentsRequest.


        :return: The mask of this BatchGetDocumentsRequest.
        :rtype: DocumentMask
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this BatchGetDocumentsRequest.


        :param mask: The mask of this BatchGetDocumentsRequest.
        :type mask: DocumentMask
        """

        self._mask = mask

    @property
    def new_transaction(self):
        """Gets the new_transaction of this BatchGetDocumentsRequest.


        :return: The new_transaction of this BatchGetDocumentsRequest.
        :rtype: TransactionOptions
        """
        return self._new_transaction

    @new_transaction.setter
    def new_transaction(self, new_transaction):
        """Sets the new_transaction of this BatchGetDocumentsRequest.


        :param new_transaction: The new_transaction of this BatchGetDocumentsRequest.
        :type new_transaction: TransactionOptions
        """

        self._new_transaction = new_transaction

    @property
    def read_time(self):
        """Gets the read_time of this BatchGetDocumentsRequest.

        Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :return: The read_time of this BatchGetDocumentsRequest.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this BatchGetDocumentsRequest.

        Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :param read_time: The read_time of this BatchGetDocumentsRequest.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def transaction(self):
        """Gets the transaction of this BatchGetDocumentsRequest.

        Reads documents in a transaction.

        :return: The transaction of this BatchGetDocumentsRequest.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this BatchGetDocumentsRequest.

        Reads documents in a transaction.

        :param transaction: The transaction of this BatchGetDocumentsRequest.
        :type transaction: str
        """

        self._transaction = transaction
