# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server.models.structured_query import StructuredQuery
from openapi_server import util


class StructuredAggregationQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregations: List[Aggregation]=None, structured_query: StructuredQuery=None):
        """StructuredAggregationQuery - a model defined in OpenAPI

        :param aggregations: The aggregations of this StructuredAggregationQuery.
        :param structured_query: The structured_query of this StructuredAggregationQuery.
        """
        self.openapi_types = {
            'aggregations': List[Aggregation],
            'structured_query': StructuredQuery
        }

        self.attribute_map = {
            'aggregations': 'aggregations',
            'structured_query': 'structuredQuery'
        }

        self._aggregations = aggregations
        self._structured_query = structured_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StructuredAggregationQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StructuredAggregationQuery of this StructuredAggregationQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregations(self):
        """Gets the aggregations of this StructuredAggregationQuery.

        Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query.

        :return: The aggregations of this StructuredAggregationQuery.
        :rtype: List[Aggregation]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this StructuredAggregationQuery.

        Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query.

        :param aggregations: The aggregations of this StructuredAggregationQuery.
        :type aggregations: List[Aggregation]
        """

        self._aggregations = aggregations

    @property
    def structured_query(self):
        """Gets the structured_query of this StructuredAggregationQuery.


        :return: The structured_query of this StructuredAggregationQuery.
        :rtype: StructuredQuery
        """
        return self._structured_query

    @structured_query.setter
    def structured_query(self, structured_query):
        """Sets the structured_query of this StructuredAggregationQuery.


        :param structured_query: The structured_query of this StructuredAggregationQuery.
        :type structured_query: StructuredQuery
        """

        self._structured_query = structured_query
