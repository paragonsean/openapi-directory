# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_descendants: bool=None, collection_id: str=None):
        """CollectionSelector - a model defined in OpenAPI

        :param all_descendants: The all_descendants of this CollectionSelector.
        :param collection_id: The collection_id of this CollectionSelector.
        """
        self.openapi_types = {
            'all_descendants': bool,
            'collection_id': str
        }

        self.attribute_map = {
            'all_descendants': 'allDescendants',
            'collection_id': 'collectionId'
        }

        self._all_descendants = all_descendants
        self._collection_id = collection_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionSelector of this CollectionSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_descendants(self):
        """Gets the all_descendants of this CollectionSelector.

        When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.

        :return: The all_descendants of this CollectionSelector.
        :rtype: bool
        """
        return self._all_descendants

    @all_descendants.setter
    def all_descendants(self, all_descendants):
        """Sets the all_descendants of this CollectionSelector.

        When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.

        :param all_descendants: The all_descendants of this CollectionSelector.
        :type all_descendants: bool
        """

        self._all_descendants = all_descendants

    @property
    def collection_id(self):
        """Gets the collection_id of this CollectionSelector.

        The collection ID. When set, selects only collections with this ID.

        :return: The collection_id of this CollectionSelector.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this CollectionSelector.

        The collection ID. When set, selects only collections with this ID.

        :param collection_id: The collection_id of this CollectionSelector.
        :type collection_id: str
        """

        self._collection_id = collection_id
