# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document import Document
from openapi_server.models.document_mask import DocumentMask
from openapi_server.models.document_transform import DocumentTransform
from openapi_server.models.field_transform import FieldTransform
from openapi_server.models.precondition import Precondition
from openapi_server import util


class Write(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_document: Precondition=None, delete: str=None, transform: DocumentTransform=None, update: Document=None, update_mask: DocumentMask=None, update_transforms: List[FieldTransform]=None):
        """Write - a model defined in OpenAPI

        :param current_document: The current_document of this Write.
        :param delete: The delete of this Write.
        :param transform: The transform of this Write.
        :param update: The update of this Write.
        :param update_mask: The update_mask of this Write.
        :param update_transforms: The update_transforms of this Write.
        """
        self.openapi_types = {
            'current_document': Precondition,
            'delete': str,
            'transform': DocumentTransform,
            'update': Document,
            'update_mask': DocumentMask,
            'update_transforms': List[FieldTransform]
        }

        self.attribute_map = {
            'current_document': 'currentDocument',
            'delete': 'delete',
            'transform': 'transform',
            'update': 'update',
            'update_mask': 'updateMask',
            'update_transforms': 'updateTransforms'
        }

        self._current_document = current_document
        self._delete = delete
        self._transform = transform
        self._update = update
        self._update_mask = update_mask
        self._update_transforms = update_transforms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Write':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Write of this Write.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_document(self):
        """Gets the current_document of this Write.


        :return: The current_document of this Write.
        :rtype: Precondition
        """
        return self._current_document

    @current_document.setter
    def current_document(self, current_document):
        """Sets the current_document of this Write.


        :param current_document: The current_document of this Write.
        :type current_document: Precondition
        """

        self._current_document = current_document

    @property
    def delete(self):
        """Gets the delete of this Write.

        A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

        :return: The delete of this Write.
        :rtype: str
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this Write.

        A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

        :param delete: The delete of this Write.
        :type delete: str
        """

        self._delete = delete

    @property
    def transform(self):
        """Gets the transform of this Write.


        :return: The transform of this Write.
        :rtype: DocumentTransform
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this Write.


        :param transform: The transform of this Write.
        :type transform: DocumentTransform
        """

        self._transform = transform

    @property
    def update(self):
        """Gets the update of this Write.


        :return: The update of this Write.
        :rtype: Document
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Write.


        :param update: The update of this Write.
        :type update: Document
        """

        self._update = update

    @property
    def update_mask(self):
        """Gets the update_mask of this Write.


        :return: The update_mask of this Write.
        :rtype: DocumentMask
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this Write.


        :param update_mask: The update_mask of this Write.
        :type update_mask: DocumentMask
        """

        self._update_mask = update_mask

    @property
    def update_transforms(self):
        """Gets the update_transforms of this Write.

        The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.

        :return: The update_transforms of this Write.
        :rtype: List[FieldTransform]
        """
        return self._update_transforms

    @update_transforms.setter
    def update_transforms(self, update_transforms):
        """Sets the update_transforms of this Write.

        The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.

        :param update_transforms: The update_transforms of this Write.
        :type update_transforms: List[FieldTransform]
        """

        self._update_transforms = update_transforms
