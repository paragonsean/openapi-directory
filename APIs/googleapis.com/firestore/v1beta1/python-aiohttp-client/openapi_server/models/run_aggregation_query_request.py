# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.structured_aggregation_query import StructuredAggregationQuery
from openapi_server.models.transaction_options import TransactionOptions
from openapi_server import util


class RunAggregationQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_transaction: TransactionOptions=None, read_time: str=None, structured_aggregation_query: StructuredAggregationQuery=None, transaction: str=None):
        """RunAggregationQueryRequest - a model defined in OpenAPI

        :param new_transaction: The new_transaction of this RunAggregationQueryRequest.
        :param read_time: The read_time of this RunAggregationQueryRequest.
        :param structured_aggregation_query: The structured_aggregation_query of this RunAggregationQueryRequest.
        :param transaction: The transaction of this RunAggregationQueryRequest.
        """
        self.openapi_types = {
            'new_transaction': TransactionOptions,
            'read_time': str,
            'structured_aggregation_query': StructuredAggregationQuery,
            'transaction': str
        }

        self.attribute_map = {
            'new_transaction': 'newTransaction',
            'read_time': 'readTime',
            'structured_aggregation_query': 'structuredAggregationQuery',
            'transaction': 'transaction'
        }

        self._new_transaction = new_transaction
        self._read_time = read_time
        self._structured_aggregation_query = structured_aggregation_query
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunAggregationQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunAggregationQueryRequest of this RunAggregationQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_transaction(self):
        """Gets the new_transaction of this RunAggregationQueryRequest.


        :return: The new_transaction of this RunAggregationQueryRequest.
        :rtype: TransactionOptions
        """
        return self._new_transaction

    @new_transaction.setter
    def new_transaction(self, new_transaction):
        """Sets the new_transaction of this RunAggregationQueryRequest.


        :param new_transaction: The new_transaction of this RunAggregationQueryRequest.
        :type new_transaction: TransactionOptions
        """

        self._new_transaction = new_transaction

    @property
    def read_time(self):
        """Gets the read_time of this RunAggregationQueryRequest.

        Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :return: The read_time of this RunAggregationQueryRequest.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this RunAggregationQueryRequest.

        Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :param read_time: The read_time of this RunAggregationQueryRequest.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def structured_aggregation_query(self):
        """Gets the structured_aggregation_query of this RunAggregationQueryRequest.


        :return: The structured_aggregation_query of this RunAggregationQueryRequest.
        :rtype: StructuredAggregationQuery
        """
        return self._structured_aggregation_query

    @structured_aggregation_query.setter
    def structured_aggregation_query(self, structured_aggregation_query):
        """Sets the structured_aggregation_query of this RunAggregationQueryRequest.


        :param structured_aggregation_query: The structured_aggregation_query of this RunAggregationQueryRequest.
        :type structured_aggregation_query: StructuredAggregationQuery
        """

        self._structured_aggregation_query = structured_aggregation_query

    @property
    def transaction(self):
        """Gets the transaction of this RunAggregationQueryRequest.

        Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.

        :return: The transaction of this RunAggregationQueryRequest.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this RunAggregationQueryRequest.

        Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.

        :param transaction: The transaction of this RunAggregationQueryRequest.
        :type transaction: str
        """

        self._transaction = transaction
