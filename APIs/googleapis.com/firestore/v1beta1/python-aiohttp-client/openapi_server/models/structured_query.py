# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collection_selector import CollectionSelector
from openapi_server.models.cursor import Cursor
from openapi_server.models.filter import Filter
from openapi_server.models.order import Order
from openapi_server.models.projection import Projection
from openapi_server import util


class StructuredQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_at: Cursor=None, _from: List[CollectionSelector]=None, limit: int=None, offset: int=None, order_by: List[Order]=None, select: Projection=None, start_at: Cursor=None, where: Filter=None):
        """StructuredQuery - a model defined in OpenAPI

        :param end_at: The end_at of this StructuredQuery.
        :param _from: The _from of this StructuredQuery.
        :param limit: The limit of this StructuredQuery.
        :param offset: The offset of this StructuredQuery.
        :param order_by: The order_by of this StructuredQuery.
        :param select: The select of this StructuredQuery.
        :param start_at: The start_at of this StructuredQuery.
        :param where: The where of this StructuredQuery.
        """
        self.openapi_types = {
            'end_at': Cursor,
            '_from': List[CollectionSelector],
            'limit': int,
            'offset': int,
            'order_by': List[Order],
            'select': Projection,
            'start_at': Cursor,
            'where': Filter
        }

        self.attribute_map = {
            'end_at': 'endAt',
            '_from': 'from',
            'limit': 'limit',
            'offset': 'offset',
            'order_by': 'orderBy',
            'select': 'select',
            'start_at': 'startAt',
            'where': 'where'
        }

        self._end_at = end_at
        self.__from = _from
        self._limit = limit
        self._offset = offset
        self._order_by = order_by
        self._select = select
        self._start_at = start_at
        self._where = where

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StructuredQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StructuredQuery of this StructuredQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_at(self):
        """Gets the end_at of this StructuredQuery.


        :return: The end_at of this StructuredQuery.
        :rtype: Cursor
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this StructuredQuery.


        :param end_at: The end_at of this StructuredQuery.
        :type end_at: Cursor
        """

        self._end_at = end_at

    @property
    def _from(self):
        """Gets the _from of this StructuredQuery.

        The collections to query.

        :return: The _from of this StructuredQuery.
        :rtype: List[CollectionSelector]
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this StructuredQuery.

        The collections to query.

        :param _from: The _from of this StructuredQuery.
        :type _from: List[CollectionSelector]
        """

        self.__from = _from

    @property
    def limit(self):
        """Gets the limit of this StructuredQuery.

        The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.

        :return: The limit of this StructuredQuery.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this StructuredQuery.

        The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.

        :param limit: The limit of this StructuredQuery.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this StructuredQuery.

        The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.

        :return: The offset of this StructuredQuery.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this StructuredQuery.

        The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.

        :param offset: The offset of this StructuredQuery.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this StructuredQuery.

        The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`

        :return: The order_by of this StructuredQuery.
        :rtype: List[Order]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this StructuredQuery.

        The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`

        :param order_by: The order_by of this StructuredQuery.
        :type order_by: List[Order]
        """

        self._order_by = order_by

    @property
    def select(self):
        """Gets the select of this StructuredQuery.


        :return: The select of this StructuredQuery.
        :rtype: Projection
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this StructuredQuery.


        :param select: The select of this StructuredQuery.
        :type select: Projection
        """

        self._select = select

    @property
    def start_at(self):
        """Gets the start_at of this StructuredQuery.


        :return: The start_at of this StructuredQuery.
        :rtype: Cursor
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this StructuredQuery.


        :param start_at: The start_at of this StructuredQuery.
        :type start_at: Cursor
        """

        self._start_at = start_at

    @property
    def where(self):
        """Gets the where of this StructuredQuery.


        :return: The where of this StructuredQuery.
        :rtype: Filter
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this StructuredQuery.


        :param where: The where of this StructuredQuery.
        :type where: Filter
        """

        self._where = where
