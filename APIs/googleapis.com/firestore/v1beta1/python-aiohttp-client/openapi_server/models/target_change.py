# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class TargetChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cause: Status=None, read_time: str=None, resume_token: str=None, target_change_type: str=None, target_ids: List[int]=None):
        """TargetChange - a model defined in OpenAPI

        :param cause: The cause of this TargetChange.
        :param read_time: The read_time of this TargetChange.
        :param resume_token: The resume_token of this TargetChange.
        :param target_change_type: The target_change_type of this TargetChange.
        :param target_ids: The target_ids of this TargetChange.
        """
        self.openapi_types = {
            'cause': Status,
            'read_time': str,
            'resume_token': str,
            'target_change_type': str,
            'target_ids': List[int]
        }

        self.attribute_map = {
            'cause': 'cause',
            'read_time': 'readTime',
            'resume_token': 'resumeToken',
            'target_change_type': 'targetChangeType',
            'target_ids': 'targetIds'
        }

        self._cause = cause
        self._read_time = read_time
        self._resume_token = resume_token
        self._target_change_type = target_change_type
        self._target_ids = target_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetChange of this TargetChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cause(self):
        """Gets the cause of this TargetChange.


        :return: The cause of this TargetChange.
        :rtype: Status
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this TargetChange.


        :param cause: The cause of this TargetChange.
        :type cause: Status
        """

        self._cause = cause

    @property
    def read_time(self):
        """Gets the read_time of this TargetChange.

        The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.

        :return: The read_time of this TargetChange.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this TargetChange.

        The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.

        :param read_time: The read_time of this TargetChange.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def resume_token(self):
        """Gets the resume_token of this TargetChange.

        A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.

        :return: The resume_token of this TargetChange.
        :rtype: str
        """
        return self._resume_token

    @resume_token.setter
    def resume_token(self, resume_token):
        """Sets the resume_token of this TargetChange.

        A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.

        :param resume_token: The resume_token of this TargetChange.
        :type resume_token: str
        """

        self._resume_token = resume_token

    @property
    def target_change_type(self):
        """Gets the target_change_type of this TargetChange.

        The type of change that occurred.

        :return: The target_change_type of this TargetChange.
        :rtype: str
        """
        return self._target_change_type

    @target_change_type.setter
    def target_change_type(self, target_change_type):
        """Sets the target_change_type of this TargetChange.

        The type of change that occurred.

        :param target_change_type: The target_change_type of this TargetChange.
        :type target_change_type: str
        """
        allowed_values = ["NO_CHANGE", "ADD", "REMOVE", "CURRENT", "RESET"]  # noqa: E501
        if target_change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_change_type` ({0}), must be one of {1}"
                .format(target_change_type, allowed_values)
            )

        self._target_change_type = target_change_type

    @property
    def target_ids(self):
        """Gets the target_ids of this TargetChange.

        The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.

        :return: The target_ids of this TargetChange.
        :rtype: List[int]
        """
        return self._target_ids

    @target_ids.setter
    def target_ids(self, target_ids):
        """Sets the target_ids of this TargetChange.

        The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.

        :param target_ids: The target_ids of this TargetChange.
        :type target_ids: List[int]
        """

        self._target_ids = target_ids
