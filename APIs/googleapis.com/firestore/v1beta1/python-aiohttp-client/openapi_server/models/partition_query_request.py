# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.structured_query import StructuredQuery
from openapi_server import util


class PartitionQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_size: int=None, page_token: str=None, partition_count: str=None, read_time: str=None, structured_query: StructuredQuery=None):
        """PartitionQueryRequest - a model defined in OpenAPI

        :param page_size: The page_size of this PartitionQueryRequest.
        :param page_token: The page_token of this PartitionQueryRequest.
        :param partition_count: The partition_count of this PartitionQueryRequest.
        :param read_time: The read_time of this PartitionQueryRequest.
        :param structured_query: The structured_query of this PartitionQueryRequest.
        """
        self.openapi_types = {
            'page_size': int,
            'page_token': str,
            'partition_count': str,
            'read_time': str,
            'structured_query': StructuredQuery
        }

        self.attribute_map = {
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'partition_count': 'partitionCount',
            'read_time': 'readTime',
            'structured_query': 'structuredQuery'
        }

        self._page_size = page_size
        self._page_token = page_token
        self._partition_count = partition_count
        self._read_time = read_time
        self._structured_query = structured_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionQueryRequest of this PartitionQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_size(self):
        """Gets the page_size of this PartitionQueryRequest.

        The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.

        :return: The page_size of this PartitionQueryRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PartitionQueryRequest.

        The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.

        :param page_size: The page_size of this PartitionQueryRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this PartitionQueryRequest.

        The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W

        :return: The page_token of this PartitionQueryRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this PartitionQueryRequest.

        The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W

        :param page_token: The page_token of this PartitionQueryRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def partition_count(self):
        """Gets the partition_count of this PartitionQueryRequest.

        The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.

        :return: The partition_count of this PartitionQueryRequest.
        :rtype: str
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this PartitionQueryRequest.

        The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.

        :param partition_count: The partition_count of this PartitionQueryRequest.
        :type partition_count: str
        """

        self._partition_count = partition_count

    @property
    def read_time(self):
        """Gets the read_time of this PartitionQueryRequest.

        Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :return: The read_time of this PartitionQueryRequest.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this PartitionQueryRequest.

        Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.

        :param read_time: The read_time of this PartitionQueryRequest.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def structured_query(self):
        """Gets the structured_query of this PartitionQueryRequest.


        :return: The structured_query of this PartitionQueryRequest.
        :rtype: StructuredQuery
        """
        return self._structured_query

    @structured_query.setter
    def structured_query(self, structured_query):
        """Sets the structured_query of this PartitionQueryRequest.


        :param structured_query: The structured_query of this PartitionQueryRequest.
        :type structured_query: StructuredQuery
        """

        self._structured_query = structured_query
