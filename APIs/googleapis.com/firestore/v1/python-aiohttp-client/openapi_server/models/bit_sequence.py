# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BitSequence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitmap: str=None, padding: int=None):
        """BitSequence - a model defined in OpenAPI

        :param bitmap: The bitmap of this BitSequence.
        :param padding: The padding of this BitSequence.
        """
        self.openapi_types = {
            'bitmap': str,
            'padding': int
        }

        self.attribute_map = {
            'bitmap': 'bitmap',
            'padding': 'padding'
        }

        self._bitmap = bitmap
        self._padding = padding

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BitSequence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BitSequence of this BitSequence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitmap(self):
        """Gets the bitmap of this BitSequence.

        The bytes that encode the bit sequence. May have a length of zero.

        :return: The bitmap of this BitSequence.
        :rtype: str
        """
        return self._bitmap

    @bitmap.setter
    def bitmap(self, bitmap):
        """Sets the bitmap of this BitSequence.

        The bytes that encode the bit sequence. May have a length of zero.

        :param bitmap: The bitmap of this BitSequence.
        :type bitmap: str
        """

        self._bitmap = bitmap

    @property
    def padding(self):
        """Gets the padding of this BitSequence.

        The number of bits of the last byte in `bitmap` to ignore as \"padding\". If the length of `bitmap` is zero, then this value must be `0`. Otherwise, this value must be between 0 and 7, inclusive.

        :return: The padding of this BitSequence.
        :rtype: int
        """
        return self._padding

    @padding.setter
    def padding(self, padding):
        """Sets the padding of this BitSequence.

        The number of bits of the last byte in `bitmap` to ignore as \"padding\". If the length of `bitmap` is zero, then this value must be `0`. Otherwise, this value must be between 0 and 7, inclusive.

        :param padding: The padding of this BitSequence.
        :type padding: int
        """

        self._padding = padding
