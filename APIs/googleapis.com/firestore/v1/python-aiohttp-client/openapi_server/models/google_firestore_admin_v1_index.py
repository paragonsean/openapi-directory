# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_firestore_admin_v1_index_field import GoogleFirestoreAdminV1IndexField
from openapi_server import util


class GoogleFirestoreAdminV1Index(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_scope: str=None, fields: List[GoogleFirestoreAdminV1IndexField]=None, name: str=None, query_scope: str=None, state: str=None):
        """GoogleFirestoreAdminV1Index - a model defined in OpenAPI

        :param api_scope: The api_scope of this GoogleFirestoreAdminV1Index.
        :param fields: The fields of this GoogleFirestoreAdminV1Index.
        :param name: The name of this GoogleFirestoreAdminV1Index.
        :param query_scope: The query_scope of this GoogleFirestoreAdminV1Index.
        :param state: The state of this GoogleFirestoreAdminV1Index.
        """
        self.openapi_types = {
            'api_scope': str,
            'fields': List[GoogleFirestoreAdminV1IndexField],
            'name': str,
            'query_scope': str,
            'state': str
        }

        self.attribute_map = {
            'api_scope': 'apiScope',
            'fields': 'fields',
            'name': 'name',
            'query_scope': 'queryScope',
            'state': 'state'
        }

        self._api_scope = api_scope
        self._fields = fields
        self._name = name
        self._query_scope = query_scope
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleFirestoreAdminV1Index':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleFirestoreAdminV1Index of this GoogleFirestoreAdminV1Index.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_scope(self):
        """Gets the api_scope of this GoogleFirestoreAdminV1Index.

        The API scope supported by this index.

        :return: The api_scope of this GoogleFirestoreAdminV1Index.
        :rtype: str
        """
        return self._api_scope

    @api_scope.setter
    def api_scope(self, api_scope):
        """Sets the api_scope of this GoogleFirestoreAdminV1Index.

        The API scope supported by this index.

        :param api_scope: The api_scope of this GoogleFirestoreAdminV1Index.
        :type api_scope: str
        """
        allowed_values = ["ANY_API", "DATASTORE_MODE_API"]  # noqa: E501
        if api_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `api_scope` ({0}), must be one of {1}"
                .format(api_scope, allowed_values)
            )

        self._api_scope = api_scope

    @property
    def fields(self):
        """Gets the fields of this GoogleFirestoreAdminV1Index.

        The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.

        :return: The fields of this GoogleFirestoreAdminV1Index.
        :rtype: List[GoogleFirestoreAdminV1IndexField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GoogleFirestoreAdminV1Index.

        The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.

        :param fields: The fields of this GoogleFirestoreAdminV1Index.
        :type fields: List[GoogleFirestoreAdminV1IndexField]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this GoogleFirestoreAdminV1Index.

        Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.

        :return: The name of this GoogleFirestoreAdminV1Index.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleFirestoreAdminV1Index.

        Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.

        :param name: The name of this GoogleFirestoreAdminV1Index.
        :type name: str
        """

        self._name = name

    @property
    def query_scope(self):
        """Gets the query_scope of this GoogleFirestoreAdminV1Index.

        Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.

        :return: The query_scope of this GoogleFirestoreAdminV1Index.
        :rtype: str
        """
        return self._query_scope

    @query_scope.setter
    def query_scope(self, query_scope):
        """Sets the query_scope of this GoogleFirestoreAdminV1Index.

        Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.

        :param query_scope: The query_scope of this GoogleFirestoreAdminV1Index.
        :type query_scope: str
        """
        allowed_values = ["QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP", "COLLECTION_RECURSIVE"]  # noqa: E501
        if query_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `query_scope` ({0}), must be one of {1}"
                .format(query_scope, allowed_values)
            )

        self._query_scope = query_scope

    @property
    def state(self):
        """Gets the state of this GoogleFirestoreAdminV1Index.

        Output only. The serving state of the index.

        :return: The state of this GoogleFirestoreAdminV1Index.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleFirestoreAdminV1Index.

        Output only. The serving state of the index.

        :param state: The state of this GoogleFirestoreAdminV1Index.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
