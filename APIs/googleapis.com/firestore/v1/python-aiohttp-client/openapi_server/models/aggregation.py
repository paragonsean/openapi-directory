# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.avg import Avg
from openapi_server.models.count import Count
from openapi_server.models.sum import Sum
from openapi_server import util


class Aggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, avg: Avg=None, count: Count=None, sum: Sum=None):
        """Aggregation - a model defined in OpenAPI

        :param alias: The alias of this Aggregation.
        :param avg: The avg of this Aggregation.
        :param count: The count of this Aggregation.
        :param sum: The sum of this Aggregation.
        """
        self.openapi_types = {
            'alias': str,
            'avg': Avg,
            'count': Count,
            'sum': Sum
        }

        self.attribute_map = {
            'alias': 'alias',
            'avg': 'avg',
            'count': 'count',
            'sum': 'sum'
        }

        self._alias = alias
        self._avg = avg
        self._count = count
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Aggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Aggregation of this Aggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this Aggregation.

        Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.

        :return: The alias of this Aggregation.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Aggregation.

        Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.

        :param alias: The alias of this Aggregation.
        :type alias: str
        """

        self._alias = alias

    @property
    def avg(self):
        """Gets the avg of this Aggregation.


        :return: The avg of this Aggregation.
        :rtype: Avg
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this Aggregation.


        :param avg: The avg of this Aggregation.
        :type avg: Avg
        """

        self._avg = avg

    @property
    def count(self):
        """Gets the count of this Aggregation.


        :return: The count of this Aggregation.
        :rtype: Count
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Aggregation.


        :param count: The count of this Aggregation.
        :type count: Count
        """

        self._count = count

    @property
    def sum(self):
        """Gets the sum of this Aggregation.


        :return: The sum of this Aggregation.
        :rtype: Sum
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this Aggregation.


        :param sum: The sum of this Aggregation.
        :type sum: Sum
        """

        self._sum = sum
