# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleFirestoreAdminV1Database(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_integration_mode: str=None, concurrency_mode: str=None, create_time: str=None, delete_protection_state: str=None, earliest_version_time: str=None, etag: str=None, key_prefix: str=None, location_id: str=None, name: str=None, point_in_time_recovery_enablement: str=None, type: str=None, uid: str=None, update_time: str=None, version_retention_period: str=None):
        """GoogleFirestoreAdminV1Database - a model defined in OpenAPI

        :param app_engine_integration_mode: The app_engine_integration_mode of this GoogleFirestoreAdminV1Database.
        :param concurrency_mode: The concurrency_mode of this GoogleFirestoreAdminV1Database.
        :param create_time: The create_time of this GoogleFirestoreAdminV1Database.
        :param delete_protection_state: The delete_protection_state of this GoogleFirestoreAdminV1Database.
        :param earliest_version_time: The earliest_version_time of this GoogleFirestoreAdminV1Database.
        :param etag: The etag of this GoogleFirestoreAdminV1Database.
        :param key_prefix: The key_prefix of this GoogleFirestoreAdminV1Database.
        :param location_id: The location_id of this GoogleFirestoreAdminV1Database.
        :param name: The name of this GoogleFirestoreAdminV1Database.
        :param point_in_time_recovery_enablement: The point_in_time_recovery_enablement of this GoogleFirestoreAdminV1Database.
        :param type: The type of this GoogleFirestoreAdminV1Database.
        :param uid: The uid of this GoogleFirestoreAdminV1Database.
        :param update_time: The update_time of this GoogleFirestoreAdminV1Database.
        :param version_retention_period: The version_retention_period of this GoogleFirestoreAdminV1Database.
        """
        self.openapi_types = {
            'app_engine_integration_mode': str,
            'concurrency_mode': str,
            'create_time': str,
            'delete_protection_state': str,
            'earliest_version_time': str,
            'etag': str,
            'key_prefix': str,
            'location_id': str,
            'name': str,
            'point_in_time_recovery_enablement': str,
            'type': str,
            'uid': str,
            'update_time': str,
            'version_retention_period': str
        }

        self.attribute_map = {
            'app_engine_integration_mode': 'appEngineIntegrationMode',
            'concurrency_mode': 'concurrencyMode',
            'create_time': 'createTime',
            'delete_protection_state': 'deleteProtectionState',
            'earliest_version_time': 'earliestVersionTime',
            'etag': 'etag',
            'key_prefix': 'keyPrefix',
            'location_id': 'locationId',
            'name': 'name',
            'point_in_time_recovery_enablement': 'pointInTimeRecoveryEnablement',
            'type': 'type',
            'uid': 'uid',
            'update_time': 'updateTime',
            'version_retention_period': 'versionRetentionPeriod'
        }

        self._app_engine_integration_mode = app_engine_integration_mode
        self._concurrency_mode = concurrency_mode
        self._create_time = create_time
        self._delete_protection_state = delete_protection_state
        self._earliest_version_time = earliest_version_time
        self._etag = etag
        self._key_prefix = key_prefix
        self._location_id = location_id
        self._name = name
        self._point_in_time_recovery_enablement = point_in_time_recovery_enablement
        self._type = type
        self._uid = uid
        self._update_time = update_time
        self._version_retention_period = version_retention_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleFirestoreAdminV1Database':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleFirestoreAdminV1Database of this GoogleFirestoreAdminV1Database.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_integration_mode(self):
        """Gets the app_engine_integration_mode of this GoogleFirestoreAdminV1Database.

        The App Engine integration mode to use for this database.

        :return: The app_engine_integration_mode of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._app_engine_integration_mode

    @app_engine_integration_mode.setter
    def app_engine_integration_mode(self, app_engine_integration_mode):
        """Sets the app_engine_integration_mode of this GoogleFirestoreAdminV1Database.

        The App Engine integration mode to use for this database.

        :param app_engine_integration_mode: The app_engine_integration_mode of this GoogleFirestoreAdminV1Database.
        :type app_engine_integration_mode: str
        """
        allowed_values = ["APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]  # noqa: E501
        if app_engine_integration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `app_engine_integration_mode` ({0}), must be one of {1}"
                .format(app_engine_integration_mode, allowed_values)
            )

        self._app_engine_integration_mode = app_engine_integration_mode

    @property
    def concurrency_mode(self):
        """Gets the concurrency_mode of this GoogleFirestoreAdminV1Database.

        The concurrency control mode to use for this database.

        :return: The concurrency_mode of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._concurrency_mode

    @concurrency_mode.setter
    def concurrency_mode(self, concurrency_mode):
        """Sets the concurrency_mode of this GoogleFirestoreAdminV1Database.

        The concurrency control mode to use for this database.

        :param concurrency_mode: The concurrency_mode of this GoogleFirestoreAdminV1Database.
        :type concurrency_mode: str
        """
        allowed_values = ["CONCURRENCY_MODE_UNSPECIFIED", "OPTIMISTIC", "PESSIMISTIC", "OPTIMISTIC_WITH_ENTITY_GROUPS"]  # noqa: E501
        if concurrency_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `concurrency_mode` ({0}), must be one of {1}"
                .format(concurrency_mode, allowed_values)
            )

        self._concurrency_mode = concurrency_mode

    @property
    def create_time(self):
        """Gets the create_time of this GoogleFirestoreAdminV1Database.

        Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.

        :return: The create_time of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleFirestoreAdminV1Database.

        Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.

        :param create_time: The create_time of this GoogleFirestoreAdminV1Database.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_protection_state(self):
        """Gets the delete_protection_state of this GoogleFirestoreAdminV1Database.

        State of delete protection for the database.

        :return: The delete_protection_state of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._delete_protection_state

    @delete_protection_state.setter
    def delete_protection_state(self, delete_protection_state):
        """Sets the delete_protection_state of this GoogleFirestoreAdminV1Database.

        State of delete protection for the database.

        :param delete_protection_state: The delete_protection_state of this GoogleFirestoreAdminV1Database.
        :type delete_protection_state: str
        """
        allowed_values = ["DELETE_PROTECTION_STATE_UNSPECIFIED", "DELETE_PROTECTION_DISABLED", "DELETE_PROTECTION_ENABLED"]  # noqa: E501
        if delete_protection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `delete_protection_state` ({0}), must be one of {1}"
                .format(delete_protection_state, allowed_values)
            )

        self._delete_protection_state = delete_protection_state

    @property
    def earliest_version_time(self):
        """Gets the earliest_version_time of this GoogleFirestoreAdminV1Database.

        Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.

        :return: The earliest_version_time of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._earliest_version_time

    @earliest_version_time.setter
    def earliest_version_time(self, earliest_version_time):
        """Sets the earliest_version_time of this GoogleFirestoreAdminV1Database.

        Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.

        :param earliest_version_time: The earliest_version_time of this GoogleFirestoreAdminV1Database.
        :type earliest_version_time: str
        """

        self._earliest_version_time = earliest_version_time

    @property
    def etag(self):
        """Gets the etag of this GoogleFirestoreAdminV1Database.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleFirestoreAdminV1Database.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this GoogleFirestoreAdminV1Database.
        :type etag: str
        """

        self._etag = etag

    @property
    def key_prefix(self):
        """Gets the key_prefix of this GoogleFirestoreAdminV1Database.

        Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id (\"~\") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).

        :return: The key_prefix of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this GoogleFirestoreAdminV1Database.

        Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id (\"~\") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).

        :param key_prefix: The key_prefix of this GoogleFirestoreAdminV1Database.
        :type key_prefix: str
        """

        self._key_prefix = key_prefix

    @property
    def location_id(self):
        """Gets the location_id of this GoogleFirestoreAdminV1Database.

        The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.

        :return: The location_id of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GoogleFirestoreAdminV1Database.

        The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.

        :param location_id: The location_id of this GoogleFirestoreAdminV1Database.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this GoogleFirestoreAdminV1Database.

        The resource name of the Database. Format: `projects/{project}/databases/{database}`

        :return: The name of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleFirestoreAdminV1Database.

        The resource name of the Database. Format: `projects/{project}/databases/{database}`

        :param name: The name of this GoogleFirestoreAdminV1Database.
        :type name: str
        """

        self._name = name

    @property
    def point_in_time_recovery_enablement(self):
        """Gets the point_in_time_recovery_enablement of this GoogleFirestoreAdminV1Database.

        Whether to enable the PITR feature on this database.

        :return: The point_in_time_recovery_enablement of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._point_in_time_recovery_enablement

    @point_in_time_recovery_enablement.setter
    def point_in_time_recovery_enablement(self, point_in_time_recovery_enablement):
        """Sets the point_in_time_recovery_enablement of this GoogleFirestoreAdminV1Database.

        Whether to enable the PITR feature on this database.

        :param point_in_time_recovery_enablement: The point_in_time_recovery_enablement of this GoogleFirestoreAdminV1Database.
        :type point_in_time_recovery_enablement: str
        """
        allowed_values = ["POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED", "POINT_IN_TIME_RECOVERY_ENABLED", "POINT_IN_TIME_RECOVERY_DISABLED"]  # noqa: E501
        if point_in_time_recovery_enablement not in allowed_values:
            raise ValueError(
                "Invalid value for `point_in_time_recovery_enablement` ({0}), must be one of {1}"
                .format(point_in_time_recovery_enablement, allowed_values)
            )

        self._point_in_time_recovery_enablement = point_in_time_recovery_enablement

    @property
    def type(self):
        """Gets the type of this GoogleFirestoreAdminV1Database.

        The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.

        :return: The type of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleFirestoreAdminV1Database.

        The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.

        :param type: The type of this GoogleFirestoreAdminV1Database.
        :type type: str
        """
        allowed_values = ["DATABASE_TYPE_UNSPECIFIED", "FIRESTORE_NATIVE", "DATASTORE_MODE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this GoogleFirestoreAdminV1Database.

        Output only. The system-generated UUID4 for this Database.

        :return: The uid of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleFirestoreAdminV1Database.

        Output only. The system-generated UUID4 for this Database.

        :param uid: The uid of this GoogleFirestoreAdminV1Database.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this GoogleFirestoreAdminV1Database.

        Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.

        :return: The update_time of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleFirestoreAdminV1Database.

        Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.

        :param update_time: The update_time of this GoogleFirestoreAdminV1Database.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version_retention_period(self):
        """Gets the version_retention_period of this GoogleFirestoreAdminV1Database.

        Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.

        :return: The version_retention_period of this GoogleFirestoreAdminV1Database.
        :rtype: str
        """
        return self._version_retention_period

    @version_retention_period.setter
    def version_retention_period(self, version_retention_period):
        """Sets the version_retention_period of this GoogleFirestoreAdminV1Database.

        Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.

        :param version_retention_period: The version_retention_period of this GoogleFirestoreAdminV1Database.
        :type version_retention_period: str
        """

        self._version_retention_period = version_retention_period
