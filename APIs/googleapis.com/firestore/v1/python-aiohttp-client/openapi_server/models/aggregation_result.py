# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value import Value
from openapi_server import util


class AggregationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_fields: Dict[str, Value]=None):
        """AggregationResult - a model defined in OpenAPI

        :param aggregate_fields: The aggregate_fields of this AggregationResult.
        """
        self.openapi_types = {
            'aggregate_fields': Dict[str, Value]
        }

        self.attribute_map = {
            'aggregate_fields': 'aggregateFields'
        }

        self._aggregate_fields = aggregate_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationResult of this AggregationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_fields(self):
        """Gets the aggregate_fields of this AggregationResult.

        The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.

        :return: The aggregate_fields of this AggregationResult.
        :rtype: Dict[str, Value]
        """
        return self._aggregate_fields

    @aggregate_fields.setter
    def aggregate_fields(self, aggregate_fields):
        """Sets the aggregate_fields of this AggregationResult.

        The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.

        :param aggregate_fields: The aggregate_fields of this AggregationResult.
        :type aggregate_fields: Dict[str, Value]
        """

        self._aggregate_fields = aggregate_fields
