# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document import Document
from openapi_server import util


class BatchGetDocumentsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, found: Document=None, missing: str=None, read_time: str=None, transaction: str=None):
        """BatchGetDocumentsResponse - a model defined in OpenAPI

        :param found: The found of this BatchGetDocumentsResponse.
        :param missing: The missing of this BatchGetDocumentsResponse.
        :param read_time: The read_time of this BatchGetDocumentsResponse.
        :param transaction: The transaction of this BatchGetDocumentsResponse.
        """
        self.openapi_types = {
            'found': Document,
            'missing': str,
            'read_time': str,
            'transaction': str
        }

        self.attribute_map = {
            'found': 'found',
            'missing': 'missing',
            'read_time': 'readTime',
            'transaction': 'transaction'
        }

        self._found = found
        self._missing = missing
        self._read_time = read_time
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetDocumentsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetDocumentsResponse of this BatchGetDocumentsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def found(self):
        """Gets the found of this BatchGetDocumentsResponse.


        :return: The found of this BatchGetDocumentsResponse.
        :rtype: Document
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this BatchGetDocumentsResponse.


        :param found: The found of this BatchGetDocumentsResponse.
        :type found: Document
        """

        self._found = found

    @property
    def missing(self):
        """Gets the missing of this BatchGetDocumentsResponse.

        A document name that was requested but does not exist. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

        :return: The missing of this BatchGetDocumentsResponse.
        :rtype: str
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this BatchGetDocumentsResponse.

        A document name that was requested but does not exist. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.

        :param missing: The missing of this BatchGetDocumentsResponse.
        :type missing: str
        """

        self._missing = missing

    @property
    def read_time(self):
        """Gets the read_time of this BatchGetDocumentsResponse.

        The time at which the document was read. This may be monotically increasing, in this case the previous documents in the result stream are guaranteed not to have changed between their read_time and this one.

        :return: The read_time of this BatchGetDocumentsResponse.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this BatchGetDocumentsResponse.

        The time at which the document was read. This may be monotically increasing, in this case the previous documents in the result stream are guaranteed not to have changed between their read_time and this one.

        :param read_time: The read_time of this BatchGetDocumentsResponse.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def transaction(self):
        """Gets the transaction of this BatchGetDocumentsResponse.

        The transaction that was started as part of this request. Will only be set in the first response, and only if BatchGetDocumentsRequest.new_transaction was set in the request.

        :return: The transaction of this BatchGetDocumentsResponse.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this BatchGetDocumentsResponse.

        The transaction that was started as part of this request. Will only be set in the first response, and only if BatchGetDocumentsRequest.new_transaction was set in the request.

        :param transaction: The transaction of this BatchGetDocumentsResponse.
        :type transaction: str
        """

        self._transaction = transaction
