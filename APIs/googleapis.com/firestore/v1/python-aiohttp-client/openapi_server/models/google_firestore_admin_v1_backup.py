# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_firestore_admin_v1_stats import GoogleFirestoreAdminV1Stats
from openapi_server import util


class GoogleFirestoreAdminV1Backup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database: str=None, database_uid: str=None, expire_time: str=None, name: str=None, snapshot_time: str=None, state: str=None, stats: GoogleFirestoreAdminV1Stats=None):
        """GoogleFirestoreAdminV1Backup - a model defined in OpenAPI

        :param database: The database of this GoogleFirestoreAdminV1Backup.
        :param database_uid: The database_uid of this GoogleFirestoreAdminV1Backup.
        :param expire_time: The expire_time of this GoogleFirestoreAdminV1Backup.
        :param name: The name of this GoogleFirestoreAdminV1Backup.
        :param snapshot_time: The snapshot_time of this GoogleFirestoreAdminV1Backup.
        :param state: The state of this GoogleFirestoreAdminV1Backup.
        :param stats: The stats of this GoogleFirestoreAdminV1Backup.
        """
        self.openapi_types = {
            'database': str,
            'database_uid': str,
            'expire_time': str,
            'name': str,
            'snapshot_time': str,
            'state': str,
            'stats': GoogleFirestoreAdminV1Stats
        }

        self.attribute_map = {
            'database': 'database',
            'database_uid': 'databaseUid',
            'expire_time': 'expireTime',
            'name': 'name',
            'snapshot_time': 'snapshotTime',
            'state': 'state',
            'stats': 'stats'
        }

        self._database = database
        self._database_uid = database_uid
        self._expire_time = expire_time
        self._name = name
        self._snapshot_time = snapshot_time
        self._state = state
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleFirestoreAdminV1Backup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleFirestoreAdminV1Backup of this GoogleFirestoreAdminV1Backup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self):
        """Gets the database of this GoogleFirestoreAdminV1Backup.

        Output only. Name of the Firestore database that the backup is from. Format is `projects/{project}/databases/{database}`.

        :return: The database of this GoogleFirestoreAdminV1Backup.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this GoogleFirestoreAdminV1Backup.

        Output only. Name of the Firestore database that the backup is from. Format is `projects/{project}/databases/{database}`.

        :param database: The database of this GoogleFirestoreAdminV1Backup.
        :type database: str
        """

        self._database = database

    @property
    def database_uid(self):
        """Gets the database_uid of this GoogleFirestoreAdminV1Backup.

        Output only. The system-generated UUID4 for the Firestore database that the backup is from.

        :return: The database_uid of this GoogleFirestoreAdminV1Backup.
        :rtype: str
        """
        return self._database_uid

    @database_uid.setter
    def database_uid(self, database_uid):
        """Sets the database_uid of this GoogleFirestoreAdminV1Backup.

        Output only. The system-generated UUID4 for the Firestore database that the backup is from.

        :param database_uid: The database_uid of this GoogleFirestoreAdminV1Backup.
        :type database_uid: str
        """

        self._database_uid = database_uid

    @property
    def expire_time(self):
        """Gets the expire_time of this GoogleFirestoreAdminV1Backup.

        Output only. The timestamp at which this backup expires.

        :return: The expire_time of this GoogleFirestoreAdminV1Backup.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GoogleFirestoreAdminV1Backup.

        Output only. The timestamp at which this backup expires.

        :param expire_time: The expire_time of this GoogleFirestoreAdminV1Backup.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this GoogleFirestoreAdminV1Backup.

        Output only. The unique resource name of the Backup. Format is `projects/{project}/locations/{location}/backups/{backup}`.

        :return: The name of this GoogleFirestoreAdminV1Backup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleFirestoreAdminV1Backup.

        Output only. The unique resource name of the Backup. Format is `projects/{project}/locations/{location}/backups/{backup}`.

        :param name: The name of this GoogleFirestoreAdminV1Backup.
        :type name: str
        """

        self._name = name

    @property
    def snapshot_time(self):
        """Gets the snapshot_time of this GoogleFirestoreAdminV1Backup.

        Output only. The backup contains an externally consistent copy of the database at this time.

        :return: The snapshot_time of this GoogleFirestoreAdminV1Backup.
        :rtype: str
        """
        return self._snapshot_time

    @snapshot_time.setter
    def snapshot_time(self, snapshot_time):
        """Sets the snapshot_time of this GoogleFirestoreAdminV1Backup.

        Output only. The backup contains an externally consistent copy of the database at this time.

        :param snapshot_time: The snapshot_time of this GoogleFirestoreAdminV1Backup.
        :type snapshot_time: str
        """

        self._snapshot_time = snapshot_time

    @property
    def state(self):
        """Gets the state of this GoogleFirestoreAdminV1Backup.

        Output only. The current state of the backup.

        :return: The state of this GoogleFirestoreAdminV1Backup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleFirestoreAdminV1Backup.

        Output only. The current state of the backup.

        :param state: The state of this GoogleFirestoreAdminV1Backup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "NOT_AVAILABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stats(self):
        """Gets the stats of this GoogleFirestoreAdminV1Backup.


        :return: The stats of this GoogleFirestoreAdminV1Backup.
        :rtype: GoogleFirestoreAdminV1Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this GoogleFirestoreAdminV1Backup.


        :param stats: The stats of this GoogleFirestoreAdminV1Backup.
        :type stats: GoogleFirestoreAdminV1Stats
        """

        self._stats = stats
