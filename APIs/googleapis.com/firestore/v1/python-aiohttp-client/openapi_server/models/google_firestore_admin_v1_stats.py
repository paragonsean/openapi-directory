# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleFirestoreAdminV1Stats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_count: str=None, index_count: str=None, size_bytes: str=None):
        """GoogleFirestoreAdminV1Stats - a model defined in OpenAPI

        :param document_count: The document_count of this GoogleFirestoreAdminV1Stats.
        :param index_count: The index_count of this GoogleFirestoreAdminV1Stats.
        :param size_bytes: The size_bytes of this GoogleFirestoreAdminV1Stats.
        """
        self.openapi_types = {
            'document_count': str,
            'index_count': str,
            'size_bytes': str
        }

        self.attribute_map = {
            'document_count': 'documentCount',
            'index_count': 'indexCount',
            'size_bytes': 'sizeBytes'
        }

        self._document_count = document_count
        self._index_count = index_count
        self._size_bytes = size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleFirestoreAdminV1Stats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleFirestoreAdminV1Stats of this GoogleFirestoreAdminV1Stats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_count(self):
        """Gets the document_count of this GoogleFirestoreAdminV1Stats.

        Output only. The total number of documents contained in the backup.

        :return: The document_count of this GoogleFirestoreAdminV1Stats.
        :rtype: str
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this GoogleFirestoreAdminV1Stats.

        Output only. The total number of documents contained in the backup.

        :param document_count: The document_count of this GoogleFirestoreAdminV1Stats.
        :type document_count: str
        """

        self._document_count = document_count

    @property
    def index_count(self):
        """Gets the index_count of this GoogleFirestoreAdminV1Stats.

        Output only. The total number of index entries contained in the backup.

        :return: The index_count of this GoogleFirestoreAdminV1Stats.
        :rtype: str
        """
        return self._index_count

    @index_count.setter
    def index_count(self, index_count):
        """Sets the index_count of this GoogleFirestoreAdminV1Stats.

        Output only. The total number of index entries contained in the backup.

        :param index_count: The index_count of this GoogleFirestoreAdminV1Stats.
        :type index_count: str
        """

        self._index_count = index_count

    @property
    def size_bytes(self):
        """Gets the size_bytes of this GoogleFirestoreAdminV1Stats.

        Output only. Summation of the size of all documents and index entries in the backup, measured in bytes.

        :return: The size_bytes of this GoogleFirestoreAdminV1Stats.
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this GoogleFirestoreAdminV1Stats.

        Output only. Summation of the size of all documents and index entries in the backup, measured in bytes.

        :param size_bytes: The size_bytes of this GoogleFirestoreAdminV1Stats.
        :type size_bytes: str
        """

        self._size_bytes = size_bytes
