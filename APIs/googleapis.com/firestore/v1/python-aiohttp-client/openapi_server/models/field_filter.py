# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_reference import FieldReference
from openapi_server.models.value import Value
from openapi_server import util


class FieldFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: FieldReference=None, op: str=None, value: Value=None):
        """FieldFilter - a model defined in OpenAPI

        :param _field: The _field of this FieldFilter.
        :param op: The op of this FieldFilter.
        :param value: The value of this FieldFilter.
        """
        self.openapi_types = {
            '_field': FieldReference,
            'op': str,
            'value': Value
        }

        self.attribute_map = {
            '_field': 'field',
            'op': 'op',
            'value': 'value'
        }

        self.__field = _field
        self._op = op
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldFilter of this FieldFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FieldFilter.


        :return: The _field of this FieldFilter.
        :rtype: FieldReference
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FieldFilter.


        :param _field: The _field of this FieldFilter.
        :type _field: FieldReference
        """

        self.__field = _field

    @property
    def op(self):
        """Gets the op of this FieldFilter.

        The operator to filter by.

        :return: The op of this FieldFilter.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this FieldFilter.

        The operator to filter by.

        :param op: The op of this FieldFilter.
        :type op: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "EQUAL", "NOT_EQUAL", "ARRAY_CONTAINS", "IN", "ARRAY_CONTAINS_ANY", "NOT_IN"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def value(self):
        """Gets the value of this FieldFilter.


        :return: The value of this FieldFilter.
        :rtype: Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldFilter.


        :param value: The value of this FieldFilter.
        :type value: Value
        """

        self._value = value
