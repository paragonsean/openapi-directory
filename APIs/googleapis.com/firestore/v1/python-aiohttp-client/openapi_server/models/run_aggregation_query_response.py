# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_result import AggregationResult
from openapi_server import util


class RunAggregationQueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read_time: str=None, result: AggregationResult=None, transaction: str=None):
        """RunAggregationQueryResponse - a model defined in OpenAPI

        :param read_time: The read_time of this RunAggregationQueryResponse.
        :param result: The result of this RunAggregationQueryResponse.
        :param transaction: The transaction of this RunAggregationQueryResponse.
        """
        self.openapi_types = {
            'read_time': str,
            'result': AggregationResult,
            'transaction': str
        }

        self.attribute_map = {
            'read_time': 'readTime',
            'result': 'result',
            'transaction': 'transaction'
        }

        self._read_time = read_time
        self._result = result
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunAggregationQueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunAggregationQueryResponse of this RunAggregationQueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_time(self):
        """Gets the read_time of this RunAggregationQueryResponse.

        The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.

        :return: The read_time of this RunAggregationQueryResponse.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this RunAggregationQueryResponse.

        The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.

        :param read_time: The read_time of this RunAggregationQueryResponse.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def result(self):
        """Gets the result of this RunAggregationQueryResponse.


        :return: The result of this RunAggregationQueryResponse.
        :rtype: AggregationResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this RunAggregationQueryResponse.


        :param result: The result of this RunAggregationQueryResponse.
        :type result: AggregationResult
        """

        self._result = result

    @property
    def transaction(self):
        """Gets the transaction of this RunAggregationQueryResponse.

        The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.

        :return: The transaction of this RunAggregationQueryResponse.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this RunAggregationQueryResponse.

        The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.

        :param transaction: The transaction of this RunAggregationQueryResponse.
        :type transaction: str
        """

        self._transaction = transaction
