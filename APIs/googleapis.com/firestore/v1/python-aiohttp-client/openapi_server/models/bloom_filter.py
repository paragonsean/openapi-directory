# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bit_sequence import BitSequence
from openapi_server import util


class BloomFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bits: BitSequence=None, hash_count: int=None):
        """BloomFilter - a model defined in OpenAPI

        :param bits: The bits of this BloomFilter.
        :param hash_count: The hash_count of this BloomFilter.
        """
        self.openapi_types = {
            'bits': BitSequence,
            'hash_count': int
        }

        self.attribute_map = {
            'bits': 'bits',
            'hash_count': 'hashCount'
        }

        self._bits = bits
        self._hash_count = hash_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BloomFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BloomFilter of this BloomFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bits(self):
        """Gets the bits of this BloomFilter.


        :return: The bits of this BloomFilter.
        :rtype: BitSequence
        """
        return self._bits

    @bits.setter
    def bits(self, bits):
        """Sets the bits of this BloomFilter.


        :param bits: The bits of this BloomFilter.
        :type bits: BitSequence
        """

        self._bits = bits

    @property
    def hash_count(self):
        """Gets the hash_count of this BloomFilter.

        The number of hashes used by the algorithm.

        :return: The hash_count of this BloomFilter.
        :rtype: int
        """
        return self._hash_count

    @hash_count.setter
    def hash_count(self, hash_count):
        """Sets the hash_count of this BloomFilter.

        The number of hashes used by the algorithm.

        :param hash_count: The hash_count of this BloomFilter.
        :type hash_count: int
        """

        self._hash_count = hash_count
