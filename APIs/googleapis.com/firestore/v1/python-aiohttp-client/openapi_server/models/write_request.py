# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.write import Write
from openapi_server import util


class WriteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, stream_id: str=None, stream_token: str=None, writes: List[Write]=None):
        """WriteRequest - a model defined in OpenAPI

        :param labels: The labels of this WriteRequest.
        :param stream_id: The stream_id of this WriteRequest.
        :param stream_token: The stream_token of this WriteRequest.
        :param writes: The writes of this WriteRequest.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'stream_id': str,
            'stream_token': str,
            'writes': List[Write]
        }

        self.attribute_map = {
            'labels': 'labels',
            'stream_id': 'streamId',
            'stream_token': 'streamToken',
            'writes': 'writes'
        }

        self._labels = labels
        self._stream_id = stream_id
        self._stream_token = stream_token
        self._writes = writes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WriteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WriteRequest of this WriteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this WriteRequest.

        Labels associated with this write request.

        :return: The labels of this WriteRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WriteRequest.

        Labels associated with this write request.

        :param labels: The labels of this WriteRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def stream_id(self):
        """Gets the stream_id of this WriteRequest.

        The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.

        :return: The stream_id of this WriteRequest.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this WriteRequest.

        The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.

        :param stream_id: The stream_id of this WriteRequest.
        :type stream_id: str
        """

        self._stream_id = stream_id

    @property
    def stream_token(self):
        """Gets the stream_token of this WriteRequest.

        A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream.

        :return: The stream_token of this WriteRequest.
        :rtype: str
        """
        return self._stream_token

    @stream_token.setter
    def stream_token(self, stream_token):
        """Sets the stream_token of this WriteRequest.

        A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream.

        :param stream_token: The stream_token of this WriteRequest.
        :type stream_token: str
        """

        self._stream_token = stream_token

    @property
    def writes(self):
        """Gets the writes of this WriteRequest.

        The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.

        :return: The writes of this WriteRequest.
        :rtype: List[Write]
        """
        return self._writes

    @writes.setter
    def writes(self, writes):
        """Sets the writes of this WriteRequest.

        The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.

        :param writes: The writes of this WriteRequest.
        :type writes: List[Write]
        """

        self._writes = writes
