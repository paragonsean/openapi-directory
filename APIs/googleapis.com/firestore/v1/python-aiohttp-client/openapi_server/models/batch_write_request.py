# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.write import Write
from openapi_server import util


class BatchWriteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, writes: List[Write]=None):
        """BatchWriteRequest - a model defined in OpenAPI

        :param labels: The labels of this BatchWriteRequest.
        :param writes: The writes of this BatchWriteRequest.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'writes': List[Write]
        }

        self.attribute_map = {
            'labels': 'labels',
            'writes': 'writes'
        }

        self._labels = labels
        self._writes = writes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchWriteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchWriteRequest of this BatchWriteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this BatchWriteRequest.

        Labels associated with this batch write.

        :return: The labels of this BatchWriteRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this BatchWriteRequest.

        Labels associated with this batch write.

        :param labels: The labels of this BatchWriteRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def writes(self):
        """Gets the writes of this BatchWriteRequest.

        The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.

        :return: The writes of this BatchWriteRequest.
        :rtype: List[Write]
        """
        return self._writes

    @writes.setter
    def writes(self, writes):
        """Sets the writes of this BatchWriteRequest.

        The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.

        :param writes: The writes of this BatchWriteRequest.
        :type writes: List[Write]
        """

        self._writes = writes
