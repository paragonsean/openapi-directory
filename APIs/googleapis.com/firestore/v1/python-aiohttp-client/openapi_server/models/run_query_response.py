# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document import Document
from openapi_server import util


class RunQueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: Document=None, done: bool=None, read_time: str=None, skipped_results: int=None, transaction: str=None):
        """RunQueryResponse - a model defined in OpenAPI

        :param document: The document of this RunQueryResponse.
        :param done: The done of this RunQueryResponse.
        :param read_time: The read_time of this RunQueryResponse.
        :param skipped_results: The skipped_results of this RunQueryResponse.
        :param transaction: The transaction of this RunQueryResponse.
        """
        self.openapi_types = {
            'document': Document,
            'done': bool,
            'read_time': str,
            'skipped_results': int,
            'transaction': str
        }

        self.attribute_map = {
            'document': 'document',
            'done': 'done',
            'read_time': 'readTime',
            'skipped_results': 'skippedResults',
            'transaction': 'transaction'
        }

        self._document = document
        self._done = done
        self._read_time = read_time
        self._skipped_results = skipped_results
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunQueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunQueryResponse of this RunQueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this RunQueryResponse.


        :return: The document of this RunQueryResponse.
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this RunQueryResponse.


        :param document: The document of this RunQueryResponse.
        :type document: Document
        """

        self._document = document

    @property
    def done(self):
        """Gets the done of this RunQueryResponse.

        If present, Firestore has completely finished the request and no more documents will be returned.

        :return: The done of this RunQueryResponse.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this RunQueryResponse.

        If present, Firestore has completely finished the request and no more documents will be returned.

        :param done: The done of this RunQueryResponse.
        :type done: bool
        """

        self._done = done

    @property
    def read_time(self):
        """Gets the read_time of this RunQueryResponse.

        The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.

        :return: The read_time of this RunQueryResponse.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this RunQueryResponse.

        The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.

        :param read_time: The read_time of this RunQueryResponse.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def skipped_results(self):
        """Gets the skipped_results of this RunQueryResponse.

        The number of results that have been skipped due to an offset between the last response and the current response.

        :return: The skipped_results of this RunQueryResponse.
        :rtype: int
        """
        return self._skipped_results

    @skipped_results.setter
    def skipped_results(self, skipped_results):
        """Sets the skipped_results of this RunQueryResponse.

        The number of results that have been skipped due to an offset between the last response and the current response.

        :param skipped_results: The skipped_results of this RunQueryResponse.
        :type skipped_results: int
        """

        self._skipped_results = skipped_results

    @property
    def transaction(self):
        """Gets the transaction of this RunQueryResponse.

        The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.

        :return: The transaction of this RunQueryResponse.
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this RunQueryResponse.

        The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.

        :param transaction: The transaction of this RunQueryResponse.
        :type transaction: str
        """

        self._transaction = transaction
