# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server import util


class CompositeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[Filter]=None, op: str=None):
        """CompositeFilter - a model defined in OpenAPI

        :param filters: The filters of this CompositeFilter.
        :param op: The op of this CompositeFilter.
        """
        self.openapi_types = {
            'filters': List[Filter],
            'op': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'op': 'op'
        }

        self._filters = filters
        self._op = op

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompositeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompositeFilter of this CompositeFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this CompositeFilter.

        The list of filters to combine. Requires: * At least one filter is present.

        :return: The filters of this CompositeFilter.
        :rtype: List[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CompositeFilter.

        The list of filters to combine. Requires: * At least one filter is present.

        :param filters: The filters of this CompositeFilter.
        :type filters: List[Filter]
        """

        self._filters = filters

    @property
    def op(self):
        """Gets the op of this CompositeFilter.

        The operator for combining multiple filters.

        :return: The op of this CompositeFilter.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this CompositeFilter.

        The operator for combining multiple filters.

        :param op: The op of this CompositeFilter.
        :type op: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "AND", "OR"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op
