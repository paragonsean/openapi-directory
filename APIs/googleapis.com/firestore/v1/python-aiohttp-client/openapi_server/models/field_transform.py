# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.array_value import ArrayValue
from openapi_server.models.value import Value
from openapi_server import util


class FieldTransform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, append_missing_elements: ArrayValue=None, field_path: str=None, increment: Value=None, maximum: Value=None, minimum: Value=None, remove_all_from_array: ArrayValue=None, set_to_server_value: str=None):
        """FieldTransform - a model defined in OpenAPI

        :param append_missing_elements: The append_missing_elements of this FieldTransform.
        :param field_path: The field_path of this FieldTransform.
        :param increment: The increment of this FieldTransform.
        :param maximum: The maximum of this FieldTransform.
        :param minimum: The minimum of this FieldTransform.
        :param remove_all_from_array: The remove_all_from_array of this FieldTransform.
        :param set_to_server_value: The set_to_server_value of this FieldTransform.
        """
        self.openapi_types = {
            'append_missing_elements': ArrayValue,
            'field_path': str,
            'increment': Value,
            'maximum': Value,
            'minimum': Value,
            'remove_all_from_array': ArrayValue,
            'set_to_server_value': str
        }

        self.attribute_map = {
            'append_missing_elements': 'appendMissingElements',
            'field_path': 'fieldPath',
            'increment': 'increment',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'remove_all_from_array': 'removeAllFromArray',
            'set_to_server_value': 'setToServerValue'
        }

        self._append_missing_elements = append_missing_elements
        self._field_path = field_path
        self._increment = increment
        self._maximum = maximum
        self._minimum = minimum
        self._remove_all_from_array = remove_all_from_array
        self._set_to_server_value = set_to_server_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldTransform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldTransform of this FieldTransform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def append_missing_elements(self):
        """Gets the append_missing_elements of this FieldTransform.


        :return: The append_missing_elements of this FieldTransform.
        :rtype: ArrayValue
        """
        return self._append_missing_elements

    @append_missing_elements.setter
    def append_missing_elements(self, append_missing_elements):
        """Sets the append_missing_elements of this FieldTransform.


        :param append_missing_elements: The append_missing_elements of this FieldTransform.
        :type append_missing_elements: ArrayValue
        """

        self._append_missing_elements = append_missing_elements

    @property
    def field_path(self):
        """Gets the field_path of this FieldTransform.

        The path of the field. See Document.fields for the field path syntax reference.

        :return: The field_path of this FieldTransform.
        :rtype: str
        """
        return self._field_path

    @field_path.setter
    def field_path(self, field_path):
        """Sets the field_path of this FieldTransform.

        The path of the field. See Document.fields for the field path syntax reference.

        :param field_path: The field_path of this FieldTransform.
        :type field_path: str
        """

        self._field_path = field_path

    @property
    def increment(self):
        """Gets the increment of this FieldTransform.


        :return: The increment of this FieldTransform.
        :rtype: Value
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this FieldTransform.


        :param increment: The increment of this FieldTransform.
        :type increment: Value
        """

        self._increment = increment

    @property
    def maximum(self):
        """Gets the maximum of this FieldTransform.


        :return: The maximum of this FieldTransform.
        :rtype: Value
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this FieldTransform.


        :param maximum: The maximum of this FieldTransform.
        :type maximum: Value
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this FieldTransform.


        :return: The minimum of this FieldTransform.
        :rtype: Value
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this FieldTransform.


        :param minimum: The minimum of this FieldTransform.
        :type minimum: Value
        """

        self._minimum = minimum

    @property
    def remove_all_from_array(self):
        """Gets the remove_all_from_array of this FieldTransform.


        :return: The remove_all_from_array of this FieldTransform.
        :rtype: ArrayValue
        """
        return self._remove_all_from_array

    @remove_all_from_array.setter
    def remove_all_from_array(self, remove_all_from_array):
        """Sets the remove_all_from_array of this FieldTransform.


        :param remove_all_from_array: The remove_all_from_array of this FieldTransform.
        :type remove_all_from_array: ArrayValue
        """

        self._remove_all_from_array = remove_all_from_array

    @property
    def set_to_server_value(self):
        """Gets the set_to_server_value of this FieldTransform.

        Sets the field to the given server value.

        :return: The set_to_server_value of this FieldTransform.
        :rtype: str
        """
        return self._set_to_server_value

    @set_to_server_value.setter
    def set_to_server_value(self, set_to_server_value):
        """Sets the set_to_server_value of this FieldTransform.

        Sets the field to the given server value.

        :param set_to_server_value: The set_to_server_value of this FieldTransform.
        :type set_to_server_value: str
        """
        allowed_values = ["SERVER_VALUE_UNSPECIFIED", "REQUEST_TIME"]  # noqa: E501
        if set_to_server_value not in allowed_values:
            raise ValueError(
                "Invalid value for `set_to_server_value` ({0}), must be one of {1}"
                .format(set_to_server_value, allowed_values)
            )

        self._set_to_server_value = set_to_server_value
