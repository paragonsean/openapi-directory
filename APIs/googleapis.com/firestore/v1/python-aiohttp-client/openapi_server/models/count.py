# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Count(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, up_to: str=None):
        """Count - a model defined in OpenAPI

        :param up_to: The up_to of this Count.
        """
        self.openapi_types = {
            'up_to': str
        }

        self.attribute_map = {
            'up_to': 'upTo'
        }

        self._up_to = up_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Count':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Count of this Count.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def up_to(self):
        """Gets the up_to of this Count.

        Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present.

        :return: The up_to of this Count.
        :rtype: str
        """
        return self._up_to

    @up_to.setter
    def up_to(self, up_to):
        """Sets the up_to of this Count.

        Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present.

        :param up_to: The up_to of this Count.
        :type up_to: str
        """

        self._up_to = up_to
