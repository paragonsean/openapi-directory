# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_change import DocumentChange
from openapi_server.models.document_delete import DocumentDelete
from openapi_server.models.document_remove import DocumentRemove
from openapi_server.models.existence_filter import ExistenceFilter
from openapi_server.models.target_change import TargetChange
from openapi_server import util


class ListenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_change: DocumentChange=None, document_delete: DocumentDelete=None, document_remove: DocumentRemove=None, filter: ExistenceFilter=None, target_change: TargetChange=None):
        """ListenResponse - a model defined in OpenAPI

        :param document_change: The document_change of this ListenResponse.
        :param document_delete: The document_delete of this ListenResponse.
        :param document_remove: The document_remove of this ListenResponse.
        :param filter: The filter of this ListenResponse.
        :param target_change: The target_change of this ListenResponse.
        """
        self.openapi_types = {
            'document_change': DocumentChange,
            'document_delete': DocumentDelete,
            'document_remove': DocumentRemove,
            'filter': ExistenceFilter,
            'target_change': TargetChange
        }

        self.attribute_map = {
            'document_change': 'documentChange',
            'document_delete': 'documentDelete',
            'document_remove': 'documentRemove',
            'filter': 'filter',
            'target_change': 'targetChange'
        }

        self._document_change = document_change
        self._document_delete = document_delete
        self._document_remove = document_remove
        self._filter = filter
        self._target_change = target_change

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListenResponse of this ListenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_change(self):
        """Gets the document_change of this ListenResponse.


        :return: The document_change of this ListenResponse.
        :rtype: DocumentChange
        """
        return self._document_change

    @document_change.setter
    def document_change(self, document_change):
        """Sets the document_change of this ListenResponse.


        :param document_change: The document_change of this ListenResponse.
        :type document_change: DocumentChange
        """

        self._document_change = document_change

    @property
    def document_delete(self):
        """Gets the document_delete of this ListenResponse.


        :return: The document_delete of this ListenResponse.
        :rtype: DocumentDelete
        """
        return self._document_delete

    @document_delete.setter
    def document_delete(self, document_delete):
        """Sets the document_delete of this ListenResponse.


        :param document_delete: The document_delete of this ListenResponse.
        :type document_delete: DocumentDelete
        """

        self._document_delete = document_delete

    @property
    def document_remove(self):
        """Gets the document_remove of this ListenResponse.


        :return: The document_remove of this ListenResponse.
        :rtype: DocumentRemove
        """
        return self._document_remove

    @document_remove.setter
    def document_remove(self, document_remove):
        """Sets the document_remove of this ListenResponse.


        :param document_remove: The document_remove of this ListenResponse.
        :type document_remove: DocumentRemove
        """

        self._document_remove = document_remove

    @property
    def filter(self):
        """Gets the filter of this ListenResponse.


        :return: The filter of this ListenResponse.
        :rtype: ExistenceFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListenResponse.


        :param filter: The filter of this ListenResponse.
        :type filter: ExistenceFilter
        """

        self._filter = filter

    @property
    def target_change(self):
        """Gets the target_change of this ListenResponse.


        :return: The target_change of this ListenResponse.
        :rtype: TargetChange
        """
        return self._target_change

    @target_change.setter
    def target_change(self, target_change):
        """Sets the target_change of this ListenResponse.


        :param target_change: The target_change of this ListenResponse.
        :type target_change: TargetChange
        """

        self._target_change = target_change
