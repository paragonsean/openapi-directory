# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_transform import FieldTransform
from openapi_server import util


class DocumentTransform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: str=None, field_transforms: List[FieldTransform]=None):
        """DocumentTransform - a model defined in OpenAPI

        :param document: The document of this DocumentTransform.
        :param field_transforms: The field_transforms of this DocumentTransform.
        """
        self.openapi_types = {
            'document': str,
            'field_transforms': List[FieldTransform]
        }

        self.attribute_map = {
            'document': 'document',
            'field_transforms': 'fieldTransforms'
        }

        self._document = document
        self._field_transforms = field_transforms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentTransform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentTransform of this DocumentTransform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this DocumentTransform.

        The name of the document to transform.

        :return: The document of this DocumentTransform.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this DocumentTransform.

        The name of the document to transform.

        :param document: The document of this DocumentTransform.
        :type document: str
        """

        self._document = document

    @property
    def field_transforms(self):
        """Gets the field_transforms of this DocumentTransform.

        The list of transformations to apply to the fields of the document, in order. This must not be empty.

        :return: The field_transforms of this DocumentTransform.
        :rtype: List[FieldTransform]
        """
        return self._field_transforms

    @field_transforms.setter
    def field_transforms(self, field_transforms):
        """Sets the field_transforms of this DocumentTransform.

        The list of transformations to apply to the fields of the document, in order. This must not be empty.

        :param field_transforms: The field_transforms of this DocumentTransform.
        :type field_transforms: List[FieldTransform]
        """

        self._field_transforms = field_transforms
