# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bloom_filter import BloomFilter
from openapi_server import util


class ExistenceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, target_id: int=None, unchanged_names: BloomFilter=None):
        """ExistenceFilter - a model defined in OpenAPI

        :param count: The count of this ExistenceFilter.
        :param target_id: The target_id of this ExistenceFilter.
        :param unchanged_names: The unchanged_names of this ExistenceFilter.
        """
        self.openapi_types = {
            'count': int,
            'target_id': int,
            'unchanged_names': BloomFilter
        }

        self.attribute_map = {
            'count': 'count',
            'target_id': 'targetId',
            'unchanged_names': 'unchangedNames'
        }

        self._count = count
        self._target_id = target_id
        self._unchanged_names = unchanged_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExistenceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExistenceFilter of this ExistenceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ExistenceFilter.

        The total count of documents that match target_id. If different from the count of documents in the client that match, the client must manually determine which documents no longer match the target. The client can use the `unchanged_names` bloom filter to assist with this determination by testing ALL the document names against the filter; if the document name is NOT in the filter, it means the document no longer matches the target.

        :return: The count of this ExistenceFilter.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ExistenceFilter.

        The total count of documents that match target_id. If different from the count of documents in the client that match, the client must manually determine which documents no longer match the target. The client can use the `unchanged_names` bloom filter to assist with this determination by testing ALL the document names against the filter; if the document name is NOT in the filter, it means the document no longer matches the target.

        :param count: The count of this ExistenceFilter.
        :type count: int
        """

        self._count = count

    @property
    def target_id(self):
        """Gets the target_id of this ExistenceFilter.

        The target ID to which this filter applies.

        :return: The target_id of this ExistenceFilter.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this ExistenceFilter.

        The target ID to which this filter applies.

        :param target_id: The target_id of this ExistenceFilter.
        :type target_id: int
        """

        self._target_id = target_id

    @property
    def unchanged_names(self):
        """Gets the unchanged_names of this ExistenceFilter.


        :return: The unchanged_names of this ExistenceFilter.
        :rtype: BloomFilter
        """
        return self._unchanged_names

    @unchanged_names.setter
    def unchanged_names(self, unchanged_names):
        """Sets the unchanged_names of this ExistenceFilter.


        :param unchanged_names: The unchanged_names of this ExistenceFilter.
        :type unchanged_names: BloomFilter
        """

        self._unchanged_names = unchanged_names
