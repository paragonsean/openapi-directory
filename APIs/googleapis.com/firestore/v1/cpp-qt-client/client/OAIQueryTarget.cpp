/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryTarget::OAIQueryTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryTarget::OAIQueryTarget() {
    this->initializeModel();
}

OAIQueryTarget::~OAIQueryTarget() {}

void OAIQueryTarget::initializeModel() {

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_structured_query_isSet = false;
    m_structured_query_isValid = false;
}

void OAIQueryTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryTarget::fromJsonObject(QJsonObject json) {

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_structured_query_isValid = ::OpenAPI::fromJsonValue(m_structured_query, json[QString("structuredQuery")]);
    m_structured_query_isSet = !json[QString("structuredQuery")].isNull() && m_structured_query_isValid;
}

QString OAIQueryTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_structured_query.isSet()) {
        obj.insert(QString("structuredQuery"), ::OpenAPI::toJsonValue(m_structured_query));
    }
    return obj;
}

QString OAIQueryTarget::getParent() const {
    return m_parent;
}
void OAIQueryTarget::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIQueryTarget::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIQueryTarget::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIStructuredQuery OAIQueryTarget::getStructuredQuery() const {
    return m_structured_query;
}
void OAIQueryTarget::setStructuredQuery(const OAIStructuredQuery &structured_query) {
    m_structured_query = structured_query;
    m_structured_query_isSet = true;
}

bool OAIQueryTarget::is_structured_query_Set() const{
    return m_structured_query_isSet;
}

bool OAIQueryTarget::is_structured_query_Valid() const{
    return m_structured_query_isValid;
}

bool OAIQueryTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
