/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1BackupSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1BackupSchedule::OAIGoogleFirestoreAdminV1BackupSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1BackupSchedule::OAIGoogleFirestoreAdminV1BackupSchedule() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1BackupSchedule::~OAIGoogleFirestoreAdminV1BackupSchedule() {}

void OAIGoogleFirestoreAdminV1BackupSchedule::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_daily_recurrence_isSet = false;
    m_daily_recurrence_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_retention_isSet = false;
    m_retention_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_weekly_recurrence_isSet = false;
    m_weekly_recurrence_isValid = false;
}

void OAIGoogleFirestoreAdminV1BackupSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1BackupSchedule::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_daily_recurrence_isValid = ::OpenAPI::fromJsonValue(m_daily_recurrence, json[QString("dailyRecurrence")]);
    m_daily_recurrence_isSet = !json[QString("dailyRecurrence")].isNull() && m_daily_recurrence_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_retention_isValid = ::OpenAPI::fromJsonValue(m_retention, json[QString("retention")]);
    m_retention_isSet = !json[QString("retention")].isNull() && m_retention_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_weekly_recurrence_isValid = ::OpenAPI::fromJsonValue(m_weekly_recurrence, json[QString("weeklyRecurrence")]);
    m_weekly_recurrence_isSet = !json[QString("weeklyRecurrence")].isNull() && m_weekly_recurrence_isValid;
}

QString OAIGoogleFirestoreAdminV1BackupSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1BackupSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_daily_recurrence_isSet) {
        obj.insert(QString("dailyRecurrence"), ::OpenAPI::toJsonValue(m_daily_recurrence));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_retention_isSet) {
        obj.insert(QString("retention"), ::OpenAPI::toJsonValue(m_retention));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_weekly_recurrence.isSet()) {
        obj.insert(QString("weeklyRecurrence"), ::OpenAPI::toJsonValue(m_weekly_recurrence));
    }
    return obj;
}

QString OAIGoogleFirestoreAdminV1BackupSchedule::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleFirestoreAdminV1BackupSchedule::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIObject OAIGoogleFirestoreAdminV1BackupSchedule::getDailyRecurrence() const {
    return m_daily_recurrence;
}
void OAIGoogleFirestoreAdminV1BackupSchedule::setDailyRecurrence(const OAIObject &daily_recurrence) {
    m_daily_recurrence = daily_recurrence;
    m_daily_recurrence_isSet = true;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_daily_recurrence_Set() const{
    return m_daily_recurrence_isSet;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_daily_recurrence_Valid() const{
    return m_daily_recurrence_isValid;
}

QString OAIGoogleFirestoreAdminV1BackupSchedule::getName() const {
    return m_name;
}
void OAIGoogleFirestoreAdminV1BackupSchedule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleFirestoreAdminV1BackupSchedule::getRetention() const {
    return m_retention;
}
void OAIGoogleFirestoreAdminV1BackupSchedule::setRetention(const QString &retention) {
    m_retention = retention;
    m_retention_isSet = true;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_retention_Set() const{
    return m_retention_isSet;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_retention_Valid() const{
    return m_retention_isValid;
}

QString OAIGoogleFirestoreAdminV1BackupSchedule::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleFirestoreAdminV1BackupSchedule::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIGoogleFirestoreAdminV1WeeklyRecurrence OAIGoogleFirestoreAdminV1BackupSchedule::getWeeklyRecurrence() const {
    return m_weekly_recurrence;
}
void OAIGoogleFirestoreAdminV1BackupSchedule::setWeeklyRecurrence(const OAIGoogleFirestoreAdminV1WeeklyRecurrence &weekly_recurrence) {
    m_weekly_recurrence = weekly_recurrence;
    m_weekly_recurrence_isSet = true;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_weekly_recurrence_Set() const{
    return m_weekly_recurrence_isSet;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::is_weekly_recurrence_Valid() const{
    return m_weekly_recurrence_isValid;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1BackupSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
