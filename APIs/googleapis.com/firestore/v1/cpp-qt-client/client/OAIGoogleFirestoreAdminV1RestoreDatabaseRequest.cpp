/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1RestoreDatabaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::OAIGoogleFirestoreAdminV1RestoreDatabaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::OAIGoogleFirestoreAdminV1RestoreDatabaseRequest() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::~OAIGoogleFirestoreAdminV1RestoreDatabaseRequest() {}

void OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_database_snapshot_isSet = false;
    m_database_snapshot_isValid = false;
}

void OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_database_snapshot_isValid = ::OpenAPI::fromJsonValue(m_database_snapshot, json[QString("databaseSnapshot")]);
    m_database_snapshot_isSet = !json[QString("databaseSnapshot")].isNull() && m_database_snapshot_isValid;
}

QString OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_isSet) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_database_snapshot.isSet()) {
        obj.insert(QString("databaseSnapshot"), ::OpenAPI::toJsonValue(m_database_snapshot));
    }
    return obj;
}

QString OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::getBackup() const {
    return m_backup;
}
void OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::setBackup(const QString &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::is_backup_Valid() const{
    return m_backup_isValid;
}

QString OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::getDatabaseId() const {
    return m_database_id;
}
void OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::is_database_id_Valid() const{
    return m_database_id_isValid;
}

OAIGoogleFirestoreAdminV1DatabaseSnapshot OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::getDatabaseSnapshot() const {
    return m_database_snapshot;
}
void OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::setDatabaseSnapshot(const OAIGoogleFirestoreAdminV1DatabaseSnapshot &database_snapshot) {
    m_database_snapshot = database_snapshot;
    m_database_snapshot_isSet = true;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::is_database_snapshot_Set() const{
    return m_database_snapshot_isSet;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::is_database_snapshot_Valid() const{
    return m_database_snapshot_isValid;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1RestoreDatabaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
