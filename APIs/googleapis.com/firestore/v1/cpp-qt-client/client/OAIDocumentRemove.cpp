/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentRemove.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentRemove::OAIDocumentRemove(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentRemove::OAIDocumentRemove() {
    this->initializeModel();
}

OAIDocumentRemove::~OAIDocumentRemove() {}

void OAIDocumentRemove::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_removed_target_ids_isSet = false;
    m_removed_target_ids_isValid = false;
}

void OAIDocumentRemove::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentRemove::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_removed_target_ids_isValid = ::OpenAPI::fromJsonValue(m_removed_target_ids, json[QString("removedTargetIds")]);
    m_removed_target_ids_isSet = !json[QString("removedTargetIds")].isNull() && m_removed_target_ids_isValid;
}

QString OAIDocumentRemove::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentRemove::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_removed_target_ids.size() > 0) {
        obj.insert(QString("removedTargetIds"), ::OpenAPI::toJsonValue(m_removed_target_ids));
    }
    return obj;
}

QString OAIDocumentRemove::getDocument() const {
    return m_document;
}
void OAIDocumentRemove::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIDocumentRemove::is_document_Set() const{
    return m_document_isSet;
}

bool OAIDocumentRemove::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIDocumentRemove::getReadTime() const {
    return m_read_time;
}
void OAIDocumentRemove::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIDocumentRemove::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIDocumentRemove::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QList<qint32> OAIDocumentRemove::getRemovedTargetIds() const {
    return m_removed_target_ids;
}
void OAIDocumentRemove::setRemovedTargetIds(const QList<qint32> &removed_target_ids) {
    m_removed_target_ids = removed_target_ids;
    m_removed_target_ids_isSet = true;
}

bool OAIDocumentRemove::is_removed_target_ids_Set() const{
    return m_removed_target_ids_isSet;
}

bool OAIDocumentRemove::is_removed_target_ids_Valid() const{
    return m_removed_target_ids_isValid;
}

bool OAIDocumentRemove::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_target_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentRemove::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
