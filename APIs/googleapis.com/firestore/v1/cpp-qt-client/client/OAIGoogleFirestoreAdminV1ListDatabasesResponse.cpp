/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1ListDatabasesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1ListDatabasesResponse::OAIGoogleFirestoreAdminV1ListDatabasesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1ListDatabasesResponse::OAIGoogleFirestoreAdminV1ListDatabasesResponse() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1ListDatabasesResponse::~OAIGoogleFirestoreAdminV1ListDatabasesResponse() {}

void OAIGoogleFirestoreAdminV1ListDatabasesResponse::initializeModel() {

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIGoogleFirestoreAdminV1ListDatabasesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1ListDatabasesResponse::fromJsonObject(QJsonObject json) {

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("databases")]);
    m_databases_isSet = !json[QString("databases")].isNull() && m_databases_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIGoogleFirestoreAdminV1ListDatabasesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1ListDatabasesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_databases.size() > 0) {
        obj.insert(QString("databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QList<OAIGoogleFirestoreAdminV1Database> OAIGoogleFirestoreAdminV1ListDatabasesResponse::getDatabases() const {
    return m_databases;
}
void OAIGoogleFirestoreAdminV1ListDatabasesResponse::setDatabases(const QList<OAIGoogleFirestoreAdminV1Database> &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ListDatabasesResponse::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIGoogleFirestoreAdminV1ListDatabasesResponse::is_databases_Valid() const{
    return m_databases_isValid;
}

QList<QString> OAIGoogleFirestoreAdminV1ListDatabasesResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIGoogleFirestoreAdminV1ListDatabasesResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ListDatabasesResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIGoogleFirestoreAdminV1ListDatabasesResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIGoogleFirestoreAdminV1ListDatabasesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1ListDatabasesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
