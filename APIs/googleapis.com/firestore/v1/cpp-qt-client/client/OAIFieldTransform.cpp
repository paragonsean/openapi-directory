/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldTransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldTransform::OAIFieldTransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldTransform::OAIFieldTransform() {
    this->initializeModel();
}

OAIFieldTransform::~OAIFieldTransform() {}

void OAIFieldTransform::initializeModel() {

    m_append_missing_elements_isSet = false;
    m_append_missing_elements_isValid = false;

    m_field_path_isSet = false;
    m_field_path_isValid = false;

    m_increment_isSet = false;
    m_increment_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_remove_all_from_array_isSet = false;
    m_remove_all_from_array_isValid = false;

    m_set_to_server_value_isSet = false;
    m_set_to_server_value_isValid = false;
}

void OAIFieldTransform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldTransform::fromJsonObject(QJsonObject json) {

    m_append_missing_elements_isValid = ::OpenAPI::fromJsonValue(m_append_missing_elements, json[QString("appendMissingElements")]);
    m_append_missing_elements_isSet = !json[QString("appendMissingElements")].isNull() && m_append_missing_elements_isValid;

    m_field_path_isValid = ::OpenAPI::fromJsonValue(m_field_path, json[QString("fieldPath")]);
    m_field_path_isSet = !json[QString("fieldPath")].isNull() && m_field_path_isValid;

    m_increment_isValid = ::OpenAPI::fromJsonValue(m_increment, json[QString("increment")]);
    m_increment_isSet = !json[QString("increment")].isNull() && m_increment_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_remove_all_from_array_isValid = ::OpenAPI::fromJsonValue(m_remove_all_from_array, json[QString("removeAllFromArray")]);
    m_remove_all_from_array_isSet = !json[QString("removeAllFromArray")].isNull() && m_remove_all_from_array_isValid;

    m_set_to_server_value_isValid = ::OpenAPI::fromJsonValue(m_set_to_server_value, json[QString("setToServerValue")]);
    m_set_to_server_value_isSet = !json[QString("setToServerValue")].isNull() && m_set_to_server_value_isValid;
}

QString OAIFieldTransform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldTransform::asJsonObject() const {
    QJsonObject obj;
    if (m_append_missing_elements.isSet()) {
        obj.insert(QString("appendMissingElements"), ::OpenAPI::toJsonValue(m_append_missing_elements));
    }
    if (m_field_path_isSet) {
        obj.insert(QString("fieldPath"), ::OpenAPI::toJsonValue(m_field_path));
    }
    if (m_increment.isSet()) {
        obj.insert(QString("increment"), ::OpenAPI::toJsonValue(m_increment));
    }
    if (m_maximum.isSet()) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum.isSet()) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_remove_all_from_array.isSet()) {
        obj.insert(QString("removeAllFromArray"), ::OpenAPI::toJsonValue(m_remove_all_from_array));
    }
    if (m_set_to_server_value_isSet) {
        obj.insert(QString("setToServerValue"), ::OpenAPI::toJsonValue(m_set_to_server_value));
    }
    return obj;
}

OAIArrayValue OAIFieldTransform::getAppendMissingElements() const {
    return m_append_missing_elements;
}
void OAIFieldTransform::setAppendMissingElements(const OAIArrayValue &append_missing_elements) {
    m_append_missing_elements = append_missing_elements;
    m_append_missing_elements_isSet = true;
}

bool OAIFieldTransform::is_append_missing_elements_Set() const{
    return m_append_missing_elements_isSet;
}

bool OAIFieldTransform::is_append_missing_elements_Valid() const{
    return m_append_missing_elements_isValid;
}

QString OAIFieldTransform::getFieldPath() const {
    return m_field_path;
}
void OAIFieldTransform::setFieldPath(const QString &field_path) {
    m_field_path = field_path;
    m_field_path_isSet = true;
}

bool OAIFieldTransform::is_field_path_Set() const{
    return m_field_path_isSet;
}

bool OAIFieldTransform::is_field_path_Valid() const{
    return m_field_path_isValid;
}

OAIValue OAIFieldTransform::getIncrement() const {
    return m_increment;
}
void OAIFieldTransform::setIncrement(const OAIValue &increment) {
    m_increment = increment;
    m_increment_isSet = true;
}

bool OAIFieldTransform::is_increment_Set() const{
    return m_increment_isSet;
}

bool OAIFieldTransform::is_increment_Valid() const{
    return m_increment_isValid;
}

OAIValue OAIFieldTransform::getMaximum() const {
    return m_maximum;
}
void OAIFieldTransform::setMaximum(const OAIValue &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIFieldTransform::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIFieldTransform::is_maximum_Valid() const{
    return m_maximum_isValid;
}

OAIValue OAIFieldTransform::getMinimum() const {
    return m_minimum;
}
void OAIFieldTransform::setMinimum(const OAIValue &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIFieldTransform::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIFieldTransform::is_minimum_Valid() const{
    return m_minimum_isValid;
}

OAIArrayValue OAIFieldTransform::getRemoveAllFromArray() const {
    return m_remove_all_from_array;
}
void OAIFieldTransform::setRemoveAllFromArray(const OAIArrayValue &remove_all_from_array) {
    m_remove_all_from_array = remove_all_from_array;
    m_remove_all_from_array_isSet = true;
}

bool OAIFieldTransform::is_remove_all_from_array_Set() const{
    return m_remove_all_from_array_isSet;
}

bool OAIFieldTransform::is_remove_all_from_array_Valid() const{
    return m_remove_all_from_array_isValid;
}

QString OAIFieldTransform::getSetToServerValue() const {
    return m_set_to_server_value;
}
void OAIFieldTransform::setSetToServerValue(const QString &set_to_server_value) {
    m_set_to_server_value = set_to_server_value;
    m_set_to_server_value_isSet = true;
}

bool OAIFieldTransform::is_set_to_server_value_Set() const{
    return m_set_to_server_value_isSet;
}

bool OAIFieldTransform::is_set_to_server_value_Valid() const{
    return m_set_to_server_value_isValid;
}

bool OAIFieldTransform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_append_missing_elements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_all_from_array.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_to_server_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldTransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
