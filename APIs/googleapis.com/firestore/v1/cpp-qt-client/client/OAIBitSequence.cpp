/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBitSequence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBitSequence::OAIBitSequence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBitSequence::OAIBitSequence() {
    this->initializeModel();
}

OAIBitSequence::~OAIBitSequence() {}

void OAIBitSequence::initializeModel() {

    m_bitmap_isSet = false;
    m_bitmap_isValid = false;

    m_padding_isSet = false;
    m_padding_isValid = false;
}

void OAIBitSequence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBitSequence::fromJsonObject(QJsonObject json) {

    m_bitmap_isValid = ::OpenAPI::fromJsonValue(m_bitmap, json[QString("bitmap")]);
    m_bitmap_isSet = !json[QString("bitmap")].isNull() && m_bitmap_isValid;

    m_padding_isValid = ::OpenAPI::fromJsonValue(m_padding, json[QString("padding")]);
    m_padding_isSet = !json[QString("padding")].isNull() && m_padding_isValid;
}

QString OAIBitSequence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBitSequence::asJsonObject() const {
    QJsonObject obj;
    if (m_bitmap_isSet) {
        obj.insert(QString("bitmap"), ::OpenAPI::toJsonValue(m_bitmap));
    }
    if (m_padding_isSet) {
        obj.insert(QString("padding"), ::OpenAPI::toJsonValue(m_padding));
    }
    return obj;
}

QByteArray OAIBitSequence::getBitmap() const {
    return m_bitmap;
}
void OAIBitSequence::setBitmap(const QByteArray &bitmap) {
    m_bitmap = bitmap;
    m_bitmap_isSet = true;
}

bool OAIBitSequence::is_bitmap_Set() const{
    return m_bitmap_isSet;
}

bool OAIBitSequence::is_bitmap_Valid() const{
    return m_bitmap_isValid;
}

qint32 OAIBitSequence::getPadding() const {
    return m_padding;
}
void OAIBitSequence::setPadding(const qint32 &padding) {
    m_padding = padding;
    m_padding_isSet = true;
}

bool OAIBitSequence::is_padding_Set() const{
    return m_padding_isSet;
}

bool OAIBitSequence::is_padding_Valid() const{
    return m_padding_isValid;
}

bool OAIBitSequence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitmap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBitSequence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
