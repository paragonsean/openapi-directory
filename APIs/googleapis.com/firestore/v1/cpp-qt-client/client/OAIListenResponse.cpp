/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListenResponse::OAIListenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListenResponse::OAIListenResponse() {
    this->initializeModel();
}

OAIListenResponse::~OAIListenResponse() {}

void OAIListenResponse::initializeModel() {

    m_document_change_isSet = false;
    m_document_change_isValid = false;

    m_document_delete_isSet = false;
    m_document_delete_isValid = false;

    m_document_remove_isSet = false;
    m_document_remove_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_target_change_isSet = false;
    m_target_change_isValid = false;
}

void OAIListenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListenResponse::fromJsonObject(QJsonObject json) {

    m_document_change_isValid = ::OpenAPI::fromJsonValue(m_document_change, json[QString("documentChange")]);
    m_document_change_isSet = !json[QString("documentChange")].isNull() && m_document_change_isValid;

    m_document_delete_isValid = ::OpenAPI::fromJsonValue(m_document_delete, json[QString("documentDelete")]);
    m_document_delete_isSet = !json[QString("documentDelete")].isNull() && m_document_delete_isValid;

    m_document_remove_isValid = ::OpenAPI::fromJsonValue(m_document_remove, json[QString("documentRemove")]);
    m_document_remove_isSet = !json[QString("documentRemove")].isNull() && m_document_remove_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_target_change_isValid = ::OpenAPI::fromJsonValue(m_target_change, json[QString("targetChange")]);
    m_target_change_isSet = !json[QString("targetChange")].isNull() && m_target_change_isValid;
}

QString OAIListenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_change.isSet()) {
        obj.insert(QString("documentChange"), ::OpenAPI::toJsonValue(m_document_change));
    }
    if (m_document_delete.isSet()) {
        obj.insert(QString("documentDelete"), ::OpenAPI::toJsonValue(m_document_delete));
    }
    if (m_document_remove.isSet()) {
        obj.insert(QString("documentRemove"), ::OpenAPI::toJsonValue(m_document_remove));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_target_change.isSet()) {
        obj.insert(QString("targetChange"), ::OpenAPI::toJsonValue(m_target_change));
    }
    return obj;
}

OAIDocumentChange OAIListenResponse::getDocumentChange() const {
    return m_document_change;
}
void OAIListenResponse::setDocumentChange(const OAIDocumentChange &document_change) {
    m_document_change = document_change;
    m_document_change_isSet = true;
}

bool OAIListenResponse::is_document_change_Set() const{
    return m_document_change_isSet;
}

bool OAIListenResponse::is_document_change_Valid() const{
    return m_document_change_isValid;
}

OAIDocumentDelete OAIListenResponse::getDocumentDelete() const {
    return m_document_delete;
}
void OAIListenResponse::setDocumentDelete(const OAIDocumentDelete &document_delete) {
    m_document_delete = document_delete;
    m_document_delete_isSet = true;
}

bool OAIListenResponse::is_document_delete_Set() const{
    return m_document_delete_isSet;
}

bool OAIListenResponse::is_document_delete_Valid() const{
    return m_document_delete_isValid;
}

OAIDocumentRemove OAIListenResponse::getDocumentRemove() const {
    return m_document_remove;
}
void OAIListenResponse::setDocumentRemove(const OAIDocumentRemove &document_remove) {
    m_document_remove = document_remove;
    m_document_remove_isSet = true;
}

bool OAIListenResponse::is_document_remove_Set() const{
    return m_document_remove_isSet;
}

bool OAIListenResponse::is_document_remove_Valid() const{
    return m_document_remove_isValid;
}

OAIExistenceFilter OAIListenResponse::getFilter() const {
    return m_filter;
}
void OAIListenResponse::setFilter(const OAIExistenceFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListenResponse::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListenResponse::is_filter_Valid() const{
    return m_filter_isValid;
}

OAITargetChange OAIListenResponse::getTargetChange() const {
    return m_target_change;
}
void OAIListenResponse::setTargetChange(const OAITargetChange &target_change) {
    m_target_change = target_change;
    m_target_change_isSet = true;
}

bool OAIListenResponse::is_target_change_Set() const{
    return m_target_change_isSet;
}

bool OAIListenResponse::is_target_change_Valid() const{
    return m_target_change_isValid;
}

bool OAIListenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_change.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
