/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1Field.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1Field::OAIGoogleFirestoreAdminV1Field(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1Field::OAIGoogleFirestoreAdminV1Field() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1Field::~OAIGoogleFirestoreAdminV1Field() {}

void OAIGoogleFirestoreAdminV1Field::initializeModel() {

    m_index_config_isSet = false;
    m_index_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ttl_config_isSet = false;
    m_ttl_config_isValid = false;
}

void OAIGoogleFirestoreAdminV1Field::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1Field::fromJsonObject(QJsonObject json) {

    m_index_config_isValid = ::OpenAPI::fromJsonValue(m_index_config, json[QString("indexConfig")]);
    m_index_config_isSet = !json[QString("indexConfig")].isNull() && m_index_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ttl_config_isValid = ::OpenAPI::fromJsonValue(m_ttl_config, json[QString("ttlConfig")]);
    m_ttl_config_isSet = !json[QString("ttlConfig")].isNull() && m_ttl_config_isValid;
}

QString OAIGoogleFirestoreAdminV1Field::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1Field::asJsonObject() const {
    QJsonObject obj;
    if (m_index_config.isSet()) {
        obj.insert(QString("indexConfig"), ::OpenAPI::toJsonValue(m_index_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ttl_config.isSet()) {
        obj.insert(QString("ttlConfig"), ::OpenAPI::toJsonValue(m_ttl_config));
    }
    return obj;
}

OAIGoogleFirestoreAdminV1IndexConfig OAIGoogleFirestoreAdminV1Field::getIndexConfig() const {
    return m_index_config;
}
void OAIGoogleFirestoreAdminV1Field::setIndexConfig(const OAIGoogleFirestoreAdminV1IndexConfig &index_config) {
    m_index_config = index_config;
    m_index_config_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Field::is_index_config_Set() const{
    return m_index_config_isSet;
}

bool OAIGoogleFirestoreAdminV1Field::is_index_config_Valid() const{
    return m_index_config_isValid;
}

QString OAIGoogleFirestoreAdminV1Field::getName() const {
    return m_name;
}
void OAIGoogleFirestoreAdminV1Field::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Field::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleFirestoreAdminV1Field::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleFirestoreAdminV1TtlConfig OAIGoogleFirestoreAdminV1Field::getTtlConfig() const {
    return m_ttl_config;
}
void OAIGoogleFirestoreAdminV1Field::setTtlConfig(const OAIGoogleFirestoreAdminV1TtlConfig &ttl_config) {
    m_ttl_config = ttl_config;
    m_ttl_config_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Field::is_ttl_config_Set() const{
    return m_ttl_config_isSet;
}

bool OAIGoogleFirestoreAdminV1Field::is_ttl_config_Valid() const{
    return m_ttl_config_isValid;
}

bool OAIGoogleFirestoreAdminV1Field::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1Field::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
