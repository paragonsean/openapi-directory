/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetDocumentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetDocumentsRequest::OAIBatchGetDocumentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetDocumentsRequest::OAIBatchGetDocumentsRequest() {
    this->initializeModel();
}

OAIBatchGetDocumentsRequest::~OAIBatchGetDocumentsRequest() {}

void OAIBatchGetDocumentsRequest::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_new_transaction_isSet = false;
    m_new_transaction_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIBatchGetDocumentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetDocumentsRequest::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_new_transaction_isValid = ::OpenAPI::fromJsonValue(m_new_transaction, json[QString("newTransaction")]);
    m_new_transaction_isSet = !json[QString("newTransaction")].isNull() && m_new_transaction_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIBatchGetDocumentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetDocumentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_mask.isSet()) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_new_transaction.isSet()) {
        obj.insert(QString("newTransaction"), ::OpenAPI::toJsonValue(m_new_transaction));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QList<QString> OAIBatchGetDocumentsRequest::getDocuments() const {
    return m_documents;
}
void OAIBatchGetDocumentsRequest::setDocuments(const QList<QString> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIBatchGetDocumentsRequest::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIBatchGetDocumentsRequest::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIDocumentMask OAIBatchGetDocumentsRequest::getMask() const {
    return m_mask;
}
void OAIBatchGetDocumentsRequest::setMask(const OAIDocumentMask &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIBatchGetDocumentsRequest::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIBatchGetDocumentsRequest::is_mask_Valid() const{
    return m_mask_isValid;
}

OAITransactionOptions OAIBatchGetDocumentsRequest::getNewTransaction() const {
    return m_new_transaction;
}
void OAIBatchGetDocumentsRequest::setNewTransaction(const OAITransactionOptions &new_transaction) {
    m_new_transaction = new_transaction;
    m_new_transaction_isSet = true;
}

bool OAIBatchGetDocumentsRequest::is_new_transaction_Set() const{
    return m_new_transaction_isSet;
}

bool OAIBatchGetDocumentsRequest::is_new_transaction_Valid() const{
    return m_new_transaction_isValid;
}

QString OAIBatchGetDocumentsRequest::getReadTime() const {
    return m_read_time;
}
void OAIBatchGetDocumentsRequest::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIBatchGetDocumentsRequest::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIBatchGetDocumentsRequest::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QByteArray OAIBatchGetDocumentsRequest::getTransaction() const {
    return m_transaction;
}
void OAIBatchGetDocumentsRequest::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIBatchGetDocumentsRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIBatchGetDocumentsRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIBatchGetDocumentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetDocumentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
