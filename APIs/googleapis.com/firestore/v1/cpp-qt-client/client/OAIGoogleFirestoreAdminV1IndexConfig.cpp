/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1IndexConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1IndexConfig::OAIGoogleFirestoreAdminV1IndexConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1IndexConfig::OAIGoogleFirestoreAdminV1IndexConfig() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1IndexConfig::~OAIGoogleFirestoreAdminV1IndexConfig() {}

void OAIGoogleFirestoreAdminV1IndexConfig::initializeModel() {

    m_ancestor_field_isSet = false;
    m_ancestor_field_isValid = false;

    m_indexes_isSet = false;
    m_indexes_isValid = false;

    m_reverting_isSet = false;
    m_reverting_isValid = false;

    m_uses_ancestor_config_isSet = false;
    m_uses_ancestor_config_isValid = false;
}

void OAIGoogleFirestoreAdminV1IndexConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1IndexConfig::fromJsonObject(QJsonObject json) {

    m_ancestor_field_isValid = ::OpenAPI::fromJsonValue(m_ancestor_field, json[QString("ancestorField")]);
    m_ancestor_field_isSet = !json[QString("ancestorField")].isNull() && m_ancestor_field_isValid;

    m_indexes_isValid = ::OpenAPI::fromJsonValue(m_indexes, json[QString("indexes")]);
    m_indexes_isSet = !json[QString("indexes")].isNull() && m_indexes_isValid;

    m_reverting_isValid = ::OpenAPI::fromJsonValue(m_reverting, json[QString("reverting")]);
    m_reverting_isSet = !json[QString("reverting")].isNull() && m_reverting_isValid;

    m_uses_ancestor_config_isValid = ::OpenAPI::fromJsonValue(m_uses_ancestor_config, json[QString("usesAncestorConfig")]);
    m_uses_ancestor_config_isSet = !json[QString("usesAncestorConfig")].isNull() && m_uses_ancestor_config_isValid;
}

QString OAIGoogleFirestoreAdminV1IndexConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1IndexConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestor_field_isSet) {
        obj.insert(QString("ancestorField"), ::OpenAPI::toJsonValue(m_ancestor_field));
    }
    if (m_indexes.size() > 0) {
        obj.insert(QString("indexes"), ::OpenAPI::toJsonValue(m_indexes));
    }
    if (m_reverting_isSet) {
        obj.insert(QString("reverting"), ::OpenAPI::toJsonValue(m_reverting));
    }
    if (m_uses_ancestor_config_isSet) {
        obj.insert(QString("usesAncestorConfig"), ::OpenAPI::toJsonValue(m_uses_ancestor_config));
    }
    return obj;
}

QString OAIGoogleFirestoreAdminV1IndexConfig::getAncestorField() const {
    return m_ancestor_field;
}
void OAIGoogleFirestoreAdminV1IndexConfig::setAncestorField(const QString &ancestor_field) {
    m_ancestor_field = ancestor_field;
    m_ancestor_field_isSet = true;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_ancestor_field_Set() const{
    return m_ancestor_field_isSet;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_ancestor_field_Valid() const{
    return m_ancestor_field_isValid;
}

QList<OAIGoogleFirestoreAdminV1Index> OAIGoogleFirestoreAdminV1IndexConfig::getIndexes() const {
    return m_indexes;
}
void OAIGoogleFirestoreAdminV1IndexConfig::setIndexes(const QList<OAIGoogleFirestoreAdminV1Index> &indexes) {
    m_indexes = indexes;
    m_indexes_isSet = true;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_indexes_Set() const{
    return m_indexes_isSet;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_indexes_Valid() const{
    return m_indexes_isValid;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::isReverting() const {
    return m_reverting;
}
void OAIGoogleFirestoreAdminV1IndexConfig::setReverting(const bool &reverting) {
    m_reverting = reverting;
    m_reverting_isSet = true;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_reverting_Set() const{
    return m_reverting_isSet;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_reverting_Valid() const{
    return m_reverting_isValid;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::isUsesAncestorConfig() const {
    return m_uses_ancestor_config;
}
void OAIGoogleFirestoreAdminV1IndexConfig::setUsesAncestorConfig(const bool &uses_ancestor_config) {
    m_uses_ancestor_config = uses_ancestor_config;
    m_uses_ancestor_config_isSet = true;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_uses_ancestor_config_Set() const{
    return m_uses_ancestor_config_isSet;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::is_uses_ancestor_config_Valid() const{
    return m_uses_ancestor_config_isValid;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestor_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_ancestor_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1IndexConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
