/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBloomFilter.h
 *
 * A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as unsigned integers using 2&#39;s complement encoding. These two hash values, named &#x60;h1&#x60; and &#x60;h2&#x60;, are then used to compute the &#x60;hash_count&#x60; hash values using the formula, starting at &#x60;i&#x3D;0&#x60;: h(i) &#x3D; h1 + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to get the bits of the bloom filter to test for the given entry.
 */

#ifndef OAIBloomFilter_H
#define OAIBloomFilter_H

#include <QJsonObject>

#include "OAIBitSequence.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBitSequence;

class OAIBloomFilter : public OAIObject {
public:
    OAIBloomFilter();
    OAIBloomFilter(QString json);
    ~OAIBloomFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBitSequence getBits() const;
    void setBits(const OAIBitSequence &bits);
    bool is_bits_Set() const;
    bool is_bits_Valid() const;

    qint32 getHashCount() const;
    void setHashCount(const qint32 &hash_count);
    bool is_hash_count_Set() const;
    bool is_hash_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBitSequence m_bits;
    bool m_bits_isSet;
    bool m_bits_isValid;

    qint32 m_hash_count;
    bool m_hash_count_isSet;
    bool m_hash_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBloomFilter)

#endif // OAIBloomFilter_H
