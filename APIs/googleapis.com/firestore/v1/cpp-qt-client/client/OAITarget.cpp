/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget::OAITarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget::OAITarget() {
    this->initializeModel();
}

OAITarget::~OAITarget() {}

void OAITarget::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_expected_count_isSet = false;
    m_expected_count_isValid = false;

    m_once_isSet = false;
    m_once_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_resume_token_isSet = false;
    m_resume_token_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;
}

void OAITarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_expected_count_isValid = ::OpenAPI::fromJsonValue(m_expected_count, json[QString("expectedCount")]);
    m_expected_count_isSet = !json[QString("expectedCount")].isNull() && m_expected_count_isValid;

    m_once_isValid = ::OpenAPI::fromJsonValue(m_once, json[QString("once")]);
    m_once_isSet = !json[QString("once")].isNull() && m_once_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_resume_token_isValid = ::OpenAPI::fromJsonValue(m_resume_token, json[QString("resumeToken")]);
    m_resume_token_isSet = !json[QString("resumeToken")].isNull() && m_resume_token_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;
}

QString OAITarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.isSet()) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_expected_count_isSet) {
        obj.insert(QString("expectedCount"), ::OpenAPI::toJsonValue(m_expected_count));
    }
    if (m_once_isSet) {
        obj.insert(QString("once"), ::OpenAPI::toJsonValue(m_once));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_resume_token_isSet) {
        obj.insert(QString("resumeToken"), ::OpenAPI::toJsonValue(m_resume_token));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    return obj;
}

OAIDocumentsTarget OAITarget::getDocuments() const {
    return m_documents;
}
void OAITarget::setDocuments(const OAIDocumentsTarget &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAITarget::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAITarget::is_documents_Valid() const{
    return m_documents_isValid;
}

qint32 OAITarget::getExpectedCount() const {
    return m_expected_count;
}
void OAITarget::setExpectedCount(const qint32 &expected_count) {
    m_expected_count = expected_count;
    m_expected_count_isSet = true;
}

bool OAITarget::is_expected_count_Set() const{
    return m_expected_count_isSet;
}

bool OAITarget::is_expected_count_Valid() const{
    return m_expected_count_isValid;
}

bool OAITarget::isOnce() const {
    return m_once;
}
void OAITarget::setOnce(const bool &once) {
    m_once = once;
    m_once_isSet = true;
}

bool OAITarget::is_once_Set() const{
    return m_once_isSet;
}

bool OAITarget::is_once_Valid() const{
    return m_once_isValid;
}

OAIQueryTarget OAITarget::getQuery() const {
    return m_query;
}
void OAITarget::setQuery(const OAIQueryTarget &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITarget::is_query_Set() const{
    return m_query_isSet;
}

bool OAITarget::is_query_Valid() const{
    return m_query_isValid;
}

QString OAITarget::getReadTime() const {
    return m_read_time;
}
void OAITarget::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAITarget::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAITarget::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QByteArray OAITarget::getResumeToken() const {
    return m_resume_token;
}
void OAITarget::setResumeToken(const QByteArray &resume_token) {
    m_resume_token = resume_token;
    m_resume_token_isSet = true;
}

bool OAITarget::is_resume_token_Set() const{
    return m_resume_token_isSet;
}

bool OAITarget::is_resume_token_Valid() const{
    return m_resume_token_isValid;
}

qint32 OAITarget::getTargetId() const {
    return m_target_id;
}
void OAITarget::setTargetId(const qint32 &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAITarget::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAITarget::is_target_id_Valid() const{
    return m_target_id_isValid;
}

bool OAITarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_once_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
