/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWriteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWriteResponse::OAIWriteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWriteResponse::OAIWriteResponse() {
    this->initializeModel();
}

OAIWriteResponse::~OAIWriteResponse() {}

void OAIWriteResponse::initializeModel() {

    m_commit_time_isSet = false;
    m_commit_time_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;

    m_stream_token_isSet = false;
    m_stream_token_isValid = false;

    m_write_results_isSet = false;
    m_write_results_isValid = false;
}

void OAIWriteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWriteResponse::fromJsonObject(QJsonObject json) {

    m_commit_time_isValid = ::OpenAPI::fromJsonValue(m_commit_time, json[QString("commitTime")]);
    m_commit_time_isSet = !json[QString("commitTime")].isNull() && m_commit_time_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("streamId")]);
    m_stream_id_isSet = !json[QString("streamId")].isNull() && m_stream_id_isValid;

    m_stream_token_isValid = ::OpenAPI::fromJsonValue(m_stream_token, json[QString("streamToken")]);
    m_stream_token_isSet = !json[QString("streamToken")].isNull() && m_stream_token_isValid;

    m_write_results_isValid = ::OpenAPI::fromJsonValue(m_write_results, json[QString("writeResults")]);
    m_write_results_isSet = !json[QString("writeResults")].isNull() && m_write_results_isValid;
}

QString OAIWriteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWriteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_time_isSet) {
        obj.insert(QString("commitTime"), ::OpenAPI::toJsonValue(m_commit_time));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("streamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    if (m_stream_token_isSet) {
        obj.insert(QString("streamToken"), ::OpenAPI::toJsonValue(m_stream_token));
    }
    if (m_write_results.size() > 0) {
        obj.insert(QString("writeResults"), ::OpenAPI::toJsonValue(m_write_results));
    }
    return obj;
}

QString OAIWriteResponse::getCommitTime() const {
    return m_commit_time;
}
void OAIWriteResponse::setCommitTime(const QString &commit_time) {
    m_commit_time = commit_time;
    m_commit_time_isSet = true;
}

bool OAIWriteResponse::is_commit_time_Set() const{
    return m_commit_time_isSet;
}

bool OAIWriteResponse::is_commit_time_Valid() const{
    return m_commit_time_isValid;
}

QString OAIWriteResponse::getStreamId() const {
    return m_stream_id;
}
void OAIWriteResponse::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAIWriteResponse::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAIWriteResponse::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

QByteArray OAIWriteResponse::getStreamToken() const {
    return m_stream_token;
}
void OAIWriteResponse::setStreamToken(const QByteArray &stream_token) {
    m_stream_token = stream_token;
    m_stream_token_isSet = true;
}

bool OAIWriteResponse::is_stream_token_Set() const{
    return m_stream_token_isSet;
}

bool OAIWriteResponse::is_stream_token_Valid() const{
    return m_stream_token_isValid;
}

QList<OAIWriteResult> OAIWriteResponse::getWriteResults() const {
    return m_write_results;
}
void OAIWriteResponse::setWriteResults(const QList<OAIWriteResult> &write_results) {
    m_write_results = write_results;
    m_write_results_isSet = true;
}

bool OAIWriteResponse::is_write_results_Set() const{
    return m_write_results_isSet;
}

bool OAIWriteResponse::is_write_results_Valid() const{
    return m_write_results_isValid;
}

bool OAIWriteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWriteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
