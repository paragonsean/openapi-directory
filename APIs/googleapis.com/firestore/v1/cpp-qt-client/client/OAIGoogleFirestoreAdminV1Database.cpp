/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1Database.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1Database::OAIGoogleFirestoreAdminV1Database(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1Database::OAIGoogleFirestoreAdminV1Database() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1Database::~OAIGoogleFirestoreAdminV1Database() {}

void OAIGoogleFirestoreAdminV1Database::initializeModel() {

    m_app_engine_integration_mode_isSet = false;
    m_app_engine_integration_mode_isValid = false;

    m_concurrency_mode_isSet = false;
    m_concurrency_mode_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_protection_state_isSet = false;
    m_delete_protection_state_isValid = false;

    m_earliest_version_time_isSet = false;
    m_earliest_version_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_key_prefix_isSet = false;
    m_key_prefix_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_point_in_time_recovery_enablement_isSet = false;
    m_point_in_time_recovery_enablement_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_retention_period_isSet = false;
    m_version_retention_period_isValid = false;
}

void OAIGoogleFirestoreAdminV1Database::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1Database::fromJsonObject(QJsonObject json) {

    m_app_engine_integration_mode_isValid = ::OpenAPI::fromJsonValue(m_app_engine_integration_mode, json[QString("appEngineIntegrationMode")]);
    m_app_engine_integration_mode_isSet = !json[QString("appEngineIntegrationMode")].isNull() && m_app_engine_integration_mode_isValid;

    m_concurrency_mode_isValid = ::OpenAPI::fromJsonValue(m_concurrency_mode, json[QString("concurrencyMode")]);
    m_concurrency_mode_isSet = !json[QString("concurrencyMode")].isNull() && m_concurrency_mode_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_protection_state_isValid = ::OpenAPI::fromJsonValue(m_delete_protection_state, json[QString("deleteProtectionState")]);
    m_delete_protection_state_isSet = !json[QString("deleteProtectionState")].isNull() && m_delete_protection_state_isValid;

    m_earliest_version_time_isValid = ::OpenAPI::fromJsonValue(m_earliest_version_time, json[QString("earliestVersionTime")]);
    m_earliest_version_time_isSet = !json[QString("earliestVersionTime")].isNull() && m_earliest_version_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_key_prefix, json[QString("keyPrefix")]);
    m_key_prefix_isSet = !json[QString("keyPrefix")].isNull() && m_key_prefix_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_point_in_time_recovery_enablement_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery_enablement, json[QString("pointInTimeRecoveryEnablement")]);
    m_point_in_time_recovery_enablement_isSet = !json[QString("pointInTimeRecoveryEnablement")].isNull() && m_point_in_time_recovery_enablement_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_retention_period_isValid = ::OpenAPI::fromJsonValue(m_version_retention_period, json[QString("versionRetentionPeriod")]);
    m_version_retention_period_isSet = !json[QString("versionRetentionPeriod")].isNull() && m_version_retention_period_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1Database::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine_integration_mode_isSet) {
        obj.insert(QString("appEngineIntegrationMode"), ::OpenAPI::toJsonValue(m_app_engine_integration_mode));
    }
    if (m_concurrency_mode_isSet) {
        obj.insert(QString("concurrencyMode"), ::OpenAPI::toJsonValue(m_concurrency_mode));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_protection_state_isSet) {
        obj.insert(QString("deleteProtectionState"), ::OpenAPI::toJsonValue(m_delete_protection_state));
    }
    if (m_earliest_version_time_isSet) {
        obj.insert(QString("earliestVersionTime"), ::OpenAPI::toJsonValue(m_earliest_version_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_key_prefix_isSet) {
        obj.insert(QString("keyPrefix"), ::OpenAPI::toJsonValue(m_key_prefix));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_point_in_time_recovery_enablement_isSet) {
        obj.insert(QString("pointInTimeRecoveryEnablement"), ::OpenAPI::toJsonValue(m_point_in_time_recovery_enablement));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_retention_period_isSet) {
        obj.insert(QString("versionRetentionPeriod"), ::OpenAPI::toJsonValue(m_version_retention_period));
    }
    return obj;
}

QString OAIGoogleFirestoreAdminV1Database::getAppEngineIntegrationMode() const {
    return m_app_engine_integration_mode;
}
void OAIGoogleFirestoreAdminV1Database::setAppEngineIntegrationMode(const QString &app_engine_integration_mode) {
    m_app_engine_integration_mode = app_engine_integration_mode;
    m_app_engine_integration_mode_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_app_engine_integration_mode_Set() const{
    return m_app_engine_integration_mode_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_app_engine_integration_mode_Valid() const{
    return m_app_engine_integration_mode_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getConcurrencyMode() const {
    return m_concurrency_mode;
}
void OAIGoogleFirestoreAdminV1Database::setConcurrencyMode(const QString &concurrency_mode) {
    m_concurrency_mode = concurrency_mode;
    m_concurrency_mode_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_concurrency_mode_Set() const{
    return m_concurrency_mode_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_concurrency_mode_Valid() const{
    return m_concurrency_mode_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleFirestoreAdminV1Database::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getDeleteProtectionState() const {
    return m_delete_protection_state;
}
void OAIGoogleFirestoreAdminV1Database::setDeleteProtectionState(const QString &delete_protection_state) {
    m_delete_protection_state = delete_protection_state;
    m_delete_protection_state_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_delete_protection_state_Set() const{
    return m_delete_protection_state_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_delete_protection_state_Valid() const{
    return m_delete_protection_state_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getEarliestVersionTime() const {
    return m_earliest_version_time;
}
void OAIGoogleFirestoreAdminV1Database::setEarliestVersionTime(const QString &earliest_version_time) {
    m_earliest_version_time = earliest_version_time;
    m_earliest_version_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_earliest_version_time_Set() const{
    return m_earliest_version_time_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_earliest_version_time_Valid() const{
    return m_earliest_version_time_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getEtag() const {
    return m_etag;
}
void OAIGoogleFirestoreAdminV1Database::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getKeyPrefix() const {
    return m_key_prefix;
}
void OAIGoogleFirestoreAdminV1Database::setKeyPrefix(const QString &key_prefix) {
    m_key_prefix = key_prefix;
    m_key_prefix_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_key_prefix_Set() const{
    return m_key_prefix_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_key_prefix_Valid() const{
    return m_key_prefix_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getLocationId() const {
    return m_location_id;
}
void OAIGoogleFirestoreAdminV1Database::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getName() const {
    return m_name;
}
void OAIGoogleFirestoreAdminV1Database::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getPointInTimeRecoveryEnablement() const {
    return m_point_in_time_recovery_enablement;
}
void OAIGoogleFirestoreAdminV1Database::setPointInTimeRecoveryEnablement(const QString &point_in_time_recovery_enablement) {
    m_point_in_time_recovery_enablement = point_in_time_recovery_enablement;
    m_point_in_time_recovery_enablement_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_point_in_time_recovery_enablement_Set() const{
    return m_point_in_time_recovery_enablement_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_point_in_time_recovery_enablement_Valid() const{
    return m_point_in_time_recovery_enablement_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getType() const {
    return m_type;
}
void OAIGoogleFirestoreAdminV1Database::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getUid() const {
    return m_uid;
}
void OAIGoogleFirestoreAdminV1Database::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleFirestoreAdminV1Database::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIGoogleFirestoreAdminV1Database::getVersionRetentionPeriod() const {
    return m_version_retention_period;
}
void OAIGoogleFirestoreAdminV1Database::setVersionRetentionPeriod(const QString &version_retention_period) {
    m_version_retention_period = version_retention_period;
    m_version_retention_period_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Database::is_version_retention_period_Set() const{
    return m_version_retention_period_isSet;
}

bool OAIGoogleFirestoreAdminV1Database::is_version_retention_period_Valid() const{
    return m_version_retention_period_isValid;
}

bool OAIGoogleFirestoreAdminV1Database::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine_integration_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrency_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_version_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery_enablement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1Database::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
