/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1ExportDocumentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1ExportDocumentsRequest::OAIGoogleFirestoreAdminV1ExportDocumentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1ExportDocumentsRequest::OAIGoogleFirestoreAdminV1ExportDocumentsRequest() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1ExportDocumentsRequest::~OAIGoogleFirestoreAdminV1ExportDocumentsRequest() {}

void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::initializeModel() {

    m_collection_ids_isSet = false;
    m_collection_ids_isValid = false;

    m_namespace_ids_isSet = false;
    m_namespace_ids_isValid = false;

    m_output_uri_prefix_isSet = false;
    m_output_uri_prefix_isValid = false;

    m_snapshot_time_isSet = false;
    m_snapshot_time_isValid = false;
}

void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::fromJsonObject(QJsonObject json) {

    m_collection_ids_isValid = ::OpenAPI::fromJsonValue(m_collection_ids, json[QString("collectionIds")]);
    m_collection_ids_isSet = !json[QString("collectionIds")].isNull() && m_collection_ids_isValid;

    m_namespace_ids_isValid = ::OpenAPI::fromJsonValue(m_namespace_ids, json[QString("namespaceIds")]);
    m_namespace_ids_isSet = !json[QString("namespaceIds")].isNull() && m_namespace_ids_isValid;

    m_output_uri_prefix_isValid = ::OpenAPI::fromJsonValue(m_output_uri_prefix, json[QString("outputUriPrefix")]);
    m_output_uri_prefix_isSet = !json[QString("outputUriPrefix")].isNull() && m_output_uri_prefix_isValid;

    m_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_time, json[QString("snapshotTime")]);
    m_snapshot_time_isSet = !json[QString("snapshotTime")].isNull() && m_snapshot_time_isValid;
}

QString OAIGoogleFirestoreAdminV1ExportDocumentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1ExportDocumentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_ids.size() > 0) {
        obj.insert(QString("collectionIds"), ::OpenAPI::toJsonValue(m_collection_ids));
    }
    if (m_namespace_ids.size() > 0) {
        obj.insert(QString("namespaceIds"), ::OpenAPI::toJsonValue(m_namespace_ids));
    }
    if (m_output_uri_prefix_isSet) {
        obj.insert(QString("outputUriPrefix"), ::OpenAPI::toJsonValue(m_output_uri_prefix));
    }
    if (m_snapshot_time_isSet) {
        obj.insert(QString("snapshotTime"), ::OpenAPI::toJsonValue(m_snapshot_time));
    }
    return obj;
}

QList<QString> OAIGoogleFirestoreAdminV1ExportDocumentsRequest::getCollectionIds() const {
    return m_collection_ids;
}
void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::setCollectionIds(const QList<QString> &collection_ids) {
    m_collection_ids = collection_ids;
    m_collection_ids_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_collection_ids_Set() const{
    return m_collection_ids_isSet;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_collection_ids_Valid() const{
    return m_collection_ids_isValid;
}

QList<QString> OAIGoogleFirestoreAdminV1ExportDocumentsRequest::getNamespaceIds() const {
    return m_namespace_ids;
}
void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::setNamespaceIds(const QList<QString> &namespace_ids) {
    m_namespace_ids = namespace_ids;
    m_namespace_ids_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_namespace_ids_Set() const{
    return m_namespace_ids_isSet;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_namespace_ids_Valid() const{
    return m_namespace_ids_isValid;
}

QString OAIGoogleFirestoreAdminV1ExportDocumentsRequest::getOutputUriPrefix() const {
    return m_output_uri_prefix;
}
void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::setOutputUriPrefix(const QString &output_uri_prefix) {
    m_output_uri_prefix = output_uri_prefix;
    m_output_uri_prefix_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_output_uri_prefix_Set() const{
    return m_output_uri_prefix_isSet;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_output_uri_prefix_Valid() const{
    return m_output_uri_prefix_isValid;
}

QString OAIGoogleFirestoreAdminV1ExportDocumentsRequest::getSnapshotTime() const {
    return m_snapshot_time;
}
void OAIGoogleFirestoreAdminV1ExportDocumentsRequest::setSnapshotTime(const QString &snapshot_time) {
    m_snapshot_time = snapshot_time;
    m_snapshot_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_snapshot_time_Set() const{
    return m_snapshot_time_isSet;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::is_snapshot_time_Valid() const{
    return m_snapshot_time_isValid;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_uri_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1ExportDocumentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
