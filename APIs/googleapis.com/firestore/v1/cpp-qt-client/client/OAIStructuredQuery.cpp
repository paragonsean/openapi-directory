/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStructuredQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStructuredQuery::OAIStructuredQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStructuredQuery::OAIStructuredQuery() {
    this->initializeModel();
}

OAIStructuredQuery::~OAIStructuredQuery() {}

void OAIStructuredQuery::initializeModel() {

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_select_isSet = false;
    m_select_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_where_isSet = false;
    m_where_isValid = false;
}

void OAIStructuredQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStructuredQuery::fromJsonObject(QJsonObject json) {

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("endAt")]);
    m_end_at_isSet = !json[QString("endAt")].isNull() && m_end_at_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_select_isValid = ::OpenAPI::fromJsonValue(m_select, json[QString("select")]);
    m_select_isSet = !json[QString("select")].isNull() && m_select_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_where_isValid = ::OpenAPI::fromJsonValue(m_where, json[QString("where")]);
    m_where_isSet = !json[QString("where")].isNull() && m_where_isValid;
}

QString OAIStructuredQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStructuredQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_end_at.isSet()) {
        obj.insert(QString("endAt"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_from.size() > 0) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_by.size() > 0) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_select.isSet()) {
        obj.insert(QString("select"), ::OpenAPI::toJsonValue(m_select));
    }
    if (m_start_at.isSet()) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_where.isSet()) {
        obj.insert(QString("where"), ::OpenAPI::toJsonValue(m_where));
    }
    return obj;
}

OAICursor OAIStructuredQuery::getEndAt() const {
    return m_end_at;
}
void OAIStructuredQuery::setEndAt(const OAICursor &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAIStructuredQuery::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAIStructuredQuery::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QList<OAICollectionSelector> OAIStructuredQuery::getFrom() const {
    return m_from;
}
void OAIStructuredQuery::setFrom(const QList<OAICollectionSelector> &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIStructuredQuery::is_from_Set() const{
    return m_from_isSet;
}

bool OAIStructuredQuery::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAIStructuredQuery::getLimit() const {
    return m_limit;
}
void OAIStructuredQuery::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIStructuredQuery::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIStructuredQuery::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIStructuredQuery::getOffset() const {
    return m_offset;
}
void OAIStructuredQuery::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIStructuredQuery::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIStructuredQuery::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAIOrder> OAIStructuredQuery::getOrderBy() const {
    return m_order_by;
}
void OAIStructuredQuery::setOrderBy(const QList<OAIOrder> &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIStructuredQuery::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIStructuredQuery::is_order_by_Valid() const{
    return m_order_by_isValid;
}

OAIProjection OAIStructuredQuery::getSelect() const {
    return m_select;
}
void OAIStructuredQuery::setSelect(const OAIProjection &select) {
    m_select = select;
    m_select_isSet = true;
}

bool OAIStructuredQuery::is_select_Set() const{
    return m_select_isSet;
}

bool OAIStructuredQuery::is_select_Valid() const{
    return m_select_isValid;
}

OAICursor OAIStructuredQuery::getStartAt() const {
    return m_start_at;
}
void OAIStructuredQuery::setStartAt(const OAICursor &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIStructuredQuery::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIStructuredQuery::is_start_at_Valid() const{
    return m_start_at_isValid;
}

OAIFilter OAIStructuredQuery::getWhere() const {
    return m_where;
}
void OAIStructuredQuery::setWhere(const OAIFilter &where) {
    m_where = where;
    m_where_isSet = true;
}

bool OAIStructuredQuery::is_where_Set() const{
    return m_where_isSet;
}

bool OAIStructuredQuery::is_where_Valid() const{
    return m_where_isValid;
}

bool OAIStructuredQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_select.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_where.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStructuredQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
