/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionSelector::OAICollectionSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionSelector::OAICollectionSelector() {
    this->initializeModel();
}

OAICollectionSelector::~OAICollectionSelector() {}

void OAICollectionSelector::initializeModel() {

    m_all_descendants_isSet = false;
    m_all_descendants_isValid = false;

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;
}

void OAICollectionSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionSelector::fromJsonObject(QJsonObject json) {

    m_all_descendants_isValid = ::OpenAPI::fromJsonValue(m_all_descendants, json[QString("allDescendants")]);
    m_all_descendants_isSet = !json[QString("allDescendants")].isNull() && m_all_descendants_isValid;

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("collectionId")]);
    m_collection_id_isSet = !json[QString("collectionId")].isNull() && m_collection_id_isValid;
}

QString OAICollectionSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_all_descendants_isSet) {
        obj.insert(QString("allDescendants"), ::OpenAPI::toJsonValue(m_all_descendants));
    }
    if (m_collection_id_isSet) {
        obj.insert(QString("collectionId"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    return obj;
}

bool OAICollectionSelector::isAllDescendants() const {
    return m_all_descendants;
}
void OAICollectionSelector::setAllDescendants(const bool &all_descendants) {
    m_all_descendants = all_descendants;
    m_all_descendants_isSet = true;
}

bool OAICollectionSelector::is_all_descendants_Set() const{
    return m_all_descendants_isSet;
}

bool OAICollectionSelector::is_all_descendants_Valid() const{
    return m_all_descendants_isValid;
}

QString OAICollectionSelector::getCollectionId() const {
    return m_collection_id;
}
void OAICollectionSelector::setCollectionId(const QString &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAICollectionSelector::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAICollectionSelector::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

bool OAICollectionSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_descendants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
