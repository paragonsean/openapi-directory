/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnaryFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnaryFilter::OAIUnaryFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnaryFilter::OAIUnaryFilter() {
    this->initializeModel();
}

OAIUnaryFilter::~OAIUnaryFilter() {}

void OAIUnaryFilter::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;
}

void OAIUnaryFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnaryFilter::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;
}

QString OAIUnaryFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnaryFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_field.isSet()) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    return obj;
}

OAIFieldReference OAIUnaryFilter::getField() const {
    return m_field;
}
void OAIUnaryFilter::setField(const OAIFieldReference &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIUnaryFilter::is_field_Set() const{
    return m_field_isSet;
}

bool OAIUnaryFilter::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIUnaryFilter::getOp() const {
    return m_op;
}
void OAIUnaryFilter::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIUnaryFilter::is_op_Set() const{
    return m_op_isSet;
}

bool OAIUnaryFilter::is_op_Valid() const{
    return m_op_isValid;
}

bool OAIUnaryFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnaryFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
