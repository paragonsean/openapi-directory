/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBitSequence.h
 *
 * A sequence of bits, encoded in a byte array. Each byte in the &#x60;bitmap&#x60; byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The &#x60;padding&#x60; defines the number of bits of the last byte to be ignored as \&quot;padding\&quot;. The values of these \&quot;padding\&quot; bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: &#x60;(bitmap[0] &amp; 0x01) !&#x3D; 0&#x60;. To retrieve the second bit, bit 1, calculate: &#x60;(bitmap[0] &amp; 0x02) !&#x3D; 0&#x60;. To retrieve the third bit, bit 2, calculate: &#x60;(bitmap[0] &amp; 0x04) !&#x3D; 0&#x60;. To retrieve the fourth bit, bit 3, calculate: &#x60;(bitmap[0] &amp; 0x08) !&#x3D; 0&#x60;. To retrieve bit n, calculate: &#x60;(bitmap[n / 8] &amp; (0x01 &lt;&lt; (n % 8))) !&#x3D; 0&#x60;. The \&quot;size\&quot; of a &#x60;BitSequence&#x60; (the number of bits it contains) is calculated by this formula: &#x60;(bitmap.length * 8) - padding&#x60;.
 */

#ifndef OAIBitSequence_H
#define OAIBitSequence_H

#include <QJsonObject>

#include <QByteArray>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBitSequence : public OAIObject {
public:
    OAIBitSequence();
    OAIBitSequence(QString json);
    ~OAIBitSequence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getBitmap() const;
    void setBitmap(const QByteArray &bitmap);
    bool is_bitmap_Set() const;
    bool is_bitmap_Valid() const;

    qint32 getPadding() const;
    void setPadding(const qint32 &padding);
    bool is_padding_Set() const;
    bool is_padding_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_bitmap;
    bool m_bitmap_isSet;
    bool m_bitmap_isValid;

    qint32 m_padding;
    bool m_padding_isSet;
    bool m_padding_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBitSequence)

#endif // OAIBitSequence_H
