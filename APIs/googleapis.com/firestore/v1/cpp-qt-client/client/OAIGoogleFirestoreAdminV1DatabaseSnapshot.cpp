/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1DatabaseSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1DatabaseSnapshot::OAIGoogleFirestoreAdminV1DatabaseSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1DatabaseSnapshot::OAIGoogleFirestoreAdminV1DatabaseSnapshot() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1DatabaseSnapshot::~OAIGoogleFirestoreAdminV1DatabaseSnapshot() {}

void OAIGoogleFirestoreAdminV1DatabaseSnapshot::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_snapshot_time_isSet = false;
    m_snapshot_time_isValid = false;
}

void OAIGoogleFirestoreAdminV1DatabaseSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1DatabaseSnapshot::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_time, json[QString("snapshotTime")]);
    m_snapshot_time_isSet = !json[QString("snapshotTime")].isNull() && m_snapshot_time_isValid;
}

QString OAIGoogleFirestoreAdminV1DatabaseSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1DatabaseSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_snapshot_time_isSet) {
        obj.insert(QString("snapshotTime"), ::OpenAPI::toJsonValue(m_snapshot_time));
    }
    return obj;
}

QString OAIGoogleFirestoreAdminV1DatabaseSnapshot::getDatabase() const {
    return m_database;
}
void OAIGoogleFirestoreAdminV1DatabaseSnapshot::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIGoogleFirestoreAdminV1DatabaseSnapshot::is_database_Set() const{
    return m_database_isSet;
}

bool OAIGoogleFirestoreAdminV1DatabaseSnapshot::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIGoogleFirestoreAdminV1DatabaseSnapshot::getSnapshotTime() const {
    return m_snapshot_time;
}
void OAIGoogleFirestoreAdminV1DatabaseSnapshot::setSnapshotTime(const QString &snapshot_time) {
    m_snapshot_time = snapshot_time;
    m_snapshot_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1DatabaseSnapshot::is_snapshot_time_Set() const{
    return m_snapshot_time_isSet;
}

bool OAIGoogleFirestoreAdminV1DatabaseSnapshot::is_snapshot_time_Valid() const{
    return m_snapshot_time_isValid;
}

bool OAIGoogleFirestoreAdminV1DatabaseSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1DatabaseSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
