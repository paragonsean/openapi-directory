/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetDocumentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetDocumentsResponse::OAIBatchGetDocumentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetDocumentsResponse::OAIBatchGetDocumentsResponse() {
    this->initializeModel();
}

OAIBatchGetDocumentsResponse::~OAIBatchGetDocumentsResponse() {}

void OAIBatchGetDocumentsResponse::initializeModel() {

    m_found_isSet = false;
    m_found_isValid = false;

    m_missing_isSet = false;
    m_missing_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIBatchGetDocumentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetDocumentsResponse::fromJsonObject(QJsonObject json) {

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;

    m_missing_isValid = ::OpenAPI::fromJsonValue(m_missing, json[QString("missing")]);
    m_missing_isSet = !json[QString("missing")].isNull() && m_missing_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIBatchGetDocumentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetDocumentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_found.isSet()) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    if (m_missing_isSet) {
        obj.insert(QString("missing"), ::OpenAPI::toJsonValue(m_missing));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_transaction_isSet) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

OAIDocument OAIBatchGetDocumentsResponse::getFound() const {
    return m_found;
}
void OAIBatchGetDocumentsResponse::setFound(const OAIDocument &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAIBatchGetDocumentsResponse::is_found_Set() const{
    return m_found_isSet;
}

bool OAIBatchGetDocumentsResponse::is_found_Valid() const{
    return m_found_isValid;
}

QString OAIBatchGetDocumentsResponse::getMissing() const {
    return m_missing;
}
void OAIBatchGetDocumentsResponse::setMissing(const QString &missing) {
    m_missing = missing;
    m_missing_isSet = true;
}

bool OAIBatchGetDocumentsResponse::is_missing_Set() const{
    return m_missing_isSet;
}

bool OAIBatchGetDocumentsResponse::is_missing_Valid() const{
    return m_missing_isValid;
}

QString OAIBatchGetDocumentsResponse::getReadTime() const {
    return m_read_time;
}
void OAIBatchGetDocumentsResponse::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIBatchGetDocumentsResponse::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIBatchGetDocumentsResponse::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QByteArray OAIBatchGetDocumentsResponse::getTransaction() const {
    return m_transaction;
}
void OAIBatchGetDocumentsResponse::setTransaction(const QByteArray &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIBatchGetDocumentsResponse::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIBatchGetDocumentsResponse::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIBatchGetDocumentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_found.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetDocumentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
