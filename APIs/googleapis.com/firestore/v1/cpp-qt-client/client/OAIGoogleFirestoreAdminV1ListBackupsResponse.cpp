/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1ListBackupsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1ListBackupsResponse::OAIGoogleFirestoreAdminV1ListBackupsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1ListBackupsResponse::OAIGoogleFirestoreAdminV1ListBackupsResponse() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1ListBackupsResponse::~OAIGoogleFirestoreAdminV1ListBackupsResponse() {}

void OAIGoogleFirestoreAdminV1ListBackupsResponse::initializeModel() {

    m_backups_isSet = false;
    m_backups_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIGoogleFirestoreAdminV1ListBackupsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1ListBackupsResponse::fromJsonObject(QJsonObject json) {

    m_backups_isValid = ::OpenAPI::fromJsonValue(m_backups, json[QString("backups")]);
    m_backups_isSet = !json[QString("backups")].isNull() && m_backups_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIGoogleFirestoreAdminV1ListBackupsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1ListBackupsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_backups.size() > 0) {
        obj.insert(QString("backups"), ::OpenAPI::toJsonValue(m_backups));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QList<OAIGoogleFirestoreAdminV1Backup> OAIGoogleFirestoreAdminV1ListBackupsResponse::getBackups() const {
    return m_backups;
}
void OAIGoogleFirestoreAdminV1ListBackupsResponse::setBackups(const QList<OAIGoogleFirestoreAdminV1Backup> &backups) {
    m_backups = backups;
    m_backups_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ListBackupsResponse::is_backups_Set() const{
    return m_backups_isSet;
}

bool OAIGoogleFirestoreAdminV1ListBackupsResponse::is_backups_Valid() const{
    return m_backups_isValid;
}

QList<QString> OAIGoogleFirestoreAdminV1ListBackupsResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIGoogleFirestoreAdminV1ListBackupsResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIGoogleFirestoreAdminV1ListBackupsResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIGoogleFirestoreAdminV1ListBackupsResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIGoogleFirestoreAdminV1ListBackupsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1ListBackupsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
