/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirestoreAdminV1Backup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirestoreAdminV1Backup::OAIGoogleFirestoreAdminV1Backup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirestoreAdminV1Backup::OAIGoogleFirestoreAdminV1Backup() {
    this->initializeModel();
}

OAIGoogleFirestoreAdminV1Backup::~OAIGoogleFirestoreAdminV1Backup() {}

void OAIGoogleFirestoreAdminV1Backup::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_database_uid_isSet = false;
    m_database_uid_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_snapshot_time_isSet = false;
    m_snapshot_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIGoogleFirestoreAdminV1Backup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirestoreAdminV1Backup::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_database_uid_isValid = ::OpenAPI::fromJsonValue(m_database_uid, json[QString("databaseUid")]);
    m_database_uid_isSet = !json[QString("databaseUid")].isNull() && m_database_uid_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_time, json[QString("snapshotTime")]);
    m_snapshot_time_isSet = !json[QString("snapshotTime")].isNull() && m_snapshot_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIGoogleFirestoreAdminV1Backup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirestoreAdminV1Backup::asJsonObject() const {
    QJsonObject obj;
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_database_uid_isSet) {
        obj.insert(QString("databaseUid"), ::OpenAPI::toJsonValue(m_database_uid));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_snapshot_time_isSet) {
        obj.insert(QString("snapshotTime"), ::OpenAPI::toJsonValue(m_snapshot_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

QString OAIGoogleFirestoreAdminV1Backup::getDatabase() const {
    return m_database;
}
void OAIGoogleFirestoreAdminV1Backup::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_database_Set() const{
    return m_database_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIGoogleFirestoreAdminV1Backup::getDatabaseUid() const {
    return m_database_uid;
}
void OAIGoogleFirestoreAdminV1Backup::setDatabaseUid(const QString &database_uid) {
    m_database_uid = database_uid;
    m_database_uid_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_database_uid_Set() const{
    return m_database_uid_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_database_uid_Valid() const{
    return m_database_uid_isValid;
}

QString OAIGoogleFirestoreAdminV1Backup::getExpireTime() const {
    return m_expire_time;
}
void OAIGoogleFirestoreAdminV1Backup::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIGoogleFirestoreAdminV1Backup::getName() const {
    return m_name;
}
void OAIGoogleFirestoreAdminV1Backup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleFirestoreAdminV1Backup::getSnapshotTime() const {
    return m_snapshot_time;
}
void OAIGoogleFirestoreAdminV1Backup::setSnapshotTime(const QString &snapshot_time) {
    m_snapshot_time = snapshot_time;
    m_snapshot_time_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_snapshot_time_Set() const{
    return m_snapshot_time_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_snapshot_time_Valid() const{
    return m_snapshot_time_isValid;
}

QString OAIGoogleFirestoreAdminV1Backup::getState() const {
    return m_state;
}
void OAIGoogleFirestoreAdminV1Backup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleFirestoreAdminV1Stats OAIGoogleFirestoreAdminV1Backup::getStats() const {
    return m_stats;
}
void OAIGoogleFirestoreAdminV1Backup::setStats(const OAIGoogleFirestoreAdminV1Stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIGoogleFirestoreAdminV1Backup::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIGoogleFirestoreAdminV1Backup::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIGoogleFirestoreAdminV1Backup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirestoreAdminV1Backup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
