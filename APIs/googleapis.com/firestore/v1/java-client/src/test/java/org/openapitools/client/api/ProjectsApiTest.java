/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchGetDocumentsRequest;
import org.openapitools.client.model.BatchGetDocumentsResponse;
import org.openapitools.client.model.BatchWriteRequest;
import org.openapitools.client.model.BatchWriteResponse;
import org.openapitools.client.model.BeginTransactionRequest;
import org.openapitools.client.model.BeginTransactionResponse;
import org.openapitools.client.model.CommitRequest;
import org.openapitools.client.model.CommitResponse;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.GoogleFirestoreAdminV1Backup;
import org.openapitools.client.model.GoogleFirestoreAdminV1BackupSchedule;
import org.openapitools.client.model.GoogleFirestoreAdminV1Database;
import org.openapitools.client.model.GoogleFirestoreAdminV1ExportDocumentsRequest;
import org.openapitools.client.model.GoogleFirestoreAdminV1ImportDocumentsRequest;
import org.openapitools.client.model.GoogleFirestoreAdminV1Index;
import org.openapitools.client.model.GoogleFirestoreAdminV1ListBackupSchedulesResponse;
import org.openapitools.client.model.GoogleFirestoreAdminV1ListBackupsResponse;
import org.openapitools.client.model.GoogleFirestoreAdminV1ListDatabasesResponse;
import org.openapitools.client.model.GoogleFirestoreAdminV1ListFieldsResponse;
import org.openapitools.client.model.GoogleFirestoreAdminV1ListIndexesResponse;
import org.openapitools.client.model.GoogleFirestoreAdminV1RestoreDatabaseRequest;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.openapitools.client.model.ListCollectionIdsRequest;
import org.openapitools.client.model.ListCollectionIdsResponse;
import org.openapitools.client.model.ListDocumentsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListenRequest;
import org.openapitools.client.model.ListenResponse;
import org.openapitools.client.model.PartitionQueryRequest;
import org.openapitools.client.model.PartitionQueryResponse;
import org.openapitools.client.model.RollbackRequest;
import org.openapitools.client.model.RunAggregationQueryRequest;
import org.openapitools.client.model.RunAggregationQueryResponse;
import org.openapitools.client.model.RunQueryRequest;
import org.openapitools.client.model.RunQueryResponse;
import org.openapitools.client.model.WriteRequest;
import org.openapitools.client.model.WriteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesBackupSchedulesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1BackupSchedule googleFirestoreAdminV1BackupSchedule = null;
        GoogleFirestoreAdminV1BackupSchedule response = api.firestoreProjectsDatabasesBackupSchedulesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1BackupSchedule);
        // TODO: test validations
    }

    /**
     * List backup schedules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesBackupSchedulesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1ListBackupSchedulesResponse response = api.firestoreProjectsDatabasesBackupSchedulesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to &#x60;indexConfig.usesAncestorConfig:false&#x60; or &#x60;ttlConfig:*&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsFieldsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleFirestoreAdminV1ListFieldsResponse response = api.firestoreProjectsDatabasesCollectionGroupsFieldsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsIndexesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1Index googleFirestoreAdminV1Index = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesCollectionGroupsIndexesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1Index);
        // TODO: test validations
    }

    /**
     * Lists composite indexes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsIndexesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleFirestoreAdminV1ListIndexesResponse response = api.firestoreProjectsDatabasesCollectionGroupsIndexesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String databaseId = null;
        GoogleFirestoreAdminV1Database googleFirestoreAdminV1Database = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, databaseId, googleFirestoreAdminV1Database);
        // TODO: test validations
    }

    /**
     * Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsBatchGetTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchGetDocumentsRequest batchGetDocumentsRequest = null;
        BatchGetDocumentsResponse response = api.firestoreProjectsDatabasesDocumentsBatchGet(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchGetDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsBatchWriteTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchWriteRequest batchWriteRequest = null;
        BatchWriteResponse response = api.firestoreProjectsDatabasesDocumentsBatchWrite(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchWriteRequest);
        // TODO: test validations
    }

    /**
     * Starts a new transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsBeginTransactionTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BeginTransactionRequest beginTransactionRequest = null;
        BeginTransactionResponse response = api.firestoreProjectsDatabasesDocumentsBeginTransaction(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, beginTransactionRequest);
        // TODO: test validations
    }

    /**
     * Commits a transaction, while optionally updating documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsCommitTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CommitRequest commitRequest = null;
        CommitResponse response = api.firestoreProjectsDatabasesDocumentsCommit(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitRequest);
        // TODO: test validations
    }

    /**
     * Creates a new document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsCreateDocumentTest() throws ApiException {
        String parent = null;
        String collectionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String documentId = null;
        List<String> maskFieldPaths = null;
        Document document = null;
        Document response = api.firestoreProjectsDatabasesDocumentsCreateDocument(parent, collectionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, documentId, maskFieldPaths, document);
        // TODO: test validations
    }

    /**
     * Lists all the collection IDs underneath a document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsListCollectionIdsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListCollectionIdsRequest listCollectionIdsRequest = null;
        ListCollectionIdsResponse response = api.firestoreProjectsDatabasesDocumentsListCollectionIds(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, listCollectionIdsRequest);
        // TODO: test validations
    }

    /**
     * Lists documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsListDocumentsTest() throws ApiException {
        String parent = null;
        String collectionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> maskFieldPaths = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String readTime = null;
        Boolean showMissing = null;
        String transaction = null;
        ListDocumentsResponse response = api.firestoreProjectsDatabasesDocumentsListDocuments(parent, collectionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maskFieldPaths, orderBy, pageSize, pageToken, readTime, showMissing, transaction);
        // TODO: test validations
    }

    /**
     * Listens to changes. This method is only available via gRPC or WebChannel (not REST).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsListenTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListenRequest listenRequest = null;
        ListenResponse response = api.firestoreProjectsDatabasesDocumentsListen(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, listenRequest);
        // TODO: test validations
    }

    /**
     * Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsPartitionQueryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PartitionQueryRequest partitionQueryRequest = null;
        PartitionQueryResponse response = api.firestoreProjectsDatabasesDocumentsPartitionQuery(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, partitionQueryRequest);
        // TODO: test validations
    }

    /**
     * Updates or inserts a document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean currentDocumentExists = null;
        String currentDocumentUpdateTime = null;
        List<String> maskFieldPaths = null;
        List<String> updateMaskFieldPaths = null;
        Document document = null;
        Document response = api.firestoreProjectsDatabasesDocumentsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, currentDocumentExists, currentDocumentUpdateTime, maskFieldPaths, updateMaskFieldPaths, document);
        // TODO: test validations
    }

    /**
     * Rolls back a transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsRollbackTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RollbackRequest rollbackRequest = null;
        Object response = api.firestoreProjectsDatabasesDocumentsRollback(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollbackRequest);
        // TODO: test validations
    }

    /**
     * Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: &#x60;&#x60;&#x60; -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a &#x3D; true ); &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsRunAggregationQueryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunAggregationQueryRequest runAggregationQueryRequest = null;
        RunAggregationQueryResponse response = api.firestoreProjectsDatabasesDocumentsRunAggregationQuery(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runAggregationQueryRequest);
        // TODO: test validations
    }

    /**
     * Runs a query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsRunQueryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunQueryRequest runQueryRequest = null;
        RunQueryResponse response = api.firestoreProjectsDatabasesDocumentsRunQuery(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runQueryRequest);
        // TODO: test validations
    }

    /**
     * Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesDocumentsWriteTest() throws ApiException {
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WriteRequest writeRequest = null;
        WriteResponse response = api.firestoreProjectsDatabasesDocumentsWrite(database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, writeRequest);
        // TODO: test validations
    }

    /**
     * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesExportDocumentsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1ExportDocumentsRequest googleFirestoreAdminV1ExportDocumentsRequest = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesExportDocuments(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1ExportDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesImportDocumentsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1ImportDocumentsRequest googleFirestoreAdminV1ImportDocumentsRequest = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesImportDocuments(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1ImportDocumentsRequest);
        // TODO: test validations
    }

    /**
     * List all the databases in the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1ListDatabasesResponse response = api.firestoreProjectsDatabasesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.firestoreProjectsDatabasesOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.firestoreProjectsDatabasesOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new database by restoring from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation&#39;s metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesRestoreTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1RestoreDatabaseRequest googleFirestoreAdminV1RestoreDatabaseRequest = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesRestore(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1RestoreDatabaseRequest);
        // TODO: test validations
    }

    /**
     * Deletes a backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsLocationsBackupsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean currentDocumentExists = null;
        String currentDocumentUpdateTime = null;
        Object response = api.firestoreProjectsLocationsBackupsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, currentDocumentExists, currentDocumentUpdateTime);
        // TODO: test validations
    }

    /**
     * Gets information about a backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsLocationsBackupsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> maskFieldPaths = null;
        String readTime = null;
        String transaction = null;
        GoogleFirestoreAdminV1Backup response = api.firestoreProjectsLocationsBackupsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maskFieldPaths, readTime, transaction);
        // TODO: test validations
    }

    /**
     * Lists all the backups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsLocationsBackupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1ListBackupsResponse response = api.firestoreProjectsLocationsBackupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.firestoreProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
