/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFirestoreAdminV1IndexField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cloud Firestore indexes enable simple and complex queries against documents in a database.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1Index {
  /**
   * The API scope supported by this index.
   */
  @JsonAdapter(ApiScopeEnum.Adapter.class)
  public enum ApiScopeEnum {
    ANY_API("ANY_API"),
    
    DATASTORE_MODE_API("DATASTORE_MODE_API");

    private String value;

    ApiScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiScopeEnum fromValue(String value) {
      for (ApiScopeEnum b : ApiScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_SCOPE = "apiScope";
  @SerializedName(SERIALIZED_NAME_API_SCOPE)
  private ApiScopeEnum apiScope;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<GoogleFirestoreAdminV1IndexField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
   */
  @JsonAdapter(QueryScopeEnum.Adapter.class)
  public enum QueryScopeEnum {
    QUERY_SCOPE_UNSPECIFIED("QUERY_SCOPE_UNSPECIFIED"),
    
    COLLECTION("COLLECTION"),
    
    COLLECTION_GROUP("COLLECTION_GROUP"),
    
    COLLECTION_RECURSIVE("COLLECTION_RECURSIVE");

    private String value;

    QueryScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryScopeEnum fromValue(String value) {
      for (QueryScopeEnum b : QueryScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueryScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERY_SCOPE = "queryScope";
  @SerializedName(SERIALIZED_NAME_QUERY_SCOPE)
  private QueryScopeEnum queryScope;

  /**
   * Output only. The serving state of the index.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    NEEDS_REPAIR("NEEDS_REPAIR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleFirestoreAdminV1Index() {
  }

  public GoogleFirestoreAdminV1Index apiScope(ApiScopeEnum apiScope) {
    this.apiScope = apiScope;
    return this;
  }

  /**
   * The API scope supported by this index.
   * @return apiScope
   */
  @javax.annotation.Nullable
  public ApiScopeEnum getApiScope() {
    return apiScope;
  }

  public void setApiScope(ApiScopeEnum apiScope) {
    this.apiScope = apiScope;
  }


  public GoogleFirestoreAdminV1Index fields(List<GoogleFirestoreAdminV1IndexField> fields) {
    this.fields = fields;
    return this;
  }

  public GoogleFirestoreAdminV1Index addFieldsItem(GoogleFirestoreAdminV1IndexField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path &#x60;__name__&#x60;. If, on creation, &#x60;__name__&#x60; was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the &#x60;__name__&#x60; will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<GoogleFirestoreAdminV1IndexField> getFields() {
    return fields;
  }

  public void setFields(List<GoogleFirestoreAdminV1IndexField> fields) {
    this.fields = fields;
  }


  public GoogleFirestoreAdminV1Index name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. A server defined name for this index. The form of this name for composite indexes will be: &#x60;projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}&#x60; For single field indexes, this field will be empty.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleFirestoreAdminV1Index queryScope(QueryScopeEnum queryScope) {
    this.queryScope = queryScope;
    return this;
  }

  /**
   * Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
   * @return queryScope
   */
  @javax.annotation.Nullable
  public QueryScopeEnum getQueryScope() {
    return queryScope;
  }

  public void setQueryScope(QueryScopeEnum queryScope) {
    this.queryScope = queryScope;
  }


  public GoogleFirestoreAdminV1Index state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The serving state of the index.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1Index googleFirestoreAdminV1Index = (GoogleFirestoreAdminV1Index) o;
    return Objects.equals(this.apiScope, googleFirestoreAdminV1Index.apiScope) &&
        Objects.equals(this.fields, googleFirestoreAdminV1Index.fields) &&
        Objects.equals(this.name, googleFirestoreAdminV1Index.name) &&
        Objects.equals(this.queryScope, googleFirestoreAdminV1Index.queryScope) &&
        Objects.equals(this.state, googleFirestoreAdminV1Index.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiScope, fields, name, queryScope, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1Index {\n");
    sb.append("    apiScope: ").append(toIndentedString(apiScope)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    queryScope: ").append(toIndentedString(queryScope)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiScope");
    openapiFields.add("fields");
    openapiFields.add("name");
    openapiFields.add("queryScope");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1Index
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1Index.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1Index is not found in the empty JSON string", GoogleFirestoreAdminV1Index.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1Index.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1Index` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiScope") != null && !jsonObj.get("apiScope").isJsonNull()) && !jsonObj.get("apiScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiScope").toString()));
      }
      // validate the optional field `apiScope`
      if (jsonObj.get("apiScope") != null && !jsonObj.get("apiScope").isJsonNull()) {
        ApiScopeEnum.validateJsonElement(jsonObj.get("apiScope"));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            GoogleFirestoreAdminV1IndexField.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("queryScope") != null && !jsonObj.get("queryScope").isJsonNull()) && !jsonObj.get("queryScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryScope").toString()));
      }
      // validate the optional field `queryScope`
      if (jsonObj.get("queryScope") != null && !jsonObj.get("queryScope").isJsonNull()) {
        QueryScopeEnum.validateJsonElement(jsonObj.get("queryScope"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1Index.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1Index' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1Index> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1Index.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1Index>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1Index value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1Index read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1Index given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1Index
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1Index
   */
  public static GoogleFirestoreAdminV1Index fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1Index.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1Index to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

