/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Document;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for Firestore.RunQuery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunQueryResponse {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private Document document;

  public static final String SERIALIZED_NAME_DONE = "done";
  @SerializedName(SERIALIZED_NAME_DONE)
  private Boolean done;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_SKIPPED_RESULTS = "skippedResults";
  @SerializedName(SERIALIZED_NAME_SKIPPED_RESULTS)
  private Integer skippedResults;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private byte[] transaction;

  public RunQueryResponse() {
  }

  public RunQueryResponse document(Document document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nullable
  public Document getDocument() {
    return document;
  }

  public void setDocument(Document document) {
    this.document = document;
  }


  public RunQueryResponse done(Boolean done) {
    this.done = done;
    return this;
  }

  /**
   * If present, Firestore has completely finished the request and no more documents will be returned.
   * @return done
   */
  @javax.annotation.Nullable
  public Boolean getDone() {
    return done;
  }

  public void setDone(Boolean done) {
    this.done = done;
  }


  public RunQueryResponse readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their &#x60;read_time&#x60; and this one. If the query returns no results, a response with &#x60;read_time&#x60; and no &#x60;document&#x60; will be sent, and this represents the time at which the query was run.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public RunQueryResponse skippedResults(Integer skippedResults) {
    this.skippedResults = skippedResults;
    return this;
  }

  /**
   * The number of results that have been skipped due to an offset between the last response and the current response.
   * @return skippedResults
   */
  @javax.annotation.Nullable
  public Integer getSkippedResults() {
    return skippedResults;
  }

  public void setSkippedResults(Integer skippedResults) {
    this.skippedResults = skippedResults;
  }


  public RunQueryResponse transaction(byte[] transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.
   * @return transaction
   */
  @javax.annotation.Nullable
  public byte[] getTransaction() {
    return transaction;
  }

  public void setTransaction(byte[] transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunQueryResponse runQueryResponse = (RunQueryResponse) o;
    return Objects.equals(this.document, runQueryResponse.document) &&
        Objects.equals(this.done, runQueryResponse.done) &&
        Objects.equals(this.readTime, runQueryResponse.readTime) &&
        Objects.equals(this.skippedResults, runQueryResponse.skippedResults) &&
        Arrays.equals(this.transaction, runQueryResponse.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, done, readTime, skippedResults, Arrays.hashCode(transaction));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunQueryResponse {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    done: ").append(toIndentedString(done)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    skippedResults: ").append(toIndentedString(skippedResults)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("done");
    openapiFields.add("readTime");
    openapiFields.add("skippedResults");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunQueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunQueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunQueryResponse is not found in the empty JSON string", RunQueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunQueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunQueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        Document.validateJsonElement(jsonObj.get("document"));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunQueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunQueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunQueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunQueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RunQueryResponse>() {
           @Override
           public void write(JsonWriter out, RunQueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunQueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunQueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunQueryResponse
   * @throws IOException if the JSON string is invalid with respect to RunQueryResponse
   */
  public static RunQueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunQueryResponse.class);
  }

  /**
   * Convert an instance of RunQueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

