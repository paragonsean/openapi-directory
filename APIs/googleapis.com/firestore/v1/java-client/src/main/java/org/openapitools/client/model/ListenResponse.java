/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DocumentChange;
import org.openapitools.client.model.DocumentDelete;
import org.openapitools.client.model.DocumentRemove;
import org.openapitools.client.model.ExistenceFilter;
import org.openapitools.client.model.TargetChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for Firestore.Listen.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListenResponse {
  public static final String SERIALIZED_NAME_DOCUMENT_CHANGE = "documentChange";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CHANGE)
  private DocumentChange documentChange;

  public static final String SERIALIZED_NAME_DOCUMENT_DELETE = "documentDelete";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DELETE)
  private DocumentDelete documentDelete;

  public static final String SERIALIZED_NAME_DOCUMENT_REMOVE = "documentRemove";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_REMOVE)
  private DocumentRemove documentRemove;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private ExistenceFilter filter;

  public static final String SERIALIZED_NAME_TARGET_CHANGE = "targetChange";
  @SerializedName(SERIALIZED_NAME_TARGET_CHANGE)
  private TargetChange targetChange;

  public ListenResponse() {
  }

  public ListenResponse documentChange(DocumentChange documentChange) {
    this.documentChange = documentChange;
    return this;
  }

  /**
   * Get documentChange
   * @return documentChange
   */
  @javax.annotation.Nullable
  public DocumentChange getDocumentChange() {
    return documentChange;
  }

  public void setDocumentChange(DocumentChange documentChange) {
    this.documentChange = documentChange;
  }


  public ListenResponse documentDelete(DocumentDelete documentDelete) {
    this.documentDelete = documentDelete;
    return this;
  }

  /**
   * Get documentDelete
   * @return documentDelete
   */
  @javax.annotation.Nullable
  public DocumentDelete getDocumentDelete() {
    return documentDelete;
  }

  public void setDocumentDelete(DocumentDelete documentDelete) {
    this.documentDelete = documentDelete;
  }


  public ListenResponse documentRemove(DocumentRemove documentRemove) {
    this.documentRemove = documentRemove;
    return this;
  }

  /**
   * Get documentRemove
   * @return documentRemove
   */
  @javax.annotation.Nullable
  public DocumentRemove getDocumentRemove() {
    return documentRemove;
  }

  public void setDocumentRemove(DocumentRemove documentRemove) {
    this.documentRemove = documentRemove;
  }


  public ListenResponse filter(ExistenceFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public ExistenceFilter getFilter() {
    return filter;
  }

  public void setFilter(ExistenceFilter filter) {
    this.filter = filter;
  }


  public ListenResponse targetChange(TargetChange targetChange) {
    this.targetChange = targetChange;
    return this;
  }

  /**
   * Get targetChange
   * @return targetChange
   */
  @javax.annotation.Nullable
  public TargetChange getTargetChange() {
    return targetChange;
  }

  public void setTargetChange(TargetChange targetChange) {
    this.targetChange = targetChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListenResponse listenResponse = (ListenResponse) o;
    return Objects.equals(this.documentChange, listenResponse.documentChange) &&
        Objects.equals(this.documentDelete, listenResponse.documentDelete) &&
        Objects.equals(this.documentRemove, listenResponse.documentRemove) &&
        Objects.equals(this.filter, listenResponse.filter) &&
        Objects.equals(this.targetChange, listenResponse.targetChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentChange, documentDelete, documentRemove, filter, targetChange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListenResponse {\n");
    sb.append("    documentChange: ").append(toIndentedString(documentChange)).append("\n");
    sb.append("    documentDelete: ").append(toIndentedString(documentDelete)).append("\n");
    sb.append("    documentRemove: ").append(toIndentedString(documentRemove)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    targetChange: ").append(toIndentedString(targetChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentChange");
    openapiFields.add("documentDelete");
    openapiFields.add("documentRemove");
    openapiFields.add("filter");
    openapiFields.add("targetChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListenResponse is not found in the empty JSON string", ListenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `documentChange`
      if (jsonObj.get("documentChange") != null && !jsonObj.get("documentChange").isJsonNull()) {
        DocumentChange.validateJsonElement(jsonObj.get("documentChange"));
      }
      // validate the optional field `documentDelete`
      if (jsonObj.get("documentDelete") != null && !jsonObj.get("documentDelete").isJsonNull()) {
        DocumentDelete.validateJsonElement(jsonObj.get("documentDelete"));
      }
      // validate the optional field `documentRemove`
      if (jsonObj.get("documentRemove") != null && !jsonObj.get("documentRemove").isJsonNull()) {
        DocumentRemove.validateJsonElement(jsonObj.get("documentRemove"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        ExistenceFilter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `targetChange`
      if (jsonObj.get("targetChange") != null && !jsonObj.get("targetChange").isJsonNull()) {
        TargetChange.validateJsonElement(jsonObj.get("targetChange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListenResponse>() {
           @Override
           public void write(JsonWriter out, ListenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListenResponse
   * @throws IOException if the JSON string is invalid with respect to ListenResponse
   */
  public static ListenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListenResponse.class);
  }

  /**
   * Convert an instance of ListenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

