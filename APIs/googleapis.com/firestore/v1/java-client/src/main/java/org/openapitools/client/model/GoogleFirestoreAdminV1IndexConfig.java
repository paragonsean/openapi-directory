/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFirestoreAdminV1Index;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The index configuration for this field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1IndexConfig {
  public static final String SERIALIZED_NAME_ANCESTOR_FIELD = "ancestorField";
  @SerializedName(SERIALIZED_NAME_ANCESTOR_FIELD)
  private String ancestorField;

  public static final String SERIALIZED_NAME_INDEXES = "indexes";
  @SerializedName(SERIALIZED_NAME_INDEXES)
  private List<GoogleFirestoreAdminV1Index> indexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVERTING = "reverting";
  @SerializedName(SERIALIZED_NAME_REVERTING)
  private Boolean reverting;

  public static final String SERIALIZED_NAME_USES_ANCESTOR_CONFIG = "usesAncestorConfig";
  @SerializedName(SERIALIZED_NAME_USES_ANCESTOR_CONFIG)
  private Boolean usesAncestorConfig;

  public GoogleFirestoreAdminV1IndexConfig() {
  }

  public GoogleFirestoreAdminV1IndexConfig ancestorField(String ancestorField) {
    this.ancestorField = ancestorField;
    return this;
  }

  /**
   * Output only. Specifies the resource name of the &#x60;Field&#x60; from which this field&#39;s index configuration is set (when &#x60;uses_ancestor_config&#x60; is true), or from which it *would* be set if this field had no index configuration (when &#x60;uses_ancestor_config&#x60; is false).
   * @return ancestorField
   */
  @javax.annotation.Nullable
  public String getAncestorField() {
    return ancestorField;
  }

  public void setAncestorField(String ancestorField) {
    this.ancestorField = ancestorField;
  }


  public GoogleFirestoreAdminV1IndexConfig indexes(List<GoogleFirestoreAdminV1Index> indexes) {
    this.indexes = indexes;
    return this;
  }

  public GoogleFirestoreAdminV1IndexConfig addIndexesItem(GoogleFirestoreAdminV1Index indexesItem) {
    if (this.indexes == null) {
      this.indexes = new ArrayList<>();
    }
    this.indexes.add(indexesItem);
    return this;
  }

  /**
   * The indexes supported for this field.
   * @return indexes
   */
  @javax.annotation.Nullable
  public List<GoogleFirestoreAdminV1Index> getIndexes() {
    return indexes;
  }

  public void setIndexes(List<GoogleFirestoreAdminV1Index> indexes) {
    this.indexes = indexes;
  }


  public GoogleFirestoreAdminV1IndexConfig reverting(Boolean reverting) {
    this.reverting = reverting;
    return this;
  }

  /**
   * Output only When true, the &#x60;Field&#x60;&#39;s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by &#x60;ancestor_field&#x60;, at which point &#x60;uses_ancestor_config&#x60; will be &#x60;true&#x60; and &#x60;reverting&#x60; will be &#x60;false&#x60;.
   * @return reverting
   */
  @javax.annotation.Nullable
  public Boolean getReverting() {
    return reverting;
  }

  public void setReverting(Boolean reverting) {
    this.reverting = reverting;
  }


  public GoogleFirestoreAdminV1IndexConfig usesAncestorConfig(Boolean usesAncestorConfig) {
    this.usesAncestorConfig = usesAncestorConfig;
    return this;
  }

  /**
   * Output only. When true, the &#x60;Field&#x60;&#39;s index configuration is set from the configuration specified by the &#x60;ancestor_field&#x60;. When false, the &#x60;Field&#x60;&#39;s index configuration is defined explicitly.
   * @return usesAncestorConfig
   */
  @javax.annotation.Nullable
  public Boolean getUsesAncestorConfig() {
    return usesAncestorConfig;
  }

  public void setUsesAncestorConfig(Boolean usesAncestorConfig) {
    this.usesAncestorConfig = usesAncestorConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1IndexConfig googleFirestoreAdminV1IndexConfig = (GoogleFirestoreAdminV1IndexConfig) o;
    return Objects.equals(this.ancestorField, googleFirestoreAdminV1IndexConfig.ancestorField) &&
        Objects.equals(this.indexes, googleFirestoreAdminV1IndexConfig.indexes) &&
        Objects.equals(this.reverting, googleFirestoreAdminV1IndexConfig.reverting) &&
        Objects.equals(this.usesAncestorConfig, googleFirestoreAdminV1IndexConfig.usesAncestorConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestorField, indexes, reverting, usesAncestorConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1IndexConfig {\n");
    sb.append("    ancestorField: ").append(toIndentedString(ancestorField)).append("\n");
    sb.append("    indexes: ").append(toIndentedString(indexes)).append("\n");
    sb.append("    reverting: ").append(toIndentedString(reverting)).append("\n");
    sb.append("    usesAncestorConfig: ").append(toIndentedString(usesAncestorConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ancestorField");
    openapiFields.add("indexes");
    openapiFields.add("reverting");
    openapiFields.add("usesAncestorConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1IndexConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1IndexConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1IndexConfig is not found in the empty JSON string", GoogleFirestoreAdminV1IndexConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1IndexConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1IndexConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ancestorField") != null && !jsonObj.get("ancestorField").isJsonNull()) && !jsonObj.get("ancestorField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestorField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ancestorField").toString()));
      }
      if (jsonObj.get("indexes") != null && !jsonObj.get("indexes").isJsonNull()) {
        JsonArray jsonArrayindexes = jsonObj.getAsJsonArray("indexes");
        if (jsonArrayindexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indexes` to be an array in the JSON string but got `%s`", jsonObj.get("indexes").toString()));
          }

          // validate the optional field `indexes` (array)
          for (int i = 0; i < jsonArrayindexes.size(); i++) {
            GoogleFirestoreAdminV1Index.validateJsonElement(jsonArrayindexes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1IndexConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1IndexConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1IndexConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1IndexConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1IndexConfig>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1IndexConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1IndexConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1IndexConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1IndexConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1IndexConfig
   */
  public static GoogleFirestoreAdminV1IndexConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1IndexConfig.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1IndexConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

