/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleFirestoreAdminV1IndexConfig;
import org.openapitools.client.model.GoogleFirestoreAdminV1TtlConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single field in the database. Fields are grouped by their \&quot;Collection Group\&quot;, which represent all collections in the database with the same id.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1Field {
  public static final String SERIALIZED_NAME_INDEX_CONFIG = "indexConfig";
  @SerializedName(SERIALIZED_NAME_INDEX_CONFIG)
  private GoogleFirestoreAdminV1IndexConfig indexConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TTL_CONFIG = "ttlConfig";
  @SerializedName(SERIALIZED_NAME_TTL_CONFIG)
  private GoogleFirestoreAdminV1TtlConfig ttlConfig;

  public GoogleFirestoreAdminV1Field() {
  }

  public GoogleFirestoreAdminV1Field indexConfig(GoogleFirestoreAdminV1IndexConfig indexConfig) {
    this.indexConfig = indexConfig;
    return this;
  }

  /**
   * Get indexConfig
   * @return indexConfig
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1IndexConfig getIndexConfig() {
    return indexConfig;
  }

  public void setIndexConfig(GoogleFirestoreAdminV1IndexConfig indexConfig) {
    this.indexConfig = indexConfig;
  }


  public GoogleFirestoreAdminV1Field name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. A field name of the form &#x60;projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}&#x60; A field path may be a simple field name, e.g. &#x60;address&#x60; or a path to fields within map_value , e.g. &#x60;address.city&#x60;, or a special field path. The only valid special field is &#x60;*&#x60;, which represents any field. Field paths may be quoted using &#x60; (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: &#x60;*&#x60;, &#x60;.&#x60;, &#x60;&#x60;&#x60; (backtick), &#x60;[&#x60;, &#x60;]&#x60;, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) &#x60;\\&#x60;address.city\\&#x60;&#x60; represents a field named &#x60;address.city&#x60;, not the map key &#x60;city&#x60; in the field &#x60;address&#x60;. &#x60;\\&#x60;*\\&#x60;&#x60; represents a field named &#x60;*&#x60;, not any field. A special &#x60;Field&#x60; contains the default indexing settings for all fields. This field&#39;s resource name is: &#x60;projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/_*&#x60; Indexes defined on this &#x60;Field&#x60; will be applied to all fields which do not have their own &#x60;Field&#x60; index configuration.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleFirestoreAdminV1Field ttlConfig(GoogleFirestoreAdminV1TtlConfig ttlConfig) {
    this.ttlConfig = ttlConfig;
    return this;
  }

  /**
   * Get ttlConfig
   * @return ttlConfig
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1TtlConfig getTtlConfig() {
    return ttlConfig;
  }

  public void setTtlConfig(GoogleFirestoreAdminV1TtlConfig ttlConfig) {
    this.ttlConfig = ttlConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1Field googleFirestoreAdminV1Field = (GoogleFirestoreAdminV1Field) o;
    return Objects.equals(this.indexConfig, googleFirestoreAdminV1Field.indexConfig) &&
        Objects.equals(this.name, googleFirestoreAdminV1Field.name) &&
        Objects.equals(this.ttlConfig, googleFirestoreAdminV1Field.ttlConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexConfig, name, ttlConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1Field {\n");
    sb.append("    indexConfig: ").append(toIndentedString(indexConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ttlConfig: ").append(toIndentedString(ttlConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indexConfig");
    openapiFields.add("name");
    openapiFields.add("ttlConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1Field
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1Field.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1Field is not found in the empty JSON string", GoogleFirestoreAdminV1Field.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1Field.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1Field` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `indexConfig`
      if (jsonObj.get("indexConfig") != null && !jsonObj.get("indexConfig").isJsonNull()) {
        GoogleFirestoreAdminV1IndexConfig.validateJsonElement(jsonObj.get("indexConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `ttlConfig`
      if (jsonObj.get("ttlConfig") != null && !jsonObj.get("ttlConfig").isJsonNull()) {
        GoogleFirestoreAdminV1TtlConfig.validateJsonElement(jsonObj.get("ttlConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1Field.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1Field' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1Field> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1Field.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1Field>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1Field value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1Field read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1Field given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1Field
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1Field
   */
  public static GoogleFirestoreAdminV1Field fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1Field.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1Field to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

