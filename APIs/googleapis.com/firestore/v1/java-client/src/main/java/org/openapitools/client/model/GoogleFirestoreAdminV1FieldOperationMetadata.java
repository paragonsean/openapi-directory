/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFirestoreAdminV1IndexConfigDelta;
import org.openapitools.client.model.GoogleFirestoreAdminV1Progress;
import org.openapitools.client.model.GoogleFirestoreAdminV1TtlConfigDelta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1FieldOperationMetadata {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_INDEX_CONFIG_DELTAS = "indexConfigDeltas";
  @SerializedName(SERIALIZED_NAME_INDEX_CONFIG_DELTAS)
  private List<GoogleFirestoreAdminV1IndexConfigDelta> indexConfigDeltas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRESS_BYTES = "progressBytes";
  @SerializedName(SERIALIZED_NAME_PROGRESS_BYTES)
  private GoogleFirestoreAdminV1Progress progressBytes;

  public static final String SERIALIZED_NAME_PROGRESS_DOCUMENTS = "progressDocuments";
  @SerializedName(SERIALIZED_NAME_PROGRESS_DOCUMENTS)
  private GoogleFirestoreAdminV1Progress progressDocuments;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The state of the operation.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPERATION_STATE_UNSPECIFIED("OPERATION_STATE_UNSPECIFIED"),
    
    INITIALIZING("INITIALIZING"),
    
    PROCESSING("PROCESSING"),
    
    CANCELLING("CANCELLING"),
    
    FINALIZING("FINALIZING"),
    
    SUCCESSFUL("SUCCESSFUL"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TTL_CONFIG_DELTA = "ttlConfigDelta";
  @SerializedName(SERIALIZED_NAME_TTL_CONFIG_DELTA)
  private GoogleFirestoreAdminV1TtlConfigDelta ttlConfigDelta;

  public GoogleFirestoreAdminV1FieldOperationMetadata() {
  }

  public GoogleFirestoreAdminV1FieldOperationMetadata endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time this operation completed. Will be unset if operation still in progress.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata field(String field) {
    this.field = field;
    return this;
  }

  /**
   * The field resource that this operation is acting on. For example: &#x60;projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}&#x60;
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata indexConfigDeltas(List<GoogleFirestoreAdminV1IndexConfigDelta> indexConfigDeltas) {
    this.indexConfigDeltas = indexConfigDeltas;
    return this;
  }

  public GoogleFirestoreAdminV1FieldOperationMetadata addIndexConfigDeltasItem(GoogleFirestoreAdminV1IndexConfigDelta indexConfigDeltasItem) {
    if (this.indexConfigDeltas == null) {
      this.indexConfigDeltas = new ArrayList<>();
    }
    this.indexConfigDeltas.add(indexConfigDeltasItem);
    return this;
  }

  /**
   * A list of IndexConfigDelta, which describe the intent of this operation.
   * @return indexConfigDeltas
   */
  @javax.annotation.Nullable
  public List<GoogleFirestoreAdminV1IndexConfigDelta> getIndexConfigDeltas() {
    return indexConfigDeltas;
  }

  public void setIndexConfigDeltas(List<GoogleFirestoreAdminV1IndexConfigDelta> indexConfigDeltas) {
    this.indexConfigDeltas = indexConfigDeltas;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata progressBytes(GoogleFirestoreAdminV1Progress progressBytes) {
    this.progressBytes = progressBytes;
    return this;
  }

  /**
   * Get progressBytes
   * @return progressBytes
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1Progress getProgressBytes() {
    return progressBytes;
  }

  public void setProgressBytes(GoogleFirestoreAdminV1Progress progressBytes) {
    this.progressBytes = progressBytes;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata progressDocuments(GoogleFirestoreAdminV1Progress progressDocuments) {
    this.progressDocuments = progressDocuments;
    return this;
  }

  /**
   * Get progressDocuments
   * @return progressDocuments
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1Progress getProgressDocuments() {
    return progressDocuments;
  }

  public void setProgressDocuments(GoogleFirestoreAdminV1Progress progressDocuments) {
    this.progressDocuments = progressDocuments;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time this operation started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the operation.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleFirestoreAdminV1FieldOperationMetadata ttlConfigDelta(GoogleFirestoreAdminV1TtlConfigDelta ttlConfigDelta) {
    this.ttlConfigDelta = ttlConfigDelta;
    return this;
  }

  /**
   * Get ttlConfigDelta
   * @return ttlConfigDelta
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1TtlConfigDelta getTtlConfigDelta() {
    return ttlConfigDelta;
  }

  public void setTtlConfigDelta(GoogleFirestoreAdminV1TtlConfigDelta ttlConfigDelta) {
    this.ttlConfigDelta = ttlConfigDelta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1FieldOperationMetadata googleFirestoreAdminV1FieldOperationMetadata = (GoogleFirestoreAdminV1FieldOperationMetadata) o;
    return Objects.equals(this.endTime, googleFirestoreAdminV1FieldOperationMetadata.endTime) &&
        Objects.equals(this.field, googleFirestoreAdminV1FieldOperationMetadata.field) &&
        Objects.equals(this.indexConfigDeltas, googleFirestoreAdminV1FieldOperationMetadata.indexConfigDeltas) &&
        Objects.equals(this.progressBytes, googleFirestoreAdminV1FieldOperationMetadata.progressBytes) &&
        Objects.equals(this.progressDocuments, googleFirestoreAdminV1FieldOperationMetadata.progressDocuments) &&
        Objects.equals(this.startTime, googleFirestoreAdminV1FieldOperationMetadata.startTime) &&
        Objects.equals(this.state, googleFirestoreAdminV1FieldOperationMetadata.state) &&
        Objects.equals(this.ttlConfigDelta, googleFirestoreAdminV1FieldOperationMetadata.ttlConfigDelta);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, field, indexConfigDeltas, progressBytes, progressDocuments, startTime, state, ttlConfigDelta);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1FieldOperationMetadata {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    indexConfigDeltas: ").append(toIndentedString(indexConfigDeltas)).append("\n");
    sb.append("    progressBytes: ").append(toIndentedString(progressBytes)).append("\n");
    sb.append("    progressDocuments: ").append(toIndentedString(progressDocuments)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    ttlConfigDelta: ").append(toIndentedString(ttlConfigDelta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("field");
    openapiFields.add("indexConfigDeltas");
    openapiFields.add("progressBytes");
    openapiFields.add("progressDocuments");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("ttlConfigDelta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1FieldOperationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1FieldOperationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1FieldOperationMetadata is not found in the empty JSON string", GoogleFirestoreAdminV1FieldOperationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1FieldOperationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1FieldOperationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if (jsonObj.get("indexConfigDeltas") != null && !jsonObj.get("indexConfigDeltas").isJsonNull()) {
        JsonArray jsonArrayindexConfigDeltas = jsonObj.getAsJsonArray("indexConfigDeltas");
        if (jsonArrayindexConfigDeltas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indexConfigDeltas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indexConfigDeltas` to be an array in the JSON string but got `%s`", jsonObj.get("indexConfigDeltas").toString()));
          }

          // validate the optional field `indexConfigDeltas` (array)
          for (int i = 0; i < jsonArrayindexConfigDeltas.size(); i++) {
            GoogleFirestoreAdminV1IndexConfigDelta.validateJsonElement(jsonArrayindexConfigDeltas.get(i));
          };
        }
      }
      // validate the optional field `progressBytes`
      if (jsonObj.get("progressBytes") != null && !jsonObj.get("progressBytes").isJsonNull()) {
        GoogleFirestoreAdminV1Progress.validateJsonElement(jsonObj.get("progressBytes"));
      }
      // validate the optional field `progressDocuments`
      if (jsonObj.get("progressDocuments") != null && !jsonObj.get("progressDocuments").isJsonNull()) {
        GoogleFirestoreAdminV1Progress.validateJsonElement(jsonObj.get("progressDocuments"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `ttlConfigDelta`
      if (jsonObj.get("ttlConfigDelta") != null && !jsonObj.get("ttlConfigDelta").isJsonNull()) {
        GoogleFirestoreAdminV1TtlConfigDelta.validateJsonElement(jsonObj.get("ttlConfigDelta"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1FieldOperationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1FieldOperationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1FieldOperationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1FieldOperationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1FieldOperationMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1FieldOperationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1FieldOperationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1FieldOperationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1FieldOperationMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1FieldOperationMetadata
   */
  public static GoogleFirestoreAdminV1FieldOperationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1FieldOperationMetadata.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1FieldOperationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

