/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Cloud Firestore Database.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1Database {
  /**
   * The App Engine integration mode to use for this database.
   */
  @JsonAdapter(AppEngineIntegrationModeEnum.Adapter.class)
  public enum AppEngineIntegrationModeEnum {
    APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED("APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    AppEngineIntegrationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppEngineIntegrationModeEnum fromValue(String value) {
      for (AppEngineIntegrationModeEnum b : AppEngineIntegrationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppEngineIntegrationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppEngineIntegrationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppEngineIntegrationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppEngineIntegrationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppEngineIntegrationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_ENGINE_INTEGRATION_MODE = "appEngineIntegrationMode";
  @SerializedName(SERIALIZED_NAME_APP_ENGINE_INTEGRATION_MODE)
  private AppEngineIntegrationModeEnum appEngineIntegrationMode;

  /**
   * The concurrency control mode to use for this database.
   */
  @JsonAdapter(ConcurrencyModeEnum.Adapter.class)
  public enum ConcurrencyModeEnum {
    CONCURRENCY_MODE_UNSPECIFIED("CONCURRENCY_MODE_UNSPECIFIED"),
    
    OPTIMISTIC("OPTIMISTIC"),
    
    PESSIMISTIC("PESSIMISTIC"),
    
    OPTIMISTIC_WITH_ENTITY_GROUPS("OPTIMISTIC_WITH_ENTITY_GROUPS");

    private String value;

    ConcurrencyModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConcurrencyModeEnum fromValue(String value) {
      for (ConcurrencyModeEnum b : ConcurrencyModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConcurrencyModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConcurrencyModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConcurrencyModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConcurrencyModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConcurrencyModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONCURRENCY_MODE = "concurrencyMode";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY_MODE)
  private ConcurrencyModeEnum concurrencyMode;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * State of delete protection for the database.
   */
  @JsonAdapter(DeleteProtectionStateEnum.Adapter.class)
  public enum DeleteProtectionStateEnum {
    STATE_UNSPECIFIED("DELETE_PROTECTION_STATE_UNSPECIFIED"),
    
    DISABLED("DELETE_PROTECTION_DISABLED"),
    
    ENABLED("DELETE_PROTECTION_ENABLED");

    private String value;

    DeleteProtectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeleteProtectionStateEnum fromValue(String value) {
      for (DeleteProtectionStateEnum b : DeleteProtectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeleteProtectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeleteProtectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeleteProtectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeleteProtectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeleteProtectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELETE_PROTECTION_STATE = "deleteProtectionState";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION_STATE)
  private DeleteProtectionStateEnum deleteProtectionState;

  public static final String SERIALIZED_NAME_EARLIEST_VERSION_TIME = "earliestVersionTime";
  @SerializedName(SERIALIZED_NAME_EARLIEST_VERSION_TIME)
  private String earliestVersionTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_KEY_PREFIX = "keyPrefix";
  @SerializedName(SERIALIZED_NAME_KEY_PREFIX)
  private String keyPrefix;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Whether to enable the PITR feature on this database.
   */
  @JsonAdapter(PointInTimeRecoveryEnablementEnum.Adapter.class)
  public enum PointInTimeRecoveryEnablementEnum {
    ENABLEMENT_UNSPECIFIED("POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED"),
    
    ENABLED("POINT_IN_TIME_RECOVERY_ENABLED"),
    
    DISABLED("POINT_IN_TIME_RECOVERY_DISABLED");

    private String value;

    PointInTimeRecoveryEnablementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PointInTimeRecoveryEnablementEnum fromValue(String value) {
      for (PointInTimeRecoveryEnablementEnum b : PointInTimeRecoveryEnablementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PointInTimeRecoveryEnablementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PointInTimeRecoveryEnablementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PointInTimeRecoveryEnablementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PointInTimeRecoveryEnablementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PointInTimeRecoveryEnablementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_ENABLEMENT = "pointInTimeRecoveryEnablement";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_ENABLEMENT)
  private PointInTimeRecoveryEnablementEnum pointInTimeRecoveryEnablement;

  /**
   * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATABASE_TYPE_UNSPECIFIED("DATABASE_TYPE_UNSPECIFIED"),
    
    FIRESTORE_NATIVE("FIRESTORE_NATIVE"),
    
    DATASTORE_MODE("DATASTORE_MODE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION_RETENTION_PERIOD = "versionRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_VERSION_RETENTION_PERIOD)
  private String versionRetentionPeriod;

  public GoogleFirestoreAdminV1Database() {
  }

  public GoogleFirestoreAdminV1Database(
     String createTime, 
     String earliestVersionTime, 
     String keyPrefix, 
     String uid, 
     String updateTime, 
     String versionRetentionPeriod
  ) {
    this();
    this.createTime = createTime;
    this.earliestVersionTime = earliestVersionTime;
    this.keyPrefix = keyPrefix;
    this.uid = uid;
    this.updateTime = updateTime;
    this.versionRetentionPeriod = versionRetentionPeriod;
  }

  public GoogleFirestoreAdminV1Database appEngineIntegrationMode(AppEngineIntegrationModeEnum appEngineIntegrationMode) {
    this.appEngineIntegrationMode = appEngineIntegrationMode;
    return this;
  }

  /**
   * The App Engine integration mode to use for this database.
   * @return appEngineIntegrationMode
   */
  @javax.annotation.Nullable
  public AppEngineIntegrationModeEnum getAppEngineIntegrationMode() {
    return appEngineIntegrationMode;
  }

  public void setAppEngineIntegrationMode(AppEngineIntegrationModeEnum appEngineIntegrationMode) {
    this.appEngineIntegrationMode = appEngineIntegrationMode;
  }


  public GoogleFirestoreAdminV1Database concurrencyMode(ConcurrencyModeEnum concurrencyMode) {
    this.concurrencyMode = concurrencyMode;
    return this;
  }

  /**
   * The concurrency control mode to use for this database.
   * @return concurrencyMode
   */
  @javax.annotation.Nullable
  public ConcurrencyModeEnum getConcurrencyMode() {
    return concurrencyMode;
  }

  public void setConcurrencyMode(ConcurrencyModeEnum concurrencyMode) {
    this.concurrencyMode = concurrencyMode;
  }


  /**
   * Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleFirestoreAdminV1Database deleteProtectionState(DeleteProtectionStateEnum deleteProtectionState) {
    this.deleteProtectionState = deleteProtectionState;
    return this;
  }

  /**
   * State of delete protection for the database.
   * @return deleteProtectionState
   */
  @javax.annotation.Nullable
  public DeleteProtectionStateEnum getDeleteProtectionState() {
    return deleteProtectionState;
  }

  public void setDeleteProtectionState(DeleteProtectionStateEnum deleteProtectionState) {
    this.deleteProtectionState = deleteProtectionState;
  }


  /**
   * Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with &#x60;now - version_retention_period&#x60;. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
   * @return earliestVersionTime
   */
  @javax.annotation.Nullable
  public String getEarliestVersionTime() {
    return earliestVersionTime;
  }



  public GoogleFirestoreAdminV1Database etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id (\&quot;~\&quot;) to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
   * @return keyPrefix
   */
  @javax.annotation.Nullable
  public String getKeyPrefix() {
    return keyPrefix;
  }



  public GoogleFirestoreAdminV1Database locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public GoogleFirestoreAdminV1Database name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the Database. Format: &#x60;projects/{project}/databases/{database}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleFirestoreAdminV1Database pointInTimeRecoveryEnablement(PointInTimeRecoveryEnablementEnum pointInTimeRecoveryEnablement) {
    this.pointInTimeRecoveryEnablement = pointInTimeRecoveryEnablement;
    return this;
  }

  /**
   * Whether to enable the PITR feature on this database.
   * @return pointInTimeRecoveryEnablement
   */
  @javax.annotation.Nullable
  public PointInTimeRecoveryEnablementEnum getPointInTimeRecoveryEnablement() {
    return pointInTimeRecoveryEnablement;
  }

  public void setPointInTimeRecoveryEnablement(PointInTimeRecoveryEnablementEnum pointInTimeRecoveryEnablement) {
    this.pointInTimeRecoveryEnablement = pointInTimeRecoveryEnablement;
  }


  public GoogleFirestoreAdminV1Database type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The system-generated UUID4 for this Database.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. The period during which past versions of data are retained in the database. Any read or query can specify a &#x60;read_time&#x60; within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
   * @return versionRetentionPeriod
   */
  @javax.annotation.Nullable
  public String getVersionRetentionPeriod() {
    return versionRetentionPeriod;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1Database googleFirestoreAdminV1Database = (GoogleFirestoreAdminV1Database) o;
    return Objects.equals(this.appEngineIntegrationMode, googleFirestoreAdminV1Database.appEngineIntegrationMode) &&
        Objects.equals(this.concurrencyMode, googleFirestoreAdminV1Database.concurrencyMode) &&
        Objects.equals(this.createTime, googleFirestoreAdminV1Database.createTime) &&
        Objects.equals(this.deleteProtectionState, googleFirestoreAdminV1Database.deleteProtectionState) &&
        Objects.equals(this.earliestVersionTime, googleFirestoreAdminV1Database.earliestVersionTime) &&
        Objects.equals(this.etag, googleFirestoreAdminV1Database.etag) &&
        Objects.equals(this.keyPrefix, googleFirestoreAdminV1Database.keyPrefix) &&
        Objects.equals(this.locationId, googleFirestoreAdminV1Database.locationId) &&
        Objects.equals(this.name, googleFirestoreAdminV1Database.name) &&
        Objects.equals(this.pointInTimeRecoveryEnablement, googleFirestoreAdminV1Database.pointInTimeRecoveryEnablement) &&
        Objects.equals(this.type, googleFirestoreAdminV1Database.type) &&
        Objects.equals(this.uid, googleFirestoreAdminV1Database.uid) &&
        Objects.equals(this.updateTime, googleFirestoreAdminV1Database.updateTime) &&
        Objects.equals(this.versionRetentionPeriod, googleFirestoreAdminV1Database.versionRetentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appEngineIntegrationMode, concurrencyMode, createTime, deleteProtectionState, earliestVersionTime, etag, keyPrefix, locationId, name, pointInTimeRecoveryEnablement, type, uid, updateTime, versionRetentionPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1Database {\n");
    sb.append("    appEngineIntegrationMode: ").append(toIndentedString(appEngineIntegrationMode)).append("\n");
    sb.append("    concurrencyMode: ").append(toIndentedString(concurrencyMode)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteProtectionState: ").append(toIndentedString(deleteProtectionState)).append("\n");
    sb.append("    earliestVersionTime: ").append(toIndentedString(earliestVersionTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    keyPrefix: ").append(toIndentedString(keyPrefix)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pointInTimeRecoveryEnablement: ").append(toIndentedString(pointInTimeRecoveryEnablement)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    versionRetentionPeriod: ").append(toIndentedString(versionRetentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appEngineIntegrationMode");
    openapiFields.add("concurrencyMode");
    openapiFields.add("createTime");
    openapiFields.add("deleteProtectionState");
    openapiFields.add("earliestVersionTime");
    openapiFields.add("etag");
    openapiFields.add("keyPrefix");
    openapiFields.add("locationId");
    openapiFields.add("name");
    openapiFields.add("pointInTimeRecoveryEnablement");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("versionRetentionPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1Database
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1Database.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1Database is not found in the empty JSON string", GoogleFirestoreAdminV1Database.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1Database.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1Database` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appEngineIntegrationMode") != null && !jsonObj.get("appEngineIntegrationMode").isJsonNull()) && !jsonObj.get("appEngineIntegrationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appEngineIntegrationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appEngineIntegrationMode").toString()));
      }
      // validate the optional field `appEngineIntegrationMode`
      if (jsonObj.get("appEngineIntegrationMode") != null && !jsonObj.get("appEngineIntegrationMode").isJsonNull()) {
        AppEngineIntegrationModeEnum.validateJsonElement(jsonObj.get("appEngineIntegrationMode"));
      }
      if ((jsonObj.get("concurrencyMode") != null && !jsonObj.get("concurrencyMode").isJsonNull()) && !jsonObj.get("concurrencyMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concurrencyMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concurrencyMode").toString()));
      }
      // validate the optional field `concurrencyMode`
      if (jsonObj.get("concurrencyMode") != null && !jsonObj.get("concurrencyMode").isJsonNull()) {
        ConcurrencyModeEnum.validateJsonElement(jsonObj.get("concurrencyMode"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteProtectionState") != null && !jsonObj.get("deleteProtectionState").isJsonNull()) && !jsonObj.get("deleteProtectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteProtectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteProtectionState").toString()));
      }
      // validate the optional field `deleteProtectionState`
      if (jsonObj.get("deleteProtectionState") != null && !jsonObj.get("deleteProtectionState").isJsonNull()) {
        DeleteProtectionStateEnum.validateJsonElement(jsonObj.get("deleteProtectionState"));
      }
      if ((jsonObj.get("earliestVersionTime") != null && !jsonObj.get("earliestVersionTime").isJsonNull()) && !jsonObj.get("earliestVersionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `earliestVersionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("earliestVersionTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("keyPrefix") != null && !jsonObj.get("keyPrefix").isJsonNull()) && !jsonObj.get("keyPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyPrefix").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pointInTimeRecoveryEnablement") != null && !jsonObj.get("pointInTimeRecoveryEnablement").isJsonNull()) && !jsonObj.get("pointInTimeRecoveryEnablement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointInTimeRecoveryEnablement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointInTimeRecoveryEnablement").toString()));
      }
      // validate the optional field `pointInTimeRecoveryEnablement`
      if (jsonObj.get("pointInTimeRecoveryEnablement") != null && !jsonObj.get("pointInTimeRecoveryEnablement").isJsonNull()) {
        PointInTimeRecoveryEnablementEnum.validateJsonElement(jsonObj.get("pointInTimeRecoveryEnablement"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("versionRetentionPeriod") != null && !jsonObj.get("versionRetentionPeriod").isJsonNull()) && !jsonObj.get("versionRetentionPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionRetentionPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionRetentionPeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1Database.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1Database' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1Database> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1Database.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1Database>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1Database value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1Database read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1Database given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1Database
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1Database
   */
  public static GoogleFirestoreAdminV1Database fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1Database.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1Database to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

