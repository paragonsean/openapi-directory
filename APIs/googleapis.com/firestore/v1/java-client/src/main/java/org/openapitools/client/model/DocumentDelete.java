/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentDelete {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_REMOVED_TARGET_IDS = "removedTargetIds";
  @SerializedName(SERIALIZED_NAME_REMOVED_TARGET_IDS)
  private List<Integer> removedTargetIds = new ArrayList<>();

  public DocumentDelete() {
  }

  public DocumentDelete document(String document) {
    this.document = document;
    return this;
  }

  /**
   * The resource name of the Document that was deleted.
   * @return document
   */
  @javax.annotation.Nullable
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public DocumentDelete readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * The read timestamp at which the delete was observed. Greater or equal to the &#x60;commit_time&#x60; of the delete.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public DocumentDelete removedTargetIds(List<Integer> removedTargetIds) {
    this.removedTargetIds = removedTargetIds;
    return this;
  }

  public DocumentDelete addRemovedTargetIdsItem(Integer removedTargetIdsItem) {
    if (this.removedTargetIds == null) {
      this.removedTargetIds = new ArrayList<>();
    }
    this.removedTargetIds.add(removedTargetIdsItem);
    return this;
  }

  /**
   * A set of target IDs for targets that previously matched this entity.
   * @return removedTargetIds
   */
  @javax.annotation.Nullable
  public List<Integer> getRemovedTargetIds() {
    return removedTargetIds;
  }

  public void setRemovedTargetIds(List<Integer> removedTargetIds) {
    this.removedTargetIds = removedTargetIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDelete documentDelete = (DocumentDelete) o;
    return Objects.equals(this.document, documentDelete.document) &&
        Objects.equals(this.readTime, documentDelete.readTime) &&
        Objects.equals(this.removedTargetIds, documentDelete.removedTargetIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, readTime, removedTargetIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDelete {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    removedTargetIds: ").append(toIndentedString(removedTargetIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("readTime");
    openapiFields.add("removedTargetIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentDelete
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentDelete.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentDelete is not found in the empty JSON string", DocumentDelete.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentDelete.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentDelete` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removedTargetIds") != null && !jsonObj.get("removedTargetIds").isJsonNull() && !jsonObj.get("removedTargetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removedTargetIds` to be an array in the JSON string but got `%s`", jsonObj.get("removedTargetIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentDelete.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentDelete' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentDelete> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentDelete.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentDelete>() {
           @Override
           public void write(JsonWriter out, DocumentDelete value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentDelete read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentDelete given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentDelete
   * @throws IOException if the JSON string is invalid with respect to DocumentDelete
   */
  public static DocumentDelete fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentDelete.class);
  }

  /**
   * Convert an instance of DocumentDelete to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

