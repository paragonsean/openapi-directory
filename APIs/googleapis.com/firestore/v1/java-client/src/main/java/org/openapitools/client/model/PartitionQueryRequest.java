/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StructuredQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for Firestore.PartitionQuery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionQueryRequest {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_PARTITION_COUNT = "partitionCount";
  @SerializedName(SERIALIZED_NAME_PARTITION_COUNT)
  private String partitionCount;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_STRUCTURED_QUERY = "structuredQuery";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_QUERY)
  private StructuredQuery structuredQuery;

  public PartitionQueryRequest() {
  }

  public PartitionQueryRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The maximum number of partitions to return in this call, subject to &#x60;partition_count&#x60;. For example, if &#x60;partition_count&#x60; &#x3D; 10 and &#x60;page_size&#x60; &#x3D; 8, the first call to PartitionQuery will return up to 8 partitions and a &#x60;next_page_token&#x60; if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in &#x60;partition_count&#x60;.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public PartitionQueryRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * The &#x60;next_page_token&#x60; value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public PartitionQueryRequest partitionCount(String partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

  /**
   * The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.
   * @return partitionCount
   */
  @javax.annotation.Nullable
  public String getPartitionCount() {
    return partitionCount;
  }

  public void setPartitionCount(String partitionCount) {
    this.partitionCount = partitionCount;
  }


  public PartitionQueryRequest readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public PartitionQueryRequest structuredQuery(StructuredQuery structuredQuery) {
    this.structuredQuery = structuredQuery;
    return this;
  }

  /**
   * Get structuredQuery
   * @return structuredQuery
   */
  @javax.annotation.Nullable
  public StructuredQuery getStructuredQuery() {
    return structuredQuery;
  }

  public void setStructuredQuery(StructuredQuery structuredQuery) {
    this.structuredQuery = structuredQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionQueryRequest partitionQueryRequest = (PartitionQueryRequest) o;
    return Objects.equals(this.pageSize, partitionQueryRequest.pageSize) &&
        Objects.equals(this.pageToken, partitionQueryRequest.pageToken) &&
        Objects.equals(this.partitionCount, partitionQueryRequest.partitionCount) &&
        Objects.equals(this.readTime, partitionQueryRequest.readTime) &&
        Objects.equals(this.structuredQuery, partitionQueryRequest.structuredQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, pageToken, partitionCount, readTime, structuredQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionQueryRequest {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    partitionCount: ").append(toIndentedString(partitionCount)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    structuredQuery: ").append(toIndentedString(structuredQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageSize");
    openapiFields.add("pageToken");
    openapiFields.add("partitionCount");
    openapiFields.add("readTime");
    openapiFields.add("structuredQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionQueryRequest is not found in the empty JSON string", PartitionQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if ((jsonObj.get("partitionCount") != null && !jsonObj.get("partitionCount").isJsonNull()) && !jsonObj.get("partitionCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionCount").toString()));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
      // validate the optional field `structuredQuery`
      if (jsonObj.get("structuredQuery") != null && !jsonObj.get("structuredQuery").isJsonNull()) {
        StructuredQuery.validateJsonElement(jsonObj.get("structuredQuery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionQueryRequest>() {
           @Override
           public void write(JsonWriter out, PartitionQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionQueryRequest
   * @throws IOException if the JSON string is invalid with respect to PartitionQueryRequest
   */
  public static PartitionQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionQueryRequest.class);
  }

  /**
   * Convert an instance of PartitionQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

