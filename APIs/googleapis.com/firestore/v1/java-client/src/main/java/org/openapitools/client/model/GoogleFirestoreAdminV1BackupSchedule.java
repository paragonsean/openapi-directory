/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleFirestoreAdminV1WeeklyRecurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1BackupSchedule {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DAILY_RECURRENCE = "dailyRecurrence";
  @SerializedName(SERIALIZED_NAME_DAILY_RECURRENCE)
  private Object dailyRecurrence;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RETENTION = "retention";
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private String retention;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WEEKLY_RECURRENCE = "weeklyRecurrence";
  @SerializedName(SERIALIZED_NAME_WEEKLY_RECURRENCE)
  private GoogleFirestoreAdminV1WeeklyRecurrence weeklyRecurrence;

  public GoogleFirestoreAdminV1BackupSchedule() {
  }

  public GoogleFirestoreAdminV1BackupSchedule(
     String createTime, 
     String name, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleFirestoreAdminV1BackupSchedule dailyRecurrence(Object dailyRecurrence) {
    this.dailyRecurrence = dailyRecurrence;
    return this;
  }

  /**
   * Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.
   * @return dailyRecurrence
   */
  @javax.annotation.Nullable
  public Object getDailyRecurrence() {
    return dailyRecurrence;
  }

  public void setDailyRecurrence(Object dailyRecurrence) {
    this.dailyRecurrence = dailyRecurrence;
  }


  /**
   * Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is &#x60;projects/{project}/databases/{database}/backupSchedules/{backup_schedule}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleFirestoreAdminV1BackupSchedule retention(String retention) {
    this.retention = retention;
    return this;
  }

  /**
   * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
   * @return retention
   */
  @javax.annotation.Nullable
  public String getRetention() {
    return retention;
  }

  public void setRetention(String retention) {
    this.retention = retention;
  }


  /**
   * Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public GoogleFirestoreAdminV1BackupSchedule weeklyRecurrence(GoogleFirestoreAdminV1WeeklyRecurrence weeklyRecurrence) {
    this.weeklyRecurrence = weeklyRecurrence;
    return this;
  }

  /**
   * Get weeklyRecurrence
   * @return weeklyRecurrence
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1WeeklyRecurrence getWeeklyRecurrence() {
    return weeklyRecurrence;
  }

  public void setWeeklyRecurrence(GoogleFirestoreAdminV1WeeklyRecurrence weeklyRecurrence) {
    this.weeklyRecurrence = weeklyRecurrence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1BackupSchedule googleFirestoreAdminV1BackupSchedule = (GoogleFirestoreAdminV1BackupSchedule) o;
    return Objects.equals(this.createTime, googleFirestoreAdminV1BackupSchedule.createTime) &&
        Objects.equals(this.dailyRecurrence, googleFirestoreAdminV1BackupSchedule.dailyRecurrence) &&
        Objects.equals(this.name, googleFirestoreAdminV1BackupSchedule.name) &&
        Objects.equals(this.retention, googleFirestoreAdminV1BackupSchedule.retention) &&
        Objects.equals(this.updateTime, googleFirestoreAdminV1BackupSchedule.updateTime) &&
        Objects.equals(this.weeklyRecurrence, googleFirestoreAdminV1BackupSchedule.weeklyRecurrence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, dailyRecurrence, name, retention, updateTime, weeklyRecurrence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1BackupSchedule {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dailyRecurrence: ").append(toIndentedString(dailyRecurrence)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    weeklyRecurrence: ").append(toIndentedString(weeklyRecurrence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("dailyRecurrence");
    openapiFields.add("name");
    openapiFields.add("retention");
    openapiFields.add("updateTime");
    openapiFields.add("weeklyRecurrence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1BackupSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1BackupSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1BackupSchedule is not found in the empty JSON string", GoogleFirestoreAdminV1BackupSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1BackupSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1BackupSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("retention") != null && !jsonObj.get("retention").isJsonNull()) && !jsonObj.get("retention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `weeklyRecurrence`
      if (jsonObj.get("weeklyRecurrence") != null && !jsonObj.get("weeklyRecurrence").isJsonNull()) {
        GoogleFirestoreAdminV1WeeklyRecurrence.validateJsonElement(jsonObj.get("weeklyRecurrence"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1BackupSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1BackupSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1BackupSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1BackupSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1BackupSchedule>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1BackupSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1BackupSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1BackupSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1BackupSchedule
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1BackupSchedule
   */
  public static GoogleFirestoreAdminV1BackupSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1BackupSchedule.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1BackupSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

