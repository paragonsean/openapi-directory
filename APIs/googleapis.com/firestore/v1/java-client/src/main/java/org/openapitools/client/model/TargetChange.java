/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Targets being watched have changed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetChange {
  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private Status cause;

  public static final String SERIALIZED_NAME_READ_TIME = "readTime";
  @SerializedName(SERIALIZED_NAME_READ_TIME)
  private String readTime;

  public static final String SERIALIZED_NAME_RESUME_TOKEN = "resumeToken";
  @SerializedName(SERIALIZED_NAME_RESUME_TOKEN)
  private byte[] resumeToken;

  /**
   * The type of change that occurred.
   */
  @JsonAdapter(TargetChangeTypeEnum.Adapter.class)
  public enum TargetChangeTypeEnum {
    NO_CHANGE("NO_CHANGE"),
    
    ADD("ADD"),
    
    REMOVE("REMOVE"),
    
    CURRENT("CURRENT"),
    
    RESET("RESET");

    private String value;

    TargetChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetChangeTypeEnum fromValue(String value) {
      for (TargetChangeTypeEnum b : TargetChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_CHANGE_TYPE = "targetChangeType";
  @SerializedName(SERIALIZED_NAME_TARGET_CHANGE_TYPE)
  private TargetChangeTypeEnum targetChangeType;

  public static final String SERIALIZED_NAME_TARGET_IDS = "targetIds";
  @SerializedName(SERIALIZED_NAME_TARGET_IDS)
  private List<Integer> targetIds = new ArrayList<>();

  public TargetChange() {
  }

  public TargetChange cause(Status cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Get cause
   * @return cause
   */
  @javax.annotation.Nullable
  public Status getCause() {
    return cause;
  }

  public void setCause(Status cause) {
    this.cause = cause;
  }


  public TargetChange readTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * The consistent &#x60;read_time&#x60; for the given &#x60;target_ids&#x60; (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a &#x60;read_time&#x60; with &#x60;target_ids&#x60; empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, &#x60;read_time&#x60; is guaranteed to be monotonically increasing.
   * @return readTime
   */
  @javax.annotation.Nullable
  public String getReadTime() {
    return readTime;
  }

  public void setReadTime(String readTime) {
    this.readTime = readTime;
  }


  public TargetChange resumeToken(byte[] resumeToken) {
    this.resumeToken = resumeToken;
    return this;
  }

  /**
   * A token that can be used to resume the stream for the given &#x60;target_ids&#x60;, or all targets if &#x60;target_ids&#x60; is empty. Not set on every target change.
   * @return resumeToken
   */
  @javax.annotation.Nullable
  public byte[] getResumeToken() {
    return resumeToken;
  }

  public void setResumeToken(byte[] resumeToken) {
    this.resumeToken = resumeToken;
  }


  public TargetChange targetChangeType(TargetChangeTypeEnum targetChangeType) {
    this.targetChangeType = targetChangeType;
    return this;
  }

  /**
   * The type of change that occurred.
   * @return targetChangeType
   */
  @javax.annotation.Nullable
  public TargetChangeTypeEnum getTargetChangeType() {
    return targetChangeType;
  }

  public void setTargetChangeType(TargetChangeTypeEnum targetChangeType) {
    this.targetChangeType = targetChangeType;
  }


  public TargetChange targetIds(List<Integer> targetIds) {
    this.targetIds = targetIds;
    return this;
  }

  public TargetChange addTargetIdsItem(Integer targetIdsItem) {
    if (this.targetIds == null) {
      this.targetIds = new ArrayList<>();
    }
    this.targetIds.add(targetIdsItem);
    return this;
  }

  /**
   * The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.
   * @return targetIds
   */
  @javax.annotation.Nullable
  public List<Integer> getTargetIds() {
    return targetIds;
  }

  public void setTargetIds(List<Integer> targetIds) {
    this.targetIds = targetIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetChange targetChange = (TargetChange) o;
    return Objects.equals(this.cause, targetChange.cause) &&
        Objects.equals(this.readTime, targetChange.readTime) &&
        Arrays.equals(this.resumeToken, targetChange.resumeToken) &&
        Objects.equals(this.targetChangeType, targetChange.targetChangeType) &&
        Objects.equals(this.targetIds, targetChange.targetIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cause, readTime, Arrays.hashCode(resumeToken), targetChangeType, targetIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetChange {\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    readTime: ").append(toIndentedString(readTime)).append("\n");
    sb.append("    resumeToken: ").append(toIndentedString(resumeToken)).append("\n");
    sb.append("    targetChangeType: ").append(toIndentedString(targetChangeType)).append("\n");
    sb.append("    targetIds: ").append(toIndentedString(targetIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cause");
    openapiFields.add("readTime");
    openapiFields.add("resumeToken");
    openapiFields.add("targetChangeType");
    openapiFields.add("targetIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetChange is not found in the empty JSON string", TargetChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("cause"));
      }
      if ((jsonObj.get("readTime") != null && !jsonObj.get("readTime").isJsonNull()) && !jsonObj.get("readTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTime").toString()));
      }
      if ((jsonObj.get("targetChangeType") != null && !jsonObj.get("targetChangeType").isJsonNull()) && !jsonObj.get("targetChangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetChangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetChangeType").toString()));
      }
      // validate the optional field `targetChangeType`
      if (jsonObj.get("targetChangeType") != null && !jsonObj.get("targetChangeType").isJsonNull()) {
        TargetChangeTypeEnum.validateJsonElement(jsonObj.get("targetChangeType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetIds") != null && !jsonObj.get("targetIds").isJsonNull() && !jsonObj.get("targetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetIds` to be an array in the JSON string but got `%s`", jsonObj.get("targetIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetChange.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetChange>() {
           @Override
           public void write(JsonWriter out, TargetChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetChange
   * @throws IOException if the JSON string is invalid with respect to TargetChange
   */
  public static TargetChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetChange.class);
  }

  /**
   * Convert an instance of TargetChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

