/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleFirestoreAdminV1Progress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for google.longrunning.Operation results from FirestoreAdmin.ExportDocuments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:23.167853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleFirestoreAdminV1ExportDocumentsMetadata {
  public static final String SERIALIZED_NAME_COLLECTION_IDS = "collectionIds";
  @SerializedName(SERIALIZED_NAME_COLLECTION_IDS)
  private List<String> collectionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_NAMESPACE_IDS = "namespaceIds";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_IDS)
  private List<String> namespaceIds = new ArrayList<>();

  /**
   * The state of the export operation.
   */
  @JsonAdapter(OperationStateEnum.Adapter.class)
  public enum OperationStateEnum {
    OPERATION_STATE_UNSPECIFIED("OPERATION_STATE_UNSPECIFIED"),
    
    INITIALIZING("INITIALIZING"),
    
    PROCESSING("PROCESSING"),
    
    CANCELLING("CANCELLING"),
    
    FINALIZING("FINALIZING"),
    
    SUCCESSFUL("SUCCESSFUL"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED");

    private String value;

    OperationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationStateEnum fromValue(String value) {
      for (OperationStateEnum b : OperationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_STATE = "operationState";
  @SerializedName(SERIALIZED_NAME_OPERATION_STATE)
  private OperationStateEnum operationState;

  public static final String SERIALIZED_NAME_OUTPUT_URI_PREFIX = "outputUriPrefix";
  @SerializedName(SERIALIZED_NAME_OUTPUT_URI_PREFIX)
  private String outputUriPrefix;

  public static final String SERIALIZED_NAME_PROGRESS_BYTES = "progressBytes";
  @SerializedName(SERIALIZED_NAME_PROGRESS_BYTES)
  private GoogleFirestoreAdminV1Progress progressBytes;

  public static final String SERIALIZED_NAME_PROGRESS_DOCUMENTS = "progressDocuments";
  @SerializedName(SERIALIZED_NAME_PROGRESS_DOCUMENTS)
  private GoogleFirestoreAdminV1Progress progressDocuments;

  public static final String SERIALIZED_NAME_SNAPSHOT_TIME = "snapshotTime";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_TIME)
  private String snapshotTime;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public GoogleFirestoreAdminV1ExportDocumentsMetadata() {
  }

  public GoogleFirestoreAdminV1ExportDocumentsMetadata collectionIds(List<String> collectionIds) {
    this.collectionIds = collectionIds;
    return this;
  }

  public GoogleFirestoreAdminV1ExportDocumentsMetadata addCollectionIdsItem(String collectionIdsItem) {
    if (this.collectionIds == null) {
      this.collectionIds = new ArrayList<>();
    }
    this.collectionIds.add(collectionIdsItem);
    return this;
  }

  /**
   * Which collection ids are being exported.
   * @return collectionIds
   */
  @javax.annotation.Nullable
  public List<String> getCollectionIds() {
    return collectionIds;
  }

  public void setCollectionIds(List<String> collectionIds) {
    this.collectionIds = collectionIds;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time this operation completed. Will be unset if operation still in progress.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata namespaceIds(List<String> namespaceIds) {
    this.namespaceIds = namespaceIds;
    return this;
  }

  public GoogleFirestoreAdminV1ExportDocumentsMetadata addNamespaceIdsItem(String namespaceIdsItem) {
    if (this.namespaceIds == null) {
      this.namespaceIds = new ArrayList<>();
    }
    this.namespaceIds.add(namespaceIdsItem);
    return this;
  }

  /**
   * Which namespace ids are being exported.
   * @return namespaceIds
   */
  @javax.annotation.Nullable
  public List<String> getNamespaceIds() {
    return namespaceIds;
  }

  public void setNamespaceIds(List<String> namespaceIds) {
    this.namespaceIds = namespaceIds;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata operationState(OperationStateEnum operationState) {
    this.operationState = operationState;
    return this;
  }

  /**
   * The state of the export operation.
   * @return operationState
   */
  @javax.annotation.Nullable
  public OperationStateEnum getOperationState() {
    return operationState;
  }

  public void setOperationState(OperationStateEnum operationState) {
    this.operationState = operationState;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata outputUriPrefix(String outputUriPrefix) {
    this.outputUriPrefix = outputUriPrefix;
    return this;
  }

  /**
   * Where the documents are being exported to.
   * @return outputUriPrefix
   */
  @javax.annotation.Nullable
  public String getOutputUriPrefix() {
    return outputUriPrefix;
  }

  public void setOutputUriPrefix(String outputUriPrefix) {
    this.outputUriPrefix = outputUriPrefix;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata progressBytes(GoogleFirestoreAdminV1Progress progressBytes) {
    this.progressBytes = progressBytes;
    return this;
  }

  /**
   * Get progressBytes
   * @return progressBytes
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1Progress getProgressBytes() {
    return progressBytes;
  }

  public void setProgressBytes(GoogleFirestoreAdminV1Progress progressBytes) {
    this.progressBytes = progressBytes;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata progressDocuments(GoogleFirestoreAdminV1Progress progressDocuments) {
    this.progressDocuments = progressDocuments;
    return this;
  }

  /**
   * Get progressDocuments
   * @return progressDocuments
   */
  @javax.annotation.Nullable
  public GoogleFirestoreAdminV1Progress getProgressDocuments() {
    return progressDocuments;
  }

  public void setProgressDocuments(GoogleFirestoreAdminV1Progress progressDocuments) {
    this.progressDocuments = progressDocuments;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata snapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
    return this;
  }

  /**
   * The timestamp that corresponds to the version of the database that is being exported. If unspecified, there are no guarantees about the consistency of the documents being exported.
   * @return snapshotTime
   */
  @javax.annotation.Nullable
  public String getSnapshotTime() {
    return snapshotTime;
  }

  public void setSnapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
  }


  public GoogleFirestoreAdminV1ExportDocumentsMetadata startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time this operation started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFirestoreAdminV1ExportDocumentsMetadata googleFirestoreAdminV1ExportDocumentsMetadata = (GoogleFirestoreAdminV1ExportDocumentsMetadata) o;
    return Objects.equals(this.collectionIds, googleFirestoreAdminV1ExportDocumentsMetadata.collectionIds) &&
        Objects.equals(this.endTime, googleFirestoreAdminV1ExportDocumentsMetadata.endTime) &&
        Objects.equals(this.namespaceIds, googleFirestoreAdminV1ExportDocumentsMetadata.namespaceIds) &&
        Objects.equals(this.operationState, googleFirestoreAdminV1ExportDocumentsMetadata.operationState) &&
        Objects.equals(this.outputUriPrefix, googleFirestoreAdminV1ExportDocumentsMetadata.outputUriPrefix) &&
        Objects.equals(this.progressBytes, googleFirestoreAdminV1ExportDocumentsMetadata.progressBytes) &&
        Objects.equals(this.progressDocuments, googleFirestoreAdminV1ExportDocumentsMetadata.progressDocuments) &&
        Objects.equals(this.snapshotTime, googleFirestoreAdminV1ExportDocumentsMetadata.snapshotTime) &&
        Objects.equals(this.startTime, googleFirestoreAdminV1ExportDocumentsMetadata.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionIds, endTime, namespaceIds, operationState, outputUriPrefix, progressBytes, progressDocuments, snapshotTime, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFirestoreAdminV1ExportDocumentsMetadata {\n");
    sb.append("    collectionIds: ").append(toIndentedString(collectionIds)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    namespaceIds: ").append(toIndentedString(namespaceIds)).append("\n");
    sb.append("    operationState: ").append(toIndentedString(operationState)).append("\n");
    sb.append("    outputUriPrefix: ").append(toIndentedString(outputUriPrefix)).append("\n");
    sb.append("    progressBytes: ").append(toIndentedString(progressBytes)).append("\n");
    sb.append("    progressDocuments: ").append(toIndentedString(progressDocuments)).append("\n");
    sb.append("    snapshotTime: ").append(toIndentedString(snapshotTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectionIds");
    openapiFields.add("endTime");
    openapiFields.add("namespaceIds");
    openapiFields.add("operationState");
    openapiFields.add("outputUriPrefix");
    openapiFields.add("progressBytes");
    openapiFields.add("progressDocuments");
    openapiFields.add("snapshotTime");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFirestoreAdminV1ExportDocumentsMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFirestoreAdminV1ExportDocumentsMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFirestoreAdminV1ExportDocumentsMetadata is not found in the empty JSON string", GoogleFirestoreAdminV1ExportDocumentsMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleFirestoreAdminV1ExportDocumentsMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleFirestoreAdminV1ExportDocumentsMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("collectionIds") != null && !jsonObj.get("collectionIds").isJsonNull() && !jsonObj.get("collectionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionIds` to be an array in the JSON string but got `%s`", jsonObj.get("collectionIds").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("namespaceIds") != null && !jsonObj.get("namespaceIds").isJsonNull() && !jsonObj.get("namespaceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaceIds` to be an array in the JSON string but got `%s`", jsonObj.get("namespaceIds").toString()));
      }
      if ((jsonObj.get("operationState") != null && !jsonObj.get("operationState").isJsonNull()) && !jsonObj.get("operationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationState").toString()));
      }
      // validate the optional field `operationState`
      if (jsonObj.get("operationState") != null && !jsonObj.get("operationState").isJsonNull()) {
        OperationStateEnum.validateJsonElement(jsonObj.get("operationState"));
      }
      if ((jsonObj.get("outputUriPrefix") != null && !jsonObj.get("outputUriPrefix").isJsonNull()) && !jsonObj.get("outputUriPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputUriPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputUriPrefix").toString()));
      }
      // validate the optional field `progressBytes`
      if (jsonObj.get("progressBytes") != null && !jsonObj.get("progressBytes").isJsonNull()) {
        GoogleFirestoreAdminV1Progress.validateJsonElement(jsonObj.get("progressBytes"));
      }
      // validate the optional field `progressDocuments`
      if (jsonObj.get("progressDocuments") != null && !jsonObj.get("progressDocuments").isJsonNull()) {
        GoogleFirestoreAdminV1Progress.validateJsonElement(jsonObj.get("progressDocuments"));
      }
      if ((jsonObj.get("snapshotTime") != null && !jsonObj.get("snapshotTime").isJsonNull()) && !jsonObj.get("snapshotTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotTime").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFirestoreAdminV1ExportDocumentsMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFirestoreAdminV1ExportDocumentsMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFirestoreAdminV1ExportDocumentsMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFirestoreAdminV1ExportDocumentsMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFirestoreAdminV1ExportDocumentsMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleFirestoreAdminV1ExportDocumentsMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFirestoreAdminV1ExportDocumentsMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFirestoreAdminV1ExportDocumentsMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFirestoreAdminV1ExportDocumentsMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleFirestoreAdminV1ExportDocumentsMetadata
   */
  public static GoogleFirestoreAdminV1ExportDocumentsMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFirestoreAdminV1ExportDocumentsMetadata.class);
  }

  /**
   * Convert an instance of GoogleFirestoreAdminV1ExportDocumentsMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

