/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudFirestoreApi);
  }
}(this, function(expect, CloudFirestoreApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleFirestoreAdminV1Database', function() {
    it('should create an instance of GoogleFirestoreAdminV1Database', function() {
      // uncomment below and update the code to test GoogleFirestoreAdminV1Database
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be.a(CloudFirestoreApi.GoogleFirestoreAdminV1Database);
    });

    it('should have the property appEngineIntegrationMode (base name: "appEngineIntegrationMode")', function() {
      // uncomment below and update the code to test the property appEngineIntegrationMode
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property concurrencyMode (base name: "concurrencyMode")', function() {
      // uncomment below and update the code to test the property concurrencyMode
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property deleteProtectionState (base name: "deleteProtectionState")', function() {
      // uncomment below and update the code to test the property deleteProtectionState
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property earliestVersionTime (base name: "earliestVersionTime")', function() {
      // uncomment below and update the code to test the property earliestVersionTime
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property keyPrefix (base name: "keyPrefix")', function() {
      // uncomment below and update the code to test the property keyPrefix
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property locationId (base name: "locationId")', function() {
      // uncomment below and update the code to test the property locationId
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property pointInTimeRecoveryEnablement (base name: "pointInTimeRecoveryEnablement")', function() {
      // uncomment below and update the code to test the property pointInTimeRecoveryEnablement
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

    it('should have the property versionRetentionPeriod (base name: "versionRetentionPeriod")', function() {
      // uncomment below and update the code to test the property versionRetentionPeriod
      //var instance = new CloudFirestoreApi.GoogleFirestoreAdminV1Database();
      //expect(instance).to.be();
    });

  });

}));
