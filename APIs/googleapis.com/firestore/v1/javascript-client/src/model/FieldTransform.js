/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayValue from './ArrayValue';
import Value from './Value';

/**
 * The FieldTransform model module.
 * @module model/FieldTransform
 * @version v1
 */
class FieldTransform {
    /**
     * Constructs a new <code>FieldTransform</code>.
     * A transformation of a field of the document.
     * @alias module:model/FieldTransform
     */
    constructor() { 
        
        FieldTransform.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldTransform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldTransform} obj Optional instance to populate.
     * @return {module:model/FieldTransform} The populated <code>FieldTransform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldTransform();

            if (data.hasOwnProperty('appendMissingElements')) {
                obj['appendMissingElements'] = ArrayValue.constructFromObject(data['appendMissingElements']);
            }
            if (data.hasOwnProperty('fieldPath')) {
                obj['fieldPath'] = ApiClient.convertToType(data['fieldPath'], 'String');
            }
            if (data.hasOwnProperty('increment')) {
                obj['increment'] = Value.constructFromObject(data['increment']);
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = Value.constructFromObject(data['maximum']);
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = Value.constructFromObject(data['minimum']);
            }
            if (data.hasOwnProperty('removeAllFromArray')) {
                obj['removeAllFromArray'] = ArrayValue.constructFromObject(data['removeAllFromArray']);
            }
            if (data.hasOwnProperty('setToServerValue')) {
                obj['setToServerValue'] = ApiClient.convertToType(data['setToServerValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldTransform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldTransform</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appendMissingElements`
        if (data['appendMissingElements']) { // data not null
          ArrayValue.validateJSON(data['appendMissingElements']);
        }
        // ensure the json data is a string
        if (data['fieldPath'] && !(typeof data['fieldPath'] === 'string' || data['fieldPath'] instanceof String)) {
            throw new Error("Expected the field `fieldPath` to be a primitive type in the JSON string but got " + data['fieldPath']);
        }
        // validate the optional field `increment`
        if (data['increment']) { // data not null
          Value.validateJSON(data['increment']);
        }
        // validate the optional field `maximum`
        if (data['maximum']) { // data not null
          Value.validateJSON(data['maximum']);
        }
        // validate the optional field `minimum`
        if (data['minimum']) { // data not null
          Value.validateJSON(data['minimum']);
        }
        // validate the optional field `removeAllFromArray`
        if (data['removeAllFromArray']) { // data not null
          ArrayValue.validateJSON(data['removeAllFromArray']);
        }
        // ensure the json data is a string
        if (data['setToServerValue'] && !(typeof data['setToServerValue'] === 'string' || data['setToServerValue'] instanceof String)) {
            throw new Error("Expected the field `setToServerValue` to be a primitive type in the JSON string but got " + data['setToServerValue']);
        }

        return true;
    }


}



/**
 * @member {module:model/ArrayValue} appendMissingElements
 */
FieldTransform.prototype['appendMissingElements'] = undefined;

/**
 * The path of the field. See Document.fields for the field path syntax reference.
 * @member {String} fieldPath
 */
FieldTransform.prototype['fieldPath'] = undefined;

/**
 * @member {module:model/Value} increment
 */
FieldTransform.prototype['increment'] = undefined;

/**
 * @member {module:model/Value} maximum
 */
FieldTransform.prototype['maximum'] = undefined;

/**
 * @member {module:model/Value} minimum
 */
FieldTransform.prototype['minimum'] = undefined;

/**
 * @member {module:model/ArrayValue} removeAllFromArray
 */
FieldTransform.prototype['removeAllFromArray'] = undefined;

/**
 * Sets the field to the given server value.
 * @member {module:model/FieldTransform.SetToServerValueEnum} setToServerValue
 */
FieldTransform.prototype['setToServerValue'] = undefined;





/**
 * Allowed values for the <code>setToServerValue</code> property.
 * @enum {String}
 * @readonly
 */
FieldTransform['SetToServerValueEnum'] = {

    /**
     * value: "SERVER_VALUE_UNSPECIFIED"
     * @const
     */
    "SERVER_VALUE_UNSPECIFIED": "SERVER_VALUE_UNSPECIFIED",

    /**
     * value: "REQUEST_TIME"
     * @const
     */
    "REQUEST_TIME": "REQUEST_TIME"
};



export default FieldTransform;

