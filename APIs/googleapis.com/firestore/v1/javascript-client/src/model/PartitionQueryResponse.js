/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cursor from './Cursor';

/**
 * The PartitionQueryResponse model module.
 * @module model/PartitionQueryResponse
 * @version v1
 */
class PartitionQueryResponse {
    /**
     * Constructs a new <code>PartitionQueryResponse</code>.
     * The response for Firestore.PartitionQuery.
     * @alias module:model/PartitionQueryResponse
     */
    constructor() { 
        
        PartitionQueryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartitionQueryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionQueryResponse} obj Optional instance to populate.
     * @return {module:model/PartitionQueryResponse} The populated <code>PartitionQueryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionQueryResponse();

            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('partitions')) {
                obj['partitions'] = ApiClient.convertToType(data['partitions'], [Cursor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionQueryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionQueryResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        if (data['partitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partitions'])) {
                throw new Error("Expected the field `partitions` to be an array in the JSON data but got " + data['partitions']);
            }
            // validate the optional field `partitions` (array)
            for (const item of data['partitions']) {
                Cursor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A page token that may be used to request an additional set of results, up to the number specified by `partition_count` in the PartitionQuery request. If blank, there are no more results.
 * @member {String} nextPageToken
 */
PartitionQueryResponse.prototype['nextPageToken'] = undefined;

/**
 * Partition results. Each partition is a split point that can be used by RunQuery as a starting or end point for the query results. The RunQuery requests must be made with the same query supplied to this PartitionQuery request. The partition cursors will be ordered according to same ordering as the results of the query supplied to PartitionQuery. For example, if a PartitionQuery request returns partition cursors A and B, running the following three queries will return the entire result set of the original query: * query, end_at A * query, start_at A, end_at B * query, start_at B An empty result may indicate that the query has too few results to be partitioned, or that the query is not yet supported for partitioning.
 * @member {Array.<module:model/Cursor>} partitions
 */
PartitionQueryResponse.prototype['partitions'] = undefined;






export default PartitionQueryResponse;

