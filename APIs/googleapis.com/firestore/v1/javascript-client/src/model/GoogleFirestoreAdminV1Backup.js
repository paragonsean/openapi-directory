/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFirestoreAdminV1Stats from './GoogleFirestoreAdminV1Stats';

/**
 * The GoogleFirestoreAdminV1Backup model module.
 * @module model/GoogleFirestoreAdminV1Backup
 * @version v1
 */
class GoogleFirestoreAdminV1Backup {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1Backup</code>.
     * A Backup of a Cloud Firestore Database. The backup contains all documents and index configurations for the given database at a specific point in time.
     * @alias module:model/GoogleFirestoreAdminV1Backup
     */
    constructor() { 
        
        GoogleFirestoreAdminV1Backup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1Backup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1Backup} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1Backup} The populated <code>GoogleFirestoreAdminV1Backup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1Backup();

            if (data.hasOwnProperty('database')) {
                obj['database'] = ApiClient.convertToType(data['database'], 'String');
            }
            if (data.hasOwnProperty('databaseUid')) {
                obj['databaseUid'] = ApiClient.convertToType(data['databaseUid'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('snapshotTime')) {
                obj['snapshotTime'] = ApiClient.convertToType(data['snapshotTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = GoogleFirestoreAdminV1Stats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1Backup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1Backup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['database'] && !(typeof data['database'] === 'string' || data['database'] instanceof String)) {
            throw new Error("Expected the field `database` to be a primitive type in the JSON string but got " + data['database']);
        }
        // ensure the json data is a string
        if (data['databaseUid'] && !(typeof data['databaseUid'] === 'string' || data['databaseUid'] instanceof String)) {
            throw new Error("Expected the field `databaseUid` to be a primitive type in the JSON string but got " + data['databaseUid']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['snapshotTime'] && !(typeof data['snapshotTime'] === 'string' || data['snapshotTime'] instanceof String)) {
            throw new Error("Expected the field `snapshotTime` to be a primitive type in the JSON string but got " + data['snapshotTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          GoogleFirestoreAdminV1Stats.validateJSON(data['stats']);
        }

        return true;
    }


}



/**
 * Output only. Name of the Firestore database that the backup is from. Format is `projects/{project}/databases/{database}`.
 * @member {String} database
 */
GoogleFirestoreAdminV1Backup.prototype['database'] = undefined;

/**
 * Output only. The system-generated UUID4 for the Firestore database that the backup is from.
 * @member {String} databaseUid
 */
GoogleFirestoreAdminV1Backup.prototype['databaseUid'] = undefined;

/**
 * Output only. The timestamp at which this backup expires.
 * @member {String} expireTime
 */
GoogleFirestoreAdminV1Backup.prototype['expireTime'] = undefined;

/**
 * Output only. The unique resource name of the Backup. Format is `projects/{project}/locations/{location}/backups/{backup}`.
 * @member {String} name
 */
GoogleFirestoreAdminV1Backup.prototype['name'] = undefined;

/**
 * Output only. The backup contains an externally consistent copy of the database at this time.
 * @member {String} snapshotTime
 */
GoogleFirestoreAdminV1Backup.prototype['snapshotTime'] = undefined;

/**
 * Output only. The current state of the backup.
 * @member {module:model/GoogleFirestoreAdminV1Backup.StateEnum} state
 */
GoogleFirestoreAdminV1Backup.prototype['state'] = undefined;

/**
 * @member {module:model/GoogleFirestoreAdminV1Stats} stats
 */
GoogleFirestoreAdminV1Backup.prototype['stats'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1Backup['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "NOT_AVAILABLE"
     * @const
     */
    "NOT_AVAILABLE": "NOT_AVAILABLE"
};



export default GoogleFirestoreAdminV1Backup;

