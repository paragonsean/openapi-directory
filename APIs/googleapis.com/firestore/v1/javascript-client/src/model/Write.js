/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';
import DocumentMask from './DocumentMask';
import DocumentTransform from './DocumentTransform';
import FieldTransform from './FieldTransform';
import Precondition from './Precondition';

/**
 * The Write model module.
 * @module model/Write
 * @version v1
 */
class Write {
    /**
     * Constructs a new <code>Write</code>.
     * A write on a document.
     * @alias module:model/Write
     */
    constructor() { 
        
        Write.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Write</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Write} obj Optional instance to populate.
     * @return {module:model/Write} The populated <code>Write</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Write();

            if (data.hasOwnProperty('currentDocument')) {
                obj['currentDocument'] = Precondition.constructFromObject(data['currentDocument']);
            }
            if (data.hasOwnProperty('delete')) {
                obj['delete'] = ApiClient.convertToType(data['delete'], 'String');
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = DocumentTransform.constructFromObject(data['transform']);
            }
            if (data.hasOwnProperty('update')) {
                obj['update'] = Document.constructFromObject(data['update']);
            }
            if (data.hasOwnProperty('updateMask')) {
                obj['updateMask'] = DocumentMask.constructFromObject(data['updateMask']);
            }
            if (data.hasOwnProperty('updateTransforms')) {
                obj['updateTransforms'] = ApiClient.convertToType(data['updateTransforms'], [FieldTransform]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Write</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Write</code>.
     */
    static validateJSON(data) {
        // validate the optional field `currentDocument`
        if (data['currentDocument']) { // data not null
          Precondition.validateJSON(data['currentDocument']);
        }
        // ensure the json data is a string
        if (data['delete'] && !(typeof data['delete'] === 'string' || data['delete'] instanceof String)) {
            throw new Error("Expected the field `delete` to be a primitive type in the JSON string but got " + data['delete']);
        }
        // validate the optional field `transform`
        if (data['transform']) { // data not null
          DocumentTransform.validateJSON(data['transform']);
        }
        // validate the optional field `update`
        if (data['update']) { // data not null
          Document.validateJSON(data['update']);
        }
        // validate the optional field `updateMask`
        if (data['updateMask']) { // data not null
          DocumentMask.validateJSON(data['updateMask']);
        }
        if (data['updateTransforms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['updateTransforms'])) {
                throw new Error("Expected the field `updateTransforms` to be an array in the JSON data but got " + data['updateTransforms']);
            }
            // validate the optional field `updateTransforms` (array)
            for (const item of data['updateTransforms']) {
                FieldTransform.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Precondition} currentDocument
 */
Write.prototype['currentDocument'] = undefined;

/**
 * A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 * @member {String} delete
 */
Write.prototype['delete'] = undefined;

/**
 * @member {module:model/DocumentTransform} transform
 */
Write.prototype['transform'] = undefined;

/**
 * @member {module:model/Document} update
 */
Write.prototype['update'] = undefined;

/**
 * @member {module:model/DocumentMask} updateMask
 */
Write.prototype['updateMask'] = undefined;

/**
 * The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.
 * @member {Array.<module:model/FieldTransform>} updateTransforms
 */
Write.prototype['updateTransforms'] = undefined;






export default Write;

