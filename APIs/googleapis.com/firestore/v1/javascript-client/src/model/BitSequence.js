/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BitSequence model module.
 * @module model/BitSequence
 * @version v1
 */
class BitSequence {
    /**
     * Constructs a new <code>BitSequence</code>.
     * A sequence of bits, encoded in a byte array. Each byte in the &#x60;bitmap&#x60; byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The &#x60;padding&#x60; defines the number of bits of the last byte to be ignored as \&quot;padding\&quot;. The values of these \&quot;padding\&quot; bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: &#x60;(bitmap[0] &amp; 0x01) !&#x3D; 0&#x60;. To retrieve the second bit, bit 1, calculate: &#x60;(bitmap[0] &amp; 0x02) !&#x3D; 0&#x60;. To retrieve the third bit, bit 2, calculate: &#x60;(bitmap[0] &amp; 0x04) !&#x3D; 0&#x60;. To retrieve the fourth bit, bit 3, calculate: &#x60;(bitmap[0] &amp; 0x08) !&#x3D; 0&#x60;. To retrieve bit n, calculate: &#x60;(bitmap[n / 8] &amp; (0x01 &lt;&lt; (n % 8))) !&#x3D; 0&#x60;. The \&quot;size\&quot; of a &#x60;BitSequence&#x60; (the number of bits it contains) is calculated by this formula: &#x60;(bitmap.length * 8) - padding&#x60;.
     * @alias module:model/BitSequence
     */
    constructor() { 
        
        BitSequence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BitSequence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BitSequence} obj Optional instance to populate.
     * @return {module:model/BitSequence} The populated <code>BitSequence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BitSequence();

            if (data.hasOwnProperty('bitmap')) {
                obj['bitmap'] = ApiClient.convertToType(data['bitmap'], 'Blob');
            }
            if (data.hasOwnProperty('padding')) {
                obj['padding'] = ApiClient.convertToType(data['padding'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BitSequence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BitSequence</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The bytes that encode the bit sequence. May have a length of zero.
 * @member {Blob} bitmap
 */
BitSequence.prototype['bitmap'] = undefined;

/**
 * The number of bits of the last byte in `bitmap` to ignore as \"padding\". If the length of `bitmap` is zero, then this value must be `0`. Otherwise, this value must be between 0 and 7, inclusive.
 * @member {Number} padding
 */
BitSequence.prototype['padding'] = undefined;






export default BitSequence;

