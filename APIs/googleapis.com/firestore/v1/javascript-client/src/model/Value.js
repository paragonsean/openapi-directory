/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayValue from './ArrayValue';
import LatLng from './LatLng';
import MapValue from './MapValue';

/**
 * The Value model module.
 * @module model/Value
 * @version v1
 */
class Value {
    /**
     * Constructs a new <code>Value</code>.
     * A message that can hold any of the supported value types.
     * @alias module:model/Value
     */
    constructor() { 
        
        Value.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Value</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Value} obj Optional instance to populate.
     * @return {module:model/Value} The populated <code>Value</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Value();

            if (data.hasOwnProperty('arrayValue')) {
                obj['arrayValue'] = ArrayValue.constructFromObject(data['arrayValue']);
            }
            if (data.hasOwnProperty('booleanValue')) {
                obj['booleanValue'] = ApiClient.convertToType(data['booleanValue'], 'Boolean');
            }
            if (data.hasOwnProperty('bytesValue')) {
                obj['bytesValue'] = ApiClient.convertToType(data['bytesValue'], 'Blob');
            }
            if (data.hasOwnProperty('doubleValue')) {
                obj['doubleValue'] = ApiClient.convertToType(data['doubleValue'], 'Number');
            }
            if (data.hasOwnProperty('geoPointValue')) {
                obj['geoPointValue'] = LatLng.constructFromObject(data['geoPointValue']);
            }
            if (data.hasOwnProperty('integerValue')) {
                obj['integerValue'] = ApiClient.convertToType(data['integerValue'], 'String');
            }
            if (data.hasOwnProperty('mapValue')) {
                obj['mapValue'] = MapValue.constructFromObject(data['mapValue']);
            }
            if (data.hasOwnProperty('nullValue')) {
                obj['nullValue'] = ApiClient.convertToType(data['nullValue'], 'String');
            }
            if (data.hasOwnProperty('referenceValue')) {
                obj['referenceValue'] = ApiClient.convertToType(data['referenceValue'], 'String');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
            if (data.hasOwnProperty('timestampValue')) {
                obj['timestampValue'] = ApiClient.convertToType(data['timestampValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Value</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Value</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrayValue`
        if (data['arrayValue']) { // data not null
          ArrayValue.validateJSON(data['arrayValue']);
        }
        // validate the optional field `geoPointValue`
        if (data['geoPointValue']) { // data not null
          LatLng.validateJSON(data['geoPointValue']);
        }
        // ensure the json data is a string
        if (data['integerValue'] && !(typeof data['integerValue'] === 'string' || data['integerValue'] instanceof String)) {
            throw new Error("Expected the field `integerValue` to be a primitive type in the JSON string but got " + data['integerValue']);
        }
        // validate the optional field `mapValue`
        if (data['mapValue']) { // data not null
          MapValue.validateJSON(data['mapValue']);
        }
        // ensure the json data is a string
        if (data['nullValue'] && !(typeof data['nullValue'] === 'string' || data['nullValue'] instanceof String)) {
            throw new Error("Expected the field `nullValue` to be a primitive type in the JSON string but got " + data['nullValue']);
        }
        // ensure the json data is a string
        if (data['referenceValue'] && !(typeof data['referenceValue'] === 'string' || data['referenceValue'] instanceof String)) {
            throw new Error("Expected the field `referenceValue` to be a primitive type in the JSON string but got " + data['referenceValue']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }
        // ensure the json data is a string
        if (data['timestampValue'] && !(typeof data['timestampValue'] === 'string' || data['timestampValue'] instanceof String)) {
            throw new Error("Expected the field `timestampValue` to be a primitive type in the JSON string but got " + data['timestampValue']);
        }

        return true;
    }


}



/**
 * @member {module:model/ArrayValue} arrayValue
 */
Value.prototype['arrayValue'] = undefined;

/**
 * A boolean value.
 * @member {Boolean} booleanValue
 */
Value.prototype['booleanValue'] = undefined;

/**
 * A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.
 * @member {Blob} bytesValue
 */
Value.prototype['bytesValue'] = undefined;

/**
 * A double value.
 * @member {Number} doubleValue
 */
Value.prototype['doubleValue'] = undefined;

/**
 * @member {module:model/LatLng} geoPointValue
 */
Value.prototype['geoPointValue'] = undefined;

/**
 * An integer value.
 * @member {String} integerValue
 */
Value.prototype['integerValue'] = undefined;

/**
 * @member {module:model/MapValue} mapValue
 */
Value.prototype['mapValue'] = undefined;

/**
 * A null value.
 * @member {module:model/Value.NullValueEnum} nullValue
 */
Value.prototype['nullValue'] = undefined;

/**
 * A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 * @member {String} referenceValue
 */
Value.prototype['referenceValue'] = undefined;

/**
 * A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.
 * @member {String} stringValue
 */
Value.prototype['stringValue'] = undefined;

/**
 * A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.
 * @member {String} timestampValue
 */
Value.prototype['timestampValue'] = undefined;





/**
 * Allowed values for the <code>nullValue</code> property.
 * @enum {String}
 * @readonly
 */
Value['NullValueEnum'] = {

    /**
     * value: "NULL_VALUE"
     * @const
     */
    "NULL_VALUE": "NULL_VALUE"
};



export default Value;

