/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';

/**
 * The DocumentChange model module.
 * @module model/DocumentChange
 * @version v1
 */
class DocumentChange {
    /**
     * Constructs a new <code>DocumentChange</code>.
     * A Document has changed. May be the result of multiple writes, including deletes, that ultimately resulted in a new value for the Document. Multiple DocumentChange messages may be returned for the same logical change, if multiple targets are affected.
     * @alias module:model/DocumentChange
     */
    constructor() { 
        
        DocumentChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentChange} obj Optional instance to populate.
     * @return {module:model/DocumentChange} The populated <code>DocumentChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentChange();

            if (data.hasOwnProperty('document')) {
                obj['document'] = Document.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('removedTargetIds')) {
                obj['removedTargetIds'] = ApiClient.convertToType(data['removedTargetIds'], ['Number']);
            }
            if (data.hasOwnProperty('targetIds')) {
                obj['targetIds'] = ApiClient.convertToType(data['targetIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentChange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `document`
        if (data['document']) { // data not null
          Document.validateJSON(data['document']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['removedTargetIds'])) {
            throw new Error("Expected the field `removedTargetIds` to be an array in the JSON data but got " + data['removedTargetIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetIds'])) {
            throw new Error("Expected the field `targetIds` to be an array in the JSON data but got " + data['targetIds']);
        }

        return true;
    }


}



/**
 * @member {module:model/Document} document
 */
DocumentChange.prototype['document'] = undefined;

/**
 * A set of target IDs for targets that no longer match this document.
 * @member {Array.<Number>} removedTargetIds
 */
DocumentChange.prototype['removedTargetIds'] = undefined;

/**
 * A set of target IDs of targets that match this document.
 * @member {Array.<Number>} targetIds
 */
DocumentChange.prototype['targetIds'] = undefined;






export default DocumentChange;

