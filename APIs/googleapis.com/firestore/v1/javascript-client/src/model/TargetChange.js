/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The TargetChange model module.
 * @module model/TargetChange
 * @version v1
 */
class TargetChange {
    /**
     * Constructs a new <code>TargetChange</code>.
     * Targets being watched have changed.
     * @alias module:model/TargetChange
     */
    constructor() { 
        
        TargetChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TargetChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TargetChange} obj Optional instance to populate.
     * @return {module:model/TargetChange} The populated <code>TargetChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TargetChange();

            if (data.hasOwnProperty('cause')) {
                obj['cause'] = Status.constructFromObject(data['cause']);
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('resumeToken')) {
                obj['resumeToken'] = ApiClient.convertToType(data['resumeToken'], 'Blob');
            }
            if (data.hasOwnProperty('targetChangeType')) {
                obj['targetChangeType'] = ApiClient.convertToType(data['targetChangeType'], 'String');
            }
            if (data.hasOwnProperty('targetIds')) {
                obj['targetIds'] = ApiClient.convertToType(data['targetIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TargetChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TargetChange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cause`
        if (data['cause']) { // data not null
          Status.validateJSON(data['cause']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }
        // ensure the json data is a string
        if (data['targetChangeType'] && !(typeof data['targetChangeType'] === 'string' || data['targetChangeType'] instanceof String)) {
            throw new Error("Expected the field `targetChangeType` to be a primitive type in the JSON string but got " + data['targetChangeType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetIds'])) {
            throw new Error("Expected the field `targetIds` to be an array in the JSON data but got " + data['targetIds']);
        }

        return true;
    }


}



/**
 * @member {module:model/Status} cause
 */
TargetChange.prototype['cause'] = undefined;

/**
 * The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.
 * @member {String} readTime
 */
TargetChange.prototype['readTime'] = undefined;

/**
 * A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.
 * @member {Blob} resumeToken
 */
TargetChange.prototype['resumeToken'] = undefined;

/**
 * The type of change that occurred.
 * @member {module:model/TargetChange.TargetChangeTypeEnum} targetChangeType
 */
TargetChange.prototype['targetChangeType'] = undefined;

/**
 * The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.
 * @member {Array.<Number>} targetIds
 */
TargetChange.prototype['targetIds'] = undefined;





/**
 * Allowed values for the <code>targetChangeType</code> property.
 * @enum {String}
 * @readonly
 */
TargetChange['TargetChangeTypeEnum'] = {

    /**
     * value: "NO_CHANGE"
     * @const
     */
    "NO_CHANGE": "NO_CHANGE",

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "REMOVE"
     * @const
     */
    "REMOVE": "REMOVE",

    /**
     * value: "CURRENT"
     * @const
     */
    "CURRENT": "CURRENT",

    /**
     * value: "RESET"
     * @const
     */
    "RESET": "RESET"
};



export default TargetChange;

