/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFirestoreAdminV1IndexConfig from './GoogleFirestoreAdminV1IndexConfig';
import GoogleFirestoreAdminV1TtlConfig from './GoogleFirestoreAdminV1TtlConfig';

/**
 * The GoogleFirestoreAdminV1Field model module.
 * @module model/GoogleFirestoreAdminV1Field
 * @version v1
 */
class GoogleFirestoreAdminV1Field {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1Field</code>.
     * Represents a single field in the database. Fields are grouped by their \&quot;Collection Group\&quot;, which represent all collections in the database with the same id.
     * @alias module:model/GoogleFirestoreAdminV1Field
     */
    constructor() { 
        
        GoogleFirestoreAdminV1Field.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1Field} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1Field} The populated <code>GoogleFirestoreAdminV1Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1Field();

            if (data.hasOwnProperty('indexConfig')) {
                obj['indexConfig'] = GoogleFirestoreAdminV1IndexConfig.constructFromObject(data['indexConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ttlConfig')) {
                obj['ttlConfig'] = GoogleFirestoreAdminV1TtlConfig.constructFromObject(data['ttlConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1Field</code>.
     */
    static validateJSON(data) {
        // validate the optional field `indexConfig`
        if (data['indexConfig']) { // data not null
          GoogleFirestoreAdminV1IndexConfig.validateJSON(data['indexConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `ttlConfig`
        if (data['ttlConfig']) { // data not null
          GoogleFirestoreAdminV1TtlConfig.validateJSON(data['ttlConfig']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleFirestoreAdminV1IndexConfig} indexConfig
 */
GoogleFirestoreAdminV1Field.prototype['indexConfig'] = undefined;

/**
 * Required. A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\\`address.city\\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\\`*\\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/_*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.
 * @member {String} name
 */
GoogleFirestoreAdminV1Field.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleFirestoreAdminV1TtlConfig} ttlConfig
 */
GoogleFirestoreAdminV1Field.prototype['ttlConfig'] = undefined;






export default GoogleFirestoreAdminV1Field;

