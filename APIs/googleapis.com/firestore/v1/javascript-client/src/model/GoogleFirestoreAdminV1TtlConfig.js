/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleFirestoreAdminV1TtlConfig model module.
 * @module model/GoogleFirestoreAdminV1TtlConfig
 * @version v1
 */
class GoogleFirestoreAdminV1TtlConfig {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1TtlConfig</code>.
     * The TTL (time-to-live) configuration for documents that have this &#x60;Field&#x60; set. Storing a timestamp value into a TTL-enabled field will be treated as the document&#39;s absolute expiration time. Timestamp values in the past indicate that the document is eligible for immediate expiration. Using any other data type or leaving the field absent will disable expiration for the individual document.
     * @alias module:model/GoogleFirestoreAdminV1TtlConfig
     */
    constructor() { 
        
        GoogleFirestoreAdminV1TtlConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1TtlConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1TtlConfig} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1TtlConfig} The populated <code>GoogleFirestoreAdminV1TtlConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1TtlConfig();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1TtlConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1TtlConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The state of the TTL configuration.
 * @member {module:model/GoogleFirestoreAdminV1TtlConfig.StateEnum} state
 */
GoogleFirestoreAdminV1TtlConfig.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1TtlConfig['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "NEEDS_REPAIR"
     * @const
     */
    "NEEDS_REPAIR": "NEEDS_REPAIR"
};



export default GoogleFirestoreAdminV1TtlConfig;

