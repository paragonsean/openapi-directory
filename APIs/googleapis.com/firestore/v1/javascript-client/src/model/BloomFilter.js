/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BitSequence from './BitSequence';

/**
 * The BloomFilter model module.
 * @module model/BloomFilter
 * @version v1
 */
class BloomFilter {
    /**
     * Constructs a new <code>BloomFilter</code>.
     * A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as unsigned integers using 2&#39;s complement encoding. These two hash values, named &#x60;h1&#x60; and &#x60;h2&#x60;, are then used to compute the &#x60;hash_count&#x60; hash values using the formula, starting at &#x60;i&#x3D;0&#x60;: h(i) &#x3D; h1 + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to get the bits of the bloom filter to test for the given entry.
     * @alias module:model/BloomFilter
     */
    constructor() { 
        
        BloomFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BloomFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BloomFilter} obj Optional instance to populate.
     * @return {module:model/BloomFilter} The populated <code>BloomFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BloomFilter();

            if (data.hasOwnProperty('bits')) {
                obj['bits'] = BitSequence.constructFromObject(data['bits']);
            }
            if (data.hasOwnProperty('hashCount')) {
                obj['hashCount'] = ApiClient.convertToType(data['hashCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BloomFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BloomFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bits`
        if (data['bits']) { // data not null
          BitSequence.validateJSON(data['bits']);
        }

        return true;
    }


}



/**
 * @member {module:model/BitSequence} bits
 */
BloomFilter.prototype['bits'] = undefined;

/**
 * The number of hashes used by the algorithm.
 * @member {Number} hashCount
 */
BloomFilter.prototype['hashCount'] = undefined;






export default BloomFilter;

