/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';

/**
 * The RunQueryResponse model module.
 * @module model/RunQueryResponse
 * @version v1
 */
class RunQueryResponse {
    /**
     * Constructs a new <code>RunQueryResponse</code>.
     * The response for Firestore.RunQuery.
     * @alias module:model/RunQueryResponse
     */
    constructor() { 
        
        RunQueryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunQueryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunQueryResponse} obj Optional instance to populate.
     * @return {module:model/RunQueryResponse} The populated <code>RunQueryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunQueryResponse();

            if (data.hasOwnProperty('document')) {
                obj['document'] = Document.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('done')) {
                obj['done'] = ApiClient.convertToType(data['done'], 'Boolean');
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('skippedResults')) {
                obj['skippedResults'] = ApiClient.convertToType(data['skippedResults'], 'Number');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunQueryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunQueryResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `document`
        if (data['document']) { // data not null
          Document.validateJSON(data['document']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/Document} document
 */
RunQueryResponse.prototype['document'] = undefined;

/**
 * If present, Firestore has completely finished the request and no more documents will be returned.
 * @member {Boolean} done
 */
RunQueryResponse.prototype['done'] = undefined;

/**
 * The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.
 * @member {String} readTime
 */
RunQueryResponse.prototype['readTime'] = undefined;

/**
 * The number of results that have been skipped due to an offset between the last response and the current response.
 * @member {Number} skippedResults
 */
RunQueryResponse.prototype['skippedResults'] = undefined;

/**
 * The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.
 * @member {Blob} transaction
 */
RunQueryResponse.prototype['transaction'] = undefined;






export default RunQueryResponse;

