/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Avg from './Avg';
import Count from './Count';
import Sum from './Sum';

/**
 * The Aggregation model module.
 * @module model/Aggregation
 * @version v1
 */
class Aggregation {
    /**
     * Constructs a new <code>Aggregation</code>.
     * Defines an aggregation that produces a single result.
     * @alias module:model/Aggregation
     */
    constructor() { 
        
        Aggregation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aggregation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aggregation} obj Optional instance to populate.
     * @return {module:model/Aggregation} The populated <code>Aggregation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aggregation();

            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('avg')) {
                obj['avg'] = Avg.constructFromObject(data['avg']);
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = Count.constructFromObject(data['count']);
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = Sum.constructFromObject(data['sum']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aggregation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aggregation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // validate the optional field `avg`
        if (data['avg']) { // data not null
          Avg.validateJSON(data['avg']);
        }
        // validate the optional field `count`
        if (data['count']) { // data not null
          Count.validateJSON(data['count']);
        }
        // validate the optional field `sum`
        if (data['sum']) { // data not null
          Sum.validateJSON(data['sum']);
        }

        return true;
    }


}



/**
 * Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.
 * @member {String} alias
 */
Aggregation.prototype['alias'] = undefined;

/**
 * @member {module:model/Avg} avg
 */
Aggregation.prototype['avg'] = undefined;

/**
 * @member {module:model/Count} count
 */
Aggregation.prototype['count'] = undefined;

/**
 * @member {module:model/Sum} sum
 */
Aggregation.prototype['sum'] = undefined;






export default Aggregation;

