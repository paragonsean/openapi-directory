/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFirestoreAdminV1Index from './GoogleFirestoreAdminV1Index';

/**
 * The GoogleFirestoreAdminV1IndexConfig model module.
 * @module model/GoogleFirestoreAdminV1IndexConfig
 * @version v1
 */
class GoogleFirestoreAdminV1IndexConfig {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1IndexConfig</code>.
     * The index configuration for this field.
     * @alias module:model/GoogleFirestoreAdminV1IndexConfig
     */
    constructor() { 
        
        GoogleFirestoreAdminV1IndexConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1IndexConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1IndexConfig} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1IndexConfig} The populated <code>GoogleFirestoreAdminV1IndexConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1IndexConfig();

            if (data.hasOwnProperty('ancestorField')) {
                obj['ancestorField'] = ApiClient.convertToType(data['ancestorField'], 'String');
            }
            if (data.hasOwnProperty('indexes')) {
                obj['indexes'] = ApiClient.convertToType(data['indexes'], [GoogleFirestoreAdminV1Index]);
            }
            if (data.hasOwnProperty('reverting')) {
                obj['reverting'] = ApiClient.convertToType(data['reverting'], 'Boolean');
            }
            if (data.hasOwnProperty('usesAncestorConfig')) {
                obj['usesAncestorConfig'] = ApiClient.convertToType(data['usesAncestorConfig'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1IndexConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1IndexConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ancestorField'] && !(typeof data['ancestorField'] === 'string' || data['ancestorField'] instanceof String)) {
            throw new Error("Expected the field `ancestorField` to be a primitive type in the JSON string but got " + data['ancestorField']);
        }
        if (data['indexes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indexes'])) {
                throw new Error("Expected the field `indexes` to be an array in the JSON data but got " + data['indexes']);
            }
            // validate the optional field `indexes` (array)
            for (const item of data['indexes']) {
                GoogleFirestoreAdminV1Index.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Specifies the resource name of the `Field` from which this field's index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false).
 * @member {String} ancestorField
 */
GoogleFirestoreAdminV1IndexConfig.prototype['ancestorField'] = undefined;

/**
 * The indexes supported for this field.
 * @member {Array.<module:model/GoogleFirestoreAdminV1Index>} indexes
 */
GoogleFirestoreAdminV1IndexConfig.prototype['indexes'] = undefined;

/**
 * Output only When true, the `Field`'s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`.
 * @member {Boolean} reverting
 */
GoogleFirestoreAdminV1IndexConfig.prototype['reverting'] = undefined;

/**
 * Output only. When true, the `Field`'s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`'s index configuration is defined explicitly.
 * @member {Boolean} usesAncestorConfig
 */
GoogleFirestoreAdminV1IndexConfig.prototype['usesAncestorConfig'] = undefined;






export default GoogleFirestoreAdminV1IndexConfig;

