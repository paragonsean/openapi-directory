/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldReference from './FieldReference';

/**
 * The UnaryFilter model module.
 * @module model/UnaryFilter
 * @version v1
 */
class UnaryFilter {
    /**
     * Constructs a new <code>UnaryFilter</code>.
     * A filter with a single operand.
     * @alias module:model/UnaryFilter
     */
    constructor() { 
        
        UnaryFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UnaryFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnaryFilter} obj Optional instance to populate.
     * @return {module:model/UnaryFilter} The populated <code>UnaryFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnaryFilter();

            if (data.hasOwnProperty('field')) {
                obj['field'] = FieldReference.constructFromObject(data['field']);
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UnaryFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UnaryFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `field`
        if (data['field']) { // data not null
          FieldReference.validateJSON(data['field']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }

        return true;
    }


}



/**
 * @member {module:model/FieldReference} field
 */
UnaryFilter.prototype['field'] = undefined;

/**
 * The unary operator to apply.
 * @member {module:model/UnaryFilter.OpEnum} op
 */
UnaryFilter.prototype['op'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
UnaryFilter['OpEnum'] = {

    /**
     * value: "OPERATOR_UNSPECIFIED"
     * @const
     */
    "OPERATOR_UNSPECIFIED": "OPERATOR_UNSPECIFIED",

    /**
     * value: "IS_NAN"
     * @const
     */
    "IS_NAN": "IS_NAN",

    /**
     * value: "IS_NULL"
     * @const
     */
    "IS_NULL": "IS_NULL",

    /**
     * value: "IS_NOT_NAN"
     * @const
     */
    "IS_NOT_NAN": "IS_NOT_NAN",

    /**
     * value: "IS_NOT_NULL"
     * @const
     */
    "IS_NOT_NULL": "IS_NOT_NULL"
};



export default UnaryFilter;

