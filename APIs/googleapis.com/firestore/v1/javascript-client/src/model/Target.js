/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentsTarget from './DocumentsTarget';
import QueryTarget from './QueryTarget';

/**
 * The Target model module.
 * @module model/Target
 * @version v1
 */
class Target {
    /**
     * Constructs a new <code>Target</code>.
     * A specification of a set of documents to listen to.
     * @alias module:model/Target
     */
    constructor() { 
        
        Target.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Target</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Target} obj Optional instance to populate.
     * @return {module:model/Target} The populated <code>Target</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Target();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = DocumentsTarget.constructFromObject(data['documents']);
            }
            if (data.hasOwnProperty('expectedCount')) {
                obj['expectedCount'] = ApiClient.convertToType(data['expectedCount'], 'Number');
            }
            if (data.hasOwnProperty('once')) {
                obj['once'] = ApiClient.convertToType(data['once'], 'Boolean');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = QueryTarget.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('resumeToken')) {
                obj['resumeToken'] = ApiClient.convertToType(data['resumeToken'], 'Blob');
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Target</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Target</code>.
     */
    static validateJSON(data) {
        // validate the optional field `documents`
        if (data['documents']) { // data not null
          DocumentsTarget.validateJSON(data['documents']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          QueryTarget.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/DocumentsTarget} documents
 */
Target.prototype['documents'] = undefined;

/**
 * The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.
 * @member {Number} expectedCount
 */
Target.prototype['expectedCount'] = undefined;

/**
 * If the target should be removed once it is current and consistent.
 * @member {Boolean} once
 */
Target.prototype['once'] = undefined;

/**
 * @member {module:model/QueryTarget} query
 */
Target.prototype['query'] = undefined;

/**
 * Start listening after a specific `read_time`. The client must know the state of matching documents at this time.
 * @member {String} readTime
 */
Target.prototype['readTime'] = undefined;

/**
 * A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.
 * @member {Blob} resumeToken
 */
Target.prototype['resumeToken'] = undefined;

/**
 * The target ID that identifies the target on the stream. Must be a positive number and non-zero. If `target_id` is 0 (or unspecified), the server will assign an ID for this target and return that in a `TargetChange::ADD` event. Once a target with `target_id=0` is added, all subsequent targets must also have `target_id=0`. If an `AddTarget` request with `target_id != 0` is sent to the server after a target with `target_id=0` is added, the server will immediately send a response with a `TargetChange::Remove` event. Note that if the client sends multiple `AddTarget` requests without an ID, the order of IDs returned in `TargetChage.target_ids` are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If `target_id` is non-zero, there must not be an existing active target on this stream with the same ID.
 * @member {Number} targetId
 */
Target.prototype['targetId'] = undefined;






export default Target;

