/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StructuredQuery from './StructuredQuery';

/**
 * The QueryTarget model module.
 * @module model/QueryTarget
 * @version v1
 */
class QueryTarget {
    /**
     * Constructs a new <code>QueryTarget</code>.
     * A target specified by a query.
     * @alias module:model/QueryTarget
     */
    constructor() { 
        
        QueryTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryTarget} obj Optional instance to populate.
     * @return {module:model/QueryTarget} The populated <code>QueryTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryTarget();

            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('structuredQuery')) {
                obj['structuredQuery'] = StructuredQuery.constructFromObject(data['structuredQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // validate the optional field `structuredQuery`
        if (data['structuredQuery']) { // data not null
          StructuredQuery.validateJSON(data['structuredQuery']);
        }

        return true;
    }


}



/**
 * The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 * @member {String} parent
 */
QueryTarget.prototype['parent'] = undefined;

/**
 * @member {module:model/StructuredQuery} structuredQuery
 */
QueryTarget.prototype['structuredQuery'] = undefined;






export default QueryTarget;

