/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StructuredQuery from './StructuredQuery';
import TransactionOptions from './TransactionOptions';

/**
 * The RunQueryRequest model module.
 * @module model/RunQueryRequest
 * @version v1
 */
class RunQueryRequest {
    /**
     * Constructs a new <code>RunQueryRequest</code>.
     * The request for Firestore.RunQuery.
     * @alias module:model/RunQueryRequest
     */
    constructor() { 
        
        RunQueryRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunQueryRequest} obj Optional instance to populate.
     * @return {module:model/RunQueryRequest} The populated <code>RunQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunQueryRequest();

            if (data.hasOwnProperty('newTransaction')) {
                obj['newTransaction'] = TransactionOptions.constructFromObject(data['newTransaction']);
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('structuredQuery')) {
                obj['structuredQuery'] = StructuredQuery.constructFromObject(data['structuredQuery']);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunQueryRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `newTransaction`
        if (data['newTransaction']) { // data not null
          TransactionOptions.validateJSON(data['newTransaction']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }
        // validate the optional field `structuredQuery`
        if (data['structuredQuery']) { // data not null
          StructuredQuery.validateJSON(data['structuredQuery']);
        }

        return true;
    }


}



/**
 * @member {module:model/TransactionOptions} newTransaction
 */
RunQueryRequest.prototype['newTransaction'] = undefined;

/**
 * Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
 * @member {String} readTime
 */
RunQueryRequest.prototype['readTime'] = undefined;

/**
 * @member {module:model/StructuredQuery} structuredQuery
 */
RunQueryRequest.prototype['structuredQuery'] = undefined;

/**
 * Run the query within an already active transaction. The value here is the opaque transaction ID to execute the query in.
 * @member {Blob} transaction
 */
RunQueryRequest.prototype['transaction'] = undefined;






export default RunQueryRequest;

