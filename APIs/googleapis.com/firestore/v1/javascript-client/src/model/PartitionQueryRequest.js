/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StructuredQuery from './StructuredQuery';

/**
 * The PartitionQueryRequest model module.
 * @module model/PartitionQueryRequest
 * @version v1
 */
class PartitionQueryRequest {
    /**
     * Constructs a new <code>PartitionQueryRequest</code>.
     * The request for Firestore.PartitionQuery.
     * @alias module:model/PartitionQueryRequest
     */
    constructor() { 
        
        PartitionQueryRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartitionQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionQueryRequest} obj Optional instance to populate.
     * @return {module:model/PartitionQueryRequest} The populated <code>PartitionQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionQueryRequest();

            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('partitionCount')) {
                obj['partitionCount'] = ApiClient.convertToType(data['partitionCount'], 'String');
            }
            if (data.hasOwnProperty('readTime')) {
                obj['readTime'] = ApiClient.convertToType(data['readTime'], 'String');
            }
            if (data.hasOwnProperty('structuredQuery')) {
                obj['structuredQuery'] = StructuredQuery.constructFromObject(data['structuredQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionQueryRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        // ensure the json data is a string
        if (data['partitionCount'] && !(typeof data['partitionCount'] === 'string' || data['partitionCount'] instanceof String)) {
            throw new Error("Expected the field `partitionCount` to be a primitive type in the JSON string but got " + data['partitionCount']);
        }
        // ensure the json data is a string
        if (data['readTime'] && !(typeof data['readTime'] === 'string' || data['readTime'] instanceof String)) {
            throw new Error("Expected the field `readTime` to be a primitive type in the JSON string but got " + data['readTime']);
        }
        // validate the optional field `structuredQuery`
        if (data['structuredQuery']) { // data not null
          StructuredQuery.validateJSON(data['structuredQuery']);
        }

        return true;
    }


}



/**
 * The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.
 * @member {Number} pageSize
 */
PartitionQueryRequest.prototype['pageSize'] = undefined;

/**
 * The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
 * @member {String} pageToken
 */
PartitionQueryRequest.prototype['pageToken'] = undefined;

/**
 * The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.
 * @member {String} partitionCount
 */
PartitionQueryRequest.prototype['partitionCount'] = undefined;

/**
 * Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
 * @member {String} readTime
 */
PartitionQueryRequest.prototype['readTime'] = undefined;

/**
 * @member {module:model/StructuredQuery} structuredQuery
 */
PartitionQueryRequest.prototype['structuredQuery'] = undefined;






export default PartitionQueryRequest;

