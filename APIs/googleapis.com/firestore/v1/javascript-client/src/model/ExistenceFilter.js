/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BloomFilter from './BloomFilter';

/**
 * The ExistenceFilter model module.
 * @module model/ExistenceFilter
 * @version v1
 */
class ExistenceFilter {
    /**
     * Constructs a new <code>ExistenceFilter</code>.
     * A digest of all the documents that match a given target.
     * @alias module:model/ExistenceFilter
     */
    constructor() { 
        
        ExistenceFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExistenceFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExistenceFilter} obj Optional instance to populate.
     * @return {module:model/ExistenceFilter} The populated <code>ExistenceFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExistenceFilter();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'Number');
            }
            if (data.hasOwnProperty('unchangedNames')) {
                obj['unchangedNames'] = BloomFilter.constructFromObject(data['unchangedNames']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExistenceFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExistenceFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `unchangedNames`
        if (data['unchangedNames']) { // data not null
          BloomFilter.validateJSON(data['unchangedNames']);
        }

        return true;
    }


}



/**
 * The total count of documents that match target_id. If different from the count of documents in the client that match, the client must manually determine which documents no longer match the target. The client can use the `unchanged_names` bloom filter to assist with this determination by testing ALL the document names against the filter; if the document name is NOT in the filter, it means the document no longer matches the target.
 * @member {Number} count
 */
ExistenceFilter.prototype['count'] = undefined;

/**
 * The target ID to which this filter applies.
 * @member {Number} targetId
 */
ExistenceFilter.prototype['targetId'] = undefined;

/**
 * @member {module:model/BloomFilter} unchangedNames
 */
ExistenceFilter.prototype['unchangedNames'] = undefined;






export default ExistenceFilter;

