/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleFirestoreAdminV1Database model module.
 * @module model/GoogleFirestoreAdminV1Database
 * @version v1
 */
class GoogleFirestoreAdminV1Database {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1Database</code>.
     * A Cloud Firestore Database.
     * @alias module:model/GoogleFirestoreAdminV1Database
     */
    constructor() { 
        
        GoogleFirestoreAdminV1Database.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1Database</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1Database} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1Database} The populated <code>GoogleFirestoreAdminV1Database</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1Database();

            if (data.hasOwnProperty('appEngineIntegrationMode')) {
                obj['appEngineIntegrationMode'] = ApiClient.convertToType(data['appEngineIntegrationMode'], 'String');
            }
            if (data.hasOwnProperty('concurrencyMode')) {
                obj['concurrencyMode'] = ApiClient.convertToType(data['concurrencyMode'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteProtectionState')) {
                obj['deleteProtectionState'] = ApiClient.convertToType(data['deleteProtectionState'], 'String');
            }
            if (data.hasOwnProperty('earliestVersionTime')) {
                obj['earliestVersionTime'] = ApiClient.convertToType(data['earliestVersionTime'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('keyPrefix')) {
                obj['keyPrefix'] = ApiClient.convertToType(data['keyPrefix'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pointInTimeRecoveryEnablement')) {
                obj['pointInTimeRecoveryEnablement'] = ApiClient.convertToType(data['pointInTimeRecoveryEnablement'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionRetentionPeriod')) {
                obj['versionRetentionPeriod'] = ApiClient.convertToType(data['versionRetentionPeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1Database</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1Database</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appEngineIntegrationMode'] && !(typeof data['appEngineIntegrationMode'] === 'string' || data['appEngineIntegrationMode'] instanceof String)) {
            throw new Error("Expected the field `appEngineIntegrationMode` to be a primitive type in the JSON string but got " + data['appEngineIntegrationMode']);
        }
        // ensure the json data is a string
        if (data['concurrencyMode'] && !(typeof data['concurrencyMode'] === 'string' || data['concurrencyMode'] instanceof String)) {
            throw new Error("Expected the field `concurrencyMode` to be a primitive type in the JSON string but got " + data['concurrencyMode']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteProtectionState'] && !(typeof data['deleteProtectionState'] === 'string' || data['deleteProtectionState'] instanceof String)) {
            throw new Error("Expected the field `deleteProtectionState` to be a primitive type in the JSON string but got " + data['deleteProtectionState']);
        }
        // ensure the json data is a string
        if (data['earliestVersionTime'] && !(typeof data['earliestVersionTime'] === 'string' || data['earliestVersionTime'] instanceof String)) {
            throw new Error("Expected the field `earliestVersionTime` to be a primitive type in the JSON string but got " + data['earliestVersionTime']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['keyPrefix'] && !(typeof data['keyPrefix'] === 'string' || data['keyPrefix'] instanceof String)) {
            throw new Error("Expected the field `keyPrefix` to be a primitive type in the JSON string but got " + data['keyPrefix']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pointInTimeRecoveryEnablement'] && !(typeof data['pointInTimeRecoveryEnablement'] === 'string' || data['pointInTimeRecoveryEnablement'] instanceof String)) {
            throw new Error("Expected the field `pointInTimeRecoveryEnablement` to be a primitive type in the JSON string but got " + data['pointInTimeRecoveryEnablement']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['versionRetentionPeriod'] && !(typeof data['versionRetentionPeriod'] === 'string' || data['versionRetentionPeriod'] instanceof String)) {
            throw new Error("Expected the field `versionRetentionPeriod` to be a primitive type in the JSON string but got " + data['versionRetentionPeriod']);
        }

        return true;
    }


}



/**
 * The App Engine integration mode to use for this database.
 * @member {module:model/GoogleFirestoreAdminV1Database.AppEngineIntegrationModeEnum} appEngineIntegrationMode
 */
GoogleFirestoreAdminV1Database.prototype['appEngineIntegrationMode'] = undefined;

/**
 * The concurrency control mode to use for this database.
 * @member {module:model/GoogleFirestoreAdminV1Database.ConcurrencyModeEnum} concurrencyMode
 */
GoogleFirestoreAdminV1Database.prototype['concurrencyMode'] = undefined;

/**
 * Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
 * @member {String} createTime
 */
GoogleFirestoreAdminV1Database.prototype['createTime'] = undefined;

/**
 * State of delete protection for the database.
 * @member {module:model/GoogleFirestoreAdminV1Database.DeleteProtectionStateEnum} deleteProtectionState
 */
GoogleFirestoreAdminV1Database.prototype['deleteProtectionState'] = undefined;

/**
 * Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
 * @member {String} earliestVersionTime
 */
GoogleFirestoreAdminV1Database.prototype['earliestVersionTime'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
GoogleFirestoreAdminV1Database.prototype['etag'] = undefined;

/**
 * Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id (\"~\") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
 * @member {String} keyPrefix
 */
GoogleFirestoreAdminV1Database.prototype['keyPrefix'] = undefined;

/**
 * The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
 * @member {String} locationId
 */
GoogleFirestoreAdminV1Database.prototype['locationId'] = undefined;

/**
 * The resource name of the Database. Format: `projects/{project}/databases/{database}`
 * @member {String} name
 */
GoogleFirestoreAdminV1Database.prototype['name'] = undefined;

/**
 * Whether to enable the PITR feature on this database.
 * @member {module:model/GoogleFirestoreAdminV1Database.PointInTimeRecoveryEnablementEnum} pointInTimeRecoveryEnablement
 */
GoogleFirestoreAdminV1Database.prototype['pointInTimeRecoveryEnablement'] = undefined;

/**
 * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
 * @member {module:model/GoogleFirestoreAdminV1Database.TypeEnum} type
 */
GoogleFirestoreAdminV1Database.prototype['type'] = undefined;

/**
 * Output only. The system-generated UUID4 for this Database.
 * @member {String} uid
 */
GoogleFirestoreAdminV1Database.prototype['uid'] = undefined;

/**
 * Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
 * @member {String} updateTime
 */
GoogleFirestoreAdminV1Database.prototype['updateTime'] = undefined;

/**
 * Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
 * @member {String} versionRetentionPeriod
 */
GoogleFirestoreAdminV1Database.prototype['versionRetentionPeriod'] = undefined;





/**
 * Allowed values for the <code>appEngineIntegrationMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1Database['AppEngineIntegrationModeEnum'] = {

    /**
     * value: "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED"
     * @const
     */
    "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED": "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};


/**
 * Allowed values for the <code>concurrencyMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1Database['ConcurrencyModeEnum'] = {

    /**
     * value: "CONCURRENCY_MODE_UNSPECIFIED"
     * @const
     */
    "CONCURRENCY_MODE_UNSPECIFIED": "CONCURRENCY_MODE_UNSPECIFIED",

    /**
     * value: "OPTIMISTIC"
     * @const
     */
    "OPTIMISTIC": "OPTIMISTIC",

    /**
     * value: "PESSIMISTIC"
     * @const
     */
    "PESSIMISTIC": "PESSIMISTIC",

    /**
     * value: "OPTIMISTIC_WITH_ENTITY_GROUPS"
     * @const
     */
    "OPTIMISTIC_WITH_ENTITY_GROUPS": "OPTIMISTIC_WITH_ENTITY_GROUPS"
};


/**
 * Allowed values for the <code>deleteProtectionState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1Database['DeleteProtectionStateEnum'] = {

    /**
     * value: "DELETE_PROTECTION_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "DELETE_PROTECTION_STATE_UNSPECIFIED",

    /**
     * value: "DELETE_PROTECTION_DISABLED"
     * @const
     */
    "DISABLED": "DELETE_PROTECTION_DISABLED",

    /**
     * value: "DELETE_PROTECTION_ENABLED"
     * @const
     */
    "ENABLED": "DELETE_PROTECTION_ENABLED"
};


/**
 * Allowed values for the <code>pointInTimeRecoveryEnablement</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1Database['PointInTimeRecoveryEnablementEnum'] = {

    /**
     * value: "POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED"
     * @const
     */
    "ENABLEMENT_UNSPECIFIED": "POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED",

    /**
     * value: "POINT_IN_TIME_RECOVERY_ENABLED"
     * @const
     */
    "ENABLED": "POINT_IN_TIME_RECOVERY_ENABLED",

    /**
     * value: "POINT_IN_TIME_RECOVERY_DISABLED"
     * @const
     */
    "DISABLED": "POINT_IN_TIME_RECOVERY_DISABLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1Database['TypeEnum'] = {

    /**
     * value: "DATABASE_TYPE_UNSPECIFIED"
     * @const
     */
    "DATABASE_TYPE_UNSPECIFIED": "DATABASE_TYPE_UNSPECIFIED",

    /**
     * value: "FIRESTORE_NATIVE"
     * @const
     */
    "FIRESTORE_NATIVE": "FIRESTORE_NATIVE",

    /**
     * value: "DATASTORE_MODE"
     * @const
     */
    "DATASTORE_MODE": "DATASTORE_MODE"
};



export default GoogleFirestoreAdminV1Database;

