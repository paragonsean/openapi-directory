/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFirestoreAdminV1WeeklyRecurrence from './GoogleFirestoreAdminV1WeeklyRecurrence';

/**
 * The GoogleFirestoreAdminV1BackupSchedule model module.
 * @module model/GoogleFirestoreAdminV1BackupSchedule
 * @version v1
 */
class GoogleFirestoreAdminV1BackupSchedule {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1BackupSchedule</code>.
     * A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.
     * @alias module:model/GoogleFirestoreAdminV1BackupSchedule
     */
    constructor() { 
        
        GoogleFirestoreAdminV1BackupSchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1BackupSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1BackupSchedule} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1BackupSchedule} The populated <code>GoogleFirestoreAdminV1BackupSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1BackupSchedule();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('dailyRecurrence')) {
                obj['dailyRecurrence'] = ApiClient.convertToType(data['dailyRecurrence'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('retention')) {
                obj['retention'] = ApiClient.convertToType(data['retention'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('weeklyRecurrence')) {
                obj['weeklyRecurrence'] = GoogleFirestoreAdminV1WeeklyRecurrence.constructFromObject(data['weeklyRecurrence']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1BackupSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1BackupSchedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['retention'] && !(typeof data['retention'] === 'string' || data['retention'] instanceof String)) {
            throw new Error("Expected the field `retention` to be a primitive type in the JSON string but got " + data['retention']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `weeklyRecurrence`
        if (data['weeklyRecurrence']) { // data not null
          GoogleFirestoreAdminV1WeeklyRecurrence.validateJSON(data['weeklyRecurrence']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
 * @member {String} createTime
 */
GoogleFirestoreAdminV1BackupSchedule.prototype['createTime'] = undefined;

/**
 * Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.
 * @member {Object} dailyRecurrence
 */
GoogleFirestoreAdminV1BackupSchedule.prototype['dailyRecurrence'] = undefined;

/**
 * Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
 * @member {String} name
 */
GoogleFirestoreAdminV1BackupSchedule.prototype['name'] = undefined;

/**
 * At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
 * @member {String} retention
 */
GoogleFirestoreAdminV1BackupSchedule.prototype['retention'] = undefined;

/**
 * Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
 * @member {String} updateTime
 */
GoogleFirestoreAdminV1BackupSchedule.prototype['updateTime'] = undefined;

/**
 * @member {module:model/GoogleFirestoreAdminV1WeeklyRecurrence} weeklyRecurrence
 */
GoogleFirestoreAdminV1BackupSchedule.prototype['weeklyRecurrence'] = undefined;






export default GoogleFirestoreAdminV1BackupSchedule;

