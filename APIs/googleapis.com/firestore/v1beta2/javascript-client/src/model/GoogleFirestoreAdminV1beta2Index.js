/**
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleFirestoreAdminV1beta2IndexField from './GoogleFirestoreAdminV1beta2IndexField';

/**
 * The GoogleFirestoreAdminV1beta2Index model module.
 * @module model/GoogleFirestoreAdminV1beta2Index
 * @version v1beta2
 */
class GoogleFirestoreAdminV1beta2Index {
    /**
     * Constructs a new <code>GoogleFirestoreAdminV1beta2Index</code>.
     * Cloud Firestore indexes enable simple and complex queries against documents in a database.
     * @alias module:model/GoogleFirestoreAdminV1beta2Index
     */
    constructor() { 
        
        GoogleFirestoreAdminV1beta2Index.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleFirestoreAdminV1beta2Index</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleFirestoreAdminV1beta2Index} obj Optional instance to populate.
     * @return {module:model/GoogleFirestoreAdminV1beta2Index} The populated <code>GoogleFirestoreAdminV1beta2Index</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleFirestoreAdminV1beta2Index();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [GoogleFirestoreAdminV1beta2IndexField]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('queryScope')) {
                obj['queryScope'] = ApiClient.convertToType(data['queryScope'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleFirestoreAdminV1beta2Index</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleFirestoreAdminV1beta2Index</code>.
     */
    static validateJSON(data) {
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                GoogleFirestoreAdminV1beta2IndexField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['queryScope'] && !(typeof data['queryScope'] === 'string' || data['queryScope'] instanceof String)) {
            throw new Error("Expected the field `queryScope` to be a primitive type in the JSON string but got " + data['queryScope']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.
 * @member {Array.<module:model/GoogleFirestoreAdminV1beta2IndexField>} fields
 */
GoogleFirestoreAdminV1beta2Index.prototype['fields'] = undefined;

/**
 * Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.
 * @member {String} name
 */
GoogleFirestoreAdminV1beta2Index.prototype['name'] = undefined;

/**
 * Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
 * @member {module:model/GoogleFirestoreAdminV1beta2Index.QueryScopeEnum} queryScope
 */
GoogleFirestoreAdminV1beta2Index.prototype['queryScope'] = undefined;

/**
 * Output only. The serving state of the index.
 * @member {module:model/GoogleFirestoreAdminV1beta2Index.StateEnum} state
 */
GoogleFirestoreAdminV1beta2Index.prototype['state'] = undefined;





/**
 * Allowed values for the <code>queryScope</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1beta2Index['QueryScopeEnum'] = {

    /**
     * value: "QUERY_SCOPE_UNSPECIFIED"
     * @const
     */
    "QUERY_SCOPE_UNSPECIFIED": "QUERY_SCOPE_UNSPECIFIED",

    /**
     * value: "COLLECTION"
     * @const
     */
    "COLLECTION": "COLLECTION",

    /**
     * value: "COLLECTION_GROUP"
     * @const
     */
    "COLLECTION_GROUP": "COLLECTION_GROUP"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleFirestoreAdminV1beta2Index['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "NEEDS_REPAIR"
     * @const
     */
    "NEEDS_REPAIR": "NEEDS_REPAIR"
};



export default GoogleFirestoreAdminV1beta2Index;

