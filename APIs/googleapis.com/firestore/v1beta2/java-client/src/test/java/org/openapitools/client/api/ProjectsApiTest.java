/*
 * Cloud Firestore API
 * Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. 
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleFirestoreAdminV1beta2ExportDocumentsRequest;
import org.openapitools.client.model.GoogleFirestoreAdminV1beta2Field;
import org.openapitools.client.model.GoogleFirestoreAdminV1beta2ImportDocumentsRequest;
import org.openapitools.client.model.GoogleFirestoreAdminV1beta2Index;
import org.openapitools.client.model.GoogleFirestoreAdminV1beta2ListFieldsResponse;
import org.openapitools.client.model.GoogleFirestoreAdminV1beta2ListIndexesResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to &#x60;indexConfig.usesAncestorConfig:false&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsFieldsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleFirestoreAdminV1beta2ListFieldsResponse response = api.firestoreProjectsDatabasesCollectionGroupsFieldsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn&#39;t aware of. The field mask should be specified as: &#x60;{ paths: \&quot;index_config\&quot; }&#x60;. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special &#x60;Field&#x60; with resource name: &#x60;projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/_*&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsFieldsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleFirestoreAdminV1beta2Field googleFirestoreAdminV1beta2Field = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesCollectionGroupsFieldsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleFirestoreAdminV1beta2Field);
        // TODO: test validations
    }

    /**
     * Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsIndexesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1beta2Index googleFirestoreAdminV1beta2Index = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesCollectionGroupsIndexesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1beta2Index);
        // TODO: test validations
    }

    /**
     * Deletes a composite index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsIndexesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.firestoreProjectsDatabasesCollectionGroupsIndexesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a composite index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsIndexesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1beta2Index response = api.firestoreProjectsDatabasesCollectionGroupsIndexesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists composite indexes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesCollectionGroupsIndexesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleFirestoreAdminV1beta2ListIndexesResponse response = api.firestoreProjectsDatabasesCollectionGroupsIndexesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesExportDocumentsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1beta2ExportDocumentsRequest googleFirestoreAdminV1beta2ExportDocumentsRequest = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesExportDocuments(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1beta2ExportDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firestoreProjectsDatabasesImportDocumentsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleFirestoreAdminV1beta2ImportDocumentsRequest googleFirestoreAdminV1beta2ImportDocumentsRequest = null;
        GoogleLongrunningOperation response = api.firestoreProjectsDatabasesImportDocuments(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleFirestoreAdminV1beta2ImportDocumentsRequest);
        // TODO: test validations
    }

}
