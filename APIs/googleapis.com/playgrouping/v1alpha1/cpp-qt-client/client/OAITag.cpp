/**
 * Google Play Grouping API
 * playgrouping.googleapis.com API.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag::OAITag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag::OAITag() {
    this->initializeModel();
}

OAITag::~OAITag() {}

void OAITag::initializeModel() {

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_int64_value_isSet = false;
    m_int64_value_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_time_value_isSet = false;
    m_time_value_isValid = false;
}

void OAITag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag::fromJsonObject(QJsonObject json) {

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;

    m_int64_value_isValid = ::OpenAPI::fromJsonValue(m_int64_value, json[QString("int64Value")]);
    m_int64_value_isSet = !json[QString("int64Value")].isNull() && m_int64_value_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_time_value_isValid = ::OpenAPI::fromJsonValue(m_time_value, json[QString("timeValue")]);
    m_time_value_isSet = !json[QString("timeValue")].isNull() && m_time_value_isValid;
}

QString OAITag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_int64_value_isSet) {
        obj.insert(QString("int64Value"), ::OpenAPI::toJsonValue(m_int64_value));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_time_value_isSet) {
        obj.insert(QString("timeValue"), ::OpenAPI::toJsonValue(m_time_value));
    }
    return obj;
}

bool OAITag::isBooleanValue() const {
    return m_boolean_value;
}
void OAITag::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAITag::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAITag::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

QString OAITag::getInt64Value() const {
    return m_int64_value;
}
void OAITag::setInt64Value(const QString &int64_value) {
    m_int64_value = int64_value;
    m_int64_value_isSet = true;
}

bool OAITag::is_int64_value_Set() const{
    return m_int64_value_isSet;
}

bool OAITag::is_int64_value_Valid() const{
    return m_int64_value_isValid;
}

QString OAITag::getKey() const {
    return m_key;
}
void OAITag::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAITag::is_key_Set() const{
    return m_key_isSet;
}

bool OAITag::is_key_Valid() const{
    return m_key_isValid;
}

QString OAITag::getStringValue() const {
    return m_string_value;
}
void OAITag::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAITag::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAITag::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QString OAITag::getTimeValue() const {
    return m_time_value;
}
void OAITag::setTimeValue(const QString &time_value) {
    m_time_value = time_value;
    m_time_value_isSet = true;
}

bool OAITag::is_time_value_Set() const{
    return m_time_value_isSet;
}

bool OAITag::is_time_value_Valid() const{
    return m_time_value_isValid;
}

bool OAITag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_int64_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
