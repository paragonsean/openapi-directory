/**
 * Google Play Grouping API
 * playgrouping.googleapis.com API.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Tag model module.
 * @module model/Tag
 * @version v1alpha1
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * A tag is associated with exactly one package name and user.
     * @alias module:model/Tag
     */
    constructor() { 
        
        Tag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('booleanValue')) {
                obj['booleanValue'] = ApiClient.convertToType(data['booleanValue'], 'Boolean');
            }
            if (data.hasOwnProperty('int64Value')) {
                obj['int64Value'] = ApiClient.convertToType(data['int64Value'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
            if (data.hasOwnProperty('timeValue')) {
                obj['timeValue'] = ApiClient.convertToType(data['timeValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['int64Value'] && !(typeof data['int64Value'] === 'string' || data['int64Value'] instanceof String)) {
            throw new Error("Expected the field `int64Value` to be a primitive type in the JSON string but got " + data['int64Value']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }
        // ensure the json data is a string
        if (data['timeValue'] && !(typeof data['timeValue'] === 'string' || data['timeValue'] instanceof String)) {
            throw new Error("Expected the field `timeValue` to be a primitive type in the JSON string but got " + data['timeValue']);
        }

        return true;
    }


}



/**
 * A boolean value of the tag.
 * @member {Boolean} booleanValue
 */
Tag.prototype['booleanValue'] = undefined;

/**
 * A signed 64-bit integer value of the tag.
 * @member {String} int64Value
 */
Tag.prototype['int64Value'] = undefined;

/**
 * Required. Key for the tag.
 * @member {String} key
 */
Tag.prototype['key'] = undefined;

/**
 * A string value of the tag.
 * @member {String} stringValue
 */
Tag.prototype['stringValue'] = undefined;

/**
 * A time value of the tag.
 * @member {String} timeValue
 */
Tag.prototype['timeValue'] = undefined;






export default Tag;

