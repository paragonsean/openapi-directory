/**
 * Google Play Grouping API
 * playgrouping.googleapis.com API.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrUpdateTagsRequest from '../model/CreateOrUpdateTagsRequest';
import CreateOrUpdateTagsResponse from '../model/CreateOrUpdateTagsResponse';
import VerifyTokenRequest from '../model/VerifyTokenRequest';

/**
* Apps service.
* @module api/AppsApi
* @version v1alpha1
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playgroupingAppsTokensTagsCreateOrUpdate operation.
     * @callback module:api/AppsApi~playgroupingAppsTokensTagsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrUpdateTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update tags for the user and app that are represented by the given token.
     * @param {String} appPackage Required. App whose tags are being manipulated. Format: apps/{package_name}
     * @param {String} token Required. Token for which the tags are being inserted or updated. Format: tokens/{token}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CreateOrUpdateTagsRequest} [createOrUpdateTagsRequest] 
     * @param {module:api/AppsApi~playgroupingAppsTokensTagsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrUpdateTagsResponse}
     */
    playgroupingAppsTokensTagsCreateOrUpdate(appPackage, token, opts, callback) {
      opts = opts || {};
      let postBody = opts['createOrUpdateTagsRequest'];
      // verify the required parameter 'appPackage' is set
      if (appPackage === undefined || appPackage === null) {
        throw new Error("Missing the required parameter 'appPackage' when calling playgroupingAppsTokensTagsCreateOrUpdate");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling playgroupingAppsTokensTagsCreateOrUpdate");
      }

      let pathParams = {
        'appPackage': appPackage,
        'token': token
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrUpdateTagsResponse;
      return this.apiClient.callApi(
        '/v1alpha1/{appPackage}/{token}/tags:createOrUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playgroupingAppsTokensVerify operation.
     * @callback module:api/AppsApi~playgroupingAppsTokensVerifyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify an API token by asserting the app and persona it belongs to. The verification is a protection against client-side attacks and will fail if the contents of the token don't match the provided values. A token must be verified before it can be used to manipulate user tags.
     * @param {String} appPackage Required. App the token belongs to. Format: apps/{package_name}
     * @param {String} token Required. The token to be verified. Format: tokens/{token}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/VerifyTokenRequest} [verifyTokenRequest] 
     * @param {module:api/AppsApi~playgroupingAppsTokensVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    playgroupingAppsTokensVerify(appPackage, token, opts, callback) {
      opts = opts || {};
      let postBody = opts['verifyTokenRequest'];
      // verify the required parameter 'appPackage' is set
      if (appPackage === undefined || appPackage === null) {
        throw new Error("Missing the required parameter 'appPackage' when calling playgroupingAppsTokensVerify");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling playgroupingAppsTokensVerify");
      }

      let pathParams = {
        'appPackage': appPackage,
        'token': token
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1alpha1/{appPackage}/{token}:verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
