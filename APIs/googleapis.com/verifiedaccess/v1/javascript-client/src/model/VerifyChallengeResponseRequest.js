/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SignedData from './SignedData';

/**
 * The VerifyChallengeResponseRequest model module.
 * @module model/VerifyChallengeResponseRequest
 * @version v1
 */
class VerifyChallengeResponseRequest {
    /**
     * Constructs a new <code>VerifyChallengeResponseRequest</code>.
     * signed ChallengeResponse
     * @alias module:model/VerifyChallengeResponseRequest
     */
    constructor() { 
        
        VerifyChallengeResponseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerifyChallengeResponseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyChallengeResponseRequest} obj Optional instance to populate.
     * @return {module:model/VerifyChallengeResponseRequest} The populated <code>VerifyChallengeResponseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyChallengeResponseRequest();

            if (data.hasOwnProperty('challengeResponse')) {
                obj['challengeResponse'] = SignedData.constructFromObject(data['challengeResponse']);
            }
            if (data.hasOwnProperty('expectedIdentity')) {
                obj['expectedIdentity'] = ApiClient.convertToType(data['expectedIdentity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyChallengeResponseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyChallengeResponseRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `challengeResponse`
        if (data['challengeResponse']) { // data not null
          SignedData.validateJSON(data['challengeResponse']);
        }
        // ensure the json data is a string
        if (data['expectedIdentity'] && !(typeof data['expectedIdentity'] === 'string' || data['expectedIdentity'] instanceof String)) {
            throw new Error("Expected the field `expectedIdentity` to be a primitive type in the JSON string but got " + data['expectedIdentity']);
        }

        return true;
    }


}



/**
 * @member {module:model/SignedData} challengeResponse
 */
VerifyChallengeResponseRequest.prototype['challengeResponse'] = undefined;

/**
 * Service can optionally provide identity information about the device or user associated with the key. For an EMK, this value is the enrolled domain. For an EUK, this value is the user's email address. If present, this value will be checked against contents of the response, and verification will fail if there is no match.
 * @member {String} expectedIdentity
 */
VerifyChallengeResponseRequest.prototype['expectedIdentity'] = undefined;






export default VerifyChallengeResponseRequest;

