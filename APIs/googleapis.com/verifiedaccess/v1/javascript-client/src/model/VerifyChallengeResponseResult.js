/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VerifyChallengeResponseResult model module.
 * @module model/VerifyChallengeResponseResult
 * @version v1
 */
class VerifyChallengeResponseResult {
    /**
     * Constructs a new <code>VerifyChallengeResponseResult</code>.
     * Result message for VerifiedAccess.VerifyChallengeResponse.
     * @alias module:model/VerifyChallengeResponseResult
     */
    constructor() { 
        
        VerifyChallengeResponseResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerifyChallengeResponseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyChallengeResponseResult} obj Optional instance to populate.
     * @return {module:model/VerifyChallengeResponseResult} The populated <code>VerifyChallengeResponseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyChallengeResponseResult();

            if (data.hasOwnProperty('attestedDeviceId')) {
                obj['attestedDeviceId'] = ApiClient.convertToType(data['attestedDeviceId'], 'String');
            }
            if (data.hasOwnProperty('deviceEnrollmentId')) {
                obj['deviceEnrollmentId'] = ApiClient.convertToType(data['deviceEnrollmentId'], 'String');
            }
            if (data.hasOwnProperty('devicePermanentId')) {
                obj['devicePermanentId'] = ApiClient.convertToType(data['devicePermanentId'], 'String');
            }
            if (data.hasOwnProperty('signedPublicKeyAndChallenge')) {
                obj['signedPublicKeyAndChallenge'] = ApiClient.convertToType(data['signedPublicKeyAndChallenge'], 'String');
            }
            if (data.hasOwnProperty('verificationOutput')) {
                obj['verificationOutput'] = ApiClient.convertToType(data['verificationOutput'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyChallengeResponseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyChallengeResponseResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attestedDeviceId'] && !(typeof data['attestedDeviceId'] === 'string' || data['attestedDeviceId'] instanceof String)) {
            throw new Error("Expected the field `attestedDeviceId` to be a primitive type in the JSON string but got " + data['attestedDeviceId']);
        }
        // ensure the json data is a string
        if (data['deviceEnrollmentId'] && !(typeof data['deviceEnrollmentId'] === 'string' || data['deviceEnrollmentId'] instanceof String)) {
            throw new Error("Expected the field `deviceEnrollmentId` to be a primitive type in the JSON string but got " + data['deviceEnrollmentId']);
        }
        // ensure the json data is a string
        if (data['devicePermanentId'] && !(typeof data['devicePermanentId'] === 'string' || data['devicePermanentId'] instanceof String)) {
            throw new Error("Expected the field `devicePermanentId` to be a primitive type in the JSON string but got " + data['devicePermanentId']);
        }
        // ensure the json data is a string
        if (data['signedPublicKeyAndChallenge'] && !(typeof data['signedPublicKeyAndChallenge'] === 'string' || data['signedPublicKeyAndChallenge'] instanceof String)) {
            throw new Error("Expected the field `signedPublicKeyAndChallenge` to be a primitive type in the JSON string but got " + data['signedPublicKeyAndChallenge']);
        }
        // ensure the json data is a string
        if (data['verificationOutput'] && !(typeof data['verificationOutput'] === 'string' || data['verificationOutput'] instanceof String)) {
            throw new Error("Expected the field `verificationOutput` to be a primitive type in the JSON string but got " + data['verificationOutput']);
        }

        return true;
    }


}



/**
 * Attested device id (ADID) of the device, read from the verified data.
 * @member {String} attestedDeviceId
 */
VerifyChallengeResponseResult.prototype['attestedDeviceId'] = undefined;

/**
 * Device enrollment id is returned in this field (for the machine response only).
 * @member {String} deviceEnrollmentId
 */
VerifyChallengeResponseResult.prototype['deviceEnrollmentId'] = undefined;

/**
 * Device permanent id is returned in this field (for the machine response only).
 * @member {String} devicePermanentId
 */
VerifyChallengeResponseResult.prototype['devicePermanentId'] = undefined;

/**
 * Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)
 * @member {String} signedPublicKeyAndChallenge
 */
VerifyChallengeResponseResult.prototype['signedPublicKeyAndChallenge'] = undefined;

/**
 * For EMCert check, device permanent id is returned here. For EUCert check, signed_public_key_and_challenge [base64 encoded] is returned if present, otherwise empty string is returned. This field is deprecated, please use device_permanent_id or signed_public_key_and_challenge fields.
 * @member {String} verificationOutput
 */
VerifyChallengeResponseResult.prototype['verificationOutput'] = undefined;






export default VerifyChallengeResponseResult;

