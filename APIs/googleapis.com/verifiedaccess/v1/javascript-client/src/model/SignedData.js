/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignedData model module.
 * @module model/SignedData
 * @version v1
 */
class SignedData {
    /**
     * Constructs a new <code>SignedData</code>.
     * The wrapper message of any data and its signature.
     * @alias module:model/SignedData
     */
    constructor() { 
        
        SignedData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignedData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignedData} obj Optional instance to populate.
     * @return {module:model/SignedData} The populated <code>SignedData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignedData();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'Blob');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignedData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignedData</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The data to be signed.
 * @member {Blob} data
 */
SignedData.prototype['data'] = undefined;

/**
 * The signature of the data field.
 * @member {Blob} signature
 */
SignedData.prototype['signature'] = undefined;






export default SignedData;

