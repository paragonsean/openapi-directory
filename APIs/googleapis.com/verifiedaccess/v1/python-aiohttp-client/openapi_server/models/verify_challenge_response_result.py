# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyChallengeResponseResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attested_device_id: str=None, device_enrollment_id: str=None, device_permanent_id: str=None, signed_public_key_and_challenge: str=None, verification_output: str=None):
        """VerifyChallengeResponseResult - a model defined in OpenAPI

        :param attested_device_id: The attested_device_id of this VerifyChallengeResponseResult.
        :param device_enrollment_id: The device_enrollment_id of this VerifyChallengeResponseResult.
        :param device_permanent_id: The device_permanent_id of this VerifyChallengeResponseResult.
        :param signed_public_key_and_challenge: The signed_public_key_and_challenge of this VerifyChallengeResponseResult.
        :param verification_output: The verification_output of this VerifyChallengeResponseResult.
        """
        self.openapi_types = {
            'attested_device_id': str,
            'device_enrollment_id': str,
            'device_permanent_id': str,
            'signed_public_key_and_challenge': str,
            'verification_output': str
        }

        self.attribute_map = {
            'attested_device_id': 'attestedDeviceId',
            'device_enrollment_id': 'deviceEnrollmentId',
            'device_permanent_id': 'devicePermanentId',
            'signed_public_key_and_challenge': 'signedPublicKeyAndChallenge',
            'verification_output': 'verificationOutput'
        }

        self._attested_device_id = attested_device_id
        self._device_enrollment_id = device_enrollment_id
        self._device_permanent_id = device_permanent_id
        self._signed_public_key_and_challenge = signed_public_key_and_challenge
        self._verification_output = verification_output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyChallengeResponseResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyChallengeResponseResult of this VerifyChallengeResponseResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attested_device_id(self):
        """Gets the attested_device_id of this VerifyChallengeResponseResult.

        Attested device id (ADID) of the device, read from the verified data.

        :return: The attested_device_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._attested_device_id

    @attested_device_id.setter
    def attested_device_id(self, attested_device_id):
        """Sets the attested_device_id of this VerifyChallengeResponseResult.

        Attested device id (ADID) of the device, read from the verified data.

        :param attested_device_id: The attested_device_id of this VerifyChallengeResponseResult.
        :type attested_device_id: str
        """

        self._attested_device_id = attested_device_id

    @property
    def device_enrollment_id(self):
        """Gets the device_enrollment_id of this VerifyChallengeResponseResult.

        Device enrollment id is returned in this field (for the machine response only).

        :return: The device_enrollment_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._device_enrollment_id

    @device_enrollment_id.setter
    def device_enrollment_id(self, device_enrollment_id):
        """Sets the device_enrollment_id of this VerifyChallengeResponseResult.

        Device enrollment id is returned in this field (for the machine response only).

        :param device_enrollment_id: The device_enrollment_id of this VerifyChallengeResponseResult.
        :type device_enrollment_id: str
        """

        self._device_enrollment_id = device_enrollment_id

    @property
    def device_permanent_id(self):
        """Gets the device_permanent_id of this VerifyChallengeResponseResult.

        Device permanent id is returned in this field (for the machine response only).

        :return: The device_permanent_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._device_permanent_id

    @device_permanent_id.setter
    def device_permanent_id(self, device_permanent_id):
        """Sets the device_permanent_id of this VerifyChallengeResponseResult.

        Device permanent id is returned in this field (for the machine response only).

        :param device_permanent_id: The device_permanent_id of this VerifyChallengeResponseResult.
        :type device_permanent_id: str
        """

        self._device_permanent_id = device_permanent_id

    @property
    def signed_public_key_and_challenge(self):
        """Gets the signed_public_key_and_challenge of this VerifyChallengeResponseResult.

        Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)

        :return: The signed_public_key_and_challenge of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._signed_public_key_and_challenge

    @signed_public_key_and_challenge.setter
    def signed_public_key_and_challenge(self, signed_public_key_and_challenge):
        """Sets the signed_public_key_and_challenge of this VerifyChallengeResponseResult.

        Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)

        :param signed_public_key_and_challenge: The signed_public_key_and_challenge of this VerifyChallengeResponseResult.
        :type signed_public_key_and_challenge: str
        """

        self._signed_public_key_and_challenge = signed_public_key_and_challenge

    @property
    def verification_output(self):
        """Gets the verification_output of this VerifyChallengeResponseResult.

        For EMCert check, device permanent id is returned here. For EUCert check, signed_public_key_and_challenge [base64 encoded] is returned if present, otherwise empty string is returned. This field is deprecated, please use device_permanent_id or signed_public_key_and_challenge fields.

        :return: The verification_output of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._verification_output

    @verification_output.setter
    def verification_output(self, verification_output):
        """Sets the verification_output of this VerifyChallengeResponseResult.

        For EMCert check, device permanent id is returned here. For EUCert check, signed_public_key_and_challenge [base64 encoded] is returned if present, otherwise empty string is returned. This field is deprecated, please use device_permanent_id or signed_public_key_and_challenge fields.

        :param verification_output: The verification_output of this VerifyChallengeResponseResult.
        :type verification_output: str
        """

        self._verification_output = verification_output
