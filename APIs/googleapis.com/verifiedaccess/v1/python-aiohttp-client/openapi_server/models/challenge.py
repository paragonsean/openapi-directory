# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signed_data import SignedData
from openapi_server import util


class Challenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_challenge: SignedData=None, challenge: SignedData=None):
        """Challenge - a model defined in OpenAPI

        :param alternative_challenge: The alternative_challenge of this Challenge.
        :param challenge: The challenge of this Challenge.
        """
        self.openapi_types = {
            'alternative_challenge': SignedData,
            'challenge': SignedData
        }

        self.attribute_map = {
            'alternative_challenge': 'alternativeChallenge',
            'challenge': 'challenge'
        }

        self._alternative_challenge = alternative_challenge
        self._challenge = challenge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Challenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Challenge of this Challenge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_challenge(self):
        """Gets the alternative_challenge of this Challenge.


        :return: The alternative_challenge of this Challenge.
        :rtype: SignedData
        """
        return self._alternative_challenge

    @alternative_challenge.setter
    def alternative_challenge(self, alternative_challenge):
        """Sets the alternative_challenge of this Challenge.


        :param alternative_challenge: The alternative_challenge of this Challenge.
        :type alternative_challenge: SignedData
        """

        self._alternative_challenge = alternative_challenge

    @property
    def challenge(self):
        """Gets the challenge of this Challenge.


        :return: The challenge of this Challenge.
        :rtype: SignedData
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this Challenge.


        :param challenge: The challenge of this Challenge.
        :type challenge: SignedData
        """

        self._challenge = challenge
