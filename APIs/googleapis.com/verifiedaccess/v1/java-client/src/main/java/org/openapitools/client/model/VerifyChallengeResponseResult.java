/*
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result message for VerifiedAccess.VerifyChallengeResponse.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:59.758709-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyChallengeResponseResult {
  public static final String SERIALIZED_NAME_ATTESTED_DEVICE_ID = "attestedDeviceId";
  @SerializedName(SERIALIZED_NAME_ATTESTED_DEVICE_ID)
  private String attestedDeviceId;

  public static final String SERIALIZED_NAME_DEVICE_ENROLLMENT_ID = "deviceEnrollmentId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ENROLLMENT_ID)
  private String deviceEnrollmentId;

  public static final String SERIALIZED_NAME_DEVICE_PERMANENT_ID = "devicePermanentId";
  @SerializedName(SERIALIZED_NAME_DEVICE_PERMANENT_ID)
  private String devicePermanentId;

  public static final String SERIALIZED_NAME_SIGNED_PUBLIC_KEY_AND_CHALLENGE = "signedPublicKeyAndChallenge";
  @SerializedName(SERIALIZED_NAME_SIGNED_PUBLIC_KEY_AND_CHALLENGE)
  private String signedPublicKeyAndChallenge;

  public static final String SERIALIZED_NAME_VERIFICATION_OUTPUT = "verificationOutput";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERIFICATION_OUTPUT)
  private String verificationOutput;

  public VerifyChallengeResponseResult() {
  }

  public VerifyChallengeResponseResult attestedDeviceId(String attestedDeviceId) {
    this.attestedDeviceId = attestedDeviceId;
    return this;
  }

  /**
   * Attested device id (ADID) of the device, read from the verified data.
   * @return attestedDeviceId
   */
  @javax.annotation.Nullable
  public String getAttestedDeviceId() {
    return attestedDeviceId;
  }

  public void setAttestedDeviceId(String attestedDeviceId) {
    this.attestedDeviceId = attestedDeviceId;
  }


  public VerifyChallengeResponseResult deviceEnrollmentId(String deviceEnrollmentId) {
    this.deviceEnrollmentId = deviceEnrollmentId;
    return this;
  }

  /**
   * Device enrollment id is returned in this field (for the machine response only).
   * @return deviceEnrollmentId
   */
  @javax.annotation.Nullable
  public String getDeviceEnrollmentId() {
    return deviceEnrollmentId;
  }

  public void setDeviceEnrollmentId(String deviceEnrollmentId) {
    this.deviceEnrollmentId = deviceEnrollmentId;
  }


  public VerifyChallengeResponseResult devicePermanentId(String devicePermanentId) {
    this.devicePermanentId = devicePermanentId;
    return this;
  }

  /**
   * Device permanent id is returned in this field (for the machine response only).
   * @return devicePermanentId
   */
  @javax.annotation.Nullable
  public String getDevicePermanentId() {
    return devicePermanentId;
  }

  public void setDevicePermanentId(String devicePermanentId) {
    this.devicePermanentId = devicePermanentId;
  }


  public VerifyChallengeResponseResult signedPublicKeyAndChallenge(String signedPublicKeyAndChallenge) {
    this.signedPublicKeyAndChallenge = signedPublicKeyAndChallenge;
    return this;
  }

  /**
   * Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)
   * @return signedPublicKeyAndChallenge
   */
  @javax.annotation.Nullable
  public String getSignedPublicKeyAndChallenge() {
    return signedPublicKeyAndChallenge;
  }

  public void setSignedPublicKeyAndChallenge(String signedPublicKeyAndChallenge) {
    this.signedPublicKeyAndChallenge = signedPublicKeyAndChallenge;
  }


  @Deprecated
  public VerifyChallengeResponseResult verificationOutput(String verificationOutput) {
    this.verificationOutput = verificationOutput;
    return this;
  }

  /**
   * For EMCert check, device permanent id is returned here. For EUCert check, signed_public_key_and_challenge [base64 encoded] is returned if present, otherwise empty string is returned. This field is deprecated, please use device_permanent_id or signed_public_key_and_challenge fields.
   * @return verificationOutput
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVerificationOutput() {
    return verificationOutput;
  }

  @Deprecated
  public void setVerificationOutput(String verificationOutput) {
    this.verificationOutput = verificationOutput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyChallengeResponseResult verifyChallengeResponseResult = (VerifyChallengeResponseResult) o;
    return Objects.equals(this.attestedDeviceId, verifyChallengeResponseResult.attestedDeviceId) &&
        Objects.equals(this.deviceEnrollmentId, verifyChallengeResponseResult.deviceEnrollmentId) &&
        Objects.equals(this.devicePermanentId, verifyChallengeResponseResult.devicePermanentId) &&
        Objects.equals(this.signedPublicKeyAndChallenge, verifyChallengeResponseResult.signedPublicKeyAndChallenge) &&
        Objects.equals(this.verificationOutput, verifyChallengeResponseResult.verificationOutput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestedDeviceId, deviceEnrollmentId, devicePermanentId, signedPublicKeyAndChallenge, verificationOutput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyChallengeResponseResult {\n");
    sb.append("    attestedDeviceId: ").append(toIndentedString(attestedDeviceId)).append("\n");
    sb.append("    deviceEnrollmentId: ").append(toIndentedString(deviceEnrollmentId)).append("\n");
    sb.append("    devicePermanentId: ").append(toIndentedString(devicePermanentId)).append("\n");
    sb.append("    signedPublicKeyAndChallenge: ").append(toIndentedString(signedPublicKeyAndChallenge)).append("\n");
    sb.append("    verificationOutput: ").append(toIndentedString(verificationOutput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attestedDeviceId");
    openapiFields.add("deviceEnrollmentId");
    openapiFields.add("devicePermanentId");
    openapiFields.add("signedPublicKeyAndChallenge");
    openapiFields.add("verificationOutput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyChallengeResponseResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyChallengeResponseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyChallengeResponseResult is not found in the empty JSON string", VerifyChallengeResponseResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyChallengeResponseResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyChallengeResponseResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attestedDeviceId") != null && !jsonObj.get("attestedDeviceId").isJsonNull()) && !jsonObj.get("attestedDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attestedDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attestedDeviceId").toString()));
      }
      if ((jsonObj.get("deviceEnrollmentId") != null && !jsonObj.get("deviceEnrollmentId").isJsonNull()) && !jsonObj.get("deviceEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceEnrollmentId").toString()));
      }
      if ((jsonObj.get("devicePermanentId") != null && !jsonObj.get("devicePermanentId").isJsonNull()) && !jsonObj.get("devicePermanentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicePermanentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicePermanentId").toString()));
      }
      if ((jsonObj.get("signedPublicKeyAndChallenge") != null && !jsonObj.get("signedPublicKeyAndChallenge").isJsonNull()) && !jsonObj.get("signedPublicKeyAndChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedPublicKeyAndChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedPublicKeyAndChallenge").toString()));
      }
      if ((jsonObj.get("verificationOutput") != null && !jsonObj.get("verificationOutput").isJsonNull()) && !jsonObj.get("verificationOutput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationOutput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationOutput").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyChallengeResponseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyChallengeResponseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyChallengeResponseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyChallengeResponseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyChallengeResponseResult>() {
           @Override
           public void write(JsonWriter out, VerifyChallengeResponseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyChallengeResponseResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyChallengeResponseResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyChallengeResponseResult
   * @throws IOException if the JSON string is invalid with respect to VerifyChallengeResponseResult
   */
  public static VerifyChallengeResponseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyChallengeResponseResult.class);
  }

  /**
   * Convert an instance of VerifyChallengeResponseResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

