/*
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SignedData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * signed ChallengeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:59.758709-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyChallengeResponseRequest {
  public static final String SERIALIZED_NAME_CHALLENGE_RESPONSE = "challengeResponse";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_RESPONSE)
  private SignedData challengeResponse;

  public static final String SERIALIZED_NAME_EXPECTED_IDENTITY = "expectedIdentity";
  @SerializedName(SERIALIZED_NAME_EXPECTED_IDENTITY)
  private String expectedIdentity;

  public VerifyChallengeResponseRequest() {
  }

  public VerifyChallengeResponseRequest challengeResponse(SignedData challengeResponse) {
    this.challengeResponse = challengeResponse;
    return this;
  }

  /**
   * Get challengeResponse
   * @return challengeResponse
   */
  @javax.annotation.Nullable
  public SignedData getChallengeResponse() {
    return challengeResponse;
  }

  public void setChallengeResponse(SignedData challengeResponse) {
    this.challengeResponse = challengeResponse;
  }


  public VerifyChallengeResponseRequest expectedIdentity(String expectedIdentity) {
    this.expectedIdentity = expectedIdentity;
    return this;
  }

  /**
   * Service can optionally provide identity information about the device or user associated with the key. For an EMK, this value is the enrolled domain. For an EUK, this value is the user&#39;s email address. If present, this value will be checked against contents of the response, and verification will fail if there is no match.
   * @return expectedIdentity
   */
  @javax.annotation.Nullable
  public String getExpectedIdentity() {
    return expectedIdentity;
  }

  public void setExpectedIdentity(String expectedIdentity) {
    this.expectedIdentity = expectedIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyChallengeResponseRequest verifyChallengeResponseRequest = (VerifyChallengeResponseRequest) o;
    return Objects.equals(this.challengeResponse, verifyChallengeResponseRequest.challengeResponse) &&
        Objects.equals(this.expectedIdentity, verifyChallengeResponseRequest.expectedIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeResponse, expectedIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyChallengeResponseRequest {\n");
    sb.append("    challengeResponse: ").append(toIndentedString(challengeResponse)).append("\n");
    sb.append("    expectedIdentity: ").append(toIndentedString(expectedIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("challengeResponse");
    openapiFields.add("expectedIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyChallengeResponseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyChallengeResponseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyChallengeResponseRequest is not found in the empty JSON string", VerifyChallengeResponseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyChallengeResponseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyChallengeResponseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `challengeResponse`
      if (jsonObj.get("challengeResponse") != null && !jsonObj.get("challengeResponse").isJsonNull()) {
        SignedData.validateJsonElement(jsonObj.get("challengeResponse"));
      }
      if ((jsonObj.get("expectedIdentity") != null && !jsonObj.get("expectedIdentity").isJsonNull()) && !jsonObj.get("expectedIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedIdentity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyChallengeResponseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyChallengeResponseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyChallengeResponseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyChallengeResponseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyChallengeResponseRequest>() {
           @Override
           public void write(JsonWriter out, VerifyChallengeResponseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyChallengeResponseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyChallengeResponseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyChallengeResponseRequest
   * @throws IOException if the JSON string is invalid with respect to VerifyChallengeResponseRequest
   */
  public static VerifyChallengeResponseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyChallengeResponseRequest.class);
  }

  /**
   * Convert an instance of VerifyChallengeResponseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

