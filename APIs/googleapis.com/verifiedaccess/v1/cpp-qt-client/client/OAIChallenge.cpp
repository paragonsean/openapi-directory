/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChallenge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChallenge::OAIChallenge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChallenge::OAIChallenge() {
    this->initializeModel();
}

OAIChallenge::~OAIChallenge() {}

void OAIChallenge::initializeModel() {

    m_alternative_challenge_isSet = false;
    m_alternative_challenge_isValid = false;

    m_challenge_isSet = false;
    m_challenge_isValid = false;
}

void OAIChallenge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChallenge::fromJsonObject(QJsonObject json) {

    m_alternative_challenge_isValid = ::OpenAPI::fromJsonValue(m_alternative_challenge, json[QString("alternativeChallenge")]);
    m_alternative_challenge_isSet = !json[QString("alternativeChallenge")].isNull() && m_alternative_challenge_isValid;

    m_challenge_isValid = ::OpenAPI::fromJsonValue(m_challenge, json[QString("challenge")]);
    m_challenge_isSet = !json[QString("challenge")].isNull() && m_challenge_isValid;
}

QString OAIChallenge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChallenge::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_challenge.isSet()) {
        obj.insert(QString("alternativeChallenge"), ::OpenAPI::toJsonValue(m_alternative_challenge));
    }
    if (m_challenge.isSet()) {
        obj.insert(QString("challenge"), ::OpenAPI::toJsonValue(m_challenge));
    }
    return obj;
}

OAISignedData OAIChallenge::getAlternativeChallenge() const {
    return m_alternative_challenge;
}
void OAIChallenge::setAlternativeChallenge(const OAISignedData &alternative_challenge) {
    m_alternative_challenge = alternative_challenge;
    m_alternative_challenge_isSet = true;
}

bool OAIChallenge::is_alternative_challenge_Set() const{
    return m_alternative_challenge_isSet;
}

bool OAIChallenge::is_alternative_challenge_Valid() const{
    return m_alternative_challenge_isValid;
}

OAISignedData OAIChallenge::getChallenge() const {
    return m_challenge;
}
void OAIChallenge::setChallenge(const OAISignedData &challenge) {
    m_challenge = challenge;
    m_challenge_isSet = true;
}

bool OAIChallenge::is_challenge_Set() const{
    return m_challenge_isSet;
}

bool OAIChallenge::is_challenge_Valid() const{
    return m_challenge_isValid;
}

bool OAIChallenge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_challenge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChallenge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
