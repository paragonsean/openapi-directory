/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyChallengeResponseResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyChallengeResponseResult::OAIVerifyChallengeResponseResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyChallengeResponseResult::OAIVerifyChallengeResponseResult() {
    this->initializeModel();
}

OAIVerifyChallengeResponseResult::~OAIVerifyChallengeResponseResult() {}

void OAIVerifyChallengeResponseResult::initializeModel() {

    m_attested_device_id_isSet = false;
    m_attested_device_id_isValid = false;

    m_device_enrollment_id_isSet = false;
    m_device_enrollment_id_isValid = false;

    m_device_permanent_id_isSet = false;
    m_device_permanent_id_isValid = false;

    m_signed_public_key_and_challenge_isSet = false;
    m_signed_public_key_and_challenge_isValid = false;

    m_verification_output_isSet = false;
    m_verification_output_isValid = false;
}

void OAIVerifyChallengeResponseResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyChallengeResponseResult::fromJsonObject(QJsonObject json) {

    m_attested_device_id_isValid = ::OpenAPI::fromJsonValue(m_attested_device_id, json[QString("attestedDeviceId")]);
    m_attested_device_id_isSet = !json[QString("attestedDeviceId")].isNull() && m_attested_device_id_isValid;

    m_device_enrollment_id_isValid = ::OpenAPI::fromJsonValue(m_device_enrollment_id, json[QString("deviceEnrollmentId")]);
    m_device_enrollment_id_isSet = !json[QString("deviceEnrollmentId")].isNull() && m_device_enrollment_id_isValid;

    m_device_permanent_id_isValid = ::OpenAPI::fromJsonValue(m_device_permanent_id, json[QString("devicePermanentId")]);
    m_device_permanent_id_isSet = !json[QString("devicePermanentId")].isNull() && m_device_permanent_id_isValid;

    m_signed_public_key_and_challenge_isValid = ::OpenAPI::fromJsonValue(m_signed_public_key_and_challenge, json[QString("signedPublicKeyAndChallenge")]);
    m_signed_public_key_and_challenge_isSet = !json[QString("signedPublicKeyAndChallenge")].isNull() && m_signed_public_key_and_challenge_isValid;

    m_verification_output_isValid = ::OpenAPI::fromJsonValue(m_verification_output, json[QString("verificationOutput")]);
    m_verification_output_isSet = !json[QString("verificationOutput")].isNull() && m_verification_output_isValid;
}

QString OAIVerifyChallengeResponseResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyChallengeResponseResult::asJsonObject() const {
    QJsonObject obj;
    if (m_attested_device_id_isSet) {
        obj.insert(QString("attestedDeviceId"), ::OpenAPI::toJsonValue(m_attested_device_id));
    }
    if (m_device_enrollment_id_isSet) {
        obj.insert(QString("deviceEnrollmentId"), ::OpenAPI::toJsonValue(m_device_enrollment_id));
    }
    if (m_device_permanent_id_isSet) {
        obj.insert(QString("devicePermanentId"), ::OpenAPI::toJsonValue(m_device_permanent_id));
    }
    if (m_signed_public_key_and_challenge_isSet) {
        obj.insert(QString("signedPublicKeyAndChallenge"), ::OpenAPI::toJsonValue(m_signed_public_key_and_challenge));
    }
    if (m_verification_output_isSet) {
        obj.insert(QString("verificationOutput"), ::OpenAPI::toJsonValue(m_verification_output));
    }
    return obj;
}

QString OAIVerifyChallengeResponseResult::getAttestedDeviceId() const {
    return m_attested_device_id;
}
void OAIVerifyChallengeResponseResult::setAttestedDeviceId(const QString &attested_device_id) {
    m_attested_device_id = attested_device_id;
    m_attested_device_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_attested_device_id_Set() const{
    return m_attested_device_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_attested_device_id_Valid() const{
    return m_attested_device_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getDeviceEnrollmentId() const {
    return m_device_enrollment_id;
}
void OAIVerifyChallengeResponseResult::setDeviceEnrollmentId(const QString &device_enrollment_id) {
    m_device_enrollment_id = device_enrollment_id;
    m_device_enrollment_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_device_enrollment_id_Set() const{
    return m_device_enrollment_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_device_enrollment_id_Valid() const{
    return m_device_enrollment_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getDevicePermanentId() const {
    return m_device_permanent_id;
}
void OAIVerifyChallengeResponseResult::setDevicePermanentId(const QString &device_permanent_id) {
    m_device_permanent_id = device_permanent_id;
    m_device_permanent_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_device_permanent_id_Set() const{
    return m_device_permanent_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_device_permanent_id_Valid() const{
    return m_device_permanent_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getSignedPublicKeyAndChallenge() const {
    return m_signed_public_key_and_challenge;
}
void OAIVerifyChallengeResponseResult::setSignedPublicKeyAndChallenge(const QString &signed_public_key_and_challenge) {
    m_signed_public_key_and_challenge = signed_public_key_and_challenge;
    m_signed_public_key_and_challenge_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_signed_public_key_and_challenge_Set() const{
    return m_signed_public_key_and_challenge_isSet;
}

bool OAIVerifyChallengeResponseResult::is_signed_public_key_and_challenge_Valid() const{
    return m_signed_public_key_and_challenge_isValid;
}

QString OAIVerifyChallengeResponseResult::getVerificationOutput() const {
    return m_verification_output;
}
void OAIVerifyChallengeResponseResult::setVerificationOutput(const QString &verification_output) {
    m_verification_output = verification_output;
    m_verification_output_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_verification_output_Set() const{
    return m_verification_output_isSet;
}

bool OAIVerifyChallengeResponseResult::is_verification_output_Valid() const{
    return m_verification_output_isValid;
}

bool OAIVerifyChallengeResponseResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attested_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_enrollment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_permanent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_public_key_and_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_output_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyChallengeResponseResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
