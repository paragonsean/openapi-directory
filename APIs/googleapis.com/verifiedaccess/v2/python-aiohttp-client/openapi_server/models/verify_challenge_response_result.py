# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_signals import DeviceSignals
from openapi_server import util


class VerifyChallengeResponseResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attested_device_id: str=None, customer_id: str=None, device_enrollment_id: str=None, device_permanent_id: str=None, device_signal: str=None, device_signals: DeviceSignals=None, key_trust_level: str=None, profile_customer_id: str=None, profile_key_trust_level: str=None, signed_public_key_and_challenge: str=None, virtual_device_id: str=None, virtual_profile_id: str=None):
        """VerifyChallengeResponseResult - a model defined in OpenAPI

        :param attested_device_id: The attested_device_id of this VerifyChallengeResponseResult.
        :param customer_id: The customer_id of this VerifyChallengeResponseResult.
        :param device_enrollment_id: The device_enrollment_id of this VerifyChallengeResponseResult.
        :param device_permanent_id: The device_permanent_id of this VerifyChallengeResponseResult.
        :param device_signal: The device_signal of this VerifyChallengeResponseResult.
        :param device_signals: The device_signals of this VerifyChallengeResponseResult.
        :param key_trust_level: The key_trust_level of this VerifyChallengeResponseResult.
        :param profile_customer_id: The profile_customer_id of this VerifyChallengeResponseResult.
        :param profile_key_trust_level: The profile_key_trust_level of this VerifyChallengeResponseResult.
        :param signed_public_key_and_challenge: The signed_public_key_and_challenge of this VerifyChallengeResponseResult.
        :param virtual_device_id: The virtual_device_id of this VerifyChallengeResponseResult.
        :param virtual_profile_id: The virtual_profile_id of this VerifyChallengeResponseResult.
        """
        self.openapi_types = {
            'attested_device_id': str,
            'customer_id': str,
            'device_enrollment_id': str,
            'device_permanent_id': str,
            'device_signal': str,
            'device_signals': DeviceSignals,
            'key_trust_level': str,
            'profile_customer_id': str,
            'profile_key_trust_level': str,
            'signed_public_key_and_challenge': str,
            'virtual_device_id': str,
            'virtual_profile_id': str
        }

        self.attribute_map = {
            'attested_device_id': 'attestedDeviceId',
            'customer_id': 'customerId',
            'device_enrollment_id': 'deviceEnrollmentId',
            'device_permanent_id': 'devicePermanentId',
            'device_signal': 'deviceSignal',
            'device_signals': 'deviceSignals',
            'key_trust_level': 'keyTrustLevel',
            'profile_customer_id': 'profileCustomerId',
            'profile_key_trust_level': 'profileKeyTrustLevel',
            'signed_public_key_and_challenge': 'signedPublicKeyAndChallenge',
            'virtual_device_id': 'virtualDeviceId',
            'virtual_profile_id': 'virtualProfileId'
        }

        self._attested_device_id = attested_device_id
        self._customer_id = customer_id
        self._device_enrollment_id = device_enrollment_id
        self._device_permanent_id = device_permanent_id
        self._device_signal = device_signal
        self._device_signals = device_signals
        self._key_trust_level = key_trust_level
        self._profile_customer_id = profile_customer_id
        self._profile_key_trust_level = profile_key_trust_level
        self._signed_public_key_and_challenge = signed_public_key_and_challenge
        self._virtual_device_id = virtual_device_id
        self._virtual_profile_id = virtual_profile_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyChallengeResponseResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyChallengeResponseResult of this VerifyChallengeResponseResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attested_device_id(self):
        """Gets the attested_device_id of this VerifyChallengeResponseResult.

        Attested device ID (ADID).

        :return: The attested_device_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._attested_device_id

    @attested_device_id.setter
    def attested_device_id(self, attested_device_id):
        """Sets the attested_device_id of this VerifyChallengeResponseResult.

        Attested device ID (ADID).

        :param attested_device_id: The attested_device_id of this VerifyChallengeResponseResult.
        :type attested_device_id: str
        """

        self._attested_device_id = attested_device_id

    @property
    def customer_id(self):
        """Gets the customer_id of this VerifyChallengeResponseResult.

        Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers

        :return: The customer_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this VerifyChallengeResponseResult.

        Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers

        :param customer_id: The customer_id of this VerifyChallengeResponseResult.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def device_enrollment_id(self):
        """Gets the device_enrollment_id of this VerifyChallengeResponseResult.

        Device enrollment id for ChromeOS devices.

        :return: The device_enrollment_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._device_enrollment_id

    @device_enrollment_id.setter
    def device_enrollment_id(self, device_enrollment_id):
        """Sets the device_enrollment_id of this VerifyChallengeResponseResult.

        Device enrollment id for ChromeOS devices.

        :param device_enrollment_id: The device_enrollment_id of this VerifyChallengeResponseResult.
        :type device_enrollment_id: str
        """

        self._device_enrollment_id = device_enrollment_id

    @property
    def device_permanent_id(self):
        """Gets the device_permanent_id of this VerifyChallengeResponseResult.

        Device permanent id is returned in this field (for the machine response only).

        :return: The device_permanent_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._device_permanent_id

    @device_permanent_id.setter
    def device_permanent_id(self, device_permanent_id):
        """Sets the device_permanent_id of this VerifyChallengeResponseResult.

        Device permanent id is returned in this field (for the machine response only).

        :param device_permanent_id: The device_permanent_id of this VerifyChallengeResponseResult.
        :type device_permanent_id: str
        """

        self._device_permanent_id = device_permanent_id

    @property
    def device_signal(self):
        """Gets the device_signal of this VerifyChallengeResponseResult.

        Deprecated. Device signal in json string representation. Prefer using `device_signals` instead.

        :return: The device_signal of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._device_signal

    @device_signal.setter
    def device_signal(self, device_signal):
        """Sets the device_signal of this VerifyChallengeResponseResult.

        Deprecated. Device signal in json string representation. Prefer using `device_signals` instead.

        :param device_signal: The device_signal of this VerifyChallengeResponseResult.
        :type device_signal: str
        """

        self._device_signal = device_signal

    @property
    def device_signals(self):
        """Gets the device_signals of this VerifyChallengeResponseResult.


        :return: The device_signals of this VerifyChallengeResponseResult.
        :rtype: DeviceSignals
        """
        return self._device_signals

    @device_signals.setter
    def device_signals(self, device_signals):
        """Sets the device_signals of this VerifyChallengeResponseResult.


        :param device_signals: The device_signals of this VerifyChallengeResponseResult.
        :type device_signals: DeviceSignals
        """

        self._device_signals = device_signals

    @property
    def key_trust_level(self):
        """Gets the key_trust_level of this VerifyChallengeResponseResult.

        Device attested key trust level.

        :return: The key_trust_level of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._key_trust_level

    @key_trust_level.setter
    def key_trust_level(self, key_trust_level):
        """Sets the key_trust_level of this VerifyChallengeResponseResult.

        Device attested key trust level.

        :param key_trust_level: The key_trust_level of this VerifyChallengeResponseResult.
        :type key_trust_level: str
        """
        allowed_values = ["KEY_TRUST_LEVEL_UNSPECIFIED", "CHROME_OS_VERIFIED_MODE", "CHROME_OS_DEVELOPER_MODE", "CHROME_BROWSER_HW_KEY", "CHROME_BROWSER_OS_KEY", "CHROME_BROWSER_NO_KEY"]  # noqa: E501
        if key_trust_level not in allowed_values:
            raise ValueError(
                "Invalid value for `key_trust_level` ({0}), must be one of {1}"
                .format(key_trust_level, allowed_values)
            )

        self._key_trust_level = key_trust_level

    @property
    def profile_customer_id(self):
        """Gets the profile_customer_id of this VerifyChallengeResponseResult.

        Unique customer id that this profile belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers

        :return: The profile_customer_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._profile_customer_id

    @profile_customer_id.setter
    def profile_customer_id(self, profile_customer_id):
        """Sets the profile_customer_id of this VerifyChallengeResponseResult.

        Unique customer id that this profile belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers

        :param profile_customer_id: The profile_customer_id of this VerifyChallengeResponseResult.
        :type profile_customer_id: str
        """

        self._profile_customer_id = profile_customer_id

    @property
    def profile_key_trust_level(self):
        """Gets the profile_key_trust_level of this VerifyChallengeResponseResult.

        Profile attested key trust level.

        :return: The profile_key_trust_level of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._profile_key_trust_level

    @profile_key_trust_level.setter
    def profile_key_trust_level(self, profile_key_trust_level):
        """Sets the profile_key_trust_level of this VerifyChallengeResponseResult.

        Profile attested key trust level.

        :param profile_key_trust_level: The profile_key_trust_level of this VerifyChallengeResponseResult.
        :type profile_key_trust_level: str
        """
        allowed_values = ["KEY_TRUST_LEVEL_UNSPECIFIED", "CHROME_OS_VERIFIED_MODE", "CHROME_OS_DEVELOPER_MODE", "CHROME_BROWSER_HW_KEY", "CHROME_BROWSER_OS_KEY", "CHROME_BROWSER_NO_KEY"]  # noqa: E501
        if profile_key_trust_level not in allowed_values:
            raise ValueError(
                "Invalid value for `profile_key_trust_level` ({0}), must be one of {1}"
                .format(profile_key_trust_level, allowed_values)
            )

        self._profile_key_trust_level = profile_key_trust_level

    @property
    def signed_public_key_and_challenge(self):
        """Gets the signed_public_key_and_challenge of this VerifyChallengeResponseResult.

        Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)

        :return: The signed_public_key_and_challenge of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._signed_public_key_and_challenge

    @signed_public_key_and_challenge.setter
    def signed_public_key_and_challenge(self, signed_public_key_and_challenge):
        """Sets the signed_public_key_and_challenge of this VerifyChallengeResponseResult.

        Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)

        :param signed_public_key_and_challenge: The signed_public_key_and_challenge of this VerifyChallengeResponseResult.
        :type signed_public_key_and_challenge: str
        """

        self._signed_public_key_and_challenge = signed_public_key_and_challenge

    @property
    def virtual_device_id(self):
        """Gets the virtual_device_id of this VerifyChallengeResponseResult.

        Virtual device id of the device. The definition of virtual device id is platform-specific.

        :return: The virtual_device_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._virtual_device_id

    @virtual_device_id.setter
    def virtual_device_id(self, virtual_device_id):
        """Sets the virtual_device_id of this VerifyChallengeResponseResult.

        Virtual device id of the device. The definition of virtual device id is platform-specific.

        :param virtual_device_id: The virtual_device_id of this VerifyChallengeResponseResult.
        :type virtual_device_id: str
        """

        self._virtual_device_id = virtual_device_id

    @property
    def virtual_profile_id(self):
        """Gets the virtual_profile_id of this VerifyChallengeResponseResult.

        The ID of a profile on the device.

        :return: The virtual_profile_id of this VerifyChallengeResponseResult.
        :rtype: str
        """
        return self._virtual_profile_id

    @virtual_profile_id.setter
    def virtual_profile_id(self, virtual_profile_id):
        """Sets the virtual_profile_id of this VerifyChallengeResponseResult.

        The ID of a profile on the device.

        :param virtual_profile_id: The virtual_profile_id of this VerifyChallengeResponseResult.
        :type virtual_profile_id: str
        """

        self._virtual_profile_id = virtual_profile_id
