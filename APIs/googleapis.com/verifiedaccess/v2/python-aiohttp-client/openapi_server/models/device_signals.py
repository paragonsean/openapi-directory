# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crowd_strike_agent import CrowdStrikeAgent
from openapi_server import util


class DeviceSignals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_screen_lock: bool=None, browser_version: str=None, built_in_dns_client_enabled: bool=None, chrome_remote_desktop_app_blocked: bool=None, crowd_strike_agent: CrowdStrikeAgent=None, device_affiliation_ids: List[str]=None, device_enrollment_domain: str=None, device_manufacturer: str=None, device_model: str=None, disk_encryption: str=None, display_name: str=None, hostname: str=None, imei: List[str]=None, mac_addresses: List[str]=None, meid: List[str]=None, operating_system: str=None, os_firewall: str=None, os_version: str=None, password_protection_warning_trigger: str=None, profile_affiliation_ids: List[str]=None, realtime_url_check_mode: str=None, safe_browsing_protection_level: str=None, screen_lock_secured: str=None, secure_boot_mode: str=None, serial_number: str=None, site_isolation_enabled: bool=None, system_dns_servers: List[str]=None, third_party_blocking_enabled: bool=None, trigger: str=None, windows_machine_domain: str=None, windows_user_domain: str=None):
        """DeviceSignals - a model defined in OpenAPI

        :param allow_screen_lock: The allow_screen_lock of this DeviceSignals.
        :param browser_version: The browser_version of this DeviceSignals.
        :param built_in_dns_client_enabled: The built_in_dns_client_enabled of this DeviceSignals.
        :param chrome_remote_desktop_app_blocked: The chrome_remote_desktop_app_blocked of this DeviceSignals.
        :param crowd_strike_agent: The crowd_strike_agent of this DeviceSignals.
        :param device_affiliation_ids: The device_affiliation_ids of this DeviceSignals.
        :param device_enrollment_domain: The device_enrollment_domain of this DeviceSignals.
        :param device_manufacturer: The device_manufacturer of this DeviceSignals.
        :param device_model: The device_model of this DeviceSignals.
        :param disk_encryption: The disk_encryption of this DeviceSignals.
        :param display_name: The display_name of this DeviceSignals.
        :param hostname: The hostname of this DeviceSignals.
        :param imei: The imei of this DeviceSignals.
        :param mac_addresses: The mac_addresses of this DeviceSignals.
        :param meid: The meid of this DeviceSignals.
        :param operating_system: The operating_system of this DeviceSignals.
        :param os_firewall: The os_firewall of this DeviceSignals.
        :param os_version: The os_version of this DeviceSignals.
        :param password_protection_warning_trigger: The password_protection_warning_trigger of this DeviceSignals.
        :param profile_affiliation_ids: The profile_affiliation_ids of this DeviceSignals.
        :param realtime_url_check_mode: The realtime_url_check_mode of this DeviceSignals.
        :param safe_browsing_protection_level: The safe_browsing_protection_level of this DeviceSignals.
        :param screen_lock_secured: The screen_lock_secured of this DeviceSignals.
        :param secure_boot_mode: The secure_boot_mode of this DeviceSignals.
        :param serial_number: The serial_number of this DeviceSignals.
        :param site_isolation_enabled: The site_isolation_enabled of this DeviceSignals.
        :param system_dns_servers: The system_dns_servers of this DeviceSignals.
        :param third_party_blocking_enabled: The third_party_blocking_enabled of this DeviceSignals.
        :param trigger: The trigger of this DeviceSignals.
        :param windows_machine_domain: The windows_machine_domain of this DeviceSignals.
        :param windows_user_domain: The windows_user_domain of this DeviceSignals.
        """
        self.openapi_types = {
            'allow_screen_lock': bool,
            'browser_version': str,
            'built_in_dns_client_enabled': bool,
            'chrome_remote_desktop_app_blocked': bool,
            'crowd_strike_agent': CrowdStrikeAgent,
            'device_affiliation_ids': List[str],
            'device_enrollment_domain': str,
            'device_manufacturer': str,
            'device_model': str,
            'disk_encryption': str,
            'display_name': str,
            'hostname': str,
            'imei': List[str],
            'mac_addresses': List[str],
            'meid': List[str],
            'operating_system': str,
            'os_firewall': str,
            'os_version': str,
            'password_protection_warning_trigger': str,
            'profile_affiliation_ids': List[str],
            'realtime_url_check_mode': str,
            'safe_browsing_protection_level': str,
            'screen_lock_secured': str,
            'secure_boot_mode': str,
            'serial_number': str,
            'site_isolation_enabled': bool,
            'system_dns_servers': List[str],
            'third_party_blocking_enabled': bool,
            'trigger': str,
            'windows_machine_domain': str,
            'windows_user_domain': str
        }

        self.attribute_map = {
            'allow_screen_lock': 'allowScreenLock',
            'browser_version': 'browserVersion',
            'built_in_dns_client_enabled': 'builtInDnsClientEnabled',
            'chrome_remote_desktop_app_blocked': 'chromeRemoteDesktopAppBlocked',
            'crowd_strike_agent': 'crowdStrikeAgent',
            'device_affiliation_ids': 'deviceAffiliationIds',
            'device_enrollment_domain': 'deviceEnrollmentDomain',
            'device_manufacturer': 'deviceManufacturer',
            'device_model': 'deviceModel',
            'disk_encryption': 'diskEncryption',
            'display_name': 'displayName',
            'hostname': 'hostname',
            'imei': 'imei',
            'mac_addresses': 'macAddresses',
            'meid': 'meid',
            'operating_system': 'operatingSystem',
            'os_firewall': 'osFirewall',
            'os_version': 'osVersion',
            'password_protection_warning_trigger': 'passwordProtectionWarningTrigger',
            'profile_affiliation_ids': 'profileAffiliationIds',
            'realtime_url_check_mode': 'realtimeUrlCheckMode',
            'safe_browsing_protection_level': 'safeBrowsingProtectionLevel',
            'screen_lock_secured': 'screenLockSecured',
            'secure_boot_mode': 'secureBootMode',
            'serial_number': 'serialNumber',
            'site_isolation_enabled': 'siteIsolationEnabled',
            'system_dns_servers': 'systemDnsServers',
            'third_party_blocking_enabled': 'thirdPartyBlockingEnabled',
            'trigger': 'trigger',
            'windows_machine_domain': 'windowsMachineDomain',
            'windows_user_domain': 'windowsUserDomain'
        }

        self._allow_screen_lock = allow_screen_lock
        self._browser_version = browser_version
        self._built_in_dns_client_enabled = built_in_dns_client_enabled
        self._chrome_remote_desktop_app_blocked = chrome_remote_desktop_app_blocked
        self._crowd_strike_agent = crowd_strike_agent
        self._device_affiliation_ids = device_affiliation_ids
        self._device_enrollment_domain = device_enrollment_domain
        self._device_manufacturer = device_manufacturer
        self._device_model = device_model
        self._disk_encryption = disk_encryption
        self._display_name = display_name
        self._hostname = hostname
        self._imei = imei
        self._mac_addresses = mac_addresses
        self._meid = meid
        self._operating_system = operating_system
        self._os_firewall = os_firewall
        self._os_version = os_version
        self._password_protection_warning_trigger = password_protection_warning_trigger
        self._profile_affiliation_ids = profile_affiliation_ids
        self._realtime_url_check_mode = realtime_url_check_mode
        self._safe_browsing_protection_level = safe_browsing_protection_level
        self._screen_lock_secured = screen_lock_secured
        self._secure_boot_mode = secure_boot_mode
        self._serial_number = serial_number
        self._site_isolation_enabled = site_isolation_enabled
        self._system_dns_servers = system_dns_servers
        self._third_party_blocking_enabled = third_party_blocking_enabled
        self._trigger = trigger
        self._windows_machine_domain = windows_machine_domain
        self._windows_user_domain = windows_user_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSignals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceSignals of this DeviceSignals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_screen_lock(self):
        """Gets the allow_screen_lock of this DeviceSignals.

        Value of the AllowScreenLock policy on the device. See https://chromeenterprise.google/policies/?policy=AllowScreenLock for more details. Available on ChromeOS only.

        :return: The allow_screen_lock of this DeviceSignals.
        :rtype: bool
        """
        return self._allow_screen_lock

    @allow_screen_lock.setter
    def allow_screen_lock(self, allow_screen_lock):
        """Sets the allow_screen_lock of this DeviceSignals.

        Value of the AllowScreenLock policy on the device. See https://chromeenterprise.google/policies/?policy=AllowScreenLock for more details. Available on ChromeOS only.

        :param allow_screen_lock: The allow_screen_lock of this DeviceSignals.
        :type allow_screen_lock: bool
        """

        self._allow_screen_lock = allow_screen_lock

    @property
    def browser_version(self):
        """Gets the browser_version of this DeviceSignals.

        Current version of the Chrome browser which generated this set of signals. Example value: \"107.0.5286.0\".

        :return: The browser_version of this DeviceSignals.
        :rtype: str
        """
        return self._browser_version

    @browser_version.setter
    def browser_version(self, browser_version):
        """Sets the browser_version of this DeviceSignals.

        Current version of the Chrome browser which generated this set of signals. Example value: \"107.0.5286.0\".

        :param browser_version: The browser_version of this DeviceSignals.
        :type browser_version: str
        """

        self._browser_version = browser_version

    @property
    def built_in_dns_client_enabled(self):
        """Gets the built_in_dns_client_enabled of this DeviceSignals.

        Whether Chrome's built-in DNS client is used. The OS DNS client is otherwise used. This value may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled.

        :return: The built_in_dns_client_enabled of this DeviceSignals.
        :rtype: bool
        """
        return self._built_in_dns_client_enabled

    @built_in_dns_client_enabled.setter
    def built_in_dns_client_enabled(self, built_in_dns_client_enabled):
        """Sets the built_in_dns_client_enabled of this DeviceSignals.

        Whether Chrome's built-in DNS client is used. The OS DNS client is otherwise used. This value may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled.

        :param built_in_dns_client_enabled: The built_in_dns_client_enabled of this DeviceSignals.
        :type built_in_dns_client_enabled: bool
        """

        self._built_in_dns_client_enabled = built_in_dns_client_enabled

    @property
    def chrome_remote_desktop_app_blocked(self):
        """Gets the chrome_remote_desktop_app_blocked of this DeviceSignals.

        Whether access to the Chrome Remote Desktop application is blocked via a policy.

        :return: The chrome_remote_desktop_app_blocked of this DeviceSignals.
        :rtype: bool
        """
        return self._chrome_remote_desktop_app_blocked

    @chrome_remote_desktop_app_blocked.setter
    def chrome_remote_desktop_app_blocked(self, chrome_remote_desktop_app_blocked):
        """Sets the chrome_remote_desktop_app_blocked of this DeviceSignals.

        Whether access to the Chrome Remote Desktop application is blocked via a policy.

        :param chrome_remote_desktop_app_blocked: The chrome_remote_desktop_app_blocked of this DeviceSignals.
        :type chrome_remote_desktop_app_blocked: bool
        """

        self._chrome_remote_desktop_app_blocked = chrome_remote_desktop_app_blocked

    @property
    def crowd_strike_agent(self):
        """Gets the crowd_strike_agent of this DeviceSignals.


        :return: The crowd_strike_agent of this DeviceSignals.
        :rtype: CrowdStrikeAgent
        """
        return self._crowd_strike_agent

    @crowd_strike_agent.setter
    def crowd_strike_agent(self, crowd_strike_agent):
        """Sets the crowd_strike_agent of this DeviceSignals.


        :param crowd_strike_agent: The crowd_strike_agent of this DeviceSignals.
        :type crowd_strike_agent: CrowdStrikeAgent
        """

        self._crowd_strike_agent = crowd_strike_agent

    @property
    def device_affiliation_ids(self):
        """Gets the device_affiliation_ids of this DeviceSignals.

        Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the device. When the sets of device and profile affiliation IDs overlap, it means that the organizations managing the device and user are affiliated. To learn more about user affiliation, visit https://support.google.com/chrome/a/answer/12801245?ref_topic=9027936.

        :return: The device_affiliation_ids of this DeviceSignals.
        :rtype: List[str]
        """
        return self._device_affiliation_ids

    @device_affiliation_ids.setter
    def device_affiliation_ids(self, device_affiliation_ids):
        """Sets the device_affiliation_ids of this DeviceSignals.

        Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the device. When the sets of device and profile affiliation IDs overlap, it means that the organizations managing the device and user are affiliated. To learn more about user affiliation, visit https://support.google.com/chrome/a/answer/12801245?ref_topic=9027936.

        :param device_affiliation_ids: The device_affiliation_ids of this DeviceSignals.
        :type device_affiliation_ids: List[str]
        """

        self._device_affiliation_ids = device_affiliation_ids

    @property
    def device_enrollment_domain(self):
        """Gets the device_enrollment_domain of this DeviceSignals.

        Enrollment domain of the customer which is currently managing the device.

        :return: The device_enrollment_domain of this DeviceSignals.
        :rtype: str
        """
        return self._device_enrollment_domain

    @device_enrollment_domain.setter
    def device_enrollment_domain(self, device_enrollment_domain):
        """Sets the device_enrollment_domain of this DeviceSignals.

        Enrollment domain of the customer which is currently managing the device.

        :param device_enrollment_domain: The device_enrollment_domain of this DeviceSignals.
        :type device_enrollment_domain: str
        """

        self._device_enrollment_domain = device_enrollment_domain

    @property
    def device_manufacturer(self):
        """Gets the device_manufacturer of this DeviceSignals.

        The name of the device's manufacturer.

        :return: The device_manufacturer of this DeviceSignals.
        :rtype: str
        """
        return self._device_manufacturer

    @device_manufacturer.setter
    def device_manufacturer(self, device_manufacturer):
        """Sets the device_manufacturer of this DeviceSignals.

        The name of the device's manufacturer.

        :param device_manufacturer: The device_manufacturer of this DeviceSignals.
        :type device_manufacturer: str
        """

        self._device_manufacturer = device_manufacturer

    @property
    def device_model(self):
        """Gets the device_model of this DeviceSignals.

        The name of the device's model.

        :return: The device_model of this DeviceSignals.
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this DeviceSignals.

        The name of the device's model.

        :param device_model: The device_model of this DeviceSignals.
        :type device_model: str
        """

        self._device_model = device_model

    @property
    def disk_encryption(self):
        """Gets the disk_encryption of this DeviceSignals.

        The encryption state of the disk. On ChromeOS, the main disk is always ENCRYPTED.

        :return: The disk_encryption of this DeviceSignals.
        :rtype: str
        """
        return self._disk_encryption

    @disk_encryption.setter
    def disk_encryption(self, disk_encryption):
        """Sets the disk_encryption of this DeviceSignals.

        The encryption state of the disk. On ChromeOS, the main disk is always ENCRYPTED.

        :param disk_encryption: The disk_encryption of this DeviceSignals.
        :type disk_encryption: str
        """
        allowed_values = ["DISK_ENCRYPTION_UNSPECIFIED", "DISK_ENCRYPTION_UNKNOWN", "DISK_ENCRYPTION_DISABLED", "DISK_ENCRYPTION_ENCRYPTED"]  # noqa: E501
        if disk_encryption not in allowed_values:
            raise ValueError(
                "Invalid value for `disk_encryption` ({0}), must be one of {1}"
                .format(disk_encryption, allowed_values)
            )

        self._disk_encryption = disk_encryption

    @property
    def display_name(self):
        """Gets the display_name of this DeviceSignals.

        The display name of the device, as defined by the user.

        :return: The display_name of this DeviceSignals.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceSignals.

        The display name of the device, as defined by the user.

        :param display_name: The display_name of this DeviceSignals.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def hostname(self):
        """Gets the hostname of this DeviceSignals.

        Hostname of the device.

        :return: The hostname of this DeviceSignals.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DeviceSignals.

        Hostname of the device.

        :param hostname: The hostname of this DeviceSignals.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def imei(self):
        """Gets the imei of this DeviceSignals.

        International Mobile Equipment Identity (IMEI) of the device. Available on ChromeOS only.

        :return: The imei of this DeviceSignals.
        :rtype: List[str]
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this DeviceSignals.

        International Mobile Equipment Identity (IMEI) of the device. Available on ChromeOS only.

        :param imei: The imei of this DeviceSignals.
        :type imei: List[str]
        """

        self._imei = imei

    @property
    def mac_addresses(self):
        """Gets the mac_addresses of this DeviceSignals.

        MAC addresses of the device.

        :return: The mac_addresses of this DeviceSignals.
        :rtype: List[str]
        """
        return self._mac_addresses

    @mac_addresses.setter
    def mac_addresses(self, mac_addresses):
        """Sets the mac_addresses of this DeviceSignals.

        MAC addresses of the device.

        :param mac_addresses: The mac_addresses of this DeviceSignals.
        :type mac_addresses: List[str]
        """

        self._mac_addresses = mac_addresses

    @property
    def meid(self):
        """Gets the meid of this DeviceSignals.

        Mobile Equipment Identifier (MEID) of the device. Available on ChromeOS only.

        :return: The meid of this DeviceSignals.
        :rtype: List[str]
        """
        return self._meid

    @meid.setter
    def meid(self, meid):
        """Sets the meid of this DeviceSignals.

        Mobile Equipment Identifier (MEID) of the device. Available on ChromeOS only.

        :param meid: The meid of this DeviceSignals.
        :type meid: List[str]
        """

        self._meid = meid

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceSignals.

        The type of the Operating System currently running on the device.

        :return: The operating_system of this DeviceSignals.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceSignals.

        The type of the Operating System currently running on the device.

        :param operating_system: The operating_system of this DeviceSignals.
        :type operating_system: str
        """
        allowed_values = ["OPERATING_SYSTEM_UNSPECIFIED", "CHROME_OS", "CHROMIUM_OS", "WINDOWS", "MAC_OS_X", "LINUX"]  # noqa: E501
        if operating_system not in allowed_values:
            raise ValueError(
                "Invalid value for `operating_system` ({0}), must be one of {1}"
                .format(operating_system, allowed_values)
            )

        self._operating_system = operating_system

    @property
    def os_firewall(self):
        """Gets the os_firewall of this DeviceSignals.

        The state of the OS level firewall. On ChromeOS, the value will always be ENABLED on regular devices and UNKNOWN on devices in developer mode.

        :return: The os_firewall of this DeviceSignals.
        :rtype: str
        """
        return self._os_firewall

    @os_firewall.setter
    def os_firewall(self, os_firewall):
        """Sets the os_firewall of this DeviceSignals.

        The state of the OS level firewall. On ChromeOS, the value will always be ENABLED on regular devices and UNKNOWN on devices in developer mode.

        :param os_firewall: The os_firewall of this DeviceSignals.
        :type os_firewall: str
        """
        allowed_values = ["OS_FIREWALL_UNSPECIFIED", "OS_FIREWALL_UNKNOWN", "OS_FIREWALL_DISABLED", "OS_FIREWALL_ENABLED"]  # noqa: E501
        if os_firewall not in allowed_values:
            raise ValueError(
                "Invalid value for `os_firewall` ({0}), must be one of {1}"
                .format(os_firewall, allowed_values)
            )

        self._os_firewall = os_firewall

    @property
    def os_version(self):
        """Gets the os_version of this DeviceSignals.

        The current version of the Operating System. On Windows and linux, the value will also include the security patch information.

        :return: The os_version of this DeviceSignals.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this DeviceSignals.

        The current version of the Operating System. On Windows and linux, the value will also include the security patch information.

        :param os_version: The os_version of this DeviceSignals.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def password_protection_warning_trigger(self):
        """Gets the password_protection_warning_trigger of this DeviceSignals.

        Whether the Password Protection Warning feature is enabled or not. Password protection alerts users when they reuse their protected password on potentially suspicious sites. This setting is controlled by an enterprise policy: https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger. Note that the policy unset does not have the same effects as having the policy explicitly set to `PASSWORD_PROTECTION_OFF`.

        :return: The password_protection_warning_trigger of this DeviceSignals.
        :rtype: str
        """
        return self._password_protection_warning_trigger

    @password_protection_warning_trigger.setter
    def password_protection_warning_trigger(self, password_protection_warning_trigger):
        """Sets the password_protection_warning_trigger of this DeviceSignals.

        Whether the Password Protection Warning feature is enabled or not. Password protection alerts users when they reuse their protected password on potentially suspicious sites. This setting is controlled by an enterprise policy: https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger. Note that the policy unset does not have the same effects as having the policy explicitly set to `PASSWORD_PROTECTION_OFF`.

        :param password_protection_warning_trigger: The password_protection_warning_trigger of this DeviceSignals.
        :type password_protection_warning_trigger: str
        """
        allowed_values = ["PASSWORD_PROTECTION_WARNING_TRIGGER_UNSPECIFIED", "POLICY_UNSET", "PASSWORD_PROTECTION_OFF", "PASSWORD_REUSE", "PHISHING_REUSE"]  # noqa: E501
        if password_protection_warning_trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `password_protection_warning_trigger` ({0}), must be one of {1}"
                .format(password_protection_warning_trigger, allowed_values)
            )

        self._password_protection_warning_trigger = password_protection_warning_trigger

    @property
    def profile_affiliation_ids(self):
        """Gets the profile_affiliation_ids of this DeviceSignals.

        Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the Chrome Profile’s user or ChromeOS user.

        :return: The profile_affiliation_ids of this DeviceSignals.
        :rtype: List[str]
        """
        return self._profile_affiliation_ids

    @profile_affiliation_ids.setter
    def profile_affiliation_ids(self, profile_affiliation_ids):
        """Sets the profile_affiliation_ids of this DeviceSignals.

        Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the Chrome Profile’s user or ChromeOS user.

        :param profile_affiliation_ids: The profile_affiliation_ids of this DeviceSignals.
        :type profile_affiliation_ids: List[str]
        """

        self._profile_affiliation_ids = profile_affiliation_ids

    @property
    def realtime_url_check_mode(self):
        """Gets the realtime_url_check_mode of this DeviceSignals.

        Whether Enterprise-grade (i.e. custom) unsafe URL scanning is enabled or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode

        :return: The realtime_url_check_mode of this DeviceSignals.
        :rtype: str
        """
        return self._realtime_url_check_mode

    @realtime_url_check_mode.setter
    def realtime_url_check_mode(self, realtime_url_check_mode):
        """Sets the realtime_url_check_mode of this DeviceSignals.

        Whether Enterprise-grade (i.e. custom) unsafe URL scanning is enabled or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode

        :param realtime_url_check_mode: The realtime_url_check_mode of this DeviceSignals.
        :type realtime_url_check_mode: str
        """
        allowed_values = ["REALTIME_URL_CHECK_MODE_UNSPECIFIED", "REALTIME_URL_CHECK_MODE_DISABLED", "REALTIME_URL_CHECK_MODE_ENABLED_MAIN_FRAME"]  # noqa: E501
        if realtime_url_check_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `realtime_url_check_mode` ({0}), must be one of {1}"
                .format(realtime_url_check_mode, allowed_values)
            )

        self._realtime_url_check_mode = realtime_url_check_mode

    @property
    def safe_browsing_protection_level(self):
        """Gets the safe_browsing_protection_level of this DeviceSignals.

        Safe Browsing Protection Level. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel.

        :return: The safe_browsing_protection_level of this DeviceSignals.
        :rtype: str
        """
        return self._safe_browsing_protection_level

    @safe_browsing_protection_level.setter
    def safe_browsing_protection_level(self, safe_browsing_protection_level):
        """Sets the safe_browsing_protection_level of this DeviceSignals.

        Safe Browsing Protection Level. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel.

        :param safe_browsing_protection_level: The safe_browsing_protection_level of this DeviceSignals.
        :type safe_browsing_protection_level: str
        """
        allowed_values = ["SAFE_BROWSING_PROTECTION_LEVEL_UNSPECIFIED", "INACTIVE", "STANDARD", "ENHANCED"]  # noqa: E501
        if safe_browsing_protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `safe_browsing_protection_level` ({0}), must be one of {1}"
                .format(safe_browsing_protection_level, allowed_values)
            )

        self._safe_browsing_protection_level = safe_browsing_protection_level

    @property
    def screen_lock_secured(self):
        """Gets the screen_lock_secured of this DeviceSignals.

        The state of the Screen Lock password protection. On ChromeOS, this value will always be ENABLED as there is not way to disable requiring a password or pin when unlocking the device.

        :return: The screen_lock_secured of this DeviceSignals.
        :rtype: str
        """
        return self._screen_lock_secured

    @screen_lock_secured.setter
    def screen_lock_secured(self, screen_lock_secured):
        """Sets the screen_lock_secured of this DeviceSignals.

        The state of the Screen Lock password protection. On ChromeOS, this value will always be ENABLED as there is not way to disable requiring a password or pin when unlocking the device.

        :param screen_lock_secured: The screen_lock_secured of this DeviceSignals.
        :type screen_lock_secured: str
        """
        allowed_values = ["SCREEN_LOCK_SECURED_UNSPECIFIED", "SCREEN_LOCK_SECURED_UNKNOWN", "SCREEN_LOCK_SECURED_DISABLED", "SCREEN_LOCK_SECURED_ENABLED"]  # noqa: E501
        if screen_lock_secured not in allowed_values:
            raise ValueError(
                "Invalid value for `screen_lock_secured` ({0}), must be one of {1}"
                .format(screen_lock_secured, allowed_values)
            )

        self._screen_lock_secured = screen_lock_secured

    @property
    def secure_boot_mode(self):
        """Gets the secure_boot_mode of this DeviceSignals.

        Whether the device's startup software has its Secure Boot feature enabled. Available on Windows only.

        :return: The secure_boot_mode of this DeviceSignals.
        :rtype: str
        """
        return self._secure_boot_mode

    @secure_boot_mode.setter
    def secure_boot_mode(self, secure_boot_mode):
        """Sets the secure_boot_mode of this DeviceSignals.

        Whether the device's startup software has its Secure Boot feature enabled. Available on Windows only.

        :param secure_boot_mode: The secure_boot_mode of this DeviceSignals.
        :type secure_boot_mode: str
        """
        allowed_values = ["SECURE_BOOT_MODE_UNSPECIFIED", "SECURE_BOOT_MODE_UNKNOWN", "SECURE_BOOT_MODE_DISABLED", "SECURE_BOOT_MODE_ENABLED"]  # noqa: E501
        if secure_boot_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `secure_boot_mode` ({0}), must be one of {1}"
                .format(secure_boot_mode, allowed_values)
            )

        self._secure_boot_mode = secure_boot_mode

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceSignals.

        The serial number of the device. On Windows, this represents the BIOS's serial number. Not available on most Linux distributions.

        :return: The serial_number of this DeviceSignals.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceSignals.

        The serial number of the device. On Windows, this represents the BIOS's serial number. Not available on most Linux distributions.

        :param serial_number: The serial_number of this DeviceSignals.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def site_isolation_enabled(self):
        """Gets the site_isolation_enabled of this DeviceSignals.

        Whether the Site Isolation (a.k.a Site Per Process) setting is enabled. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SitePerProcess

        :return: The site_isolation_enabled of this DeviceSignals.
        :rtype: bool
        """
        return self._site_isolation_enabled

    @site_isolation_enabled.setter
    def site_isolation_enabled(self, site_isolation_enabled):
        """Sets the site_isolation_enabled of this DeviceSignals.

        Whether the Site Isolation (a.k.a Site Per Process) setting is enabled. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SitePerProcess

        :param site_isolation_enabled: The site_isolation_enabled of this DeviceSignals.
        :type site_isolation_enabled: bool
        """

        self._site_isolation_enabled = site_isolation_enabled

    @property
    def system_dns_servers(self):
        """Gets the system_dns_servers of this DeviceSignals.

        List of the addesses of all OS level DNS servers configured in the device's network settings.

        :return: The system_dns_servers of this DeviceSignals.
        :rtype: List[str]
        """
        return self._system_dns_servers

    @system_dns_servers.setter
    def system_dns_servers(self, system_dns_servers):
        """Sets the system_dns_servers of this DeviceSignals.

        List of the addesses of all OS level DNS servers configured in the device's network settings.

        :param system_dns_servers: The system_dns_servers of this DeviceSignals.
        :type system_dns_servers: List[str]
        """

        self._system_dns_servers = system_dns_servers

    @property
    def third_party_blocking_enabled(self):
        """Gets the third_party_blocking_enabled of this DeviceSignals.

        Whether Chrome is blocking third-party software injection or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/?policy=ThirdPartyBlockingEnabled. Available on Windows only.

        :return: The third_party_blocking_enabled of this DeviceSignals.
        :rtype: bool
        """
        return self._third_party_blocking_enabled

    @third_party_blocking_enabled.setter
    def third_party_blocking_enabled(self, third_party_blocking_enabled):
        """Sets the third_party_blocking_enabled of this DeviceSignals.

        Whether Chrome is blocking third-party software injection or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/?policy=ThirdPartyBlockingEnabled. Available on Windows only.

        :param third_party_blocking_enabled: The third_party_blocking_enabled of this DeviceSignals.
        :type third_party_blocking_enabled: bool
        """

        self._third_party_blocking_enabled = third_party_blocking_enabled

    @property
    def trigger(self):
        """Gets the trigger of this DeviceSignals.

        The trigger which generated this set of signals.

        :return: The trigger of this DeviceSignals.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this DeviceSignals.

        The trigger which generated this set of signals.

        :param trigger: The trigger of this DeviceSignals.
        :type trigger: str
        """
        allowed_values = ["TRIGGER_UNSPECIFIED", "TRIGGER_BROWSER_NAVIGATION", "TRIGGER_LOGIN_SCREEN"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def windows_machine_domain(self):
        """Gets the windows_machine_domain of this DeviceSignals.

        Windows domain that the current machine has joined. Available on Windows only.

        :return: The windows_machine_domain of this DeviceSignals.
        :rtype: str
        """
        return self._windows_machine_domain

    @windows_machine_domain.setter
    def windows_machine_domain(self, windows_machine_domain):
        """Sets the windows_machine_domain of this DeviceSignals.

        Windows domain that the current machine has joined. Available on Windows only.

        :param windows_machine_domain: The windows_machine_domain of this DeviceSignals.
        :type windows_machine_domain: str
        """

        self._windows_machine_domain = windows_machine_domain

    @property
    def windows_user_domain(self):
        """Gets the windows_user_domain of this DeviceSignals.

        Windows domain for the current OS user. Available on Windows only.

        :return: The windows_user_domain of this DeviceSignals.
        :rtype: str
        """
        return self._windows_user_domain

    @windows_user_domain.setter
    def windows_user_domain(self, windows_user_domain):
        """Sets the windows_user_domain of this DeviceSignals.

        Windows domain for the current OS user. Available on Windows only.

        :param windows_user_domain: The windows_user_domain of this DeviceSignals.
        :type windows_user_domain: str
        """

        self._windows_user_domain = windows_user_domain
