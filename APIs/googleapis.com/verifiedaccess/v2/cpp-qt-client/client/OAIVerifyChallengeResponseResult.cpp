/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyChallengeResponseResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyChallengeResponseResult::OAIVerifyChallengeResponseResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyChallengeResponseResult::OAIVerifyChallengeResponseResult() {
    this->initializeModel();
}

OAIVerifyChallengeResponseResult::~OAIVerifyChallengeResponseResult() {}

void OAIVerifyChallengeResponseResult::initializeModel() {

    m_attested_device_id_isSet = false;
    m_attested_device_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_device_enrollment_id_isSet = false;
    m_device_enrollment_id_isValid = false;

    m_device_permanent_id_isSet = false;
    m_device_permanent_id_isValid = false;

    m_device_signal_isSet = false;
    m_device_signal_isValid = false;

    m_device_signals_isSet = false;
    m_device_signals_isValid = false;

    m_key_trust_level_isSet = false;
    m_key_trust_level_isValid = false;

    m_profile_customer_id_isSet = false;
    m_profile_customer_id_isValid = false;

    m_profile_key_trust_level_isSet = false;
    m_profile_key_trust_level_isValid = false;

    m_signed_public_key_and_challenge_isSet = false;
    m_signed_public_key_and_challenge_isValid = false;

    m_virtual_device_id_isSet = false;
    m_virtual_device_id_isValid = false;

    m_virtual_profile_id_isSet = false;
    m_virtual_profile_id_isValid = false;
}

void OAIVerifyChallengeResponseResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyChallengeResponseResult::fromJsonObject(QJsonObject json) {

    m_attested_device_id_isValid = ::OpenAPI::fromJsonValue(m_attested_device_id, json[QString("attestedDeviceId")]);
    m_attested_device_id_isSet = !json[QString("attestedDeviceId")].isNull() && m_attested_device_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_device_enrollment_id_isValid = ::OpenAPI::fromJsonValue(m_device_enrollment_id, json[QString("deviceEnrollmentId")]);
    m_device_enrollment_id_isSet = !json[QString("deviceEnrollmentId")].isNull() && m_device_enrollment_id_isValid;

    m_device_permanent_id_isValid = ::OpenAPI::fromJsonValue(m_device_permanent_id, json[QString("devicePermanentId")]);
    m_device_permanent_id_isSet = !json[QString("devicePermanentId")].isNull() && m_device_permanent_id_isValid;

    m_device_signal_isValid = ::OpenAPI::fromJsonValue(m_device_signal, json[QString("deviceSignal")]);
    m_device_signal_isSet = !json[QString("deviceSignal")].isNull() && m_device_signal_isValid;

    m_device_signals_isValid = ::OpenAPI::fromJsonValue(m_device_signals, json[QString("deviceSignals")]);
    m_device_signals_isSet = !json[QString("deviceSignals")].isNull() && m_device_signals_isValid;

    m_key_trust_level_isValid = ::OpenAPI::fromJsonValue(m_key_trust_level, json[QString("keyTrustLevel")]);
    m_key_trust_level_isSet = !json[QString("keyTrustLevel")].isNull() && m_key_trust_level_isValid;

    m_profile_customer_id_isValid = ::OpenAPI::fromJsonValue(m_profile_customer_id, json[QString("profileCustomerId")]);
    m_profile_customer_id_isSet = !json[QString("profileCustomerId")].isNull() && m_profile_customer_id_isValid;

    m_profile_key_trust_level_isValid = ::OpenAPI::fromJsonValue(m_profile_key_trust_level, json[QString("profileKeyTrustLevel")]);
    m_profile_key_trust_level_isSet = !json[QString("profileKeyTrustLevel")].isNull() && m_profile_key_trust_level_isValid;

    m_signed_public_key_and_challenge_isValid = ::OpenAPI::fromJsonValue(m_signed_public_key_and_challenge, json[QString("signedPublicKeyAndChallenge")]);
    m_signed_public_key_and_challenge_isSet = !json[QString("signedPublicKeyAndChallenge")].isNull() && m_signed_public_key_and_challenge_isValid;

    m_virtual_device_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_device_id, json[QString("virtualDeviceId")]);
    m_virtual_device_id_isSet = !json[QString("virtualDeviceId")].isNull() && m_virtual_device_id_isValid;

    m_virtual_profile_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_profile_id, json[QString("virtualProfileId")]);
    m_virtual_profile_id_isSet = !json[QString("virtualProfileId")].isNull() && m_virtual_profile_id_isValid;
}

QString OAIVerifyChallengeResponseResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyChallengeResponseResult::asJsonObject() const {
    QJsonObject obj;
    if (m_attested_device_id_isSet) {
        obj.insert(QString("attestedDeviceId"), ::OpenAPI::toJsonValue(m_attested_device_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_device_enrollment_id_isSet) {
        obj.insert(QString("deviceEnrollmentId"), ::OpenAPI::toJsonValue(m_device_enrollment_id));
    }
    if (m_device_permanent_id_isSet) {
        obj.insert(QString("devicePermanentId"), ::OpenAPI::toJsonValue(m_device_permanent_id));
    }
    if (m_device_signal_isSet) {
        obj.insert(QString("deviceSignal"), ::OpenAPI::toJsonValue(m_device_signal));
    }
    if (m_device_signals.isSet()) {
        obj.insert(QString("deviceSignals"), ::OpenAPI::toJsonValue(m_device_signals));
    }
    if (m_key_trust_level_isSet) {
        obj.insert(QString("keyTrustLevel"), ::OpenAPI::toJsonValue(m_key_trust_level));
    }
    if (m_profile_customer_id_isSet) {
        obj.insert(QString("profileCustomerId"), ::OpenAPI::toJsonValue(m_profile_customer_id));
    }
    if (m_profile_key_trust_level_isSet) {
        obj.insert(QString("profileKeyTrustLevel"), ::OpenAPI::toJsonValue(m_profile_key_trust_level));
    }
    if (m_signed_public_key_and_challenge_isSet) {
        obj.insert(QString("signedPublicKeyAndChallenge"), ::OpenAPI::toJsonValue(m_signed_public_key_and_challenge));
    }
    if (m_virtual_device_id_isSet) {
        obj.insert(QString("virtualDeviceId"), ::OpenAPI::toJsonValue(m_virtual_device_id));
    }
    if (m_virtual_profile_id_isSet) {
        obj.insert(QString("virtualProfileId"), ::OpenAPI::toJsonValue(m_virtual_profile_id));
    }
    return obj;
}

QString OAIVerifyChallengeResponseResult::getAttestedDeviceId() const {
    return m_attested_device_id;
}
void OAIVerifyChallengeResponseResult::setAttestedDeviceId(const QString &attested_device_id) {
    m_attested_device_id = attested_device_id;
    m_attested_device_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_attested_device_id_Set() const{
    return m_attested_device_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_attested_device_id_Valid() const{
    return m_attested_device_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getCustomerId() const {
    return m_customer_id;
}
void OAIVerifyChallengeResponseResult::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getDeviceEnrollmentId() const {
    return m_device_enrollment_id;
}
void OAIVerifyChallengeResponseResult::setDeviceEnrollmentId(const QString &device_enrollment_id) {
    m_device_enrollment_id = device_enrollment_id;
    m_device_enrollment_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_device_enrollment_id_Set() const{
    return m_device_enrollment_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_device_enrollment_id_Valid() const{
    return m_device_enrollment_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getDevicePermanentId() const {
    return m_device_permanent_id;
}
void OAIVerifyChallengeResponseResult::setDevicePermanentId(const QString &device_permanent_id) {
    m_device_permanent_id = device_permanent_id;
    m_device_permanent_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_device_permanent_id_Set() const{
    return m_device_permanent_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_device_permanent_id_Valid() const{
    return m_device_permanent_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getDeviceSignal() const {
    return m_device_signal;
}
void OAIVerifyChallengeResponseResult::setDeviceSignal(const QString &device_signal) {
    m_device_signal = device_signal;
    m_device_signal_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_device_signal_Set() const{
    return m_device_signal_isSet;
}

bool OAIVerifyChallengeResponseResult::is_device_signal_Valid() const{
    return m_device_signal_isValid;
}

OAIDeviceSignals OAIVerifyChallengeResponseResult::getDeviceSignals() const {
    return m_device_signals;
}
void OAIVerifyChallengeResponseResult::setDeviceSignals(const OAIDeviceSignals &device_signals) {
    m_device_signals = device_signals;
    m_device_signals_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_device_signals_Set() const{
    return m_device_signals_isSet;
}

bool OAIVerifyChallengeResponseResult::is_device_signals_Valid() const{
    return m_device_signals_isValid;
}

QString OAIVerifyChallengeResponseResult::getKeyTrustLevel() const {
    return m_key_trust_level;
}
void OAIVerifyChallengeResponseResult::setKeyTrustLevel(const QString &key_trust_level) {
    m_key_trust_level = key_trust_level;
    m_key_trust_level_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_key_trust_level_Set() const{
    return m_key_trust_level_isSet;
}

bool OAIVerifyChallengeResponseResult::is_key_trust_level_Valid() const{
    return m_key_trust_level_isValid;
}

QString OAIVerifyChallengeResponseResult::getProfileCustomerId() const {
    return m_profile_customer_id;
}
void OAIVerifyChallengeResponseResult::setProfileCustomerId(const QString &profile_customer_id) {
    m_profile_customer_id = profile_customer_id;
    m_profile_customer_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_profile_customer_id_Set() const{
    return m_profile_customer_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_profile_customer_id_Valid() const{
    return m_profile_customer_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getProfileKeyTrustLevel() const {
    return m_profile_key_trust_level;
}
void OAIVerifyChallengeResponseResult::setProfileKeyTrustLevel(const QString &profile_key_trust_level) {
    m_profile_key_trust_level = profile_key_trust_level;
    m_profile_key_trust_level_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_profile_key_trust_level_Set() const{
    return m_profile_key_trust_level_isSet;
}

bool OAIVerifyChallengeResponseResult::is_profile_key_trust_level_Valid() const{
    return m_profile_key_trust_level_isValid;
}

QString OAIVerifyChallengeResponseResult::getSignedPublicKeyAndChallenge() const {
    return m_signed_public_key_and_challenge;
}
void OAIVerifyChallengeResponseResult::setSignedPublicKeyAndChallenge(const QString &signed_public_key_and_challenge) {
    m_signed_public_key_and_challenge = signed_public_key_and_challenge;
    m_signed_public_key_and_challenge_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_signed_public_key_and_challenge_Set() const{
    return m_signed_public_key_and_challenge_isSet;
}

bool OAIVerifyChallengeResponseResult::is_signed_public_key_and_challenge_Valid() const{
    return m_signed_public_key_and_challenge_isValid;
}

QString OAIVerifyChallengeResponseResult::getVirtualDeviceId() const {
    return m_virtual_device_id;
}
void OAIVerifyChallengeResponseResult::setVirtualDeviceId(const QString &virtual_device_id) {
    m_virtual_device_id = virtual_device_id;
    m_virtual_device_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_virtual_device_id_Set() const{
    return m_virtual_device_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_virtual_device_id_Valid() const{
    return m_virtual_device_id_isValid;
}

QString OAIVerifyChallengeResponseResult::getVirtualProfileId() const {
    return m_virtual_profile_id;
}
void OAIVerifyChallengeResponseResult::setVirtualProfileId(const QString &virtual_profile_id) {
    m_virtual_profile_id = virtual_profile_id;
    m_virtual_profile_id_isSet = true;
}

bool OAIVerifyChallengeResponseResult::is_virtual_profile_id_Set() const{
    return m_virtual_profile_id_isSet;
}

bool OAIVerifyChallengeResponseResult::is_virtual_profile_id_Valid() const{
    return m_virtual_profile_id_isValid;
}

bool OAIVerifyChallengeResponseResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attested_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_enrollment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_permanent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_signal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_signals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_key_trust_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_public_key_and_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyChallengeResponseResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
