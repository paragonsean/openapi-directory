/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSignals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSignals::OAIDeviceSignals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSignals::OAIDeviceSignals() {
    this->initializeModel();
}

OAIDeviceSignals::~OAIDeviceSignals() {}

void OAIDeviceSignals::initializeModel() {

    m_allow_screen_lock_isSet = false;
    m_allow_screen_lock_isValid = false;

    m_browser_version_isSet = false;
    m_browser_version_isValid = false;

    m_built_in_dns_client_enabled_isSet = false;
    m_built_in_dns_client_enabled_isValid = false;

    m_chrome_remote_desktop_app_blocked_isSet = false;
    m_chrome_remote_desktop_app_blocked_isValid = false;

    m_crowd_strike_agent_isSet = false;
    m_crowd_strike_agent_isValid = false;

    m_device_affiliation_ids_isSet = false;
    m_device_affiliation_ids_isValid = false;

    m_device_enrollment_domain_isSet = false;
    m_device_enrollment_domain_isValid = false;

    m_device_manufacturer_isSet = false;
    m_device_manufacturer_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_disk_encryption_isSet = false;
    m_disk_encryption_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_mac_addresses_isSet = false;
    m_mac_addresses_isValid = false;

    m_meid_isSet = false;
    m_meid_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_os_firewall_isSet = false;
    m_os_firewall_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_password_protection_warning_trigger_isSet = false;
    m_password_protection_warning_trigger_isValid = false;

    m_profile_affiliation_ids_isSet = false;
    m_profile_affiliation_ids_isValid = false;

    m_realtime_url_check_mode_isSet = false;
    m_realtime_url_check_mode_isValid = false;

    m_safe_browsing_protection_level_isSet = false;
    m_safe_browsing_protection_level_isValid = false;

    m_screen_lock_secured_isSet = false;
    m_screen_lock_secured_isValid = false;

    m_secure_boot_mode_isSet = false;
    m_secure_boot_mode_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_site_isolation_enabled_isSet = false;
    m_site_isolation_enabled_isValid = false;

    m_system_dns_servers_isSet = false;
    m_system_dns_servers_isValid = false;

    m_third_party_blocking_enabled_isSet = false;
    m_third_party_blocking_enabled_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_windows_machine_domain_isSet = false;
    m_windows_machine_domain_isValid = false;

    m_windows_user_domain_isSet = false;
    m_windows_user_domain_isValid = false;
}

void OAIDeviceSignals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSignals::fromJsonObject(QJsonObject json) {

    m_allow_screen_lock_isValid = ::OpenAPI::fromJsonValue(m_allow_screen_lock, json[QString("allowScreenLock")]);
    m_allow_screen_lock_isSet = !json[QString("allowScreenLock")].isNull() && m_allow_screen_lock_isValid;

    m_browser_version_isValid = ::OpenAPI::fromJsonValue(m_browser_version, json[QString("browserVersion")]);
    m_browser_version_isSet = !json[QString("browserVersion")].isNull() && m_browser_version_isValid;

    m_built_in_dns_client_enabled_isValid = ::OpenAPI::fromJsonValue(m_built_in_dns_client_enabled, json[QString("builtInDnsClientEnabled")]);
    m_built_in_dns_client_enabled_isSet = !json[QString("builtInDnsClientEnabled")].isNull() && m_built_in_dns_client_enabled_isValid;

    m_chrome_remote_desktop_app_blocked_isValid = ::OpenAPI::fromJsonValue(m_chrome_remote_desktop_app_blocked, json[QString("chromeRemoteDesktopAppBlocked")]);
    m_chrome_remote_desktop_app_blocked_isSet = !json[QString("chromeRemoteDesktopAppBlocked")].isNull() && m_chrome_remote_desktop_app_blocked_isValid;

    m_crowd_strike_agent_isValid = ::OpenAPI::fromJsonValue(m_crowd_strike_agent, json[QString("crowdStrikeAgent")]);
    m_crowd_strike_agent_isSet = !json[QString("crowdStrikeAgent")].isNull() && m_crowd_strike_agent_isValid;

    m_device_affiliation_ids_isValid = ::OpenAPI::fromJsonValue(m_device_affiliation_ids, json[QString("deviceAffiliationIds")]);
    m_device_affiliation_ids_isSet = !json[QString("deviceAffiliationIds")].isNull() && m_device_affiliation_ids_isValid;

    m_device_enrollment_domain_isValid = ::OpenAPI::fromJsonValue(m_device_enrollment_domain, json[QString("deviceEnrollmentDomain")]);
    m_device_enrollment_domain_isSet = !json[QString("deviceEnrollmentDomain")].isNull() && m_device_enrollment_domain_isValid;

    m_device_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_device_manufacturer, json[QString("deviceManufacturer")]);
    m_device_manufacturer_isSet = !json[QString("deviceManufacturer")].isNull() && m_device_manufacturer_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_disk_encryption_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption, json[QString("diskEncryption")]);
    m_disk_encryption_isSet = !json[QString("diskEncryption")].isNull() && m_disk_encryption_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;

    m_mac_addresses_isValid = ::OpenAPI::fromJsonValue(m_mac_addresses, json[QString("macAddresses")]);
    m_mac_addresses_isSet = !json[QString("macAddresses")].isNull() && m_mac_addresses_isValid;

    m_meid_isValid = ::OpenAPI::fromJsonValue(m_meid, json[QString("meid")]);
    m_meid_isSet = !json[QString("meid")].isNull() && m_meid_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_os_firewall_isValid = ::OpenAPI::fromJsonValue(m_os_firewall, json[QString("osFirewall")]);
    m_os_firewall_isSet = !json[QString("osFirewall")].isNull() && m_os_firewall_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_password_protection_warning_trigger_isValid = ::OpenAPI::fromJsonValue(m_password_protection_warning_trigger, json[QString("passwordProtectionWarningTrigger")]);
    m_password_protection_warning_trigger_isSet = !json[QString("passwordProtectionWarningTrigger")].isNull() && m_password_protection_warning_trigger_isValid;

    m_profile_affiliation_ids_isValid = ::OpenAPI::fromJsonValue(m_profile_affiliation_ids, json[QString("profileAffiliationIds")]);
    m_profile_affiliation_ids_isSet = !json[QString("profileAffiliationIds")].isNull() && m_profile_affiliation_ids_isValid;

    m_realtime_url_check_mode_isValid = ::OpenAPI::fromJsonValue(m_realtime_url_check_mode, json[QString("realtimeUrlCheckMode")]);
    m_realtime_url_check_mode_isSet = !json[QString("realtimeUrlCheckMode")].isNull() && m_realtime_url_check_mode_isValid;

    m_safe_browsing_protection_level_isValid = ::OpenAPI::fromJsonValue(m_safe_browsing_protection_level, json[QString("safeBrowsingProtectionLevel")]);
    m_safe_browsing_protection_level_isSet = !json[QString("safeBrowsingProtectionLevel")].isNull() && m_safe_browsing_protection_level_isValid;

    m_screen_lock_secured_isValid = ::OpenAPI::fromJsonValue(m_screen_lock_secured, json[QString("screenLockSecured")]);
    m_screen_lock_secured_isSet = !json[QString("screenLockSecured")].isNull() && m_screen_lock_secured_isValid;

    m_secure_boot_mode_isValid = ::OpenAPI::fromJsonValue(m_secure_boot_mode, json[QString("secureBootMode")]);
    m_secure_boot_mode_isSet = !json[QString("secureBootMode")].isNull() && m_secure_boot_mode_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_site_isolation_enabled_isValid = ::OpenAPI::fromJsonValue(m_site_isolation_enabled, json[QString("siteIsolationEnabled")]);
    m_site_isolation_enabled_isSet = !json[QString("siteIsolationEnabled")].isNull() && m_site_isolation_enabled_isValid;

    m_system_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_system_dns_servers, json[QString("systemDnsServers")]);
    m_system_dns_servers_isSet = !json[QString("systemDnsServers")].isNull() && m_system_dns_servers_isValid;

    m_third_party_blocking_enabled_isValid = ::OpenAPI::fromJsonValue(m_third_party_blocking_enabled, json[QString("thirdPartyBlockingEnabled")]);
    m_third_party_blocking_enabled_isSet = !json[QString("thirdPartyBlockingEnabled")].isNull() && m_third_party_blocking_enabled_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_windows_machine_domain_isValid = ::OpenAPI::fromJsonValue(m_windows_machine_domain, json[QString("windowsMachineDomain")]);
    m_windows_machine_domain_isSet = !json[QString("windowsMachineDomain")].isNull() && m_windows_machine_domain_isValid;

    m_windows_user_domain_isValid = ::OpenAPI::fromJsonValue(m_windows_user_domain, json[QString("windowsUserDomain")]);
    m_windows_user_domain_isSet = !json[QString("windowsUserDomain")].isNull() && m_windows_user_domain_isValid;
}

QString OAIDeviceSignals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSignals::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_screen_lock_isSet) {
        obj.insert(QString("allowScreenLock"), ::OpenAPI::toJsonValue(m_allow_screen_lock));
    }
    if (m_browser_version_isSet) {
        obj.insert(QString("browserVersion"), ::OpenAPI::toJsonValue(m_browser_version));
    }
    if (m_built_in_dns_client_enabled_isSet) {
        obj.insert(QString("builtInDnsClientEnabled"), ::OpenAPI::toJsonValue(m_built_in_dns_client_enabled));
    }
    if (m_chrome_remote_desktop_app_blocked_isSet) {
        obj.insert(QString("chromeRemoteDesktopAppBlocked"), ::OpenAPI::toJsonValue(m_chrome_remote_desktop_app_blocked));
    }
    if (m_crowd_strike_agent.isSet()) {
        obj.insert(QString("crowdStrikeAgent"), ::OpenAPI::toJsonValue(m_crowd_strike_agent));
    }
    if (m_device_affiliation_ids.size() > 0) {
        obj.insert(QString("deviceAffiliationIds"), ::OpenAPI::toJsonValue(m_device_affiliation_ids));
    }
    if (m_device_enrollment_domain_isSet) {
        obj.insert(QString("deviceEnrollmentDomain"), ::OpenAPI::toJsonValue(m_device_enrollment_domain));
    }
    if (m_device_manufacturer_isSet) {
        obj.insert(QString("deviceManufacturer"), ::OpenAPI::toJsonValue(m_device_manufacturer));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_disk_encryption_isSet) {
        obj.insert(QString("diskEncryption"), ::OpenAPI::toJsonValue(m_disk_encryption));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_imei.size() > 0) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_mac_addresses.size() > 0) {
        obj.insert(QString("macAddresses"), ::OpenAPI::toJsonValue(m_mac_addresses));
    }
    if (m_meid.size() > 0) {
        obj.insert(QString("meid"), ::OpenAPI::toJsonValue(m_meid));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_os_firewall_isSet) {
        obj.insert(QString("osFirewall"), ::OpenAPI::toJsonValue(m_os_firewall));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_password_protection_warning_trigger_isSet) {
        obj.insert(QString("passwordProtectionWarningTrigger"), ::OpenAPI::toJsonValue(m_password_protection_warning_trigger));
    }
    if (m_profile_affiliation_ids.size() > 0) {
        obj.insert(QString("profileAffiliationIds"), ::OpenAPI::toJsonValue(m_profile_affiliation_ids));
    }
    if (m_realtime_url_check_mode_isSet) {
        obj.insert(QString("realtimeUrlCheckMode"), ::OpenAPI::toJsonValue(m_realtime_url_check_mode));
    }
    if (m_safe_browsing_protection_level_isSet) {
        obj.insert(QString("safeBrowsingProtectionLevel"), ::OpenAPI::toJsonValue(m_safe_browsing_protection_level));
    }
    if (m_screen_lock_secured_isSet) {
        obj.insert(QString("screenLockSecured"), ::OpenAPI::toJsonValue(m_screen_lock_secured));
    }
    if (m_secure_boot_mode_isSet) {
        obj.insert(QString("secureBootMode"), ::OpenAPI::toJsonValue(m_secure_boot_mode));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_site_isolation_enabled_isSet) {
        obj.insert(QString("siteIsolationEnabled"), ::OpenAPI::toJsonValue(m_site_isolation_enabled));
    }
    if (m_system_dns_servers.size() > 0) {
        obj.insert(QString("systemDnsServers"), ::OpenAPI::toJsonValue(m_system_dns_servers));
    }
    if (m_third_party_blocking_enabled_isSet) {
        obj.insert(QString("thirdPartyBlockingEnabled"), ::OpenAPI::toJsonValue(m_third_party_blocking_enabled));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_windows_machine_domain_isSet) {
        obj.insert(QString("windowsMachineDomain"), ::OpenAPI::toJsonValue(m_windows_machine_domain));
    }
    if (m_windows_user_domain_isSet) {
        obj.insert(QString("windowsUserDomain"), ::OpenAPI::toJsonValue(m_windows_user_domain));
    }
    return obj;
}

bool OAIDeviceSignals::isAllowScreenLock() const {
    return m_allow_screen_lock;
}
void OAIDeviceSignals::setAllowScreenLock(const bool &allow_screen_lock) {
    m_allow_screen_lock = allow_screen_lock;
    m_allow_screen_lock_isSet = true;
}

bool OAIDeviceSignals::is_allow_screen_lock_Set() const{
    return m_allow_screen_lock_isSet;
}

bool OAIDeviceSignals::is_allow_screen_lock_Valid() const{
    return m_allow_screen_lock_isValid;
}

QString OAIDeviceSignals::getBrowserVersion() const {
    return m_browser_version;
}
void OAIDeviceSignals::setBrowserVersion(const QString &browser_version) {
    m_browser_version = browser_version;
    m_browser_version_isSet = true;
}

bool OAIDeviceSignals::is_browser_version_Set() const{
    return m_browser_version_isSet;
}

bool OAIDeviceSignals::is_browser_version_Valid() const{
    return m_browser_version_isValid;
}

bool OAIDeviceSignals::isBuiltInDnsClientEnabled() const {
    return m_built_in_dns_client_enabled;
}
void OAIDeviceSignals::setBuiltInDnsClientEnabled(const bool &built_in_dns_client_enabled) {
    m_built_in_dns_client_enabled = built_in_dns_client_enabled;
    m_built_in_dns_client_enabled_isSet = true;
}

bool OAIDeviceSignals::is_built_in_dns_client_enabled_Set() const{
    return m_built_in_dns_client_enabled_isSet;
}

bool OAIDeviceSignals::is_built_in_dns_client_enabled_Valid() const{
    return m_built_in_dns_client_enabled_isValid;
}

bool OAIDeviceSignals::isChromeRemoteDesktopAppBlocked() const {
    return m_chrome_remote_desktop_app_blocked;
}
void OAIDeviceSignals::setChromeRemoteDesktopAppBlocked(const bool &chrome_remote_desktop_app_blocked) {
    m_chrome_remote_desktop_app_blocked = chrome_remote_desktop_app_blocked;
    m_chrome_remote_desktop_app_blocked_isSet = true;
}

bool OAIDeviceSignals::is_chrome_remote_desktop_app_blocked_Set() const{
    return m_chrome_remote_desktop_app_blocked_isSet;
}

bool OAIDeviceSignals::is_chrome_remote_desktop_app_blocked_Valid() const{
    return m_chrome_remote_desktop_app_blocked_isValid;
}

OAICrowdStrikeAgent OAIDeviceSignals::getCrowdStrikeAgent() const {
    return m_crowd_strike_agent;
}
void OAIDeviceSignals::setCrowdStrikeAgent(const OAICrowdStrikeAgent &crowd_strike_agent) {
    m_crowd_strike_agent = crowd_strike_agent;
    m_crowd_strike_agent_isSet = true;
}

bool OAIDeviceSignals::is_crowd_strike_agent_Set() const{
    return m_crowd_strike_agent_isSet;
}

bool OAIDeviceSignals::is_crowd_strike_agent_Valid() const{
    return m_crowd_strike_agent_isValid;
}

QList<QString> OAIDeviceSignals::getDeviceAffiliationIds() const {
    return m_device_affiliation_ids;
}
void OAIDeviceSignals::setDeviceAffiliationIds(const QList<QString> &device_affiliation_ids) {
    m_device_affiliation_ids = device_affiliation_ids;
    m_device_affiliation_ids_isSet = true;
}

bool OAIDeviceSignals::is_device_affiliation_ids_Set() const{
    return m_device_affiliation_ids_isSet;
}

bool OAIDeviceSignals::is_device_affiliation_ids_Valid() const{
    return m_device_affiliation_ids_isValid;
}

QString OAIDeviceSignals::getDeviceEnrollmentDomain() const {
    return m_device_enrollment_domain;
}
void OAIDeviceSignals::setDeviceEnrollmentDomain(const QString &device_enrollment_domain) {
    m_device_enrollment_domain = device_enrollment_domain;
    m_device_enrollment_domain_isSet = true;
}

bool OAIDeviceSignals::is_device_enrollment_domain_Set() const{
    return m_device_enrollment_domain_isSet;
}

bool OAIDeviceSignals::is_device_enrollment_domain_Valid() const{
    return m_device_enrollment_domain_isValid;
}

QString OAIDeviceSignals::getDeviceManufacturer() const {
    return m_device_manufacturer;
}
void OAIDeviceSignals::setDeviceManufacturer(const QString &device_manufacturer) {
    m_device_manufacturer = device_manufacturer;
    m_device_manufacturer_isSet = true;
}

bool OAIDeviceSignals::is_device_manufacturer_Set() const{
    return m_device_manufacturer_isSet;
}

bool OAIDeviceSignals::is_device_manufacturer_Valid() const{
    return m_device_manufacturer_isValid;
}

QString OAIDeviceSignals::getDeviceModel() const {
    return m_device_model;
}
void OAIDeviceSignals::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAIDeviceSignals::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAIDeviceSignals::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAIDeviceSignals::getDiskEncryption() const {
    return m_disk_encryption;
}
void OAIDeviceSignals::setDiskEncryption(const QString &disk_encryption) {
    m_disk_encryption = disk_encryption;
    m_disk_encryption_isSet = true;
}

bool OAIDeviceSignals::is_disk_encryption_Set() const{
    return m_disk_encryption_isSet;
}

bool OAIDeviceSignals::is_disk_encryption_Valid() const{
    return m_disk_encryption_isValid;
}

QString OAIDeviceSignals::getDisplayName() const {
    return m_display_name;
}
void OAIDeviceSignals::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDeviceSignals::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDeviceSignals::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDeviceSignals::getHostname() const {
    return m_hostname;
}
void OAIDeviceSignals::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIDeviceSignals::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIDeviceSignals::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QList<QString> OAIDeviceSignals::getImei() const {
    return m_imei;
}
void OAIDeviceSignals::setImei(const QList<QString> &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAIDeviceSignals::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIDeviceSignals::is_imei_Valid() const{
    return m_imei_isValid;
}

QList<QString> OAIDeviceSignals::getMacAddresses() const {
    return m_mac_addresses;
}
void OAIDeviceSignals::setMacAddresses(const QList<QString> &mac_addresses) {
    m_mac_addresses = mac_addresses;
    m_mac_addresses_isSet = true;
}

bool OAIDeviceSignals::is_mac_addresses_Set() const{
    return m_mac_addresses_isSet;
}

bool OAIDeviceSignals::is_mac_addresses_Valid() const{
    return m_mac_addresses_isValid;
}

QList<QString> OAIDeviceSignals::getMeid() const {
    return m_meid;
}
void OAIDeviceSignals::setMeid(const QList<QString> &meid) {
    m_meid = meid;
    m_meid_isSet = true;
}

bool OAIDeviceSignals::is_meid_Set() const{
    return m_meid_isSet;
}

bool OAIDeviceSignals::is_meid_Valid() const{
    return m_meid_isValid;
}

QString OAIDeviceSignals::getOperatingSystem() const {
    return m_operating_system;
}
void OAIDeviceSignals::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIDeviceSignals::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIDeviceSignals::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAIDeviceSignals::getOsFirewall() const {
    return m_os_firewall;
}
void OAIDeviceSignals::setOsFirewall(const QString &os_firewall) {
    m_os_firewall = os_firewall;
    m_os_firewall_isSet = true;
}

bool OAIDeviceSignals::is_os_firewall_Set() const{
    return m_os_firewall_isSet;
}

bool OAIDeviceSignals::is_os_firewall_Valid() const{
    return m_os_firewall_isValid;
}

QString OAIDeviceSignals::getOsVersion() const {
    return m_os_version;
}
void OAIDeviceSignals::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIDeviceSignals::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIDeviceSignals::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIDeviceSignals::getPasswordProtectionWarningTrigger() const {
    return m_password_protection_warning_trigger;
}
void OAIDeviceSignals::setPasswordProtectionWarningTrigger(const QString &password_protection_warning_trigger) {
    m_password_protection_warning_trigger = password_protection_warning_trigger;
    m_password_protection_warning_trigger_isSet = true;
}

bool OAIDeviceSignals::is_password_protection_warning_trigger_Set() const{
    return m_password_protection_warning_trigger_isSet;
}

bool OAIDeviceSignals::is_password_protection_warning_trigger_Valid() const{
    return m_password_protection_warning_trigger_isValid;
}

QList<QString> OAIDeviceSignals::getProfileAffiliationIds() const {
    return m_profile_affiliation_ids;
}
void OAIDeviceSignals::setProfileAffiliationIds(const QList<QString> &profile_affiliation_ids) {
    m_profile_affiliation_ids = profile_affiliation_ids;
    m_profile_affiliation_ids_isSet = true;
}

bool OAIDeviceSignals::is_profile_affiliation_ids_Set() const{
    return m_profile_affiliation_ids_isSet;
}

bool OAIDeviceSignals::is_profile_affiliation_ids_Valid() const{
    return m_profile_affiliation_ids_isValid;
}

QString OAIDeviceSignals::getRealtimeUrlCheckMode() const {
    return m_realtime_url_check_mode;
}
void OAIDeviceSignals::setRealtimeUrlCheckMode(const QString &realtime_url_check_mode) {
    m_realtime_url_check_mode = realtime_url_check_mode;
    m_realtime_url_check_mode_isSet = true;
}

bool OAIDeviceSignals::is_realtime_url_check_mode_Set() const{
    return m_realtime_url_check_mode_isSet;
}

bool OAIDeviceSignals::is_realtime_url_check_mode_Valid() const{
    return m_realtime_url_check_mode_isValid;
}

QString OAIDeviceSignals::getSafeBrowsingProtectionLevel() const {
    return m_safe_browsing_protection_level;
}
void OAIDeviceSignals::setSafeBrowsingProtectionLevel(const QString &safe_browsing_protection_level) {
    m_safe_browsing_protection_level = safe_browsing_protection_level;
    m_safe_browsing_protection_level_isSet = true;
}

bool OAIDeviceSignals::is_safe_browsing_protection_level_Set() const{
    return m_safe_browsing_protection_level_isSet;
}

bool OAIDeviceSignals::is_safe_browsing_protection_level_Valid() const{
    return m_safe_browsing_protection_level_isValid;
}

QString OAIDeviceSignals::getScreenLockSecured() const {
    return m_screen_lock_secured;
}
void OAIDeviceSignals::setScreenLockSecured(const QString &screen_lock_secured) {
    m_screen_lock_secured = screen_lock_secured;
    m_screen_lock_secured_isSet = true;
}

bool OAIDeviceSignals::is_screen_lock_secured_Set() const{
    return m_screen_lock_secured_isSet;
}

bool OAIDeviceSignals::is_screen_lock_secured_Valid() const{
    return m_screen_lock_secured_isValid;
}

QString OAIDeviceSignals::getSecureBootMode() const {
    return m_secure_boot_mode;
}
void OAIDeviceSignals::setSecureBootMode(const QString &secure_boot_mode) {
    m_secure_boot_mode = secure_boot_mode;
    m_secure_boot_mode_isSet = true;
}

bool OAIDeviceSignals::is_secure_boot_mode_Set() const{
    return m_secure_boot_mode_isSet;
}

bool OAIDeviceSignals::is_secure_boot_mode_Valid() const{
    return m_secure_boot_mode_isValid;
}

QString OAIDeviceSignals::getSerialNumber() const {
    return m_serial_number;
}
void OAIDeviceSignals::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDeviceSignals::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDeviceSignals::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIDeviceSignals::isSiteIsolationEnabled() const {
    return m_site_isolation_enabled;
}
void OAIDeviceSignals::setSiteIsolationEnabled(const bool &site_isolation_enabled) {
    m_site_isolation_enabled = site_isolation_enabled;
    m_site_isolation_enabled_isSet = true;
}

bool OAIDeviceSignals::is_site_isolation_enabled_Set() const{
    return m_site_isolation_enabled_isSet;
}

bool OAIDeviceSignals::is_site_isolation_enabled_Valid() const{
    return m_site_isolation_enabled_isValid;
}

QList<QString> OAIDeviceSignals::getSystemDnsServers() const {
    return m_system_dns_servers;
}
void OAIDeviceSignals::setSystemDnsServers(const QList<QString> &system_dns_servers) {
    m_system_dns_servers = system_dns_servers;
    m_system_dns_servers_isSet = true;
}

bool OAIDeviceSignals::is_system_dns_servers_Set() const{
    return m_system_dns_servers_isSet;
}

bool OAIDeviceSignals::is_system_dns_servers_Valid() const{
    return m_system_dns_servers_isValid;
}

bool OAIDeviceSignals::isThirdPartyBlockingEnabled() const {
    return m_third_party_blocking_enabled;
}
void OAIDeviceSignals::setThirdPartyBlockingEnabled(const bool &third_party_blocking_enabled) {
    m_third_party_blocking_enabled = third_party_blocking_enabled;
    m_third_party_blocking_enabled_isSet = true;
}

bool OAIDeviceSignals::is_third_party_blocking_enabled_Set() const{
    return m_third_party_blocking_enabled_isSet;
}

bool OAIDeviceSignals::is_third_party_blocking_enabled_Valid() const{
    return m_third_party_blocking_enabled_isValid;
}

QString OAIDeviceSignals::getTrigger() const {
    return m_trigger;
}
void OAIDeviceSignals::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIDeviceSignals::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIDeviceSignals::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString OAIDeviceSignals::getWindowsMachineDomain() const {
    return m_windows_machine_domain;
}
void OAIDeviceSignals::setWindowsMachineDomain(const QString &windows_machine_domain) {
    m_windows_machine_domain = windows_machine_domain;
    m_windows_machine_domain_isSet = true;
}

bool OAIDeviceSignals::is_windows_machine_domain_Set() const{
    return m_windows_machine_domain_isSet;
}

bool OAIDeviceSignals::is_windows_machine_domain_Valid() const{
    return m_windows_machine_domain_isValid;
}

QString OAIDeviceSignals::getWindowsUserDomain() const {
    return m_windows_user_domain;
}
void OAIDeviceSignals::setWindowsUserDomain(const QString &windows_user_domain) {
    m_windows_user_domain = windows_user_domain;
    m_windows_user_domain_isSet = true;
}

bool OAIDeviceSignals::is_windows_user_domain_Set() const{
    return m_windows_user_domain_isSet;
}

bool OAIDeviceSignals::is_windows_user_domain_Valid() const{
    return m_windows_user_domain_isValid;
}

bool OAIDeviceSignals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_screen_lock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_built_in_dns_client_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chrome_remote_desktop_app_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crowd_strike_agent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_affiliation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_enrollment_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imei.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_firewall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_protection_warning_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_affiliation_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_url_check_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_browsing_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_lock_secured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_boot_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isolation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_blocking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_machine_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_user_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSignals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
