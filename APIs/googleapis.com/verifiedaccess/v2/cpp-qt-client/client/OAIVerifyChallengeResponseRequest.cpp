/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyChallengeResponseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyChallengeResponseRequest::OAIVerifyChallengeResponseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyChallengeResponseRequest::OAIVerifyChallengeResponseRequest() {
    this->initializeModel();
}

OAIVerifyChallengeResponseRequest::~OAIVerifyChallengeResponseRequest() {}

void OAIVerifyChallengeResponseRequest::initializeModel() {

    m_challenge_response_isSet = false;
    m_challenge_response_isValid = false;

    m_expected_identity_isSet = false;
    m_expected_identity_isValid = false;
}

void OAIVerifyChallengeResponseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyChallengeResponseRequest::fromJsonObject(QJsonObject json) {

    m_challenge_response_isValid = ::OpenAPI::fromJsonValue(m_challenge_response, json[QString("challengeResponse")]);
    m_challenge_response_isSet = !json[QString("challengeResponse")].isNull() && m_challenge_response_isValid;

    m_expected_identity_isValid = ::OpenAPI::fromJsonValue(m_expected_identity, json[QString("expectedIdentity")]);
    m_expected_identity_isSet = !json[QString("expectedIdentity")].isNull() && m_expected_identity_isValid;
}

QString OAIVerifyChallengeResponseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyChallengeResponseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_challenge_response_isSet) {
        obj.insert(QString("challengeResponse"), ::OpenAPI::toJsonValue(m_challenge_response));
    }
    if (m_expected_identity_isSet) {
        obj.insert(QString("expectedIdentity"), ::OpenAPI::toJsonValue(m_expected_identity));
    }
    return obj;
}

QByteArray OAIVerifyChallengeResponseRequest::getChallengeResponse() const {
    return m_challenge_response;
}
void OAIVerifyChallengeResponseRequest::setChallengeResponse(const QByteArray &challenge_response) {
    m_challenge_response = challenge_response;
    m_challenge_response_isSet = true;
}

bool OAIVerifyChallengeResponseRequest::is_challenge_response_Set() const{
    return m_challenge_response_isSet;
}

bool OAIVerifyChallengeResponseRequest::is_challenge_response_Valid() const{
    return m_challenge_response_isValid;
}

QString OAIVerifyChallengeResponseRequest::getExpectedIdentity() const {
    return m_expected_identity;
}
void OAIVerifyChallengeResponseRequest::setExpectedIdentity(const QString &expected_identity) {
    m_expected_identity = expected_identity;
    m_expected_identity_isSet = true;
}

bool OAIVerifyChallengeResponseRequest::is_expected_identity_Set() const{
    return m_expected_identity_isSet;
}

bool OAIVerifyChallengeResponseRequest::is_expected_identity_Valid() const{
    return m_expected_identity_isValid;
}

bool OAIVerifyChallengeResponseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_challenge_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyChallengeResponseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
