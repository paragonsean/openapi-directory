/*
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeviceSignals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result message for VerifiedAccess.VerifyChallengeResponse.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:00.193721-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyChallengeResponseResult {
  public static final String SERIALIZED_NAME_ATTESTED_DEVICE_ID = "attestedDeviceId";
  @SerializedName(SERIALIZED_NAME_ATTESTED_DEVICE_ID)
  private String attestedDeviceId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DEVICE_ENROLLMENT_ID = "deviceEnrollmentId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ENROLLMENT_ID)
  private String deviceEnrollmentId;

  public static final String SERIALIZED_NAME_DEVICE_PERMANENT_ID = "devicePermanentId";
  @SerializedName(SERIALIZED_NAME_DEVICE_PERMANENT_ID)
  private String devicePermanentId;

  public static final String SERIALIZED_NAME_DEVICE_SIGNAL = "deviceSignal";
  @SerializedName(SERIALIZED_NAME_DEVICE_SIGNAL)
  private String deviceSignal;

  public static final String SERIALIZED_NAME_DEVICE_SIGNALS = "deviceSignals";
  @SerializedName(SERIALIZED_NAME_DEVICE_SIGNALS)
  private DeviceSignals deviceSignals;

  /**
   * Device attested key trust level.
   */
  @JsonAdapter(KeyTrustLevelEnum.Adapter.class)
  public enum KeyTrustLevelEnum {
    KEY_TRUST_LEVEL_UNSPECIFIED("KEY_TRUST_LEVEL_UNSPECIFIED"),
    
    CHROME_OS_VERIFIED_MODE("CHROME_OS_VERIFIED_MODE"),
    
    CHROME_OS_DEVELOPER_MODE("CHROME_OS_DEVELOPER_MODE"),
    
    CHROME_BROWSER_HW_KEY("CHROME_BROWSER_HW_KEY"),
    
    CHROME_BROWSER_OS_KEY("CHROME_BROWSER_OS_KEY"),
    
    CHROME_BROWSER_NO_KEY("CHROME_BROWSER_NO_KEY");

    private String value;

    KeyTrustLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyTrustLevelEnum fromValue(String value) {
      for (KeyTrustLevelEnum b : KeyTrustLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyTrustLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyTrustLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyTrustLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyTrustLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyTrustLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_TRUST_LEVEL = "keyTrustLevel";
  @SerializedName(SERIALIZED_NAME_KEY_TRUST_LEVEL)
  private KeyTrustLevelEnum keyTrustLevel;

  public static final String SERIALIZED_NAME_PROFILE_CUSTOMER_ID = "profileCustomerId";
  @SerializedName(SERIALIZED_NAME_PROFILE_CUSTOMER_ID)
  private String profileCustomerId;

  /**
   * Profile attested key trust level.
   */
  @JsonAdapter(ProfileKeyTrustLevelEnum.Adapter.class)
  public enum ProfileKeyTrustLevelEnum {
    KEY_TRUST_LEVEL_UNSPECIFIED("KEY_TRUST_LEVEL_UNSPECIFIED"),
    
    CHROME_OS_VERIFIED_MODE("CHROME_OS_VERIFIED_MODE"),
    
    CHROME_OS_DEVELOPER_MODE("CHROME_OS_DEVELOPER_MODE"),
    
    CHROME_BROWSER_HW_KEY("CHROME_BROWSER_HW_KEY"),
    
    CHROME_BROWSER_OS_KEY("CHROME_BROWSER_OS_KEY"),
    
    CHROME_BROWSER_NO_KEY("CHROME_BROWSER_NO_KEY");

    private String value;

    ProfileKeyTrustLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfileKeyTrustLevelEnum fromValue(String value) {
      for (ProfileKeyTrustLevelEnum b : ProfileKeyTrustLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfileKeyTrustLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileKeyTrustLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileKeyTrustLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfileKeyTrustLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProfileKeyTrustLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROFILE_KEY_TRUST_LEVEL = "profileKeyTrustLevel";
  @SerializedName(SERIALIZED_NAME_PROFILE_KEY_TRUST_LEVEL)
  private ProfileKeyTrustLevelEnum profileKeyTrustLevel;

  public static final String SERIALIZED_NAME_SIGNED_PUBLIC_KEY_AND_CHALLENGE = "signedPublicKeyAndChallenge";
  @SerializedName(SERIALIZED_NAME_SIGNED_PUBLIC_KEY_AND_CHALLENGE)
  private String signedPublicKeyAndChallenge;

  public static final String SERIALIZED_NAME_VIRTUAL_DEVICE_ID = "virtualDeviceId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_DEVICE_ID)
  private String virtualDeviceId;

  public static final String SERIALIZED_NAME_VIRTUAL_PROFILE_ID = "virtualProfileId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_PROFILE_ID)
  private String virtualProfileId;

  public VerifyChallengeResponseResult() {
  }

  public VerifyChallengeResponseResult attestedDeviceId(String attestedDeviceId) {
    this.attestedDeviceId = attestedDeviceId;
    return this;
  }

  /**
   * Attested device ID (ADID).
   * @return attestedDeviceId
   */
  @javax.annotation.Nullable
  public String getAttestedDeviceId() {
    return attestedDeviceId;
  }

  public void setAttestedDeviceId(String attestedDeviceId) {
    this.attestedDeviceId = attestedDeviceId;
  }


  public VerifyChallengeResponseResult customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public VerifyChallengeResponseResult deviceEnrollmentId(String deviceEnrollmentId) {
    this.deviceEnrollmentId = deviceEnrollmentId;
    return this;
  }

  /**
   * Device enrollment id for ChromeOS devices.
   * @return deviceEnrollmentId
   */
  @javax.annotation.Nullable
  public String getDeviceEnrollmentId() {
    return deviceEnrollmentId;
  }

  public void setDeviceEnrollmentId(String deviceEnrollmentId) {
    this.deviceEnrollmentId = deviceEnrollmentId;
  }


  public VerifyChallengeResponseResult devicePermanentId(String devicePermanentId) {
    this.devicePermanentId = devicePermanentId;
    return this;
  }

  /**
   * Device permanent id is returned in this field (for the machine response only).
   * @return devicePermanentId
   */
  @javax.annotation.Nullable
  public String getDevicePermanentId() {
    return devicePermanentId;
  }

  public void setDevicePermanentId(String devicePermanentId) {
    this.devicePermanentId = devicePermanentId;
  }


  public VerifyChallengeResponseResult deviceSignal(String deviceSignal) {
    this.deviceSignal = deviceSignal;
    return this;
  }

  /**
   * Deprecated. Device signal in json string representation. Prefer using &#x60;device_signals&#x60; instead.
   * @return deviceSignal
   */
  @javax.annotation.Nullable
  public String getDeviceSignal() {
    return deviceSignal;
  }

  public void setDeviceSignal(String deviceSignal) {
    this.deviceSignal = deviceSignal;
  }


  public VerifyChallengeResponseResult deviceSignals(DeviceSignals deviceSignals) {
    this.deviceSignals = deviceSignals;
    return this;
  }

  /**
   * Get deviceSignals
   * @return deviceSignals
   */
  @javax.annotation.Nullable
  public DeviceSignals getDeviceSignals() {
    return deviceSignals;
  }

  public void setDeviceSignals(DeviceSignals deviceSignals) {
    this.deviceSignals = deviceSignals;
  }


  public VerifyChallengeResponseResult keyTrustLevel(KeyTrustLevelEnum keyTrustLevel) {
    this.keyTrustLevel = keyTrustLevel;
    return this;
  }

  /**
   * Device attested key trust level.
   * @return keyTrustLevel
   */
  @javax.annotation.Nullable
  public KeyTrustLevelEnum getKeyTrustLevel() {
    return keyTrustLevel;
  }

  public void setKeyTrustLevel(KeyTrustLevelEnum keyTrustLevel) {
    this.keyTrustLevel = keyTrustLevel;
  }


  public VerifyChallengeResponseResult profileCustomerId(String profileCustomerId) {
    this.profileCustomerId = profileCustomerId;
    return this;
  }

  /**
   * Unique customer id that this profile belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers
   * @return profileCustomerId
   */
  @javax.annotation.Nullable
  public String getProfileCustomerId() {
    return profileCustomerId;
  }

  public void setProfileCustomerId(String profileCustomerId) {
    this.profileCustomerId = profileCustomerId;
  }


  public VerifyChallengeResponseResult profileKeyTrustLevel(ProfileKeyTrustLevelEnum profileKeyTrustLevel) {
    this.profileKeyTrustLevel = profileKeyTrustLevel;
    return this;
  }

  /**
   * Profile attested key trust level.
   * @return profileKeyTrustLevel
   */
  @javax.annotation.Nullable
  public ProfileKeyTrustLevelEnum getProfileKeyTrustLevel() {
    return profileKeyTrustLevel;
  }

  public void setProfileKeyTrustLevel(ProfileKeyTrustLevelEnum profileKeyTrustLevel) {
    this.profileKeyTrustLevel = profileKeyTrustLevel;
  }


  public VerifyChallengeResponseResult signedPublicKeyAndChallenge(String signedPublicKeyAndChallenge) {
    this.signedPublicKeyAndChallenge = signedPublicKeyAndChallenge;
    return this;
  }

  /**
   * Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)
   * @return signedPublicKeyAndChallenge
   */
  @javax.annotation.Nullable
  public String getSignedPublicKeyAndChallenge() {
    return signedPublicKeyAndChallenge;
  }

  public void setSignedPublicKeyAndChallenge(String signedPublicKeyAndChallenge) {
    this.signedPublicKeyAndChallenge = signedPublicKeyAndChallenge;
  }


  public VerifyChallengeResponseResult virtualDeviceId(String virtualDeviceId) {
    this.virtualDeviceId = virtualDeviceId;
    return this;
  }

  /**
   * Virtual device id of the device. The definition of virtual device id is platform-specific.
   * @return virtualDeviceId
   */
  @javax.annotation.Nullable
  public String getVirtualDeviceId() {
    return virtualDeviceId;
  }

  public void setVirtualDeviceId(String virtualDeviceId) {
    this.virtualDeviceId = virtualDeviceId;
  }


  public VerifyChallengeResponseResult virtualProfileId(String virtualProfileId) {
    this.virtualProfileId = virtualProfileId;
    return this;
  }

  /**
   * The ID of a profile on the device.
   * @return virtualProfileId
   */
  @javax.annotation.Nullable
  public String getVirtualProfileId() {
    return virtualProfileId;
  }

  public void setVirtualProfileId(String virtualProfileId) {
    this.virtualProfileId = virtualProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyChallengeResponseResult verifyChallengeResponseResult = (VerifyChallengeResponseResult) o;
    return Objects.equals(this.attestedDeviceId, verifyChallengeResponseResult.attestedDeviceId) &&
        Objects.equals(this.customerId, verifyChallengeResponseResult.customerId) &&
        Objects.equals(this.deviceEnrollmentId, verifyChallengeResponseResult.deviceEnrollmentId) &&
        Objects.equals(this.devicePermanentId, verifyChallengeResponseResult.devicePermanentId) &&
        Objects.equals(this.deviceSignal, verifyChallengeResponseResult.deviceSignal) &&
        Objects.equals(this.deviceSignals, verifyChallengeResponseResult.deviceSignals) &&
        Objects.equals(this.keyTrustLevel, verifyChallengeResponseResult.keyTrustLevel) &&
        Objects.equals(this.profileCustomerId, verifyChallengeResponseResult.profileCustomerId) &&
        Objects.equals(this.profileKeyTrustLevel, verifyChallengeResponseResult.profileKeyTrustLevel) &&
        Objects.equals(this.signedPublicKeyAndChallenge, verifyChallengeResponseResult.signedPublicKeyAndChallenge) &&
        Objects.equals(this.virtualDeviceId, verifyChallengeResponseResult.virtualDeviceId) &&
        Objects.equals(this.virtualProfileId, verifyChallengeResponseResult.virtualProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestedDeviceId, customerId, deviceEnrollmentId, devicePermanentId, deviceSignal, deviceSignals, keyTrustLevel, profileCustomerId, profileKeyTrustLevel, signedPublicKeyAndChallenge, virtualDeviceId, virtualProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyChallengeResponseResult {\n");
    sb.append("    attestedDeviceId: ").append(toIndentedString(attestedDeviceId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deviceEnrollmentId: ").append(toIndentedString(deviceEnrollmentId)).append("\n");
    sb.append("    devicePermanentId: ").append(toIndentedString(devicePermanentId)).append("\n");
    sb.append("    deviceSignal: ").append(toIndentedString(deviceSignal)).append("\n");
    sb.append("    deviceSignals: ").append(toIndentedString(deviceSignals)).append("\n");
    sb.append("    keyTrustLevel: ").append(toIndentedString(keyTrustLevel)).append("\n");
    sb.append("    profileCustomerId: ").append(toIndentedString(profileCustomerId)).append("\n");
    sb.append("    profileKeyTrustLevel: ").append(toIndentedString(profileKeyTrustLevel)).append("\n");
    sb.append("    signedPublicKeyAndChallenge: ").append(toIndentedString(signedPublicKeyAndChallenge)).append("\n");
    sb.append("    virtualDeviceId: ").append(toIndentedString(virtualDeviceId)).append("\n");
    sb.append("    virtualProfileId: ").append(toIndentedString(virtualProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attestedDeviceId");
    openapiFields.add("customerId");
    openapiFields.add("deviceEnrollmentId");
    openapiFields.add("devicePermanentId");
    openapiFields.add("deviceSignal");
    openapiFields.add("deviceSignals");
    openapiFields.add("keyTrustLevel");
    openapiFields.add("profileCustomerId");
    openapiFields.add("profileKeyTrustLevel");
    openapiFields.add("signedPublicKeyAndChallenge");
    openapiFields.add("virtualDeviceId");
    openapiFields.add("virtualProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyChallengeResponseResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyChallengeResponseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyChallengeResponseResult is not found in the empty JSON string", VerifyChallengeResponseResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyChallengeResponseResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyChallengeResponseResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attestedDeviceId") != null && !jsonObj.get("attestedDeviceId").isJsonNull()) && !jsonObj.get("attestedDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attestedDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attestedDeviceId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("deviceEnrollmentId") != null && !jsonObj.get("deviceEnrollmentId").isJsonNull()) && !jsonObj.get("deviceEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceEnrollmentId").toString()));
      }
      if ((jsonObj.get("devicePermanentId") != null && !jsonObj.get("devicePermanentId").isJsonNull()) && !jsonObj.get("devicePermanentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devicePermanentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devicePermanentId").toString()));
      }
      if ((jsonObj.get("deviceSignal") != null && !jsonObj.get("deviceSignal").isJsonNull()) && !jsonObj.get("deviceSignal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSignal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSignal").toString()));
      }
      // validate the optional field `deviceSignals`
      if (jsonObj.get("deviceSignals") != null && !jsonObj.get("deviceSignals").isJsonNull()) {
        DeviceSignals.validateJsonElement(jsonObj.get("deviceSignals"));
      }
      if ((jsonObj.get("keyTrustLevel") != null && !jsonObj.get("keyTrustLevel").isJsonNull()) && !jsonObj.get("keyTrustLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyTrustLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyTrustLevel").toString()));
      }
      // validate the optional field `keyTrustLevel`
      if (jsonObj.get("keyTrustLevel") != null && !jsonObj.get("keyTrustLevel").isJsonNull()) {
        KeyTrustLevelEnum.validateJsonElement(jsonObj.get("keyTrustLevel"));
      }
      if ((jsonObj.get("profileCustomerId") != null && !jsonObj.get("profileCustomerId").isJsonNull()) && !jsonObj.get("profileCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileCustomerId").toString()));
      }
      if ((jsonObj.get("profileKeyTrustLevel") != null && !jsonObj.get("profileKeyTrustLevel").isJsonNull()) && !jsonObj.get("profileKeyTrustLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileKeyTrustLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileKeyTrustLevel").toString()));
      }
      // validate the optional field `profileKeyTrustLevel`
      if (jsonObj.get("profileKeyTrustLevel") != null && !jsonObj.get("profileKeyTrustLevel").isJsonNull()) {
        ProfileKeyTrustLevelEnum.validateJsonElement(jsonObj.get("profileKeyTrustLevel"));
      }
      if ((jsonObj.get("signedPublicKeyAndChallenge") != null && !jsonObj.get("signedPublicKeyAndChallenge").isJsonNull()) && !jsonObj.get("signedPublicKeyAndChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedPublicKeyAndChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedPublicKeyAndChallenge").toString()));
      }
      if ((jsonObj.get("virtualDeviceId") != null && !jsonObj.get("virtualDeviceId").isJsonNull()) && !jsonObj.get("virtualDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualDeviceId").toString()));
      }
      if ((jsonObj.get("virtualProfileId") != null && !jsonObj.get("virtualProfileId").isJsonNull()) && !jsonObj.get("virtualProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualProfileId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyChallengeResponseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyChallengeResponseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyChallengeResponseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyChallengeResponseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyChallengeResponseResult>() {
           @Override
           public void write(JsonWriter out, VerifyChallengeResponseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyChallengeResponseResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyChallengeResponseResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyChallengeResponseResult
   * @throws IOException if the JSON string is invalid with respect to VerifyChallengeResponseResult
   */
  public static VerifyChallengeResponseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyChallengeResponseResult.class);
  }

  /**
   * Convert an instance of VerifyChallengeResponseResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

