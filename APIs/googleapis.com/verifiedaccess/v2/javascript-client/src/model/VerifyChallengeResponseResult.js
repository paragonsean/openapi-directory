/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceSignals from './DeviceSignals';

/**
 * The VerifyChallengeResponseResult model module.
 * @module model/VerifyChallengeResponseResult
 * @version v2
 */
class VerifyChallengeResponseResult {
    /**
     * Constructs a new <code>VerifyChallengeResponseResult</code>.
     * Result message for VerifiedAccess.VerifyChallengeResponse.
     * @alias module:model/VerifyChallengeResponseResult
     */
    constructor() { 
        
        VerifyChallengeResponseResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerifyChallengeResponseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyChallengeResponseResult} obj Optional instance to populate.
     * @return {module:model/VerifyChallengeResponseResult} The populated <code>VerifyChallengeResponseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyChallengeResponseResult();

            if (data.hasOwnProperty('attestedDeviceId')) {
                obj['attestedDeviceId'] = ApiClient.convertToType(data['attestedDeviceId'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('deviceEnrollmentId')) {
                obj['deviceEnrollmentId'] = ApiClient.convertToType(data['deviceEnrollmentId'], 'String');
            }
            if (data.hasOwnProperty('devicePermanentId')) {
                obj['devicePermanentId'] = ApiClient.convertToType(data['devicePermanentId'], 'String');
            }
            if (data.hasOwnProperty('deviceSignal')) {
                obj['deviceSignal'] = ApiClient.convertToType(data['deviceSignal'], 'String');
            }
            if (data.hasOwnProperty('deviceSignals')) {
                obj['deviceSignals'] = DeviceSignals.constructFromObject(data['deviceSignals']);
            }
            if (data.hasOwnProperty('keyTrustLevel')) {
                obj['keyTrustLevel'] = ApiClient.convertToType(data['keyTrustLevel'], 'String');
            }
            if (data.hasOwnProperty('profileCustomerId')) {
                obj['profileCustomerId'] = ApiClient.convertToType(data['profileCustomerId'], 'String');
            }
            if (data.hasOwnProperty('profileKeyTrustLevel')) {
                obj['profileKeyTrustLevel'] = ApiClient.convertToType(data['profileKeyTrustLevel'], 'String');
            }
            if (data.hasOwnProperty('signedPublicKeyAndChallenge')) {
                obj['signedPublicKeyAndChallenge'] = ApiClient.convertToType(data['signedPublicKeyAndChallenge'], 'String');
            }
            if (data.hasOwnProperty('virtualDeviceId')) {
                obj['virtualDeviceId'] = ApiClient.convertToType(data['virtualDeviceId'], 'String');
            }
            if (data.hasOwnProperty('virtualProfileId')) {
                obj['virtualProfileId'] = ApiClient.convertToType(data['virtualProfileId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyChallengeResponseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyChallengeResponseResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attestedDeviceId'] && !(typeof data['attestedDeviceId'] === 'string' || data['attestedDeviceId'] instanceof String)) {
            throw new Error("Expected the field `attestedDeviceId` to be a primitive type in the JSON string but got " + data['attestedDeviceId']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['deviceEnrollmentId'] && !(typeof data['deviceEnrollmentId'] === 'string' || data['deviceEnrollmentId'] instanceof String)) {
            throw new Error("Expected the field `deviceEnrollmentId` to be a primitive type in the JSON string but got " + data['deviceEnrollmentId']);
        }
        // ensure the json data is a string
        if (data['devicePermanentId'] && !(typeof data['devicePermanentId'] === 'string' || data['devicePermanentId'] instanceof String)) {
            throw new Error("Expected the field `devicePermanentId` to be a primitive type in the JSON string but got " + data['devicePermanentId']);
        }
        // ensure the json data is a string
        if (data['deviceSignal'] && !(typeof data['deviceSignal'] === 'string' || data['deviceSignal'] instanceof String)) {
            throw new Error("Expected the field `deviceSignal` to be a primitive type in the JSON string but got " + data['deviceSignal']);
        }
        // validate the optional field `deviceSignals`
        if (data['deviceSignals']) { // data not null
          DeviceSignals.validateJSON(data['deviceSignals']);
        }
        // ensure the json data is a string
        if (data['keyTrustLevel'] && !(typeof data['keyTrustLevel'] === 'string' || data['keyTrustLevel'] instanceof String)) {
            throw new Error("Expected the field `keyTrustLevel` to be a primitive type in the JSON string but got " + data['keyTrustLevel']);
        }
        // ensure the json data is a string
        if (data['profileCustomerId'] && !(typeof data['profileCustomerId'] === 'string' || data['profileCustomerId'] instanceof String)) {
            throw new Error("Expected the field `profileCustomerId` to be a primitive type in the JSON string but got " + data['profileCustomerId']);
        }
        // ensure the json data is a string
        if (data['profileKeyTrustLevel'] && !(typeof data['profileKeyTrustLevel'] === 'string' || data['profileKeyTrustLevel'] instanceof String)) {
            throw new Error("Expected the field `profileKeyTrustLevel` to be a primitive type in the JSON string but got " + data['profileKeyTrustLevel']);
        }
        // ensure the json data is a string
        if (data['signedPublicKeyAndChallenge'] && !(typeof data['signedPublicKeyAndChallenge'] === 'string' || data['signedPublicKeyAndChallenge'] instanceof String)) {
            throw new Error("Expected the field `signedPublicKeyAndChallenge` to be a primitive type in the JSON string but got " + data['signedPublicKeyAndChallenge']);
        }
        // ensure the json data is a string
        if (data['virtualDeviceId'] && !(typeof data['virtualDeviceId'] === 'string' || data['virtualDeviceId'] instanceof String)) {
            throw new Error("Expected the field `virtualDeviceId` to be a primitive type in the JSON string but got " + data['virtualDeviceId']);
        }
        // ensure the json data is a string
        if (data['virtualProfileId'] && !(typeof data['virtualProfileId'] === 'string' || data['virtualProfileId'] instanceof String)) {
            throw new Error("Expected the field `virtualProfileId` to be a primitive type in the JSON string but got " + data['virtualProfileId']);
        }

        return true;
    }


}



/**
 * Attested device ID (ADID).
 * @member {String} attestedDeviceId
 */
VerifyChallengeResponseResult.prototype['attestedDeviceId'] = undefined;

/**
 * Unique customer id that this device belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers
 * @member {String} customerId
 */
VerifyChallengeResponseResult.prototype['customerId'] = undefined;

/**
 * Device enrollment id for ChromeOS devices.
 * @member {String} deviceEnrollmentId
 */
VerifyChallengeResponseResult.prototype['deviceEnrollmentId'] = undefined;

/**
 * Device permanent id is returned in this field (for the machine response only).
 * @member {String} devicePermanentId
 */
VerifyChallengeResponseResult.prototype['devicePermanentId'] = undefined;

/**
 * Deprecated. Device signal in json string representation. Prefer using `device_signals` instead.
 * @member {String} deviceSignal
 */
VerifyChallengeResponseResult.prototype['deviceSignal'] = undefined;

/**
 * @member {module:model/DeviceSignals} deviceSignals
 */
VerifyChallengeResponseResult.prototype['deviceSignals'] = undefined;

/**
 * Device attested key trust level.
 * @member {module:model/VerifyChallengeResponseResult.KeyTrustLevelEnum} keyTrustLevel
 */
VerifyChallengeResponseResult.prototype['keyTrustLevel'] = undefined;

/**
 * Unique customer id that this profile belongs to, as defined by the Google Admin SDK at https://developers.google.com/admin-sdk/directory/v1/guides/manage-customers
 * @member {String} profileCustomerId
 */
VerifyChallengeResponseResult.prototype['profileCustomerId'] = undefined;

/**
 * Profile attested key trust level.
 * @member {module:model/VerifyChallengeResponseResult.ProfileKeyTrustLevelEnum} profileKeyTrustLevel
 */
VerifyChallengeResponseResult.prototype['profileKeyTrustLevel'] = undefined;

/**
 * Certificate Signing Request (in the SPKAC format, base64 encoded) is returned in this field. This field will be set only if device has included CSR in its challenge response. (the option to include CSR is now available for both user and machine responses)
 * @member {String} signedPublicKeyAndChallenge
 */
VerifyChallengeResponseResult.prototype['signedPublicKeyAndChallenge'] = undefined;

/**
 * Virtual device id of the device. The definition of virtual device id is platform-specific.
 * @member {String} virtualDeviceId
 */
VerifyChallengeResponseResult.prototype['virtualDeviceId'] = undefined;

/**
 * The ID of a profile on the device.
 * @member {String} virtualProfileId
 */
VerifyChallengeResponseResult.prototype['virtualProfileId'] = undefined;





/**
 * Allowed values for the <code>keyTrustLevel</code> property.
 * @enum {String}
 * @readonly
 */
VerifyChallengeResponseResult['KeyTrustLevelEnum'] = {

    /**
     * value: "KEY_TRUST_LEVEL_UNSPECIFIED"
     * @const
     */
    "KEY_TRUST_LEVEL_UNSPECIFIED": "KEY_TRUST_LEVEL_UNSPECIFIED",

    /**
     * value: "CHROME_OS_VERIFIED_MODE"
     * @const
     */
    "CHROME_OS_VERIFIED_MODE": "CHROME_OS_VERIFIED_MODE",

    /**
     * value: "CHROME_OS_DEVELOPER_MODE"
     * @const
     */
    "CHROME_OS_DEVELOPER_MODE": "CHROME_OS_DEVELOPER_MODE",

    /**
     * value: "CHROME_BROWSER_HW_KEY"
     * @const
     */
    "CHROME_BROWSER_HW_KEY": "CHROME_BROWSER_HW_KEY",

    /**
     * value: "CHROME_BROWSER_OS_KEY"
     * @const
     */
    "CHROME_BROWSER_OS_KEY": "CHROME_BROWSER_OS_KEY",

    /**
     * value: "CHROME_BROWSER_NO_KEY"
     * @const
     */
    "CHROME_BROWSER_NO_KEY": "CHROME_BROWSER_NO_KEY"
};


/**
 * Allowed values for the <code>profileKeyTrustLevel</code> property.
 * @enum {String}
 * @readonly
 */
VerifyChallengeResponseResult['ProfileKeyTrustLevelEnum'] = {

    /**
     * value: "KEY_TRUST_LEVEL_UNSPECIFIED"
     * @const
     */
    "KEY_TRUST_LEVEL_UNSPECIFIED": "KEY_TRUST_LEVEL_UNSPECIFIED",

    /**
     * value: "CHROME_OS_VERIFIED_MODE"
     * @const
     */
    "CHROME_OS_VERIFIED_MODE": "CHROME_OS_VERIFIED_MODE",

    /**
     * value: "CHROME_OS_DEVELOPER_MODE"
     * @const
     */
    "CHROME_OS_DEVELOPER_MODE": "CHROME_OS_DEVELOPER_MODE",

    /**
     * value: "CHROME_BROWSER_HW_KEY"
     * @const
     */
    "CHROME_BROWSER_HW_KEY": "CHROME_BROWSER_HW_KEY",

    /**
     * value: "CHROME_BROWSER_OS_KEY"
     * @const
     */
    "CHROME_BROWSER_OS_KEY": "CHROME_BROWSER_OS_KEY",

    /**
     * value: "CHROME_BROWSER_NO_KEY"
     * @const
     */
    "CHROME_BROWSER_NO_KEY": "CHROME_BROWSER_NO_KEY"
};



export default VerifyChallengeResponseResult;

