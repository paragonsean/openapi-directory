/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChromeVerifiedAccessApi);
  }
}(this, function(expect, ChromeVerifiedAccessApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VerifyChallengeResponseResult', function() {
    it('should create an instance of VerifyChallengeResponseResult', function() {
      // uncomment below and update the code to test VerifyChallengeResponseResult
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be.a(ChromeVerifiedAccessApi.VerifyChallengeResponseResult);
    });

    it('should have the property attestedDeviceId (base name: "attestedDeviceId")', function() {
      // uncomment below and update the code to test the property attestedDeviceId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property customerId (base name: "customerId")', function() {
      // uncomment below and update the code to test the property customerId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property deviceEnrollmentId (base name: "deviceEnrollmentId")', function() {
      // uncomment below and update the code to test the property deviceEnrollmentId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property devicePermanentId (base name: "devicePermanentId")', function() {
      // uncomment below and update the code to test the property devicePermanentId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property deviceSignal (base name: "deviceSignal")', function() {
      // uncomment below and update the code to test the property deviceSignal
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property deviceSignals (base name: "deviceSignals")', function() {
      // uncomment below and update the code to test the property deviceSignals
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property keyTrustLevel (base name: "keyTrustLevel")', function() {
      // uncomment below and update the code to test the property keyTrustLevel
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property profileCustomerId (base name: "profileCustomerId")', function() {
      // uncomment below and update the code to test the property profileCustomerId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property profileKeyTrustLevel (base name: "profileKeyTrustLevel")', function() {
      // uncomment below and update the code to test the property profileKeyTrustLevel
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property signedPublicKeyAndChallenge (base name: "signedPublicKeyAndChallenge")', function() {
      // uncomment below and update the code to test the property signedPublicKeyAndChallenge
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property virtualDeviceId (base name: "virtualDeviceId")', function() {
      // uncomment below and update the code to test the property virtualDeviceId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

    it('should have the property virtualProfileId (base name: "virtualProfileId")', function() {
      // uncomment below and update the code to test the property virtualProfileId
      //var instance = new ChromeVerifiedAccessApi.VerifyChallengeResponseResult();
      //expect(instance).to.be();
    });

  });

}));
