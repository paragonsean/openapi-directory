/**
 * Chrome Verified Access API
 * API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChromeVerifiedAccessApi);
  }
}(this, function(expect, ChromeVerifiedAccessApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChromeVerifiedAccessApi.DeviceSignals();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceSignals', function() {
    it('should create an instance of DeviceSignals', function() {
      // uncomment below and update the code to test DeviceSignals
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be.a(ChromeVerifiedAccessApi.DeviceSignals);
    });

    it('should have the property allowScreenLock (base name: "allowScreenLock")', function() {
      // uncomment below and update the code to test the property allowScreenLock
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property browserVersion (base name: "browserVersion")', function() {
      // uncomment below and update the code to test the property browserVersion
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property builtInDnsClientEnabled (base name: "builtInDnsClientEnabled")', function() {
      // uncomment below and update the code to test the property builtInDnsClientEnabled
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property chromeRemoteDesktopAppBlocked (base name: "chromeRemoteDesktopAppBlocked")', function() {
      // uncomment below and update the code to test the property chromeRemoteDesktopAppBlocked
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property crowdStrikeAgent (base name: "crowdStrikeAgent")', function() {
      // uncomment below and update the code to test the property crowdStrikeAgent
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property deviceAffiliationIds (base name: "deviceAffiliationIds")', function() {
      // uncomment below and update the code to test the property deviceAffiliationIds
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property deviceEnrollmentDomain (base name: "deviceEnrollmentDomain")', function() {
      // uncomment below and update the code to test the property deviceEnrollmentDomain
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property deviceManufacturer (base name: "deviceManufacturer")', function() {
      // uncomment below and update the code to test the property deviceManufacturer
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property deviceModel (base name: "deviceModel")', function() {
      // uncomment below and update the code to test the property deviceModel
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property diskEncryption (base name: "diskEncryption")', function() {
      // uncomment below and update the code to test the property diskEncryption
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property imei (base name: "imei")', function() {
      // uncomment below and update the code to test the property imei
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property macAddresses (base name: "macAddresses")', function() {
      // uncomment below and update the code to test the property macAddresses
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property meid (base name: "meid")', function() {
      // uncomment below and update the code to test the property meid
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property operatingSystem (base name: "operatingSystem")', function() {
      // uncomment below and update the code to test the property operatingSystem
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property osFirewall (base name: "osFirewall")', function() {
      // uncomment below and update the code to test the property osFirewall
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "osVersion")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property passwordProtectionWarningTrigger (base name: "passwordProtectionWarningTrigger")', function() {
      // uncomment below and update the code to test the property passwordProtectionWarningTrigger
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property profileAffiliationIds (base name: "profileAffiliationIds")', function() {
      // uncomment below and update the code to test the property profileAffiliationIds
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property realtimeUrlCheckMode (base name: "realtimeUrlCheckMode")', function() {
      // uncomment below and update the code to test the property realtimeUrlCheckMode
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property safeBrowsingProtectionLevel (base name: "safeBrowsingProtectionLevel")', function() {
      // uncomment below and update the code to test the property safeBrowsingProtectionLevel
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property screenLockSecured (base name: "screenLockSecured")', function() {
      // uncomment below and update the code to test the property screenLockSecured
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property secureBootMode (base name: "secureBootMode")', function() {
      // uncomment below and update the code to test the property secureBootMode
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property siteIsolationEnabled (base name: "siteIsolationEnabled")', function() {
      // uncomment below and update the code to test the property siteIsolationEnabled
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property systemDnsServers (base name: "systemDnsServers")', function() {
      // uncomment below and update the code to test the property systemDnsServers
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property thirdPartyBlockingEnabled (base name: "thirdPartyBlockingEnabled")', function() {
      // uncomment below and update the code to test the property thirdPartyBlockingEnabled
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property trigger (base name: "trigger")', function() {
      // uncomment below and update the code to test the property trigger
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property windowsMachineDomain (base name: "windowsMachineDomain")', function() {
      // uncomment below and update the code to test the property windowsMachineDomain
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

    it('should have the property windowsUserDomain (base name: "windowsUserDomain")', function() {
      // uncomment below and update the code to test the property windowsUserDomain
      //var instance = new ChromeVerifiedAccessApi.DeviceSignals();
      //expect(instance).to.be();
    });

  });

}));
