/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchInstanceFilterGroupLabel from './PatchInstanceFilterGroupLabel';

/**
 * The PatchInstanceFilter model module.
 * @module model/PatchInstanceFilter
 * @version v1
 */
class PatchInstanceFilter {
    /**
     * Constructs a new <code>PatchInstanceFilter</code>.
     * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
     * @alias module:model/PatchInstanceFilter
     */
    constructor() { 
        
        PatchInstanceFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchInstanceFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchInstanceFilter} obj Optional instance to populate.
     * @return {module:model/PatchInstanceFilter} The populated <code>PatchInstanceFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchInstanceFilter();

            if (data.hasOwnProperty('all')) {
                obj['all'] = ApiClient.convertToType(data['all'], 'Boolean');
            }
            if (data.hasOwnProperty('groupLabels')) {
                obj['groupLabels'] = ApiClient.convertToType(data['groupLabels'], [PatchInstanceFilterGroupLabel]);
            }
            if (data.hasOwnProperty('instanceNamePrefixes')) {
                obj['instanceNamePrefixes'] = ApiClient.convertToType(data['instanceNamePrefixes'], ['String']);
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], ['String']);
            }
            if (data.hasOwnProperty('zones')) {
                obj['zones'] = ApiClient.convertToType(data['zones'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchInstanceFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchInstanceFilter</code>.
     */
    static validateJSON(data) {
        if (data['groupLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupLabels'])) {
                throw new Error("Expected the field `groupLabels` to be an array in the JSON data but got " + data['groupLabels']);
            }
            // validate the optional field `groupLabels` (array)
            for (const item of data['groupLabels']) {
                PatchInstanceFilterGroupLabel.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceNamePrefixes'])) {
            throw new Error("Expected the field `instanceNamePrefixes` to be an array in the JSON data but got " + data['instanceNamePrefixes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instances'])) {
            throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zones'])) {
            throw new Error("Expected the field `zones` to be an array in the JSON data but got " + data['zones']);
        }

        return true;
    }


}



/**
 * Target all VM instances in the project. If true, no other criteria is permitted.
 * @member {Boolean} all
 */
PatchInstanceFilter.prototype['all'] = undefined;

/**
 * Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
 * @member {Array.<module:model/PatchInstanceFilterGroupLabel>} groupLabels
 */
PatchInstanceFilter.prototype['groupLabels'] = undefined;

/**
 * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=\"prod-\".
 * @member {Array.<String>} instanceNamePrefixes
 */
PatchInstanceFilter.prototype['instanceNamePrefixes'] = undefined;

/**
 * Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
 * @member {Array.<String>} instances
 */
PatchInstanceFilter.prototype['instances'] = undefined;

/**
 * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
 * @member {Array.<String>} zones
 */
PatchInstanceFilter.prototype['zones'] = undefined;






export default PatchInstanceFilter;

