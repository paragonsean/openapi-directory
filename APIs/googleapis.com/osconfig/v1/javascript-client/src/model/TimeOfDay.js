/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeOfDay model module.
 * @module model/TimeOfDay
 * @version v1
 */
class TimeOfDay {
    /**
     * Constructs a new <code>TimeOfDay</code>.
     * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and &#x60;google.protobuf.Timestamp&#x60;.
     * @alias module:model/TimeOfDay
     */
    constructor() { 
        
        TimeOfDay.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeOfDay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeOfDay} obj Optional instance to populate.
     * @return {module:model/TimeOfDay} The populated <code>TimeOfDay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeOfDay();

            if (data.hasOwnProperty('hours')) {
                obj['hours'] = ApiClient.convertToType(data['hours'], 'Number');
            }
            if (data.hasOwnProperty('minutes')) {
                obj['minutes'] = ApiClient.convertToType(data['minutes'], 'Number');
            }
            if (data.hasOwnProperty('nanos')) {
                obj['nanos'] = ApiClient.convertToType(data['nanos'], 'Number');
            }
            if (data.hasOwnProperty('seconds')) {
                obj['seconds'] = ApiClient.convertToType(data['seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeOfDay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeOfDay</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.
 * @member {Number} hours
 */
TimeOfDay.prototype['hours'] = undefined;

/**
 * Minutes of hour of day. Must be from 0 to 59.
 * @member {Number} minutes
 */
TimeOfDay.prototype['minutes'] = undefined;

/**
 * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 * @member {Number} nanos
 */
TimeOfDay.prototype['nanos'] = undefined;

/**
 * Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
 * @member {Number} seconds
 */
TimeOfDay.prototype['seconds'] = undefined;






export default TimeOfDay;

