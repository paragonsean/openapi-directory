/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchConfig from './PatchConfig';
import PatchInstanceFilter from './PatchInstanceFilter';
import PatchRollout from './PatchRollout';

/**
 * The ExecutePatchJobRequest model module.
 * @module model/ExecutePatchJobRequest
 * @version v1
 */
class ExecutePatchJobRequest {
    /**
     * Constructs a new <code>ExecutePatchJobRequest</code>.
     * A request message to initiate patching across Compute Engine instances.
     * @alias module:model/ExecutePatchJobRequest
     */
    constructor() { 
        
        ExecutePatchJobRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecutePatchJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecutePatchJobRequest} obj Optional instance to populate.
     * @return {module:model/ExecutePatchJobRequest} The populated <code>ExecutePatchJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecutePatchJobRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('dryRun')) {
                obj['dryRun'] = ApiClient.convertToType(data['dryRun'], 'Boolean');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('instanceFilter')) {
                obj['instanceFilter'] = PatchInstanceFilter.constructFromObject(data['instanceFilter']);
            }
            if (data.hasOwnProperty('patchConfig')) {
                obj['patchConfig'] = PatchConfig.constructFromObject(data['patchConfig']);
            }
            if (data.hasOwnProperty('rollout')) {
                obj['rollout'] = PatchRollout.constructFromObject(data['rollout']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecutePatchJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecutePatchJobRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // validate the optional field `instanceFilter`
        if (data['instanceFilter']) { // data not null
          PatchInstanceFilter.validateJSON(data['instanceFilter']);
        }
        // validate the optional field `patchConfig`
        if (data['patchConfig']) { // data not null
          PatchConfig.validateJSON(data['patchConfig']);
        }
        // validate the optional field `rollout`
        if (data['rollout']) { // data not null
          PatchRollout.validateJSON(data['rollout']);
        }

        return true;
    }


}



/**
 * Description of the patch job. Length of the description is limited to 1024 characters.
 * @member {String} description
 */
ExecutePatchJobRequest.prototype['description'] = undefined;

/**
 * Display name for this patch job. This does not have to be unique.
 * @member {String} displayName
 */
ExecutePatchJobRequest.prototype['displayName'] = undefined;

/**
 * If this patch is a dry-run only, instances are contacted but will do nothing.
 * @member {Boolean} dryRun
 */
ExecutePatchJobRequest.prototype['dryRun'] = undefined;

/**
 * Duration of the patch job. After the duration ends, the patch job times out.
 * @member {String} duration
 */
ExecutePatchJobRequest.prototype['duration'] = undefined;

/**
 * @member {module:model/PatchInstanceFilter} instanceFilter
 */
ExecutePatchJobRequest.prototype['instanceFilter'] = undefined;

/**
 * @member {module:model/PatchConfig} patchConfig
 */
ExecutePatchJobRequest.prototype['patchConfig'] = undefined;

/**
 * @member {module:model/PatchRollout} rollout
 */
ExecutePatchJobRequest.prototype['rollout'] = undefined;






export default ExecutePatchJobRequest;

