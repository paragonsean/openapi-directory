/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance from './OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance';

/**
 * The OSPolicyAssignmentReportOSPolicyCompliance model module.
 * @module model/OSPolicyAssignmentReportOSPolicyCompliance
 * @version v1
 */
class OSPolicyAssignmentReportOSPolicyCompliance {
    /**
     * Constructs a new <code>OSPolicyAssignmentReportOSPolicyCompliance</code>.
     * Compliance data for an OS policy
     * @alias module:model/OSPolicyAssignmentReportOSPolicyCompliance
     */
    constructor() { 
        
        OSPolicyAssignmentReportOSPolicyCompliance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicyAssignmentReportOSPolicyCompliance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicyAssignmentReportOSPolicyCompliance} obj Optional instance to populate.
     * @return {module:model/OSPolicyAssignmentReportOSPolicyCompliance} The populated <code>OSPolicyAssignmentReportOSPolicyCompliance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicyAssignmentReportOSPolicyCompliance();

            if (data.hasOwnProperty('complianceState')) {
                obj['complianceState'] = ApiClient.convertToType(data['complianceState'], 'String');
            }
            if (data.hasOwnProperty('complianceStateReason')) {
                obj['complianceStateReason'] = ApiClient.convertToType(data['complianceStateReason'], 'String');
            }
            if (data.hasOwnProperty('osPolicyId')) {
                obj['osPolicyId'] = ApiClient.convertToType(data['osPolicyId'], 'String');
            }
            if (data.hasOwnProperty('osPolicyResourceCompliances')) {
                obj['osPolicyResourceCompliances'] = ApiClient.convertToType(data['osPolicyResourceCompliances'], [OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicyAssignmentReportOSPolicyCompliance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicyAssignmentReportOSPolicyCompliance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['complianceState'] && !(typeof data['complianceState'] === 'string' || data['complianceState'] instanceof String)) {
            throw new Error("Expected the field `complianceState` to be a primitive type in the JSON string but got " + data['complianceState']);
        }
        // ensure the json data is a string
        if (data['complianceStateReason'] && !(typeof data['complianceStateReason'] === 'string' || data['complianceStateReason'] instanceof String)) {
            throw new Error("Expected the field `complianceStateReason` to be a primitive type in the JSON string but got " + data['complianceStateReason']);
        }
        // ensure the json data is a string
        if (data['osPolicyId'] && !(typeof data['osPolicyId'] === 'string' || data['osPolicyId'] instanceof String)) {
            throw new Error("Expected the field `osPolicyId` to be a primitive type in the JSON string but got " + data['osPolicyId']);
        }
        if (data['osPolicyResourceCompliances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osPolicyResourceCompliances'])) {
                throw new Error("Expected the field `osPolicyResourceCompliances` to be an array in the JSON data but got " + data['osPolicyResourceCompliances']);
            }
            // validate the optional field `osPolicyResourceCompliances` (array)
            for (const item of data['osPolicyResourceCompliances']) {
                OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The compliance state of the OS policy.
 * @member {module:model/OSPolicyAssignmentReportOSPolicyCompliance.ComplianceStateEnum} complianceState
 */
OSPolicyAssignmentReportOSPolicyCompliance.prototype['complianceState'] = undefined;

/**
 * The reason for the OS policy to be in an unknown compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. If populated, the field can contain one of the following values: * `vm-not-running`: The VM was not running. * `os-policies-not-supported-by-agent`: The version of the OS Config agent running on the VM does not support running OS policies. * `no-agent-detected`: The OS Config agent is not detected for the VM. * `resource-execution-errors`: The OS Config agent encountered errors while executing one or more resources in the policy. See `os_policy_resource_compliances` for details. * `task-timeout`: The task sent to the agent to apply the policy timed out. * `unexpected-agent-state`: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * `internal-service-errors`: Internal service errors were encountered while attempting to apply the policy.
 * @member {String} complianceStateReason
 */
OSPolicyAssignmentReportOSPolicyCompliance.prototype['complianceStateReason'] = undefined;

/**
 * The OS policy id
 * @member {String} osPolicyId
 */
OSPolicyAssignmentReportOSPolicyCompliance.prototype['osPolicyId'] = undefined;

/**
 * Compliance data for each resource within the policy that is applied to the VM.
 * @member {Array.<module:model/OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance>} osPolicyResourceCompliances
 */
OSPolicyAssignmentReportOSPolicyCompliance.prototype['osPolicyResourceCompliances'] = undefined;





/**
 * Allowed values for the <code>complianceState</code> property.
 * @enum {String}
 * @readonly
 */
OSPolicyAssignmentReportOSPolicyCompliance['ComplianceStateEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "COMPLIANT"
     * @const
     */
    "COMPLIANT": "COMPLIANT",

    /**
     * value: "NON_COMPLIANT"
     * @const
     */
    "NON_COMPLIANT": "NON_COMPLIANT"
};



export default OSPolicyAssignmentReportOSPolicyCompliance;

