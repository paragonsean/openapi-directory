/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WeekDayOfMonth model module.
 * @module model/WeekDayOfMonth
 * @version v1
 */
class WeekDayOfMonth {
    /**
     * Constructs a new <code>WeekDayOfMonth</code>.
     * Represents one week day in a month. An example is \&quot;the 4th Sunday\&quot;.
     * @alias module:model/WeekDayOfMonth
     */
    constructor() { 
        
        WeekDayOfMonth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WeekDayOfMonth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WeekDayOfMonth} obj Optional instance to populate.
     * @return {module:model/WeekDayOfMonth} The populated <code>WeekDayOfMonth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WeekDayOfMonth();

            if (data.hasOwnProperty('dayOfWeek')) {
                obj['dayOfWeek'] = ApiClient.convertToType(data['dayOfWeek'], 'String');
            }
            if (data.hasOwnProperty('dayOffset')) {
                obj['dayOffset'] = ApiClient.convertToType(data['dayOffset'], 'Number');
            }
            if (data.hasOwnProperty('weekOrdinal')) {
                obj['weekOrdinal'] = ApiClient.convertToType(data['weekOrdinal'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WeekDayOfMonth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WeekDayOfMonth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dayOfWeek'] && !(typeof data['dayOfWeek'] === 'string' || data['dayOfWeek'] instanceof String)) {
            throw new Error("Expected the field `dayOfWeek` to be a primitive type in the JSON string but got " + data['dayOfWeek']);
        }

        return true;
    }


}



/**
 * Required. A day of the week.
 * @member {module:model/WeekDayOfMonth.DayOfWeekEnum} dayOfWeek
 */
WeekDayOfMonth.prototype['dayOfWeek'] = undefined;

/**
 * Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second Tuesday of the month and the `day_offset` value is set to `3`, patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, patches are deployed five days before the second Tuesday of the month. Allowed values are in range [-30, 30].
 * @member {Number} dayOffset
 */
WeekDayOfMonth.prototype['dayOffset'] = undefined;

/**
 * Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
 * @member {Number} weekOrdinal
 */
WeekDayOfMonth.prototype['weekOrdinal'] = undefined;





/**
 * Allowed values for the <code>dayOfWeek</code> property.
 * @enum {String}
 * @readonly
 */
WeekDayOfMonth['DayOfWeekEnum'] = {

    /**
     * value: "DAY_OF_WEEK_UNSPECIFIED"
     * @const
     */
    "DAY_OF_WEEK_UNSPECIFIED": "DAY_OF_WEEK_UNSPECIFIED",

    /**
     * value: "MONDAY"
     * @const
     */
    "MONDAY": "MONDAY",

    /**
     * value: "TUESDAY"
     * @const
     */
    "TUESDAY": "TUESDAY",

    /**
     * value: "WEDNESDAY"
     * @const
     */
    "WEDNESDAY": "WEDNESDAY",

    /**
     * value: "THURSDAY"
     * @const
     */
    "THURSDAY": "THURSDAY",

    /**
     * value: "FRIDAY"
     * @const
     */
    "FRIDAY": "FRIDAY",

    /**
     * value: "SATURDAY"
     * @const
     */
    "SATURDAY": "SATURDAY",

    /**
     * value: "SUNDAY"
     * @const
     */
    "SUNDAY": "SUNDAY"
};



export default WeekDayOfMonth;

