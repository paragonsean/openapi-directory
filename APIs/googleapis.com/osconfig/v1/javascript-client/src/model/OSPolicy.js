/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OSPolicyResourceGroup from './OSPolicyResourceGroup';

/**
 * The OSPolicy model module.
 * @module model/OSPolicy
 * @version v1
 */
class OSPolicy {
    /**
     * Constructs a new <code>OSPolicy</code>.
     * An OS policy defines the desired state configuration for a VM.
     * @alias module:model/OSPolicy
     */
    constructor() { 
        
        OSPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicy} obj Optional instance to populate.
     * @return {module:model/OSPolicy} The populated <code>OSPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicy();

            if (data.hasOwnProperty('allowNoResourceGroupMatch')) {
                obj['allowNoResourceGroupMatch'] = ApiClient.convertToType(data['allowNoResourceGroupMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('resourceGroups')) {
                obj['resourceGroups'] = ApiClient.convertToType(data['resourceGroups'], [OSPolicyResourceGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        if (data['resourceGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceGroups'])) {
                throw new Error("Expected the field `resourceGroups` to be an array in the JSON data but got " + data['resourceGroups']);
            }
            // validate the optional field `resourceGroups` (array)
            for (const item of data['resourceGroups']) {
                OSPolicyResourceGroup.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
 * @member {Boolean} allowNoResourceGroupMatch
 */
OSPolicy.prototype['allowNoResourceGroupMatch'] = undefined;

/**
 * Policy description. Length of the description is limited to 1024 characters.
 * @member {String} description
 */
OSPolicy.prototype['description'] = undefined;

/**
 * Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
 * @member {String} id
 */
OSPolicy.prototype['id'] = undefined;

/**
 * Required. Policy mode
 * @member {module:model/OSPolicy.ModeEnum} mode
 */
OSPolicy.prototype['mode'] = undefined;

/**
 * Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
 * @member {Array.<module:model/OSPolicyResourceGroup>} resourceGroups
 */
OSPolicy.prototype['resourceGroups'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
OSPolicy['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "VALIDATION"
     * @const
     */
    "VALIDATION": "VALIDATION",

    /**
     * value: "ENFORCEMENT"
     * @const
     */
    "ENFORCEMENT": "ENFORCEMENT"
};



export default OSPolicy;

