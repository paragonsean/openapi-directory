/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OSPolicyAssignmentInstanceFilterInventory from './OSPolicyAssignmentInstanceFilterInventory';
import OSPolicyAssignmentLabelSet from './OSPolicyAssignmentLabelSet';

/**
 * The OSPolicyAssignmentInstanceFilter model module.
 * @module model/OSPolicyAssignmentInstanceFilter
 * @version v1
 */
class OSPolicyAssignmentInstanceFilter {
    /**
     * Constructs a new <code>OSPolicyAssignmentInstanceFilter</code>.
     * Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
     * @alias module:model/OSPolicyAssignmentInstanceFilter
     */
    constructor() { 
        
        OSPolicyAssignmentInstanceFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicyAssignmentInstanceFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicyAssignmentInstanceFilter} obj Optional instance to populate.
     * @return {module:model/OSPolicyAssignmentInstanceFilter} The populated <code>OSPolicyAssignmentInstanceFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicyAssignmentInstanceFilter();

            if (data.hasOwnProperty('all')) {
                obj['all'] = ApiClient.convertToType(data['all'], 'Boolean');
            }
            if (data.hasOwnProperty('exclusionLabels')) {
                obj['exclusionLabels'] = ApiClient.convertToType(data['exclusionLabels'], [OSPolicyAssignmentLabelSet]);
            }
            if (data.hasOwnProperty('inclusionLabels')) {
                obj['inclusionLabels'] = ApiClient.convertToType(data['inclusionLabels'], [OSPolicyAssignmentLabelSet]);
            }
            if (data.hasOwnProperty('inventories')) {
                obj['inventories'] = ApiClient.convertToType(data['inventories'], [OSPolicyAssignmentInstanceFilterInventory]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicyAssignmentInstanceFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicyAssignmentInstanceFilter</code>.
     */
    static validateJSON(data) {
        if (data['exclusionLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exclusionLabels'])) {
                throw new Error("Expected the field `exclusionLabels` to be an array in the JSON data but got " + data['exclusionLabels']);
            }
            // validate the optional field `exclusionLabels` (array)
            for (const item of data['exclusionLabels']) {
                OSPolicyAssignmentLabelSet.validateJSON(item);
            };
        }
        if (data['inclusionLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inclusionLabels'])) {
                throw new Error("Expected the field `inclusionLabels` to be an array in the JSON data but got " + data['inclusionLabels']);
            }
            // validate the optional field `inclusionLabels` (array)
            for (const item of data['inclusionLabels']) {
                OSPolicyAssignmentLabelSet.validateJSON(item);
            };
        }
        if (data['inventories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inventories'])) {
                throw new Error("Expected the field `inventories` to be an array in the JSON data but got " + data['inventories']);
            }
            // validate the optional field `inventories` (array)
            for (const item of data['inventories']) {
                OSPolicyAssignmentInstanceFilterInventory.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Target all VMs in the project. If true, no other criteria is permitted.
 * @member {Boolean} all
 */
OSPolicyAssignmentInstanceFilter.prototype['all'] = undefined;

/**
 * List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
 * @member {Array.<module:model/OSPolicyAssignmentLabelSet>} exclusionLabels
 */
OSPolicyAssignmentInstanceFilter.prototype['exclusionLabels'] = undefined;

/**
 * List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
 * @member {Array.<module:model/OSPolicyAssignmentLabelSet>} inclusionLabels
 */
OSPolicyAssignmentInstanceFilter.prototype['inclusionLabels'] = undefined;

/**
 * List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
 * @member {Array.<module:model/OSPolicyAssignmentInstanceFilterInventory>} inventories
 */
OSPolicyAssignmentInstanceFilter.prototype['inventories'] = undefined;






export default OSPolicyAssignmentInstanceFilter;

