/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MonthlySchedule from './MonthlySchedule';
import TimeOfDay from './TimeOfDay';
import TimeZone from './TimeZone';
import WeeklySchedule from './WeeklySchedule';

/**
 * The RecurringSchedule model module.
 * @module model/RecurringSchedule
 * @version v1
 */
class RecurringSchedule {
    /**
     * Constructs a new <code>RecurringSchedule</code>.
     * Sets the time for recurring patch deployments.
     * @alias module:model/RecurringSchedule
     */
    constructor() { 
        
        RecurringSchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecurringSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurringSchedule} obj Optional instance to populate.
     * @return {module:model/RecurringSchedule} The populated <code>RecurringSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurringSchedule();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('lastExecuteTime')) {
                obj['lastExecuteTime'] = ApiClient.convertToType(data['lastExecuteTime'], 'String');
            }
            if (data.hasOwnProperty('monthly')) {
                obj['monthly'] = MonthlySchedule.constructFromObject(data['monthly']);
            }
            if (data.hasOwnProperty('nextExecuteTime')) {
                obj['nextExecuteTime'] = ApiClient.convertToType(data['nextExecuteTime'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('timeOfDay')) {
                obj['timeOfDay'] = TimeOfDay.constructFromObject(data['timeOfDay']);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = TimeZone.constructFromObject(data['timeZone']);
            }
            if (data.hasOwnProperty('weekly')) {
                obj['weekly'] = WeeklySchedule.constructFromObject(data['weekly']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurringSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurringSchedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['lastExecuteTime'] && !(typeof data['lastExecuteTime'] === 'string' || data['lastExecuteTime'] instanceof String)) {
            throw new Error("Expected the field `lastExecuteTime` to be a primitive type in the JSON string but got " + data['lastExecuteTime']);
        }
        // validate the optional field `monthly`
        if (data['monthly']) { // data not null
          MonthlySchedule.validateJSON(data['monthly']);
        }
        // ensure the json data is a string
        if (data['nextExecuteTime'] && !(typeof data['nextExecuteTime'] === 'string' || data['nextExecuteTime'] instanceof String)) {
            throw new Error("Expected the field `nextExecuteTime` to be a primitive type in the JSON string but got " + data['nextExecuteTime']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // validate the optional field `timeOfDay`
        if (data['timeOfDay']) { // data not null
          TimeOfDay.validateJSON(data['timeOfDay']);
        }
        // validate the optional field `timeZone`
        if (data['timeZone']) { // data not null
          TimeZone.validateJSON(data['timeZone']);
        }
        // validate the optional field `weekly`
        if (data['weekly']) { // data not null
          WeeklySchedule.validateJSON(data['weekly']);
        }

        return true;
    }


}



/**
 * Optional. The end time at which a recurring patch deployment schedule is no longer active.
 * @member {String} endTime
 */
RecurringSchedule.prototype['endTime'] = undefined;

/**
 * Required. The frequency unit of this recurring schedule.
 * @member {module:model/RecurringSchedule.FrequencyEnum} frequency
 */
RecurringSchedule.prototype['frequency'] = undefined;

/**
 * Output only. The time the last patch job ran successfully.
 * @member {String} lastExecuteTime
 */
RecurringSchedule.prototype['lastExecuteTime'] = undefined;

/**
 * @member {module:model/MonthlySchedule} monthly
 */
RecurringSchedule.prototype['monthly'] = undefined;

/**
 * Output only. The time the next patch job is scheduled to run.
 * @member {String} nextExecuteTime
 */
RecurringSchedule.prototype['nextExecuteTime'] = undefined;

/**
 * Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
 * @member {String} startTime
 */
RecurringSchedule.prototype['startTime'] = undefined;

/**
 * @member {module:model/TimeOfDay} timeOfDay
 */
RecurringSchedule.prototype['timeOfDay'] = undefined;

/**
 * @member {module:model/TimeZone} timeZone
 */
RecurringSchedule.prototype['timeZone'] = undefined;

/**
 * @member {module:model/WeeklySchedule} weekly
 */
RecurringSchedule.prototype['weekly'] = undefined;





/**
 * Allowed values for the <code>frequency</code> property.
 * @enum {String}
 * @readonly
 */
RecurringSchedule['FrequencyEnum'] = {

    /**
     * value: "FREQUENCY_UNSPECIFIED"
     * @const
     */
    "FREQUENCY_UNSPECIFIED": "FREQUENCY_UNSPECIFIED",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY"
};



export default RecurringSchedule;

