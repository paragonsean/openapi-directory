/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InventoryOsInfo model module.
 * @module model/InventoryOsInfo
 * @version v1
 */
class InventoryOsInfo {
    /**
     * Constructs a new <code>InventoryOsInfo</code>.
     * Operating system information for the VM.
     * @alias module:model/InventoryOsInfo
     */
    constructor() { 
        
        InventoryOsInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryOsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryOsInfo} obj Optional instance to populate.
     * @return {module:model/InventoryOsInfo} The populated <code>InventoryOsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryOsInfo();

            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('kernelRelease')) {
                obj['kernelRelease'] = ApiClient.convertToType(data['kernelRelease'], 'String');
            }
            if (data.hasOwnProperty('kernelVersion')) {
                obj['kernelVersion'] = ApiClient.convertToType(data['kernelVersion'], 'String');
            }
            if (data.hasOwnProperty('longName')) {
                obj['longName'] = ApiClient.convertToType(data['longName'], 'String');
            }
            if (data.hasOwnProperty('osconfigAgentVersion')) {
                obj['osconfigAgentVersion'] = ApiClient.convertToType(data['osconfigAgentVersion'], 'String');
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InventoryOsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InventoryOsInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['kernelRelease'] && !(typeof data['kernelRelease'] === 'string' || data['kernelRelease'] instanceof String)) {
            throw new Error("Expected the field `kernelRelease` to be a primitive type in the JSON string but got " + data['kernelRelease']);
        }
        // ensure the json data is a string
        if (data['kernelVersion'] && !(typeof data['kernelVersion'] === 'string' || data['kernelVersion'] instanceof String)) {
            throw new Error("Expected the field `kernelVersion` to be a primitive type in the JSON string but got " + data['kernelVersion']);
        }
        // ensure the json data is a string
        if (data['longName'] && !(typeof data['longName'] === 'string' || data['longName'] instanceof String)) {
            throw new Error("Expected the field `longName` to be a primitive type in the JSON string but got " + data['longName']);
        }
        // ensure the json data is a string
        if (data['osconfigAgentVersion'] && !(typeof data['osconfigAgentVersion'] === 'string' || data['osconfigAgentVersion'] instanceof String)) {
            throw new Error("Expected the field `osconfigAgentVersion` to be a primitive type in the JSON string but got " + data['osconfigAgentVersion']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The system architecture of the operating system.
 * @member {String} architecture
 */
InventoryOsInfo.prototype['architecture'] = undefined;

/**
 * The VM hostname.
 * @member {String} hostname
 */
InventoryOsInfo.prototype['hostname'] = undefined;

/**
 * The kernel release of the operating system.
 * @member {String} kernelRelease
 */
InventoryOsInfo.prototype['kernelRelease'] = undefined;

/**
 * The kernel version of the operating system.
 * @member {String} kernelVersion
 */
InventoryOsInfo.prototype['kernelVersion'] = undefined;

/**
 * The operating system long name. For example 'Debian GNU/Linux 9' or 'Microsoft Window Server 2019 Datacenter'.
 * @member {String} longName
 */
InventoryOsInfo.prototype['longName'] = undefined;

/**
 * The current version of the OS Config agent running on the VM.
 * @member {String} osconfigAgentVersion
 */
InventoryOsInfo.prototype['osconfigAgentVersion'] = undefined;

/**
 * The operating system short name. For example, 'windows' or 'debian'.
 * @member {String} shortName
 */
InventoryOsInfo.prototype['shortName'] = undefined;

/**
 * The version of the operating system.
 * @member {String} version
 */
InventoryOsInfo.prototype['version'] = undefined;






export default InventoryOsInfo;

