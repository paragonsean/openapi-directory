/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OSPolicy from './OSPolicy';
import OSPolicyAssignmentInstanceFilter from './OSPolicyAssignmentInstanceFilter';
import OSPolicyAssignmentRollout from './OSPolicyAssignmentRollout';

/**
 * The OSPolicyAssignment model module.
 * @module model/OSPolicyAssignment
 * @version v1
 */
class OSPolicyAssignment {
    /**
     * Constructs a new <code>OSPolicyAssignment</code>.
     * OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information about the OS policy resource definitions and examples, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
     * @alias module:model/OSPolicyAssignment
     */
    constructor() { 
        
        OSPolicyAssignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicyAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicyAssignment} obj Optional instance to populate.
     * @return {module:model/OSPolicyAssignment} The populated <code>OSPolicyAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicyAssignment();

            if (data.hasOwnProperty('baseline')) {
                obj['baseline'] = ApiClient.convertToType(data['baseline'], 'Boolean');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('instanceFilter')) {
                obj['instanceFilter'] = OSPolicyAssignmentInstanceFilter.constructFromObject(data['instanceFilter']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osPolicies')) {
                obj['osPolicies'] = ApiClient.convertToType(data['osPolicies'], [OSPolicy]);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('revisionCreateTime')) {
                obj['revisionCreateTime'] = ApiClient.convertToType(data['revisionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('rollout')) {
                obj['rollout'] = OSPolicyAssignmentRollout.constructFromObject(data['rollout']);
            }
            if (data.hasOwnProperty('rolloutState')) {
                obj['rolloutState'] = ApiClient.convertToType(data['rolloutState'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicyAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicyAssignment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `instanceFilter`
        if (data['instanceFilter']) { // data not null
          OSPolicyAssignmentInstanceFilter.validateJSON(data['instanceFilter']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['osPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osPolicies'])) {
                throw new Error("Expected the field `osPolicies` to be an array in the JSON data but got " + data['osPolicies']);
            }
            // validate the optional field `osPolicies` (array)
            for (const item of data['osPolicies']) {
                OSPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['revisionCreateTime'] && !(typeof data['revisionCreateTime'] === 'string' || data['revisionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got " + data['revisionCreateTime']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // validate the optional field `rollout`
        if (data['rollout']) { // data not null
          OSPolicyAssignmentRollout.validateJSON(data['rollout']);
        }
        // ensure the json data is a string
        if (data['rolloutState'] && !(typeof data['rolloutState'] === 'string' || data['rolloutState'] instanceof String)) {
            throw new Error("Expected the field `rolloutState` to be a primitive type in the JSON string but got " + data['rolloutState']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.
 * @member {Boolean} baseline
 */
OSPolicyAssignment.prototype['baseline'] = undefined;

/**
 * Output only. Indicates that this revision deletes the OS policy assignment.
 * @member {Boolean} deleted
 */
OSPolicyAssignment.prototype['deleted'] = undefined;

/**
 * OS policy assignment description. Length of the description is limited to 1024 characters.
 * @member {String} description
 */
OSPolicyAssignment.prototype['description'] = undefined;

/**
 * The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
 * @member {String} etag
 */
OSPolicyAssignment.prototype['etag'] = undefined;

/**
 * @member {module:model/OSPolicyAssignmentInstanceFilter} instanceFilter
 */
OSPolicyAssignment.prototype['instanceFilter'] = undefined;

/**
 * Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
 * @member {String} name
 */
OSPolicyAssignment.prototype['name'] = undefined;

/**
 * Required. List of OS policies to be applied to the VMs.
 * @member {Array.<module:model/OSPolicy>} osPolicies
 */
OSPolicyAssignment.prototype['osPolicies'] = undefined;

/**
 * Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING
 * @member {Boolean} reconciling
 */
OSPolicyAssignment.prototype['reconciling'] = undefined;

/**
 * Output only. The timestamp that the revision was created.
 * @member {String} revisionCreateTime
 */
OSPolicyAssignment.prototype['revisionCreateTime'] = undefined;

/**
 * Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
 * @member {String} revisionId
 */
OSPolicyAssignment.prototype['revisionId'] = undefined;

/**
 * @member {module:model/OSPolicyAssignmentRollout} rollout
 */
OSPolicyAssignment.prototype['rollout'] = undefined;

/**
 * Output only. OS policy assignment rollout state
 * @member {module:model/OSPolicyAssignment.RolloutStateEnum} rolloutState
 */
OSPolicyAssignment.prototype['rolloutState'] = undefined;

/**
 * Output only. Server generated unique id for the OS policy assignment resource.
 * @member {String} uid
 */
OSPolicyAssignment.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>rolloutState</code> property.
 * @enum {String}
 * @readonly
 */
OSPolicyAssignment['RolloutStateEnum'] = {

    /**
     * value: "ROLLOUT_STATE_UNSPECIFIED"
     * @const
     */
    "ROLLOUT_STATE_UNSPECIFIED": "ROLLOUT_STATE_UNSPECIFIED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "CANCELLING"
     * @const
     */
    "CANCELLING": "CANCELLING",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED"
};



export default OSPolicyAssignment;

