/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyAssignmentOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyAssignmentOperationMetadata::OAIOSPolicyAssignmentOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyAssignmentOperationMetadata::OAIOSPolicyAssignmentOperationMetadata() {
    this->initializeModel();
}

OAIOSPolicyAssignmentOperationMetadata::~OAIOSPolicyAssignmentOperationMetadata() {}

void OAIOSPolicyAssignmentOperationMetadata::initializeModel() {

    m_api_method_isSet = false;
    m_api_method_isValid = false;

    m_os_policy_assignment_isSet = false;
    m_os_policy_assignment_isValid = false;

    m_rollout_start_time_isSet = false;
    m_rollout_start_time_isValid = false;

    m_rollout_state_isSet = false;
    m_rollout_state_isValid = false;

    m_rollout_update_time_isSet = false;
    m_rollout_update_time_isValid = false;
}

void OAIOSPolicyAssignmentOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyAssignmentOperationMetadata::fromJsonObject(QJsonObject json) {

    m_api_method_isValid = ::OpenAPI::fromJsonValue(m_api_method, json[QString("apiMethod")]);
    m_api_method_isSet = !json[QString("apiMethod")].isNull() && m_api_method_isValid;

    m_os_policy_assignment_isValid = ::OpenAPI::fromJsonValue(m_os_policy_assignment, json[QString("osPolicyAssignment")]);
    m_os_policy_assignment_isSet = !json[QString("osPolicyAssignment")].isNull() && m_os_policy_assignment_isValid;

    m_rollout_start_time_isValid = ::OpenAPI::fromJsonValue(m_rollout_start_time, json[QString("rolloutStartTime")]);
    m_rollout_start_time_isSet = !json[QString("rolloutStartTime")].isNull() && m_rollout_start_time_isValid;

    m_rollout_state_isValid = ::OpenAPI::fromJsonValue(m_rollout_state, json[QString("rolloutState")]);
    m_rollout_state_isSet = !json[QString("rolloutState")].isNull() && m_rollout_state_isValid;

    m_rollout_update_time_isValid = ::OpenAPI::fromJsonValue(m_rollout_update_time, json[QString("rolloutUpdateTime")]);
    m_rollout_update_time_isSet = !json[QString("rolloutUpdateTime")].isNull() && m_rollout_update_time_isValid;
}

QString OAIOSPolicyAssignmentOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyAssignmentOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_api_method_isSet) {
        obj.insert(QString("apiMethod"), ::OpenAPI::toJsonValue(m_api_method));
    }
    if (m_os_policy_assignment_isSet) {
        obj.insert(QString("osPolicyAssignment"), ::OpenAPI::toJsonValue(m_os_policy_assignment));
    }
    if (m_rollout_start_time_isSet) {
        obj.insert(QString("rolloutStartTime"), ::OpenAPI::toJsonValue(m_rollout_start_time));
    }
    if (m_rollout_state_isSet) {
        obj.insert(QString("rolloutState"), ::OpenAPI::toJsonValue(m_rollout_state));
    }
    if (m_rollout_update_time_isSet) {
        obj.insert(QString("rolloutUpdateTime"), ::OpenAPI::toJsonValue(m_rollout_update_time));
    }
    return obj;
}

QString OAIOSPolicyAssignmentOperationMetadata::getApiMethod() const {
    return m_api_method;
}
void OAIOSPolicyAssignmentOperationMetadata::setApiMethod(const QString &api_method) {
    m_api_method = api_method;
    m_api_method_isSet = true;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_api_method_Set() const{
    return m_api_method_isSet;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_api_method_Valid() const{
    return m_api_method_isValid;
}

QString OAIOSPolicyAssignmentOperationMetadata::getOsPolicyAssignment() const {
    return m_os_policy_assignment;
}
void OAIOSPolicyAssignmentOperationMetadata::setOsPolicyAssignment(const QString &os_policy_assignment) {
    m_os_policy_assignment = os_policy_assignment;
    m_os_policy_assignment_isSet = true;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_os_policy_assignment_Set() const{
    return m_os_policy_assignment_isSet;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_os_policy_assignment_Valid() const{
    return m_os_policy_assignment_isValid;
}

QString OAIOSPolicyAssignmentOperationMetadata::getRolloutStartTime() const {
    return m_rollout_start_time;
}
void OAIOSPolicyAssignmentOperationMetadata::setRolloutStartTime(const QString &rollout_start_time) {
    m_rollout_start_time = rollout_start_time;
    m_rollout_start_time_isSet = true;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_rollout_start_time_Set() const{
    return m_rollout_start_time_isSet;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_rollout_start_time_Valid() const{
    return m_rollout_start_time_isValid;
}

QString OAIOSPolicyAssignmentOperationMetadata::getRolloutState() const {
    return m_rollout_state;
}
void OAIOSPolicyAssignmentOperationMetadata::setRolloutState(const QString &rollout_state) {
    m_rollout_state = rollout_state;
    m_rollout_state_isSet = true;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_rollout_state_Set() const{
    return m_rollout_state_isSet;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_rollout_state_Valid() const{
    return m_rollout_state_isValid;
}

QString OAIOSPolicyAssignmentOperationMetadata::getRolloutUpdateTime() const {
    return m_rollout_update_time;
}
void OAIOSPolicyAssignmentOperationMetadata::setRolloutUpdateTime(const QString &rollout_update_time) {
    m_rollout_update_time = rollout_update_time;
    m_rollout_update_time_isSet = true;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_rollout_update_time_Set() const{
    return m_rollout_update_time_isSet;
}

bool OAIOSPolicyAssignmentOperationMetadata::is_rollout_update_time_Valid() const{
    return m_rollout_update_time_isValid;
}

bool OAIOSPolicyAssignmentOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_policy_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyAssignmentOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
