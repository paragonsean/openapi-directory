/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceRepositoryResourceAptRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceRepositoryResourceAptRepository::OAIOSPolicyResourceRepositoryResourceAptRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceRepositoryResourceAptRepository::OAIOSPolicyResourceRepositoryResourceAptRepository() {
    this->initializeModel();
}

OAIOSPolicyResourceRepositoryResourceAptRepository::~OAIOSPolicyResourceRepositoryResourceAptRepository() {}

void OAIOSPolicyResourceRepositoryResourceAptRepository::initializeModel() {

    m_archive_type_isSet = false;
    m_archive_type_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_gpg_key_isSet = false;
    m_gpg_key_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIOSPolicyResourceRepositoryResourceAptRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceRepositoryResourceAptRepository::fromJsonObject(QJsonObject json) {

    m_archive_type_isValid = ::OpenAPI::fromJsonValue(m_archive_type, json[QString("archiveType")]);
    m_archive_type_isSet = !json[QString("archiveType")].isNull() && m_archive_type_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_gpg_key_isValid = ::OpenAPI::fromJsonValue(m_gpg_key, json[QString("gpgKey")]);
    m_gpg_key_isSet = !json[QString("gpgKey")].isNull() && m_gpg_key_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceAptRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceRepositoryResourceAptRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_type_isSet) {
        obj.insert(QString("archiveType"), ::OpenAPI::toJsonValue(m_archive_type));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_distribution_isSet) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_gpg_key_isSet) {
        obj.insert(QString("gpgKey"), ::OpenAPI::toJsonValue(m_gpg_key));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIOSPolicyResourceRepositoryResourceAptRepository::getArchiveType() const {
    return m_archive_type;
}
void OAIOSPolicyResourceRepositoryResourceAptRepository::setArchiveType(const QString &archive_type) {
    m_archive_type = archive_type;
    m_archive_type_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_archive_type_Set() const{
    return m_archive_type_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_archive_type_Valid() const{
    return m_archive_type_isValid;
}

QList<QString> OAIOSPolicyResourceRepositoryResourceAptRepository::getComponents() const {
    return m_components;
}
void OAIOSPolicyResourceRepositoryResourceAptRepository::setComponents(const QList<QString> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_components_Set() const{
    return m_components_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_components_Valid() const{
    return m_components_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceAptRepository::getDistribution() const {
    return m_distribution;
}
void OAIOSPolicyResourceRepositoryResourceAptRepository::setDistribution(const QString &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceAptRepository::getGpgKey() const {
    return m_gpg_key;
}
void OAIOSPolicyResourceRepositoryResourceAptRepository::setGpgKey(const QString &gpg_key) {
    m_gpg_key = gpg_key;
    m_gpg_key_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_gpg_key_Set() const{
    return m_gpg_key_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_gpg_key_Valid() const{
    return m_gpg_key_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceAptRepository::getUri() const {
    return m_uri;
}
void OAIOSPolicyResourceRepositoryResourceAptRepository::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpg_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceRepositoryResourceAptRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
