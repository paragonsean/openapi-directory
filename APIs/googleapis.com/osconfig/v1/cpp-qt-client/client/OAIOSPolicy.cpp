/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicy::OAIOSPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicy::OAIOSPolicy() {
    this->initializeModel();
}

OAIOSPolicy::~OAIOSPolicy() {}

void OAIOSPolicy::initializeModel() {

    m_allow_no_resource_group_match_isSet = false;
    m_allow_no_resource_group_match_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_resource_groups_isSet = false;
    m_resource_groups_isValid = false;
}

void OAIOSPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicy::fromJsonObject(QJsonObject json) {

    m_allow_no_resource_group_match_isValid = ::OpenAPI::fromJsonValue(m_allow_no_resource_group_match, json[QString("allowNoResourceGroupMatch")]);
    m_allow_no_resource_group_match_isSet = !json[QString("allowNoResourceGroupMatch")].isNull() && m_allow_no_resource_group_match_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_resource_groups_isValid = ::OpenAPI::fromJsonValue(m_resource_groups, json[QString("resourceGroups")]);
    m_resource_groups_isSet = !json[QString("resourceGroups")].isNull() && m_resource_groups_isValid;
}

QString OAIOSPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_no_resource_group_match_isSet) {
        obj.insert(QString("allowNoResourceGroupMatch"), ::OpenAPI::toJsonValue(m_allow_no_resource_group_match));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_resource_groups.size() > 0) {
        obj.insert(QString("resourceGroups"), ::OpenAPI::toJsonValue(m_resource_groups));
    }
    return obj;
}

bool OAIOSPolicy::isAllowNoResourceGroupMatch() const {
    return m_allow_no_resource_group_match;
}
void OAIOSPolicy::setAllowNoResourceGroupMatch(const bool &allow_no_resource_group_match) {
    m_allow_no_resource_group_match = allow_no_resource_group_match;
    m_allow_no_resource_group_match_isSet = true;
}

bool OAIOSPolicy::is_allow_no_resource_group_match_Set() const{
    return m_allow_no_resource_group_match_isSet;
}

bool OAIOSPolicy::is_allow_no_resource_group_match_Valid() const{
    return m_allow_no_resource_group_match_isValid;
}

QString OAIOSPolicy::getDescription() const {
    return m_description;
}
void OAIOSPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOSPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOSPolicy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOSPolicy::getId() const {
    return m_id;
}
void OAIOSPolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOSPolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOSPolicy::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOSPolicy::getMode() const {
    return m_mode;
}
void OAIOSPolicy::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIOSPolicy::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIOSPolicy::is_mode_Valid() const{
    return m_mode_isValid;
}

QList<OAIOSPolicyResourceGroup> OAIOSPolicy::getResourceGroups() const {
    return m_resource_groups;
}
void OAIOSPolicy::setResourceGroups(const QList<OAIOSPolicyResourceGroup> &resource_groups) {
    m_resource_groups = resource_groups;
    m_resource_groups_isSet = true;
}

bool OAIOSPolicy::is_resource_groups_Set() const{
    return m_resource_groups_isSet;
}

bool OAIOSPolicy::is_resource_groups_Valid() const{
    return m_resource_groups_isValid;
}

bool OAIOSPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_no_resource_group_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
