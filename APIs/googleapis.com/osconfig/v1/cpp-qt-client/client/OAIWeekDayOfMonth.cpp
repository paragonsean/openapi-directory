/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeekDayOfMonth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeekDayOfMonth::OAIWeekDayOfMonth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeekDayOfMonth::OAIWeekDayOfMonth() {
    this->initializeModel();
}

OAIWeekDayOfMonth::~OAIWeekDayOfMonth() {}

void OAIWeekDayOfMonth::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_day_offset_isSet = false;
    m_day_offset_isValid = false;

    m_week_ordinal_isSet = false;
    m_week_ordinal_isValid = false;
}

void OAIWeekDayOfMonth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeekDayOfMonth::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_day_offset_isValid = ::OpenAPI::fromJsonValue(m_day_offset, json[QString("dayOffset")]);
    m_day_offset_isSet = !json[QString("dayOffset")].isNull() && m_day_offset_isValid;

    m_week_ordinal_isValid = ::OpenAPI::fromJsonValue(m_week_ordinal, json[QString("weekOrdinal")]);
    m_week_ordinal_isSet = !json[QString("weekOrdinal")].isNull() && m_week_ordinal_isValid;
}

QString OAIWeekDayOfMonth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeekDayOfMonth::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_day_offset_isSet) {
        obj.insert(QString("dayOffset"), ::OpenAPI::toJsonValue(m_day_offset));
    }
    if (m_week_ordinal_isSet) {
        obj.insert(QString("weekOrdinal"), ::OpenAPI::toJsonValue(m_week_ordinal));
    }
    return obj;
}

QString OAIWeekDayOfMonth::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIWeekDayOfMonth::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIWeekDayOfMonth::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIWeekDayOfMonth::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAIWeekDayOfMonth::getDayOffset() const {
    return m_day_offset;
}
void OAIWeekDayOfMonth::setDayOffset(const qint32 &day_offset) {
    m_day_offset = day_offset;
    m_day_offset_isSet = true;
}

bool OAIWeekDayOfMonth::is_day_offset_Set() const{
    return m_day_offset_isSet;
}

bool OAIWeekDayOfMonth::is_day_offset_Valid() const{
    return m_day_offset_isValid;
}

qint32 OAIWeekDayOfMonth::getWeekOrdinal() const {
    return m_week_ordinal;
}
void OAIWeekDayOfMonth::setWeekOrdinal(const qint32 &week_ordinal) {
    m_week_ordinal = week_ordinal;
    m_week_ordinal_isSet = true;
}

bool OAIWeekDayOfMonth::is_week_ordinal_Set() const{
    return m_week_ordinal_isSet;
}

bool OAIWeekDayOfMonth::is_week_ordinal_Valid() const{
    return m_week_ordinal_isValid;
}

bool OAIWeekDayOfMonth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeekDayOfMonth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
