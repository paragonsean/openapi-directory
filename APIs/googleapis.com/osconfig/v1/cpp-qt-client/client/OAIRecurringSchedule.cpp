/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringSchedule::OAIRecurringSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringSchedule::OAIRecurringSchedule() {
    this->initializeModel();
}

OAIRecurringSchedule::~OAIRecurringSchedule() {}

void OAIRecurringSchedule::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_last_execute_time_isSet = false;
    m_last_execute_time_isValid = false;

    m_monthly_isSet = false;
    m_monthly_isValid = false;

    m_next_execute_time_isSet = false;
    m_next_execute_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_of_day_isSet = false;
    m_time_of_day_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_weekly_isSet = false;
    m_weekly_isValid = false;
}

void OAIRecurringSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurringSchedule::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_last_execute_time_isValid = ::OpenAPI::fromJsonValue(m_last_execute_time, json[QString("lastExecuteTime")]);
    m_last_execute_time_isSet = !json[QString("lastExecuteTime")].isNull() && m_last_execute_time_isValid;

    m_monthly_isValid = ::OpenAPI::fromJsonValue(m_monthly, json[QString("monthly")]);
    m_monthly_isSet = !json[QString("monthly")].isNull() && m_monthly_isValid;

    m_next_execute_time_isValid = ::OpenAPI::fromJsonValue(m_next_execute_time, json[QString("nextExecuteTime")]);
    m_next_execute_time_isSet = !json[QString("nextExecuteTime")].isNull() && m_next_execute_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_time_of_day, json[QString("timeOfDay")]);
    m_time_of_day_isSet = !json[QString("timeOfDay")].isNull() && m_time_of_day_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_weekly_isValid = ::OpenAPI::fromJsonValue(m_weekly, json[QString("weekly")]);
    m_weekly_isSet = !json[QString("weekly")].isNull() && m_weekly_isValid;
}

QString OAIRecurringSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurringSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_last_execute_time_isSet) {
        obj.insert(QString("lastExecuteTime"), ::OpenAPI::toJsonValue(m_last_execute_time));
    }
    if (m_monthly.isSet()) {
        obj.insert(QString("monthly"), ::OpenAPI::toJsonValue(m_monthly));
    }
    if (m_next_execute_time_isSet) {
        obj.insert(QString("nextExecuteTime"), ::OpenAPI::toJsonValue(m_next_execute_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_of_day.isSet()) {
        obj.insert(QString("timeOfDay"), ::OpenAPI::toJsonValue(m_time_of_day));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_weekly.isSet()) {
        obj.insert(QString("weekly"), ::OpenAPI::toJsonValue(m_weekly));
    }
    return obj;
}

QString OAIRecurringSchedule::getEndTime() const {
    return m_end_time;
}
void OAIRecurringSchedule::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRecurringSchedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRecurringSchedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIRecurringSchedule::getFrequency() const {
    return m_frequency;
}
void OAIRecurringSchedule::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIRecurringSchedule::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIRecurringSchedule::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIRecurringSchedule::getLastExecuteTime() const {
    return m_last_execute_time;
}
void OAIRecurringSchedule::setLastExecuteTime(const QString &last_execute_time) {
    m_last_execute_time = last_execute_time;
    m_last_execute_time_isSet = true;
}

bool OAIRecurringSchedule::is_last_execute_time_Set() const{
    return m_last_execute_time_isSet;
}

bool OAIRecurringSchedule::is_last_execute_time_Valid() const{
    return m_last_execute_time_isValid;
}

OAIMonthlySchedule OAIRecurringSchedule::getMonthly() const {
    return m_monthly;
}
void OAIRecurringSchedule::setMonthly(const OAIMonthlySchedule &monthly) {
    m_monthly = monthly;
    m_monthly_isSet = true;
}

bool OAIRecurringSchedule::is_monthly_Set() const{
    return m_monthly_isSet;
}

bool OAIRecurringSchedule::is_monthly_Valid() const{
    return m_monthly_isValid;
}

QString OAIRecurringSchedule::getNextExecuteTime() const {
    return m_next_execute_time;
}
void OAIRecurringSchedule::setNextExecuteTime(const QString &next_execute_time) {
    m_next_execute_time = next_execute_time;
    m_next_execute_time_isSet = true;
}

bool OAIRecurringSchedule::is_next_execute_time_Set() const{
    return m_next_execute_time_isSet;
}

bool OAIRecurringSchedule::is_next_execute_time_Valid() const{
    return m_next_execute_time_isValid;
}

QString OAIRecurringSchedule::getStartTime() const {
    return m_start_time;
}
void OAIRecurringSchedule::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRecurringSchedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRecurringSchedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAITimeOfDay OAIRecurringSchedule::getTimeOfDay() const {
    return m_time_of_day;
}
void OAIRecurringSchedule::setTimeOfDay(const OAITimeOfDay &time_of_day) {
    m_time_of_day = time_of_day;
    m_time_of_day_isSet = true;
}

bool OAIRecurringSchedule::is_time_of_day_Set() const{
    return m_time_of_day_isSet;
}

bool OAIRecurringSchedule::is_time_of_day_Valid() const{
    return m_time_of_day_isValid;
}

OAITimeZone OAIRecurringSchedule::getTimeZone() const {
    return m_time_zone;
}
void OAIRecurringSchedule::setTimeZone(const OAITimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIRecurringSchedule::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIRecurringSchedule::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

OAIWeeklySchedule OAIRecurringSchedule::getWeekly() const {
    return m_weekly;
}
void OAIRecurringSchedule::setWeekly(const OAIWeeklySchedule &weekly) {
    m_weekly = weekly;
    m_weekly_isSet = true;
}

bool OAIRecurringSchedule::is_weekly_Set() const{
    return m_weekly_isSet;
}

bool OAIRecurringSchedule::is_weekly_Valid() const{
    return m_weekly_isValid;
}

bool OAIRecurringSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_execute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_execute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurringSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
