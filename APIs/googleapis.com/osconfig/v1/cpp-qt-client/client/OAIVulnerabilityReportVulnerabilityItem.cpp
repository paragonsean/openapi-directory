/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityReportVulnerabilityItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityReportVulnerabilityItem::OAIVulnerabilityReportVulnerabilityItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityReportVulnerabilityItem::OAIVulnerabilityReportVulnerabilityItem() {
    this->initializeModel();
}

OAIVulnerabilityReportVulnerabilityItem::~OAIVulnerabilityReportVulnerabilityItem() {}

void OAIVulnerabilityReportVulnerabilityItem::initializeModel() {

    m_available_inventory_item_id_isSet = false;
    m_available_inventory_item_id_isValid = false;

    m_fixed_cpe_uri_isSet = false;
    m_fixed_cpe_uri_isValid = false;

    m_installed_inventory_item_id_isSet = false;
    m_installed_inventory_item_id_isValid = false;

    m_upstream_fix_isSet = false;
    m_upstream_fix_isValid = false;
}

void OAIVulnerabilityReportVulnerabilityItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityReportVulnerabilityItem::fromJsonObject(QJsonObject json) {

    m_available_inventory_item_id_isValid = ::OpenAPI::fromJsonValue(m_available_inventory_item_id, json[QString("availableInventoryItemId")]);
    m_available_inventory_item_id_isSet = !json[QString("availableInventoryItemId")].isNull() && m_available_inventory_item_id_isValid;

    m_fixed_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_fixed_cpe_uri, json[QString("fixedCpeUri")]);
    m_fixed_cpe_uri_isSet = !json[QString("fixedCpeUri")].isNull() && m_fixed_cpe_uri_isValid;

    m_installed_inventory_item_id_isValid = ::OpenAPI::fromJsonValue(m_installed_inventory_item_id, json[QString("installedInventoryItemId")]);
    m_installed_inventory_item_id_isSet = !json[QString("installedInventoryItemId")].isNull() && m_installed_inventory_item_id_isValid;

    m_upstream_fix_isValid = ::OpenAPI::fromJsonValue(m_upstream_fix, json[QString("upstreamFix")]);
    m_upstream_fix_isSet = !json[QString("upstreamFix")].isNull() && m_upstream_fix_isValid;
}

QString OAIVulnerabilityReportVulnerabilityItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityReportVulnerabilityItem::asJsonObject() const {
    QJsonObject obj;
    if (m_available_inventory_item_id_isSet) {
        obj.insert(QString("availableInventoryItemId"), ::OpenAPI::toJsonValue(m_available_inventory_item_id));
    }
    if (m_fixed_cpe_uri_isSet) {
        obj.insert(QString("fixedCpeUri"), ::OpenAPI::toJsonValue(m_fixed_cpe_uri));
    }
    if (m_installed_inventory_item_id_isSet) {
        obj.insert(QString("installedInventoryItemId"), ::OpenAPI::toJsonValue(m_installed_inventory_item_id));
    }
    if (m_upstream_fix_isSet) {
        obj.insert(QString("upstreamFix"), ::OpenAPI::toJsonValue(m_upstream_fix));
    }
    return obj;
}

QString OAIVulnerabilityReportVulnerabilityItem::getAvailableInventoryItemId() const {
    return m_available_inventory_item_id;
}
void OAIVulnerabilityReportVulnerabilityItem::setAvailableInventoryItemId(const QString &available_inventory_item_id) {
    m_available_inventory_item_id = available_inventory_item_id;
    m_available_inventory_item_id_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_available_inventory_item_id_Set() const{
    return m_available_inventory_item_id_isSet;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_available_inventory_item_id_Valid() const{
    return m_available_inventory_item_id_isValid;
}

QString OAIVulnerabilityReportVulnerabilityItem::getFixedCpeUri() const {
    return m_fixed_cpe_uri;
}
void OAIVulnerabilityReportVulnerabilityItem::setFixedCpeUri(const QString &fixed_cpe_uri) {
    m_fixed_cpe_uri = fixed_cpe_uri;
    m_fixed_cpe_uri_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_fixed_cpe_uri_Set() const{
    return m_fixed_cpe_uri_isSet;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_fixed_cpe_uri_Valid() const{
    return m_fixed_cpe_uri_isValid;
}

QString OAIVulnerabilityReportVulnerabilityItem::getInstalledInventoryItemId() const {
    return m_installed_inventory_item_id;
}
void OAIVulnerabilityReportVulnerabilityItem::setInstalledInventoryItemId(const QString &installed_inventory_item_id) {
    m_installed_inventory_item_id = installed_inventory_item_id;
    m_installed_inventory_item_id_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_installed_inventory_item_id_Set() const{
    return m_installed_inventory_item_id_isSet;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_installed_inventory_item_id_Valid() const{
    return m_installed_inventory_item_id_isValid;
}

QString OAIVulnerabilityReportVulnerabilityItem::getUpstreamFix() const {
    return m_upstream_fix;
}
void OAIVulnerabilityReportVulnerabilityItem::setUpstreamFix(const QString &upstream_fix) {
    m_upstream_fix = upstream_fix;
    m_upstream_fix_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_upstream_fix_Set() const{
    return m_upstream_fix_isSet;
}

bool OAIVulnerabilityReportVulnerabilityItem::is_upstream_fix_Valid() const{
    return m_upstream_fix_isValid;
}

bool OAIVulnerabilityReportVulnerabilityItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_inventory_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_inventory_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_fix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityReportVulnerabilityItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
