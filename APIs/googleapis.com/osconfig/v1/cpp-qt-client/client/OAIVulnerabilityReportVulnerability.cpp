/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityReportVulnerability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityReportVulnerability::OAIVulnerabilityReportVulnerability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityReportVulnerability::OAIVulnerabilityReportVulnerability() {
    this->initializeModel();
}

OAIVulnerabilityReportVulnerability::~OAIVulnerabilityReportVulnerability() {}

void OAIVulnerabilityReportVulnerability::initializeModel() {

    m_available_inventory_item_ids_isSet = false;
    m_available_inventory_item_ids_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_installed_inventory_item_ids_isSet = false;
    m_installed_inventory_item_ids_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIVulnerabilityReportVulnerability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityReportVulnerability::fromJsonObject(QJsonObject json) {

    m_available_inventory_item_ids_isValid = ::OpenAPI::fromJsonValue(m_available_inventory_item_ids, json[QString("availableInventoryItemIds")]);
    m_available_inventory_item_ids_isSet = !json[QString("availableInventoryItemIds")].isNull() && m_available_inventory_item_ids_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_installed_inventory_item_ids_isValid = ::OpenAPI::fromJsonValue(m_installed_inventory_item_ids, json[QString("installedInventoryItemIds")]);
    m_installed_inventory_item_ids_isSet = !json[QString("installedInventoryItemIds")].isNull() && m_installed_inventory_item_ids_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIVulnerabilityReportVulnerability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityReportVulnerability::asJsonObject() const {
    QJsonObject obj;
    if (m_available_inventory_item_ids.size() > 0) {
        obj.insert(QString("availableInventoryItemIds"), ::OpenAPI::toJsonValue(m_available_inventory_item_ids));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_installed_inventory_item_ids.size() > 0) {
        obj.insert(QString("installedInventoryItemIds"), ::OpenAPI::toJsonValue(m_installed_inventory_item_ids));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<QString> OAIVulnerabilityReportVulnerability::getAvailableInventoryItemIds() const {
    return m_available_inventory_item_ids;
}
void OAIVulnerabilityReportVulnerability::setAvailableInventoryItemIds(const QList<QString> &available_inventory_item_ids) {
    m_available_inventory_item_ids = available_inventory_item_ids;
    m_available_inventory_item_ids_isSet = true;
}

bool OAIVulnerabilityReportVulnerability::is_available_inventory_item_ids_Set() const{
    return m_available_inventory_item_ids_isSet;
}

bool OAIVulnerabilityReportVulnerability::is_available_inventory_item_ids_Valid() const{
    return m_available_inventory_item_ids_isValid;
}

QString OAIVulnerabilityReportVulnerability::getCreateTime() const {
    return m_create_time;
}
void OAIVulnerabilityReportVulnerability::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVulnerabilityReportVulnerability::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVulnerabilityReportVulnerability::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIVulnerabilityReportVulnerabilityDetails OAIVulnerabilityReportVulnerability::getDetails() const {
    return m_details;
}
void OAIVulnerabilityReportVulnerability::setDetails(const OAIVulnerabilityReportVulnerabilityDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIVulnerabilityReportVulnerability::is_details_Set() const{
    return m_details_isSet;
}

bool OAIVulnerabilityReportVulnerability::is_details_Valid() const{
    return m_details_isValid;
}

QList<QString> OAIVulnerabilityReportVulnerability::getInstalledInventoryItemIds() const {
    return m_installed_inventory_item_ids;
}
void OAIVulnerabilityReportVulnerability::setInstalledInventoryItemIds(const QList<QString> &installed_inventory_item_ids) {
    m_installed_inventory_item_ids = installed_inventory_item_ids;
    m_installed_inventory_item_ids_isSet = true;
}

bool OAIVulnerabilityReportVulnerability::is_installed_inventory_item_ids_Set() const{
    return m_installed_inventory_item_ids_isSet;
}

bool OAIVulnerabilityReportVulnerability::is_installed_inventory_item_ids_Valid() const{
    return m_installed_inventory_item_ids_isValid;
}

QList<OAIVulnerabilityReportVulnerabilityItem> OAIVulnerabilityReportVulnerability::getItems() const {
    return m_items;
}
void OAIVulnerabilityReportVulnerability::setItems(const QList<OAIVulnerabilityReportVulnerabilityItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIVulnerabilityReportVulnerability::is_items_Set() const{
    return m_items_isSet;
}

bool OAIVulnerabilityReportVulnerability::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIVulnerabilityReportVulnerability::getUpdateTime() const {
    return m_update_time;
}
void OAIVulnerabilityReportVulnerability::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVulnerabilityReportVulnerability::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVulnerabilityReportVulnerability::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIVulnerabilityReportVulnerability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_inventory_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_inventory_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityReportVulnerability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
