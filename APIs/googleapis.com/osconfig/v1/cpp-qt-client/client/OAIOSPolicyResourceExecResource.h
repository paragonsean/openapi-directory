/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOSPolicyResourceExecResource.h
 *
 * A resource that allows executing scripts on the VM. The &#x60;ExecResource&#x60; has 2 stages: &#x60;validate&#x60; and &#x60;enforce&#x60; and both stages accept a script as an argument to execute. When the &#x60;ExecResource&#x60; is applied by the agent, it first executes the script in the &#x60;validate&#x60; stage. The &#x60;validate&#x60; stage can signal that the &#x60;ExecResource&#x60; is already in the desired state by returning an exit code of &#x60;100&#x60;. If the &#x60;ExecResource&#x60; is not in the desired state, it should return an exit code of &#x60;101&#x60;. Any other exit code returned by this stage is considered an error. If the &#x60;ExecResource&#x60; is not in the desired state based on the exit code from the &#x60;validate&#x60; stage, the agent proceeds to execute the script from the &#x60;enforce&#x60; stage. If the &#x60;ExecResource&#x60; is already in the desired state, the &#x60;enforce&#x60; stage will not be run. Similar to &#x60;validate&#x60; stage, the &#x60;enforce&#x60; stage should return an exit code of &#x60;100&#x60; to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of &#x60;100&#x60; was chosen over &#x60;0&#x60; (and &#x60;101&#x60; vs &#x60;1&#x60;) to have an explicit indicator of &#x60;in desired state&#x60;, &#x60;not in desired state&#x60; and errors. Because, for example, Powershell will always return an exit code of &#x60;0&#x60; unless an &#x60;exit&#x60; statement is provided in the script. So, for reasons of consistency and being explicit, exit codes &#x60;100&#x60; and &#x60;101&#x60; were chosen.
 */

#ifndef OAIOSPolicyResourceExecResource_H
#define OAIOSPolicyResourceExecResource_H

#include <QJsonObject>

#include "OAIOSPolicyResourceExecResourceExec.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOSPolicyResourceExecResourceExec;

class OAIOSPolicyResourceExecResource : public OAIObject {
public:
    OAIOSPolicyResourceExecResource();
    OAIOSPolicyResourceExecResource(QString json);
    ~OAIOSPolicyResourceExecResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOSPolicyResourceExecResourceExec getEnforce() const;
    void setEnforce(const OAIOSPolicyResourceExecResourceExec &enforce);
    bool is_enforce_Set() const;
    bool is_enforce_Valid() const;

    OAIOSPolicyResourceExecResourceExec getValidate() const;
    void setValidate(const OAIOSPolicyResourceExecResourceExec &validate);
    bool is_validate_Set() const;
    bool is_validate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOSPolicyResourceExecResourceExec m_enforce;
    bool m_enforce_isSet;
    bool m_enforce_isValid;

    OAIOSPolicyResourceExecResourceExec m_validate;
    bool m_validate_isSet;
    bool m_validate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOSPolicyResourceExecResource)

#endif // OAIOSPolicyResourceExecResource_H
