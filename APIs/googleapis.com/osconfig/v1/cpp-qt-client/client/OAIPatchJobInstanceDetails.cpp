/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchJobInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchJobInstanceDetails::OAIPatchJobInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchJobInstanceDetails::OAIPatchJobInstanceDetails() {
    this->initializeModel();
}

OAIPatchJobInstanceDetails::~OAIPatchJobInstanceDetails() {}

void OAIPatchJobInstanceDetails::initializeModel() {

    m_attempt_count_isSet = false;
    m_attempt_count_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_instance_system_id_isSet = false;
    m_instance_system_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPatchJobInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchJobInstanceDetails::fromJsonObject(QJsonObject json) {

    m_attempt_count_isValid = ::OpenAPI::fromJsonValue(m_attempt_count, json[QString("attemptCount")]);
    m_attempt_count_isSet = !json[QString("attemptCount")].isNull() && m_attempt_count_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_instance_system_id_isValid = ::OpenAPI::fromJsonValue(m_instance_system_id, json[QString("instanceSystemId")]);
    m_instance_system_id_isSet = !json[QString("instanceSystemId")].isNull() && m_instance_system_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPatchJobInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchJobInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_attempt_count_isSet) {
        obj.insert(QString("attemptCount"), ::OpenAPI::toJsonValue(m_attempt_count));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_instance_system_id_isSet) {
        obj.insert(QString("instanceSystemId"), ::OpenAPI::toJsonValue(m_instance_system_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIPatchJobInstanceDetails::getAttemptCount() const {
    return m_attempt_count;
}
void OAIPatchJobInstanceDetails::setAttemptCount(const QString &attempt_count) {
    m_attempt_count = attempt_count;
    m_attempt_count_isSet = true;
}

bool OAIPatchJobInstanceDetails::is_attempt_count_Set() const{
    return m_attempt_count_isSet;
}

bool OAIPatchJobInstanceDetails::is_attempt_count_Valid() const{
    return m_attempt_count_isValid;
}

QString OAIPatchJobInstanceDetails::getFailureReason() const {
    return m_failure_reason;
}
void OAIPatchJobInstanceDetails::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIPatchJobInstanceDetails::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIPatchJobInstanceDetails::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIPatchJobInstanceDetails::getInstanceSystemId() const {
    return m_instance_system_id;
}
void OAIPatchJobInstanceDetails::setInstanceSystemId(const QString &instance_system_id) {
    m_instance_system_id = instance_system_id;
    m_instance_system_id_isSet = true;
}

bool OAIPatchJobInstanceDetails::is_instance_system_id_Set() const{
    return m_instance_system_id_isSet;
}

bool OAIPatchJobInstanceDetails::is_instance_system_id_Valid() const{
    return m_instance_system_id_isValid;
}

QString OAIPatchJobInstanceDetails::getName() const {
    return m_name;
}
void OAIPatchJobInstanceDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchJobInstanceDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchJobInstanceDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPatchJobInstanceDetails::getState() const {
    return m_state;
}
void OAIPatchJobInstanceDetails::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPatchJobInstanceDetails::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPatchJobInstanceDetails::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPatchJobInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempt_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchJobInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
