/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYumSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYumSettings::OAIYumSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYumSettings::OAIYumSettings() {
    this->initializeModel();
}

OAIYumSettings::~OAIYumSettings() {}

void OAIYumSettings::initializeModel() {

    m_excludes_isSet = false;
    m_excludes_isValid = false;

    m_exclusive_packages_isSet = false;
    m_exclusive_packages_isValid = false;

    m_minimal_isSet = false;
    m_minimal_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;
}

void OAIYumSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYumSettings::fromJsonObject(QJsonObject json) {

    m_excludes_isValid = ::OpenAPI::fromJsonValue(m_excludes, json[QString("excludes")]);
    m_excludes_isSet = !json[QString("excludes")].isNull() && m_excludes_isValid;

    m_exclusive_packages_isValid = ::OpenAPI::fromJsonValue(m_exclusive_packages, json[QString("exclusivePackages")]);
    m_exclusive_packages_isSet = !json[QString("exclusivePackages")].isNull() && m_exclusive_packages_isValid;

    m_minimal_isValid = ::OpenAPI::fromJsonValue(m_minimal, json[QString("minimal")]);
    m_minimal_isSet = !json[QString("minimal")].isNull() && m_minimal_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;
}

QString OAIYumSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYumSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_excludes.size() > 0) {
        obj.insert(QString("excludes"), ::OpenAPI::toJsonValue(m_excludes));
    }
    if (m_exclusive_packages.size() > 0) {
        obj.insert(QString("exclusivePackages"), ::OpenAPI::toJsonValue(m_exclusive_packages));
    }
    if (m_minimal_isSet) {
        obj.insert(QString("minimal"), ::OpenAPI::toJsonValue(m_minimal));
    }
    if (m_security_isSet) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    return obj;
}

QList<QString> OAIYumSettings::getExcludes() const {
    return m_excludes;
}
void OAIYumSettings::setExcludes(const QList<QString> &excludes) {
    m_excludes = excludes;
    m_excludes_isSet = true;
}

bool OAIYumSettings::is_excludes_Set() const{
    return m_excludes_isSet;
}

bool OAIYumSettings::is_excludes_Valid() const{
    return m_excludes_isValid;
}

QList<QString> OAIYumSettings::getExclusivePackages() const {
    return m_exclusive_packages;
}
void OAIYumSettings::setExclusivePackages(const QList<QString> &exclusive_packages) {
    m_exclusive_packages = exclusive_packages;
    m_exclusive_packages_isSet = true;
}

bool OAIYumSettings::is_exclusive_packages_Set() const{
    return m_exclusive_packages_isSet;
}

bool OAIYumSettings::is_exclusive_packages_Valid() const{
    return m_exclusive_packages_isValid;
}

bool OAIYumSettings::isMinimal() const {
    return m_minimal;
}
void OAIYumSettings::setMinimal(const bool &minimal) {
    m_minimal = minimal;
    m_minimal_isSet = true;
}

bool OAIYumSettings::is_minimal_Set() const{
    return m_minimal_isSet;
}

bool OAIYumSettings::is_minimal_Valid() const{
    return m_minimal_isValid;
}

bool OAIYumSettings::isSecurity() const {
    return m_security;
}
void OAIYumSettings::setSecurity(const bool &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIYumSettings::is_security_Set() const{
    return m_security_isSet;
}

bool OAIYumSettings::is_security_Valid() const{
    return m_security_isValid;
}

bool OAIYumSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excludes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYumSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
