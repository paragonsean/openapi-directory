/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryZypperPatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryZypperPatch::OAIInventoryZypperPatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryZypperPatch::OAIInventoryZypperPatch() {
    this->initializeModel();
}

OAIInventoryZypperPatch::~OAIInventoryZypperPatch() {}

void OAIInventoryZypperPatch::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_patch_name_isSet = false;
    m_patch_name_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIInventoryZypperPatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryZypperPatch::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_patch_name_isValid = ::OpenAPI::fromJsonValue(m_patch_name, json[QString("patchName")]);
    m_patch_name_isSet = !json[QString("patchName")].isNull() && m_patch_name_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIInventoryZypperPatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryZypperPatch::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_patch_name_isSet) {
        obj.insert(QString("patchName"), ::OpenAPI::toJsonValue(m_patch_name));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIInventoryZypperPatch::getCategory() const {
    return m_category;
}
void OAIInventoryZypperPatch::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIInventoryZypperPatch::is_category_Set() const{
    return m_category_isSet;
}

bool OAIInventoryZypperPatch::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIInventoryZypperPatch::getPatchName() const {
    return m_patch_name;
}
void OAIInventoryZypperPatch::setPatchName(const QString &patch_name) {
    m_patch_name = patch_name;
    m_patch_name_isSet = true;
}

bool OAIInventoryZypperPatch::is_patch_name_Set() const{
    return m_patch_name_isSet;
}

bool OAIInventoryZypperPatch::is_patch_name_Valid() const{
    return m_patch_name_isValid;
}

QString OAIInventoryZypperPatch::getSeverity() const {
    return m_severity;
}
void OAIInventoryZypperPatch::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIInventoryZypperPatch::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIInventoryZypperPatch::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIInventoryZypperPatch::getSummary() const {
    return m_summary;
}
void OAIInventoryZypperPatch::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIInventoryZypperPatch::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIInventoryZypperPatch::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIInventoryZypperPatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryZypperPatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
