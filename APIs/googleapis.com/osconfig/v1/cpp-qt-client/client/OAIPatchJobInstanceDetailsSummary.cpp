/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchJobInstanceDetailsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchJobInstanceDetailsSummary::OAIPatchJobInstanceDetailsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchJobInstanceDetailsSummary::OAIPatchJobInstanceDetailsSummary() {
    this->initializeModel();
}

OAIPatchJobInstanceDetailsSummary::~OAIPatchJobInstanceDetailsSummary() {}

void OAIPatchJobInstanceDetailsSummary::initializeModel() {

    m_acked_instance_count_isSet = false;
    m_acked_instance_count_isValid = false;

    m_applying_patches_instance_count_isSet = false;
    m_applying_patches_instance_count_isValid = false;

    m_downloading_patches_instance_count_isSet = false;
    m_downloading_patches_instance_count_isValid = false;

    m_failed_instance_count_isSet = false;
    m_failed_instance_count_isValid = false;

    m_inactive_instance_count_isSet = false;
    m_inactive_instance_count_isValid = false;

    m_no_agent_detected_instance_count_isSet = false;
    m_no_agent_detected_instance_count_isValid = false;

    m_notified_instance_count_isSet = false;
    m_notified_instance_count_isValid = false;

    m_pending_instance_count_isSet = false;
    m_pending_instance_count_isValid = false;

    m_post_patch_step_instance_count_isSet = false;
    m_post_patch_step_instance_count_isValid = false;

    m_pre_patch_step_instance_count_isSet = false;
    m_pre_patch_step_instance_count_isValid = false;

    m_rebooting_instance_count_isSet = false;
    m_rebooting_instance_count_isValid = false;

    m_started_instance_count_isSet = false;
    m_started_instance_count_isValid = false;

    m_succeeded_instance_count_isSet = false;
    m_succeeded_instance_count_isValid = false;

    m_succeeded_reboot_required_instance_count_isSet = false;
    m_succeeded_reboot_required_instance_count_isValid = false;

    m_timed_out_instance_count_isSet = false;
    m_timed_out_instance_count_isValid = false;
}

void OAIPatchJobInstanceDetailsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchJobInstanceDetailsSummary::fromJsonObject(QJsonObject json) {

    m_acked_instance_count_isValid = ::OpenAPI::fromJsonValue(m_acked_instance_count, json[QString("ackedInstanceCount")]);
    m_acked_instance_count_isSet = !json[QString("ackedInstanceCount")].isNull() && m_acked_instance_count_isValid;

    m_applying_patches_instance_count_isValid = ::OpenAPI::fromJsonValue(m_applying_patches_instance_count, json[QString("applyingPatchesInstanceCount")]);
    m_applying_patches_instance_count_isSet = !json[QString("applyingPatchesInstanceCount")].isNull() && m_applying_patches_instance_count_isValid;

    m_downloading_patches_instance_count_isValid = ::OpenAPI::fromJsonValue(m_downloading_patches_instance_count, json[QString("downloadingPatchesInstanceCount")]);
    m_downloading_patches_instance_count_isSet = !json[QString("downloadingPatchesInstanceCount")].isNull() && m_downloading_patches_instance_count_isValid;

    m_failed_instance_count_isValid = ::OpenAPI::fromJsonValue(m_failed_instance_count, json[QString("failedInstanceCount")]);
    m_failed_instance_count_isSet = !json[QString("failedInstanceCount")].isNull() && m_failed_instance_count_isValid;

    m_inactive_instance_count_isValid = ::OpenAPI::fromJsonValue(m_inactive_instance_count, json[QString("inactiveInstanceCount")]);
    m_inactive_instance_count_isSet = !json[QString("inactiveInstanceCount")].isNull() && m_inactive_instance_count_isValid;

    m_no_agent_detected_instance_count_isValid = ::OpenAPI::fromJsonValue(m_no_agent_detected_instance_count, json[QString("noAgentDetectedInstanceCount")]);
    m_no_agent_detected_instance_count_isSet = !json[QString("noAgentDetectedInstanceCount")].isNull() && m_no_agent_detected_instance_count_isValid;

    m_notified_instance_count_isValid = ::OpenAPI::fromJsonValue(m_notified_instance_count, json[QString("notifiedInstanceCount")]);
    m_notified_instance_count_isSet = !json[QString("notifiedInstanceCount")].isNull() && m_notified_instance_count_isValid;

    m_pending_instance_count_isValid = ::OpenAPI::fromJsonValue(m_pending_instance_count, json[QString("pendingInstanceCount")]);
    m_pending_instance_count_isSet = !json[QString("pendingInstanceCount")].isNull() && m_pending_instance_count_isValid;

    m_post_patch_step_instance_count_isValid = ::OpenAPI::fromJsonValue(m_post_patch_step_instance_count, json[QString("postPatchStepInstanceCount")]);
    m_post_patch_step_instance_count_isSet = !json[QString("postPatchStepInstanceCount")].isNull() && m_post_patch_step_instance_count_isValid;

    m_pre_patch_step_instance_count_isValid = ::OpenAPI::fromJsonValue(m_pre_patch_step_instance_count, json[QString("prePatchStepInstanceCount")]);
    m_pre_patch_step_instance_count_isSet = !json[QString("prePatchStepInstanceCount")].isNull() && m_pre_patch_step_instance_count_isValid;

    m_rebooting_instance_count_isValid = ::OpenAPI::fromJsonValue(m_rebooting_instance_count, json[QString("rebootingInstanceCount")]);
    m_rebooting_instance_count_isSet = !json[QString("rebootingInstanceCount")].isNull() && m_rebooting_instance_count_isValid;

    m_started_instance_count_isValid = ::OpenAPI::fromJsonValue(m_started_instance_count, json[QString("startedInstanceCount")]);
    m_started_instance_count_isSet = !json[QString("startedInstanceCount")].isNull() && m_started_instance_count_isValid;

    m_succeeded_instance_count_isValid = ::OpenAPI::fromJsonValue(m_succeeded_instance_count, json[QString("succeededInstanceCount")]);
    m_succeeded_instance_count_isSet = !json[QString("succeededInstanceCount")].isNull() && m_succeeded_instance_count_isValid;

    m_succeeded_reboot_required_instance_count_isValid = ::OpenAPI::fromJsonValue(m_succeeded_reboot_required_instance_count, json[QString("succeededRebootRequiredInstanceCount")]);
    m_succeeded_reboot_required_instance_count_isSet = !json[QString("succeededRebootRequiredInstanceCount")].isNull() && m_succeeded_reboot_required_instance_count_isValid;

    m_timed_out_instance_count_isValid = ::OpenAPI::fromJsonValue(m_timed_out_instance_count, json[QString("timedOutInstanceCount")]);
    m_timed_out_instance_count_isSet = !json[QString("timedOutInstanceCount")].isNull() && m_timed_out_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchJobInstanceDetailsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_acked_instance_count_isSet) {
        obj.insert(QString("ackedInstanceCount"), ::OpenAPI::toJsonValue(m_acked_instance_count));
    }
    if (m_applying_patches_instance_count_isSet) {
        obj.insert(QString("applyingPatchesInstanceCount"), ::OpenAPI::toJsonValue(m_applying_patches_instance_count));
    }
    if (m_downloading_patches_instance_count_isSet) {
        obj.insert(QString("downloadingPatchesInstanceCount"), ::OpenAPI::toJsonValue(m_downloading_patches_instance_count));
    }
    if (m_failed_instance_count_isSet) {
        obj.insert(QString("failedInstanceCount"), ::OpenAPI::toJsonValue(m_failed_instance_count));
    }
    if (m_inactive_instance_count_isSet) {
        obj.insert(QString("inactiveInstanceCount"), ::OpenAPI::toJsonValue(m_inactive_instance_count));
    }
    if (m_no_agent_detected_instance_count_isSet) {
        obj.insert(QString("noAgentDetectedInstanceCount"), ::OpenAPI::toJsonValue(m_no_agent_detected_instance_count));
    }
    if (m_notified_instance_count_isSet) {
        obj.insert(QString("notifiedInstanceCount"), ::OpenAPI::toJsonValue(m_notified_instance_count));
    }
    if (m_pending_instance_count_isSet) {
        obj.insert(QString("pendingInstanceCount"), ::OpenAPI::toJsonValue(m_pending_instance_count));
    }
    if (m_post_patch_step_instance_count_isSet) {
        obj.insert(QString("postPatchStepInstanceCount"), ::OpenAPI::toJsonValue(m_post_patch_step_instance_count));
    }
    if (m_pre_patch_step_instance_count_isSet) {
        obj.insert(QString("prePatchStepInstanceCount"), ::OpenAPI::toJsonValue(m_pre_patch_step_instance_count));
    }
    if (m_rebooting_instance_count_isSet) {
        obj.insert(QString("rebootingInstanceCount"), ::OpenAPI::toJsonValue(m_rebooting_instance_count));
    }
    if (m_started_instance_count_isSet) {
        obj.insert(QString("startedInstanceCount"), ::OpenAPI::toJsonValue(m_started_instance_count));
    }
    if (m_succeeded_instance_count_isSet) {
        obj.insert(QString("succeededInstanceCount"), ::OpenAPI::toJsonValue(m_succeeded_instance_count));
    }
    if (m_succeeded_reboot_required_instance_count_isSet) {
        obj.insert(QString("succeededRebootRequiredInstanceCount"), ::OpenAPI::toJsonValue(m_succeeded_reboot_required_instance_count));
    }
    if (m_timed_out_instance_count_isSet) {
        obj.insert(QString("timedOutInstanceCount"), ::OpenAPI::toJsonValue(m_timed_out_instance_count));
    }
    return obj;
}

QString OAIPatchJobInstanceDetailsSummary::getAckedInstanceCount() const {
    return m_acked_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setAckedInstanceCount(const QString &acked_instance_count) {
    m_acked_instance_count = acked_instance_count;
    m_acked_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_acked_instance_count_Set() const{
    return m_acked_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_acked_instance_count_Valid() const{
    return m_acked_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getApplyingPatchesInstanceCount() const {
    return m_applying_patches_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setApplyingPatchesInstanceCount(const QString &applying_patches_instance_count) {
    m_applying_patches_instance_count = applying_patches_instance_count;
    m_applying_patches_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_applying_patches_instance_count_Set() const{
    return m_applying_patches_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_applying_patches_instance_count_Valid() const{
    return m_applying_patches_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getDownloadingPatchesInstanceCount() const {
    return m_downloading_patches_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setDownloadingPatchesInstanceCount(const QString &downloading_patches_instance_count) {
    m_downloading_patches_instance_count = downloading_patches_instance_count;
    m_downloading_patches_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_downloading_patches_instance_count_Set() const{
    return m_downloading_patches_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_downloading_patches_instance_count_Valid() const{
    return m_downloading_patches_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getFailedInstanceCount() const {
    return m_failed_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setFailedInstanceCount(const QString &failed_instance_count) {
    m_failed_instance_count = failed_instance_count;
    m_failed_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_failed_instance_count_Set() const{
    return m_failed_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_failed_instance_count_Valid() const{
    return m_failed_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getInactiveInstanceCount() const {
    return m_inactive_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setInactiveInstanceCount(const QString &inactive_instance_count) {
    m_inactive_instance_count = inactive_instance_count;
    m_inactive_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_inactive_instance_count_Set() const{
    return m_inactive_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_inactive_instance_count_Valid() const{
    return m_inactive_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getNoAgentDetectedInstanceCount() const {
    return m_no_agent_detected_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setNoAgentDetectedInstanceCount(const QString &no_agent_detected_instance_count) {
    m_no_agent_detected_instance_count = no_agent_detected_instance_count;
    m_no_agent_detected_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_no_agent_detected_instance_count_Set() const{
    return m_no_agent_detected_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_no_agent_detected_instance_count_Valid() const{
    return m_no_agent_detected_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getNotifiedInstanceCount() const {
    return m_notified_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setNotifiedInstanceCount(const QString &notified_instance_count) {
    m_notified_instance_count = notified_instance_count;
    m_notified_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_notified_instance_count_Set() const{
    return m_notified_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_notified_instance_count_Valid() const{
    return m_notified_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getPendingInstanceCount() const {
    return m_pending_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setPendingInstanceCount(const QString &pending_instance_count) {
    m_pending_instance_count = pending_instance_count;
    m_pending_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_pending_instance_count_Set() const{
    return m_pending_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_pending_instance_count_Valid() const{
    return m_pending_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getPostPatchStepInstanceCount() const {
    return m_post_patch_step_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setPostPatchStepInstanceCount(const QString &post_patch_step_instance_count) {
    m_post_patch_step_instance_count = post_patch_step_instance_count;
    m_post_patch_step_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_post_patch_step_instance_count_Set() const{
    return m_post_patch_step_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_post_patch_step_instance_count_Valid() const{
    return m_post_patch_step_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getPrePatchStepInstanceCount() const {
    return m_pre_patch_step_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setPrePatchStepInstanceCount(const QString &pre_patch_step_instance_count) {
    m_pre_patch_step_instance_count = pre_patch_step_instance_count;
    m_pre_patch_step_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_pre_patch_step_instance_count_Set() const{
    return m_pre_patch_step_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_pre_patch_step_instance_count_Valid() const{
    return m_pre_patch_step_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getRebootingInstanceCount() const {
    return m_rebooting_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setRebootingInstanceCount(const QString &rebooting_instance_count) {
    m_rebooting_instance_count = rebooting_instance_count;
    m_rebooting_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_rebooting_instance_count_Set() const{
    return m_rebooting_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_rebooting_instance_count_Valid() const{
    return m_rebooting_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getStartedInstanceCount() const {
    return m_started_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setStartedInstanceCount(const QString &started_instance_count) {
    m_started_instance_count = started_instance_count;
    m_started_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_started_instance_count_Set() const{
    return m_started_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_started_instance_count_Valid() const{
    return m_started_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getSucceededInstanceCount() const {
    return m_succeeded_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setSucceededInstanceCount(const QString &succeeded_instance_count) {
    m_succeeded_instance_count = succeeded_instance_count;
    m_succeeded_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_succeeded_instance_count_Set() const{
    return m_succeeded_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_succeeded_instance_count_Valid() const{
    return m_succeeded_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getSucceededRebootRequiredInstanceCount() const {
    return m_succeeded_reboot_required_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setSucceededRebootRequiredInstanceCount(const QString &succeeded_reboot_required_instance_count) {
    m_succeeded_reboot_required_instance_count = succeeded_reboot_required_instance_count;
    m_succeeded_reboot_required_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_succeeded_reboot_required_instance_count_Set() const{
    return m_succeeded_reboot_required_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_succeeded_reboot_required_instance_count_Valid() const{
    return m_succeeded_reboot_required_instance_count_isValid;
}

QString OAIPatchJobInstanceDetailsSummary::getTimedOutInstanceCount() const {
    return m_timed_out_instance_count;
}
void OAIPatchJobInstanceDetailsSummary::setTimedOutInstanceCount(const QString &timed_out_instance_count) {
    m_timed_out_instance_count = timed_out_instance_count;
    m_timed_out_instance_count_isSet = true;
}

bool OAIPatchJobInstanceDetailsSummary::is_timed_out_instance_count_Set() const{
    return m_timed_out_instance_count_isSet;
}

bool OAIPatchJobInstanceDetailsSummary::is_timed_out_instance_count_Valid() const{
    return m_timed_out_instance_count_isValid;
}

bool OAIPatchJobInstanceDetailsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acked_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applying_patches_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloading_patches_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_agent_detected_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_patch_step_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_patch_step_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebooting_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_reboot_required_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_out_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchJobInstanceDetailsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
