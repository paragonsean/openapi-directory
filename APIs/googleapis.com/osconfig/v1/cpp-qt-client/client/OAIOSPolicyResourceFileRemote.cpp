/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceFileRemote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceFileRemote::OAIOSPolicyResourceFileRemote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceFileRemote::OAIOSPolicyResourceFileRemote() {
    this->initializeModel();
}

OAIOSPolicyResourceFileRemote::~OAIOSPolicyResourceFileRemote() {}

void OAIOSPolicyResourceFileRemote::initializeModel() {

    m_sha256_checksum_isSet = false;
    m_sha256_checksum_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIOSPolicyResourceFileRemote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceFileRemote::fromJsonObject(QJsonObject json) {

    m_sha256_checksum_isValid = ::OpenAPI::fromJsonValue(m_sha256_checksum, json[QString("sha256Checksum")]);
    m_sha256_checksum_isSet = !json[QString("sha256Checksum")].isNull() && m_sha256_checksum_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIOSPolicyResourceFileRemote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceFileRemote::asJsonObject() const {
    QJsonObject obj;
    if (m_sha256_checksum_isSet) {
        obj.insert(QString("sha256Checksum"), ::OpenAPI::toJsonValue(m_sha256_checksum));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIOSPolicyResourceFileRemote::getSha256Checksum() const {
    return m_sha256_checksum;
}
void OAIOSPolicyResourceFileRemote::setSha256Checksum(const QString &sha256_checksum) {
    m_sha256_checksum = sha256_checksum;
    m_sha256_checksum_isSet = true;
}

bool OAIOSPolicyResourceFileRemote::is_sha256_checksum_Set() const{
    return m_sha256_checksum_isSet;
}

bool OAIOSPolicyResourceFileRemote::is_sha256_checksum_Valid() const{
    return m_sha256_checksum_isValid;
}

QString OAIOSPolicyResourceFileRemote::getUri() const {
    return m_uri;
}
void OAIOSPolicyResourceFileRemote::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIOSPolicyResourceFileRemote::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIOSPolicyResourceFileRemote::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIOSPolicyResourceFileRemote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sha256_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceFileRemote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
