/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchConfig::OAIPatchConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchConfig::OAIPatchConfig() {
    this->initializeModel();
}

OAIPatchConfig::~OAIPatchConfig() {}

void OAIPatchConfig::initializeModel() {

    m_apt_isSet = false;
    m_apt_isValid = false;

    m_goo_isSet = false;
    m_goo_isValid = false;

    m_mig_instances_allowed_isSet = false;
    m_mig_instances_allowed_isValid = false;

    m_post_step_isSet = false;
    m_post_step_isValid = false;

    m_pre_step_isSet = false;
    m_pre_step_isValid = false;

    m_reboot_config_isSet = false;
    m_reboot_config_isValid = false;

    m_windows_update_isSet = false;
    m_windows_update_isValid = false;

    m_yum_isSet = false;
    m_yum_isValid = false;

    m_zypper_isSet = false;
    m_zypper_isValid = false;
}

void OAIPatchConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchConfig::fromJsonObject(QJsonObject json) {

    m_apt_isValid = ::OpenAPI::fromJsonValue(m_apt, json[QString("apt")]);
    m_apt_isSet = !json[QString("apt")].isNull() && m_apt_isValid;

    m_goo_isValid = ::OpenAPI::fromJsonValue(m_goo, json[QString("goo")]);
    m_goo_isSet = !json[QString("goo")].isNull() && m_goo_isValid;

    m_mig_instances_allowed_isValid = ::OpenAPI::fromJsonValue(m_mig_instances_allowed, json[QString("migInstancesAllowed")]);
    m_mig_instances_allowed_isSet = !json[QString("migInstancesAllowed")].isNull() && m_mig_instances_allowed_isValid;

    m_post_step_isValid = ::OpenAPI::fromJsonValue(m_post_step, json[QString("postStep")]);
    m_post_step_isSet = !json[QString("postStep")].isNull() && m_post_step_isValid;

    m_pre_step_isValid = ::OpenAPI::fromJsonValue(m_pre_step, json[QString("preStep")]);
    m_pre_step_isSet = !json[QString("preStep")].isNull() && m_pre_step_isValid;

    m_reboot_config_isValid = ::OpenAPI::fromJsonValue(m_reboot_config, json[QString("rebootConfig")]);
    m_reboot_config_isSet = !json[QString("rebootConfig")].isNull() && m_reboot_config_isValid;

    m_windows_update_isValid = ::OpenAPI::fromJsonValue(m_windows_update, json[QString("windowsUpdate")]);
    m_windows_update_isSet = !json[QString("windowsUpdate")].isNull() && m_windows_update_isValid;

    m_yum_isValid = ::OpenAPI::fromJsonValue(m_yum, json[QString("yum")]);
    m_yum_isSet = !json[QString("yum")].isNull() && m_yum_isValid;

    m_zypper_isValid = ::OpenAPI::fromJsonValue(m_zypper, json[QString("zypper")]);
    m_zypper_isSet = !json[QString("zypper")].isNull() && m_zypper_isValid;
}

QString OAIPatchConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_apt.isSet()) {
        obj.insert(QString("apt"), ::OpenAPI::toJsonValue(m_apt));
    }
    if (m_goo_isSet) {
        obj.insert(QString("goo"), ::OpenAPI::toJsonValue(m_goo));
    }
    if (m_mig_instances_allowed_isSet) {
        obj.insert(QString("migInstancesAllowed"), ::OpenAPI::toJsonValue(m_mig_instances_allowed));
    }
    if (m_post_step.isSet()) {
        obj.insert(QString("postStep"), ::OpenAPI::toJsonValue(m_post_step));
    }
    if (m_pre_step.isSet()) {
        obj.insert(QString("preStep"), ::OpenAPI::toJsonValue(m_pre_step));
    }
    if (m_reboot_config_isSet) {
        obj.insert(QString("rebootConfig"), ::OpenAPI::toJsonValue(m_reboot_config));
    }
    if (m_windows_update.isSet()) {
        obj.insert(QString("windowsUpdate"), ::OpenAPI::toJsonValue(m_windows_update));
    }
    if (m_yum.isSet()) {
        obj.insert(QString("yum"), ::OpenAPI::toJsonValue(m_yum));
    }
    if (m_zypper.isSet()) {
        obj.insert(QString("zypper"), ::OpenAPI::toJsonValue(m_zypper));
    }
    return obj;
}

OAIAptSettings OAIPatchConfig::getApt() const {
    return m_apt;
}
void OAIPatchConfig::setApt(const OAIAptSettings &apt) {
    m_apt = apt;
    m_apt_isSet = true;
}

bool OAIPatchConfig::is_apt_Set() const{
    return m_apt_isSet;
}

bool OAIPatchConfig::is_apt_Valid() const{
    return m_apt_isValid;
}

OAIObject OAIPatchConfig::getGoo() const {
    return m_goo;
}
void OAIPatchConfig::setGoo(const OAIObject &goo) {
    m_goo = goo;
    m_goo_isSet = true;
}

bool OAIPatchConfig::is_goo_Set() const{
    return m_goo_isSet;
}

bool OAIPatchConfig::is_goo_Valid() const{
    return m_goo_isValid;
}

bool OAIPatchConfig::isMigInstancesAllowed() const {
    return m_mig_instances_allowed;
}
void OAIPatchConfig::setMigInstancesAllowed(const bool &mig_instances_allowed) {
    m_mig_instances_allowed = mig_instances_allowed;
    m_mig_instances_allowed_isSet = true;
}

bool OAIPatchConfig::is_mig_instances_allowed_Set() const{
    return m_mig_instances_allowed_isSet;
}

bool OAIPatchConfig::is_mig_instances_allowed_Valid() const{
    return m_mig_instances_allowed_isValid;
}

OAIExecStep OAIPatchConfig::getPostStep() const {
    return m_post_step;
}
void OAIPatchConfig::setPostStep(const OAIExecStep &post_step) {
    m_post_step = post_step;
    m_post_step_isSet = true;
}

bool OAIPatchConfig::is_post_step_Set() const{
    return m_post_step_isSet;
}

bool OAIPatchConfig::is_post_step_Valid() const{
    return m_post_step_isValid;
}

OAIExecStep OAIPatchConfig::getPreStep() const {
    return m_pre_step;
}
void OAIPatchConfig::setPreStep(const OAIExecStep &pre_step) {
    m_pre_step = pre_step;
    m_pre_step_isSet = true;
}

bool OAIPatchConfig::is_pre_step_Set() const{
    return m_pre_step_isSet;
}

bool OAIPatchConfig::is_pre_step_Valid() const{
    return m_pre_step_isValid;
}

QString OAIPatchConfig::getRebootConfig() const {
    return m_reboot_config;
}
void OAIPatchConfig::setRebootConfig(const QString &reboot_config) {
    m_reboot_config = reboot_config;
    m_reboot_config_isSet = true;
}

bool OAIPatchConfig::is_reboot_config_Set() const{
    return m_reboot_config_isSet;
}

bool OAIPatchConfig::is_reboot_config_Valid() const{
    return m_reboot_config_isValid;
}

OAIWindowsUpdateSettings OAIPatchConfig::getWindowsUpdate() const {
    return m_windows_update;
}
void OAIPatchConfig::setWindowsUpdate(const OAIWindowsUpdateSettings &windows_update) {
    m_windows_update = windows_update;
    m_windows_update_isSet = true;
}

bool OAIPatchConfig::is_windows_update_Set() const{
    return m_windows_update_isSet;
}

bool OAIPatchConfig::is_windows_update_Valid() const{
    return m_windows_update_isValid;
}

OAIYumSettings OAIPatchConfig::getYum() const {
    return m_yum;
}
void OAIPatchConfig::setYum(const OAIYumSettings &yum) {
    m_yum = yum;
    m_yum_isSet = true;
}

bool OAIPatchConfig::is_yum_Set() const{
    return m_yum_isSet;
}

bool OAIPatchConfig::is_yum_Valid() const{
    return m_yum_isValid;
}

OAIZypperSettings OAIPatchConfig::getZypper() const {
    return m_zypper;
}
void OAIPatchConfig::setZypper(const OAIZypperSettings &zypper) {
    m_zypper = zypper;
    m_zypper_isSet = true;
}

bool OAIPatchConfig::is_zypper_Set() const{
    return m_zypper_isSet;
}

bool OAIPatchConfig::is_zypper_Valid() const{
    return m_zypper_isValid;
}

bool OAIPatchConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_goo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mig_instances_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zypper.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
