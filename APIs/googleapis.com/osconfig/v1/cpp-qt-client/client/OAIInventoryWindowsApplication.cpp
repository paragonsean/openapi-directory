/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryWindowsApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryWindowsApplication::OAIInventoryWindowsApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryWindowsApplication::OAIInventoryWindowsApplication() {
    this->initializeModel();
}

OAIInventoryWindowsApplication::~OAIInventoryWindowsApplication() {}

void OAIInventoryWindowsApplication::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_version_isSet = false;
    m_display_version_isValid = false;

    m_help_link_isSet = false;
    m_help_link_isValid = false;

    m_install_date_isSet = false;
    m_install_date_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;
}

void OAIInventoryWindowsApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryWindowsApplication::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_version_isValid = ::OpenAPI::fromJsonValue(m_display_version, json[QString("displayVersion")]);
    m_display_version_isSet = !json[QString("displayVersion")].isNull() && m_display_version_isValid;

    m_help_link_isValid = ::OpenAPI::fromJsonValue(m_help_link, json[QString("helpLink")]);
    m_help_link_isSet = !json[QString("helpLink")].isNull() && m_help_link_isValid;

    m_install_date_isValid = ::OpenAPI::fromJsonValue(m_install_date, json[QString("installDate")]);
    m_install_date_isSet = !json[QString("installDate")].isNull() && m_install_date_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;
}

QString OAIInventoryWindowsApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryWindowsApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_version_isSet) {
        obj.insert(QString("displayVersion"), ::OpenAPI::toJsonValue(m_display_version));
    }
    if (m_help_link_isSet) {
        obj.insert(QString("helpLink"), ::OpenAPI::toJsonValue(m_help_link));
    }
    if (m_install_date.isSet()) {
        obj.insert(QString("installDate"), ::OpenAPI::toJsonValue(m_install_date));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    return obj;
}

QString OAIInventoryWindowsApplication::getDisplayName() const {
    return m_display_name;
}
void OAIInventoryWindowsApplication::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInventoryWindowsApplication::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInventoryWindowsApplication::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInventoryWindowsApplication::getDisplayVersion() const {
    return m_display_version;
}
void OAIInventoryWindowsApplication::setDisplayVersion(const QString &display_version) {
    m_display_version = display_version;
    m_display_version_isSet = true;
}

bool OAIInventoryWindowsApplication::is_display_version_Set() const{
    return m_display_version_isSet;
}

bool OAIInventoryWindowsApplication::is_display_version_Valid() const{
    return m_display_version_isValid;
}

QString OAIInventoryWindowsApplication::getHelpLink() const {
    return m_help_link;
}
void OAIInventoryWindowsApplication::setHelpLink(const QString &help_link) {
    m_help_link = help_link;
    m_help_link_isSet = true;
}

bool OAIInventoryWindowsApplication::is_help_link_Set() const{
    return m_help_link_isSet;
}

bool OAIInventoryWindowsApplication::is_help_link_Valid() const{
    return m_help_link_isValid;
}

OAIDate OAIInventoryWindowsApplication::getInstallDate() const {
    return m_install_date;
}
void OAIInventoryWindowsApplication::setInstallDate(const OAIDate &install_date) {
    m_install_date = install_date;
    m_install_date_isSet = true;
}

bool OAIInventoryWindowsApplication::is_install_date_Set() const{
    return m_install_date_isSet;
}

bool OAIInventoryWindowsApplication::is_install_date_Valid() const{
    return m_install_date_isValid;
}

QString OAIInventoryWindowsApplication::getPublisher() const {
    return m_publisher;
}
void OAIInventoryWindowsApplication::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIInventoryWindowsApplication::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIInventoryWindowsApplication::is_publisher_Valid() const{
    return m_publisher_isValid;
}

bool OAIInventoryWindowsApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryWindowsApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
