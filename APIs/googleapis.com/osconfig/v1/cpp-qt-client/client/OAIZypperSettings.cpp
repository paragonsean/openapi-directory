/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZypperSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZypperSettings::OAIZypperSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZypperSettings::OAIZypperSettings() {
    this->initializeModel();
}

OAIZypperSettings::~OAIZypperSettings() {}

void OAIZypperSettings::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_excludes_isSet = false;
    m_excludes_isValid = false;

    m_exclusive_patches_isSet = false;
    m_exclusive_patches_isValid = false;

    m_severities_isSet = false;
    m_severities_isValid = false;

    m_with_optional_isSet = false;
    m_with_optional_isValid = false;

    m_with_update_isSet = false;
    m_with_update_isValid = false;
}

void OAIZypperSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZypperSettings::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_excludes_isValid = ::OpenAPI::fromJsonValue(m_excludes, json[QString("excludes")]);
    m_excludes_isSet = !json[QString("excludes")].isNull() && m_excludes_isValid;

    m_exclusive_patches_isValid = ::OpenAPI::fromJsonValue(m_exclusive_patches, json[QString("exclusivePatches")]);
    m_exclusive_patches_isSet = !json[QString("exclusivePatches")].isNull() && m_exclusive_patches_isValid;

    m_severities_isValid = ::OpenAPI::fromJsonValue(m_severities, json[QString("severities")]);
    m_severities_isSet = !json[QString("severities")].isNull() && m_severities_isValid;

    m_with_optional_isValid = ::OpenAPI::fromJsonValue(m_with_optional, json[QString("withOptional")]);
    m_with_optional_isSet = !json[QString("withOptional")].isNull() && m_with_optional_isValid;

    m_with_update_isValid = ::OpenAPI::fromJsonValue(m_with_update, json[QString("withUpdate")]);
    m_with_update_isSet = !json[QString("withUpdate")].isNull() && m_with_update_isValid;
}

QString OAIZypperSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZypperSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_excludes.size() > 0) {
        obj.insert(QString("excludes"), ::OpenAPI::toJsonValue(m_excludes));
    }
    if (m_exclusive_patches.size() > 0) {
        obj.insert(QString("exclusivePatches"), ::OpenAPI::toJsonValue(m_exclusive_patches));
    }
    if (m_severities.size() > 0) {
        obj.insert(QString("severities"), ::OpenAPI::toJsonValue(m_severities));
    }
    if (m_with_optional_isSet) {
        obj.insert(QString("withOptional"), ::OpenAPI::toJsonValue(m_with_optional));
    }
    if (m_with_update_isSet) {
        obj.insert(QString("withUpdate"), ::OpenAPI::toJsonValue(m_with_update));
    }
    return obj;
}

QList<QString> OAIZypperSettings::getCategories() const {
    return m_categories;
}
void OAIZypperSettings::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIZypperSettings::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIZypperSettings::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAIZypperSettings::getExcludes() const {
    return m_excludes;
}
void OAIZypperSettings::setExcludes(const QList<QString> &excludes) {
    m_excludes = excludes;
    m_excludes_isSet = true;
}

bool OAIZypperSettings::is_excludes_Set() const{
    return m_excludes_isSet;
}

bool OAIZypperSettings::is_excludes_Valid() const{
    return m_excludes_isValid;
}

QList<QString> OAIZypperSettings::getExclusivePatches() const {
    return m_exclusive_patches;
}
void OAIZypperSettings::setExclusivePatches(const QList<QString> &exclusive_patches) {
    m_exclusive_patches = exclusive_patches;
    m_exclusive_patches_isSet = true;
}

bool OAIZypperSettings::is_exclusive_patches_Set() const{
    return m_exclusive_patches_isSet;
}

bool OAIZypperSettings::is_exclusive_patches_Valid() const{
    return m_exclusive_patches_isValid;
}

QList<QString> OAIZypperSettings::getSeverities() const {
    return m_severities;
}
void OAIZypperSettings::setSeverities(const QList<QString> &severities) {
    m_severities = severities;
    m_severities_isSet = true;
}

bool OAIZypperSettings::is_severities_Set() const{
    return m_severities_isSet;
}

bool OAIZypperSettings::is_severities_Valid() const{
    return m_severities_isValid;
}

bool OAIZypperSettings::isWithOptional() const {
    return m_with_optional;
}
void OAIZypperSettings::setWithOptional(const bool &with_optional) {
    m_with_optional = with_optional;
    m_with_optional_isSet = true;
}

bool OAIZypperSettings::is_with_optional_Set() const{
    return m_with_optional_isSet;
}

bool OAIZypperSettings::is_with_optional_Valid() const{
    return m_with_optional_isValid;
}

bool OAIZypperSettings::isWithUpdate() const {
    return m_with_update;
}
void OAIZypperSettings::setWithUpdate(const bool &with_update) {
    m_with_update = with_update;
    m_with_update_isSet = true;
}

bool OAIZypperSettings::is_with_update_Set() const{
    return m_with_update_isSet;
}

bool OAIZypperSettings::is_with_update_Valid() const{
    return m_with_update_isValid;
}

bool OAIZypperSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excludes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_patches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZypperSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
