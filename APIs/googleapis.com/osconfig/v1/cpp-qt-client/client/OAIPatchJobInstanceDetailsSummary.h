/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPatchJobInstanceDetailsSummary.h
 *
 * A summary of the current patch state across all instances that this patch job affects. Contains counts of instances in different states. These states map to &#x60;InstancePatchState&#x60;. List patch job instance details to see the specific states of each instance.
 */

#ifndef OAIPatchJobInstanceDetailsSummary_H
#define OAIPatchJobInstanceDetailsSummary_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPatchJobInstanceDetailsSummary : public OAIObject {
public:
    OAIPatchJobInstanceDetailsSummary();
    OAIPatchJobInstanceDetailsSummary(QString json);
    ~OAIPatchJobInstanceDetailsSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAckedInstanceCount() const;
    void setAckedInstanceCount(const QString &acked_instance_count);
    bool is_acked_instance_count_Set() const;
    bool is_acked_instance_count_Valid() const;

    QString getApplyingPatchesInstanceCount() const;
    void setApplyingPatchesInstanceCount(const QString &applying_patches_instance_count);
    bool is_applying_patches_instance_count_Set() const;
    bool is_applying_patches_instance_count_Valid() const;

    QString getDownloadingPatchesInstanceCount() const;
    void setDownloadingPatchesInstanceCount(const QString &downloading_patches_instance_count);
    bool is_downloading_patches_instance_count_Set() const;
    bool is_downloading_patches_instance_count_Valid() const;

    QString getFailedInstanceCount() const;
    void setFailedInstanceCount(const QString &failed_instance_count);
    bool is_failed_instance_count_Set() const;
    bool is_failed_instance_count_Valid() const;

    QString getInactiveInstanceCount() const;
    void setInactiveInstanceCount(const QString &inactive_instance_count);
    bool is_inactive_instance_count_Set() const;
    bool is_inactive_instance_count_Valid() const;

    QString getNoAgentDetectedInstanceCount() const;
    void setNoAgentDetectedInstanceCount(const QString &no_agent_detected_instance_count);
    bool is_no_agent_detected_instance_count_Set() const;
    bool is_no_agent_detected_instance_count_Valid() const;

    QString getNotifiedInstanceCount() const;
    void setNotifiedInstanceCount(const QString &notified_instance_count);
    bool is_notified_instance_count_Set() const;
    bool is_notified_instance_count_Valid() const;

    QString getPendingInstanceCount() const;
    void setPendingInstanceCount(const QString &pending_instance_count);
    bool is_pending_instance_count_Set() const;
    bool is_pending_instance_count_Valid() const;

    QString getPostPatchStepInstanceCount() const;
    void setPostPatchStepInstanceCount(const QString &post_patch_step_instance_count);
    bool is_post_patch_step_instance_count_Set() const;
    bool is_post_patch_step_instance_count_Valid() const;

    QString getPrePatchStepInstanceCount() const;
    void setPrePatchStepInstanceCount(const QString &pre_patch_step_instance_count);
    bool is_pre_patch_step_instance_count_Set() const;
    bool is_pre_patch_step_instance_count_Valid() const;

    QString getRebootingInstanceCount() const;
    void setRebootingInstanceCount(const QString &rebooting_instance_count);
    bool is_rebooting_instance_count_Set() const;
    bool is_rebooting_instance_count_Valid() const;

    QString getStartedInstanceCount() const;
    void setStartedInstanceCount(const QString &started_instance_count);
    bool is_started_instance_count_Set() const;
    bool is_started_instance_count_Valid() const;

    QString getSucceededInstanceCount() const;
    void setSucceededInstanceCount(const QString &succeeded_instance_count);
    bool is_succeeded_instance_count_Set() const;
    bool is_succeeded_instance_count_Valid() const;

    QString getSucceededRebootRequiredInstanceCount() const;
    void setSucceededRebootRequiredInstanceCount(const QString &succeeded_reboot_required_instance_count);
    bool is_succeeded_reboot_required_instance_count_Set() const;
    bool is_succeeded_reboot_required_instance_count_Valid() const;

    QString getTimedOutInstanceCount() const;
    void setTimedOutInstanceCount(const QString &timed_out_instance_count);
    bool is_timed_out_instance_count_Set() const;
    bool is_timed_out_instance_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acked_instance_count;
    bool m_acked_instance_count_isSet;
    bool m_acked_instance_count_isValid;

    QString m_applying_patches_instance_count;
    bool m_applying_patches_instance_count_isSet;
    bool m_applying_patches_instance_count_isValid;

    QString m_downloading_patches_instance_count;
    bool m_downloading_patches_instance_count_isSet;
    bool m_downloading_patches_instance_count_isValid;

    QString m_failed_instance_count;
    bool m_failed_instance_count_isSet;
    bool m_failed_instance_count_isValid;

    QString m_inactive_instance_count;
    bool m_inactive_instance_count_isSet;
    bool m_inactive_instance_count_isValid;

    QString m_no_agent_detected_instance_count;
    bool m_no_agent_detected_instance_count_isSet;
    bool m_no_agent_detected_instance_count_isValid;

    QString m_notified_instance_count;
    bool m_notified_instance_count_isSet;
    bool m_notified_instance_count_isValid;

    QString m_pending_instance_count;
    bool m_pending_instance_count_isSet;
    bool m_pending_instance_count_isValid;

    QString m_post_patch_step_instance_count;
    bool m_post_patch_step_instance_count_isSet;
    bool m_post_patch_step_instance_count_isValid;

    QString m_pre_patch_step_instance_count;
    bool m_pre_patch_step_instance_count_isSet;
    bool m_pre_patch_step_instance_count_isValid;

    QString m_rebooting_instance_count;
    bool m_rebooting_instance_count_isSet;
    bool m_rebooting_instance_count_isValid;

    QString m_started_instance_count;
    bool m_started_instance_count_isSet;
    bool m_started_instance_count_isValid;

    QString m_succeeded_instance_count;
    bool m_succeeded_instance_count_isSet;
    bool m_succeeded_instance_count_isValid;

    QString m_succeeded_reboot_required_instance_count;
    bool m_succeeded_reboot_required_instance_count_isSet;
    bool m_succeeded_reboot_required_instance_count_isValid;

    QString m_timed_out_instance_count;
    bool m_timed_out_instance_count_isSet;
    bool m_timed_out_instance_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPatchJobInstanceDetailsSummary)

#endif // OAIPatchJobInstanceDetailsSummary_H
