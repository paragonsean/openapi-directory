/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceExecResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceExecResource::OAIOSPolicyResourceExecResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceExecResource::OAIOSPolicyResourceExecResource() {
    this->initializeModel();
}

OAIOSPolicyResourceExecResource::~OAIOSPolicyResourceExecResource() {}

void OAIOSPolicyResourceExecResource::initializeModel() {

    m_enforce_isSet = false;
    m_enforce_isValid = false;

    m_validate_isSet = false;
    m_validate_isValid = false;
}

void OAIOSPolicyResourceExecResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceExecResource::fromJsonObject(QJsonObject json) {

    m_enforce_isValid = ::OpenAPI::fromJsonValue(m_enforce, json[QString("enforce")]);
    m_enforce_isSet = !json[QString("enforce")].isNull() && m_enforce_isValid;

    m_validate_isValid = ::OpenAPI::fromJsonValue(m_validate, json[QString("validate")]);
    m_validate_isSet = !json[QString("validate")].isNull() && m_validate_isValid;
}

QString OAIOSPolicyResourceExecResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceExecResource::asJsonObject() const {
    QJsonObject obj;
    if (m_enforce.isSet()) {
        obj.insert(QString("enforce"), ::OpenAPI::toJsonValue(m_enforce));
    }
    if (m_validate.isSet()) {
        obj.insert(QString("validate"), ::OpenAPI::toJsonValue(m_validate));
    }
    return obj;
}

OAIOSPolicyResourceExecResourceExec OAIOSPolicyResourceExecResource::getEnforce() const {
    return m_enforce;
}
void OAIOSPolicyResourceExecResource::setEnforce(const OAIOSPolicyResourceExecResourceExec &enforce) {
    m_enforce = enforce;
    m_enforce_isSet = true;
}

bool OAIOSPolicyResourceExecResource::is_enforce_Set() const{
    return m_enforce_isSet;
}

bool OAIOSPolicyResourceExecResource::is_enforce_Valid() const{
    return m_enforce_isValid;
}

OAIOSPolicyResourceExecResourceExec OAIOSPolicyResourceExecResource::getValidate() const {
    return m_validate;
}
void OAIOSPolicyResourceExecResource::setValidate(const OAIOSPolicyResourceExecResourceExec &validate) {
    m_validate = validate;
    m_validate_isSet = true;
}

bool OAIOSPolicyResourceExecResource::is_validate_Set() const{
    return m_validate_isSet;
}

bool OAIOSPolicyResourceExecResource::is_validate_Valid() const{
    return m_validate_isValid;
}

bool OAIOSPolicyResourceExecResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enforce.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceExecResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
