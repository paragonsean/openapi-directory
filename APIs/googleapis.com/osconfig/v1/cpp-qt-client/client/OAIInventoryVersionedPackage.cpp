/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryVersionedPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryVersionedPackage::OAIInventoryVersionedPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryVersionedPackage::OAIInventoryVersionedPackage() {
    this->initializeModel();
}

OAIInventoryVersionedPackage::~OAIInventoryVersionedPackage() {}

void OAIInventoryVersionedPackage::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIInventoryVersionedPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryVersionedPackage::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIInventoryVersionedPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryVersionedPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIInventoryVersionedPackage::getArchitecture() const {
    return m_architecture;
}
void OAIInventoryVersionedPackage::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIInventoryVersionedPackage::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIInventoryVersionedPackage::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIInventoryVersionedPackage::getPackageName() const {
    return m_package_name;
}
void OAIInventoryVersionedPackage::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIInventoryVersionedPackage::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIInventoryVersionedPackage::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIInventoryVersionedPackage::getVersion() const {
    return m_version;
}
void OAIInventoryVersionedPackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIInventoryVersionedPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIInventoryVersionedPackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIInventoryVersionedPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryVersionedPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
