# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monthly_schedule import MonthlySchedule
from openapi_server.models.time_of_day import TimeOfDay
from openapi_server.models.time_zone import TimeZone
from openapi_server.models.weekly_schedule import WeeklySchedule
from openapi_server import util


class RecurringSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, frequency: str=None, last_execute_time: str=None, monthly: MonthlySchedule=None, next_execute_time: str=None, start_time: str=None, time_of_day: TimeOfDay=None, time_zone: TimeZone=None, weekly: WeeklySchedule=None):
        """RecurringSchedule - a model defined in OpenAPI

        :param end_time: The end_time of this RecurringSchedule.
        :param frequency: The frequency of this RecurringSchedule.
        :param last_execute_time: The last_execute_time of this RecurringSchedule.
        :param monthly: The monthly of this RecurringSchedule.
        :param next_execute_time: The next_execute_time of this RecurringSchedule.
        :param start_time: The start_time of this RecurringSchedule.
        :param time_of_day: The time_of_day of this RecurringSchedule.
        :param time_zone: The time_zone of this RecurringSchedule.
        :param weekly: The weekly of this RecurringSchedule.
        """
        self.openapi_types = {
            'end_time': str,
            'frequency': str,
            'last_execute_time': str,
            'monthly': MonthlySchedule,
            'next_execute_time': str,
            'start_time': str,
            'time_of_day': TimeOfDay,
            'time_zone': TimeZone,
            'weekly': WeeklySchedule
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'frequency': 'frequency',
            'last_execute_time': 'lastExecuteTime',
            'monthly': 'monthly',
            'next_execute_time': 'nextExecuteTime',
            'start_time': 'startTime',
            'time_of_day': 'timeOfDay',
            'time_zone': 'timeZone',
            'weekly': 'weekly'
        }

        self._end_time = end_time
        self._frequency = frequency
        self._last_execute_time = last_execute_time
        self._monthly = monthly
        self._next_execute_time = next_execute_time
        self._start_time = start_time
        self._time_of_day = time_of_day
        self._time_zone = time_zone
        self._weekly = weekly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurringSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurringSchedule of this RecurringSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this RecurringSchedule.

        Optional. The end time at which a recurring patch deployment schedule is no longer active.

        :return: The end_time of this RecurringSchedule.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RecurringSchedule.

        Optional. The end time at which a recurring patch deployment schedule is no longer active.

        :param end_time: The end_time of this RecurringSchedule.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def frequency(self):
        """Gets the frequency of this RecurringSchedule.

        Required. The frequency unit of this recurring schedule.

        :return: The frequency of this RecurringSchedule.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RecurringSchedule.

        Required. The frequency unit of this recurring schedule.

        :param frequency: The frequency of this RecurringSchedule.
        :type frequency: str
        """
        allowed_values = ["FREQUENCY_UNSPECIFIED", "WEEKLY", "MONTHLY", "DAILY"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def last_execute_time(self):
        """Gets the last_execute_time of this RecurringSchedule.

        Output only. The time the last patch job ran successfully.

        :return: The last_execute_time of this RecurringSchedule.
        :rtype: str
        """
        return self._last_execute_time

    @last_execute_time.setter
    def last_execute_time(self, last_execute_time):
        """Sets the last_execute_time of this RecurringSchedule.

        Output only. The time the last patch job ran successfully.

        :param last_execute_time: The last_execute_time of this RecurringSchedule.
        :type last_execute_time: str
        """

        self._last_execute_time = last_execute_time

    @property
    def monthly(self):
        """Gets the monthly of this RecurringSchedule.


        :return: The monthly of this RecurringSchedule.
        :rtype: MonthlySchedule
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this RecurringSchedule.


        :param monthly: The monthly of this RecurringSchedule.
        :type monthly: MonthlySchedule
        """

        self._monthly = monthly

    @property
    def next_execute_time(self):
        """Gets the next_execute_time of this RecurringSchedule.

        Output only. The time the next patch job is scheduled to run.

        :return: The next_execute_time of this RecurringSchedule.
        :rtype: str
        """
        return self._next_execute_time

    @next_execute_time.setter
    def next_execute_time(self, next_execute_time):
        """Sets the next_execute_time of this RecurringSchedule.

        Output only. The time the next patch job is scheduled to run.

        :param next_execute_time: The next_execute_time of this RecurringSchedule.
        :type next_execute_time: str
        """

        self._next_execute_time = next_execute_time

    @property
    def start_time(self):
        """Gets the start_time of this RecurringSchedule.

        Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.

        :return: The start_time of this RecurringSchedule.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RecurringSchedule.

        Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.

        :param start_time: The start_time of this RecurringSchedule.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def time_of_day(self):
        """Gets the time_of_day of this RecurringSchedule.


        :return: The time_of_day of this RecurringSchedule.
        :rtype: TimeOfDay
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this RecurringSchedule.


        :param time_of_day: The time_of_day of this RecurringSchedule.
        :type time_of_day: TimeOfDay
        """

        self._time_of_day = time_of_day

    @property
    def time_zone(self):
        """Gets the time_zone of this RecurringSchedule.


        :return: The time_zone of this RecurringSchedule.
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this RecurringSchedule.


        :param time_zone: The time_zone of this RecurringSchedule.
        :type time_zone: TimeZone
        """

        self._time_zone = time_zone

    @property
    def weekly(self):
        """Gets the weekly of this RecurringSchedule.


        :return: The weekly of this RecurringSchedule.
        :rtype: WeeklySchedule
        """
        return self._weekly

    @weekly.setter
    def weekly(self, weekly):
        """Sets the weekly of this RecurringSchedule.


        :param weekly: The weekly of this RecurringSchedule.
        :type weekly: WeeklySchedule
        """

        self._weekly = weekly
