# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_package_resource_apt import OSPolicyResourcePackageResourceAPT
from openapi_server.models.os_policy_resource_package_resource_deb import OSPolicyResourcePackageResourceDeb
from openapi_server.models.os_policy_resource_package_resource_goo_get import OSPolicyResourcePackageResourceGooGet
from openapi_server.models.os_policy_resource_package_resource_msi import OSPolicyResourcePackageResourceMSI
from openapi_server.models.os_policy_resource_package_resource_rpm import OSPolicyResourcePackageResourceRPM
from openapi_server.models.os_policy_resource_package_resource_yum import OSPolicyResourcePackageResourceYUM
from openapi_server.models.os_policy_resource_package_resource_zypper import OSPolicyResourcePackageResourceZypper
from openapi_server import util


class OSPolicyResourcePackageResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apt: OSPolicyResourcePackageResourceAPT=None, deb: OSPolicyResourcePackageResourceDeb=None, desired_state: str=None, googet: OSPolicyResourcePackageResourceGooGet=None, msi: OSPolicyResourcePackageResourceMSI=None, rpm: OSPolicyResourcePackageResourceRPM=None, yum: OSPolicyResourcePackageResourceYUM=None, zypper: OSPolicyResourcePackageResourceZypper=None):
        """OSPolicyResourcePackageResource - a model defined in OpenAPI

        :param apt: The apt of this OSPolicyResourcePackageResource.
        :param deb: The deb of this OSPolicyResourcePackageResource.
        :param desired_state: The desired_state of this OSPolicyResourcePackageResource.
        :param googet: The googet of this OSPolicyResourcePackageResource.
        :param msi: The msi of this OSPolicyResourcePackageResource.
        :param rpm: The rpm of this OSPolicyResourcePackageResource.
        :param yum: The yum of this OSPolicyResourcePackageResource.
        :param zypper: The zypper of this OSPolicyResourcePackageResource.
        """
        self.openapi_types = {
            'apt': OSPolicyResourcePackageResourceAPT,
            'deb': OSPolicyResourcePackageResourceDeb,
            'desired_state': str,
            'googet': OSPolicyResourcePackageResourceGooGet,
            'msi': OSPolicyResourcePackageResourceMSI,
            'rpm': OSPolicyResourcePackageResourceRPM,
            'yum': OSPolicyResourcePackageResourceYUM,
            'zypper': OSPolicyResourcePackageResourceZypper
        }

        self.attribute_map = {
            'apt': 'apt',
            'deb': 'deb',
            'desired_state': 'desiredState',
            'googet': 'googet',
            'msi': 'msi',
            'rpm': 'rpm',
            'yum': 'yum',
            'zypper': 'zypper'
        }

        self._apt = apt
        self._deb = deb
        self._desired_state = desired_state
        self._googet = googet
        self._msi = msi
        self._rpm = rpm
        self._yum = yum
        self._zypper = zypper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResourcePackageResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResourcePackageResource of this OSPolicyResourcePackageResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apt(self):
        """Gets the apt of this OSPolicyResourcePackageResource.


        :return: The apt of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceAPT
        """
        return self._apt

    @apt.setter
    def apt(self, apt):
        """Sets the apt of this OSPolicyResourcePackageResource.


        :param apt: The apt of this OSPolicyResourcePackageResource.
        :type apt: OSPolicyResourcePackageResourceAPT
        """

        self._apt = apt

    @property
    def deb(self):
        """Gets the deb of this OSPolicyResourcePackageResource.


        :return: The deb of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceDeb
        """
        return self._deb

    @deb.setter
    def deb(self, deb):
        """Sets the deb of this OSPolicyResourcePackageResource.


        :param deb: The deb of this OSPolicyResourcePackageResource.
        :type deb: OSPolicyResourcePackageResourceDeb
        """

        self._deb = deb

    @property
    def desired_state(self):
        """Gets the desired_state of this OSPolicyResourcePackageResource.

        Required. The desired state the agent should maintain for this package.

        :return: The desired_state of this OSPolicyResourcePackageResource.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this OSPolicyResourcePackageResource.

        Required. The desired state the agent should maintain for this package.

        :param desired_state: The desired_state of this OSPolicyResourcePackageResource.
        :type desired_state: str
        """
        allowed_values = ["DESIRED_STATE_UNSPECIFIED", "INSTALLED", "REMOVED"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def googet(self):
        """Gets the googet of this OSPolicyResourcePackageResource.


        :return: The googet of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceGooGet
        """
        return self._googet

    @googet.setter
    def googet(self, googet):
        """Sets the googet of this OSPolicyResourcePackageResource.


        :param googet: The googet of this OSPolicyResourcePackageResource.
        :type googet: OSPolicyResourcePackageResourceGooGet
        """

        self._googet = googet

    @property
    def msi(self):
        """Gets the msi of this OSPolicyResourcePackageResource.


        :return: The msi of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceMSI
        """
        return self._msi

    @msi.setter
    def msi(self, msi):
        """Sets the msi of this OSPolicyResourcePackageResource.


        :param msi: The msi of this OSPolicyResourcePackageResource.
        :type msi: OSPolicyResourcePackageResourceMSI
        """

        self._msi = msi

    @property
    def rpm(self):
        """Gets the rpm of this OSPolicyResourcePackageResource.


        :return: The rpm of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceRPM
        """
        return self._rpm

    @rpm.setter
    def rpm(self, rpm):
        """Sets the rpm of this OSPolicyResourcePackageResource.


        :param rpm: The rpm of this OSPolicyResourcePackageResource.
        :type rpm: OSPolicyResourcePackageResourceRPM
        """

        self._rpm = rpm

    @property
    def yum(self):
        """Gets the yum of this OSPolicyResourcePackageResource.


        :return: The yum of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceYUM
        """
        return self._yum

    @yum.setter
    def yum(self, yum):
        """Sets the yum of this OSPolicyResourcePackageResource.


        :param yum: The yum of this OSPolicyResourcePackageResource.
        :type yum: OSPolicyResourcePackageResourceYUM
        """

        self._yum = yum

    @property
    def zypper(self):
        """Gets the zypper of this OSPolicyResourcePackageResource.


        :return: The zypper of this OSPolicyResourcePackageResource.
        :rtype: OSPolicyResourcePackageResourceZypper
        """
        return self._zypper

    @zypper.setter
    def zypper(self, zypper):
        """Sets the zypper of this OSPolicyResourcePackageResource.


        :param zypper: The zypper of this OSPolicyResourcePackageResource.
        :type zypper: OSPolicyResourcePackageResourceZypper
        """

        self._zypper = zypper
