# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_assignment_report_os_policy_compliance import OSPolicyAssignmentReportOSPolicyCompliance
from openapi_server import util


class OSPolicyAssignmentReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance: str=None, last_run_id: str=None, name: str=None, os_policy_assignment: str=None, os_policy_compliances: List[OSPolicyAssignmentReportOSPolicyCompliance]=None, update_time: str=None):
        """OSPolicyAssignmentReport - a model defined in OpenAPI

        :param instance: The instance of this OSPolicyAssignmentReport.
        :param last_run_id: The last_run_id of this OSPolicyAssignmentReport.
        :param name: The name of this OSPolicyAssignmentReport.
        :param os_policy_assignment: The os_policy_assignment of this OSPolicyAssignmentReport.
        :param os_policy_compliances: The os_policy_compliances of this OSPolicyAssignmentReport.
        :param update_time: The update_time of this OSPolicyAssignmentReport.
        """
        self.openapi_types = {
            'instance': str,
            'last_run_id': str,
            'name': str,
            'os_policy_assignment': str,
            'os_policy_compliances': List[OSPolicyAssignmentReportOSPolicyCompliance],
            'update_time': str
        }

        self.attribute_map = {
            'instance': 'instance',
            'last_run_id': 'lastRunId',
            'name': 'name',
            'os_policy_assignment': 'osPolicyAssignment',
            'os_policy_compliances': 'osPolicyCompliances',
            'update_time': 'updateTime'
        }

        self._instance = instance
        self._last_run_id = last_run_id
        self._name = name
        self._os_policy_assignment = os_policy_assignment
        self._os_policy_compliances = os_policy_compliances
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignmentReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignmentReport of this OSPolicyAssignmentReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance(self):
        """Gets the instance of this OSPolicyAssignmentReport.

        The Compute Engine VM instance name.

        :return: The instance of this OSPolicyAssignmentReport.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this OSPolicyAssignmentReport.

        The Compute Engine VM instance name.

        :param instance: The instance of this OSPolicyAssignmentReport.
        :type instance: str
        """

        self._instance = instance

    @property
    def last_run_id(self):
        """Gets the last_run_id of this OSPolicyAssignmentReport.

        Unique identifier of the last attempted run to apply the OS policies associated with this assignment on the VM. This ID is logged by the OS Config agent while applying the OS policies associated with this assignment on the VM. NOTE: If the service is unable to successfully connect to the agent for this run, then this id will not be available in the agent logs.

        :return: The last_run_id of this OSPolicyAssignmentReport.
        :rtype: str
        """
        return self._last_run_id

    @last_run_id.setter
    def last_run_id(self, last_run_id):
        """Sets the last_run_id of this OSPolicyAssignmentReport.

        Unique identifier of the last attempted run to apply the OS policies associated with this assignment on the VM. This ID is logged by the OS Config agent while applying the OS policies associated with this assignment on the VM. NOTE: If the service is unable to successfully connect to the agent for this run, then this id will not be available in the agent logs.

        :param last_run_id: The last_run_id of this OSPolicyAssignmentReport.
        :type last_run_id: str
        """

        self._last_run_id = last_run_id

    @property
    def name(self):
        """Gets the name of this OSPolicyAssignmentReport.

        The `OSPolicyAssignmentReport` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/osPolicyAssignments/{os_policy_assignment_id}/report`

        :return: The name of this OSPolicyAssignmentReport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSPolicyAssignmentReport.

        The `OSPolicyAssignmentReport` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/osPolicyAssignments/{os_policy_assignment_id}/report`

        :param name: The name of this OSPolicyAssignmentReport.
        :type name: str
        """

        self._name = name

    @property
    def os_policy_assignment(self):
        """Gets the os_policy_assignment of this OSPolicyAssignmentReport.

        Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`

        :return: The os_policy_assignment of this OSPolicyAssignmentReport.
        :rtype: str
        """
        return self._os_policy_assignment

    @os_policy_assignment.setter
    def os_policy_assignment(self, os_policy_assignment):
        """Sets the os_policy_assignment of this OSPolicyAssignmentReport.

        Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`

        :param os_policy_assignment: The os_policy_assignment of this OSPolicyAssignmentReport.
        :type os_policy_assignment: str
        """

        self._os_policy_assignment = os_policy_assignment

    @property
    def os_policy_compliances(self):
        """Gets the os_policy_compliances of this OSPolicyAssignmentReport.

        Compliance data for each `OSPolicy` that is applied to the VM.

        :return: The os_policy_compliances of this OSPolicyAssignmentReport.
        :rtype: List[OSPolicyAssignmentReportOSPolicyCompliance]
        """
        return self._os_policy_compliances

    @os_policy_compliances.setter
    def os_policy_compliances(self, os_policy_compliances):
        """Sets the os_policy_compliances of this OSPolicyAssignmentReport.

        Compliance data for each `OSPolicy` that is applied to the VM.

        :param os_policy_compliances: The os_policy_compliances of this OSPolicyAssignmentReport.
        :type os_policy_compliances: List[OSPolicyAssignmentReportOSPolicyCompliance]
        """

        self._os_policy_compliances = os_policy_compliances

    @property
    def update_time(self):
        """Gets the update_time of this OSPolicyAssignmentReport.

        Timestamp for when the report was last generated.

        :return: The update_time of this OSPolicyAssignmentReport.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OSPolicyAssignmentReport.

        Timestamp for when the report was last generated.

        :param update_time: The update_time of this OSPolicyAssignmentReport.
        :type update_time: str
        """

        self._update_time = update_time
