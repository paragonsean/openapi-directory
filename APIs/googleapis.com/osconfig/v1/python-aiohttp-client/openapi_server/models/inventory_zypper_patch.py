# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryZypperPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, patch_name: str=None, severity: str=None, summary: str=None):
        """InventoryZypperPatch - a model defined in OpenAPI

        :param category: The category of this InventoryZypperPatch.
        :param patch_name: The patch_name of this InventoryZypperPatch.
        :param severity: The severity of this InventoryZypperPatch.
        :param summary: The summary of this InventoryZypperPatch.
        """
        self.openapi_types = {
            'category': str,
            'patch_name': str,
            'severity': str,
            'summary': str
        }

        self.attribute_map = {
            'category': 'category',
            'patch_name': 'patchName',
            'severity': 'severity',
            'summary': 'summary'
        }

        self._category = category
        self._patch_name = patch_name
        self._severity = severity
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryZypperPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryZypperPatch of this InventoryZypperPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this InventoryZypperPatch.

        The category of the patch.

        :return: The category of this InventoryZypperPatch.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InventoryZypperPatch.

        The category of the patch.

        :param category: The category of this InventoryZypperPatch.
        :type category: str
        """

        self._category = category

    @property
    def patch_name(self):
        """Gets the patch_name of this InventoryZypperPatch.

        The name of the patch.

        :return: The patch_name of this InventoryZypperPatch.
        :rtype: str
        """
        return self._patch_name

    @patch_name.setter
    def patch_name(self, patch_name):
        """Sets the patch_name of this InventoryZypperPatch.

        The name of the patch.

        :param patch_name: The patch_name of this InventoryZypperPatch.
        :type patch_name: str
        """

        self._patch_name = patch_name

    @property
    def severity(self):
        """Gets the severity of this InventoryZypperPatch.

        The severity specified for this patch

        :return: The severity of this InventoryZypperPatch.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this InventoryZypperPatch.

        The severity specified for this patch

        :param severity: The severity of this InventoryZypperPatch.
        :type severity: str
        """

        self._severity = severity

    @property
    def summary(self):
        """Gets the summary of this InventoryZypperPatch.

        Any summary information provided about this patch.

        :return: The summary of this InventoryZypperPatch.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this InventoryZypperPatch.

        Any summary information provided about this patch.

        :param summary: The summary of this InventoryZypperPatch.
        :type summary: str
        """

        self._summary = summary
