# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_config import PatchConfig
from openapi_server.models.patch_instance_filter import PatchInstanceFilter
from openapi_server.models.patch_job_instance_details_summary import PatchJobInstanceDetailsSummary
from openapi_server.models.patch_rollout import PatchRollout
from openapi_server import util


class PatchJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, dry_run: bool=None, duration: str=None, error_message: str=None, instance_details_summary: PatchJobInstanceDetailsSummary=None, instance_filter: PatchInstanceFilter=None, name: str=None, patch_config: PatchConfig=None, patch_deployment: str=None, percent_complete: float=None, rollout: PatchRollout=None, state: str=None, update_time: str=None):
        """PatchJob - a model defined in OpenAPI

        :param create_time: The create_time of this PatchJob.
        :param description: The description of this PatchJob.
        :param display_name: The display_name of this PatchJob.
        :param dry_run: The dry_run of this PatchJob.
        :param duration: The duration of this PatchJob.
        :param error_message: The error_message of this PatchJob.
        :param instance_details_summary: The instance_details_summary of this PatchJob.
        :param instance_filter: The instance_filter of this PatchJob.
        :param name: The name of this PatchJob.
        :param patch_config: The patch_config of this PatchJob.
        :param patch_deployment: The patch_deployment of this PatchJob.
        :param percent_complete: The percent_complete of this PatchJob.
        :param rollout: The rollout of this PatchJob.
        :param state: The state of this PatchJob.
        :param update_time: The update_time of this PatchJob.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'dry_run': bool,
            'duration': str,
            'error_message': str,
            'instance_details_summary': PatchJobInstanceDetailsSummary,
            'instance_filter': PatchInstanceFilter,
            'name': str,
            'patch_config': PatchConfig,
            'patch_deployment': str,
            'percent_complete': float,
            'rollout': PatchRollout,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'dry_run': 'dryRun',
            'duration': 'duration',
            'error_message': 'errorMessage',
            'instance_details_summary': 'instanceDetailsSummary',
            'instance_filter': 'instanceFilter',
            'name': 'name',
            'patch_config': 'patchConfig',
            'patch_deployment': 'patchDeployment',
            'percent_complete': 'percentComplete',
            'rollout': 'rollout',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._dry_run = dry_run
        self._duration = duration
        self._error_message = error_message
        self._instance_details_summary = instance_details_summary
        self._instance_filter = instance_filter
        self._name = name
        self._patch_config = patch_config
        self._patch_deployment = patch_deployment
        self._percent_complete = percent_complete
        self._rollout = rollout
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchJob of this PatchJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PatchJob.

        Time this patch job was created.

        :return: The create_time of this PatchJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PatchJob.

        Time this patch job was created.

        :param create_time: The create_time of this PatchJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this PatchJob.

        Description of the patch job. Length of the description is limited to 1024 characters.

        :return: The description of this PatchJob.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchJob.

        Description of the patch job. Length of the description is limited to 1024 characters.

        :param description: The description of this PatchJob.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this PatchJob.

        Display name for this patch job. This is not a unique identifier.

        :return: The display_name of this PatchJob.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PatchJob.

        Display name for this patch job. This is not a unique identifier.

        :param display_name: The display_name of this PatchJob.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dry_run(self):
        """Gets the dry_run of this PatchJob.

        If this patch job is a dry run, the agent reports that it has finished without running any updates on the VM instance.

        :return: The dry_run of this PatchJob.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this PatchJob.

        If this patch job is a dry run, the agent reports that it has finished without running any updates on the VM instance.

        :param dry_run: The dry_run of this PatchJob.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def duration(self):
        """Gets the duration of this PatchJob.

        Duration of the patch job. After the duration ends, the patch job times out.

        :return: The duration of this PatchJob.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PatchJob.

        Duration of the patch job. After the duration ends, the patch job times out.

        :param duration: The duration of this PatchJob.
        :type duration: str
        """

        self._duration = duration

    @property
    def error_message(self):
        """Gets the error_message of this PatchJob.

        If this patch job failed, this message provides information about the failure.

        :return: The error_message of this PatchJob.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PatchJob.

        If this patch job failed, this message provides information about the failure.

        :param error_message: The error_message of this PatchJob.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def instance_details_summary(self):
        """Gets the instance_details_summary of this PatchJob.


        :return: The instance_details_summary of this PatchJob.
        :rtype: PatchJobInstanceDetailsSummary
        """
        return self._instance_details_summary

    @instance_details_summary.setter
    def instance_details_summary(self, instance_details_summary):
        """Sets the instance_details_summary of this PatchJob.


        :param instance_details_summary: The instance_details_summary of this PatchJob.
        :type instance_details_summary: PatchJobInstanceDetailsSummary
        """

        self._instance_details_summary = instance_details_summary

    @property
    def instance_filter(self):
        """Gets the instance_filter of this PatchJob.


        :return: The instance_filter of this PatchJob.
        :rtype: PatchInstanceFilter
        """
        return self._instance_filter

    @instance_filter.setter
    def instance_filter(self, instance_filter):
        """Sets the instance_filter of this PatchJob.


        :param instance_filter: The instance_filter of this PatchJob.
        :type instance_filter: PatchInstanceFilter
        """

        self._instance_filter = instance_filter

    @property
    def name(self):
        """Gets the name of this PatchJob.

        Unique identifier for this patch job in the form `projects/*/patchJobs/*`

        :return: The name of this PatchJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchJob.

        Unique identifier for this patch job in the form `projects/*/patchJobs/*`

        :param name: The name of this PatchJob.
        :type name: str
        """

        self._name = name

    @property
    def patch_config(self):
        """Gets the patch_config of this PatchJob.


        :return: The patch_config of this PatchJob.
        :rtype: PatchConfig
        """
        return self._patch_config

    @patch_config.setter
    def patch_config(self, patch_config):
        """Sets the patch_config of this PatchJob.


        :param patch_config: The patch_config of this PatchJob.
        :type patch_config: PatchConfig
        """

        self._patch_config = patch_config

    @property
    def patch_deployment(self):
        """Gets the patch_deployment of this PatchJob.

        Output only. Name of the patch deployment that created this patch job.

        :return: The patch_deployment of this PatchJob.
        :rtype: str
        """
        return self._patch_deployment

    @patch_deployment.setter
    def patch_deployment(self, patch_deployment):
        """Sets the patch_deployment of this PatchJob.

        Output only. Name of the patch deployment that created this patch job.

        :param patch_deployment: The patch_deployment of this PatchJob.
        :type patch_deployment: str
        """

        self._patch_deployment = patch_deployment

    @property
    def percent_complete(self):
        """Gets the percent_complete of this PatchJob.

        Reflects the overall progress of the patch job in the range of 0.0 being no progress to 100.0 being complete.

        :return: The percent_complete of this PatchJob.
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this PatchJob.

        Reflects the overall progress of the patch job in the range of 0.0 being no progress to 100.0 being complete.

        :param percent_complete: The percent_complete of this PatchJob.
        :type percent_complete: float
        """

        self._percent_complete = percent_complete

    @property
    def rollout(self):
        """Gets the rollout of this PatchJob.


        :return: The rollout of this PatchJob.
        :rtype: PatchRollout
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this PatchJob.


        :param rollout: The rollout of this PatchJob.
        :type rollout: PatchRollout
        """

        self._rollout = rollout

    @property
    def state(self):
        """Gets the state of this PatchJob.

        The current state of the PatchJob.

        :return: The state of this PatchJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PatchJob.

        The current state of the PatchJob.

        :param state: The state of this PatchJob.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STARTED", "INSTANCE_LOOKUP", "PATCHING", "SUCCEEDED", "COMPLETED_WITH_ERRORS", "CANCELED", "TIMED_OUT"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this PatchJob.

        Last time this patch job was updated.

        :return: The update_time of this PatchJob.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PatchJob.

        Last time this patch job was updated.

        :param update_time: The update_time of this PatchJob.
        :type update_time: str
        """

        self._update_time = update_time
