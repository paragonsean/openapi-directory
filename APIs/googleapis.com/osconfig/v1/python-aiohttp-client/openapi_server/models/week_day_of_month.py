# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeekDayOfMonth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: str=None, day_offset: int=None, week_ordinal: int=None):
        """WeekDayOfMonth - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this WeekDayOfMonth.
        :param day_offset: The day_offset of this WeekDayOfMonth.
        :param week_ordinal: The week_ordinal of this WeekDayOfMonth.
        """
        self.openapi_types = {
            'day_of_week': str,
            'day_offset': int,
            'week_ordinal': int
        }

        self.attribute_map = {
            'day_of_week': 'dayOfWeek',
            'day_offset': 'dayOffset',
            'week_ordinal': 'weekOrdinal'
        }

        self._day_of_week = day_of_week
        self._day_offset = day_offset
        self._week_ordinal = week_ordinal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeekDayOfMonth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeekDayOfMonth of this WeekDayOfMonth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this WeekDayOfMonth.

        Required. A day of the week.

        :return: The day_of_week of this WeekDayOfMonth.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this WeekDayOfMonth.

        Required. A day of the week.

        :param day_of_week: The day_of_week of this WeekDayOfMonth.
        :type day_of_week: str
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def day_offset(self):
        """Gets the day_offset of this WeekDayOfMonth.

        Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second Tuesday of the month and the `day_offset` value is set to `3`, patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, patches are deployed five days before the second Tuesday of the month. Allowed values are in range [-30, 30].

        :return: The day_offset of this WeekDayOfMonth.
        :rtype: int
        """
        return self._day_offset

    @day_offset.setter
    def day_offset(self, day_offset):
        """Sets the day_offset of this WeekDayOfMonth.

        Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second Tuesday of the month and the `day_offset` value is set to `3`, patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, patches are deployed five days before the second Tuesday of the month. Allowed values are in range [-30, 30].

        :param day_offset: The day_offset of this WeekDayOfMonth.
        :type day_offset: int
        """

        self._day_offset = day_offset

    @property
    def week_ordinal(self):
        """Gets the week_ordinal of this WeekDayOfMonth.

        Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.

        :return: The week_ordinal of this WeekDayOfMonth.
        :rtype: int
        """
        return self._week_ordinal

    @week_ordinal.setter
    def week_ordinal(self, week_ordinal):
        """Sets the week_ordinal of this WeekDayOfMonth.

        Required. Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.

        :param week_ordinal: The week_ordinal of this WeekDayOfMonth.
        :type week_ordinal: int
        """

        self._week_ordinal = week_ordinal
