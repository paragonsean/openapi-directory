# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OSPolicyAssignmentOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_method: str=None, os_policy_assignment: str=None, rollout_start_time: str=None, rollout_state: str=None, rollout_update_time: str=None):
        """OSPolicyAssignmentOperationMetadata - a model defined in OpenAPI

        :param api_method: The api_method of this OSPolicyAssignmentOperationMetadata.
        :param os_policy_assignment: The os_policy_assignment of this OSPolicyAssignmentOperationMetadata.
        :param rollout_start_time: The rollout_start_time of this OSPolicyAssignmentOperationMetadata.
        :param rollout_state: The rollout_state of this OSPolicyAssignmentOperationMetadata.
        :param rollout_update_time: The rollout_update_time of this OSPolicyAssignmentOperationMetadata.
        """
        self.openapi_types = {
            'api_method': str,
            'os_policy_assignment': str,
            'rollout_start_time': str,
            'rollout_state': str,
            'rollout_update_time': str
        }

        self.attribute_map = {
            'api_method': 'apiMethod',
            'os_policy_assignment': 'osPolicyAssignment',
            'rollout_start_time': 'rolloutStartTime',
            'rollout_state': 'rolloutState',
            'rollout_update_time': 'rolloutUpdateTime'
        }

        self._api_method = api_method
        self._os_policy_assignment = os_policy_assignment
        self._rollout_start_time = rollout_start_time
        self._rollout_state = rollout_state
        self._rollout_update_time = rollout_update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignmentOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignmentOperationMetadata of this OSPolicyAssignmentOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_method(self):
        """Gets the api_method of this OSPolicyAssignmentOperationMetadata.

        The OS policy assignment API method.

        :return: The api_method of this OSPolicyAssignmentOperationMetadata.
        :rtype: str
        """
        return self._api_method

    @api_method.setter
    def api_method(self, api_method):
        """Sets the api_method of this OSPolicyAssignmentOperationMetadata.

        The OS policy assignment API method.

        :param api_method: The api_method of this OSPolicyAssignmentOperationMetadata.
        :type api_method: str
        """
        allowed_values = ["API_METHOD_UNSPECIFIED", "CREATE", "UPDATE", "DELETE"]  # noqa: E501
        if api_method not in allowed_values:
            raise ValueError(
                "Invalid value for `api_method` ({0}), must be one of {1}"
                .format(api_method, allowed_values)
            )

        self._api_method = api_method

    @property
    def os_policy_assignment(self):
        """Gets the os_policy_assignment of this OSPolicyAssignmentOperationMetadata.

        Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`

        :return: The os_policy_assignment of this OSPolicyAssignmentOperationMetadata.
        :rtype: str
        """
        return self._os_policy_assignment

    @os_policy_assignment.setter
    def os_policy_assignment(self, os_policy_assignment):
        """Sets the os_policy_assignment of this OSPolicyAssignmentOperationMetadata.

        Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`

        :param os_policy_assignment: The os_policy_assignment of this OSPolicyAssignmentOperationMetadata.
        :type os_policy_assignment: str
        """

        self._os_policy_assignment = os_policy_assignment

    @property
    def rollout_start_time(self):
        """Gets the rollout_start_time of this OSPolicyAssignmentOperationMetadata.

        Rollout start time

        :return: The rollout_start_time of this OSPolicyAssignmentOperationMetadata.
        :rtype: str
        """
        return self._rollout_start_time

    @rollout_start_time.setter
    def rollout_start_time(self, rollout_start_time):
        """Sets the rollout_start_time of this OSPolicyAssignmentOperationMetadata.

        Rollout start time

        :param rollout_start_time: The rollout_start_time of this OSPolicyAssignmentOperationMetadata.
        :type rollout_start_time: str
        """

        self._rollout_start_time = rollout_start_time

    @property
    def rollout_state(self):
        """Gets the rollout_state of this OSPolicyAssignmentOperationMetadata.

        State of the rollout

        :return: The rollout_state of this OSPolicyAssignmentOperationMetadata.
        :rtype: str
        """
        return self._rollout_state

    @rollout_state.setter
    def rollout_state(self, rollout_state):
        """Sets the rollout_state of this OSPolicyAssignmentOperationMetadata.

        State of the rollout

        :param rollout_state: The rollout_state of this OSPolicyAssignmentOperationMetadata.
        :type rollout_state: str
        """
        allowed_values = ["ROLLOUT_STATE_UNSPECIFIED", "IN_PROGRESS", "CANCELLING", "CANCELLED", "SUCCEEDED"]  # noqa: E501
        if rollout_state not in allowed_values:
            raise ValueError(
                "Invalid value for `rollout_state` ({0}), must be one of {1}"
                .format(rollout_state, allowed_values)
            )

        self._rollout_state = rollout_state

    @property
    def rollout_update_time(self):
        """Gets the rollout_update_time of this OSPolicyAssignmentOperationMetadata.

        Rollout update time

        :return: The rollout_update_time of this OSPolicyAssignmentOperationMetadata.
        :rtype: str
        """
        return self._rollout_update_time

    @rollout_update_time.setter
    def rollout_update_time(self, rollout_update_time):
        """Sets the rollout_update_time of this OSPolicyAssignmentOperationMetadata.

        Rollout update time

        :param rollout_update_time: The rollout_update_time of this OSPolicyAssignmentOperationMetadata.
        :type rollout_update_time: str
        """

        self._rollout_update_time = rollout_update_time
