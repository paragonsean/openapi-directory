# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_inventory_filter import OSPolicyInventoryFilter
from openapi_server.models.os_policy_resource import OSPolicyResource
from openapi_server import util


class OSPolicyResourceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inventory_filters: List[OSPolicyInventoryFilter]=None, resources: List[OSPolicyResource]=None):
        """OSPolicyResourceGroup - a model defined in OpenAPI

        :param inventory_filters: The inventory_filters of this OSPolicyResourceGroup.
        :param resources: The resources of this OSPolicyResourceGroup.
        """
        self.openapi_types = {
            'inventory_filters': List[OSPolicyInventoryFilter],
            'resources': List[OSPolicyResource]
        }

        self.attribute_map = {
            'inventory_filters': 'inventoryFilters',
            'resources': 'resources'
        }

        self._inventory_filters = inventory_filters
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResourceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResourceGroup of this OSPolicyResourceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inventory_filters(self):
        """Gets the inventory_filters of this OSPolicyResourceGroup.

        List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.

        :return: The inventory_filters of this OSPolicyResourceGroup.
        :rtype: List[OSPolicyInventoryFilter]
        """
        return self._inventory_filters

    @inventory_filters.setter
    def inventory_filters(self, inventory_filters):
        """Sets the inventory_filters of this OSPolicyResourceGroup.

        List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.

        :param inventory_filters: The inventory_filters of this OSPolicyResourceGroup.
        :type inventory_filters: List[OSPolicyInventoryFilter]
        """

        self._inventory_filters = inventory_filters

    @property
    def resources(self):
        """Gets the resources of this OSPolicyResourceGroup.

        Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.

        :return: The resources of this OSPolicyResourceGroup.
        :rtype: List[OSPolicyResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this OSPolicyResourceGroup.

        Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.

        :param resources: The resources of this OSPolicyResourceGroup.
        :type resources: List[OSPolicyResource]
        """

        self._resources = resources
