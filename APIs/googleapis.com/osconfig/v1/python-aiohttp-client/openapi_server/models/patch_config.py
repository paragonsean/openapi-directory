# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apt_settings import AptSettings
from openapi_server.models.exec_step import ExecStep
from openapi_server.models.windows_update_settings import WindowsUpdateSettings
from openapi_server.models.yum_settings import YumSettings
from openapi_server.models.zypper_settings import ZypperSettings
from openapi_server import util


class PatchConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apt: AptSettings=None, goo: object=None, mig_instances_allowed: bool=None, post_step: ExecStep=None, pre_step: ExecStep=None, reboot_config: str=None, windows_update: WindowsUpdateSettings=None, yum: YumSettings=None, zypper: ZypperSettings=None):
        """PatchConfig - a model defined in OpenAPI

        :param apt: The apt of this PatchConfig.
        :param goo: The goo of this PatchConfig.
        :param mig_instances_allowed: The mig_instances_allowed of this PatchConfig.
        :param post_step: The post_step of this PatchConfig.
        :param pre_step: The pre_step of this PatchConfig.
        :param reboot_config: The reboot_config of this PatchConfig.
        :param windows_update: The windows_update of this PatchConfig.
        :param yum: The yum of this PatchConfig.
        :param zypper: The zypper of this PatchConfig.
        """
        self.openapi_types = {
            'apt': AptSettings,
            'goo': object,
            'mig_instances_allowed': bool,
            'post_step': ExecStep,
            'pre_step': ExecStep,
            'reboot_config': str,
            'windows_update': WindowsUpdateSettings,
            'yum': YumSettings,
            'zypper': ZypperSettings
        }

        self.attribute_map = {
            'apt': 'apt',
            'goo': 'goo',
            'mig_instances_allowed': 'migInstancesAllowed',
            'post_step': 'postStep',
            'pre_step': 'preStep',
            'reboot_config': 'rebootConfig',
            'windows_update': 'windowsUpdate',
            'yum': 'yum',
            'zypper': 'zypper'
        }

        self._apt = apt
        self._goo = goo
        self._mig_instances_allowed = mig_instances_allowed
        self._post_step = post_step
        self._pre_step = pre_step
        self._reboot_config = reboot_config
        self._windows_update = windows_update
        self._yum = yum
        self._zypper = zypper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchConfig of this PatchConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apt(self):
        """Gets the apt of this PatchConfig.


        :return: The apt of this PatchConfig.
        :rtype: AptSettings
        """
        return self._apt

    @apt.setter
    def apt(self, apt):
        """Sets the apt of this PatchConfig.


        :param apt: The apt of this PatchConfig.
        :type apt: AptSettings
        """

        self._apt = apt

    @property
    def goo(self):
        """Gets the goo of this PatchConfig.

        Googet patching is performed by running `googet update`.

        :return: The goo of this PatchConfig.
        :rtype: object
        """
        return self._goo

    @goo.setter
    def goo(self, goo):
        """Sets the goo of this PatchConfig.

        Googet patching is performed by running `googet update`.

        :param goo: The goo of this PatchConfig.
        :type goo: object
        """

        self._goo = goo

    @property
    def mig_instances_allowed(self):
        """Gets the mig_instances_allowed of this PatchConfig.

        Allows the patch job to run on Managed instance groups (MIGs).

        :return: The mig_instances_allowed of this PatchConfig.
        :rtype: bool
        """
        return self._mig_instances_allowed

    @mig_instances_allowed.setter
    def mig_instances_allowed(self, mig_instances_allowed):
        """Sets the mig_instances_allowed of this PatchConfig.

        Allows the patch job to run on Managed instance groups (MIGs).

        :param mig_instances_allowed: The mig_instances_allowed of this PatchConfig.
        :type mig_instances_allowed: bool
        """

        self._mig_instances_allowed = mig_instances_allowed

    @property
    def post_step(self):
        """Gets the post_step of this PatchConfig.


        :return: The post_step of this PatchConfig.
        :rtype: ExecStep
        """
        return self._post_step

    @post_step.setter
    def post_step(self, post_step):
        """Sets the post_step of this PatchConfig.


        :param post_step: The post_step of this PatchConfig.
        :type post_step: ExecStep
        """

        self._post_step = post_step

    @property
    def pre_step(self):
        """Gets the pre_step of this PatchConfig.


        :return: The pre_step of this PatchConfig.
        :rtype: ExecStep
        """
        return self._pre_step

    @pre_step.setter
    def pre_step(self, pre_step):
        """Sets the pre_step of this PatchConfig.


        :param pre_step: The pre_step of this PatchConfig.
        :type pre_step: ExecStep
        """

        self._pre_step = pre_step

    @property
    def reboot_config(self):
        """Gets the reboot_config of this PatchConfig.

        Post-patch reboot settings.

        :return: The reboot_config of this PatchConfig.
        :rtype: str
        """
        return self._reboot_config

    @reboot_config.setter
    def reboot_config(self, reboot_config):
        """Sets the reboot_config of this PatchConfig.

        Post-patch reboot settings.

        :param reboot_config: The reboot_config of this PatchConfig.
        :type reboot_config: str
        """
        allowed_values = ["REBOOT_CONFIG_UNSPECIFIED", "DEFAULT", "ALWAYS", "NEVER"]  # noqa: E501
        if reboot_config not in allowed_values:
            raise ValueError(
                "Invalid value for `reboot_config` ({0}), must be one of {1}"
                .format(reboot_config, allowed_values)
            )

        self._reboot_config = reboot_config

    @property
    def windows_update(self):
        """Gets the windows_update of this PatchConfig.


        :return: The windows_update of this PatchConfig.
        :rtype: WindowsUpdateSettings
        """
        return self._windows_update

    @windows_update.setter
    def windows_update(self, windows_update):
        """Sets the windows_update of this PatchConfig.


        :param windows_update: The windows_update of this PatchConfig.
        :type windows_update: WindowsUpdateSettings
        """

        self._windows_update = windows_update

    @property
    def yum(self):
        """Gets the yum of this PatchConfig.


        :return: The yum of this PatchConfig.
        :rtype: YumSettings
        """
        return self._yum

    @yum.setter
    def yum(self, yum):
        """Sets the yum of this PatchConfig.


        :param yum: The yum of this PatchConfig.
        :type yum: YumSettings
        """

        self._yum = yum

    @property
    def zypper(self):
        """Gets the zypper of this PatchConfig.


        :return: The zypper of this PatchConfig.
        :rtype: ZypperSettings
        """
        return self._zypper

    @zypper.setter
    def zypper(self, zypper):
        """Sets the zypper of this PatchConfig.


        :param zypper: The zypper of this PatchConfig.
        :type zypper: ZypperSettings
        """

        self._zypper = zypper
