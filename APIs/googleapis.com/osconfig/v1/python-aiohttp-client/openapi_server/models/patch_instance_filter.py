# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_instance_filter_group_label import PatchInstanceFilterGroupLabel
from openapi_server import util


class PatchInstanceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: bool=None, group_labels: List[PatchInstanceFilterGroupLabel]=None, instance_name_prefixes: List[str]=None, instances: List[str]=None, zones: List[str]=None):
        """PatchInstanceFilter - a model defined in OpenAPI

        :param all: The all of this PatchInstanceFilter.
        :param group_labels: The group_labels of this PatchInstanceFilter.
        :param instance_name_prefixes: The instance_name_prefixes of this PatchInstanceFilter.
        :param instances: The instances of this PatchInstanceFilter.
        :param zones: The zones of this PatchInstanceFilter.
        """
        self.openapi_types = {
            'all': bool,
            'group_labels': List[PatchInstanceFilterGroupLabel],
            'instance_name_prefixes': List[str],
            'instances': List[str],
            'zones': List[str]
        }

        self.attribute_map = {
            'all': 'all',
            'group_labels': 'groupLabels',
            'instance_name_prefixes': 'instanceNamePrefixes',
            'instances': 'instances',
            'zones': 'zones'
        }

        self._all = all
        self._group_labels = group_labels
        self._instance_name_prefixes = instance_name_prefixes
        self._instances = instances
        self._zones = zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchInstanceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchInstanceFilter of this PatchInstanceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this PatchInstanceFilter.

        Target all VM instances in the project. If true, no other criteria is permitted.

        :return: The all of this PatchInstanceFilter.
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this PatchInstanceFilter.

        Target all VM instances in the project. If true, no other criteria is permitted.

        :param all: The all of this PatchInstanceFilter.
        :type all: bool
        """

        self._all = all

    @property
    def group_labels(self):
        """Gets the group_labels of this PatchInstanceFilter.

        Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.

        :return: The group_labels of this PatchInstanceFilter.
        :rtype: List[PatchInstanceFilterGroupLabel]
        """
        return self._group_labels

    @group_labels.setter
    def group_labels(self, group_labels):
        """Sets the group_labels of this PatchInstanceFilter.

        Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.

        :param group_labels: The group_labels of this PatchInstanceFilter.
        :type group_labels: List[PatchInstanceFilterGroupLabel]
        """

        self._group_labels = group_labels

    @property
    def instance_name_prefixes(self):
        """Gets the instance_name_prefixes of this PatchInstanceFilter.

        Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=\"prod-\".

        :return: The instance_name_prefixes of this PatchInstanceFilter.
        :rtype: List[str]
        """
        return self._instance_name_prefixes

    @instance_name_prefixes.setter
    def instance_name_prefixes(self, instance_name_prefixes):
        """Sets the instance_name_prefixes of this PatchInstanceFilter.

        Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=\"prod-\".

        :param instance_name_prefixes: The instance_name_prefixes of this PatchInstanceFilter.
        :type instance_name_prefixes: List[str]
        """

        self._instance_name_prefixes = instance_name_prefixes

    @property
    def instances(self):
        """Gets the instances of this PatchInstanceFilter.

        Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`

        :return: The instances of this PatchInstanceFilter.
        :rtype: List[str]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this PatchInstanceFilter.

        Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`

        :param instances: The instances of this PatchInstanceFilter.
        :type instances: List[str]
        """

        self._instances = instances

    @property
    def zones(self):
        """Gets the zones of this PatchInstanceFilter.

        Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.

        :return: The zones of this PatchInstanceFilter.
        :rtype: List[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this PatchInstanceFilter.

        Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.

        :param zones: The zones of this PatchInstanceFilter.
        :type zones: List[str]
        """

        self._zones = zones
