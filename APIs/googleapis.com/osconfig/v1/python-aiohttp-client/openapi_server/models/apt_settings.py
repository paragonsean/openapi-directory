# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AptSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excludes: List[str]=None, exclusive_packages: List[str]=None, type: str=None):
        """AptSettings - a model defined in OpenAPI

        :param excludes: The excludes of this AptSettings.
        :param exclusive_packages: The exclusive_packages of this AptSettings.
        :param type: The type of this AptSettings.
        """
        self.openapi_types = {
            'excludes': List[str],
            'exclusive_packages': List[str],
            'type': str
        }

        self.attribute_map = {
            'excludes': 'excludes',
            'exclusive_packages': 'exclusivePackages',
            'type': 'type'
        }

        self._excludes = excludes
        self._exclusive_packages = exclusive_packages
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AptSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AptSettings of this AptSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excludes(self):
        """Gets the excludes of this AptSettings.

        List of packages to exclude from update. These packages will be excluded

        :return: The excludes of this AptSettings.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this AptSettings.

        List of packages to exclude from update. These packages will be excluded

        :param excludes: The excludes of this AptSettings.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def exclusive_packages(self):
        """Gets the exclusive_packages of this AptSettings.

        An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.

        :return: The exclusive_packages of this AptSettings.
        :rtype: List[str]
        """
        return self._exclusive_packages

    @exclusive_packages.setter
    def exclusive_packages(self, exclusive_packages):
        """Sets the exclusive_packages of this AptSettings.

        An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.

        :param exclusive_packages: The exclusive_packages of this AptSettings.
        :type exclusive_packages: List[str]
        """

        self._exclusive_packages = exclusive_packages

    @property
    def type(self):
        """Gets the type of this AptSettings.

        By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.

        :return: The type of this AptSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AptSettings.

        By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.

        :param type: The type of this AptSettings.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "DIST", "UPGRADE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
