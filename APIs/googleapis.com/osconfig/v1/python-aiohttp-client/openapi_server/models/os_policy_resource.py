# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_exec_resource import OSPolicyResourceExecResource
from openapi_server.models.os_policy_resource_file_resource import OSPolicyResourceFileResource
from openapi_server.models.os_policy_resource_package_resource import OSPolicyResourcePackageResource
from openapi_server.models.os_policy_resource_repository_resource import OSPolicyResourceRepositoryResource
from openapi_server import util


class OSPolicyResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _exec: OSPolicyResourceExecResource=None, file: OSPolicyResourceFileResource=None, id: str=None, pkg: OSPolicyResourcePackageResource=None, repository: OSPolicyResourceRepositoryResource=None):
        """OSPolicyResource - a model defined in OpenAPI

        :param _exec: The _exec of this OSPolicyResource.
        :param file: The file of this OSPolicyResource.
        :param id: The id of this OSPolicyResource.
        :param pkg: The pkg of this OSPolicyResource.
        :param repository: The repository of this OSPolicyResource.
        """
        self.openapi_types = {
            '_exec': OSPolicyResourceExecResource,
            'file': OSPolicyResourceFileResource,
            'id': str,
            'pkg': OSPolicyResourcePackageResource,
            'repository': OSPolicyResourceRepositoryResource
        }

        self.attribute_map = {
            '_exec': 'exec',
            'file': 'file',
            'id': 'id',
            'pkg': 'pkg',
            'repository': 'repository'
        }

        self.__exec = _exec
        self._file = file
        self._id = id
        self._pkg = pkg
        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResource of this OSPolicyResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _exec(self):
        """Gets the _exec of this OSPolicyResource.


        :return: The _exec of this OSPolicyResource.
        :rtype: OSPolicyResourceExecResource
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this OSPolicyResource.


        :param _exec: The _exec of this OSPolicyResource.
        :type _exec: OSPolicyResourceExecResource
        """

        self.__exec = _exec

    @property
    def file(self):
        """Gets the file of this OSPolicyResource.


        :return: The file of this OSPolicyResource.
        :rtype: OSPolicyResourceFileResource
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this OSPolicyResource.


        :param file: The file of this OSPolicyResource.
        :type file: OSPolicyResourceFileResource
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this OSPolicyResource.

        Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.

        :return: The id of this OSPolicyResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSPolicyResource.

        Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.

        :param id: The id of this OSPolicyResource.
        :type id: str
        """

        self._id = id

    @property
    def pkg(self):
        """Gets the pkg of this OSPolicyResource.


        :return: The pkg of this OSPolicyResource.
        :rtype: OSPolicyResourcePackageResource
        """
        return self._pkg

    @pkg.setter
    def pkg(self, pkg):
        """Sets the pkg of this OSPolicyResource.


        :param pkg: The pkg of this OSPolicyResource.
        :type pkg: OSPolicyResourcePackageResource
        """

        self._pkg = pkg

    @property
    def repository(self):
        """Gets the repository of this OSPolicyResource.


        :return: The repository of this OSPolicyResource.
        :rtype: OSPolicyResourceRepositoryResource
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this OSPolicyResource.


        :param repository: The repository of this OSPolicyResource.
        :type repository: OSPolicyResourceRepositoryResource
        """

        self._repository = repository
