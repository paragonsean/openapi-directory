# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_group import OSPolicyResourceGroup
from openapi_server import util


class OSPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_no_resource_group_match: bool=None, description: str=None, id: str=None, mode: str=None, resource_groups: List[OSPolicyResourceGroup]=None):
        """OSPolicy - a model defined in OpenAPI

        :param allow_no_resource_group_match: The allow_no_resource_group_match of this OSPolicy.
        :param description: The description of this OSPolicy.
        :param id: The id of this OSPolicy.
        :param mode: The mode of this OSPolicy.
        :param resource_groups: The resource_groups of this OSPolicy.
        """
        self.openapi_types = {
            'allow_no_resource_group_match': bool,
            'description': str,
            'id': str,
            'mode': str,
            'resource_groups': List[OSPolicyResourceGroup]
        }

        self.attribute_map = {
            'allow_no_resource_group_match': 'allowNoResourceGroupMatch',
            'description': 'description',
            'id': 'id',
            'mode': 'mode',
            'resource_groups': 'resourceGroups'
        }

        self._allow_no_resource_group_match = allow_no_resource_group_match
        self._description = description
        self._id = id
        self._mode = mode
        self._resource_groups = resource_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicy of this OSPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_no_resource_group_match(self):
        """Gets the allow_no_resource_group_match of this OSPolicy.

        This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.

        :return: The allow_no_resource_group_match of this OSPolicy.
        :rtype: bool
        """
        return self._allow_no_resource_group_match

    @allow_no_resource_group_match.setter
    def allow_no_resource_group_match(self, allow_no_resource_group_match):
        """Sets the allow_no_resource_group_match of this OSPolicy.

        This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.

        :param allow_no_resource_group_match: The allow_no_resource_group_match of this OSPolicy.
        :type allow_no_resource_group_match: bool
        """

        self._allow_no_resource_group_match = allow_no_resource_group_match

    @property
    def description(self):
        """Gets the description of this OSPolicy.

        Policy description. Length of the description is limited to 1024 characters.

        :return: The description of this OSPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OSPolicy.

        Policy description. Length of the description is limited to 1024 characters.

        :param description: The description of this OSPolicy.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this OSPolicy.

        Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.

        :return: The id of this OSPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSPolicy.

        Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.

        :param id: The id of this OSPolicy.
        :type id: str
        """

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this OSPolicy.

        Required. Policy mode

        :return: The mode of this OSPolicy.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this OSPolicy.

        Required. Policy mode

        :param mode: The mode of this OSPolicy.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "VALIDATION", "ENFORCEMENT"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def resource_groups(self):
        """Gets the resource_groups of this OSPolicy.

        Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`

        :return: The resource_groups of this OSPolicy.
        :rtype: List[OSPolicyResourceGroup]
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this OSPolicy.

        Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`

        :param resource_groups: The resource_groups of this OSPolicy.
        :type resource_groups: List[OSPolicyResourceGroup]
        """

        self._resource_groups = resource_groups
