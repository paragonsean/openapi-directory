# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_file import OSPolicyResourceFile
from openapi_server import util


class OSPolicyResourceFileResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, file: OSPolicyResourceFile=None, path: str=None, permissions: str=None, state: str=None):
        """OSPolicyResourceFileResource - a model defined in OpenAPI

        :param content: The content of this OSPolicyResourceFileResource.
        :param file: The file of this OSPolicyResourceFileResource.
        :param path: The path of this OSPolicyResourceFileResource.
        :param permissions: The permissions of this OSPolicyResourceFileResource.
        :param state: The state of this OSPolicyResourceFileResource.
        """
        self.openapi_types = {
            'content': str,
            'file': OSPolicyResourceFile,
            'path': str,
            'permissions': str,
            'state': str
        }

        self.attribute_map = {
            'content': 'content',
            'file': 'file',
            'path': 'path',
            'permissions': 'permissions',
            'state': 'state'
        }

        self._content = content
        self._file = file
        self._path = path
        self._permissions = permissions
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResourceFileResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResourceFileResource of this OSPolicyResourceFileResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this OSPolicyResourceFileResource.

        A a file with this content. The size of the content is limited to 32KiB.

        :return: The content of this OSPolicyResourceFileResource.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this OSPolicyResourceFileResource.

        A a file with this content. The size of the content is limited to 32KiB.

        :param content: The content of this OSPolicyResourceFileResource.
        :type content: str
        """

        self._content = content

    @property
    def file(self):
        """Gets the file of this OSPolicyResourceFileResource.


        :return: The file of this OSPolicyResourceFileResource.
        :rtype: OSPolicyResourceFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this OSPolicyResourceFileResource.


        :param file: The file of this OSPolicyResourceFileResource.
        :type file: OSPolicyResourceFile
        """

        self._file = file

    @property
    def path(self):
        """Gets the path of this OSPolicyResourceFileResource.

        Required. The absolute path of the file within the VM.

        :return: The path of this OSPolicyResourceFileResource.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this OSPolicyResourceFileResource.

        Required. The absolute path of the file within the VM.

        :param path: The path of this OSPolicyResourceFileResource.
        :type path: str
        """

        self._path = path

    @property
    def permissions(self):
        """Gets the permissions of this OSPolicyResourceFileResource.

        Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4

        :return: The permissions of this OSPolicyResourceFileResource.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OSPolicyResourceFileResource.

        Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4

        :param permissions: The permissions of this OSPolicyResourceFileResource.
        :type permissions: str
        """

        self._permissions = permissions

    @property
    def state(self):
        """Gets the state of this OSPolicyResourceFileResource.

        Required. Desired state of the file.

        :return: The state of this OSPolicyResourceFileResource.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OSPolicyResourceFileResource.

        Required. Desired state of the file.

        :param state: The state of this OSPolicyResourceFileResource.
        :type state: str
        """
        allowed_values = ["DESIRED_STATE_UNSPECIFIED", "PRESENT", "ABSENT", "CONTENTS_MATCH"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
