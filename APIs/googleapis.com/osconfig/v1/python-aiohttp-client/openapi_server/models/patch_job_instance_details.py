# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchJobInstanceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempt_count: str=None, failure_reason: str=None, instance_system_id: str=None, name: str=None, state: str=None):
        """PatchJobInstanceDetails - a model defined in OpenAPI

        :param attempt_count: The attempt_count of this PatchJobInstanceDetails.
        :param failure_reason: The failure_reason of this PatchJobInstanceDetails.
        :param instance_system_id: The instance_system_id of this PatchJobInstanceDetails.
        :param name: The name of this PatchJobInstanceDetails.
        :param state: The state of this PatchJobInstanceDetails.
        """
        self.openapi_types = {
            'attempt_count': str,
            'failure_reason': str,
            'instance_system_id': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'attempt_count': 'attemptCount',
            'failure_reason': 'failureReason',
            'instance_system_id': 'instanceSystemId',
            'name': 'name',
            'state': 'state'
        }

        self._attempt_count = attempt_count
        self._failure_reason = failure_reason
        self._instance_system_id = instance_system_id
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchJobInstanceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchJobInstanceDetails of this PatchJobInstanceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempt_count(self):
        """Gets the attempt_count of this PatchJobInstanceDetails.

        The number of times the agent that the agent attempts to apply the patch.

        :return: The attempt_count of this PatchJobInstanceDetails.
        :rtype: str
        """
        return self._attempt_count

    @attempt_count.setter
    def attempt_count(self, attempt_count):
        """Sets the attempt_count of this PatchJobInstanceDetails.

        The number of times the agent that the agent attempts to apply the patch.

        :param attempt_count: The attempt_count of this PatchJobInstanceDetails.
        :type attempt_count: str
        """

        self._attempt_count = attempt_count

    @property
    def failure_reason(self):
        """Gets the failure_reason of this PatchJobInstanceDetails.

        If the patch fails, this field provides the reason.

        :return: The failure_reason of this PatchJobInstanceDetails.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this PatchJobInstanceDetails.

        If the patch fails, this field provides the reason.

        :param failure_reason: The failure_reason of this PatchJobInstanceDetails.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def instance_system_id(self):
        """Gets the instance_system_id of this PatchJobInstanceDetails.

        The unique identifier for the instance. This identifier is defined by the server.

        :return: The instance_system_id of this PatchJobInstanceDetails.
        :rtype: str
        """
        return self._instance_system_id

    @instance_system_id.setter
    def instance_system_id(self, instance_system_id):
        """Sets the instance_system_id of this PatchJobInstanceDetails.

        The unique identifier for the instance. This identifier is defined by the server.

        :param instance_system_id: The instance_system_id of this PatchJobInstanceDetails.
        :type instance_system_id: str
        """

        self._instance_system_id = instance_system_id

    @property
    def name(self):
        """Gets the name of this PatchJobInstanceDetails.

        The instance name in the form `projects/*/zones/*/instances/*`

        :return: The name of this PatchJobInstanceDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchJobInstanceDetails.

        The instance name in the form `projects/*/zones/*/instances/*`

        :param name: The name of this PatchJobInstanceDetails.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this PatchJobInstanceDetails.

        Current state of instance patch.

        :return: The state of this PatchJobInstanceDetails.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PatchJobInstanceDetails.

        Current state of instance patch.

        :param state: The state of this PatchJobInstanceDetails.
        :type state: str
        """
        allowed_values = ["PATCH_STATE_UNSPECIFIED", "PENDING", "INACTIVE", "NOTIFIED", "STARTED", "DOWNLOADING_PATCHES", "APPLYING_PATCHES", "REBOOTING", "SUCCEEDED", "SUCCEEDED_REBOOT_REQUIRED", "FAILED", "ACKED", "TIMED_OUT", "RUNNING_PRE_PATCH_STEP", "RUNNING_POST_PATCH_STEP", "NO_AGENT_DETECTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
