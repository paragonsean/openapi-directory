# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gcs_object import GcsObject
from openapi_server import util


class ExecStepConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_success_codes: List[int]=None, gcs_object: GcsObject=None, interpreter: str=None, local_path: str=None):
        """ExecStepConfig - a model defined in OpenAPI

        :param allowed_success_codes: The allowed_success_codes of this ExecStepConfig.
        :param gcs_object: The gcs_object of this ExecStepConfig.
        :param interpreter: The interpreter of this ExecStepConfig.
        :param local_path: The local_path of this ExecStepConfig.
        """
        self.openapi_types = {
            'allowed_success_codes': List[int],
            'gcs_object': GcsObject,
            'interpreter': str,
            'local_path': str
        }

        self.attribute_map = {
            'allowed_success_codes': 'allowedSuccessCodes',
            'gcs_object': 'gcsObject',
            'interpreter': 'interpreter',
            'local_path': 'localPath'
        }

        self._allowed_success_codes = allowed_success_codes
        self._gcs_object = gcs_object
        self._interpreter = interpreter
        self._local_path = local_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecStepConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecStepConfig of this ExecStepConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_success_codes(self):
        """Gets the allowed_success_codes of this ExecStepConfig.

        Defaults to [0]. A list of possible return values that the execution can return to indicate a success.

        :return: The allowed_success_codes of this ExecStepConfig.
        :rtype: List[int]
        """
        return self._allowed_success_codes

    @allowed_success_codes.setter
    def allowed_success_codes(self, allowed_success_codes):
        """Sets the allowed_success_codes of this ExecStepConfig.

        Defaults to [0]. A list of possible return values that the execution can return to indicate a success.

        :param allowed_success_codes: The allowed_success_codes of this ExecStepConfig.
        :type allowed_success_codes: List[int]
        """

        self._allowed_success_codes = allowed_success_codes

    @property
    def gcs_object(self):
        """Gets the gcs_object of this ExecStepConfig.


        :return: The gcs_object of this ExecStepConfig.
        :rtype: GcsObject
        """
        return self._gcs_object

    @gcs_object.setter
    def gcs_object(self, gcs_object):
        """Sets the gcs_object of this ExecStepConfig.


        :param gcs_object: The gcs_object of this ExecStepConfig.
        :type gcs_object: GcsObject
        """

        self._gcs_object = gcs_object

    @property
    def interpreter(self):
        """Gets the interpreter of this ExecStepConfig.

        The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)).

        :return: The interpreter of this ExecStepConfig.
        :rtype: str
        """
        return self._interpreter

    @interpreter.setter
    def interpreter(self, interpreter):
        """Sets the interpreter of this ExecStepConfig.

        The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)).

        :param interpreter: The interpreter of this ExecStepConfig.
        :type interpreter: str
        """
        allowed_values = ["INTERPRETER_UNSPECIFIED", "NONE", "SHELL", "POWERSHELL"]  # noqa: E501
        if interpreter not in allowed_values:
            raise ValueError(
                "Invalid value for `interpreter` ({0}), must be one of {1}"
                .format(interpreter, allowed_values)
            )

        self._interpreter = interpreter

    @property
    def local_path(self):
        """Gets the local_path of this ExecStepConfig.

        An absolute path to the executable on the VM.

        :return: The local_path of this ExecStepConfig.
        :rtype: str
        """
        return self._local_path

    @local_path.setter
    def local_path(self, local_path):
        """Sets the local_path of this ExecStepConfig.

        An absolute path to the executable on the VM.

        :param local_path: The local_path of this ExecStepConfig.
        :type local_path: str
        """

        self._local_path = local_path
