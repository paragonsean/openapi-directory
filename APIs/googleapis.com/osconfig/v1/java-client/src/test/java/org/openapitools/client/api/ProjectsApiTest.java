/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExecutePatchJobRequest;
import org.openapitools.client.model.ListInventoriesResponse;
import org.openapitools.client.model.ListOSPolicyAssignmentReportsResponse;
import org.openapitools.client.model.ListOSPolicyAssignmentRevisionsResponse;
import org.openapitools.client.model.ListOSPolicyAssignmentsResponse;
import org.openapitools.client.model.ListPatchDeploymentsResponse;
import org.openapitools.client.model.ListPatchJobInstanceDetailsResponse;
import org.openapitools.client.model.ListPatchJobsResponse;
import org.openapitools.client.model.ListVulnerabilityReportsResponse;
import org.openapitools.client.model.OSPolicyAssignment;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PatchDeployment;
import org.openapitools.client.model.PatchJob;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * List inventory data for all VM instances in the specified zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsLocationsInstancesInventoriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListInventoriesResponse response = api.osconfigProjectsLocationsInstancesInventoriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * List OS policy assignment reports for all Compute Engine VM instances in the specified zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOSPolicyAssignmentReportsResponse response = api.osconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List vulnerability reports for all VM instances in the specified zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsLocationsInstancesVulnerabilityReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVulnerabilityReportsResponse response = api.osconfigProjectsLocationsInstancesVulnerabilityReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsLocationsOsPolicyAssignmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String osPolicyAssignmentId = null;
        OSPolicyAssignment osPolicyAssignment = null;
        Operation response = api.osconfigProjectsLocationsOsPolicyAssignmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, osPolicyAssignmentId, osPolicyAssignment);
        // TODO: test validations
    }

    /**
     * List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsLocationsOsPolicyAssignmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOSPolicyAssignmentsResponse response = api.osconfigProjectsLocationsOsPolicyAssignmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List the OS policy assignment revisions for a given OS policy assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsLocationsOsPolicyAssignmentsListRevisionsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOSPolicyAssignmentRevisionsResponse response = api.osconfigProjectsLocationsOsPolicyAssignmentsListRevisions(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create an OS Config patch deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchDeploymentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String patchDeploymentId = null;
        PatchDeployment patchDeployment = null;
        PatchDeployment response = api.osconfigProjectsPatchDeploymentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, patchDeploymentId, patchDeployment);
        // TODO: test validations
    }

    /**
     * Delete an OS Config patch deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchDeploymentsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.osconfigProjectsPatchDeploymentsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get a page of OS Config patch deployments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchDeploymentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPatchDeploymentsResponse response = api.osconfigProjectsPatchDeploymentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update an OS Config patch deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchDeploymentsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        PatchDeployment patchDeployment = null;
        PatchDeployment response = api.osconfigProjectsPatchDeploymentsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, patchDeployment);
        // TODO: test validations
    }

    /**
     * Change state of patch deployment to \&quot;PAUSED\&quot;. Patch deployment in paused state doesn&#39;t generate patch jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchDeploymentsPauseTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        PatchDeployment response = api.osconfigProjectsPatchDeploymentsPause(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Change state of patch deployment back to \&quot;ACTIVE\&quot;. Patch deployment in active state continues to generate patch jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchDeploymentsResumeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        PatchDeployment response = api.osconfigProjectsPatchDeploymentsResume(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchJobsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        PatchJob response = api.osconfigProjectsPatchJobsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Patch VM instances by creating and running a patch job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchJobsExecuteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExecutePatchJobRequest executePatchJobRequest = null;
        PatchJob response = api.osconfigProjectsPatchJobsExecute(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, executePatchJobRequest);
        // TODO: test validations
    }

    /**
     * Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchJobsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        PatchJob response = api.osconfigProjectsPatchJobsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Get a list of instance details for a given patch job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchJobsInstanceDetailsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPatchJobInstanceDetailsResponse response = api.osconfigProjectsPatchJobsInstanceDetailsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Get a list of patch jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osconfigProjectsPatchJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPatchJobsResponse response = api.osconfigProjectsPatchJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
