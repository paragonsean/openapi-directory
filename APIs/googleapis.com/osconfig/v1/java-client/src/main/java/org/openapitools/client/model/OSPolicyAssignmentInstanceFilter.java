/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicyAssignmentInstanceFilterInventory;
import org.openapitools.client.model.OSPolicyAssignmentLabelSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyAssignmentInstanceFilter {
  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private Boolean all;

  public static final String SERIALIZED_NAME_EXCLUSION_LABELS = "exclusionLabels";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_LABELS)
  private List<OSPolicyAssignmentLabelSet> exclusionLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUSION_LABELS = "inclusionLabels";
  @SerializedName(SERIALIZED_NAME_INCLUSION_LABELS)
  private List<OSPolicyAssignmentLabelSet> inclusionLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORIES = "inventories";
  @SerializedName(SERIALIZED_NAME_INVENTORIES)
  private List<OSPolicyAssignmentInstanceFilterInventory> inventories = new ArrayList<>();

  public OSPolicyAssignmentInstanceFilter() {
  }

  public OSPolicyAssignmentInstanceFilter all(Boolean all) {
    this.all = all;
    return this;
  }

  /**
   * Target all VMs in the project. If true, no other criteria is permitted.
   * @return all
   */
  @javax.annotation.Nullable
  public Boolean getAll() {
    return all;
  }

  public void setAll(Boolean all) {
    this.all = all;
  }


  public OSPolicyAssignmentInstanceFilter exclusionLabels(List<OSPolicyAssignmentLabelSet> exclusionLabels) {
    this.exclusionLabels = exclusionLabels;
    return this;
  }

  public OSPolicyAssignmentInstanceFilter addExclusionLabelsItem(OSPolicyAssignmentLabelSet exclusionLabelsItem) {
    if (this.exclusionLabels == null) {
      this.exclusionLabels = new ArrayList<>();
    }
    this.exclusionLabels.add(exclusionLabelsItem);
    return this;
  }

  /**
   * List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
   * @return exclusionLabels
   */
  @javax.annotation.Nullable
  public List<OSPolicyAssignmentLabelSet> getExclusionLabels() {
    return exclusionLabels;
  }

  public void setExclusionLabels(List<OSPolicyAssignmentLabelSet> exclusionLabels) {
    this.exclusionLabels = exclusionLabels;
  }


  public OSPolicyAssignmentInstanceFilter inclusionLabels(List<OSPolicyAssignmentLabelSet> inclusionLabels) {
    this.inclusionLabels = inclusionLabels;
    return this;
  }

  public OSPolicyAssignmentInstanceFilter addInclusionLabelsItem(OSPolicyAssignmentLabelSet inclusionLabelsItem) {
    if (this.inclusionLabels == null) {
      this.inclusionLabels = new ArrayList<>();
    }
    this.inclusionLabels.add(inclusionLabelsItem);
    return this;
  }

  /**
   * List of label sets used for VM inclusion. If the list has more than one &#x60;LabelSet&#x60;, the VM is included if any of the label sets are applicable for the VM.
   * @return inclusionLabels
   */
  @javax.annotation.Nullable
  public List<OSPolicyAssignmentLabelSet> getInclusionLabels() {
    return inclusionLabels;
  }

  public void setInclusionLabels(List<OSPolicyAssignmentLabelSet> inclusionLabels) {
    this.inclusionLabels = inclusionLabels;
  }


  public OSPolicyAssignmentInstanceFilter inventories(List<OSPolicyAssignmentInstanceFilterInventory> inventories) {
    this.inventories = inventories;
    return this;
  }

  public OSPolicyAssignmentInstanceFilter addInventoriesItem(OSPolicyAssignmentInstanceFilterInventory inventoriesItem) {
    if (this.inventories == null) {
      this.inventories = new ArrayList<>();
    }
    this.inventories.add(inventoriesItem);
    return this;
  }

  /**
   * List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
   * @return inventories
   */
  @javax.annotation.Nullable
  public List<OSPolicyAssignmentInstanceFilterInventory> getInventories() {
    return inventories;
  }

  public void setInventories(List<OSPolicyAssignmentInstanceFilterInventory> inventories) {
    this.inventories = inventories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyAssignmentInstanceFilter osPolicyAssignmentInstanceFilter = (OSPolicyAssignmentInstanceFilter) o;
    return Objects.equals(this.all, osPolicyAssignmentInstanceFilter.all) &&
        Objects.equals(this.exclusionLabels, osPolicyAssignmentInstanceFilter.exclusionLabels) &&
        Objects.equals(this.inclusionLabels, osPolicyAssignmentInstanceFilter.inclusionLabels) &&
        Objects.equals(this.inventories, osPolicyAssignmentInstanceFilter.inventories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, exclusionLabels, inclusionLabels, inventories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyAssignmentInstanceFilter {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    exclusionLabels: ").append(toIndentedString(exclusionLabels)).append("\n");
    sb.append("    inclusionLabels: ").append(toIndentedString(inclusionLabels)).append("\n");
    sb.append("    inventories: ").append(toIndentedString(inventories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all");
    openapiFields.add("exclusionLabels");
    openapiFields.add("inclusionLabels");
    openapiFields.add("inventories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyAssignmentInstanceFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyAssignmentInstanceFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyAssignmentInstanceFilter is not found in the empty JSON string", OSPolicyAssignmentInstanceFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyAssignmentInstanceFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyAssignmentInstanceFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("exclusionLabels") != null && !jsonObj.get("exclusionLabels").isJsonNull()) {
        JsonArray jsonArrayexclusionLabels = jsonObj.getAsJsonArray("exclusionLabels");
        if (jsonArrayexclusionLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exclusionLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exclusionLabels` to be an array in the JSON string but got `%s`", jsonObj.get("exclusionLabels").toString()));
          }

          // validate the optional field `exclusionLabels` (array)
          for (int i = 0; i < jsonArrayexclusionLabels.size(); i++) {
            OSPolicyAssignmentLabelSet.validateJsonElement(jsonArrayexclusionLabels.get(i));
          };
        }
      }
      if (jsonObj.get("inclusionLabels") != null && !jsonObj.get("inclusionLabels").isJsonNull()) {
        JsonArray jsonArrayinclusionLabels = jsonObj.getAsJsonArray("inclusionLabels");
        if (jsonArrayinclusionLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inclusionLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inclusionLabels` to be an array in the JSON string but got `%s`", jsonObj.get("inclusionLabels").toString()));
          }

          // validate the optional field `inclusionLabels` (array)
          for (int i = 0; i < jsonArrayinclusionLabels.size(); i++) {
            OSPolicyAssignmentLabelSet.validateJsonElement(jsonArrayinclusionLabels.get(i));
          };
        }
      }
      if (jsonObj.get("inventories") != null && !jsonObj.get("inventories").isJsonNull()) {
        JsonArray jsonArrayinventories = jsonObj.getAsJsonArray("inventories");
        if (jsonArrayinventories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventories` to be an array in the JSON string but got `%s`", jsonObj.get("inventories").toString()));
          }

          // validate the optional field `inventories` (array)
          for (int i = 0; i < jsonArrayinventories.size(); i++) {
            OSPolicyAssignmentInstanceFilterInventory.validateJsonElement(jsonArrayinventories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyAssignmentInstanceFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyAssignmentInstanceFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyAssignmentInstanceFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyAssignmentInstanceFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyAssignmentInstanceFilter>() {
           @Override
           public void write(JsonWriter out, OSPolicyAssignmentInstanceFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyAssignmentInstanceFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyAssignmentInstanceFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyAssignmentInstanceFilter
   * @throws IOException if the JSON string is invalid with respect to OSPolicyAssignmentInstanceFilter
   */
  public static OSPolicyAssignmentInstanceFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyAssignmentInstanceFilter.class);
  }

  /**
   * Convert an instance of OSPolicyAssignmentInstanceFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

