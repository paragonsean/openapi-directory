/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicyResourceGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An OS policy defines the desired state configuration for a VM.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicy {
  public static final String SERIALIZED_NAME_ALLOW_NO_RESOURCE_GROUP_MATCH = "allowNoResourceGroupMatch";
  @SerializedName(SERIALIZED_NAME_ALLOW_NO_RESOURCE_GROUP_MATCH)
  private Boolean allowNoResourceGroupMatch;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Required. Policy mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    MODE_UNSPECIFIED("MODE_UNSPECIFIED"),
    
    VALIDATION("VALIDATION"),
    
    ENFORCEMENT("ENFORCEMENT");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_RESOURCE_GROUPS = "resourceGroups";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUPS)
  private List<OSPolicyResourceGroup> resourceGroups = new ArrayList<>();

  public OSPolicy() {
  }

  public OSPolicy allowNoResourceGroupMatch(Boolean allowNoResourceGroupMatch) {
    this.allowNoResourceGroupMatch = allowNoResourceGroupMatch;
    return this;
  }

  /**
   * This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to &#x60;true&#x60; if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
   * @return allowNoResourceGroupMatch
   */
  @javax.annotation.Nullable
  public Boolean getAllowNoResourceGroupMatch() {
    return allowNoResourceGroupMatch;
  }

  public void setAllowNoResourceGroupMatch(Boolean allowNoResourceGroupMatch) {
    this.allowNoResourceGroupMatch = allowNoResourceGroupMatch;
  }


  public OSPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Policy description. Length of the description is limited to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OSPolicy id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OSPolicy mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Required. Policy mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public OSPolicy resourceGroups(List<OSPolicyResourceGroup> resourceGroups) {
    this.resourceGroups = resourceGroups;
    return this;
  }

  public OSPolicy addResourceGroupsItem(OSPolicyResourceGroup resourceGroupsItem) {
    if (this.resourceGroups == null) {
      this.resourceGroups = new ArrayList<>();
    }
    this.resourceGroups.add(resourceGroupsItem);
    return this;
  }

  /**
   * Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag &#x60;allow_no_resource_group_match&#x60;
   * @return resourceGroups
   */
  @javax.annotation.Nullable
  public List<OSPolicyResourceGroup> getResourceGroups() {
    return resourceGroups;
  }

  public void setResourceGroups(List<OSPolicyResourceGroup> resourceGroups) {
    this.resourceGroups = resourceGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicy osPolicy = (OSPolicy) o;
    return Objects.equals(this.allowNoResourceGroupMatch, osPolicy.allowNoResourceGroupMatch) &&
        Objects.equals(this.description, osPolicy.description) &&
        Objects.equals(this.id, osPolicy.id) &&
        Objects.equals(this.mode, osPolicy.mode) &&
        Objects.equals(this.resourceGroups, osPolicy.resourceGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNoResourceGroupMatch, description, id, mode, resourceGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicy {\n");
    sb.append("    allowNoResourceGroupMatch: ").append(toIndentedString(allowNoResourceGroupMatch)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    resourceGroups: ").append(toIndentedString(resourceGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowNoResourceGroupMatch");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("mode");
    openapiFields.add("resourceGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicy is not found in the empty JSON string", OSPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if (jsonObj.get("resourceGroups") != null && !jsonObj.get("resourceGroups").isJsonNull()) {
        JsonArray jsonArrayresourceGroups = jsonObj.getAsJsonArray("resourceGroups");
        if (jsonArrayresourceGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceGroups` to be an array in the JSON string but got `%s`", jsonObj.get("resourceGroups").toString()));
          }

          // validate the optional field `resourceGroups` (array)
          for (int i = 0; i < jsonArrayresourceGroups.size(); i++) {
            OSPolicyResourceGroup.validateJsonElement(jsonArrayresourceGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicy>() {
           @Override
           public void write(JsonWriter out, OSPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicy
   * @throws IOException if the JSON string is invalid with respect to OSPolicy
   */
  public static OSPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicy.class);
  }

  /**
   * Convert an instance of OSPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

