/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicyInventoryFilter;
import org.openapitools.client.model.OSPolicyResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the &#x60;OSFilter&#x60; specified within the resource group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyResourceGroup {
  public static final String SERIALIZED_NAME_INVENTORY_FILTERS = "inventoryFilters";
  @SerializedName(SERIALIZED_NAME_INVENTORY_FILTERS)
  private List<OSPolicyInventoryFilter> inventoryFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<OSPolicyResource> resources = new ArrayList<>();

  public OSPolicyResourceGroup() {
  }

  public OSPolicyResourceGroup inventoryFilters(List<OSPolicyInventoryFilter> inventoryFilters) {
    this.inventoryFilters = inventoryFilters;
    return this;
  }

  public OSPolicyResourceGroup addInventoryFiltersItem(OSPolicyInventoryFilter inventoryFiltersItem) {
    if (this.inventoryFilters == null) {
      this.inventoryFilters = new ArrayList<>();
    }
    this.inventoryFilters.add(inventoryFiltersItem);
    return this;
  }

  /**
   * List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either &#x60;RHEL&#x60; or &#x60;CentOS&#x60; operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name&#x3D;&#39;rhel&#39; and inventory_filters[1].os_short_name&#x3D;&#39;centos&#39; If the list is empty, this resource group will be applied to the target VM unconditionally.
   * @return inventoryFilters
   */
  @javax.annotation.Nullable
  public List<OSPolicyInventoryFilter> getInventoryFilters() {
    return inventoryFilters;
  }

  public void setInventoryFilters(List<OSPolicyInventoryFilter> inventoryFilters) {
    this.inventoryFilters = inventoryFilters;
  }


  public OSPolicyResourceGroup resources(List<OSPolicyResource> resources) {
    this.resources = resources;
    return this;
  }

  public OSPolicyResourceGroup addResourcesItem(OSPolicyResource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.
   * @return resources
   */
  @javax.annotation.Nullable
  public List<OSPolicyResource> getResources() {
    return resources;
  }

  public void setResources(List<OSPolicyResource> resources) {
    this.resources = resources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyResourceGroup osPolicyResourceGroup = (OSPolicyResourceGroup) o;
    return Objects.equals(this.inventoryFilters, osPolicyResourceGroup.inventoryFilters) &&
        Objects.equals(this.resources, osPolicyResourceGroup.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inventoryFilters, resources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyResourceGroup {\n");
    sb.append("    inventoryFilters: ").append(toIndentedString(inventoryFilters)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inventoryFilters");
    openapiFields.add("resources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyResourceGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyResourceGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyResourceGroup is not found in the empty JSON string", OSPolicyResourceGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyResourceGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyResourceGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("inventoryFilters") != null && !jsonObj.get("inventoryFilters").isJsonNull()) {
        JsonArray jsonArrayinventoryFilters = jsonObj.getAsJsonArray("inventoryFilters");
        if (jsonArrayinventoryFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventoryFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventoryFilters` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryFilters").toString()));
          }

          // validate the optional field `inventoryFilters` (array)
          for (int i = 0; i < jsonArrayinventoryFilters.size(); i++) {
            OSPolicyInventoryFilter.validateJsonElement(jsonArrayinventoryFilters.get(i));
          };
        }
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            OSPolicyResource.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyResourceGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyResourceGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyResourceGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyResourceGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyResourceGroup>() {
           @Override
           public void write(JsonWriter out, OSPolicyResourceGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyResourceGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyResourceGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyResourceGroup
   * @throws IOException if the JSON string is invalid with respect to OSPolicyResourceGroup
   */
  public static OSPolicyResourceGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyResourceGroup.class);
  }

  /**
   * Convert an instance of OSPolicyResourceGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

