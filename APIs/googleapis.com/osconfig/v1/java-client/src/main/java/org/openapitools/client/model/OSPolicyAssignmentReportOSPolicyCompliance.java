/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compliance data for an OS policy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyAssignmentReportOSPolicyCompliance {
  /**
   * The compliance state of the OS policy.
   */
  @JsonAdapter(ComplianceStateEnum.Adapter.class)
  public enum ComplianceStateEnum {
    UNKNOWN("UNKNOWN"),
    
    COMPLIANT("COMPLIANT"),
    
    NON_COMPLIANT("NON_COMPLIANT");

    private String value;

    ComplianceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplianceStateEnum fromValue(String value) {
      for (ComplianceStateEnum b : ComplianceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplianceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplianceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplianceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplianceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplianceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLIANCE_STATE = "complianceState";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_STATE)
  private ComplianceStateEnum complianceState;

  public static final String SERIALIZED_NAME_COMPLIANCE_STATE_REASON = "complianceStateReason";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_STATE_REASON)
  private String complianceStateReason;

  public static final String SERIALIZED_NAME_OS_POLICY_ID = "osPolicyId";
  @SerializedName(SERIALIZED_NAME_OS_POLICY_ID)
  private String osPolicyId;

  public static final String SERIALIZED_NAME_OS_POLICY_RESOURCE_COMPLIANCES = "osPolicyResourceCompliances";
  @SerializedName(SERIALIZED_NAME_OS_POLICY_RESOURCE_COMPLIANCES)
  private List<OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance> osPolicyResourceCompliances = new ArrayList<>();

  public OSPolicyAssignmentReportOSPolicyCompliance() {
  }

  public OSPolicyAssignmentReportOSPolicyCompliance complianceState(ComplianceStateEnum complianceState) {
    this.complianceState = complianceState;
    return this;
  }

  /**
   * The compliance state of the OS policy.
   * @return complianceState
   */
  @javax.annotation.Nullable
  public ComplianceStateEnum getComplianceState() {
    return complianceState;
  }

  public void setComplianceState(ComplianceStateEnum complianceState) {
    this.complianceState = complianceState;
  }


  public OSPolicyAssignmentReportOSPolicyCompliance complianceStateReason(String complianceStateReason) {
    this.complianceStateReason = complianceStateReason;
    return this;
  }

  /**
   * The reason for the OS policy to be in an unknown compliance state. This field is always populated when &#x60;compliance_state&#x60; is &#x60;UNKNOWN&#x60;. If populated, the field can contain one of the following values: * &#x60;vm-not-running&#x60;: The VM was not running. * &#x60;os-policies-not-supported-by-agent&#x60;: The version of the OS Config agent running on the VM does not support running OS policies. * &#x60;no-agent-detected&#x60;: The OS Config agent is not detected for the VM. * &#x60;resource-execution-errors&#x60;: The OS Config agent encountered errors while executing one or more resources in the policy. See &#x60;os_policy_resource_compliances&#x60; for details. * &#x60;task-timeout&#x60;: The task sent to the agent to apply the policy timed out. * &#x60;unexpected-agent-state&#x60;: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * &#x60;internal-service-errors&#x60;: Internal service errors were encountered while attempting to apply the policy.
   * @return complianceStateReason
   */
  @javax.annotation.Nullable
  public String getComplianceStateReason() {
    return complianceStateReason;
  }

  public void setComplianceStateReason(String complianceStateReason) {
    this.complianceStateReason = complianceStateReason;
  }


  public OSPolicyAssignmentReportOSPolicyCompliance osPolicyId(String osPolicyId) {
    this.osPolicyId = osPolicyId;
    return this;
  }

  /**
   * The OS policy id
   * @return osPolicyId
   */
  @javax.annotation.Nullable
  public String getOsPolicyId() {
    return osPolicyId;
  }

  public void setOsPolicyId(String osPolicyId) {
    this.osPolicyId = osPolicyId;
  }


  public OSPolicyAssignmentReportOSPolicyCompliance osPolicyResourceCompliances(List<OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance> osPolicyResourceCompliances) {
    this.osPolicyResourceCompliances = osPolicyResourceCompliances;
    return this;
  }

  public OSPolicyAssignmentReportOSPolicyCompliance addOsPolicyResourceCompliancesItem(OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance osPolicyResourceCompliancesItem) {
    if (this.osPolicyResourceCompliances == null) {
      this.osPolicyResourceCompliances = new ArrayList<>();
    }
    this.osPolicyResourceCompliances.add(osPolicyResourceCompliancesItem);
    return this;
  }

  /**
   * Compliance data for each resource within the policy that is applied to the VM.
   * @return osPolicyResourceCompliances
   */
  @javax.annotation.Nullable
  public List<OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance> getOsPolicyResourceCompliances() {
    return osPolicyResourceCompliances;
  }

  public void setOsPolicyResourceCompliances(List<OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance> osPolicyResourceCompliances) {
    this.osPolicyResourceCompliances = osPolicyResourceCompliances;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyAssignmentReportOSPolicyCompliance osPolicyAssignmentReportOSPolicyCompliance = (OSPolicyAssignmentReportOSPolicyCompliance) o;
    return Objects.equals(this.complianceState, osPolicyAssignmentReportOSPolicyCompliance.complianceState) &&
        Objects.equals(this.complianceStateReason, osPolicyAssignmentReportOSPolicyCompliance.complianceStateReason) &&
        Objects.equals(this.osPolicyId, osPolicyAssignmentReportOSPolicyCompliance.osPolicyId) &&
        Objects.equals(this.osPolicyResourceCompliances, osPolicyAssignmentReportOSPolicyCompliance.osPolicyResourceCompliances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complianceState, complianceStateReason, osPolicyId, osPolicyResourceCompliances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyAssignmentReportOSPolicyCompliance {\n");
    sb.append("    complianceState: ").append(toIndentedString(complianceState)).append("\n");
    sb.append("    complianceStateReason: ").append(toIndentedString(complianceStateReason)).append("\n");
    sb.append("    osPolicyId: ").append(toIndentedString(osPolicyId)).append("\n");
    sb.append("    osPolicyResourceCompliances: ").append(toIndentedString(osPolicyResourceCompliances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complianceState");
    openapiFields.add("complianceStateReason");
    openapiFields.add("osPolicyId");
    openapiFields.add("osPolicyResourceCompliances");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyAssignmentReportOSPolicyCompliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyAssignmentReportOSPolicyCompliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyAssignmentReportOSPolicyCompliance is not found in the empty JSON string", OSPolicyAssignmentReportOSPolicyCompliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyAssignmentReportOSPolicyCompliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyAssignmentReportOSPolicyCompliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("complianceState") != null && !jsonObj.get("complianceState").isJsonNull()) && !jsonObj.get("complianceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complianceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complianceState").toString()));
      }
      // validate the optional field `complianceState`
      if (jsonObj.get("complianceState") != null && !jsonObj.get("complianceState").isJsonNull()) {
        ComplianceStateEnum.validateJsonElement(jsonObj.get("complianceState"));
      }
      if ((jsonObj.get("complianceStateReason") != null && !jsonObj.get("complianceStateReason").isJsonNull()) && !jsonObj.get("complianceStateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complianceStateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complianceStateReason").toString()));
      }
      if ((jsonObj.get("osPolicyId") != null && !jsonObj.get("osPolicyId").isJsonNull()) && !jsonObj.get("osPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osPolicyId").toString()));
      }
      if (jsonObj.get("osPolicyResourceCompliances") != null && !jsonObj.get("osPolicyResourceCompliances").isJsonNull()) {
        JsonArray jsonArrayosPolicyResourceCompliances = jsonObj.getAsJsonArray("osPolicyResourceCompliances");
        if (jsonArrayosPolicyResourceCompliances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("osPolicyResourceCompliances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `osPolicyResourceCompliances` to be an array in the JSON string but got `%s`", jsonObj.get("osPolicyResourceCompliances").toString()));
          }

          // validate the optional field `osPolicyResourceCompliances` (array)
          for (int i = 0; i < jsonArrayosPolicyResourceCompliances.size(); i++) {
            OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.validateJsonElement(jsonArrayosPolicyResourceCompliances.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyAssignmentReportOSPolicyCompliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyAssignmentReportOSPolicyCompliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyAssignmentReportOSPolicyCompliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyAssignmentReportOSPolicyCompliance.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyAssignmentReportOSPolicyCompliance>() {
           @Override
           public void write(JsonWriter out, OSPolicyAssignmentReportOSPolicyCompliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyAssignmentReportOSPolicyCompliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyAssignmentReportOSPolicyCompliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyAssignmentReportOSPolicyCompliance
   * @throws IOException if the JSON string is invalid with respect to OSPolicyAssignmentReportOSPolicyCompliance
   */
  public static OSPolicyAssignmentReportOSPolicyCompliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyAssignmentReportOSPolicyCompliance.class);
  }

  /**
   * Convert an instance of OSPolicyAssignmentReportOSPolicyCompliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

