/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OSPolicyResourceExecResource;
import org.openapitools.client.model.OSPolicyResourceFileResource;
import org.openapitools.client.model.OSPolicyResourcePackageResource;
import org.openapitools.client.model.OSPolicyResourceRepositoryResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyResource {
  public static final String SERIALIZED_NAME_EXEC = "exec";
  @SerializedName(SERIALIZED_NAME_EXEC)
  private OSPolicyResourceExecResource exec;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private OSPolicyResourceFileResource _file;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PKG = "pkg";
  @SerializedName(SERIALIZED_NAME_PKG)
  private OSPolicyResourcePackageResource pkg;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private OSPolicyResourceRepositoryResource repository;

  public OSPolicyResource() {
  }

  public OSPolicyResource exec(OSPolicyResourceExecResource exec) {
    this.exec = exec;
    return this;
  }

  /**
   * Get exec
   * @return exec
   */
  @javax.annotation.Nullable
  public OSPolicyResourceExecResource getExec() {
    return exec;
  }

  public void setExec(OSPolicyResourceExecResource exec) {
    this.exec = exec;
  }


  public OSPolicyResource _file(OSPolicyResourceFileResource _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public OSPolicyResourceFileResource getFile() {
    return _file;
  }

  public void setFile(OSPolicyResourceFileResource _file) {
    this._file = _file;
  }


  public OSPolicyResource id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OSPolicyResource pkg(OSPolicyResourcePackageResource pkg) {
    this.pkg = pkg;
    return this;
  }

  /**
   * Get pkg
   * @return pkg
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResource getPkg() {
    return pkg;
  }

  public void setPkg(OSPolicyResourcePackageResource pkg) {
    this.pkg = pkg;
  }


  public OSPolicyResource repository(OSPolicyResourceRepositoryResource repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public OSPolicyResourceRepositoryResource getRepository() {
    return repository;
  }

  public void setRepository(OSPolicyResourceRepositoryResource repository) {
    this.repository = repository;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyResource osPolicyResource = (OSPolicyResource) o;
    return Objects.equals(this.exec, osPolicyResource.exec) &&
        Objects.equals(this._file, osPolicyResource._file) &&
        Objects.equals(this.id, osPolicyResource.id) &&
        Objects.equals(this.pkg, osPolicyResource.pkg) &&
        Objects.equals(this.repository, osPolicyResource.repository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exec, _file, id, pkg, repository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyResource {\n");
    sb.append("    exec: ").append(toIndentedString(exec)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pkg: ").append(toIndentedString(pkg)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exec");
    openapiFields.add("file");
    openapiFields.add("id");
    openapiFields.add("pkg");
    openapiFields.add("repository");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyResource is not found in the empty JSON string", OSPolicyResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exec`
      if (jsonObj.get("exec") != null && !jsonObj.get("exec").isJsonNull()) {
        OSPolicyResourceExecResource.validateJsonElement(jsonObj.get("exec"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        OSPolicyResourceFileResource.validateJsonElement(jsonObj.get("file"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `pkg`
      if (jsonObj.get("pkg") != null && !jsonObj.get("pkg").isJsonNull()) {
        OSPolicyResourcePackageResource.validateJsonElement(jsonObj.get("pkg"));
      }
      // validate the optional field `repository`
      if (jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) {
        OSPolicyResourceRepositoryResource.validateJsonElement(jsonObj.get("repository"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyResource.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyResource>() {
           @Override
           public void write(JsonWriter out, OSPolicyResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyResource
   * @throws IOException if the JSON string is invalid with respect to OSPolicyResource
   */
  public static OSPolicyResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyResource.class);
  }

  /**
   * Convert an instance of OSPolicyResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

