/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OneTimeSchedule;
import org.openapitools.client.model.PatchConfig;
import org.openapitools.client.model.PatchInstanceFilter;
import org.openapitools.client.model.PatchRollout;
import org.openapitools.client.model.RecurringSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchDeployment {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_INSTANCE_FILTER = "instanceFilter";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FILTER)
  private PatchInstanceFilter instanceFilter;

  public static final String SERIALIZED_NAME_LAST_EXECUTE_TIME = "lastExecuteTime";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTE_TIME)
  private String lastExecuteTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONE_TIME_SCHEDULE = "oneTimeSchedule";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_SCHEDULE)
  private OneTimeSchedule oneTimeSchedule;

  public static final String SERIALIZED_NAME_PATCH_CONFIG = "patchConfig";
  @SerializedName(SERIALIZED_NAME_PATCH_CONFIG)
  private PatchConfig patchConfig;

  public static final String SERIALIZED_NAME_RECURRING_SCHEDULE = "recurringSchedule";
  @SerializedName(SERIALIZED_NAME_RECURRING_SCHEDULE)
  private RecurringSchedule recurringSchedule;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private PatchRollout rollout;

  /**
   * Output only. Current state of the patch deployment.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    PAUSED("PAUSED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public PatchDeployment() {
  }

  public PatchDeployment(
     String createTime, 
     String lastExecuteTime, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.lastExecuteTime = lastExecuteTime;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public PatchDeployment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PatchDeployment duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Optional. Duration of the patch. After the duration ends, the patch times out.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public PatchDeployment instanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
    return this;
  }

  /**
   * Get instanceFilter
   * @return instanceFilter
   */
  @javax.annotation.Nullable
  public PatchInstanceFilter getInstanceFilter() {
    return instanceFilter;
  }

  public void setInstanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
  }


  /**
   * Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
   * @return lastExecuteTime
   */
  @javax.annotation.Nullable
  public String getLastExecuteTime() {
    return lastExecuteTime;
  }



  public PatchDeployment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique name for the patch deployment resource in a project. The patch deployment name is in the form: &#x60;projects/{project_id}/patchDeployments/{patch_deployment_id}&#x60;. This field is ignored when you create a new patch deployment.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchDeployment oneTimeSchedule(OneTimeSchedule oneTimeSchedule) {
    this.oneTimeSchedule = oneTimeSchedule;
    return this;
  }

  /**
   * Get oneTimeSchedule
   * @return oneTimeSchedule
   */
  @javax.annotation.Nullable
  public OneTimeSchedule getOneTimeSchedule() {
    return oneTimeSchedule;
  }

  public void setOneTimeSchedule(OneTimeSchedule oneTimeSchedule) {
    this.oneTimeSchedule = oneTimeSchedule;
  }


  public PatchDeployment patchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
    return this;
  }

  /**
   * Get patchConfig
   * @return patchConfig
   */
  @javax.annotation.Nullable
  public PatchConfig getPatchConfig() {
    return patchConfig;
  }

  public void setPatchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
  }


  public PatchDeployment recurringSchedule(RecurringSchedule recurringSchedule) {
    this.recurringSchedule = recurringSchedule;
    return this;
  }

  /**
   * Get recurringSchedule
   * @return recurringSchedule
   */
  @javax.annotation.Nullable
  public RecurringSchedule getRecurringSchedule() {
    return recurringSchedule;
  }

  public void setRecurringSchedule(RecurringSchedule recurringSchedule) {
    this.recurringSchedule = recurringSchedule;
  }


  public PatchDeployment rollout(PatchRollout rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Get rollout
   * @return rollout
   */
  @javax.annotation.Nullable
  public PatchRollout getRollout() {
    return rollout;
  }

  public void setRollout(PatchRollout rollout) {
    this.rollout = rollout;
  }


  /**
   * Output only. Current state of the patch deployment.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchDeployment patchDeployment = (PatchDeployment) o;
    return Objects.equals(this.createTime, patchDeployment.createTime) &&
        Objects.equals(this.description, patchDeployment.description) &&
        Objects.equals(this.duration, patchDeployment.duration) &&
        Objects.equals(this.instanceFilter, patchDeployment.instanceFilter) &&
        Objects.equals(this.lastExecuteTime, patchDeployment.lastExecuteTime) &&
        Objects.equals(this.name, patchDeployment.name) &&
        Objects.equals(this.oneTimeSchedule, patchDeployment.oneTimeSchedule) &&
        Objects.equals(this.patchConfig, patchDeployment.patchConfig) &&
        Objects.equals(this.recurringSchedule, patchDeployment.recurringSchedule) &&
        Objects.equals(this.rollout, patchDeployment.rollout) &&
        Objects.equals(this.state, patchDeployment.state) &&
        Objects.equals(this.updateTime, patchDeployment.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, duration, instanceFilter, lastExecuteTime, name, oneTimeSchedule, patchConfig, recurringSchedule, rollout, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchDeployment {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    instanceFilter: ").append(toIndentedString(instanceFilter)).append("\n");
    sb.append("    lastExecuteTime: ").append(toIndentedString(lastExecuteTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneTimeSchedule: ").append(toIndentedString(oneTimeSchedule)).append("\n");
    sb.append("    patchConfig: ").append(toIndentedString(patchConfig)).append("\n");
    sb.append("    recurringSchedule: ").append(toIndentedString(recurringSchedule)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("duration");
    openapiFields.add("instanceFilter");
    openapiFields.add("lastExecuteTime");
    openapiFields.add("name");
    openapiFields.add("oneTimeSchedule");
    openapiFields.add("patchConfig");
    openapiFields.add("recurringSchedule");
    openapiFields.add("rollout");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchDeployment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchDeployment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchDeployment is not found in the empty JSON string", PatchDeployment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchDeployment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchDeployment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `instanceFilter`
      if (jsonObj.get("instanceFilter") != null && !jsonObj.get("instanceFilter").isJsonNull()) {
        PatchInstanceFilter.validateJsonElement(jsonObj.get("instanceFilter"));
      }
      if ((jsonObj.get("lastExecuteTime") != null && !jsonObj.get("lastExecuteTime").isJsonNull()) && !jsonObj.get("lastExecuteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastExecuteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastExecuteTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `oneTimeSchedule`
      if (jsonObj.get("oneTimeSchedule") != null && !jsonObj.get("oneTimeSchedule").isJsonNull()) {
        OneTimeSchedule.validateJsonElement(jsonObj.get("oneTimeSchedule"));
      }
      // validate the optional field `patchConfig`
      if (jsonObj.get("patchConfig") != null && !jsonObj.get("patchConfig").isJsonNull()) {
        PatchConfig.validateJsonElement(jsonObj.get("patchConfig"));
      }
      // validate the optional field `recurringSchedule`
      if (jsonObj.get("recurringSchedule") != null && !jsonObj.get("recurringSchedule").isJsonNull()) {
        RecurringSchedule.validateJsonElement(jsonObj.get("recurringSchedule"));
      }
      // validate the optional field `rollout`
      if (jsonObj.get("rollout") != null && !jsonObj.get("rollout").isJsonNull()) {
        PatchRollout.validateJsonElement(jsonObj.get("rollout"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchDeployment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchDeployment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchDeployment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchDeployment.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchDeployment>() {
           @Override
           public void write(JsonWriter out, PatchDeployment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchDeployment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchDeployment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchDeployment
   * @throws IOException if the JSON string is invalid with respect to PatchDeployment
   */
  public static PatchDeployment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchDeployment.class);
  }

  /**
   * Convert an instance of PatchDeployment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

