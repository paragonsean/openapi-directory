/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Yum patching is performed by executing &#x60;yum update&#x60;. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class YumSettings {
  public static final String SERIALIZED_NAME_EXCLUDES = "excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List<String> excludes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUSIVE_PACKAGES = "exclusivePackages";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_PACKAGES)
  private List<String> exclusivePackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMAL = "minimal";
  @SerializedName(SERIALIZED_NAME_MINIMAL)
  private Boolean minimal;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private Boolean security;

  public YumSettings() {
  }

  public YumSettings excludes(List<String> excludes) {
    this.excludes = excludes;
    return this;
  }

  public YumSettings addExcludesItem(String excludesItem) {
    if (this.excludes == null) {
      this.excludes = new ArrayList<>();
    }
    this.excludes.add(excludesItem);
    return this;
  }

  /**
   * List of packages to exclude from update. These packages are excluded by using the yum &#x60;--exclude&#x60; flag.
   * @return excludes
   */
  @javax.annotation.Nullable
  public List<String> getExcludes() {
    return excludes;
  }

  public void setExcludes(List<String> excludes) {
    this.excludes = excludes;
  }


  public YumSettings exclusivePackages(List<String> exclusivePackages) {
    this.exclusivePackages = exclusivePackages;
    return this;
  }

  public YumSettings addExclusivePackagesItem(String exclusivePackagesItem) {
    if (this.exclusivePackages == null) {
      this.exclusivePackages = new ArrayList<>();
    }
    this.exclusivePackages.add(exclusivePackagesItem);
    return this;
  }

  /**
   * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
   * @return exclusivePackages
   */
  @javax.annotation.Nullable
  public List<String> getExclusivePackages() {
    return exclusivePackages;
  }

  public void setExclusivePackages(List<String> exclusivePackages) {
    this.exclusivePackages = exclusivePackages;
  }


  public YumSettings minimal(Boolean minimal) {
    this.minimal = minimal;
    return this;
  }

  /**
   * Will cause patch to run &#x60;yum update-minimal&#x60; instead.
   * @return minimal
   */
  @javax.annotation.Nullable
  public Boolean getMinimal() {
    return minimal;
  }

  public void setMinimal(Boolean minimal) {
    this.minimal = minimal;
  }


  public YumSettings security(Boolean security) {
    this.security = security;
    return this;
  }

  /**
   * Adds the &#x60;--security&#x60; flag to &#x60;yum update&#x60;. Not supported on all platforms.
   * @return security
   */
  @javax.annotation.Nullable
  public Boolean getSecurity() {
    return security;
  }

  public void setSecurity(Boolean security) {
    this.security = security;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    YumSettings yumSettings = (YumSettings) o;
    return Objects.equals(this.excludes, yumSettings.excludes) &&
        Objects.equals(this.exclusivePackages, yumSettings.exclusivePackages) &&
        Objects.equals(this.minimal, yumSettings.minimal) &&
        Objects.equals(this.security, yumSettings.security);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludes, exclusivePackages, minimal, security);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class YumSettings {\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    exclusivePackages: ").append(toIndentedString(exclusivePackages)).append("\n");
    sb.append("    minimal: ").append(toIndentedString(minimal)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludes");
    openapiFields.add("exclusivePackages");
    openapiFields.add("minimal");
    openapiFields.add("security");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to YumSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!YumSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in YumSettings is not found in the empty JSON string", YumSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!YumSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `YumSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludes") != null && !jsonObj.get("excludes").isJsonNull() && !jsonObj.get("excludes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludes` to be an array in the JSON string but got `%s`", jsonObj.get("excludes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclusivePackages") != null && !jsonObj.get("exclusivePackages").isJsonNull() && !jsonObj.get("exclusivePackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusivePackages` to be an array in the JSON string but got `%s`", jsonObj.get("exclusivePackages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!YumSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'YumSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<YumSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(YumSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<YumSettings>() {
           @Override
           public void write(JsonWriter out, YumSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public YumSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of YumSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of YumSettings
   * @throws IOException if the JSON string is invalid with respect to YumSettings
   */
  public static YumSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, YumSettings.class);
  }

  /**
   * Convert an instance of YumSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

