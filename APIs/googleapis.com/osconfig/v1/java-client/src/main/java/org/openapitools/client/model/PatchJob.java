/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PatchConfig;
import org.openapitools.client.model.PatchInstanceFilter;
import org.openapitools.client.model.PatchJobInstanceDetailsSummary;
import org.openapitools.client.model.PatchRollout;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A high level representation of a patch job that is either in progress or has completed. Instance details are not included in the job. To paginate through instance details, use &#x60;ListPatchJobInstanceDetails&#x60;. For more information about patch jobs, see [Creating patch jobs](https://cloud.google.com/compute/docs/os-patch-management/create-patch-job).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchJob {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_INSTANCE_DETAILS_SUMMARY = "instanceDetailsSummary";
  @SerializedName(SERIALIZED_NAME_INSTANCE_DETAILS_SUMMARY)
  private PatchJobInstanceDetailsSummary instanceDetailsSummary;

  public static final String SERIALIZED_NAME_INSTANCE_FILTER = "instanceFilter";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FILTER)
  private PatchInstanceFilter instanceFilter;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATCH_CONFIG = "patchConfig";
  @SerializedName(SERIALIZED_NAME_PATCH_CONFIG)
  private PatchConfig patchConfig;

  public static final String SERIALIZED_NAME_PATCH_DEPLOYMENT = "patchDeployment";
  @SerializedName(SERIALIZED_NAME_PATCH_DEPLOYMENT)
  private String patchDeployment;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Double percentComplete;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private PatchRollout rollout;

  /**
   * The current state of the PatchJob.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    STARTED("STARTED"),
    
    INSTANCE_LOOKUP("INSTANCE_LOOKUP"),
    
    PATCHING("PATCHING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    COMPLETED_WITH_ERRORS("COMPLETED_WITH_ERRORS"),
    
    CANCELED("CANCELED"),
    
    TIMED_OUT("TIMED_OUT");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public PatchJob() {
  }

  public PatchJob(
     String patchDeployment
  ) {
    this();
    this.patchDeployment = patchDeployment;
  }

  public PatchJob createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Time this patch job was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public PatchJob description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the patch job. Length of the description is limited to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PatchJob displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name for this patch job. This is not a unique identifier.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PatchJob dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * If this patch job is a dry run, the agent reports that it has finished without running any updates on the VM instance.
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public PatchJob duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration of the patch job. After the duration ends, the patch job times out.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public PatchJob errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * If this patch job failed, this message provides information about the failure.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public PatchJob instanceDetailsSummary(PatchJobInstanceDetailsSummary instanceDetailsSummary) {
    this.instanceDetailsSummary = instanceDetailsSummary;
    return this;
  }

  /**
   * Get instanceDetailsSummary
   * @return instanceDetailsSummary
   */
  @javax.annotation.Nullable
  public PatchJobInstanceDetailsSummary getInstanceDetailsSummary() {
    return instanceDetailsSummary;
  }

  public void setInstanceDetailsSummary(PatchJobInstanceDetailsSummary instanceDetailsSummary) {
    this.instanceDetailsSummary = instanceDetailsSummary;
  }


  public PatchJob instanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
    return this;
  }

  /**
   * Get instanceFilter
   * @return instanceFilter
   */
  @javax.annotation.Nullable
  public PatchInstanceFilter getInstanceFilter() {
    return instanceFilter;
  }

  public void setInstanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
  }


  public PatchJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique identifier for this patch job in the form &#x60;projects/_*_/patchJobs/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchJob patchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
    return this;
  }

  /**
   * Get patchConfig
   * @return patchConfig
   */
  @javax.annotation.Nullable
  public PatchConfig getPatchConfig() {
    return patchConfig;
  }

  public void setPatchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
  }


  /**
   * Output only. Name of the patch deployment that created this patch job.
   * @return patchDeployment
   */
  @javax.annotation.Nullable
  public String getPatchDeployment() {
    return patchDeployment;
  }



  public PatchJob percentComplete(Double percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Reflects the overall progress of the patch job in the range of 0.0 being no progress to 100.0 being complete.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Double getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(Double percentComplete) {
    this.percentComplete = percentComplete;
  }


  public PatchJob rollout(PatchRollout rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Get rollout
   * @return rollout
   */
  @javax.annotation.Nullable
  public PatchRollout getRollout() {
    return rollout;
  }

  public void setRollout(PatchRollout rollout) {
    this.rollout = rollout;
  }


  public PatchJob state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the PatchJob.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public PatchJob updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Last time this patch job was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchJob patchJob = (PatchJob) o;
    return Objects.equals(this.createTime, patchJob.createTime) &&
        Objects.equals(this.description, patchJob.description) &&
        Objects.equals(this.displayName, patchJob.displayName) &&
        Objects.equals(this.dryRun, patchJob.dryRun) &&
        Objects.equals(this.duration, patchJob.duration) &&
        Objects.equals(this.errorMessage, patchJob.errorMessage) &&
        Objects.equals(this.instanceDetailsSummary, patchJob.instanceDetailsSummary) &&
        Objects.equals(this.instanceFilter, patchJob.instanceFilter) &&
        Objects.equals(this.name, patchJob.name) &&
        Objects.equals(this.patchConfig, patchJob.patchConfig) &&
        Objects.equals(this.patchDeployment, patchJob.patchDeployment) &&
        Objects.equals(this.percentComplete, patchJob.percentComplete) &&
        Objects.equals(this.rollout, patchJob.rollout) &&
        Objects.equals(this.state, patchJob.state) &&
        Objects.equals(this.updateTime, patchJob.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, displayName, dryRun, duration, errorMessage, instanceDetailsSummary, instanceFilter, name, patchConfig, patchDeployment, percentComplete, rollout, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchJob {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    instanceDetailsSummary: ").append(toIndentedString(instanceDetailsSummary)).append("\n");
    sb.append("    instanceFilter: ").append(toIndentedString(instanceFilter)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    patchConfig: ").append(toIndentedString(patchConfig)).append("\n");
    sb.append("    patchDeployment: ").append(toIndentedString(patchDeployment)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("dryRun");
    openapiFields.add("duration");
    openapiFields.add("errorMessage");
    openapiFields.add("instanceDetailsSummary");
    openapiFields.add("instanceFilter");
    openapiFields.add("name");
    openapiFields.add("patchConfig");
    openapiFields.add("patchDeployment");
    openapiFields.add("percentComplete");
    openapiFields.add("rollout");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchJob is not found in the empty JSON string", PatchJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      // validate the optional field `instanceDetailsSummary`
      if (jsonObj.get("instanceDetailsSummary") != null && !jsonObj.get("instanceDetailsSummary").isJsonNull()) {
        PatchJobInstanceDetailsSummary.validateJsonElement(jsonObj.get("instanceDetailsSummary"));
      }
      // validate the optional field `instanceFilter`
      if (jsonObj.get("instanceFilter") != null && !jsonObj.get("instanceFilter").isJsonNull()) {
        PatchInstanceFilter.validateJsonElement(jsonObj.get("instanceFilter"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `patchConfig`
      if (jsonObj.get("patchConfig") != null && !jsonObj.get("patchConfig").isJsonNull()) {
        PatchConfig.validateJsonElement(jsonObj.get("patchConfig"));
      }
      if ((jsonObj.get("patchDeployment") != null && !jsonObj.get("patchDeployment").isJsonNull()) && !jsonObj.get("patchDeployment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patchDeployment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patchDeployment").toString()));
      }
      // validate the optional field `rollout`
      if (jsonObj.get("rollout") != null && !jsonObj.get("rollout").isJsonNull()) {
        PatchRollout.validateJsonElement(jsonObj.get("rollout"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchJob.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchJob>() {
           @Override
           public void write(JsonWriter out, PatchJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchJob
   * @throws IOException if the JSON string is invalid with respect to PatchJob
   */
  public static PatchJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchJob.class);
  }

  /**
   * Convert an instance of PatchJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

