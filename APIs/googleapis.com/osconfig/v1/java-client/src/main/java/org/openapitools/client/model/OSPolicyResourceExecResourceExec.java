/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicyResourceFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A file or script to execute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyResourceExecResourceExec {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private OSPolicyResourceFile _file;

  /**
   * Required. The script interpreter to use.
   */
  @JsonAdapter(InterpreterEnum.Adapter.class)
  public enum InterpreterEnum {
    INTERPRETER_UNSPECIFIED("INTERPRETER_UNSPECIFIED"),
    
    NONE("NONE"),
    
    SHELL("SHELL"),
    
    POWERSHELL("POWERSHELL");

    private String value;

    InterpreterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterpreterEnum fromValue(String value) {
      for (InterpreterEnum b : InterpreterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterpreterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterpreterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterpreterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterpreterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterpreterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERPRETER = "interpreter";
  @SerializedName(SERIALIZED_NAME_INTERPRETER)
  private InterpreterEnum interpreter;

  public static final String SERIALIZED_NAME_OUTPUT_FILE_PATH = "outputFilePath";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILE_PATH)
  private String outputFilePath;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public OSPolicyResourceExecResourceExec() {
  }

  public OSPolicyResourceExecResourceExec args(List<String> args) {
    this.args = args;
    return this;
  }

  public OSPolicyResourceExecResourceExec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Optional arguments to pass to the source during execution.
   * @return args
   */
  @javax.annotation.Nullable
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }


  public OSPolicyResourceExecResourceExec _file(OSPolicyResourceFile _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public OSPolicyResourceFile getFile() {
    return _file;
  }

  public void setFile(OSPolicyResourceFile _file) {
    this._file = _file;
  }


  public OSPolicyResourceExecResourceExec interpreter(InterpreterEnum interpreter) {
    this.interpreter = interpreter;
    return this;
  }

  /**
   * Required. The script interpreter to use.
   * @return interpreter
   */
  @javax.annotation.Nullable
  public InterpreterEnum getInterpreter() {
    return interpreter;
  }

  public void setInterpreter(InterpreterEnum interpreter) {
    this.interpreter = interpreter;
  }


  public OSPolicyResourceExecResourceExec outputFilePath(String outputFilePath) {
    this.outputFilePath = outputFilePath;
    return this;
  }

  /**
   * Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
   * @return outputFilePath
   */
  @javax.annotation.Nullable
  public String getOutputFilePath() {
    return outputFilePath;
  }

  public void setOutputFilePath(String outputFilePath) {
    this.outputFilePath = outputFilePath;
  }


  public OSPolicyResourceExecResourceExec script(String script) {
    this.script = script;
    return this;
  }

  /**
   * An inline script. The size of the script is limited to 32KiB.
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyResourceExecResourceExec osPolicyResourceExecResourceExec = (OSPolicyResourceExecResourceExec) o;
    return Objects.equals(this.args, osPolicyResourceExecResourceExec.args) &&
        Objects.equals(this._file, osPolicyResourceExecResourceExec._file) &&
        Objects.equals(this.interpreter, osPolicyResourceExecResourceExec.interpreter) &&
        Objects.equals(this.outputFilePath, osPolicyResourceExecResourceExec.outputFilePath) &&
        Objects.equals(this.script, osPolicyResourceExecResourceExec.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, _file, interpreter, outputFilePath, script);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyResourceExecResourceExec {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    interpreter: ").append(toIndentedString(interpreter)).append("\n");
    sb.append("    outputFilePath: ").append(toIndentedString(outputFilePath)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("args");
    openapiFields.add("file");
    openapiFields.add("interpreter");
    openapiFields.add("outputFilePath");
    openapiFields.add("script");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyResourceExecResourceExec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyResourceExecResourceExec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyResourceExecResourceExec is not found in the empty JSON string", OSPolicyResourceExecResourceExec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyResourceExecResourceExec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyResourceExecResourceExec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull() && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        OSPolicyResourceFile.validateJsonElement(jsonObj.get("file"));
      }
      if ((jsonObj.get("interpreter") != null && !jsonObj.get("interpreter").isJsonNull()) && !jsonObj.get("interpreter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interpreter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interpreter").toString()));
      }
      // validate the optional field `interpreter`
      if (jsonObj.get("interpreter") != null && !jsonObj.get("interpreter").isJsonNull()) {
        InterpreterEnum.validateJsonElement(jsonObj.get("interpreter"));
      }
      if ((jsonObj.get("outputFilePath") != null && !jsonObj.get("outputFilePath").isJsonNull()) && !jsonObj.get("outputFilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFilePath").toString()));
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyResourceExecResourceExec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyResourceExecResourceExec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyResourceExecResourceExec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyResourceExecResourceExec.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyResourceExecResourceExec>() {
           @Override
           public void write(JsonWriter out, OSPolicyResourceExecResourceExec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyResourceExecResourceExec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyResourceExecResourceExec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyResourceExecResourceExec
   * @throws IOException if the JSON string is invalid with respect to OSPolicyResourceExecResourceExec
   */
  public static OSPolicyResourceExecResourceExec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyResourceExecResourceExec.class);
  }

  /**
   * Convert an instance of OSPolicyResourceExecResourceExec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

