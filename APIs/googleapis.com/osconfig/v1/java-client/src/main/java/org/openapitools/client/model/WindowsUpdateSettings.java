/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Windows patching is performed using the Windows Update Agent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WindowsUpdateSettings {
  /**
   * Gets or Sets classifications
   */
  @JsonAdapter(ClassificationsEnum.Adapter.class)
  public enum ClassificationsEnum {
    CLASSIFICATION_UNSPECIFIED("CLASSIFICATION_UNSPECIFIED"),
    
    CRITICAL("CRITICAL"),
    
    SECURITY("SECURITY"),
    
    DEFINITION("DEFINITION"),
    
    DRIVER("DRIVER"),
    
    FEATURE_PACK("FEATURE_PACK"),
    
    SERVICE_PACK("SERVICE_PACK"),
    
    TOOL("TOOL"),
    
    UPDATE_ROLLUP("UPDATE_ROLLUP"),
    
    UPDATE("UPDATE");

    private String value;

    ClassificationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassificationsEnum fromValue(String value) {
      for (ClassificationsEnum b : ClassificationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassificationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassificationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassificationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClassificationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<ClassificationsEnum> classifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDES = "excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List<String> excludes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUSIVE_PATCHES = "exclusivePatches";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_PATCHES)
  private List<String> exclusivePatches = new ArrayList<>();

  public WindowsUpdateSettings() {
  }

  public WindowsUpdateSettings classifications(List<ClassificationsEnum> classifications) {
    this.classifications = classifications;
    return this;
  }

  public WindowsUpdateSettings addClassificationsItem(ClassificationsEnum classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

  /**
   * Only apply updates of these windows update classifications. If empty, all updates are applied.
   * @return classifications
   */
  @javax.annotation.Nullable
  public List<ClassificationsEnum> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<ClassificationsEnum> classifications) {
    this.classifications = classifications;
  }


  public WindowsUpdateSettings excludes(List<String> excludes) {
    this.excludes = excludes;
    return this;
  }

  public WindowsUpdateSettings addExcludesItem(String excludesItem) {
    if (this.excludes == null) {
      this.excludes = new ArrayList<>();
    }
    this.excludes.add(excludesItem);
    return this;
  }

  /**
   * List of KBs to exclude from update.
   * @return excludes
   */
  @javax.annotation.Nullable
  public List<String> getExcludes() {
    return excludes;
  }

  public void setExcludes(List<String> excludes) {
    this.excludes = excludes;
  }


  public WindowsUpdateSettings exclusivePatches(List<String> exclusivePatches) {
    this.exclusivePatches = exclusivePatches;
    return this;
  }

  public WindowsUpdateSettings addExclusivePatchesItem(String exclusivePatchesItem) {
    if (this.exclusivePatches == null) {
      this.exclusivePatches = new ArrayList<>();
    }
    this.exclusivePatches.add(exclusivePatchesItem);
    return this;
  }

  /**
   * An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
   * @return exclusivePatches
   */
  @javax.annotation.Nullable
  public List<String> getExclusivePatches() {
    return exclusivePatches;
  }

  public void setExclusivePatches(List<String> exclusivePatches) {
    this.exclusivePatches = exclusivePatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WindowsUpdateSettings windowsUpdateSettings = (WindowsUpdateSettings) o;
    return Objects.equals(this.classifications, windowsUpdateSettings.classifications) &&
        Objects.equals(this.excludes, windowsUpdateSettings.excludes) &&
        Objects.equals(this.exclusivePatches, windowsUpdateSettings.exclusivePatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classifications, excludes, exclusivePatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WindowsUpdateSettings {\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    exclusivePatches: ").append(toIndentedString(exclusivePatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classifications");
    openapiFields.add("excludes");
    openapiFields.add("exclusivePatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WindowsUpdateSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WindowsUpdateSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WindowsUpdateSettings is not found in the empty JSON string", WindowsUpdateSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WindowsUpdateSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WindowsUpdateSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("classifications") != null && !jsonObj.get("classifications").isJsonNull() && !jsonObj.get("classifications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classifications` to be an array in the JSON string but got `%s`", jsonObj.get("classifications").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludes") != null && !jsonObj.get("excludes").isJsonNull() && !jsonObj.get("excludes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludes` to be an array in the JSON string but got `%s`", jsonObj.get("excludes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclusivePatches") != null && !jsonObj.get("exclusivePatches").isJsonNull() && !jsonObj.get("exclusivePatches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusivePatches` to be an array in the JSON string but got `%s`", jsonObj.get("exclusivePatches").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WindowsUpdateSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WindowsUpdateSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WindowsUpdateSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WindowsUpdateSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<WindowsUpdateSettings>() {
           @Override
           public void write(JsonWriter out, WindowsUpdateSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WindowsUpdateSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WindowsUpdateSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WindowsUpdateSettings
   * @throws IOException if the JSON string is invalid with respect to WindowsUpdateSettings
   */
  public static WindowsUpdateSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WindowsUpdateSettings.class);
  }

  /**
   * Convert an instance of WindowsUpdateSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

