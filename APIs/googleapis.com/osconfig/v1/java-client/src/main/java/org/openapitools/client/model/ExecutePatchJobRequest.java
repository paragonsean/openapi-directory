/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PatchConfig;
import org.openapitools.client.model.PatchInstanceFilter;
import org.openapitools.client.model.PatchRollout;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request message to initiate patching across Compute Engine instances.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutePatchJobRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_INSTANCE_FILTER = "instanceFilter";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FILTER)
  private PatchInstanceFilter instanceFilter;

  public static final String SERIALIZED_NAME_PATCH_CONFIG = "patchConfig";
  @SerializedName(SERIALIZED_NAME_PATCH_CONFIG)
  private PatchConfig patchConfig;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private PatchRollout rollout;

  public ExecutePatchJobRequest() {
  }

  public ExecutePatchJobRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the patch job. Length of the description is limited to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ExecutePatchJobRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name for this patch job. This does not have to be unique.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ExecutePatchJobRequest dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * If this patch is a dry-run only, instances are contacted but will do nothing.
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public ExecutePatchJobRequest duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration of the patch job. After the duration ends, the patch job times out.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public ExecutePatchJobRequest instanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
    return this;
  }

  /**
   * Get instanceFilter
   * @return instanceFilter
   */
  @javax.annotation.Nullable
  public PatchInstanceFilter getInstanceFilter() {
    return instanceFilter;
  }

  public void setInstanceFilter(PatchInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
  }


  public ExecutePatchJobRequest patchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
    return this;
  }

  /**
   * Get patchConfig
   * @return patchConfig
   */
  @javax.annotation.Nullable
  public PatchConfig getPatchConfig() {
    return patchConfig;
  }

  public void setPatchConfig(PatchConfig patchConfig) {
    this.patchConfig = patchConfig;
  }


  public ExecutePatchJobRequest rollout(PatchRollout rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Get rollout
   * @return rollout
   */
  @javax.annotation.Nullable
  public PatchRollout getRollout() {
    return rollout;
  }

  public void setRollout(PatchRollout rollout) {
    this.rollout = rollout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutePatchJobRequest executePatchJobRequest = (ExecutePatchJobRequest) o;
    return Objects.equals(this.description, executePatchJobRequest.description) &&
        Objects.equals(this.displayName, executePatchJobRequest.displayName) &&
        Objects.equals(this.dryRun, executePatchJobRequest.dryRun) &&
        Objects.equals(this.duration, executePatchJobRequest.duration) &&
        Objects.equals(this.instanceFilter, executePatchJobRequest.instanceFilter) &&
        Objects.equals(this.patchConfig, executePatchJobRequest.patchConfig) &&
        Objects.equals(this.rollout, executePatchJobRequest.rollout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, dryRun, duration, instanceFilter, patchConfig, rollout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutePatchJobRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    instanceFilter: ").append(toIndentedString(instanceFilter)).append("\n");
    sb.append("    patchConfig: ").append(toIndentedString(patchConfig)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("dryRun");
    openapiFields.add("duration");
    openapiFields.add("instanceFilter");
    openapiFields.add("patchConfig");
    openapiFields.add("rollout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutePatchJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutePatchJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutePatchJobRequest is not found in the empty JSON string", ExecutePatchJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutePatchJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutePatchJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `instanceFilter`
      if (jsonObj.get("instanceFilter") != null && !jsonObj.get("instanceFilter").isJsonNull()) {
        PatchInstanceFilter.validateJsonElement(jsonObj.get("instanceFilter"));
      }
      // validate the optional field `patchConfig`
      if (jsonObj.get("patchConfig") != null && !jsonObj.get("patchConfig").isJsonNull()) {
        PatchConfig.validateJsonElement(jsonObj.get("patchConfig"));
      }
      // validate the optional field `rollout`
      if (jsonObj.get("rollout") != null && !jsonObj.get("rollout").isJsonNull()) {
        PatchRollout.validateJsonElement(jsonObj.get("rollout"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutePatchJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutePatchJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutePatchJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutePatchJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutePatchJobRequest>() {
           @Override
           public void write(JsonWriter out, ExecutePatchJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutePatchJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutePatchJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutePatchJobRequest
   * @throws IOException if the JSON string is invalid with respect to ExecutePatchJobRequest
   */
  public static ExecutePatchJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutePatchJobRequest.class);
  }

  /**
   * Convert an instance of ExecutePatchJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

