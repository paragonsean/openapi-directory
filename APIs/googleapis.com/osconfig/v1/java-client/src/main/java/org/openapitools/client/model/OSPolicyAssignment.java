/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicy;
import org.openapitools.client.model.OSPolicyAssignmentInstanceFilter;
import org.openapitools.client.model.OSPolicyAssignmentRollout;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information about the OS policy resource definitions and examples, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyAssignment {
  public static final String SERIALIZED_NAME_BASELINE = "baseline";
  @SerializedName(SERIALIZED_NAME_BASELINE)
  private Boolean baseline;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_INSTANCE_FILTER = "instanceFilter";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FILTER)
  private OSPolicyAssignmentInstanceFilter instanceFilter;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_POLICIES = "osPolicies";
  @SerializedName(SERIALIZED_NAME_OS_POLICIES)
  private List<OSPolicy> osPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_REVISION_CREATE_TIME = "revisionCreateTime";
  @SerializedName(SERIALIZED_NAME_REVISION_CREATE_TIME)
  private String revisionCreateTime;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private OSPolicyAssignmentRollout rollout;

  /**
   * Output only. OS policy assignment rollout state
   */
  @JsonAdapter(RolloutStateEnum.Adapter.class)
  public enum RolloutStateEnum {
    ROLLOUT_STATE_UNSPECIFIED("ROLLOUT_STATE_UNSPECIFIED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    CANCELLING("CANCELLING"),
    
    CANCELLED("CANCELLED"),
    
    SUCCEEDED("SUCCEEDED");

    private String value;

    RolloutStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolloutStateEnum fromValue(String value) {
      for (RolloutStateEnum b : RolloutStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolloutStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolloutStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolloutStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolloutStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolloutStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLLOUT_STATE = "rolloutState";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_STATE)
  private RolloutStateEnum rolloutState;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public OSPolicyAssignment() {
  }

  public OSPolicyAssignment(
     Boolean baseline, 
     Boolean deleted, 
     Boolean reconciling, 
     String revisionCreateTime, 
     String revisionId, 
     RolloutStateEnum rolloutState, 
     String uid
  ) {
    this();
    this.baseline = baseline;
    this.deleted = deleted;
    this.reconciling = reconciling;
    this.revisionCreateTime = revisionCreateTime;
    this.revisionId = revisionId;
    this.rolloutState = rolloutState;
    this.uid = uid;
  }

  /**
   * Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of &#x60;true&#x60; for this field.
   * @return baseline
   */
  @javax.annotation.Nullable
  public Boolean getBaseline() {
    return baseline;
  }



  /**
   * Output only. Indicates that this revision deletes the OS policy assignment.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }



  public OSPolicyAssignment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * OS policy assignment description. Length of the description is limited to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OSPolicyAssignment etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The etag for this OS policy assignment. If this is provided on update, it must match the server&#39;s etag.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public OSPolicyAssignment instanceFilter(OSPolicyAssignmentInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
    return this;
  }

  /**
   * Get instanceFilter
   * @return instanceFilter
   */
  @javax.annotation.Nullable
  public OSPolicyAssignmentInstanceFilter getInstanceFilter() {
    return instanceFilter;
  }

  public void setInstanceFilter(OSPolicyAssignmentInstanceFilter instanceFilter) {
    this.instanceFilter = instanceFilter;
  }


  public OSPolicyAssignment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name. Format: &#x60;projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}&#x60; This field is ignored when you create an OS policy assignment.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OSPolicyAssignment osPolicies(List<OSPolicy> osPolicies) {
    this.osPolicies = osPolicies;
    return this;
  }

  public OSPolicyAssignment addOsPoliciesItem(OSPolicy osPoliciesItem) {
    if (this.osPolicies == null) {
      this.osPolicies = new ArrayList<>();
    }
    this.osPolicies.add(osPoliciesItem);
    return this;
  }

  /**
   * Required. List of OS policies to be applied to the VMs.
   * @return osPolicies
   */
  @javax.annotation.Nullable
  public List<OSPolicy> getOsPolicies() {
    return osPolicies;
  }

  public void setOsPolicies(List<OSPolicy> osPolicies) {
    this.osPolicies = osPolicies;
  }


  /**
   * Output only. Indicates that reconciliation is in progress for the revision. This value is &#x60;true&#x60; when the &#x60;rollout_state&#x60; is one of: * IN_PROGRESS * CANCELLING
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. The timestamp that the revision was created.
   * @return revisionCreateTime
   */
  @javax.annotation.Nullable
  public String getRevisionCreateTime() {
    return revisionCreateTime;
  }



  /**
   * Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }



  public OSPolicyAssignment rollout(OSPolicyAssignmentRollout rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Get rollout
   * @return rollout
   */
  @javax.annotation.Nullable
  public OSPolicyAssignmentRollout getRollout() {
    return rollout;
  }

  public void setRollout(OSPolicyAssignmentRollout rollout) {
    this.rollout = rollout;
  }


  /**
   * Output only. OS policy assignment rollout state
   * @return rolloutState
   */
  @javax.annotation.Nullable
  public RolloutStateEnum getRolloutState() {
    return rolloutState;
  }



  /**
   * Output only. Server generated unique id for the OS policy assignment resource.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyAssignment osPolicyAssignment = (OSPolicyAssignment) o;
    return Objects.equals(this.baseline, osPolicyAssignment.baseline) &&
        Objects.equals(this.deleted, osPolicyAssignment.deleted) &&
        Objects.equals(this.description, osPolicyAssignment.description) &&
        Objects.equals(this.etag, osPolicyAssignment.etag) &&
        Objects.equals(this.instanceFilter, osPolicyAssignment.instanceFilter) &&
        Objects.equals(this.name, osPolicyAssignment.name) &&
        Objects.equals(this.osPolicies, osPolicyAssignment.osPolicies) &&
        Objects.equals(this.reconciling, osPolicyAssignment.reconciling) &&
        Objects.equals(this.revisionCreateTime, osPolicyAssignment.revisionCreateTime) &&
        Objects.equals(this.revisionId, osPolicyAssignment.revisionId) &&
        Objects.equals(this.rollout, osPolicyAssignment.rollout) &&
        Objects.equals(this.rolloutState, osPolicyAssignment.rolloutState) &&
        Objects.equals(this.uid, osPolicyAssignment.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseline, deleted, description, etag, instanceFilter, name, osPolicies, reconciling, revisionCreateTime, revisionId, rollout, rolloutState, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyAssignment {\n");
    sb.append("    baseline: ").append(toIndentedString(baseline)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    instanceFilter: ").append(toIndentedString(instanceFilter)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osPolicies: ").append(toIndentedString(osPolicies)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    revisionCreateTime: ").append(toIndentedString(revisionCreateTime)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    rolloutState: ").append(toIndentedString(rolloutState)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseline");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("instanceFilter");
    openapiFields.add("name");
    openapiFields.add("osPolicies");
    openapiFields.add("reconciling");
    openapiFields.add("revisionCreateTime");
    openapiFields.add("revisionId");
    openapiFields.add("rollout");
    openapiFields.add("rolloutState");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyAssignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyAssignment is not found in the empty JSON string", OSPolicyAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyAssignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `instanceFilter`
      if (jsonObj.get("instanceFilter") != null && !jsonObj.get("instanceFilter").isJsonNull()) {
        OSPolicyAssignmentInstanceFilter.validateJsonElement(jsonObj.get("instanceFilter"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("osPolicies") != null && !jsonObj.get("osPolicies").isJsonNull()) {
        JsonArray jsonArrayosPolicies = jsonObj.getAsJsonArray("osPolicies");
        if (jsonArrayosPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("osPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `osPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("osPolicies").toString()));
          }

          // validate the optional field `osPolicies` (array)
          for (int i = 0; i < jsonArrayosPolicies.size(); i++) {
            OSPolicy.validateJsonElement(jsonArrayosPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("revisionCreateTime") != null && !jsonObj.get("revisionCreateTime").isJsonNull()) && !jsonObj.get("revisionCreateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionCreateTime").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      // validate the optional field `rollout`
      if (jsonObj.get("rollout") != null && !jsonObj.get("rollout").isJsonNull()) {
        OSPolicyAssignmentRollout.validateJsonElement(jsonObj.get("rollout"));
      }
      if ((jsonObj.get("rolloutState") != null && !jsonObj.get("rolloutState").isJsonNull()) && !jsonObj.get("rolloutState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolloutState").toString()));
      }
      // validate the optional field `rolloutState`
      if (jsonObj.get("rolloutState") != null && !jsonObj.get("rolloutState").isJsonNull()) {
        RolloutStateEnum.validateJsonElement(jsonObj.get("rolloutState"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyAssignment>() {
           @Override
           public void write(JsonWriter out, OSPolicyAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyAssignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyAssignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyAssignment
   * @throws IOException if the JSON string is invalid with respect to OSPolicyAssignment
   */
  public static OSPolicyAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyAssignment.class);
  }

  /**
   * Convert an instance of OSPolicyAssignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

