/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PatchInstanceFilterGroupLabel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:57.663717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchInstanceFilter {
  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private Boolean all;

  public static final String SERIALIZED_NAME_GROUP_LABELS = "groupLabels";
  @SerializedName(SERIALIZED_NAME_GROUP_LABELS)
  private List<PatchInstanceFilterGroupLabel> groupLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_NAME_PREFIXES = "instanceNamePrefixes";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME_PREFIXES)
  private List<String> instanceNamePrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<String> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONES = "zones";
  @SerializedName(SERIALIZED_NAME_ZONES)
  private List<String> zones = new ArrayList<>();

  public PatchInstanceFilter() {
  }

  public PatchInstanceFilter all(Boolean all) {
    this.all = all;
    return this;
  }

  /**
   * Target all VM instances in the project. If true, no other criteria is permitted.
   * @return all
   */
  @javax.annotation.Nullable
  public Boolean getAll() {
    return all;
  }

  public void setAll(Boolean all) {
    this.all = all;
  }


  public PatchInstanceFilter groupLabels(List<PatchInstanceFilterGroupLabel> groupLabels) {
    this.groupLabels = groupLabels;
    return this;
  }

  public PatchInstanceFilter addGroupLabelsItem(PatchInstanceFilterGroupLabel groupLabelsItem) {
    if (this.groupLabels == null) {
      this.groupLabels = new ArrayList<>();
    }
    this.groupLabels.add(groupLabelsItem);
    return this;
  }

  /**
   * Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
   * @return groupLabels
   */
  @javax.annotation.Nullable
  public List<PatchInstanceFilterGroupLabel> getGroupLabels() {
    return groupLabels;
  }

  public void setGroupLabels(List<PatchInstanceFilterGroupLabel> groupLabels) {
    this.groupLabels = groupLabels;
  }


  public PatchInstanceFilter instanceNamePrefixes(List<String> instanceNamePrefixes) {
    this.instanceNamePrefixes = instanceNamePrefixes;
    return this;
  }

  public PatchInstanceFilter addInstanceNamePrefixesItem(String instanceNamePrefixesItem) {
    if (this.instanceNamePrefixes == null) {
      this.instanceNamePrefixes = new ArrayList<>();
    }
    this.instanceNamePrefixes.add(instanceNamePrefixesItem);
    return this;
  }

  /**
   * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix&#x3D;\&quot;prod-\&quot;.
   * @return instanceNamePrefixes
   */
  @javax.annotation.Nullable
  public List<String> getInstanceNamePrefixes() {
    return instanceNamePrefixes;
  }

  public void setInstanceNamePrefixes(List<String> instanceNamePrefixes) {
    this.instanceNamePrefixes = instanceNamePrefixes;
  }


  public PatchInstanceFilter instances(List<String> instances) {
    this.instances = instances;
    return this;
  }

  public PatchInstanceFilter addInstancesItem(String instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * Targets any of the VM instances specified. Instances are specified by their URI in the form &#x60;zones/[ZONE]/instances/[INSTANCE_NAME]&#x60;, &#x60;projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]&#x60;, or &#x60;https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]&#x60;
   * @return instances
   */
  @javax.annotation.Nullable
  public List<String> getInstances() {
    return instances;
  }

  public void setInstances(List<String> instances) {
    this.instances = instances;
  }


  public PatchInstanceFilter zones(List<String> zones) {
    this.zones = zones;
    return this;
  }

  public PatchInstanceFilter addZonesItem(String zonesItem) {
    if (this.zones == null) {
      this.zones = new ArrayList<>();
    }
    this.zones.add(zonesItem);
    return this;
  }

  /**
   * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
   * @return zones
   */
  @javax.annotation.Nullable
  public List<String> getZones() {
    return zones;
  }

  public void setZones(List<String> zones) {
    this.zones = zones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchInstanceFilter patchInstanceFilter = (PatchInstanceFilter) o;
    return Objects.equals(this.all, patchInstanceFilter.all) &&
        Objects.equals(this.groupLabels, patchInstanceFilter.groupLabels) &&
        Objects.equals(this.instanceNamePrefixes, patchInstanceFilter.instanceNamePrefixes) &&
        Objects.equals(this.instances, patchInstanceFilter.instances) &&
        Objects.equals(this.zones, patchInstanceFilter.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, groupLabels, instanceNamePrefixes, instances, zones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchInstanceFilter {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    groupLabels: ").append(toIndentedString(groupLabels)).append("\n");
    sb.append("    instanceNamePrefixes: ").append(toIndentedString(instanceNamePrefixes)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all");
    openapiFields.add("groupLabels");
    openapiFields.add("instanceNamePrefixes");
    openapiFields.add("instances");
    openapiFields.add("zones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchInstanceFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchInstanceFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchInstanceFilter is not found in the empty JSON string", PatchInstanceFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchInstanceFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchInstanceFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("groupLabels") != null && !jsonObj.get("groupLabels").isJsonNull()) {
        JsonArray jsonArraygroupLabels = jsonObj.getAsJsonArray("groupLabels");
        if (jsonArraygroupLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupLabels` to be an array in the JSON string but got `%s`", jsonObj.get("groupLabels").toString()));
          }

          // validate the optional field `groupLabels` (array)
          for (int i = 0; i < jsonArraygroupLabels.size(); i++) {
            PatchInstanceFilterGroupLabel.validateJsonElement(jsonArraygroupLabels.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceNamePrefixes") != null && !jsonObj.get("instanceNamePrefixes").isJsonNull() && !jsonObj.get("instanceNamePrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceNamePrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("instanceNamePrefixes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull() && !jsonObj.get("instances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zones") != null && !jsonObj.get("zones").isJsonNull() && !jsonObj.get("zones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zones` to be an array in the JSON string but got `%s`", jsonObj.get("zones").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchInstanceFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchInstanceFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchInstanceFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchInstanceFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchInstanceFilter>() {
           @Override
           public void write(JsonWriter out, PatchInstanceFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchInstanceFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchInstanceFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchInstanceFilter
   * @throws IOException if the JSON string is invalid with respect to PatchInstanceFilter
   */
  public static PatchInstanceFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchInstanceFilter.class);
  }

  /**
   * Convert an instance of PatchInstanceFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

