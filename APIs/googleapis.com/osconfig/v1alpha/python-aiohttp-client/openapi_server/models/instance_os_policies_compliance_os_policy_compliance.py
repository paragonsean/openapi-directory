# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_compliance import OSPolicyResourceCompliance
from openapi_server import util


class InstanceOSPoliciesComplianceOSPolicyCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os_policy_assignment: str=None, os_policy_id: str=None, os_policy_resource_compliances: List[OSPolicyResourceCompliance]=None, state: str=None):
        """InstanceOSPoliciesComplianceOSPolicyCompliance - a model defined in OpenAPI

        :param os_policy_assignment: The os_policy_assignment of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :param os_policy_id: The os_policy_id of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :param os_policy_resource_compliances: The os_policy_resource_compliances of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :param state: The state of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        """
        self.openapi_types = {
            'os_policy_assignment': str,
            'os_policy_id': str,
            'os_policy_resource_compliances': List[OSPolicyResourceCompliance],
            'state': str
        }

        self.attribute_map = {
            'os_policy_assignment': 'osPolicyAssignment',
            'os_policy_id': 'osPolicyId',
            'os_policy_resource_compliances': 'osPolicyResourceCompliances',
            'state': 'state'
        }

        self._os_policy_assignment = os_policy_assignment
        self._os_policy_id = os_policy_id
        self._os_policy_resource_compliances = os_policy_resource_compliances
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceOSPoliciesComplianceOSPolicyCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceOSPoliciesComplianceOSPolicyCompliance of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os_policy_assignment(self):
        """Gets the os_policy_assignment of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`

        :return: The os_policy_assignment of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :rtype: str
        """
        return self._os_policy_assignment

    @os_policy_assignment.setter
    def os_policy_assignment(self, os_policy_assignment):
        """Sets the os_policy_assignment of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`

        :param os_policy_assignment: The os_policy_assignment of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :type os_policy_assignment: str
        """

        self._os_policy_assignment = os_policy_assignment

    @property
    def os_policy_id(self):
        """Gets the os_policy_id of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        The OS policy id

        :return: The os_policy_id of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :rtype: str
        """
        return self._os_policy_id

    @os_policy_id.setter
    def os_policy_id(self, os_policy_id):
        """Sets the os_policy_id of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        The OS policy id

        :param os_policy_id: The os_policy_id of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :type os_policy_id: str
        """

        self._os_policy_id = os_policy_id

    @property
    def os_policy_resource_compliances(self):
        """Gets the os_policy_resource_compliances of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        Compliance data for each `OSPolicyResource` that is applied to the VM.

        :return: The os_policy_resource_compliances of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :rtype: List[OSPolicyResourceCompliance]
        """
        return self._os_policy_resource_compliances

    @os_policy_resource_compliances.setter
    def os_policy_resource_compliances(self, os_policy_resource_compliances):
        """Sets the os_policy_resource_compliances of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        Compliance data for each `OSPolicyResource` that is applied to the VM.

        :param os_policy_resource_compliances: The os_policy_resource_compliances of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :type os_policy_resource_compliances: List[OSPolicyResourceCompliance]
        """

        self._os_policy_resource_compliances = os_policy_resource_compliances

    @property
    def state(self):
        """Gets the state of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        Compliance state of the OS policy.

        :return: The state of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InstanceOSPoliciesComplianceOSPolicyCompliance.

        Compliance state of the OS policy.

        :param state: The state of this InstanceOSPoliciesComplianceOSPolicyCompliance.
        :type state: str
        """
        allowed_values = ["OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED", "COMPLIANT", "NON_COMPLIANT", "UNKNOWN", "NO_OS_POLICIES_APPLICABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
