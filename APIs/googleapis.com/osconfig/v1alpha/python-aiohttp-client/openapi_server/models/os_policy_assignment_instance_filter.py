# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_assignment_instance_filter_inventory import OSPolicyAssignmentInstanceFilterInventory
from openapi_server.models.os_policy_assignment_label_set import OSPolicyAssignmentLabelSet
from openapi_server import util


class OSPolicyAssignmentInstanceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: bool=None, exclusion_labels: List[OSPolicyAssignmentLabelSet]=None, inclusion_labels: List[OSPolicyAssignmentLabelSet]=None, inventories: List[OSPolicyAssignmentInstanceFilterInventory]=None, os_short_names: List[str]=None):
        """OSPolicyAssignmentInstanceFilter - a model defined in OpenAPI

        :param all: The all of this OSPolicyAssignmentInstanceFilter.
        :param exclusion_labels: The exclusion_labels of this OSPolicyAssignmentInstanceFilter.
        :param inclusion_labels: The inclusion_labels of this OSPolicyAssignmentInstanceFilter.
        :param inventories: The inventories of this OSPolicyAssignmentInstanceFilter.
        :param os_short_names: The os_short_names of this OSPolicyAssignmentInstanceFilter.
        """
        self.openapi_types = {
            'all': bool,
            'exclusion_labels': List[OSPolicyAssignmentLabelSet],
            'inclusion_labels': List[OSPolicyAssignmentLabelSet],
            'inventories': List[OSPolicyAssignmentInstanceFilterInventory],
            'os_short_names': List[str]
        }

        self.attribute_map = {
            'all': 'all',
            'exclusion_labels': 'exclusionLabels',
            'inclusion_labels': 'inclusionLabels',
            'inventories': 'inventories',
            'os_short_names': 'osShortNames'
        }

        self._all = all
        self._exclusion_labels = exclusion_labels
        self._inclusion_labels = inclusion_labels
        self._inventories = inventories
        self._os_short_names = os_short_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignmentInstanceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignmentInstanceFilter of this OSPolicyAssignmentInstanceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this OSPolicyAssignmentInstanceFilter.

        Target all VMs in the project. If true, no other criteria is permitted.

        :return: The all of this OSPolicyAssignmentInstanceFilter.
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this OSPolicyAssignmentInstanceFilter.

        Target all VMs in the project. If true, no other criteria is permitted.

        :param all: The all of this OSPolicyAssignmentInstanceFilter.
        :type all: bool
        """

        self._all = all

    @property
    def exclusion_labels(self):
        """Gets the exclusion_labels of this OSPolicyAssignmentInstanceFilter.

        List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.

        :return: The exclusion_labels of this OSPolicyAssignmentInstanceFilter.
        :rtype: List[OSPolicyAssignmentLabelSet]
        """
        return self._exclusion_labels

    @exclusion_labels.setter
    def exclusion_labels(self, exclusion_labels):
        """Sets the exclusion_labels of this OSPolicyAssignmentInstanceFilter.

        List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.

        :param exclusion_labels: The exclusion_labels of this OSPolicyAssignmentInstanceFilter.
        :type exclusion_labels: List[OSPolicyAssignmentLabelSet]
        """

        self._exclusion_labels = exclusion_labels

    @property
    def inclusion_labels(self):
        """Gets the inclusion_labels of this OSPolicyAssignmentInstanceFilter.

        List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.

        :return: The inclusion_labels of this OSPolicyAssignmentInstanceFilter.
        :rtype: List[OSPolicyAssignmentLabelSet]
        """
        return self._inclusion_labels

    @inclusion_labels.setter
    def inclusion_labels(self, inclusion_labels):
        """Sets the inclusion_labels of this OSPolicyAssignmentInstanceFilter.

        List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.

        :param inclusion_labels: The inclusion_labels of this OSPolicyAssignmentInstanceFilter.
        :type inclusion_labels: List[OSPolicyAssignmentLabelSet]
        """

        self._inclusion_labels = inclusion_labels

    @property
    def inventories(self):
        """Gets the inventories of this OSPolicyAssignmentInstanceFilter.

        List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.

        :return: The inventories of this OSPolicyAssignmentInstanceFilter.
        :rtype: List[OSPolicyAssignmentInstanceFilterInventory]
        """
        return self._inventories

    @inventories.setter
    def inventories(self, inventories):
        """Sets the inventories of this OSPolicyAssignmentInstanceFilter.

        List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.

        :param inventories: The inventories of this OSPolicyAssignmentInstanceFilter.
        :type inventories: List[OSPolicyAssignmentInstanceFilterInventory]
        """

        self._inventories = inventories

    @property
    def os_short_names(self):
        """Gets the os_short_names of this OSPolicyAssignmentInstanceFilter.

        Deprecated. Use the `inventories` field instead. A VM is selected if it's OS short name matches with any of the values provided in this list.

        :return: The os_short_names of this OSPolicyAssignmentInstanceFilter.
        :rtype: List[str]
        """
        return self._os_short_names

    @os_short_names.setter
    def os_short_names(self, os_short_names):
        """Sets the os_short_names of this OSPolicyAssignmentInstanceFilter.

        Deprecated. Use the `inventories` field instead. A VM is selected if it's OS short name matches with any of the values provided in this list.

        :param os_short_names: The os_short_names of this OSPolicyAssignmentInstanceFilter.
        :type os_short_names: List[str]
        """

        self._os_short_names = os_short_names
