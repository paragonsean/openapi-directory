# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy import OSPolicy
from openapi_server.models.os_policy_assignment_instance_filter import OSPolicyAssignmentInstanceFilter
from openapi_server.models.os_policy_assignment_rollout import OSPolicyAssignmentRollout
from openapi_server import util


class OSPolicyAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baseline: bool=None, deleted: bool=None, description: str=None, etag: str=None, instance_filter: OSPolicyAssignmentInstanceFilter=None, name: str=None, os_policies: List[OSPolicy]=None, reconciling: bool=None, revision_create_time: str=None, revision_id: str=None, rollout: OSPolicyAssignmentRollout=None, rollout_state: str=None, uid: str=None):
        """OSPolicyAssignment - a model defined in OpenAPI

        :param baseline: The baseline of this OSPolicyAssignment.
        :param deleted: The deleted of this OSPolicyAssignment.
        :param description: The description of this OSPolicyAssignment.
        :param etag: The etag of this OSPolicyAssignment.
        :param instance_filter: The instance_filter of this OSPolicyAssignment.
        :param name: The name of this OSPolicyAssignment.
        :param os_policies: The os_policies of this OSPolicyAssignment.
        :param reconciling: The reconciling of this OSPolicyAssignment.
        :param revision_create_time: The revision_create_time of this OSPolicyAssignment.
        :param revision_id: The revision_id of this OSPolicyAssignment.
        :param rollout: The rollout of this OSPolicyAssignment.
        :param rollout_state: The rollout_state of this OSPolicyAssignment.
        :param uid: The uid of this OSPolicyAssignment.
        """
        self.openapi_types = {
            'baseline': bool,
            'deleted': bool,
            'description': str,
            'etag': str,
            'instance_filter': OSPolicyAssignmentInstanceFilter,
            'name': str,
            'os_policies': List[OSPolicy],
            'reconciling': bool,
            'revision_create_time': str,
            'revision_id': str,
            'rollout': OSPolicyAssignmentRollout,
            'rollout_state': str,
            'uid': str
        }

        self.attribute_map = {
            'baseline': 'baseline',
            'deleted': 'deleted',
            'description': 'description',
            'etag': 'etag',
            'instance_filter': 'instanceFilter',
            'name': 'name',
            'os_policies': 'osPolicies',
            'reconciling': 'reconciling',
            'revision_create_time': 'revisionCreateTime',
            'revision_id': 'revisionId',
            'rollout': 'rollout',
            'rollout_state': 'rolloutState',
            'uid': 'uid'
        }

        self._baseline = baseline
        self._deleted = deleted
        self._description = description
        self._etag = etag
        self._instance_filter = instance_filter
        self._name = name
        self._os_policies = os_policies
        self._reconciling = reconciling
        self._revision_create_time = revision_create_time
        self._revision_id = revision_id
        self._rollout = rollout
        self._rollout_state = rollout_state
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignment of this OSPolicyAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baseline(self):
        """Gets the baseline of this OSPolicyAssignment.

        Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.

        :return: The baseline of this OSPolicyAssignment.
        :rtype: bool
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this OSPolicyAssignment.

        Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.

        :param baseline: The baseline of this OSPolicyAssignment.
        :type baseline: bool
        """

        self._baseline = baseline

    @property
    def deleted(self):
        """Gets the deleted of this OSPolicyAssignment.

        Output only. Indicates that this revision deletes the OS policy assignment.

        :return: The deleted of this OSPolicyAssignment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this OSPolicyAssignment.

        Output only. Indicates that this revision deletes the OS policy assignment.

        :param deleted: The deleted of this OSPolicyAssignment.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this OSPolicyAssignment.

        OS policy assignment description. Length of the description is limited to 1024 characters.

        :return: The description of this OSPolicyAssignment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OSPolicyAssignment.

        OS policy assignment description. Length of the description is limited to 1024 characters.

        :param description: The description of this OSPolicyAssignment.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this OSPolicyAssignment.

        The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.

        :return: The etag of this OSPolicyAssignment.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this OSPolicyAssignment.

        The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.

        :param etag: The etag of this OSPolicyAssignment.
        :type etag: str
        """

        self._etag = etag

    @property
    def instance_filter(self):
        """Gets the instance_filter of this OSPolicyAssignment.


        :return: The instance_filter of this OSPolicyAssignment.
        :rtype: OSPolicyAssignmentInstanceFilter
        """
        return self._instance_filter

    @instance_filter.setter
    def instance_filter(self, instance_filter):
        """Sets the instance_filter of this OSPolicyAssignment.


        :param instance_filter: The instance_filter of this OSPolicyAssignment.
        :type instance_filter: OSPolicyAssignmentInstanceFilter
        """

        self._instance_filter = instance_filter

    @property
    def name(self):
        """Gets the name of this OSPolicyAssignment.

        Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.

        :return: The name of this OSPolicyAssignment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSPolicyAssignment.

        Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.

        :param name: The name of this OSPolicyAssignment.
        :type name: str
        """

        self._name = name

    @property
    def os_policies(self):
        """Gets the os_policies of this OSPolicyAssignment.

        Required. List of OS policies to be applied to the VMs.

        :return: The os_policies of this OSPolicyAssignment.
        :rtype: List[OSPolicy]
        """
        return self._os_policies

    @os_policies.setter
    def os_policies(self, os_policies):
        """Sets the os_policies of this OSPolicyAssignment.

        Required. List of OS policies to be applied to the VMs.

        :param os_policies: The os_policies of this OSPolicyAssignment.
        :type os_policies: List[OSPolicy]
        """

        self._os_policies = os_policies

    @property
    def reconciling(self):
        """Gets the reconciling of this OSPolicyAssignment.

        Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING

        :return: The reconciling of this OSPolicyAssignment.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this OSPolicyAssignment.

        Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING

        :param reconciling: The reconciling of this OSPolicyAssignment.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this OSPolicyAssignment.

        Output only. The timestamp that the revision was created.

        :return: The revision_create_time of this OSPolicyAssignment.
        :rtype: str
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this OSPolicyAssignment.

        Output only. The timestamp that the revision was created.

        :param revision_create_time: The revision_create_time of this OSPolicyAssignment.
        :type revision_create_time: str
        """

        self._revision_create_time = revision_create_time

    @property
    def revision_id(self):
        """Gets the revision_id of this OSPolicyAssignment.

        Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment

        :return: The revision_id of this OSPolicyAssignment.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this OSPolicyAssignment.

        Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment

        :param revision_id: The revision_id of this OSPolicyAssignment.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def rollout(self):
        """Gets the rollout of this OSPolicyAssignment.


        :return: The rollout of this OSPolicyAssignment.
        :rtype: OSPolicyAssignmentRollout
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this OSPolicyAssignment.


        :param rollout: The rollout of this OSPolicyAssignment.
        :type rollout: OSPolicyAssignmentRollout
        """

        self._rollout = rollout

    @property
    def rollout_state(self):
        """Gets the rollout_state of this OSPolicyAssignment.

        Output only. OS policy assignment rollout state

        :return: The rollout_state of this OSPolicyAssignment.
        :rtype: str
        """
        return self._rollout_state

    @rollout_state.setter
    def rollout_state(self, rollout_state):
        """Sets the rollout_state of this OSPolicyAssignment.

        Output only. OS policy assignment rollout state

        :param rollout_state: The rollout_state of this OSPolicyAssignment.
        :type rollout_state: str
        """
        allowed_values = ["ROLLOUT_STATE_UNSPECIFIED", "IN_PROGRESS", "CANCELLING", "CANCELLED", "SUCCEEDED"]  # noqa: E501
        if rollout_state not in allowed_values:
            raise ValueError(
                "Invalid value for `rollout_state` ({0}), must be one of {1}"
                .format(rollout_state, allowed_values)
            )

        self._rollout_state = rollout_state

    @property
    def uid(self):
        """Gets the uid of this OSPolicyAssignment.

        Output only. Server generated unique id for the OS policy assignment resource.

        :return: The uid of this OSPolicyAssignment.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OSPolicyAssignment.

        Output only. Server generated unique id for the OS policy assignment resource.

        :param uid: The uid of this OSPolicyAssignment.
        :type uid: str
        """

        self._uid = uid
