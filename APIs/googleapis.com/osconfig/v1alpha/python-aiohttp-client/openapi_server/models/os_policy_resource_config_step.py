# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OSPolicyResourceConfigStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, outcome: str=None, type: str=None):
        """OSPolicyResourceConfigStep - a model defined in OpenAPI

        :param error_message: The error_message of this OSPolicyResourceConfigStep.
        :param outcome: The outcome of this OSPolicyResourceConfigStep.
        :param type: The type of this OSPolicyResourceConfigStep.
        """
        self.openapi_types = {
            'error_message': str,
            'outcome': str,
            'type': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'outcome': 'outcome',
            'type': 'type'
        }

        self._error_message = error_message
        self._outcome = outcome
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResourceConfigStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResourceConfigStep of this OSPolicyResourceConfigStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this OSPolicyResourceConfigStep.

        An error message recorded during the execution of this step. Only populated when outcome is FAILED.

        :return: The error_message of this OSPolicyResourceConfigStep.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this OSPolicyResourceConfigStep.

        An error message recorded during the execution of this step. Only populated when outcome is FAILED.

        :param error_message: The error_message of this OSPolicyResourceConfigStep.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def outcome(self):
        """Gets the outcome of this OSPolicyResourceConfigStep.

        Outcome of the configuration step.

        :return: The outcome of this OSPolicyResourceConfigStep.
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this OSPolicyResourceConfigStep.

        Outcome of the configuration step.

        :param outcome: The outcome of this OSPolicyResourceConfigStep.
        :type outcome: str
        """
        allowed_values = ["OUTCOME_UNSPECIFIED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def type(self):
        """Gets the type of this OSPolicyResourceConfigStep.

        Configuration step type.

        :return: The type of this OSPolicyResourceConfigStep.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OSPolicyResourceConfigStep.

        Configuration step type.

        :param type: The type of this OSPolicyResourceConfigStep.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "VALIDATION", "DESIRED_STATE_CHECK", "DESIRED_STATE_ENFORCEMENT", "DESIRED_STATE_CHECK_POST_ENFORCEMENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
