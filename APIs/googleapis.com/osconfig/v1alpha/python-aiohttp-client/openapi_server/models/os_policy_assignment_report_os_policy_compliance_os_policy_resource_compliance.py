# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_assignment_report_os_policy_compliance_os_policy_resource_compliance_exec_resource_output import OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput
from openapi_server.models.os_policy_assignment_report_os_policy_compliance_os_policy_resource_compliance_os_policy_resource_config_step import OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep
from openapi_server import util


class OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance_state: str=None, compliance_state_reason: str=None, config_steps: List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep]=None, exec_resource_output: OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput=None, os_policy_resource_id: str=None):
        """OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance - a model defined in OpenAPI

        :param compliance_state: The compliance_state of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :param compliance_state_reason: The compliance_state_reason of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :param config_steps: The config_steps of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :param exec_resource_output: The exec_resource_output of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :param os_policy_resource_id: The os_policy_resource_id of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        """
        self.openapi_types = {
            'compliance_state': str,
            'compliance_state_reason': str,
            'config_steps': List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep],
            'exec_resource_output': OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput,
            'os_policy_resource_id': str
        }

        self.attribute_map = {
            'compliance_state': 'complianceState',
            'compliance_state_reason': 'complianceStateReason',
            'config_steps': 'configSteps',
            'exec_resource_output': 'execResourceOutput',
            'os_policy_resource_id': 'osPolicyResourceId'
        }

        self._compliance_state = compliance_state
        self._compliance_state_reason = compliance_state_reason
        self._config_steps = config_steps
        self._exec_resource_output = exec_resource_output
        self._os_policy_resource_id = os_policy_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance_state(self):
        """Gets the compliance_state of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        The compliance state of the resource.

        :return: The compliance_state of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :rtype: str
        """
        return self._compliance_state

    @compliance_state.setter
    def compliance_state(self, compliance_state):
        """Sets the compliance_state of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        The compliance state of the resource.

        :param compliance_state: The compliance_state of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :type compliance_state: str
        """
        allowed_values = ["UNKNOWN", "COMPLIANT", "NON_COMPLIANT"]  # noqa: E501
        if compliance_state not in allowed_values:
            raise ValueError(
                "Invalid value for `compliance_state` ({0}), must be one of {1}"
                .format(compliance_state, allowed_values)
            )

        self._compliance_state = compliance_state

    @property
    def compliance_state_reason(self):
        """Gets the compliance_state_reason of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        A reason for the resource to be in the given compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. The following values are supported when `compliance_state == UNKNOWN` * `execution-errors`: Errors were encountered by the agent while executing the resource and the compliance state couldn't be determined. * `execution-skipped-by-agent`: Resource execution was skipped by the agent because errors were encountered while executing prior resources in the OS policy. * `os-policy-execution-attempt-failed`: The execution of the OS policy containing this resource failed and the compliance state couldn't be determined.

        :return: The compliance_state_reason of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :rtype: str
        """
        return self._compliance_state_reason

    @compliance_state_reason.setter
    def compliance_state_reason(self, compliance_state_reason):
        """Sets the compliance_state_reason of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        A reason for the resource to be in the given compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. The following values are supported when `compliance_state == UNKNOWN` * `execution-errors`: Errors were encountered by the agent while executing the resource and the compliance state couldn't be determined. * `execution-skipped-by-agent`: Resource execution was skipped by the agent because errors were encountered while executing prior resources in the OS policy. * `os-policy-execution-attempt-failed`: The execution of the OS policy containing this resource failed and the compliance state couldn't be determined.

        :param compliance_state_reason: The compliance_state_reason of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :type compliance_state_reason: str
        """

        self._compliance_state_reason = compliance_state_reason

    @property
    def config_steps(self):
        """Gets the config_steps of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        Ordered list of configuration completed by the agent for the OS policy resource.

        :return: The config_steps of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :rtype: List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep]
        """
        return self._config_steps

    @config_steps.setter
    def config_steps(self, config_steps):
        """Sets the config_steps of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        Ordered list of configuration completed by the agent for the OS policy resource.

        :param config_steps: The config_steps of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :type config_steps: List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceOSPolicyResourceConfigStep]
        """

        self._config_steps = config_steps

    @property
    def exec_resource_output(self):
        """Gets the exec_resource_output of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.


        :return: The exec_resource_output of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :rtype: OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput
        """
        return self._exec_resource_output

    @exec_resource_output.setter
    def exec_resource_output(self, exec_resource_output):
        """Sets the exec_resource_output of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.


        :param exec_resource_output: The exec_resource_output of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :type exec_resource_output: OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceComplianceExecResourceOutput
        """

        self._exec_resource_output = exec_resource_output

    @property
    def os_policy_resource_id(self):
        """Gets the os_policy_resource_id of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        The ID of the OS policy resource.

        :return: The os_policy_resource_id of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :rtype: str
        """
        return self._os_policy_resource_id

    @os_policy_resource_id.setter
    def os_policy_resource_id(self, os_policy_resource_id):
        """Sets the os_policy_resource_id of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.

        The ID of the OS policy resource.

        :param os_policy_resource_id: The os_policy_resource_id of this OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.
        :type os_policy_resource_id: str
        """

        self._os_policy_resource_id = os_policy_resource_id
