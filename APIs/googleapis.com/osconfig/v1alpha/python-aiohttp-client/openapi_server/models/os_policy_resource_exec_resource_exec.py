# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_file import OSPolicyResourceFile
from openapi_server import util


class OSPolicyResourceExecResourceExec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, file: OSPolicyResourceFile=None, interpreter: str=None, output_file_path: str=None, script: str=None):
        """OSPolicyResourceExecResourceExec - a model defined in OpenAPI

        :param args: The args of this OSPolicyResourceExecResourceExec.
        :param file: The file of this OSPolicyResourceExecResourceExec.
        :param interpreter: The interpreter of this OSPolicyResourceExecResourceExec.
        :param output_file_path: The output_file_path of this OSPolicyResourceExecResourceExec.
        :param script: The script of this OSPolicyResourceExecResourceExec.
        """
        self.openapi_types = {
            'args': List[str],
            'file': OSPolicyResourceFile,
            'interpreter': str,
            'output_file_path': str,
            'script': str
        }

        self.attribute_map = {
            'args': 'args',
            'file': 'file',
            'interpreter': 'interpreter',
            'output_file_path': 'outputFilePath',
            'script': 'script'
        }

        self._args = args
        self._file = file
        self._interpreter = interpreter
        self._output_file_path = output_file_path
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResourceExecResourceExec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResourceExecResourceExec of this OSPolicyResourceExecResourceExec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this OSPolicyResourceExecResourceExec.

        Optional arguments to pass to the source during execution.

        :return: The args of this OSPolicyResourceExecResourceExec.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this OSPolicyResourceExecResourceExec.

        Optional arguments to pass to the source during execution.

        :param args: The args of this OSPolicyResourceExecResourceExec.
        :type args: List[str]
        """

        self._args = args

    @property
    def file(self):
        """Gets the file of this OSPolicyResourceExecResourceExec.


        :return: The file of this OSPolicyResourceExecResourceExec.
        :rtype: OSPolicyResourceFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this OSPolicyResourceExecResourceExec.


        :param file: The file of this OSPolicyResourceExecResourceExec.
        :type file: OSPolicyResourceFile
        """

        self._file = file

    @property
    def interpreter(self):
        """Gets the interpreter of this OSPolicyResourceExecResourceExec.

        Required. The script interpreter to use.

        :return: The interpreter of this OSPolicyResourceExecResourceExec.
        :rtype: str
        """
        return self._interpreter

    @interpreter.setter
    def interpreter(self, interpreter):
        """Sets the interpreter of this OSPolicyResourceExecResourceExec.

        Required. The script interpreter to use.

        :param interpreter: The interpreter of this OSPolicyResourceExecResourceExec.
        :type interpreter: str
        """
        allowed_values = ["INTERPRETER_UNSPECIFIED", "NONE", "SHELL", "POWERSHELL"]  # noqa: E501
        if interpreter not in allowed_values:
            raise ValueError(
                "Invalid value for `interpreter` ({0}), must be one of {1}"
                .format(interpreter, allowed_values)
            )

        self._interpreter = interpreter

    @property
    def output_file_path(self):
        """Gets the output_file_path of this OSPolicyResourceExecResourceExec.

        Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.

        :return: The output_file_path of this OSPolicyResourceExecResourceExec.
        :rtype: str
        """
        return self._output_file_path

    @output_file_path.setter
    def output_file_path(self, output_file_path):
        """Sets the output_file_path of this OSPolicyResourceExecResourceExec.

        Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.

        :param output_file_path: The output_file_path of this OSPolicyResourceExecResourceExec.
        :type output_file_path: str
        """

        self._output_file_path = output_file_path

    @property
    def script(self):
        """Gets the script of this OSPolicyResourceExecResourceExec.

        An inline script. The size of the script is limited to 32KiB.

        :return: The script of this OSPolicyResourceExecResourceExec.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this OSPolicyResourceExecResourceExec.

        An inline script. The size of the script is limited to 32KiB.

        :param script: The script of this OSPolicyResourceExecResourceExec.
        :type script: str
        """

        self._script = script
