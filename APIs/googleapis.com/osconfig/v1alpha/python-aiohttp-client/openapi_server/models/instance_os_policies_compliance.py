# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_os_policies_compliance_os_policy_compliance import InstanceOSPoliciesComplianceOSPolicyCompliance
from openapi_server import util


class InstanceOSPoliciesCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detailed_state: str=None, detailed_state_reason: str=None, instance: str=None, last_compliance_check_time: str=None, last_compliance_run_id: str=None, name: str=None, os_policy_compliances: List[InstanceOSPoliciesComplianceOSPolicyCompliance]=None, state: str=None):
        """InstanceOSPoliciesCompliance - a model defined in OpenAPI

        :param detailed_state: The detailed_state of this InstanceOSPoliciesCompliance.
        :param detailed_state_reason: The detailed_state_reason of this InstanceOSPoliciesCompliance.
        :param instance: The instance of this InstanceOSPoliciesCompliance.
        :param last_compliance_check_time: The last_compliance_check_time of this InstanceOSPoliciesCompliance.
        :param last_compliance_run_id: The last_compliance_run_id of this InstanceOSPoliciesCompliance.
        :param name: The name of this InstanceOSPoliciesCompliance.
        :param os_policy_compliances: The os_policy_compliances of this InstanceOSPoliciesCompliance.
        :param state: The state of this InstanceOSPoliciesCompliance.
        """
        self.openapi_types = {
            'detailed_state': str,
            'detailed_state_reason': str,
            'instance': str,
            'last_compliance_check_time': str,
            'last_compliance_run_id': str,
            'name': str,
            'os_policy_compliances': List[InstanceOSPoliciesComplianceOSPolicyCompliance],
            'state': str
        }

        self.attribute_map = {
            'detailed_state': 'detailedState',
            'detailed_state_reason': 'detailedStateReason',
            'instance': 'instance',
            'last_compliance_check_time': 'lastComplianceCheckTime',
            'last_compliance_run_id': 'lastComplianceRunId',
            'name': 'name',
            'os_policy_compliances': 'osPolicyCompliances',
            'state': 'state'
        }

        self._detailed_state = detailed_state
        self._detailed_state_reason = detailed_state_reason
        self._instance = instance
        self._last_compliance_check_time = last_compliance_check_time
        self._last_compliance_run_id = last_compliance_run_id
        self._name = name
        self._os_policy_compliances = os_policy_compliances
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceOSPoliciesCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceOSPoliciesCompliance of this InstanceOSPoliciesCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detailed_state(self):
        """Gets the detailed_state of this InstanceOSPoliciesCompliance.

        Output only. Detailed compliance state of the VM. This field is populated only when compliance state is `UNKNOWN`. It may contain one of the following values: * `no-compliance-data`: Compliance data is not available for this VM. * `no-agent-detected`: OS Config agent is not detected for this VM. * `config-not-supported-by-agent`: The version of the OS Config agent running on this VM does not support configuration management. * `inactive`: VM is not running. * `internal-service-errors`: There were internal service errors encountered while enforcing compliance. * `agent-errors`: OS config agent encountered errors while enforcing compliance.

        :return: The detailed_state of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._detailed_state

    @detailed_state.setter
    def detailed_state(self, detailed_state):
        """Sets the detailed_state of this InstanceOSPoliciesCompliance.

        Output only. Detailed compliance state of the VM. This field is populated only when compliance state is `UNKNOWN`. It may contain one of the following values: * `no-compliance-data`: Compliance data is not available for this VM. * `no-agent-detected`: OS Config agent is not detected for this VM. * `config-not-supported-by-agent`: The version of the OS Config agent running on this VM does not support configuration management. * `inactive`: VM is not running. * `internal-service-errors`: There were internal service errors encountered while enforcing compliance. * `agent-errors`: OS config agent encountered errors while enforcing compliance.

        :param detailed_state: The detailed_state of this InstanceOSPoliciesCompliance.
        :type detailed_state: str
        """

        self._detailed_state = detailed_state

    @property
    def detailed_state_reason(self):
        """Gets the detailed_state_reason of this InstanceOSPoliciesCompliance.

        Output only. The reason for the `detailed_state` of the VM (if any).

        :return: The detailed_state_reason of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._detailed_state_reason

    @detailed_state_reason.setter
    def detailed_state_reason(self, detailed_state_reason):
        """Sets the detailed_state_reason of this InstanceOSPoliciesCompliance.

        Output only. The reason for the `detailed_state` of the VM (if any).

        :param detailed_state_reason: The detailed_state_reason of this InstanceOSPoliciesCompliance.
        :type detailed_state_reason: str
        """

        self._detailed_state_reason = detailed_state_reason

    @property
    def instance(self):
        """Gets the instance of this InstanceOSPoliciesCompliance.

        Output only. The Compute Engine VM instance name.

        :return: The instance of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this InstanceOSPoliciesCompliance.

        Output only. The Compute Engine VM instance name.

        :param instance: The instance of this InstanceOSPoliciesCompliance.
        :type instance: str
        """

        self._instance = instance

    @property
    def last_compliance_check_time(self):
        """Gets the last_compliance_check_time of this InstanceOSPoliciesCompliance.

        Output only. Timestamp of the last compliance check for the VM.

        :return: The last_compliance_check_time of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._last_compliance_check_time

    @last_compliance_check_time.setter
    def last_compliance_check_time(self, last_compliance_check_time):
        """Sets the last_compliance_check_time of this InstanceOSPoliciesCompliance.

        Output only. Timestamp of the last compliance check for the VM.

        :param last_compliance_check_time: The last_compliance_check_time of this InstanceOSPoliciesCompliance.
        :type last_compliance_check_time: str
        """

        self._last_compliance_check_time = last_compliance_check_time

    @property
    def last_compliance_run_id(self):
        """Gets the last_compliance_run_id of this InstanceOSPoliciesCompliance.

        Output only. Unique identifier for the last compliance run. This id will be logged by the OS config agent during a compliance run and can be used for debugging and tracing purpose.

        :return: The last_compliance_run_id of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._last_compliance_run_id

    @last_compliance_run_id.setter
    def last_compliance_run_id(self, last_compliance_run_id):
        """Sets the last_compliance_run_id of this InstanceOSPoliciesCompliance.

        Output only. Unique identifier for the last compliance run. This id will be logged by the OS config agent during a compliance run and can be used for debugging and tracing purpose.

        :param last_compliance_run_id: The last_compliance_run_id of this InstanceOSPoliciesCompliance.
        :type last_compliance_run_id: str
        """

        self._last_compliance_run_id = last_compliance_run_id

    @property
    def name(self):
        """Gets the name of this InstanceOSPoliciesCompliance.

        Output only. The `InstanceOSPoliciesCompliance` API resource name. Format: `projects/{project_number}/locations/{location}/instanceOSPoliciesCompliances/{instance_id}`

        :return: The name of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceOSPoliciesCompliance.

        Output only. The `InstanceOSPoliciesCompliance` API resource name. Format: `projects/{project_number}/locations/{location}/instanceOSPoliciesCompliances/{instance_id}`

        :param name: The name of this InstanceOSPoliciesCompliance.
        :type name: str
        """

        self._name = name

    @property
    def os_policy_compliances(self):
        """Gets the os_policy_compliances of this InstanceOSPoliciesCompliance.

        Output only. Compliance data for each `OSPolicy` that is applied to the VM.

        :return: The os_policy_compliances of this InstanceOSPoliciesCompliance.
        :rtype: List[InstanceOSPoliciesComplianceOSPolicyCompliance]
        """
        return self._os_policy_compliances

    @os_policy_compliances.setter
    def os_policy_compliances(self, os_policy_compliances):
        """Sets the os_policy_compliances of this InstanceOSPoliciesCompliance.

        Output only. Compliance data for each `OSPolicy` that is applied to the VM.

        :param os_policy_compliances: The os_policy_compliances of this InstanceOSPoliciesCompliance.
        :type os_policy_compliances: List[InstanceOSPoliciesComplianceOSPolicyCompliance]
        """

        self._os_policy_compliances = os_policy_compliances

    @property
    def state(self):
        """Gets the state of this InstanceOSPoliciesCompliance.

        Output only. Compliance state of the VM.

        :return: The state of this InstanceOSPoliciesCompliance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InstanceOSPoliciesCompliance.

        Output only. Compliance state of the VM.

        :param state: The state of this InstanceOSPoliciesCompliance.
        :type state: str
        """
        allowed_values = ["OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED", "COMPLIANT", "NON_COMPLIANT", "UNKNOWN", "NO_OS_POLICIES_APPLICABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
