# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fixed_or_percent import FixedOrPercent
from openapi_server import util


class OSPolicyAssignmentRollout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disruption_budget: FixedOrPercent=None, min_wait_duration: str=None):
        """OSPolicyAssignmentRollout - a model defined in OpenAPI

        :param disruption_budget: The disruption_budget of this OSPolicyAssignmentRollout.
        :param min_wait_duration: The min_wait_duration of this OSPolicyAssignmentRollout.
        """
        self.openapi_types = {
            'disruption_budget': FixedOrPercent,
            'min_wait_duration': str
        }

        self.attribute_map = {
            'disruption_budget': 'disruptionBudget',
            'min_wait_duration': 'minWaitDuration'
        }

        self._disruption_budget = disruption_budget
        self._min_wait_duration = min_wait_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignmentRollout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignmentRollout of this OSPolicyAssignmentRollout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disruption_budget(self):
        """Gets the disruption_budget of this OSPolicyAssignmentRollout.


        :return: The disruption_budget of this OSPolicyAssignmentRollout.
        :rtype: FixedOrPercent
        """
        return self._disruption_budget

    @disruption_budget.setter
    def disruption_budget(self, disruption_budget):
        """Sets the disruption_budget of this OSPolicyAssignmentRollout.


        :param disruption_budget: The disruption_budget of this OSPolicyAssignmentRollout.
        :type disruption_budget: FixedOrPercent
        """

        self._disruption_budget = disruption_budget

    @property
    def min_wait_duration(self):
        """Gets the min_wait_duration of this OSPolicyAssignmentRollout.

        Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.

        :return: The min_wait_duration of this OSPolicyAssignmentRollout.
        :rtype: str
        """
        return self._min_wait_duration

    @min_wait_duration.setter
    def min_wait_duration(self, min_wait_duration):
        """Sets the min_wait_duration of this OSPolicyAssignmentRollout.

        Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.

        :param min_wait_duration: The min_wait_duration of this OSPolicyAssignmentRollout.
        :type min_wait_duration: str
        """

        self._min_wait_duration = min_wait_duration
