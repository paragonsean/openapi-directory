# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_resource_compliance_exec_resource_output import OSPolicyResourceComplianceExecResourceOutput
from openapi_server.models.os_policy_resource_config_step import OSPolicyResourceConfigStep
from openapi_server import util


class OSPolicyResourceCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_steps: List[OSPolicyResourceConfigStep]=None, exec_resource_output: OSPolicyResourceComplianceExecResourceOutput=None, os_policy_resource_id: str=None, state: str=None):
        """OSPolicyResourceCompliance - a model defined in OpenAPI

        :param config_steps: The config_steps of this OSPolicyResourceCompliance.
        :param exec_resource_output: The exec_resource_output of this OSPolicyResourceCompliance.
        :param os_policy_resource_id: The os_policy_resource_id of this OSPolicyResourceCompliance.
        :param state: The state of this OSPolicyResourceCompliance.
        """
        self.openapi_types = {
            'config_steps': List[OSPolicyResourceConfigStep],
            'exec_resource_output': OSPolicyResourceComplianceExecResourceOutput,
            'os_policy_resource_id': str,
            'state': str
        }

        self.attribute_map = {
            'config_steps': 'configSteps',
            'exec_resource_output': 'execResourceOutput',
            'os_policy_resource_id': 'osPolicyResourceId',
            'state': 'state'
        }

        self._config_steps = config_steps
        self._exec_resource_output = exec_resource_output
        self._os_policy_resource_id = os_policy_resource_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyResourceCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyResourceCompliance of this OSPolicyResourceCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_steps(self):
        """Gets the config_steps of this OSPolicyResourceCompliance.

        Ordered list of configuration steps taken by the agent for the OS policy resource.

        :return: The config_steps of this OSPolicyResourceCompliance.
        :rtype: List[OSPolicyResourceConfigStep]
        """
        return self._config_steps

    @config_steps.setter
    def config_steps(self, config_steps):
        """Sets the config_steps of this OSPolicyResourceCompliance.

        Ordered list of configuration steps taken by the agent for the OS policy resource.

        :param config_steps: The config_steps of this OSPolicyResourceCompliance.
        :type config_steps: List[OSPolicyResourceConfigStep]
        """

        self._config_steps = config_steps

    @property
    def exec_resource_output(self):
        """Gets the exec_resource_output of this OSPolicyResourceCompliance.


        :return: The exec_resource_output of this OSPolicyResourceCompliance.
        :rtype: OSPolicyResourceComplianceExecResourceOutput
        """
        return self._exec_resource_output

    @exec_resource_output.setter
    def exec_resource_output(self, exec_resource_output):
        """Sets the exec_resource_output of this OSPolicyResourceCompliance.


        :param exec_resource_output: The exec_resource_output of this OSPolicyResourceCompliance.
        :type exec_resource_output: OSPolicyResourceComplianceExecResourceOutput
        """

        self._exec_resource_output = exec_resource_output

    @property
    def os_policy_resource_id(self):
        """Gets the os_policy_resource_id of this OSPolicyResourceCompliance.

        The id of the OS policy resource.

        :return: The os_policy_resource_id of this OSPolicyResourceCompliance.
        :rtype: str
        """
        return self._os_policy_resource_id

    @os_policy_resource_id.setter
    def os_policy_resource_id(self, os_policy_resource_id):
        """Sets the os_policy_resource_id of this OSPolicyResourceCompliance.

        The id of the OS policy resource.

        :param os_policy_resource_id: The os_policy_resource_id of this OSPolicyResourceCompliance.
        :type os_policy_resource_id: str
        """

        self._os_policy_resource_id = os_policy_resource_id

    @property
    def state(self):
        """Gets the state of this OSPolicyResourceCompliance.

        Compliance state of the OS policy resource.

        :return: The state of this OSPolicyResourceCompliance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OSPolicyResourceCompliance.

        Compliance state of the OS policy resource.

        :param state: The state of this OSPolicyResourceCompliance.
        :type state: str
        """
        allowed_values = ["OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED", "COMPLIANT", "NON_COMPLIANT", "UNKNOWN", "NO_OS_POLICIES_APPLICABLE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
