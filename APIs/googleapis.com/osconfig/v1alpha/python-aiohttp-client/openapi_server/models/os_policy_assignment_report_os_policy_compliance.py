# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_policy_assignment_report_os_policy_compliance_os_policy_resource_compliance import OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance
from openapi_server import util


class OSPolicyAssignmentReportOSPolicyCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compliance_state: str=None, compliance_state_reason: str=None, os_policy_id: str=None, os_policy_resource_compliances: List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance]=None):
        """OSPolicyAssignmentReportOSPolicyCompliance - a model defined in OpenAPI

        :param compliance_state: The compliance_state of this OSPolicyAssignmentReportOSPolicyCompliance.
        :param compliance_state_reason: The compliance_state_reason of this OSPolicyAssignmentReportOSPolicyCompliance.
        :param os_policy_id: The os_policy_id of this OSPolicyAssignmentReportOSPolicyCompliance.
        :param os_policy_resource_compliances: The os_policy_resource_compliances of this OSPolicyAssignmentReportOSPolicyCompliance.
        """
        self.openapi_types = {
            'compliance_state': str,
            'compliance_state_reason': str,
            'os_policy_id': str,
            'os_policy_resource_compliances': List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance]
        }

        self.attribute_map = {
            'compliance_state': 'complianceState',
            'compliance_state_reason': 'complianceStateReason',
            'os_policy_id': 'osPolicyId',
            'os_policy_resource_compliances': 'osPolicyResourceCompliances'
        }

        self._compliance_state = compliance_state
        self._compliance_state_reason = compliance_state_reason
        self._os_policy_id = os_policy_id
        self._os_policy_resource_compliances = os_policy_resource_compliances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSPolicyAssignmentReportOSPolicyCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSPolicyAssignmentReportOSPolicyCompliance of this OSPolicyAssignmentReportOSPolicyCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compliance_state(self):
        """Gets the compliance_state of this OSPolicyAssignmentReportOSPolicyCompliance.

        The compliance state of the OS policy.

        :return: The compliance_state of this OSPolicyAssignmentReportOSPolicyCompliance.
        :rtype: str
        """
        return self._compliance_state

    @compliance_state.setter
    def compliance_state(self, compliance_state):
        """Sets the compliance_state of this OSPolicyAssignmentReportOSPolicyCompliance.

        The compliance state of the OS policy.

        :param compliance_state: The compliance_state of this OSPolicyAssignmentReportOSPolicyCompliance.
        :type compliance_state: str
        """
        allowed_values = ["UNKNOWN", "COMPLIANT", "NON_COMPLIANT"]  # noqa: E501
        if compliance_state not in allowed_values:
            raise ValueError(
                "Invalid value for `compliance_state` ({0}), must be one of {1}"
                .format(compliance_state, allowed_values)
            )

        self._compliance_state = compliance_state

    @property
    def compliance_state_reason(self):
        """Gets the compliance_state_reason of this OSPolicyAssignmentReportOSPolicyCompliance.

        The reason for the OS policy to be in an unknown compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. If populated, the field can contain one of the following values: * `vm-not-running`: The VM was not running. * `os-policies-not-supported-by-agent`: The version of the OS Config agent running on the VM does not support running OS policies. * `no-agent-detected`: The OS Config agent is not detected for the VM. * `resource-execution-errors`: The OS Config agent encountered errors while executing one or more resources in the policy. See `os_policy_resource_compliances` for details. * `task-timeout`: The task sent to the agent to apply the policy timed out. * `unexpected-agent-state`: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * `internal-service-errors`: Internal service errors were encountered while attempting to apply the policy.

        :return: The compliance_state_reason of this OSPolicyAssignmentReportOSPolicyCompliance.
        :rtype: str
        """
        return self._compliance_state_reason

    @compliance_state_reason.setter
    def compliance_state_reason(self, compliance_state_reason):
        """Sets the compliance_state_reason of this OSPolicyAssignmentReportOSPolicyCompliance.

        The reason for the OS policy to be in an unknown compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. If populated, the field can contain one of the following values: * `vm-not-running`: The VM was not running. * `os-policies-not-supported-by-agent`: The version of the OS Config agent running on the VM does not support running OS policies. * `no-agent-detected`: The OS Config agent is not detected for the VM. * `resource-execution-errors`: The OS Config agent encountered errors while executing one or more resources in the policy. See `os_policy_resource_compliances` for details. * `task-timeout`: The task sent to the agent to apply the policy timed out. * `unexpected-agent-state`: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * `internal-service-errors`: Internal service errors were encountered while attempting to apply the policy.

        :param compliance_state_reason: The compliance_state_reason of this OSPolicyAssignmentReportOSPolicyCompliance.
        :type compliance_state_reason: str
        """

        self._compliance_state_reason = compliance_state_reason

    @property
    def os_policy_id(self):
        """Gets the os_policy_id of this OSPolicyAssignmentReportOSPolicyCompliance.

        The OS policy id

        :return: The os_policy_id of this OSPolicyAssignmentReportOSPolicyCompliance.
        :rtype: str
        """
        return self._os_policy_id

    @os_policy_id.setter
    def os_policy_id(self, os_policy_id):
        """Sets the os_policy_id of this OSPolicyAssignmentReportOSPolicyCompliance.

        The OS policy id

        :param os_policy_id: The os_policy_id of this OSPolicyAssignmentReportOSPolicyCompliance.
        :type os_policy_id: str
        """

        self._os_policy_id = os_policy_id

    @property
    def os_policy_resource_compliances(self):
        """Gets the os_policy_resource_compliances of this OSPolicyAssignmentReportOSPolicyCompliance.

        Compliance data for each resource within the policy that is applied to the VM.

        :return: The os_policy_resource_compliances of this OSPolicyAssignmentReportOSPolicyCompliance.
        :rtype: List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance]
        """
        return self._os_policy_resource_compliances

    @os_policy_resource_compliances.setter
    def os_policy_resource_compliances(self, os_policy_resource_compliances):
        """Sets the os_policy_resource_compliances of this OSPolicyAssignmentReportOSPolicyCompliance.

        Compliance data for each resource within the policy that is applied to the VM.

        :param os_policy_resource_compliances: The os_policy_resource_compliances of this OSPolicyAssignmentReportOSPolicyCompliance.
        :type os_policy_resource_compliances: List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance]
        """

        self._os_policy_resource_compliances = os_policy_resource_compliances
