/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyAssignment::OAIOSPolicyAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyAssignment::OAIOSPolicyAssignment() {
    this->initializeModel();
}

OAIOSPolicyAssignment::~OAIOSPolicyAssignment() {}

void OAIOSPolicyAssignment::initializeModel() {

    m_baseline_isSet = false;
    m_baseline_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_instance_filter_isSet = false;
    m_instance_filter_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_policies_isSet = false;
    m_os_policies_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_revision_create_time_isSet = false;
    m_revision_create_time_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;

    m_rollout_state_isSet = false;
    m_rollout_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOSPolicyAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyAssignment::fromJsonObject(QJsonObject json) {

    m_baseline_isValid = ::OpenAPI::fromJsonValue(m_baseline, json[QString("baseline")]);
    m_baseline_isSet = !json[QString("baseline")].isNull() && m_baseline_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_instance_filter_isValid = ::OpenAPI::fromJsonValue(m_instance_filter, json[QString("instanceFilter")]);
    m_instance_filter_isSet = !json[QString("instanceFilter")].isNull() && m_instance_filter_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_policies_isValid = ::OpenAPI::fromJsonValue(m_os_policies, json[QString("osPolicies")]);
    m_os_policies_isSet = !json[QString("osPolicies")].isNull() && m_os_policies_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_revision_create_time_isValid = ::OpenAPI::fromJsonValue(m_revision_create_time, json[QString("revisionCreateTime")]);
    m_revision_create_time_isSet = !json[QString("revisionCreateTime")].isNull() && m_revision_create_time_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;

    m_rollout_state_isValid = ::OpenAPI::fromJsonValue(m_rollout_state, json[QString("rolloutState")]);
    m_rollout_state_isSet = !json[QString("rolloutState")].isNull() && m_rollout_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIOSPolicyAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_baseline_isSet) {
        obj.insert(QString("baseline"), ::OpenAPI::toJsonValue(m_baseline));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_instance_filter.isSet()) {
        obj.insert(QString("instanceFilter"), ::OpenAPI::toJsonValue(m_instance_filter));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_policies.size() > 0) {
        obj.insert(QString("osPolicies"), ::OpenAPI::toJsonValue(m_os_policies));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_revision_create_time_isSet) {
        obj.insert(QString("revisionCreateTime"), ::OpenAPI::toJsonValue(m_revision_create_time));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_rollout.isSet()) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    if (m_rollout_state_isSet) {
        obj.insert(QString("rolloutState"), ::OpenAPI::toJsonValue(m_rollout_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

bool OAIOSPolicyAssignment::isBaseline() const {
    return m_baseline;
}
void OAIOSPolicyAssignment::setBaseline(const bool &baseline) {
    m_baseline = baseline;
    m_baseline_isSet = true;
}

bool OAIOSPolicyAssignment::is_baseline_Set() const{
    return m_baseline_isSet;
}

bool OAIOSPolicyAssignment::is_baseline_Valid() const{
    return m_baseline_isValid;
}

bool OAIOSPolicyAssignment::isDeleted() const {
    return m_deleted;
}
void OAIOSPolicyAssignment::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIOSPolicyAssignment::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIOSPolicyAssignment::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIOSPolicyAssignment::getDescription() const {
    return m_description;
}
void OAIOSPolicyAssignment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOSPolicyAssignment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOSPolicyAssignment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOSPolicyAssignment::getEtag() const {
    return m_etag;
}
void OAIOSPolicyAssignment::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIOSPolicyAssignment::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIOSPolicyAssignment::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIOSPolicyAssignmentInstanceFilter OAIOSPolicyAssignment::getInstanceFilter() const {
    return m_instance_filter;
}
void OAIOSPolicyAssignment::setInstanceFilter(const OAIOSPolicyAssignmentInstanceFilter &instance_filter) {
    m_instance_filter = instance_filter;
    m_instance_filter_isSet = true;
}

bool OAIOSPolicyAssignment::is_instance_filter_Set() const{
    return m_instance_filter_isSet;
}

bool OAIOSPolicyAssignment::is_instance_filter_Valid() const{
    return m_instance_filter_isValid;
}

QString OAIOSPolicyAssignment::getName() const {
    return m_name;
}
void OAIOSPolicyAssignment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOSPolicyAssignment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOSPolicyAssignment::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOSPolicy> OAIOSPolicyAssignment::getOsPolicies() const {
    return m_os_policies;
}
void OAIOSPolicyAssignment::setOsPolicies(const QList<OAIOSPolicy> &os_policies) {
    m_os_policies = os_policies;
    m_os_policies_isSet = true;
}

bool OAIOSPolicyAssignment::is_os_policies_Set() const{
    return m_os_policies_isSet;
}

bool OAIOSPolicyAssignment::is_os_policies_Valid() const{
    return m_os_policies_isValid;
}

bool OAIOSPolicyAssignment::isReconciling() const {
    return m_reconciling;
}
void OAIOSPolicyAssignment::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIOSPolicyAssignment::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIOSPolicyAssignment::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIOSPolicyAssignment::getRevisionCreateTime() const {
    return m_revision_create_time;
}
void OAIOSPolicyAssignment::setRevisionCreateTime(const QString &revision_create_time) {
    m_revision_create_time = revision_create_time;
    m_revision_create_time_isSet = true;
}

bool OAIOSPolicyAssignment::is_revision_create_time_Set() const{
    return m_revision_create_time_isSet;
}

bool OAIOSPolicyAssignment::is_revision_create_time_Valid() const{
    return m_revision_create_time_isValid;
}

QString OAIOSPolicyAssignment::getRevisionId() const {
    return m_revision_id;
}
void OAIOSPolicyAssignment::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIOSPolicyAssignment::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIOSPolicyAssignment::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

OAIOSPolicyAssignmentRollout OAIOSPolicyAssignment::getRollout() const {
    return m_rollout;
}
void OAIOSPolicyAssignment::setRollout(const OAIOSPolicyAssignmentRollout &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAIOSPolicyAssignment::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAIOSPolicyAssignment::is_rollout_Valid() const{
    return m_rollout_isValid;
}

QString OAIOSPolicyAssignment::getRolloutState() const {
    return m_rollout_state;
}
void OAIOSPolicyAssignment::setRolloutState(const QString &rollout_state) {
    m_rollout_state = rollout_state;
    m_rollout_state_isSet = true;
}

bool OAIOSPolicyAssignment::is_rollout_state_Set() const{
    return m_rollout_state_isSet;
}

bool OAIOSPolicyAssignment::is_rollout_state_Valid() const{
    return m_rollout_state_isValid;
}

QString OAIOSPolicyAssignment::getUid() const {
    return m_uid;
}
void OAIOSPolicyAssignment::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOSPolicyAssignment::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOSPolicyAssignment::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOSPolicyAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_baseline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
