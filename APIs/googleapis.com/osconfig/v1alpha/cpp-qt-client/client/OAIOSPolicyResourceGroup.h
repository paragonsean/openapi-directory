/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOSPolicyResourceGroup.h
 *
 * Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the &#x60;OSFilter&#x60; specified within the resource group.
 */

#ifndef OAIOSPolicyResourceGroup_H
#define OAIOSPolicyResourceGroup_H

#include <QJsonObject>

#include "OAIOSPolicyInventoryFilter.h"
#include "OAIOSPolicyOSFilter.h"
#include "OAIOSPolicyResource.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOSPolicyInventoryFilter;
class OAIOSPolicyOSFilter;
class OAIOSPolicyResource;

class OAIOSPolicyResourceGroup : public OAIObject {
public:
    OAIOSPolicyResourceGroup();
    OAIOSPolicyResourceGroup(QString json);
    ~OAIOSPolicyResourceGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIOSPolicyInventoryFilter> getInventoryFilters() const;
    void setInventoryFilters(const QList<OAIOSPolicyInventoryFilter> &inventory_filters);
    bool is_inventory_filters_Set() const;
    bool is_inventory_filters_Valid() const;

    OAIOSPolicyOSFilter getOsFilter() const;
    void setOsFilter(const OAIOSPolicyOSFilter &os_filter);
    bool is_os_filter_Set() const;
    bool is_os_filter_Valid() const;

    QList<OAIOSPolicyResource> getResources() const;
    void setResources(const QList<OAIOSPolicyResource> &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIOSPolicyInventoryFilter> m_inventory_filters;
    bool m_inventory_filters_isSet;
    bool m_inventory_filters_isValid;

    OAIOSPolicyOSFilter m_os_filter;
    bool m_os_filter_isSet;
    bool m_os_filter_isValid;

    QList<OAIOSPolicyResource> m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOSPolicyResourceGroup)

#endif // OAIOSPolicyResourceGroup_H
