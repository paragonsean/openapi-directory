/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceFile::OAIOSPolicyResourceFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceFile::OAIOSPolicyResourceFile() {
    this->initializeModel();
}

OAIOSPolicyResourceFile::~OAIOSPolicyResourceFile() {}

void OAIOSPolicyResourceFile::initializeModel() {

    m_allow_insecure_isSet = false;
    m_allow_insecure_isValid = false;

    m_gcs_isSet = false;
    m_gcs_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;

    m_remote_isSet = false;
    m_remote_isValid = false;
}

void OAIOSPolicyResourceFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceFile::fromJsonObject(QJsonObject json) {

    m_allow_insecure_isValid = ::OpenAPI::fromJsonValue(m_allow_insecure, json[QString("allowInsecure")]);
    m_allow_insecure_isSet = !json[QString("allowInsecure")].isNull() && m_allow_insecure_isValid;

    m_gcs_isValid = ::OpenAPI::fromJsonValue(m_gcs, json[QString("gcs")]);
    m_gcs_isSet = !json[QString("gcs")].isNull() && m_gcs_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("localPath")]);
    m_local_path_isSet = !json[QString("localPath")].isNull() && m_local_path_isValid;

    m_remote_isValid = ::OpenAPI::fromJsonValue(m_remote, json[QString("remote")]);
    m_remote_isSet = !json[QString("remote")].isNull() && m_remote_isValid;
}

QString OAIOSPolicyResourceFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceFile::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_insecure_isSet) {
        obj.insert(QString("allowInsecure"), ::OpenAPI::toJsonValue(m_allow_insecure));
    }
    if (m_gcs.isSet()) {
        obj.insert(QString("gcs"), ::OpenAPI::toJsonValue(m_gcs));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("localPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    if (m_remote.isSet()) {
        obj.insert(QString("remote"), ::OpenAPI::toJsonValue(m_remote));
    }
    return obj;
}

bool OAIOSPolicyResourceFile::isAllowInsecure() const {
    return m_allow_insecure;
}
void OAIOSPolicyResourceFile::setAllowInsecure(const bool &allow_insecure) {
    m_allow_insecure = allow_insecure;
    m_allow_insecure_isSet = true;
}

bool OAIOSPolicyResourceFile::is_allow_insecure_Set() const{
    return m_allow_insecure_isSet;
}

bool OAIOSPolicyResourceFile::is_allow_insecure_Valid() const{
    return m_allow_insecure_isValid;
}

OAIOSPolicyResourceFileGcs OAIOSPolicyResourceFile::getGcs() const {
    return m_gcs;
}
void OAIOSPolicyResourceFile::setGcs(const OAIOSPolicyResourceFileGcs &gcs) {
    m_gcs = gcs;
    m_gcs_isSet = true;
}

bool OAIOSPolicyResourceFile::is_gcs_Set() const{
    return m_gcs_isSet;
}

bool OAIOSPolicyResourceFile::is_gcs_Valid() const{
    return m_gcs_isValid;
}

QString OAIOSPolicyResourceFile::getLocalPath() const {
    return m_local_path;
}
void OAIOSPolicyResourceFile::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAIOSPolicyResourceFile::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAIOSPolicyResourceFile::is_local_path_Valid() const{
    return m_local_path_isValid;
}

OAIOSPolicyResourceFileRemote OAIOSPolicyResourceFile::getRemote() const {
    return m_remote;
}
void OAIOSPolicyResourceFile::setRemote(const OAIOSPolicyResourceFileRemote &remote) {
    m_remote = remote;
    m_remote_isSet = true;
}

bool OAIOSPolicyResourceFile::is_remote_Set() const{
    return m_remote_isSet;
}

bool OAIOSPolicyResourceFile::is_remote_Valid() const{
    return m_remote_isValid;
}

bool OAIOSPolicyResourceFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_insecure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
