/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventorySoftwarePackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventorySoftwarePackage::OAIInventorySoftwarePackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventorySoftwarePackage::OAIInventorySoftwarePackage() {
    this->initializeModel();
}

OAIInventorySoftwarePackage::~OAIInventorySoftwarePackage() {}

void OAIInventorySoftwarePackage::initializeModel() {

    m_apt_package_isSet = false;
    m_apt_package_isValid = false;

    m_cos_package_isSet = false;
    m_cos_package_isValid = false;

    m_googet_package_isSet = false;
    m_googet_package_isValid = false;

    m_qfe_package_isSet = false;
    m_qfe_package_isValid = false;

    m_windows_application_isSet = false;
    m_windows_application_isValid = false;

    m_wua_package_isSet = false;
    m_wua_package_isValid = false;

    m_yum_package_isSet = false;
    m_yum_package_isValid = false;

    m_zypper_package_isSet = false;
    m_zypper_package_isValid = false;

    m_zypper_patch_isSet = false;
    m_zypper_patch_isValid = false;
}

void OAIInventorySoftwarePackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventorySoftwarePackage::fromJsonObject(QJsonObject json) {

    m_apt_package_isValid = ::OpenAPI::fromJsonValue(m_apt_package, json[QString("aptPackage")]);
    m_apt_package_isSet = !json[QString("aptPackage")].isNull() && m_apt_package_isValid;

    m_cos_package_isValid = ::OpenAPI::fromJsonValue(m_cos_package, json[QString("cosPackage")]);
    m_cos_package_isSet = !json[QString("cosPackage")].isNull() && m_cos_package_isValid;

    m_googet_package_isValid = ::OpenAPI::fromJsonValue(m_googet_package, json[QString("googetPackage")]);
    m_googet_package_isSet = !json[QString("googetPackage")].isNull() && m_googet_package_isValid;

    m_qfe_package_isValid = ::OpenAPI::fromJsonValue(m_qfe_package, json[QString("qfePackage")]);
    m_qfe_package_isSet = !json[QString("qfePackage")].isNull() && m_qfe_package_isValid;

    m_windows_application_isValid = ::OpenAPI::fromJsonValue(m_windows_application, json[QString("windowsApplication")]);
    m_windows_application_isSet = !json[QString("windowsApplication")].isNull() && m_windows_application_isValid;

    m_wua_package_isValid = ::OpenAPI::fromJsonValue(m_wua_package, json[QString("wuaPackage")]);
    m_wua_package_isSet = !json[QString("wuaPackage")].isNull() && m_wua_package_isValid;

    m_yum_package_isValid = ::OpenAPI::fromJsonValue(m_yum_package, json[QString("yumPackage")]);
    m_yum_package_isSet = !json[QString("yumPackage")].isNull() && m_yum_package_isValid;

    m_zypper_package_isValid = ::OpenAPI::fromJsonValue(m_zypper_package, json[QString("zypperPackage")]);
    m_zypper_package_isSet = !json[QString("zypperPackage")].isNull() && m_zypper_package_isValid;

    m_zypper_patch_isValid = ::OpenAPI::fromJsonValue(m_zypper_patch, json[QString("zypperPatch")]);
    m_zypper_patch_isSet = !json[QString("zypperPatch")].isNull() && m_zypper_patch_isValid;
}

QString OAIInventorySoftwarePackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventorySoftwarePackage::asJsonObject() const {
    QJsonObject obj;
    if (m_apt_package.isSet()) {
        obj.insert(QString("aptPackage"), ::OpenAPI::toJsonValue(m_apt_package));
    }
    if (m_cos_package.isSet()) {
        obj.insert(QString("cosPackage"), ::OpenAPI::toJsonValue(m_cos_package));
    }
    if (m_googet_package.isSet()) {
        obj.insert(QString("googetPackage"), ::OpenAPI::toJsonValue(m_googet_package));
    }
    if (m_qfe_package.isSet()) {
        obj.insert(QString("qfePackage"), ::OpenAPI::toJsonValue(m_qfe_package));
    }
    if (m_windows_application.isSet()) {
        obj.insert(QString("windowsApplication"), ::OpenAPI::toJsonValue(m_windows_application));
    }
    if (m_wua_package.isSet()) {
        obj.insert(QString("wuaPackage"), ::OpenAPI::toJsonValue(m_wua_package));
    }
    if (m_yum_package.isSet()) {
        obj.insert(QString("yumPackage"), ::OpenAPI::toJsonValue(m_yum_package));
    }
    if (m_zypper_package.isSet()) {
        obj.insert(QString("zypperPackage"), ::OpenAPI::toJsonValue(m_zypper_package));
    }
    if (m_zypper_patch.isSet()) {
        obj.insert(QString("zypperPatch"), ::OpenAPI::toJsonValue(m_zypper_patch));
    }
    return obj;
}

OAIInventoryVersionedPackage OAIInventorySoftwarePackage::getAptPackage() const {
    return m_apt_package;
}
void OAIInventorySoftwarePackage::setAptPackage(const OAIInventoryVersionedPackage &apt_package) {
    m_apt_package = apt_package;
    m_apt_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_apt_package_Set() const{
    return m_apt_package_isSet;
}

bool OAIInventorySoftwarePackage::is_apt_package_Valid() const{
    return m_apt_package_isValid;
}

OAIInventoryVersionedPackage OAIInventorySoftwarePackage::getCosPackage() const {
    return m_cos_package;
}
void OAIInventorySoftwarePackage::setCosPackage(const OAIInventoryVersionedPackage &cos_package) {
    m_cos_package = cos_package;
    m_cos_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_cos_package_Set() const{
    return m_cos_package_isSet;
}

bool OAIInventorySoftwarePackage::is_cos_package_Valid() const{
    return m_cos_package_isValid;
}

OAIInventoryVersionedPackage OAIInventorySoftwarePackage::getGoogetPackage() const {
    return m_googet_package;
}
void OAIInventorySoftwarePackage::setGoogetPackage(const OAIInventoryVersionedPackage &googet_package) {
    m_googet_package = googet_package;
    m_googet_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_googet_package_Set() const{
    return m_googet_package_isSet;
}

bool OAIInventorySoftwarePackage::is_googet_package_Valid() const{
    return m_googet_package_isValid;
}

OAIInventoryWindowsQuickFixEngineeringPackage OAIInventorySoftwarePackage::getQfePackage() const {
    return m_qfe_package;
}
void OAIInventorySoftwarePackage::setQfePackage(const OAIInventoryWindowsQuickFixEngineeringPackage &qfe_package) {
    m_qfe_package = qfe_package;
    m_qfe_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_qfe_package_Set() const{
    return m_qfe_package_isSet;
}

bool OAIInventorySoftwarePackage::is_qfe_package_Valid() const{
    return m_qfe_package_isValid;
}

OAIInventoryWindowsApplication OAIInventorySoftwarePackage::getWindowsApplication() const {
    return m_windows_application;
}
void OAIInventorySoftwarePackage::setWindowsApplication(const OAIInventoryWindowsApplication &windows_application) {
    m_windows_application = windows_application;
    m_windows_application_isSet = true;
}

bool OAIInventorySoftwarePackage::is_windows_application_Set() const{
    return m_windows_application_isSet;
}

bool OAIInventorySoftwarePackage::is_windows_application_Valid() const{
    return m_windows_application_isValid;
}

OAIInventoryWindowsUpdatePackage OAIInventorySoftwarePackage::getWuaPackage() const {
    return m_wua_package;
}
void OAIInventorySoftwarePackage::setWuaPackage(const OAIInventoryWindowsUpdatePackage &wua_package) {
    m_wua_package = wua_package;
    m_wua_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_wua_package_Set() const{
    return m_wua_package_isSet;
}

bool OAIInventorySoftwarePackage::is_wua_package_Valid() const{
    return m_wua_package_isValid;
}

OAIInventoryVersionedPackage OAIInventorySoftwarePackage::getYumPackage() const {
    return m_yum_package;
}
void OAIInventorySoftwarePackage::setYumPackage(const OAIInventoryVersionedPackage &yum_package) {
    m_yum_package = yum_package;
    m_yum_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_yum_package_Set() const{
    return m_yum_package_isSet;
}

bool OAIInventorySoftwarePackage::is_yum_package_Valid() const{
    return m_yum_package_isValid;
}

OAIInventoryVersionedPackage OAIInventorySoftwarePackage::getZypperPackage() const {
    return m_zypper_package;
}
void OAIInventorySoftwarePackage::setZypperPackage(const OAIInventoryVersionedPackage &zypper_package) {
    m_zypper_package = zypper_package;
    m_zypper_package_isSet = true;
}

bool OAIInventorySoftwarePackage::is_zypper_package_Set() const{
    return m_zypper_package_isSet;
}

bool OAIInventorySoftwarePackage::is_zypper_package_Valid() const{
    return m_zypper_package_isValid;
}

OAIInventoryZypperPatch OAIInventorySoftwarePackage::getZypperPatch() const {
    return m_zypper_patch;
}
void OAIInventorySoftwarePackage::setZypperPatch(const OAIInventoryZypperPatch &zypper_patch) {
    m_zypper_patch = zypper_patch;
    m_zypper_patch_isSet = true;
}

bool OAIInventorySoftwarePackage::is_zypper_patch_Set() const{
    return m_zypper_patch_isSet;
}

bool OAIInventorySoftwarePackage::is_zypper_patch_Valid() const{
    return m_zypper_patch_isValid;
}

bool OAIInventorySoftwarePackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apt_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cos_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_googet_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qfe_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wua_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yum_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zypper_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zypper_patch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventorySoftwarePackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
