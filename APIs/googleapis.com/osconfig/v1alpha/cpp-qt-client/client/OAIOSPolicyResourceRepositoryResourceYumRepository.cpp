/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceRepositoryResourceYumRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceRepositoryResourceYumRepository::OAIOSPolicyResourceRepositoryResourceYumRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceRepositoryResourceYumRepository::OAIOSPolicyResourceRepositoryResourceYumRepository() {
    this->initializeModel();
}

OAIOSPolicyResourceRepositoryResourceYumRepository::~OAIOSPolicyResourceRepositoryResourceYumRepository() {}

void OAIOSPolicyResourceRepositoryResourceYumRepository::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_gpg_keys_isSet = false;
    m_gpg_keys_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIOSPolicyResourceRepositoryResourceYumRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceRepositoryResourceYumRepository::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_gpg_keys_isValid = ::OpenAPI::fromJsonValue(m_gpg_keys, json[QString("gpgKeys")]);
    m_gpg_keys_isSet = !json[QString("gpgKeys")].isNull() && m_gpg_keys_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceYumRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceRepositoryResourceYumRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_gpg_keys.size() > 0) {
        obj.insert(QString("gpgKeys"), ::OpenAPI::toJsonValue(m_gpg_keys));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIOSPolicyResourceRepositoryResourceYumRepository::getBaseUrl() const {
    return m_base_url;
}
void OAIOSPolicyResourceRepositoryResourceYumRepository::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceYumRepository::getDisplayName() const {
    return m_display_name;
}
void OAIOSPolicyResourceRepositoryResourceYumRepository::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIOSPolicyResourceRepositoryResourceYumRepository::getGpgKeys() const {
    return m_gpg_keys;
}
void OAIOSPolicyResourceRepositoryResourceYumRepository::setGpgKeys(const QList<QString> &gpg_keys) {
    m_gpg_keys = gpg_keys;
    m_gpg_keys_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_gpg_keys_Set() const{
    return m_gpg_keys_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_gpg_keys_Valid() const{
    return m_gpg_keys_isValid;
}

QString OAIOSPolicyResourceRepositoryResourceYumRepository::getId() const {
    return m_id;
}
void OAIOSPolicyResourceRepositoryResourceYumRepository::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpg_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceRepositoryResourceYumRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
