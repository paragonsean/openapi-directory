/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInventoryOsInfo.h
 *
 * Operating system information for the VM.
 */

#ifndef OAIInventoryOsInfo_H
#define OAIInventoryOsInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInventoryOsInfo : public OAIObject {
public:
    OAIInventoryOsInfo();
    OAIInventoryOsInfo(QString json);
    ~OAIInventoryOsInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getKernelRelease() const;
    void setKernelRelease(const QString &kernel_release);
    bool is_kernel_release_Set() const;
    bool is_kernel_release_Valid() const;

    QString getKernelVersion() const;
    void setKernelVersion(const QString &kernel_version);
    bool is_kernel_version_Set() const;
    bool is_kernel_version_Valid() const;

    QString getLongName() const;
    void setLongName(const QString &long_name);
    bool is_long_name_Set() const;
    bool is_long_name_Valid() const;

    QString getOsconfigAgentVersion() const;
    void setOsconfigAgentVersion(const QString &osconfig_agent_version);
    bool is_osconfig_agent_version_Set() const;
    bool is_osconfig_agent_version_Valid() const;

    QString getShortName() const;
    void setShortName(const QString &short_name);
    bool is_short_name_Set() const;
    bool is_short_name_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_kernel_release;
    bool m_kernel_release_isSet;
    bool m_kernel_release_isValid;

    QString m_kernel_version;
    bool m_kernel_version_isSet;
    bool m_kernel_version_isValid;

    QString m_long_name;
    bool m_long_name_isSet;
    bool m_long_name_isValid;

    QString m_osconfig_agent_version;
    bool m_osconfig_agent_version_isSet;
    bool m_osconfig_agent_version_isValid;

    QString m_short_name;
    bool m_short_name_isSet;
    bool m_short_name_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInventoryOsInfo)

#endif // OAIInventoryOsInfo_H
