/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourcePackageResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourcePackageResource::OAIOSPolicyResourcePackageResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourcePackageResource::OAIOSPolicyResourcePackageResource() {
    this->initializeModel();
}

OAIOSPolicyResourcePackageResource::~OAIOSPolicyResourcePackageResource() {}

void OAIOSPolicyResourcePackageResource::initializeModel() {

    m_apt_isSet = false;
    m_apt_isValid = false;

    m_deb_isSet = false;
    m_deb_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_googet_isSet = false;
    m_googet_isValid = false;

    m_msi_isSet = false;
    m_msi_isValid = false;

    m_rpm_isSet = false;
    m_rpm_isValid = false;

    m_yum_isSet = false;
    m_yum_isValid = false;

    m_zypper_isSet = false;
    m_zypper_isValid = false;
}

void OAIOSPolicyResourcePackageResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourcePackageResource::fromJsonObject(QJsonObject json) {

    m_apt_isValid = ::OpenAPI::fromJsonValue(m_apt, json[QString("apt")]);
    m_apt_isSet = !json[QString("apt")].isNull() && m_apt_isValid;

    m_deb_isValid = ::OpenAPI::fromJsonValue(m_deb, json[QString("deb")]);
    m_deb_isSet = !json[QString("deb")].isNull() && m_deb_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("desiredState")]);
    m_desired_state_isSet = !json[QString("desiredState")].isNull() && m_desired_state_isValid;

    m_googet_isValid = ::OpenAPI::fromJsonValue(m_googet, json[QString("googet")]);
    m_googet_isSet = !json[QString("googet")].isNull() && m_googet_isValid;

    m_msi_isValid = ::OpenAPI::fromJsonValue(m_msi, json[QString("msi")]);
    m_msi_isSet = !json[QString("msi")].isNull() && m_msi_isValid;

    m_rpm_isValid = ::OpenAPI::fromJsonValue(m_rpm, json[QString("rpm")]);
    m_rpm_isSet = !json[QString("rpm")].isNull() && m_rpm_isValid;

    m_yum_isValid = ::OpenAPI::fromJsonValue(m_yum, json[QString("yum")]);
    m_yum_isSet = !json[QString("yum")].isNull() && m_yum_isValid;

    m_zypper_isValid = ::OpenAPI::fromJsonValue(m_zypper, json[QString("zypper")]);
    m_zypper_isSet = !json[QString("zypper")].isNull() && m_zypper_isValid;
}

QString OAIOSPolicyResourcePackageResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourcePackageResource::asJsonObject() const {
    QJsonObject obj;
    if (m_apt.isSet()) {
        obj.insert(QString("apt"), ::OpenAPI::toJsonValue(m_apt));
    }
    if (m_deb.isSet()) {
        obj.insert(QString("deb"), ::OpenAPI::toJsonValue(m_deb));
    }
    if (m_desired_state_isSet) {
        obj.insert(QString("desiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_googet.isSet()) {
        obj.insert(QString("googet"), ::OpenAPI::toJsonValue(m_googet));
    }
    if (m_msi.isSet()) {
        obj.insert(QString("msi"), ::OpenAPI::toJsonValue(m_msi));
    }
    if (m_rpm.isSet()) {
        obj.insert(QString("rpm"), ::OpenAPI::toJsonValue(m_rpm));
    }
    if (m_yum.isSet()) {
        obj.insert(QString("yum"), ::OpenAPI::toJsonValue(m_yum));
    }
    if (m_zypper.isSet()) {
        obj.insert(QString("zypper"), ::OpenAPI::toJsonValue(m_zypper));
    }
    return obj;
}

OAIOSPolicyResourcePackageResourceAPT OAIOSPolicyResourcePackageResource::getApt() const {
    return m_apt;
}
void OAIOSPolicyResourcePackageResource::setApt(const OAIOSPolicyResourcePackageResourceAPT &apt) {
    m_apt = apt;
    m_apt_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_apt_Set() const{
    return m_apt_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_apt_Valid() const{
    return m_apt_isValid;
}

OAIOSPolicyResourcePackageResourceDeb OAIOSPolicyResourcePackageResource::getDeb() const {
    return m_deb;
}
void OAIOSPolicyResourcePackageResource::setDeb(const OAIOSPolicyResourcePackageResourceDeb &deb) {
    m_deb = deb;
    m_deb_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_deb_Set() const{
    return m_deb_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_deb_Valid() const{
    return m_deb_isValid;
}

QString OAIOSPolicyResourcePackageResource::getDesiredState() const {
    return m_desired_state;
}
void OAIOSPolicyResourcePackageResource::setDesiredState(const QString &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

OAIOSPolicyResourcePackageResourceGooGet OAIOSPolicyResourcePackageResource::getGooget() const {
    return m_googet;
}
void OAIOSPolicyResourcePackageResource::setGooget(const OAIOSPolicyResourcePackageResourceGooGet &googet) {
    m_googet = googet;
    m_googet_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_googet_Set() const{
    return m_googet_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_googet_Valid() const{
    return m_googet_isValid;
}

OAIOSPolicyResourcePackageResourceMSI OAIOSPolicyResourcePackageResource::getMsi() const {
    return m_msi;
}
void OAIOSPolicyResourcePackageResource::setMsi(const OAIOSPolicyResourcePackageResourceMSI &msi) {
    m_msi = msi;
    m_msi_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_msi_Set() const{
    return m_msi_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_msi_Valid() const{
    return m_msi_isValid;
}

OAIOSPolicyResourcePackageResourceRPM OAIOSPolicyResourcePackageResource::getRpm() const {
    return m_rpm;
}
void OAIOSPolicyResourcePackageResource::setRpm(const OAIOSPolicyResourcePackageResourceRPM &rpm) {
    m_rpm = rpm;
    m_rpm_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_rpm_Set() const{
    return m_rpm_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_rpm_Valid() const{
    return m_rpm_isValid;
}

OAIOSPolicyResourcePackageResourceYUM OAIOSPolicyResourcePackageResource::getYum() const {
    return m_yum;
}
void OAIOSPolicyResourcePackageResource::setYum(const OAIOSPolicyResourcePackageResourceYUM &yum) {
    m_yum = yum;
    m_yum_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_yum_Set() const{
    return m_yum_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_yum_Valid() const{
    return m_yum_isValid;
}

OAIOSPolicyResourcePackageResourceZypper OAIOSPolicyResourcePackageResource::getZypper() const {
    return m_zypper;
}
void OAIOSPolicyResourcePackageResource::setZypper(const OAIOSPolicyResourcePackageResourceZypper &zypper) {
    m_zypper = zypper;
    m_zypper_isSet = true;
}

bool OAIOSPolicyResourcePackageResource::is_zypper_Set() const{
    return m_zypper_isSet;
}

bool OAIOSPolicyResourcePackageResource::is_zypper_Valid() const{
    return m_zypper_isValid;
}

bool OAIOSPolicyResourcePackageResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_googet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zypper.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourcePackageResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
