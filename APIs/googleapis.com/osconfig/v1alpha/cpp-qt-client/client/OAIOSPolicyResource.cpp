/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResource::OAIOSPolicyResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResource::OAIOSPolicyResource() {
    this->initializeModel();
}

OAIOSPolicyResource::~OAIOSPolicyResource() {}

void OAIOSPolicyResource::initializeModel() {

    m_exec_isSet = false;
    m_exec_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_pkg_isSet = false;
    m_pkg_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAIOSPolicyResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResource::fromJsonObject(QJsonObject json) {

    m_exec_isValid = ::OpenAPI::fromJsonValue(m_exec, json[QString("exec")]);
    m_exec_isSet = !json[QString("exec")].isNull() && m_exec_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pkg_isValid = ::OpenAPI::fromJsonValue(m_pkg, json[QString("pkg")]);
    m_pkg_isSet = !json[QString("pkg")].isNull() && m_pkg_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAIOSPolicyResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResource::asJsonObject() const {
    QJsonObject obj;
    if (m_exec.isSet()) {
        obj.insert(QString("exec"), ::OpenAPI::toJsonValue(m_exec));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_pkg.isSet()) {
        obj.insert(QString("pkg"), ::OpenAPI::toJsonValue(m_pkg));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

OAIOSPolicyResourceExecResource OAIOSPolicyResource::getExec() const {
    return m_exec;
}
void OAIOSPolicyResource::setExec(const OAIOSPolicyResourceExecResource &exec) {
    m_exec = exec;
    m_exec_isSet = true;
}

bool OAIOSPolicyResource::is_exec_Set() const{
    return m_exec_isSet;
}

bool OAIOSPolicyResource::is_exec_Valid() const{
    return m_exec_isValid;
}

OAIOSPolicyResourceFileResource OAIOSPolicyResource::getFile() const {
    return m_file;
}
void OAIOSPolicyResource::setFile(const OAIOSPolicyResourceFileResource &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIOSPolicyResource::is_file_Set() const{
    return m_file_isSet;
}

bool OAIOSPolicyResource::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIOSPolicyResource::getId() const {
    return m_id;
}
void OAIOSPolicyResource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOSPolicyResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOSPolicyResource::is_id_Valid() const{
    return m_id_isValid;
}

OAIOSPolicyResourcePackageResource OAIOSPolicyResource::getPkg() const {
    return m_pkg;
}
void OAIOSPolicyResource::setPkg(const OAIOSPolicyResourcePackageResource &pkg) {
    m_pkg = pkg;
    m_pkg_isSet = true;
}

bool OAIOSPolicyResource::is_pkg_Set() const{
    return m_pkg_isSet;
}

bool OAIOSPolicyResource::is_pkg_Valid() const{
    return m_pkg_isValid;
}

OAIOSPolicyResourceRepositoryResource OAIOSPolicyResource::getRepository() const {
    return m_repository;
}
void OAIOSPolicyResource::setRepository(const OAIOSPolicyResourceRepositoryResource &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIOSPolicyResource::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIOSPolicyResource::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAIOSPolicyResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
