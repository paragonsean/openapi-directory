/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICVSSv3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICVSSv3::OAICVSSv3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICVSSv3::OAICVSSv3() {
    this->initializeModel();
}

OAICVSSv3::~OAICVSSv3() {}

void OAICVSSv3::initializeModel() {

    m_attack_complexity_isSet = false;
    m_attack_complexity_isValid = false;

    m_attack_vector_isSet = false;
    m_attack_vector_isValid = false;

    m_availability_impact_isSet = false;
    m_availability_impact_isValid = false;

    m_base_score_isSet = false;
    m_base_score_isValid = false;

    m_confidentiality_impact_isSet = false;
    m_confidentiality_impact_isValid = false;

    m_exploitability_score_isSet = false;
    m_exploitability_score_isValid = false;

    m_impact_score_isSet = false;
    m_impact_score_isValid = false;

    m_integrity_impact_isSet = false;
    m_integrity_impact_isValid = false;

    m_privileges_required_isSet = false;
    m_privileges_required_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_user_interaction_isSet = false;
    m_user_interaction_isValid = false;
}

void OAICVSSv3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICVSSv3::fromJsonObject(QJsonObject json) {

    m_attack_complexity_isValid = ::OpenAPI::fromJsonValue(m_attack_complexity, json[QString("attackComplexity")]);
    m_attack_complexity_isSet = !json[QString("attackComplexity")].isNull() && m_attack_complexity_isValid;

    m_attack_vector_isValid = ::OpenAPI::fromJsonValue(m_attack_vector, json[QString("attackVector")]);
    m_attack_vector_isSet = !json[QString("attackVector")].isNull() && m_attack_vector_isValid;

    m_availability_impact_isValid = ::OpenAPI::fromJsonValue(m_availability_impact, json[QString("availabilityImpact")]);
    m_availability_impact_isSet = !json[QString("availabilityImpact")].isNull() && m_availability_impact_isValid;

    m_base_score_isValid = ::OpenAPI::fromJsonValue(m_base_score, json[QString("baseScore")]);
    m_base_score_isSet = !json[QString("baseScore")].isNull() && m_base_score_isValid;

    m_confidentiality_impact_isValid = ::OpenAPI::fromJsonValue(m_confidentiality_impact, json[QString("confidentialityImpact")]);
    m_confidentiality_impact_isSet = !json[QString("confidentialityImpact")].isNull() && m_confidentiality_impact_isValid;

    m_exploitability_score_isValid = ::OpenAPI::fromJsonValue(m_exploitability_score, json[QString("exploitabilityScore")]);
    m_exploitability_score_isSet = !json[QString("exploitabilityScore")].isNull() && m_exploitability_score_isValid;

    m_impact_score_isValid = ::OpenAPI::fromJsonValue(m_impact_score, json[QString("impactScore")]);
    m_impact_score_isSet = !json[QString("impactScore")].isNull() && m_impact_score_isValid;

    m_integrity_impact_isValid = ::OpenAPI::fromJsonValue(m_integrity_impact, json[QString("integrityImpact")]);
    m_integrity_impact_isSet = !json[QString("integrityImpact")].isNull() && m_integrity_impact_isValid;

    m_privileges_required_isValid = ::OpenAPI::fromJsonValue(m_privileges_required, json[QString("privilegesRequired")]);
    m_privileges_required_isSet = !json[QString("privilegesRequired")].isNull() && m_privileges_required_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_user_interaction_isValid = ::OpenAPI::fromJsonValue(m_user_interaction, json[QString("userInteraction")]);
    m_user_interaction_isSet = !json[QString("userInteraction")].isNull() && m_user_interaction_isValid;
}

QString OAICVSSv3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICVSSv3::asJsonObject() const {
    QJsonObject obj;
    if (m_attack_complexity_isSet) {
        obj.insert(QString("attackComplexity"), ::OpenAPI::toJsonValue(m_attack_complexity));
    }
    if (m_attack_vector_isSet) {
        obj.insert(QString("attackVector"), ::OpenAPI::toJsonValue(m_attack_vector));
    }
    if (m_availability_impact_isSet) {
        obj.insert(QString("availabilityImpact"), ::OpenAPI::toJsonValue(m_availability_impact));
    }
    if (m_base_score_isSet) {
        obj.insert(QString("baseScore"), ::OpenAPI::toJsonValue(m_base_score));
    }
    if (m_confidentiality_impact_isSet) {
        obj.insert(QString("confidentialityImpact"), ::OpenAPI::toJsonValue(m_confidentiality_impact));
    }
    if (m_exploitability_score_isSet) {
        obj.insert(QString("exploitabilityScore"), ::OpenAPI::toJsonValue(m_exploitability_score));
    }
    if (m_impact_score_isSet) {
        obj.insert(QString("impactScore"), ::OpenAPI::toJsonValue(m_impact_score));
    }
    if (m_integrity_impact_isSet) {
        obj.insert(QString("integrityImpact"), ::OpenAPI::toJsonValue(m_integrity_impact));
    }
    if (m_privileges_required_isSet) {
        obj.insert(QString("privilegesRequired"), ::OpenAPI::toJsonValue(m_privileges_required));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_user_interaction_isSet) {
        obj.insert(QString("userInteraction"), ::OpenAPI::toJsonValue(m_user_interaction));
    }
    return obj;
}

QString OAICVSSv3::getAttackComplexity() const {
    return m_attack_complexity;
}
void OAICVSSv3::setAttackComplexity(const QString &attack_complexity) {
    m_attack_complexity = attack_complexity;
    m_attack_complexity_isSet = true;
}

bool OAICVSSv3::is_attack_complexity_Set() const{
    return m_attack_complexity_isSet;
}

bool OAICVSSv3::is_attack_complexity_Valid() const{
    return m_attack_complexity_isValid;
}

QString OAICVSSv3::getAttackVector() const {
    return m_attack_vector;
}
void OAICVSSv3::setAttackVector(const QString &attack_vector) {
    m_attack_vector = attack_vector;
    m_attack_vector_isSet = true;
}

bool OAICVSSv3::is_attack_vector_Set() const{
    return m_attack_vector_isSet;
}

bool OAICVSSv3::is_attack_vector_Valid() const{
    return m_attack_vector_isValid;
}

QString OAICVSSv3::getAvailabilityImpact() const {
    return m_availability_impact;
}
void OAICVSSv3::setAvailabilityImpact(const QString &availability_impact) {
    m_availability_impact = availability_impact;
    m_availability_impact_isSet = true;
}

bool OAICVSSv3::is_availability_impact_Set() const{
    return m_availability_impact_isSet;
}

bool OAICVSSv3::is_availability_impact_Valid() const{
    return m_availability_impact_isValid;
}

float OAICVSSv3::getBaseScore() const {
    return m_base_score;
}
void OAICVSSv3::setBaseScore(const float &base_score) {
    m_base_score = base_score;
    m_base_score_isSet = true;
}

bool OAICVSSv3::is_base_score_Set() const{
    return m_base_score_isSet;
}

bool OAICVSSv3::is_base_score_Valid() const{
    return m_base_score_isValid;
}

QString OAICVSSv3::getConfidentialityImpact() const {
    return m_confidentiality_impact;
}
void OAICVSSv3::setConfidentialityImpact(const QString &confidentiality_impact) {
    m_confidentiality_impact = confidentiality_impact;
    m_confidentiality_impact_isSet = true;
}

bool OAICVSSv3::is_confidentiality_impact_Set() const{
    return m_confidentiality_impact_isSet;
}

bool OAICVSSv3::is_confidentiality_impact_Valid() const{
    return m_confidentiality_impact_isValid;
}

float OAICVSSv3::getExploitabilityScore() const {
    return m_exploitability_score;
}
void OAICVSSv3::setExploitabilityScore(const float &exploitability_score) {
    m_exploitability_score = exploitability_score;
    m_exploitability_score_isSet = true;
}

bool OAICVSSv3::is_exploitability_score_Set() const{
    return m_exploitability_score_isSet;
}

bool OAICVSSv3::is_exploitability_score_Valid() const{
    return m_exploitability_score_isValid;
}

float OAICVSSv3::getImpactScore() const {
    return m_impact_score;
}
void OAICVSSv3::setImpactScore(const float &impact_score) {
    m_impact_score = impact_score;
    m_impact_score_isSet = true;
}

bool OAICVSSv3::is_impact_score_Set() const{
    return m_impact_score_isSet;
}

bool OAICVSSv3::is_impact_score_Valid() const{
    return m_impact_score_isValid;
}

QString OAICVSSv3::getIntegrityImpact() const {
    return m_integrity_impact;
}
void OAICVSSv3::setIntegrityImpact(const QString &integrity_impact) {
    m_integrity_impact = integrity_impact;
    m_integrity_impact_isSet = true;
}

bool OAICVSSv3::is_integrity_impact_Set() const{
    return m_integrity_impact_isSet;
}

bool OAICVSSv3::is_integrity_impact_Valid() const{
    return m_integrity_impact_isValid;
}

QString OAICVSSv3::getPrivilegesRequired() const {
    return m_privileges_required;
}
void OAICVSSv3::setPrivilegesRequired(const QString &privileges_required) {
    m_privileges_required = privileges_required;
    m_privileges_required_isSet = true;
}

bool OAICVSSv3::is_privileges_required_Set() const{
    return m_privileges_required_isSet;
}

bool OAICVSSv3::is_privileges_required_Valid() const{
    return m_privileges_required_isValid;
}

QString OAICVSSv3::getScope() const {
    return m_scope;
}
void OAICVSSv3::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICVSSv3::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICVSSv3::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAICVSSv3::getUserInteraction() const {
    return m_user_interaction;
}
void OAICVSSv3::setUserInteraction(const QString &user_interaction) {
    m_user_interaction = user_interaction;
    m_user_interaction_isSet = true;
}

bool OAICVSSv3::is_user_interaction_Set() const{
    return m_user_interaction_isSet;
}

bool OAICVSSv3::is_user_interaction_Valid() const{
    return m_user_interaction_isValid;
}

bool OAICVSSv3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attack_complexity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attack_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidentiality_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exploitability_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrity_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privileges_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICVSSv3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
