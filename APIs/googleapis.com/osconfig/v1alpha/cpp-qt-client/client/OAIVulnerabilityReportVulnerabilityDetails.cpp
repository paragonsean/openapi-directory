/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityReportVulnerabilityDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityReportVulnerabilityDetails::OAIVulnerabilityReportVulnerabilityDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityReportVulnerabilityDetails::OAIVulnerabilityReportVulnerabilityDetails() {
    this->initializeModel();
}

OAIVulnerabilityReportVulnerabilityDetails::~OAIVulnerabilityReportVulnerabilityDetails() {}

void OAIVulnerabilityReportVulnerabilityDetails::initializeModel() {

    m_cve_isSet = false;
    m_cve_isValid = false;

    m_cvss_v2_score_isSet = false;
    m_cvss_v2_score_isValid = false;

    m_cvss_v3_isSet = false;
    m_cvss_v3_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIVulnerabilityReportVulnerabilityDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityReportVulnerabilityDetails::fromJsonObject(QJsonObject json) {

    m_cve_isValid = ::OpenAPI::fromJsonValue(m_cve, json[QString("cve")]);
    m_cve_isSet = !json[QString("cve")].isNull() && m_cve_isValid;

    m_cvss_v2_score_isValid = ::OpenAPI::fromJsonValue(m_cvss_v2_score, json[QString("cvssV2Score")]);
    m_cvss_v2_score_isSet = !json[QString("cvssV2Score")].isNull() && m_cvss_v2_score_isValid;

    m_cvss_v3_isValid = ::OpenAPI::fromJsonValue(m_cvss_v3, json[QString("cvssV3")]);
    m_cvss_v3_isSet = !json[QString("cvssV3")].isNull() && m_cvss_v3_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIVulnerabilityReportVulnerabilityDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityReportVulnerabilityDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_cve_isSet) {
        obj.insert(QString("cve"), ::OpenAPI::toJsonValue(m_cve));
    }
    if (m_cvss_v2_score_isSet) {
        obj.insert(QString("cvssV2Score"), ::OpenAPI::toJsonValue(m_cvss_v2_score));
    }
    if (m_cvss_v3.isSet()) {
        obj.insert(QString("cvssV3"), ::OpenAPI::toJsonValue(m_cvss_v3));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIVulnerabilityReportVulnerabilityDetails::getCve() const {
    return m_cve;
}
void OAIVulnerabilityReportVulnerabilityDetails::setCve(const QString &cve) {
    m_cve = cve;
    m_cve_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_cve_Set() const{
    return m_cve_isSet;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_cve_Valid() const{
    return m_cve_isValid;
}

float OAIVulnerabilityReportVulnerabilityDetails::getCvssV2Score() const {
    return m_cvss_v2_score;
}
void OAIVulnerabilityReportVulnerabilityDetails::setCvssV2Score(const float &cvss_v2_score) {
    m_cvss_v2_score = cvss_v2_score;
    m_cvss_v2_score_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_cvss_v2_score_Set() const{
    return m_cvss_v2_score_isSet;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_cvss_v2_score_Valid() const{
    return m_cvss_v2_score_isValid;
}

OAICVSSv3 OAIVulnerabilityReportVulnerabilityDetails::getCvssV3() const {
    return m_cvss_v3;
}
void OAIVulnerabilityReportVulnerabilityDetails::setCvssV3(const OAICVSSv3 &cvss_v3) {
    m_cvss_v3 = cvss_v3;
    m_cvss_v3_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_cvss_v3_Set() const{
    return m_cvss_v3_isSet;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_cvss_v3_Valid() const{
    return m_cvss_v3_isValid;
}

QString OAIVulnerabilityReportVulnerabilityDetails::getDescription() const {
    return m_description;
}
void OAIVulnerabilityReportVulnerabilityDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIVulnerabilityReportVulnerabilityDetailsReference> OAIVulnerabilityReportVulnerabilityDetails::getReferences() const {
    return m_references;
}
void OAIVulnerabilityReportVulnerabilityDetails::setReferences(const QList<OAIVulnerabilityReportVulnerabilityDetailsReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_references_Set() const{
    return m_references_isSet;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_references_Valid() const{
    return m_references_isValid;
}

QString OAIVulnerabilityReportVulnerabilityDetails::getSeverity() const {
    return m_severity;
}
void OAIVulnerabilityReportVulnerabilityDetails::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIVulnerabilityReportVulnerabilityDetails::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIVulnerabilityReportVulnerabilityDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_v2_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_v3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityReportVulnerabilityDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
