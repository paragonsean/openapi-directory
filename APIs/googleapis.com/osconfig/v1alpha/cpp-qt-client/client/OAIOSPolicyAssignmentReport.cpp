/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyAssignmentReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyAssignmentReport::OAIOSPolicyAssignmentReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyAssignmentReport::OAIOSPolicyAssignmentReport() {
    this->initializeModel();
}

OAIOSPolicyAssignmentReport::~OAIOSPolicyAssignmentReport() {}

void OAIOSPolicyAssignmentReport::initializeModel() {

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_last_run_id_isSet = false;
    m_last_run_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_policy_assignment_isSet = false;
    m_os_policy_assignment_isValid = false;

    m_os_policy_compliances_isSet = false;
    m_os_policy_compliances_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIOSPolicyAssignmentReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyAssignmentReport::fromJsonObject(QJsonObject json) {

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_last_run_id_isValid = ::OpenAPI::fromJsonValue(m_last_run_id, json[QString("lastRunId")]);
    m_last_run_id_isSet = !json[QString("lastRunId")].isNull() && m_last_run_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_policy_assignment_isValid = ::OpenAPI::fromJsonValue(m_os_policy_assignment, json[QString("osPolicyAssignment")]);
    m_os_policy_assignment_isSet = !json[QString("osPolicyAssignment")].isNull() && m_os_policy_assignment_isValid;

    m_os_policy_compliances_isValid = ::OpenAPI::fromJsonValue(m_os_policy_compliances, json[QString("osPolicyCompliances")]);
    m_os_policy_compliances_isSet = !json[QString("osPolicyCompliances")].isNull() && m_os_policy_compliances_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIOSPolicyAssignmentReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyAssignmentReport::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_last_run_id_isSet) {
        obj.insert(QString("lastRunId"), ::OpenAPI::toJsonValue(m_last_run_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_policy_assignment_isSet) {
        obj.insert(QString("osPolicyAssignment"), ::OpenAPI::toJsonValue(m_os_policy_assignment));
    }
    if (m_os_policy_compliances.size() > 0) {
        obj.insert(QString("osPolicyCompliances"), ::OpenAPI::toJsonValue(m_os_policy_compliances));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIOSPolicyAssignmentReport::getInstance() const {
    return m_instance;
}
void OAIOSPolicyAssignmentReport::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIOSPolicyAssignmentReport::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIOSPolicyAssignmentReport::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIOSPolicyAssignmentReport::getLastRunId() const {
    return m_last_run_id;
}
void OAIOSPolicyAssignmentReport::setLastRunId(const QString &last_run_id) {
    m_last_run_id = last_run_id;
    m_last_run_id_isSet = true;
}

bool OAIOSPolicyAssignmentReport::is_last_run_id_Set() const{
    return m_last_run_id_isSet;
}

bool OAIOSPolicyAssignmentReport::is_last_run_id_Valid() const{
    return m_last_run_id_isValid;
}

QString OAIOSPolicyAssignmentReport::getName() const {
    return m_name;
}
void OAIOSPolicyAssignmentReport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOSPolicyAssignmentReport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOSPolicyAssignmentReport::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOSPolicyAssignmentReport::getOsPolicyAssignment() const {
    return m_os_policy_assignment;
}
void OAIOSPolicyAssignmentReport::setOsPolicyAssignment(const QString &os_policy_assignment) {
    m_os_policy_assignment = os_policy_assignment;
    m_os_policy_assignment_isSet = true;
}

bool OAIOSPolicyAssignmentReport::is_os_policy_assignment_Set() const{
    return m_os_policy_assignment_isSet;
}

bool OAIOSPolicyAssignmentReport::is_os_policy_assignment_Valid() const{
    return m_os_policy_assignment_isValid;
}

QList<OAIOSPolicyAssignmentReportOSPolicyCompliance> OAIOSPolicyAssignmentReport::getOsPolicyCompliances() const {
    return m_os_policy_compliances;
}
void OAIOSPolicyAssignmentReport::setOsPolicyCompliances(const QList<OAIOSPolicyAssignmentReportOSPolicyCompliance> &os_policy_compliances) {
    m_os_policy_compliances = os_policy_compliances;
    m_os_policy_compliances_isSet = true;
}

bool OAIOSPolicyAssignmentReport::is_os_policy_compliances_Set() const{
    return m_os_policy_compliances_isSet;
}

bool OAIOSPolicyAssignmentReport::is_os_policy_compliances_Valid() const{
    return m_os_policy_compliances_isValid;
}

QString OAIOSPolicyAssignmentReport::getUpdateTime() const {
    return m_update_time;
}
void OAIOSPolicyAssignmentReport::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIOSPolicyAssignmentReport::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIOSPolicyAssignmentReport::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIOSPolicyAssignmentReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_policy_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_policy_compliances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyAssignmentReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
