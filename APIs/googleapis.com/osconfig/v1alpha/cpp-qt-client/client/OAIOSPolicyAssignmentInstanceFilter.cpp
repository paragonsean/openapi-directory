/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyAssignmentInstanceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyAssignmentInstanceFilter::OAIOSPolicyAssignmentInstanceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyAssignmentInstanceFilter::OAIOSPolicyAssignmentInstanceFilter() {
    this->initializeModel();
}

OAIOSPolicyAssignmentInstanceFilter::~OAIOSPolicyAssignmentInstanceFilter() {}

void OAIOSPolicyAssignmentInstanceFilter::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_exclusion_labels_isSet = false;
    m_exclusion_labels_isValid = false;

    m_inclusion_labels_isSet = false;
    m_inclusion_labels_isValid = false;

    m_inventories_isSet = false;
    m_inventories_isValid = false;

    m_os_short_names_isSet = false;
    m_os_short_names_isValid = false;
}

void OAIOSPolicyAssignmentInstanceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyAssignmentInstanceFilter::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    m_exclusion_labels_isValid = ::OpenAPI::fromJsonValue(m_exclusion_labels, json[QString("exclusionLabels")]);
    m_exclusion_labels_isSet = !json[QString("exclusionLabels")].isNull() && m_exclusion_labels_isValid;

    m_inclusion_labels_isValid = ::OpenAPI::fromJsonValue(m_inclusion_labels, json[QString("inclusionLabels")]);
    m_inclusion_labels_isSet = !json[QString("inclusionLabels")].isNull() && m_inclusion_labels_isValid;

    m_inventories_isValid = ::OpenAPI::fromJsonValue(m_inventories, json[QString("inventories")]);
    m_inventories_isSet = !json[QString("inventories")].isNull() && m_inventories_isValid;

    m_os_short_names_isValid = ::OpenAPI::fromJsonValue(m_os_short_names, json[QString("osShortNames")]);
    m_os_short_names_isSet = !json[QString("osShortNames")].isNull() && m_os_short_names_isValid;
}

QString OAIOSPolicyAssignmentInstanceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyAssignmentInstanceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_all_isSet) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_exclusion_labels.size() > 0) {
        obj.insert(QString("exclusionLabels"), ::OpenAPI::toJsonValue(m_exclusion_labels));
    }
    if (m_inclusion_labels.size() > 0) {
        obj.insert(QString("inclusionLabels"), ::OpenAPI::toJsonValue(m_inclusion_labels));
    }
    if (m_inventories.size() > 0) {
        obj.insert(QString("inventories"), ::OpenAPI::toJsonValue(m_inventories));
    }
    if (m_os_short_names.size() > 0) {
        obj.insert(QString("osShortNames"), ::OpenAPI::toJsonValue(m_os_short_names));
    }
    return obj;
}

bool OAIOSPolicyAssignmentInstanceFilter::isAll() const {
    return m_all;
}
void OAIOSPolicyAssignmentInstanceFilter::setAll(const bool &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_all_Set() const{
    return m_all_isSet;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_all_Valid() const{
    return m_all_isValid;
}

QList<OAIOSPolicyAssignmentLabelSet> OAIOSPolicyAssignmentInstanceFilter::getExclusionLabels() const {
    return m_exclusion_labels;
}
void OAIOSPolicyAssignmentInstanceFilter::setExclusionLabels(const QList<OAIOSPolicyAssignmentLabelSet> &exclusion_labels) {
    m_exclusion_labels = exclusion_labels;
    m_exclusion_labels_isSet = true;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_exclusion_labels_Set() const{
    return m_exclusion_labels_isSet;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_exclusion_labels_Valid() const{
    return m_exclusion_labels_isValid;
}

QList<OAIOSPolicyAssignmentLabelSet> OAIOSPolicyAssignmentInstanceFilter::getInclusionLabels() const {
    return m_inclusion_labels;
}
void OAIOSPolicyAssignmentInstanceFilter::setInclusionLabels(const QList<OAIOSPolicyAssignmentLabelSet> &inclusion_labels) {
    m_inclusion_labels = inclusion_labels;
    m_inclusion_labels_isSet = true;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_inclusion_labels_Set() const{
    return m_inclusion_labels_isSet;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_inclusion_labels_Valid() const{
    return m_inclusion_labels_isValid;
}

QList<OAIOSPolicyAssignmentInstanceFilterInventory> OAIOSPolicyAssignmentInstanceFilter::getInventories() const {
    return m_inventories;
}
void OAIOSPolicyAssignmentInstanceFilter::setInventories(const QList<OAIOSPolicyAssignmentInstanceFilterInventory> &inventories) {
    m_inventories = inventories;
    m_inventories_isSet = true;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_inventories_Set() const{
    return m_inventories_isSet;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_inventories_Valid() const{
    return m_inventories_isValid;
}

QList<QString> OAIOSPolicyAssignmentInstanceFilter::getOsShortNames() const {
    return m_os_short_names;
}
void OAIOSPolicyAssignmentInstanceFilter::setOsShortNames(const QList<QString> &os_short_names) {
    m_os_short_names = os_short_names;
    m_os_short_names_isSet = true;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_os_short_names_Set() const{
    return m_os_short_names_isSet;
}

bool OAIOSPolicyAssignmentInstanceFilter::is_os_short_names_Valid() const{
    return m_os_short_names_isValid;
}

bool OAIOSPolicyAssignmentInstanceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusion_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_short_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyAssignmentInstanceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
