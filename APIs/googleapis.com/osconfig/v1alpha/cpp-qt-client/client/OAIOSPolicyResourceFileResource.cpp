/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceFileResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceFileResource::OAIOSPolicyResourceFileResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceFileResource::OAIOSPolicyResourceFileResource() {
    this->initializeModel();
}

OAIOSPolicyResourceFileResource::~OAIOSPolicyResourceFileResource() {}

void OAIOSPolicyResourceFileResource::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIOSPolicyResourceFileResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceFileResource::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIOSPolicyResourceFileResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceFileResource::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIOSPolicyResourceFileResource::getContent() const {
    return m_content;
}
void OAIOSPolicyResourceFileResource::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIOSPolicyResourceFileResource::is_content_Set() const{
    return m_content_isSet;
}

bool OAIOSPolicyResourceFileResource::is_content_Valid() const{
    return m_content_isValid;
}

OAIOSPolicyResourceFile OAIOSPolicyResourceFileResource::getFile() const {
    return m_file;
}
void OAIOSPolicyResourceFileResource::setFile(const OAIOSPolicyResourceFile &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIOSPolicyResourceFileResource::is_file_Set() const{
    return m_file_isSet;
}

bool OAIOSPolicyResourceFileResource::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIOSPolicyResourceFileResource::getPath() const {
    return m_path;
}
void OAIOSPolicyResourceFileResource::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIOSPolicyResourceFileResource::is_path_Set() const{
    return m_path_isSet;
}

bool OAIOSPolicyResourceFileResource::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIOSPolicyResourceFileResource::getPermissions() const {
    return m_permissions;
}
void OAIOSPolicyResourceFileResource::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIOSPolicyResourceFileResource::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIOSPolicyResourceFileResource::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIOSPolicyResourceFileResource::getState() const {
    return m_state;
}
void OAIOSPolicyResourceFileResource::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOSPolicyResourceFileResource::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOSPolicyResourceFileResource::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIOSPolicyResourceFileResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceFileResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
