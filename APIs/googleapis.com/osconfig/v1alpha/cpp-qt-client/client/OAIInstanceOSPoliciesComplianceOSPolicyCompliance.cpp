/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceOSPoliciesComplianceOSPolicyCompliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceOSPoliciesComplianceOSPolicyCompliance::OAIInstanceOSPoliciesComplianceOSPolicyCompliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceOSPoliciesComplianceOSPolicyCompliance::OAIInstanceOSPoliciesComplianceOSPolicyCompliance() {
    this->initializeModel();
}

OAIInstanceOSPoliciesComplianceOSPolicyCompliance::~OAIInstanceOSPoliciesComplianceOSPolicyCompliance() {}

void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::initializeModel() {

    m_os_policy_assignment_isSet = false;
    m_os_policy_assignment_isValid = false;

    m_os_policy_id_isSet = false;
    m_os_policy_id_isValid = false;

    m_os_policy_resource_compliances_isSet = false;
    m_os_policy_resource_compliances_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::fromJsonObject(QJsonObject json) {

    m_os_policy_assignment_isValid = ::OpenAPI::fromJsonValue(m_os_policy_assignment, json[QString("osPolicyAssignment")]);
    m_os_policy_assignment_isSet = !json[QString("osPolicyAssignment")].isNull() && m_os_policy_assignment_isValid;

    m_os_policy_id_isValid = ::OpenAPI::fromJsonValue(m_os_policy_id, json[QString("osPolicyId")]);
    m_os_policy_id_isSet = !json[QString("osPolicyId")].isNull() && m_os_policy_id_isValid;

    m_os_policy_resource_compliances_isValid = ::OpenAPI::fromJsonValue(m_os_policy_resource_compliances, json[QString("osPolicyResourceCompliances")]);
    m_os_policy_resource_compliances_isSet = !json[QString("osPolicyResourceCompliances")].isNull() && m_os_policy_resource_compliances_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIInstanceOSPoliciesComplianceOSPolicyCompliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceOSPoliciesComplianceOSPolicyCompliance::asJsonObject() const {
    QJsonObject obj;
    if (m_os_policy_assignment_isSet) {
        obj.insert(QString("osPolicyAssignment"), ::OpenAPI::toJsonValue(m_os_policy_assignment));
    }
    if (m_os_policy_id_isSet) {
        obj.insert(QString("osPolicyId"), ::OpenAPI::toJsonValue(m_os_policy_id));
    }
    if (m_os_policy_resource_compliances.size() > 0) {
        obj.insert(QString("osPolicyResourceCompliances"), ::OpenAPI::toJsonValue(m_os_policy_resource_compliances));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIInstanceOSPoliciesComplianceOSPolicyCompliance::getOsPolicyAssignment() const {
    return m_os_policy_assignment;
}
void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::setOsPolicyAssignment(const QString &os_policy_assignment) {
    m_os_policy_assignment = os_policy_assignment;
    m_os_policy_assignment_isSet = true;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_os_policy_assignment_Set() const{
    return m_os_policy_assignment_isSet;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_os_policy_assignment_Valid() const{
    return m_os_policy_assignment_isValid;
}

QString OAIInstanceOSPoliciesComplianceOSPolicyCompliance::getOsPolicyId() const {
    return m_os_policy_id;
}
void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::setOsPolicyId(const QString &os_policy_id) {
    m_os_policy_id = os_policy_id;
    m_os_policy_id_isSet = true;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_os_policy_id_Set() const{
    return m_os_policy_id_isSet;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_os_policy_id_Valid() const{
    return m_os_policy_id_isValid;
}

QList<OAIOSPolicyResourceCompliance> OAIInstanceOSPoliciesComplianceOSPolicyCompliance::getOsPolicyResourceCompliances() const {
    return m_os_policy_resource_compliances;
}
void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::setOsPolicyResourceCompliances(const QList<OAIOSPolicyResourceCompliance> &os_policy_resource_compliances) {
    m_os_policy_resource_compliances = os_policy_resource_compliances;
    m_os_policy_resource_compliances_isSet = true;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_os_policy_resource_compliances_Set() const{
    return m_os_policy_resource_compliances_isSet;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_os_policy_resource_compliances_Valid() const{
    return m_os_policy_resource_compliances_isValid;
}

QString OAIInstanceOSPoliciesComplianceOSPolicyCompliance::getState() const {
    return m_state;
}
void OAIInstanceOSPoliciesComplianceOSPolicyCompliance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_policy_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_policy_resource_compliances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceOSPoliciesComplianceOSPolicyCompliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
