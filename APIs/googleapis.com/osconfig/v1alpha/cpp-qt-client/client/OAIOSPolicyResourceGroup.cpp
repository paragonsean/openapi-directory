/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSPolicyResourceGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSPolicyResourceGroup::OAIOSPolicyResourceGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSPolicyResourceGroup::OAIOSPolicyResourceGroup() {
    this->initializeModel();
}

OAIOSPolicyResourceGroup::~OAIOSPolicyResourceGroup() {}

void OAIOSPolicyResourceGroup::initializeModel() {

    m_inventory_filters_isSet = false;
    m_inventory_filters_isValid = false;

    m_os_filter_isSet = false;
    m_os_filter_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIOSPolicyResourceGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSPolicyResourceGroup::fromJsonObject(QJsonObject json) {

    m_inventory_filters_isValid = ::OpenAPI::fromJsonValue(m_inventory_filters, json[QString("inventoryFilters")]);
    m_inventory_filters_isSet = !json[QString("inventoryFilters")].isNull() && m_inventory_filters_isValid;

    m_os_filter_isValid = ::OpenAPI::fromJsonValue(m_os_filter, json[QString("osFilter")]);
    m_os_filter_isSet = !json[QString("osFilter")].isNull() && m_os_filter_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAIOSPolicyResourceGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSPolicyResourceGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_inventory_filters.size() > 0) {
        obj.insert(QString("inventoryFilters"), ::OpenAPI::toJsonValue(m_inventory_filters));
    }
    if (m_os_filter.isSet()) {
        obj.insert(QString("osFilter"), ::OpenAPI::toJsonValue(m_os_filter));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QList<OAIOSPolicyInventoryFilter> OAIOSPolicyResourceGroup::getInventoryFilters() const {
    return m_inventory_filters;
}
void OAIOSPolicyResourceGroup::setInventoryFilters(const QList<OAIOSPolicyInventoryFilter> &inventory_filters) {
    m_inventory_filters = inventory_filters;
    m_inventory_filters_isSet = true;
}

bool OAIOSPolicyResourceGroup::is_inventory_filters_Set() const{
    return m_inventory_filters_isSet;
}

bool OAIOSPolicyResourceGroup::is_inventory_filters_Valid() const{
    return m_inventory_filters_isValid;
}

OAIOSPolicyOSFilter OAIOSPolicyResourceGroup::getOsFilter() const {
    return m_os_filter;
}
void OAIOSPolicyResourceGroup::setOsFilter(const OAIOSPolicyOSFilter &os_filter) {
    m_os_filter = os_filter;
    m_os_filter_isSet = true;
}

bool OAIOSPolicyResourceGroup::is_os_filter_Set() const{
    return m_os_filter_isSet;
}

bool OAIOSPolicyResourceGroup::is_os_filter_Valid() const{
    return m_os_filter_isValid;
}

QList<OAIOSPolicyResource> OAIOSPolicyResourceGroup::getResources() const {
    return m_resources;
}
void OAIOSPolicyResourceGroup::setResources(const QList<OAIOSPolicyResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIOSPolicyResourceGroup::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIOSPolicyResourceGroup::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIOSPolicyResourceGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inventory_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSPolicyResourceGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
