/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OS inventory item that is affected by a vulnerability or fixed as a result of a vulnerability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerabilityReportVulnerabilityItem {
  public static final String SERIALIZED_NAME_AVAILABLE_INVENTORY_ITEM_ID = "availableInventoryItemId";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_INVENTORY_ITEM_ID)
  private String availableInventoryItemId;

  public static final String SERIALIZED_NAME_FIXED_CPE_URI = "fixedCpeUri";
  @SerializedName(SERIALIZED_NAME_FIXED_CPE_URI)
  private String fixedCpeUri;

  public static final String SERIALIZED_NAME_INSTALLED_INVENTORY_ITEM_ID = "installedInventoryItemId";
  @SerializedName(SERIALIZED_NAME_INSTALLED_INVENTORY_ITEM_ID)
  private String installedInventoryItemId;

  public static final String SERIALIZED_NAME_UPSTREAM_FIX = "upstreamFix";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_FIX)
  private String upstreamFix;

  public VulnerabilityReportVulnerabilityItem() {
  }

  public VulnerabilityReportVulnerabilityItem availableInventoryItemId(String availableInventoryItemId) {
    this.availableInventoryItemId = availableInventoryItemId;
    return this;
  }

  /**
   * Corresponds to the &#x60;AVAILABLE_PACKAGE&#x60; inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The &#x60;inventory_item&#x60; value specifies the latest &#x60;SoftwarePackage&#x60; available to the VM that fixes the vulnerability.
   * @return availableInventoryItemId
   */
  @javax.annotation.Nullable
  public String getAvailableInventoryItemId() {
    return availableInventoryItemId;
  }

  public void setAvailableInventoryItemId(String availableInventoryItemId) {
    this.availableInventoryItemId = availableInventoryItemId;
  }


  public VulnerabilityReportVulnerabilityItem fixedCpeUri(String fixedCpeUri) {
    this.fixedCpeUri = fixedCpeUri;
    return this;
  }

  /**
   * The recommended [CPE URI](https://cpe.mitre.org/specification/) update that contains a fix for this vulnerability.
   * @return fixedCpeUri
   */
  @javax.annotation.Nullable
  public String getFixedCpeUri() {
    return fixedCpeUri;
  }

  public void setFixedCpeUri(String fixedCpeUri) {
    this.fixedCpeUri = fixedCpeUri;
  }


  public VulnerabilityReportVulnerabilityItem installedInventoryItemId(String installedInventoryItemId) {
    this.installedInventoryItemId = installedInventoryItemId;
    return this;
  }

  /**
   * Corresponds to the &#x60;INSTALLED_PACKAGE&#x60; inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some operating systems, this field might be empty.
   * @return installedInventoryItemId
   */
  @javax.annotation.Nullable
  public String getInstalledInventoryItemId() {
    return installedInventoryItemId;
  }

  public void setInstalledInventoryItemId(String installedInventoryItemId) {
    this.installedInventoryItemId = installedInventoryItemId;
  }


  public VulnerabilityReportVulnerabilityItem upstreamFix(String upstreamFix) {
    this.upstreamFix = upstreamFix;
    return this;
  }

  /**
   * The upstream OS patch, packages or KB that fixes the vulnerability.
   * @return upstreamFix
   */
  @javax.annotation.Nullable
  public String getUpstreamFix() {
    return upstreamFix;
  }

  public void setUpstreamFix(String upstreamFix) {
    this.upstreamFix = upstreamFix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityReportVulnerabilityItem vulnerabilityReportVulnerabilityItem = (VulnerabilityReportVulnerabilityItem) o;
    return Objects.equals(this.availableInventoryItemId, vulnerabilityReportVulnerabilityItem.availableInventoryItemId) &&
        Objects.equals(this.fixedCpeUri, vulnerabilityReportVulnerabilityItem.fixedCpeUri) &&
        Objects.equals(this.installedInventoryItemId, vulnerabilityReportVulnerabilityItem.installedInventoryItemId) &&
        Objects.equals(this.upstreamFix, vulnerabilityReportVulnerabilityItem.upstreamFix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableInventoryItemId, fixedCpeUri, installedInventoryItemId, upstreamFix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityReportVulnerabilityItem {\n");
    sb.append("    availableInventoryItemId: ").append(toIndentedString(availableInventoryItemId)).append("\n");
    sb.append("    fixedCpeUri: ").append(toIndentedString(fixedCpeUri)).append("\n");
    sb.append("    installedInventoryItemId: ").append(toIndentedString(installedInventoryItemId)).append("\n");
    sb.append("    upstreamFix: ").append(toIndentedString(upstreamFix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableInventoryItemId");
    openapiFields.add("fixedCpeUri");
    openapiFields.add("installedInventoryItemId");
    openapiFields.add("upstreamFix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityReportVulnerabilityItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityReportVulnerabilityItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityReportVulnerabilityItem is not found in the empty JSON string", VulnerabilityReportVulnerabilityItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityReportVulnerabilityItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityReportVulnerabilityItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availableInventoryItemId") != null && !jsonObj.get("availableInventoryItemId").isJsonNull()) && !jsonObj.get("availableInventoryItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableInventoryItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableInventoryItemId").toString()));
      }
      if ((jsonObj.get("fixedCpeUri") != null && !jsonObj.get("fixedCpeUri").isJsonNull()) && !jsonObj.get("fixedCpeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedCpeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedCpeUri").toString()));
      }
      if ((jsonObj.get("installedInventoryItemId") != null && !jsonObj.get("installedInventoryItemId").isJsonNull()) && !jsonObj.get("installedInventoryItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installedInventoryItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installedInventoryItemId").toString()));
      }
      if ((jsonObj.get("upstreamFix") != null && !jsonObj.get("upstreamFix").isJsonNull()) && !jsonObj.get("upstreamFix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upstreamFix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upstreamFix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityReportVulnerabilityItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityReportVulnerabilityItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityReportVulnerabilityItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityReportVulnerabilityItem.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityReportVulnerabilityItem>() {
           @Override
           public void write(JsonWriter out, VulnerabilityReportVulnerabilityItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityReportVulnerabilityItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityReportVulnerabilityItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityReportVulnerabilityItem
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityReportVulnerabilityItem
   */
  public static VulnerabilityReportVulnerabilityItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityReportVulnerabilityItem.class);
  }

  /**
   * Convert an instance of VulnerabilityReportVulnerabilityItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

