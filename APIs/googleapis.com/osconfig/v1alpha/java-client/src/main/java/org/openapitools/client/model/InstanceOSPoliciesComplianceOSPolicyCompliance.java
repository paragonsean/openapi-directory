/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OSPolicyResourceCompliance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compliance data for an OS policy
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceOSPoliciesComplianceOSPolicyCompliance {
  public static final String SERIALIZED_NAME_OS_POLICY_ASSIGNMENT = "osPolicyAssignment";
  @SerializedName(SERIALIZED_NAME_OS_POLICY_ASSIGNMENT)
  private String osPolicyAssignment;

  public static final String SERIALIZED_NAME_OS_POLICY_ID = "osPolicyId";
  @SerializedName(SERIALIZED_NAME_OS_POLICY_ID)
  private String osPolicyId;

  public static final String SERIALIZED_NAME_OS_POLICY_RESOURCE_COMPLIANCES = "osPolicyResourceCompliances";
  @SerializedName(SERIALIZED_NAME_OS_POLICY_RESOURCE_COMPLIANCES)
  private List<OSPolicyResourceCompliance> osPolicyResourceCompliances = new ArrayList<>();

  /**
   * Compliance state of the OS policy.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED("OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED"),
    
    COMPLIANT("COMPLIANT"),
    
    NON_COMPLIANT("NON_COMPLIANT"),
    
    UNKNOWN("UNKNOWN"),
    
    NO_OS_POLICIES_APPLICABLE("NO_OS_POLICIES_APPLICABLE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public InstanceOSPoliciesComplianceOSPolicyCompliance() {
  }

  public InstanceOSPoliciesComplianceOSPolicyCompliance osPolicyAssignment(String osPolicyAssignment) {
    this.osPolicyAssignment = osPolicyAssignment;
    return this;
  }

  /**
   * Reference to the &#x60;OSPolicyAssignment&#x60; API resource that the &#x60;OSPolicy&#x60; belongs to. Format: &#x60;projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}&#x60;
   * @return osPolicyAssignment
   */
  @javax.annotation.Nullable
  public String getOsPolicyAssignment() {
    return osPolicyAssignment;
  }

  public void setOsPolicyAssignment(String osPolicyAssignment) {
    this.osPolicyAssignment = osPolicyAssignment;
  }


  public InstanceOSPoliciesComplianceOSPolicyCompliance osPolicyId(String osPolicyId) {
    this.osPolicyId = osPolicyId;
    return this;
  }

  /**
   * The OS policy id
   * @return osPolicyId
   */
  @javax.annotation.Nullable
  public String getOsPolicyId() {
    return osPolicyId;
  }

  public void setOsPolicyId(String osPolicyId) {
    this.osPolicyId = osPolicyId;
  }


  public InstanceOSPoliciesComplianceOSPolicyCompliance osPolicyResourceCompliances(List<OSPolicyResourceCompliance> osPolicyResourceCompliances) {
    this.osPolicyResourceCompliances = osPolicyResourceCompliances;
    return this;
  }

  public InstanceOSPoliciesComplianceOSPolicyCompliance addOsPolicyResourceCompliancesItem(OSPolicyResourceCompliance osPolicyResourceCompliancesItem) {
    if (this.osPolicyResourceCompliances == null) {
      this.osPolicyResourceCompliances = new ArrayList<>();
    }
    this.osPolicyResourceCompliances.add(osPolicyResourceCompliancesItem);
    return this;
  }

  /**
   * Compliance data for each &#x60;OSPolicyResource&#x60; that is applied to the VM.
   * @return osPolicyResourceCompliances
   */
  @javax.annotation.Nullable
  public List<OSPolicyResourceCompliance> getOsPolicyResourceCompliances() {
    return osPolicyResourceCompliances;
  }

  public void setOsPolicyResourceCompliances(List<OSPolicyResourceCompliance> osPolicyResourceCompliances) {
    this.osPolicyResourceCompliances = osPolicyResourceCompliances;
  }


  public InstanceOSPoliciesComplianceOSPolicyCompliance state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Compliance state of the OS policy.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceOSPoliciesComplianceOSPolicyCompliance instanceOSPoliciesComplianceOSPolicyCompliance = (InstanceOSPoliciesComplianceOSPolicyCompliance) o;
    return Objects.equals(this.osPolicyAssignment, instanceOSPoliciesComplianceOSPolicyCompliance.osPolicyAssignment) &&
        Objects.equals(this.osPolicyId, instanceOSPoliciesComplianceOSPolicyCompliance.osPolicyId) &&
        Objects.equals(this.osPolicyResourceCompliances, instanceOSPoliciesComplianceOSPolicyCompliance.osPolicyResourceCompliances) &&
        Objects.equals(this.state, instanceOSPoliciesComplianceOSPolicyCompliance.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osPolicyAssignment, osPolicyId, osPolicyResourceCompliances, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceOSPoliciesComplianceOSPolicyCompliance {\n");
    sb.append("    osPolicyAssignment: ").append(toIndentedString(osPolicyAssignment)).append("\n");
    sb.append("    osPolicyId: ").append(toIndentedString(osPolicyId)).append("\n");
    sb.append("    osPolicyResourceCompliances: ").append(toIndentedString(osPolicyResourceCompliances)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("osPolicyAssignment");
    openapiFields.add("osPolicyId");
    openapiFields.add("osPolicyResourceCompliances");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceOSPoliciesComplianceOSPolicyCompliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceOSPoliciesComplianceOSPolicyCompliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceOSPoliciesComplianceOSPolicyCompliance is not found in the empty JSON string", InstanceOSPoliciesComplianceOSPolicyCompliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceOSPoliciesComplianceOSPolicyCompliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceOSPoliciesComplianceOSPolicyCompliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("osPolicyAssignment") != null && !jsonObj.get("osPolicyAssignment").isJsonNull()) && !jsonObj.get("osPolicyAssignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osPolicyAssignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osPolicyAssignment").toString()));
      }
      if ((jsonObj.get("osPolicyId") != null && !jsonObj.get("osPolicyId").isJsonNull()) && !jsonObj.get("osPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osPolicyId").toString()));
      }
      if (jsonObj.get("osPolicyResourceCompliances") != null && !jsonObj.get("osPolicyResourceCompliances").isJsonNull()) {
        JsonArray jsonArrayosPolicyResourceCompliances = jsonObj.getAsJsonArray("osPolicyResourceCompliances");
        if (jsonArrayosPolicyResourceCompliances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("osPolicyResourceCompliances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `osPolicyResourceCompliances` to be an array in the JSON string but got `%s`", jsonObj.get("osPolicyResourceCompliances").toString()));
          }

          // validate the optional field `osPolicyResourceCompliances` (array)
          for (int i = 0; i < jsonArrayosPolicyResourceCompliances.size(); i++) {
            OSPolicyResourceCompliance.validateJsonElement(jsonArrayosPolicyResourceCompliances.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceOSPoliciesComplianceOSPolicyCompliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceOSPoliciesComplianceOSPolicyCompliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceOSPoliciesComplianceOSPolicyCompliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceOSPoliciesComplianceOSPolicyCompliance.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceOSPoliciesComplianceOSPolicyCompliance>() {
           @Override
           public void write(JsonWriter out, InstanceOSPoliciesComplianceOSPolicyCompliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceOSPoliciesComplianceOSPolicyCompliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceOSPoliciesComplianceOSPolicyCompliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceOSPoliciesComplianceOSPolicyCompliance
   * @throws IOException if the JSON string is invalid with respect to InstanceOSPoliciesComplianceOSPolicyCompliance
   */
  public static InstanceOSPoliciesComplianceOSPolicyCompliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceOSPoliciesComplianceOSPolicyCompliance.class);
  }

  /**
   * Convert an instance of InstanceOSPoliciesComplianceOSPolicyCompliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

