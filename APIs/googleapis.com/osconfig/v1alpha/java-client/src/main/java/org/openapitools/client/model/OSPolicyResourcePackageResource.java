/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OSPolicyResourcePackageResourceAPT;
import org.openapitools.client.model.OSPolicyResourcePackageResourceDeb;
import org.openapitools.client.model.OSPolicyResourcePackageResourceGooGet;
import org.openapitools.client.model.OSPolicyResourcePackageResourceMSI;
import org.openapitools.client.model.OSPolicyResourcePackageResourceRPM;
import org.openapitools.client.model.OSPolicyResourcePackageResourceYUM;
import org.openapitools.client.model.OSPolicyResourcePackageResourceZypper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource that manages a system package.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSPolicyResourcePackageResource {
  public static final String SERIALIZED_NAME_APT = "apt";
  @SerializedName(SERIALIZED_NAME_APT)
  private OSPolicyResourcePackageResourceAPT apt;

  public static final String SERIALIZED_NAME_DEB = "deb";
  @SerializedName(SERIALIZED_NAME_DEB)
  private OSPolicyResourcePackageResourceDeb deb;

  /**
   * Required. The desired state the agent should maintain for this package.
   */
  @JsonAdapter(DesiredStateEnum.Adapter.class)
  public enum DesiredStateEnum {
    DESIRED_STATE_UNSPECIFIED("DESIRED_STATE_UNSPECIFIED"),
    
    INSTALLED("INSTALLED"),
    
    REMOVED("REMOVED");

    private String value;

    DesiredStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredStateEnum fromValue(String value) {
      for (DesiredStateEnum b : DesiredStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DesiredStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DesiredStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DesiredStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESIRED_STATE = "desiredState";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  private DesiredStateEnum desiredState;

  public static final String SERIALIZED_NAME_GOOGET = "googet";
  @SerializedName(SERIALIZED_NAME_GOOGET)
  private OSPolicyResourcePackageResourceGooGet googet;

  public static final String SERIALIZED_NAME_MSI = "msi";
  @SerializedName(SERIALIZED_NAME_MSI)
  private OSPolicyResourcePackageResourceMSI msi;

  public static final String SERIALIZED_NAME_RPM = "rpm";
  @SerializedName(SERIALIZED_NAME_RPM)
  private OSPolicyResourcePackageResourceRPM rpm;

  public static final String SERIALIZED_NAME_YUM = "yum";
  @SerializedName(SERIALIZED_NAME_YUM)
  private OSPolicyResourcePackageResourceYUM yum;

  public static final String SERIALIZED_NAME_ZYPPER = "zypper";
  @SerializedName(SERIALIZED_NAME_ZYPPER)
  private OSPolicyResourcePackageResourceZypper zypper;

  public OSPolicyResourcePackageResource() {
  }

  public OSPolicyResourcePackageResource apt(OSPolicyResourcePackageResourceAPT apt) {
    this.apt = apt;
    return this;
  }

  /**
   * Get apt
   * @return apt
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceAPT getApt() {
    return apt;
  }

  public void setApt(OSPolicyResourcePackageResourceAPT apt) {
    this.apt = apt;
  }


  public OSPolicyResourcePackageResource deb(OSPolicyResourcePackageResourceDeb deb) {
    this.deb = deb;
    return this;
  }

  /**
   * Get deb
   * @return deb
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceDeb getDeb() {
    return deb;
  }

  public void setDeb(OSPolicyResourcePackageResourceDeb deb) {
    this.deb = deb;
  }


  public OSPolicyResourcePackageResource desiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * Required. The desired state the agent should maintain for this package.
   * @return desiredState
   */
  @javax.annotation.Nullable
  public DesiredStateEnum getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
  }


  public OSPolicyResourcePackageResource googet(OSPolicyResourcePackageResourceGooGet googet) {
    this.googet = googet;
    return this;
  }

  /**
   * Get googet
   * @return googet
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceGooGet getGooget() {
    return googet;
  }

  public void setGooget(OSPolicyResourcePackageResourceGooGet googet) {
    this.googet = googet;
  }


  public OSPolicyResourcePackageResource msi(OSPolicyResourcePackageResourceMSI msi) {
    this.msi = msi;
    return this;
  }

  /**
   * Get msi
   * @return msi
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceMSI getMsi() {
    return msi;
  }

  public void setMsi(OSPolicyResourcePackageResourceMSI msi) {
    this.msi = msi;
  }


  public OSPolicyResourcePackageResource rpm(OSPolicyResourcePackageResourceRPM rpm) {
    this.rpm = rpm;
    return this;
  }

  /**
   * Get rpm
   * @return rpm
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceRPM getRpm() {
    return rpm;
  }

  public void setRpm(OSPolicyResourcePackageResourceRPM rpm) {
    this.rpm = rpm;
  }


  public OSPolicyResourcePackageResource yum(OSPolicyResourcePackageResourceYUM yum) {
    this.yum = yum;
    return this;
  }

  /**
   * Get yum
   * @return yum
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceYUM getYum() {
    return yum;
  }

  public void setYum(OSPolicyResourcePackageResourceYUM yum) {
    this.yum = yum;
  }


  public OSPolicyResourcePackageResource zypper(OSPolicyResourcePackageResourceZypper zypper) {
    this.zypper = zypper;
    return this;
  }

  /**
   * Get zypper
   * @return zypper
   */
  @javax.annotation.Nullable
  public OSPolicyResourcePackageResourceZypper getZypper() {
    return zypper;
  }

  public void setZypper(OSPolicyResourcePackageResourceZypper zypper) {
    this.zypper = zypper;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSPolicyResourcePackageResource osPolicyResourcePackageResource = (OSPolicyResourcePackageResource) o;
    return Objects.equals(this.apt, osPolicyResourcePackageResource.apt) &&
        Objects.equals(this.deb, osPolicyResourcePackageResource.deb) &&
        Objects.equals(this.desiredState, osPolicyResourcePackageResource.desiredState) &&
        Objects.equals(this.googet, osPolicyResourcePackageResource.googet) &&
        Objects.equals(this.msi, osPolicyResourcePackageResource.msi) &&
        Objects.equals(this.rpm, osPolicyResourcePackageResource.rpm) &&
        Objects.equals(this.yum, osPolicyResourcePackageResource.yum) &&
        Objects.equals(this.zypper, osPolicyResourcePackageResource.zypper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apt, deb, desiredState, googet, msi, rpm, yum, zypper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSPolicyResourcePackageResource {\n");
    sb.append("    apt: ").append(toIndentedString(apt)).append("\n");
    sb.append("    deb: ").append(toIndentedString(deb)).append("\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    googet: ").append(toIndentedString(googet)).append("\n");
    sb.append("    msi: ").append(toIndentedString(msi)).append("\n");
    sb.append("    rpm: ").append(toIndentedString(rpm)).append("\n");
    sb.append("    yum: ").append(toIndentedString(yum)).append("\n");
    sb.append("    zypper: ").append(toIndentedString(zypper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apt");
    openapiFields.add("deb");
    openapiFields.add("desiredState");
    openapiFields.add("googet");
    openapiFields.add("msi");
    openapiFields.add("rpm");
    openapiFields.add("yum");
    openapiFields.add("zypper");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSPolicyResourcePackageResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSPolicyResourcePackageResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSPolicyResourcePackageResource is not found in the empty JSON string", OSPolicyResourcePackageResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSPolicyResourcePackageResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSPolicyResourcePackageResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apt`
      if (jsonObj.get("apt") != null && !jsonObj.get("apt").isJsonNull()) {
        OSPolicyResourcePackageResourceAPT.validateJsonElement(jsonObj.get("apt"));
      }
      // validate the optional field `deb`
      if (jsonObj.get("deb") != null && !jsonObj.get("deb").isJsonNull()) {
        OSPolicyResourcePackageResourceDeb.validateJsonElement(jsonObj.get("deb"));
      }
      if ((jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) && !jsonObj.get("desiredState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desiredState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desiredState").toString()));
      }
      // validate the optional field `desiredState`
      if (jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) {
        DesiredStateEnum.validateJsonElement(jsonObj.get("desiredState"));
      }
      // validate the optional field `googet`
      if (jsonObj.get("googet") != null && !jsonObj.get("googet").isJsonNull()) {
        OSPolicyResourcePackageResourceGooGet.validateJsonElement(jsonObj.get("googet"));
      }
      // validate the optional field `msi`
      if (jsonObj.get("msi") != null && !jsonObj.get("msi").isJsonNull()) {
        OSPolicyResourcePackageResourceMSI.validateJsonElement(jsonObj.get("msi"));
      }
      // validate the optional field `rpm`
      if (jsonObj.get("rpm") != null && !jsonObj.get("rpm").isJsonNull()) {
        OSPolicyResourcePackageResourceRPM.validateJsonElement(jsonObj.get("rpm"));
      }
      // validate the optional field `yum`
      if (jsonObj.get("yum") != null && !jsonObj.get("yum").isJsonNull()) {
        OSPolicyResourcePackageResourceYUM.validateJsonElement(jsonObj.get("yum"));
      }
      // validate the optional field `zypper`
      if (jsonObj.get("zypper") != null && !jsonObj.get("zypper").isJsonNull()) {
        OSPolicyResourcePackageResourceZypper.validateJsonElement(jsonObj.get("zypper"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSPolicyResourcePackageResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSPolicyResourcePackageResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSPolicyResourcePackageResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSPolicyResourcePackageResource.class));

       return (TypeAdapter<T>) new TypeAdapter<OSPolicyResourcePackageResource>() {
           @Override
           public void write(JsonWriter out, OSPolicyResourcePackageResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSPolicyResourcePackageResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSPolicyResourcePackageResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSPolicyResourcePackageResource
   * @throws IOException if the JSON string is invalid with respect to OSPolicyResourcePackageResource
   */
  public static OSPolicyResourcePackageResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSPolicyResourcePackageResource.class);
  }

  /**
   * Convert an instance of OSPolicyResourcePackageResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

