/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceOSPoliciesComplianceOSPolicyCompliance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This API resource represents the OS policies compliance data for a Compute Engine virtual machine (VM) instance at a given point in time. A Compute Engine VM can have multiple OS policy assignments, and each assignment can have multiple OS policies. As a result, multiple OS policies could be applied to a single VM. You can use this API resource to determine both the compliance state of your VM as well as the compliance state of an individual OS policy. For more information, see [View compliance](https://cloud.google.com/compute/docs/os-configuration-management/view-compliance).
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceOSPoliciesCompliance {
  public static final String SERIALIZED_NAME_DETAILED_STATE = "detailedState";
  @SerializedName(SERIALIZED_NAME_DETAILED_STATE)
  private String detailedState;

  public static final String SERIALIZED_NAME_DETAILED_STATE_REASON = "detailedStateReason";
  @SerializedName(SERIALIZED_NAME_DETAILED_STATE_REASON)
  private String detailedStateReason;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public static final String SERIALIZED_NAME_LAST_COMPLIANCE_CHECK_TIME = "lastComplianceCheckTime";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLIANCE_CHECK_TIME)
  private String lastComplianceCheckTime;

  public static final String SERIALIZED_NAME_LAST_COMPLIANCE_RUN_ID = "lastComplianceRunId";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLIANCE_RUN_ID)
  private String lastComplianceRunId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_POLICY_COMPLIANCES = "osPolicyCompliances";
  @SerializedName(SERIALIZED_NAME_OS_POLICY_COMPLIANCES)
  private List<InstanceOSPoliciesComplianceOSPolicyCompliance> osPolicyCompliances = new ArrayList<>();

  /**
   * Output only. Compliance state of the VM.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED("OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED"),
    
    COMPLIANT("COMPLIANT"),
    
    NON_COMPLIANT("NON_COMPLIANT"),
    
    UNKNOWN("UNKNOWN"),
    
    NO_OS_POLICIES_APPLICABLE("NO_OS_POLICIES_APPLICABLE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public InstanceOSPoliciesCompliance() {
  }

  public InstanceOSPoliciesCompliance(
     String detailedState, 
     String detailedStateReason, 
     String instance, 
     String lastComplianceCheckTime, 
     String lastComplianceRunId, 
     String name, 
     List<InstanceOSPoliciesComplianceOSPolicyCompliance> osPolicyCompliances, 
     StateEnum state
  ) {
    this();
    this.detailedState = detailedState;
    this.detailedStateReason = detailedStateReason;
    this.instance = instance;
    this.lastComplianceCheckTime = lastComplianceCheckTime;
    this.lastComplianceRunId = lastComplianceRunId;
    this.name = name;
    this.osPolicyCompliances = osPolicyCompliances;
    this.state = state;
  }

  /**
   * Output only. Detailed compliance state of the VM. This field is populated only when compliance state is &#x60;UNKNOWN&#x60;. It may contain one of the following values: * &#x60;no-compliance-data&#x60;: Compliance data is not available for this VM. * &#x60;no-agent-detected&#x60;: OS Config agent is not detected for this VM. * &#x60;config-not-supported-by-agent&#x60;: The version of the OS Config agent running on this VM does not support configuration management. * &#x60;inactive&#x60;: VM is not running. * &#x60;internal-service-errors&#x60;: There were internal service errors encountered while enforcing compliance. * &#x60;agent-errors&#x60;: OS config agent encountered errors while enforcing compliance.
   * @return detailedState
   */
  @javax.annotation.Nullable
  public String getDetailedState() {
    return detailedState;
  }



  /**
   * Output only. The reason for the &#x60;detailed_state&#x60; of the VM (if any).
   * @return detailedStateReason
   */
  @javax.annotation.Nullable
  public String getDetailedStateReason() {
    return detailedStateReason;
  }



  /**
   * Output only. The Compute Engine VM instance name.
   * @return instance
   */
  @javax.annotation.Nullable
  public String getInstance() {
    return instance;
  }



  /**
   * Output only. Timestamp of the last compliance check for the VM.
   * @return lastComplianceCheckTime
   */
  @javax.annotation.Nullable
  public String getLastComplianceCheckTime() {
    return lastComplianceCheckTime;
  }



  /**
   * Output only. Unique identifier for the last compliance run. This id will be logged by the OS config agent during a compliance run and can be used for debugging and tracing purpose.
   * @return lastComplianceRunId
   */
  @javax.annotation.Nullable
  public String getLastComplianceRunId() {
    return lastComplianceRunId;
  }



  /**
   * Output only. The &#x60;InstanceOSPoliciesCompliance&#x60; API resource name. Format: &#x60;projects/{project_number}/locations/{location}/instanceOSPoliciesCompliances/{instance_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Compliance data for each &#x60;OSPolicy&#x60; that is applied to the VM.
   * @return osPolicyCompliances
   */
  @javax.annotation.Nullable
  public List<InstanceOSPoliciesComplianceOSPolicyCompliance> getOsPolicyCompliances() {
    return osPolicyCompliances;
  }



  /**
   * Output only. Compliance state of the VM.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceOSPoliciesCompliance instanceOSPoliciesCompliance = (InstanceOSPoliciesCompliance) o;
    return Objects.equals(this.detailedState, instanceOSPoliciesCompliance.detailedState) &&
        Objects.equals(this.detailedStateReason, instanceOSPoliciesCompliance.detailedStateReason) &&
        Objects.equals(this.instance, instanceOSPoliciesCompliance.instance) &&
        Objects.equals(this.lastComplianceCheckTime, instanceOSPoliciesCompliance.lastComplianceCheckTime) &&
        Objects.equals(this.lastComplianceRunId, instanceOSPoliciesCompliance.lastComplianceRunId) &&
        Objects.equals(this.name, instanceOSPoliciesCompliance.name) &&
        Objects.equals(this.osPolicyCompliances, instanceOSPoliciesCompliance.osPolicyCompliances) &&
        Objects.equals(this.state, instanceOSPoliciesCompliance.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detailedState, detailedStateReason, instance, lastComplianceCheckTime, lastComplianceRunId, name, osPolicyCompliances, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceOSPoliciesCompliance {\n");
    sb.append("    detailedState: ").append(toIndentedString(detailedState)).append("\n");
    sb.append("    detailedStateReason: ").append(toIndentedString(detailedStateReason)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    lastComplianceCheckTime: ").append(toIndentedString(lastComplianceCheckTime)).append("\n");
    sb.append("    lastComplianceRunId: ").append(toIndentedString(lastComplianceRunId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osPolicyCompliances: ").append(toIndentedString(osPolicyCompliances)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detailedState");
    openapiFields.add("detailedStateReason");
    openapiFields.add("instance");
    openapiFields.add("lastComplianceCheckTime");
    openapiFields.add("lastComplianceRunId");
    openapiFields.add("name");
    openapiFields.add("osPolicyCompliances");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceOSPoliciesCompliance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceOSPoliciesCompliance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceOSPoliciesCompliance is not found in the empty JSON string", InstanceOSPoliciesCompliance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceOSPoliciesCompliance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceOSPoliciesCompliance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detailedState") != null && !jsonObj.get("detailedState").isJsonNull()) && !jsonObj.get("detailedState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailedState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailedState").toString()));
      }
      if ((jsonObj.get("detailedStateReason") != null && !jsonObj.get("detailedStateReason").isJsonNull()) && !jsonObj.get("detailedStateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailedStateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailedStateReason").toString()));
      }
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if ((jsonObj.get("lastComplianceCheckTime") != null && !jsonObj.get("lastComplianceCheckTime").isJsonNull()) && !jsonObj.get("lastComplianceCheckTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastComplianceCheckTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastComplianceCheckTime").toString()));
      }
      if ((jsonObj.get("lastComplianceRunId") != null && !jsonObj.get("lastComplianceRunId").isJsonNull()) && !jsonObj.get("lastComplianceRunId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastComplianceRunId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastComplianceRunId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("osPolicyCompliances") != null && !jsonObj.get("osPolicyCompliances").isJsonNull()) {
        JsonArray jsonArrayosPolicyCompliances = jsonObj.getAsJsonArray("osPolicyCompliances");
        if (jsonArrayosPolicyCompliances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("osPolicyCompliances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `osPolicyCompliances` to be an array in the JSON string but got `%s`", jsonObj.get("osPolicyCompliances").toString()));
          }

          // validate the optional field `osPolicyCompliances` (array)
          for (int i = 0; i < jsonArrayosPolicyCompliances.size(); i++) {
            InstanceOSPoliciesComplianceOSPolicyCompliance.validateJsonElement(jsonArrayosPolicyCompliances.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceOSPoliciesCompliance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceOSPoliciesCompliance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceOSPoliciesCompliance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceOSPoliciesCompliance.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceOSPoliciesCompliance>() {
           @Override
           public void write(JsonWriter out, InstanceOSPoliciesCompliance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceOSPoliciesCompliance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceOSPoliciesCompliance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceOSPoliciesCompliance
   * @throws IOException if the JSON string is invalid with respect to InstanceOSPoliciesCompliance
   */
  public static InstanceOSPoliciesCompliance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceOSPoliciesCompliance.class);
  }

  /**
   * Convert an instance of InstanceOSPoliciesCompliance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

