/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a Windows application that is retrieved from the Windows Registry. For more information about these fields, see: https://docs.microsoft.com/en-us/windows/win32/msi/uninstall-registry-key
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryWindowsApplication {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_VERSION = "displayVersion";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VERSION)
  private String displayVersion;

  public static final String SERIALIZED_NAME_HELP_LINK = "helpLink";
  @SerializedName(SERIALIZED_NAME_HELP_LINK)
  private String helpLink;

  public static final String SERIALIZED_NAME_INSTALL_DATE = "installDate";
  @SerializedName(SERIALIZED_NAME_INSTALL_DATE)
  private Date installDate;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public InventoryWindowsApplication() {
  }

  public InventoryWindowsApplication displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the application or product.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public InventoryWindowsApplication displayVersion(String displayVersion) {
    this.displayVersion = displayVersion;
    return this;
  }

  /**
   * The version of the product or application in string format.
   * @return displayVersion
   */
  @javax.annotation.Nullable
  public String getDisplayVersion() {
    return displayVersion;
  }

  public void setDisplayVersion(String displayVersion) {
    this.displayVersion = displayVersion;
  }


  public InventoryWindowsApplication helpLink(String helpLink) {
    this.helpLink = helpLink;
    return this;
  }

  /**
   * The internet address for technical support.
   * @return helpLink
   */
  @javax.annotation.Nullable
  public String getHelpLink() {
    return helpLink;
  }

  public void setHelpLink(String helpLink) {
    this.helpLink = helpLink;
  }


  public InventoryWindowsApplication installDate(Date installDate) {
    this.installDate = installDate;
    return this;
  }

  /**
   * Get installDate
   * @return installDate
   */
  @javax.annotation.Nullable
  public Date getInstallDate() {
    return installDate;
  }

  public void setInstallDate(Date installDate) {
    this.installDate = installDate;
  }


  public InventoryWindowsApplication publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  /**
   * The name of the manufacturer for the product or application.
   * @return publisher
   */
  @javax.annotation.Nullable
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryWindowsApplication inventoryWindowsApplication = (InventoryWindowsApplication) o;
    return Objects.equals(this.displayName, inventoryWindowsApplication.displayName) &&
        Objects.equals(this.displayVersion, inventoryWindowsApplication.displayVersion) &&
        Objects.equals(this.helpLink, inventoryWindowsApplication.helpLink) &&
        Objects.equals(this.installDate, inventoryWindowsApplication.installDate) &&
        Objects.equals(this.publisher, inventoryWindowsApplication.publisher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, displayVersion, helpLink, installDate, publisher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryWindowsApplication {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayVersion: ").append(toIndentedString(displayVersion)).append("\n");
    sb.append("    helpLink: ").append(toIndentedString(helpLink)).append("\n");
    sb.append("    installDate: ").append(toIndentedString(installDate)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("displayVersion");
    openapiFields.add("helpLink");
    openapiFields.add("installDate");
    openapiFields.add("publisher");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryWindowsApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryWindowsApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryWindowsApplication is not found in the empty JSON string", InventoryWindowsApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryWindowsApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryWindowsApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("displayVersion") != null && !jsonObj.get("displayVersion").isJsonNull()) && !jsonObj.get("displayVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayVersion").toString()));
      }
      if ((jsonObj.get("helpLink") != null && !jsonObj.get("helpLink").isJsonNull()) && !jsonObj.get("helpLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpLink").toString()));
      }
      // validate the optional field `installDate`
      if (jsonObj.get("installDate") != null && !jsonObj.get("installDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("installDate"));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryWindowsApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryWindowsApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryWindowsApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryWindowsApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryWindowsApplication>() {
           @Override
           public void write(JsonWriter out, InventoryWindowsApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryWindowsApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryWindowsApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryWindowsApplication
   * @throws IOException if the JSON string is invalid with respect to InventoryWindowsApplication
   */
  public static InventoryWindowsApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryWindowsApplication.class);
  }

  /**
   * Convert an instance of InventoryWindowsApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

