/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CVSSv3;
import org.openapitools.client.model.VulnerabilityReportVulnerabilityDetailsReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains metadata information for the vulnerability. This information is collected from the upstream feed of the operating system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerabilityReportVulnerabilityDetails {
  public static final String SERIALIZED_NAME_CVE = "cve";
  @SerializedName(SERIALIZED_NAME_CVE)
  private String cve;

  public static final String SERIALIZED_NAME_CVSS_V2_SCORE = "cvssV2Score";
  @SerializedName(SERIALIZED_NAME_CVSS_V2_SCORE)
  private Float cvssV2Score;

  public static final String SERIALIZED_NAME_CVSS_V3 = "cvssV3";
  @SerializedName(SERIALIZED_NAME_CVSS_V3)
  private CVSSv3 cvssV3;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<VulnerabilityReportVulnerabilityDetailsReference> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public VulnerabilityReportVulnerabilityDetails() {
  }

  public VulnerabilityReportVulnerabilityDetails cve(String cve) {
    this.cve = cve;
    return this;
  }

  /**
   * The CVE of the vulnerability. CVE cannot be empty and the combination of should be unique across vulnerabilities for a VM.
   * @return cve
   */
  @javax.annotation.Nullable
  public String getCve() {
    return cve;
  }

  public void setCve(String cve) {
    this.cve = cve;
  }


  public VulnerabilityReportVulnerabilityDetails cvssV2Score(Float cvssV2Score) {
    this.cvssV2Score = cvssV2Score;
    return this;
  }

  /**
   * The CVSS V2 score of this vulnerability. CVSS V2 score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
   * @return cvssV2Score
   */
  @javax.annotation.Nullable
  public Float getCvssV2Score() {
    return cvssV2Score;
  }

  public void setCvssV2Score(Float cvssV2Score) {
    this.cvssV2Score = cvssV2Score;
  }


  public VulnerabilityReportVulnerabilityDetails cvssV3(CVSSv3 cvssV3) {
    this.cvssV3 = cvssV3;
    return this;
  }

  /**
   * Get cvssV3
   * @return cvssV3
   */
  @javax.annotation.Nullable
  public CVSSv3 getCvssV3() {
    return cvssV3;
  }

  public void setCvssV3(CVSSv3 cvssV3) {
    this.cvssV3 = cvssV3;
  }


  public VulnerabilityReportVulnerabilityDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The note or description describing the vulnerability from the distro.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VulnerabilityReportVulnerabilityDetails references(List<VulnerabilityReportVulnerabilityDetailsReference> references) {
    this.references = references;
    return this;
  }

  public VulnerabilityReportVulnerabilityDetails addReferencesItem(VulnerabilityReportVulnerabilityDetailsReference referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * Corresponds to the references attached to the &#x60;VulnerabilityDetails&#x60;.
   * @return references
   */
  @javax.annotation.Nullable
  public List<VulnerabilityReportVulnerabilityDetailsReference> getReferences() {
    return references;
  }

  public void setReferences(List<VulnerabilityReportVulnerabilityDetailsReference> references) {
    this.references = references;
  }


  public VulnerabilityReportVulnerabilityDetails severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Assigned severity/impact ranking from the distro.
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityReportVulnerabilityDetails vulnerabilityReportVulnerabilityDetails = (VulnerabilityReportVulnerabilityDetails) o;
    return Objects.equals(this.cve, vulnerabilityReportVulnerabilityDetails.cve) &&
        Objects.equals(this.cvssV2Score, vulnerabilityReportVulnerabilityDetails.cvssV2Score) &&
        Objects.equals(this.cvssV3, vulnerabilityReportVulnerabilityDetails.cvssV3) &&
        Objects.equals(this.description, vulnerabilityReportVulnerabilityDetails.description) &&
        Objects.equals(this.references, vulnerabilityReportVulnerabilityDetails.references) &&
        Objects.equals(this.severity, vulnerabilityReportVulnerabilityDetails.severity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cve, cvssV2Score, cvssV3, description, references, severity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityReportVulnerabilityDetails {\n");
    sb.append("    cve: ").append(toIndentedString(cve)).append("\n");
    sb.append("    cvssV2Score: ").append(toIndentedString(cvssV2Score)).append("\n");
    sb.append("    cvssV3: ").append(toIndentedString(cvssV3)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cve");
    openapiFields.add("cvssV2Score");
    openapiFields.add("cvssV3");
    openapiFields.add("description");
    openapiFields.add("references");
    openapiFields.add("severity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityReportVulnerabilityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityReportVulnerabilityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityReportVulnerabilityDetails is not found in the empty JSON string", VulnerabilityReportVulnerabilityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityReportVulnerabilityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityReportVulnerabilityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cve") != null && !jsonObj.get("cve").isJsonNull()) && !jsonObj.get("cve").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cve` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cve").toString()));
      }
      // validate the optional field `cvssV3`
      if (jsonObj.get("cvssV3") != null && !jsonObj.get("cvssV3").isJsonNull()) {
        CVSSv3.validateJsonElement(jsonObj.get("cvssV3"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
        if (jsonArrayreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("references").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
          }

          // validate the optional field `references` (array)
          for (int i = 0; i < jsonArrayreferences.size(); i++) {
            VulnerabilityReportVulnerabilityDetailsReference.validateJsonElement(jsonArrayreferences.get(i));
          };
        }
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityReportVulnerabilityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityReportVulnerabilityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityReportVulnerabilityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityReportVulnerabilityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityReportVulnerabilityDetails>() {
           @Override
           public void write(JsonWriter out, VulnerabilityReportVulnerabilityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityReportVulnerabilityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityReportVulnerabilityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityReportVulnerabilityDetails
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityReportVulnerabilityDetails
   */
  public static VulnerabilityReportVulnerabilityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityReportVulnerabilityDetails.class);
  }

  /**
   * Convert an instance of VulnerabilityReportVulnerabilityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

