/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VulnerabilityReportVulnerabilityDetails;
import org.openapitools.client.model.VulnerabilityReportVulnerabilityItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A vulnerability affecting the VM instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VulnerabilityReportVulnerability {
  public static final String SERIALIZED_NAME_AVAILABLE_INVENTORY_ITEM_IDS = "availableInventoryItemIds";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AVAILABLE_INVENTORY_ITEM_IDS)
  private List<String> availableInventoryItemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private VulnerabilityReportVulnerabilityDetails details;

  public static final String SERIALIZED_NAME_INSTALLED_INVENTORY_ITEM_IDS = "installedInventoryItemIds";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INSTALLED_INVENTORY_ITEM_IDS)
  private List<String> installedInventoryItemIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<VulnerabilityReportVulnerabilityItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public VulnerabilityReportVulnerability() {
  }

  @Deprecated
  public VulnerabilityReportVulnerability availableInventoryItemIds(List<String> availableInventoryItemIds) {
    this.availableInventoryItemIds = availableInventoryItemIds;
    return this;
  }

  public VulnerabilityReportVulnerability addAvailableInventoryItemIdsItem(String availableInventoryItemIdsItem) {
    if (this.availableInventoryItemIds == null) {
      this.availableInventoryItemIds = new ArrayList<>();
    }
    this.availableInventoryItemIds.add(availableInventoryItemIdsItem);
    return this;
  }

  /**
   * Corresponds to the &#x60;AVAILABLE_PACKAGE&#x60; inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The &#x60;inventory_item&#x60; value specifies the latest &#x60;SoftwarePackage&#x60; available to the VM that fixes the vulnerability.
   * @return availableInventoryItemIds
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getAvailableInventoryItemIds() {
    return availableInventoryItemIds;
  }

  @Deprecated
  public void setAvailableInventoryItemIds(List<String> availableInventoryItemIds) {
    this.availableInventoryItemIds = availableInventoryItemIds;
  }


  public VulnerabilityReportVulnerability createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The timestamp for when the vulnerability was first detected.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public VulnerabilityReportVulnerability details(VulnerabilityReportVulnerabilityDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public VulnerabilityReportVulnerabilityDetails getDetails() {
    return details;
  }

  public void setDetails(VulnerabilityReportVulnerabilityDetails details) {
    this.details = details;
  }


  @Deprecated
  public VulnerabilityReportVulnerability installedInventoryItemIds(List<String> installedInventoryItemIds) {
    this.installedInventoryItemIds = installedInventoryItemIds;
    return this;
  }

  public VulnerabilityReportVulnerability addInstalledInventoryItemIdsItem(String installedInventoryItemIdsItem) {
    if (this.installedInventoryItemIds == null) {
      this.installedInventoryItemIds = new ArrayList<>();
    }
    this.installedInventoryItemIds.add(installedInventoryItemIdsItem);
    return this;
  }

  /**
   * Corresponds to the &#x60;INSTALLED_PACKAGE&#x60; inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some distros, this field may be empty.
   * @return installedInventoryItemIds
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getInstalledInventoryItemIds() {
    return installedInventoryItemIds;
  }

  @Deprecated
  public void setInstalledInventoryItemIds(List<String> installedInventoryItemIds) {
    this.installedInventoryItemIds = installedInventoryItemIds;
  }


  public VulnerabilityReportVulnerability items(List<VulnerabilityReportVulnerabilityItem> items) {
    this.items = items;
    return this;
  }

  public VulnerabilityReportVulnerability addItemsItem(VulnerabilityReportVulnerabilityItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * List of items affected by the vulnerability.
   * @return items
   */
  @javax.annotation.Nullable
  public List<VulnerabilityReportVulnerabilityItem> getItems() {
    return items;
  }

  public void setItems(List<VulnerabilityReportVulnerabilityItem> items) {
    this.items = items;
  }


  public VulnerabilityReportVulnerability updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The timestamp for when the vulnerability was last modified.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityReportVulnerability vulnerabilityReportVulnerability = (VulnerabilityReportVulnerability) o;
    return Objects.equals(this.availableInventoryItemIds, vulnerabilityReportVulnerability.availableInventoryItemIds) &&
        Objects.equals(this.createTime, vulnerabilityReportVulnerability.createTime) &&
        Objects.equals(this.details, vulnerabilityReportVulnerability.details) &&
        Objects.equals(this.installedInventoryItemIds, vulnerabilityReportVulnerability.installedInventoryItemIds) &&
        Objects.equals(this.items, vulnerabilityReportVulnerability.items) &&
        Objects.equals(this.updateTime, vulnerabilityReportVulnerability.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableInventoryItemIds, createTime, details, installedInventoryItemIds, items, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityReportVulnerability {\n");
    sb.append("    availableInventoryItemIds: ").append(toIndentedString(availableInventoryItemIds)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    installedInventoryItemIds: ").append(toIndentedString(installedInventoryItemIds)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableInventoryItemIds");
    openapiFields.add("createTime");
    openapiFields.add("details");
    openapiFields.add("installedInventoryItemIds");
    openapiFields.add("items");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VulnerabilityReportVulnerability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityReportVulnerability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityReportVulnerability is not found in the empty JSON string", VulnerabilityReportVulnerability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityReportVulnerability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityReportVulnerability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableInventoryItemIds") != null && !jsonObj.get("availableInventoryItemIds").isJsonNull() && !jsonObj.get("availableInventoryItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableInventoryItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("availableInventoryItemIds").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        VulnerabilityReportVulnerabilityDetails.validateJsonElement(jsonObj.get("details"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("installedInventoryItemIds") != null && !jsonObj.get("installedInventoryItemIds").isJsonNull() && !jsonObj.get("installedInventoryItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `installedInventoryItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("installedInventoryItemIds").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            VulnerabilityReportVulnerabilityItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityReportVulnerability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityReportVulnerability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityReportVulnerability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityReportVulnerability.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityReportVulnerability>() {
           @Override
           public void write(JsonWriter out, VulnerabilityReportVulnerability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityReportVulnerability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VulnerabilityReportVulnerability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VulnerabilityReportVulnerability
   * @throws IOException if the JSON string is invalid with respect to VulnerabilityReportVulnerability
   */
  public static VulnerabilityReportVulnerability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityReportVulnerability.class);
  }

  /**
   * Convert an instance of VulnerabilityReportVulnerability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

