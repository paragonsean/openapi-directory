/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Operating system information for the VM.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:03.505542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryOsInfo {
  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private String architecture;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_KERNEL_RELEASE = "kernelRelease";
  @SerializedName(SERIALIZED_NAME_KERNEL_RELEASE)
  private String kernelRelease;

  public static final String SERIALIZED_NAME_KERNEL_VERSION = "kernelVersion";
  @SerializedName(SERIALIZED_NAME_KERNEL_VERSION)
  private String kernelVersion;

  public static final String SERIALIZED_NAME_LONG_NAME = "longName";
  @SerializedName(SERIALIZED_NAME_LONG_NAME)
  private String longName;

  public static final String SERIALIZED_NAME_OSCONFIG_AGENT_VERSION = "osconfigAgentVersion";
  @SerializedName(SERIALIZED_NAME_OSCONFIG_AGENT_VERSION)
  private String osconfigAgentVersion;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public InventoryOsInfo() {
  }

  public InventoryOsInfo architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * The system architecture of the operating system.
   * @return architecture
   */
  @javax.annotation.Nullable
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }


  public InventoryOsInfo hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The VM hostname.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public InventoryOsInfo kernelRelease(String kernelRelease) {
    this.kernelRelease = kernelRelease;
    return this;
  }

  /**
   * The kernel release of the operating system.
   * @return kernelRelease
   */
  @javax.annotation.Nullable
  public String getKernelRelease() {
    return kernelRelease;
  }

  public void setKernelRelease(String kernelRelease) {
    this.kernelRelease = kernelRelease;
  }


  public InventoryOsInfo kernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
    return this;
  }

  /**
   * The kernel version of the operating system.
   * @return kernelVersion
   */
  @javax.annotation.Nullable
  public String getKernelVersion() {
    return kernelVersion;
  }

  public void setKernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
  }


  public InventoryOsInfo longName(String longName) {
    this.longName = longName;
    return this;
  }

  /**
   * The operating system long name. For example &#39;Debian GNU/Linux 9&#39; or &#39;Microsoft Window Server 2019 Datacenter&#39;.
   * @return longName
   */
  @javax.annotation.Nullable
  public String getLongName() {
    return longName;
  }

  public void setLongName(String longName) {
    this.longName = longName;
  }


  public InventoryOsInfo osconfigAgentVersion(String osconfigAgentVersion) {
    this.osconfigAgentVersion = osconfigAgentVersion;
    return this;
  }

  /**
   * The current version of the OS Config agent running on the VM.
   * @return osconfigAgentVersion
   */
  @javax.annotation.Nullable
  public String getOsconfigAgentVersion() {
    return osconfigAgentVersion;
  }

  public void setOsconfigAgentVersion(String osconfigAgentVersion) {
    this.osconfigAgentVersion = osconfigAgentVersion;
  }


  public InventoryOsInfo shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * The operating system short name. For example, &#39;windows&#39; or &#39;debian&#39;.
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public InventoryOsInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the operating system.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryOsInfo inventoryOsInfo = (InventoryOsInfo) o;
    return Objects.equals(this.architecture, inventoryOsInfo.architecture) &&
        Objects.equals(this.hostname, inventoryOsInfo.hostname) &&
        Objects.equals(this.kernelRelease, inventoryOsInfo.kernelRelease) &&
        Objects.equals(this.kernelVersion, inventoryOsInfo.kernelVersion) &&
        Objects.equals(this.longName, inventoryOsInfo.longName) &&
        Objects.equals(this.osconfigAgentVersion, inventoryOsInfo.osconfigAgentVersion) &&
        Objects.equals(this.shortName, inventoryOsInfo.shortName) &&
        Objects.equals(this.version, inventoryOsInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, hostname, kernelRelease, kernelVersion, longName, osconfigAgentVersion, shortName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryOsInfo {\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    kernelRelease: ").append(toIndentedString(kernelRelease)).append("\n");
    sb.append("    kernelVersion: ").append(toIndentedString(kernelVersion)).append("\n");
    sb.append("    longName: ").append(toIndentedString(longName)).append("\n");
    sb.append("    osconfigAgentVersion: ").append(toIndentedString(osconfigAgentVersion)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("architecture");
    openapiFields.add("hostname");
    openapiFields.add("kernelRelease");
    openapiFields.add("kernelVersion");
    openapiFields.add("longName");
    openapiFields.add("osconfigAgentVersion");
    openapiFields.add("shortName");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryOsInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryOsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryOsInfo is not found in the empty JSON string", InventoryOsInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryOsInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryOsInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) && !jsonObj.get("architecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `architecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("architecture").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("kernelRelease") != null && !jsonObj.get("kernelRelease").isJsonNull()) && !jsonObj.get("kernelRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kernelRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kernelRelease").toString()));
      }
      if ((jsonObj.get("kernelVersion") != null && !jsonObj.get("kernelVersion").isJsonNull()) && !jsonObj.get("kernelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kernelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kernelVersion").toString()));
      }
      if ((jsonObj.get("longName") != null && !jsonObj.get("longName").isJsonNull()) && !jsonObj.get("longName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longName").toString()));
      }
      if ((jsonObj.get("osconfigAgentVersion") != null && !jsonObj.get("osconfigAgentVersion").isJsonNull()) && !jsonObj.get("osconfigAgentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osconfigAgentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osconfigAgentVersion").toString()));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryOsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryOsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryOsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryOsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryOsInfo>() {
           @Override
           public void write(JsonWriter out, InventoryOsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryOsInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryOsInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryOsInfo
   * @throws IOException if the JSON string is invalid with respect to InventoryOsInfo
   */
  public static InventoryOsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryOsInfo.class);
  }

  /**
   * Convert an instance of InventoryOsInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

