/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VulnerabilityReportVulnerabilityDetails from './VulnerabilityReportVulnerabilityDetails';
import VulnerabilityReportVulnerabilityItem from './VulnerabilityReportVulnerabilityItem';

/**
 * The VulnerabilityReportVulnerability model module.
 * @module model/VulnerabilityReportVulnerability
 * @version v1alpha
 */
class VulnerabilityReportVulnerability {
    /**
     * Constructs a new <code>VulnerabilityReportVulnerability</code>.
     * A vulnerability affecting the VM instance.
     * @alias module:model/VulnerabilityReportVulnerability
     */
    constructor() { 
        
        VulnerabilityReportVulnerability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VulnerabilityReportVulnerability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VulnerabilityReportVulnerability} obj Optional instance to populate.
     * @return {module:model/VulnerabilityReportVulnerability} The populated <code>VulnerabilityReportVulnerability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VulnerabilityReportVulnerability();

            if (data.hasOwnProperty('availableInventoryItemIds')) {
                obj['availableInventoryItemIds'] = ApiClient.convertToType(data['availableInventoryItemIds'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = VulnerabilityReportVulnerabilityDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('installedInventoryItemIds')) {
                obj['installedInventoryItemIds'] = ApiClient.convertToType(data['installedInventoryItemIds'], ['String']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [VulnerabilityReportVulnerabilityItem]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VulnerabilityReportVulnerability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VulnerabilityReportVulnerability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['availableInventoryItemIds'])) {
            throw new Error("Expected the field `availableInventoryItemIds` to be an array in the JSON data but got " + data['availableInventoryItemIds']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          VulnerabilityReportVulnerabilityDetails.validateJSON(data['details']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['installedInventoryItemIds'])) {
            throw new Error("Expected the field `installedInventoryItemIds` to be an array in the JSON data but got " + data['installedInventoryItemIds']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                VulnerabilityReportVulnerabilityItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Corresponds to the `AVAILABLE_PACKAGE` inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The `inventory_item` value specifies the latest `SoftwarePackage` available to the VM that fixes the vulnerability.
 * @member {Array.<String>} availableInventoryItemIds
 */
VulnerabilityReportVulnerability.prototype['availableInventoryItemIds'] = undefined;

/**
 * The timestamp for when the vulnerability was first detected.
 * @member {String} createTime
 */
VulnerabilityReportVulnerability.prototype['createTime'] = undefined;

/**
 * @member {module:model/VulnerabilityReportVulnerabilityDetails} details
 */
VulnerabilityReportVulnerability.prototype['details'] = undefined;

/**
 * Corresponds to the `INSTALLED_PACKAGE` inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some distros, this field may be empty.
 * @member {Array.<String>} installedInventoryItemIds
 */
VulnerabilityReportVulnerability.prototype['installedInventoryItemIds'] = undefined;

/**
 * List of items affected by the vulnerability.
 * @member {Array.<module:model/VulnerabilityReportVulnerabilityItem>} items
 */
VulnerabilityReportVulnerability.prototype['items'] = undefined;

/**
 * The timestamp for when the vulnerability was last modified.
 * @member {String} updateTime
 */
VulnerabilityReportVulnerability.prototype['updateTime'] = undefined;






export default VulnerabilityReportVulnerability;

