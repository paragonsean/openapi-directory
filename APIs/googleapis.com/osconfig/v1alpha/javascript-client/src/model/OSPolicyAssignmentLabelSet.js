/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OSPolicyAssignmentLabelSet model module.
 * @module model/OSPolicyAssignmentLabelSet
 * @version v1alpha
 */
class OSPolicyAssignmentLabelSet {
    /**
     * Constructs a new <code>OSPolicyAssignmentLabelSet</code>.
     * Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: &#x60;env&#x3D;prod&#x60; and &#x60;type&#x3D;webserver&#x60; will only be applicable for those VMs with both labels present.
     * @alias module:model/OSPolicyAssignmentLabelSet
     */
    constructor() { 
        
        OSPolicyAssignmentLabelSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicyAssignmentLabelSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicyAssignmentLabelSet} obj Optional instance to populate.
     * @return {module:model/OSPolicyAssignmentLabelSet} The populated <code>OSPolicyAssignmentLabelSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicyAssignmentLabelSet();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicyAssignmentLabelSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicyAssignmentLabelSet</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
 * @member {Object.<String, String>} labels
 */
OSPolicyAssignmentLabelSet.prototype['labels'] = undefined;






export default OSPolicyAssignmentLabelSet;

