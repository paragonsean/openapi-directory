/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OSPolicyInventoryFilter from './OSPolicyInventoryFilter';
import OSPolicyOSFilter from './OSPolicyOSFilter';
import OSPolicyResource from './OSPolicyResource';

/**
 * The OSPolicyResourceGroup model module.
 * @module model/OSPolicyResourceGroup
 * @version v1alpha
 */
class OSPolicyResourceGroup {
    /**
     * Constructs a new <code>OSPolicyResourceGroup</code>.
     * Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the &#x60;OSFilter&#x60; specified within the resource group.
     * @alias module:model/OSPolicyResourceGroup
     */
    constructor() { 
        
        OSPolicyResourceGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicyResourceGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicyResourceGroup} obj Optional instance to populate.
     * @return {module:model/OSPolicyResourceGroup} The populated <code>OSPolicyResourceGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicyResourceGroup();

            if (data.hasOwnProperty('inventoryFilters')) {
                obj['inventoryFilters'] = ApiClient.convertToType(data['inventoryFilters'], [OSPolicyInventoryFilter]);
            }
            if (data.hasOwnProperty('osFilter')) {
                obj['osFilter'] = OSPolicyOSFilter.constructFromObject(data['osFilter']);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [OSPolicyResource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicyResourceGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicyResourceGroup</code>.
     */
    static validateJSON(data) {
        if (data['inventoryFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inventoryFilters'])) {
                throw new Error("Expected the field `inventoryFilters` to be an array in the JSON data but got " + data['inventoryFilters']);
            }
            // validate the optional field `inventoryFilters` (array)
            for (const item of data['inventoryFilters']) {
                OSPolicyInventoryFilter.validateJSON(item);
            };
        }
        // validate the optional field `osFilter`
        if (data['osFilter']) { // data not null
          OSPolicyOSFilter.validateJSON(data['osFilter']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                OSPolicyResource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
 * @member {Array.<module:model/OSPolicyInventoryFilter>} inventoryFilters
 */
OSPolicyResourceGroup.prototype['inventoryFilters'] = undefined;

/**
 * @member {module:model/OSPolicyOSFilter} osFilter
 */
OSPolicyResourceGroup.prototype['osFilter'] = undefined;

/**
 * Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.
 * @member {Array.<module:model/OSPolicyResource>} resources
 */
OSPolicyResourceGroup.prototype['resources'] = undefined;






export default OSPolicyResourceGroup;

