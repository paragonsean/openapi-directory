/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InventoryItem from './InventoryItem';
import InventoryOsInfo from './InventoryOsInfo';

/**
 * The Inventory model module.
 * @module model/Inventory
 * @version v1alpha
 */
class Inventory {
    /**
     * Constructs a new <code>Inventory</code>.
     * This API resource represents the available inventory data for a Compute Engine virtual machine (VM) instance at a given point in time. You can use this API resource to determine the inventory data of your VM. For more information, see [Information provided by OS inventory management](https://cloud.google.com/compute/docs/instances/os-inventory-management#data-collected).
     * @alias module:model/Inventory
     */
    constructor() { 
        
        Inventory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Inventory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Inventory} obj Optional instance to populate.
     * @return {module:model/Inventory} The populated <code>Inventory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Inventory();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], {'String': InventoryItem});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osInfo')) {
                obj['osInfo'] = InventoryOsInfo.constructFromObject(data['osInfo']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Inventory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Inventory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `osInfo`
        if (data['osInfo']) { // data not null
          InventoryOsInfo.validateJSON(data['osInfo']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Inventory items related to the VM keyed by an opaque unique identifier for each inventory item. The identifier is unique to each distinct and addressable inventory item and will change, when there is a new package version.
 * @member {Object.<String, module:model/InventoryItem>} items
 */
Inventory.prototype['items'] = undefined;

/**
 * Output only. The `Inventory` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/inventory`
 * @member {String} name
 */
Inventory.prototype['name'] = undefined;

/**
 * @member {module:model/InventoryOsInfo} osInfo
 */
Inventory.prototype['osInfo'] = undefined;

/**
 * Output only. Timestamp of the last reported inventory for the VM.
 * @member {String} updateTime
 */
Inventory.prototype['updateTime'] = undefined;






export default Inventory;

