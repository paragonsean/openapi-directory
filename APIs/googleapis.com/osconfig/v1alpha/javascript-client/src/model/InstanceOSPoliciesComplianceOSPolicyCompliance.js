/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OSPolicyResourceCompliance from './OSPolicyResourceCompliance';

/**
 * The InstanceOSPoliciesComplianceOSPolicyCompliance model module.
 * @module model/InstanceOSPoliciesComplianceOSPolicyCompliance
 * @version v1alpha
 */
class InstanceOSPoliciesComplianceOSPolicyCompliance {
    /**
     * Constructs a new <code>InstanceOSPoliciesComplianceOSPolicyCompliance</code>.
     * Compliance data for an OS policy
     * @alias module:model/InstanceOSPoliciesComplianceOSPolicyCompliance
     */
    constructor() { 
        
        InstanceOSPoliciesComplianceOSPolicyCompliance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceOSPoliciesComplianceOSPolicyCompliance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceOSPoliciesComplianceOSPolicyCompliance} obj Optional instance to populate.
     * @return {module:model/InstanceOSPoliciesComplianceOSPolicyCompliance} The populated <code>InstanceOSPoliciesComplianceOSPolicyCompliance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceOSPoliciesComplianceOSPolicyCompliance();

            if (data.hasOwnProperty('osPolicyAssignment')) {
                obj['osPolicyAssignment'] = ApiClient.convertToType(data['osPolicyAssignment'], 'String');
            }
            if (data.hasOwnProperty('osPolicyId')) {
                obj['osPolicyId'] = ApiClient.convertToType(data['osPolicyId'], 'String');
            }
            if (data.hasOwnProperty('osPolicyResourceCompliances')) {
                obj['osPolicyResourceCompliances'] = ApiClient.convertToType(data['osPolicyResourceCompliances'], [OSPolicyResourceCompliance]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceOSPoliciesComplianceOSPolicyCompliance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceOSPoliciesComplianceOSPolicyCompliance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['osPolicyAssignment'] && !(typeof data['osPolicyAssignment'] === 'string' || data['osPolicyAssignment'] instanceof String)) {
            throw new Error("Expected the field `osPolicyAssignment` to be a primitive type in the JSON string but got " + data['osPolicyAssignment']);
        }
        // ensure the json data is a string
        if (data['osPolicyId'] && !(typeof data['osPolicyId'] === 'string' || data['osPolicyId'] instanceof String)) {
            throw new Error("Expected the field `osPolicyId` to be a primitive type in the JSON string but got " + data['osPolicyId']);
        }
        if (data['osPolicyResourceCompliances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osPolicyResourceCompliances'])) {
                throw new Error("Expected the field `osPolicyResourceCompliances` to be an array in the JSON data but got " + data['osPolicyResourceCompliances']);
            }
            // validate the optional field `osPolicyResourceCompliances` (array)
            for (const item of data['osPolicyResourceCompliances']) {
                OSPolicyResourceCompliance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
 * @member {String} osPolicyAssignment
 */
InstanceOSPoliciesComplianceOSPolicyCompliance.prototype['osPolicyAssignment'] = undefined;

/**
 * The OS policy id
 * @member {String} osPolicyId
 */
InstanceOSPoliciesComplianceOSPolicyCompliance.prototype['osPolicyId'] = undefined;

/**
 * Compliance data for each `OSPolicyResource` that is applied to the VM.
 * @member {Array.<module:model/OSPolicyResourceCompliance>} osPolicyResourceCompliances
 */
InstanceOSPoliciesComplianceOSPolicyCompliance.prototype['osPolicyResourceCompliances'] = undefined;

/**
 * Compliance state of the OS policy.
 * @member {module:model/InstanceOSPoliciesComplianceOSPolicyCompliance.StateEnum} state
 */
InstanceOSPoliciesComplianceOSPolicyCompliance.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
InstanceOSPoliciesComplianceOSPolicyCompliance['StateEnum'] = {

    /**
     * value: "OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED"
     * @const
     */
    "OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED": "OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED",

    /**
     * value: "COMPLIANT"
     * @const
     */
    "COMPLIANT": "COMPLIANT",

    /**
     * value: "NON_COMPLIANT"
     * @const
     */
    "NON_COMPLIANT": "NON_COMPLIANT",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "NO_OS_POLICIES_APPLICABLE"
     * @const
     */
    "NO_OS_POLICIES_APPLICABLE": "NO_OS_POLICIES_APPLICABLE"
};



export default InstanceOSPoliciesComplianceOSPolicyCompliance;

