/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceOSPoliciesComplianceOSPolicyCompliance from './InstanceOSPoliciesComplianceOSPolicyCompliance';

/**
 * The InstanceOSPoliciesCompliance model module.
 * @module model/InstanceOSPoliciesCompliance
 * @version v1alpha
 */
class InstanceOSPoliciesCompliance {
    /**
     * Constructs a new <code>InstanceOSPoliciesCompliance</code>.
     * This API resource represents the OS policies compliance data for a Compute Engine virtual machine (VM) instance at a given point in time. A Compute Engine VM can have multiple OS policy assignments, and each assignment can have multiple OS policies. As a result, multiple OS policies could be applied to a single VM. You can use this API resource to determine both the compliance state of your VM as well as the compliance state of an individual OS policy. For more information, see [View compliance](https://cloud.google.com/compute/docs/os-configuration-management/view-compliance).
     * @alias module:model/InstanceOSPoliciesCompliance
     */
    constructor() { 
        
        InstanceOSPoliciesCompliance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceOSPoliciesCompliance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceOSPoliciesCompliance} obj Optional instance to populate.
     * @return {module:model/InstanceOSPoliciesCompliance} The populated <code>InstanceOSPoliciesCompliance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceOSPoliciesCompliance();

            if (data.hasOwnProperty('detailedState')) {
                obj['detailedState'] = ApiClient.convertToType(data['detailedState'], 'String');
            }
            if (data.hasOwnProperty('detailedStateReason')) {
                obj['detailedStateReason'] = ApiClient.convertToType(data['detailedStateReason'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('lastComplianceCheckTime')) {
                obj['lastComplianceCheckTime'] = ApiClient.convertToType(data['lastComplianceCheckTime'], 'String');
            }
            if (data.hasOwnProperty('lastComplianceRunId')) {
                obj['lastComplianceRunId'] = ApiClient.convertToType(data['lastComplianceRunId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('osPolicyCompliances')) {
                obj['osPolicyCompliances'] = ApiClient.convertToType(data['osPolicyCompliances'], [InstanceOSPoliciesComplianceOSPolicyCompliance]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceOSPoliciesCompliance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceOSPoliciesCompliance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['detailedState'] && !(typeof data['detailedState'] === 'string' || data['detailedState'] instanceof String)) {
            throw new Error("Expected the field `detailedState` to be a primitive type in the JSON string but got " + data['detailedState']);
        }
        // ensure the json data is a string
        if (data['detailedStateReason'] && !(typeof data['detailedStateReason'] === 'string' || data['detailedStateReason'] instanceof String)) {
            throw new Error("Expected the field `detailedStateReason` to be a primitive type in the JSON string but got " + data['detailedStateReason']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['lastComplianceCheckTime'] && !(typeof data['lastComplianceCheckTime'] === 'string' || data['lastComplianceCheckTime'] instanceof String)) {
            throw new Error("Expected the field `lastComplianceCheckTime` to be a primitive type in the JSON string but got " + data['lastComplianceCheckTime']);
        }
        // ensure the json data is a string
        if (data['lastComplianceRunId'] && !(typeof data['lastComplianceRunId'] === 'string' || data['lastComplianceRunId'] instanceof String)) {
            throw new Error("Expected the field `lastComplianceRunId` to be a primitive type in the JSON string but got " + data['lastComplianceRunId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['osPolicyCompliances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osPolicyCompliances'])) {
                throw new Error("Expected the field `osPolicyCompliances` to be an array in the JSON data but got " + data['osPolicyCompliances']);
            }
            // validate the optional field `osPolicyCompliances` (array)
            for (const item of data['osPolicyCompliances']) {
                InstanceOSPoliciesComplianceOSPolicyCompliance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Detailed compliance state of the VM. This field is populated only when compliance state is `UNKNOWN`. It may contain one of the following values: * `no-compliance-data`: Compliance data is not available for this VM. * `no-agent-detected`: OS Config agent is not detected for this VM. * `config-not-supported-by-agent`: The version of the OS Config agent running on this VM does not support configuration management. * `inactive`: VM is not running. * `internal-service-errors`: There were internal service errors encountered while enforcing compliance. * `agent-errors`: OS config agent encountered errors while enforcing compliance.
 * @member {String} detailedState
 */
InstanceOSPoliciesCompliance.prototype['detailedState'] = undefined;

/**
 * Output only. The reason for the `detailed_state` of the VM (if any).
 * @member {String} detailedStateReason
 */
InstanceOSPoliciesCompliance.prototype['detailedStateReason'] = undefined;

/**
 * Output only. The Compute Engine VM instance name.
 * @member {String} instance
 */
InstanceOSPoliciesCompliance.prototype['instance'] = undefined;

/**
 * Output only. Timestamp of the last compliance check for the VM.
 * @member {String} lastComplianceCheckTime
 */
InstanceOSPoliciesCompliance.prototype['lastComplianceCheckTime'] = undefined;

/**
 * Output only. Unique identifier for the last compliance run. This id will be logged by the OS config agent during a compliance run and can be used for debugging and tracing purpose.
 * @member {String} lastComplianceRunId
 */
InstanceOSPoliciesCompliance.prototype['lastComplianceRunId'] = undefined;

/**
 * Output only. The `InstanceOSPoliciesCompliance` API resource name. Format: `projects/{project_number}/locations/{location}/instanceOSPoliciesCompliances/{instance_id}`
 * @member {String} name
 */
InstanceOSPoliciesCompliance.prototype['name'] = undefined;

/**
 * Output only. Compliance data for each `OSPolicy` that is applied to the VM.
 * @member {Array.<module:model/InstanceOSPoliciesComplianceOSPolicyCompliance>} osPolicyCompliances
 */
InstanceOSPoliciesCompliance.prototype['osPolicyCompliances'] = undefined;

/**
 * Output only. Compliance state of the VM.
 * @member {module:model/InstanceOSPoliciesCompliance.StateEnum} state
 */
InstanceOSPoliciesCompliance.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
InstanceOSPoliciesCompliance['StateEnum'] = {

    /**
     * value: "OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED"
     * @const
     */
    "OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED": "OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED",

    /**
     * value: "COMPLIANT"
     * @const
     */
    "COMPLIANT": "COMPLIANT",

    /**
     * value: "NON_COMPLIANT"
     * @const
     */
    "NON_COMPLIANT": "NON_COMPLIANT",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "NO_OS_POLICIES_APPLICABLE"
     * @const
     */
    "NO_OS_POLICIES_APPLICABLE": "NO_OS_POLICIES_APPLICABLE"
};



export default InstanceOSPoliciesCompliance;

