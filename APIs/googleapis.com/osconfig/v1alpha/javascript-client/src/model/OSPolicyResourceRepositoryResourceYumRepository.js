/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OSPolicyResourceRepositoryResourceYumRepository model module.
 * @module model/OSPolicyResourceRepositoryResourceYumRepository
 * @version v1alpha
 */
class OSPolicyResourceRepositoryResourceYumRepository {
    /**
     * Constructs a new <code>OSPolicyResourceRepositoryResourceYumRepository</code>.
     * Represents a single yum package repository. These are added to a repo file that is managed at &#x60;/etc/yum.repos.d/google_osconfig.repo&#x60;.
     * @alias module:model/OSPolicyResourceRepositoryResourceYumRepository
     */
    constructor() { 
        
        OSPolicyResourceRepositoryResourceYumRepository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OSPolicyResourceRepositoryResourceYumRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSPolicyResourceRepositoryResourceYumRepository} obj Optional instance to populate.
     * @return {module:model/OSPolicyResourceRepositoryResourceYumRepository} The populated <code>OSPolicyResourceRepositoryResourceYumRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSPolicyResourceRepositoryResourceYumRepository();

            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('gpgKeys')) {
                obj['gpgKeys'] = ApiClient.convertToType(data['gpgKeys'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSPolicyResourceRepositoryResourceYumRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSPolicyResourceRepositoryResourceYumRepository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gpgKeys'])) {
            throw new Error("Expected the field `gpgKeys` to be an array in the JSON data but got " + data['gpgKeys']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * Required. The location of the repository directory.
 * @member {String} baseUrl
 */
OSPolicyResourceRepositoryResourceYumRepository.prototype['baseUrl'] = undefined;

/**
 * The display name of the repository.
 * @member {String} displayName
 */
OSPolicyResourceRepositoryResourceYumRepository.prototype['displayName'] = undefined;

/**
 * URIs of GPG keys.
 * @member {Array.<String>} gpgKeys
 */
OSPolicyResourceRepositoryResourceYumRepository.prototype['gpgKeys'] = undefined;

/**
 * Required. A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
 * @member {String} id
 */
OSPolicyResourceRepositoryResourceYumRepository.prototype['id'] = undefined;






export default OSPolicyResourceRepositoryResourceYumRepository;

