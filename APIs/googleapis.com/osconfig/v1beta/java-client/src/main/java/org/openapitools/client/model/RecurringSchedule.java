/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MonthlySchedule;
import org.openapitools.client.model.TimeOfDay;
import org.openapitools.client.model.TimeZone;
import org.openapitools.client.model.WeeklySchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sets the time for recurring patch deployments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecurringSchedule {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  /**
   * Required. The frequency unit of this recurring schedule.
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    FREQUENCY_UNSPECIFIED("FREQUENCY_UNSPECIFIED"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY"),
    
    DAILY("DAILY");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_LAST_EXECUTE_TIME = "lastExecuteTime";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTE_TIME)
  private String lastExecuteTime;

  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private MonthlySchedule monthly;

  public static final String SERIALIZED_NAME_NEXT_EXECUTE_TIME = "nextExecuteTime";
  @SerializedName(SERIALIZED_NAME_NEXT_EXECUTE_TIME)
  private String nextExecuteTime;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TIME_OF_DAY = "timeOfDay";
  @SerializedName(SERIALIZED_NAME_TIME_OF_DAY)
  private TimeOfDay timeOfDay;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private TimeZone timeZone;

  public static final String SERIALIZED_NAME_WEEKLY = "weekly";
  @SerializedName(SERIALIZED_NAME_WEEKLY)
  private WeeklySchedule weekly;

  public RecurringSchedule() {
  }

  public RecurringSchedule(
     String lastExecuteTime, 
     String nextExecuteTime
  ) {
    this();
    this.lastExecuteTime = lastExecuteTime;
    this.nextExecuteTime = nextExecuteTime;
  }

  public RecurringSchedule endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Optional. The end time at which a recurring patch deployment schedule is no longer active.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public RecurringSchedule frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Required. The frequency unit of this recurring schedule.
   * @return frequency
   */
  @javax.annotation.Nullable
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  /**
   * Output only. The time the last patch job ran successfully.
   * @return lastExecuteTime
   */
  @javax.annotation.Nullable
  public String getLastExecuteTime() {
    return lastExecuteTime;
  }



  public RecurringSchedule monthly(MonthlySchedule monthly) {
    this.monthly = monthly;
    return this;
  }

  /**
   * Get monthly
   * @return monthly
   */
  @javax.annotation.Nullable
  public MonthlySchedule getMonthly() {
    return monthly;
  }

  public void setMonthly(MonthlySchedule monthly) {
    this.monthly = monthly;
  }


  /**
   * Output only. The time the next patch job is scheduled to run.
   * @return nextExecuteTime
   */
  @javax.annotation.Nullable
  public String getNextExecuteTime() {
    return nextExecuteTime;
  }



  public RecurringSchedule startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Optional. The time that the recurring schedule becomes effective. Defaults to &#x60;create_time&#x60; of the patch deployment.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public RecurringSchedule timeOfDay(TimeOfDay timeOfDay) {
    this.timeOfDay = timeOfDay;
    return this;
  }

  /**
   * Get timeOfDay
   * @return timeOfDay
   */
  @javax.annotation.Nullable
  public TimeOfDay getTimeOfDay() {
    return timeOfDay;
  }

  public void setTimeOfDay(TimeOfDay timeOfDay) {
    this.timeOfDay = timeOfDay;
  }


  public RecurringSchedule timeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public TimeZone getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
  }


  public RecurringSchedule weekly(WeeklySchedule weekly) {
    this.weekly = weekly;
    return this;
  }

  /**
   * Get weekly
   * @return weekly
   */
  @javax.annotation.Nullable
  public WeeklySchedule getWeekly() {
    return weekly;
  }

  public void setWeekly(WeeklySchedule weekly) {
    this.weekly = weekly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringSchedule recurringSchedule = (RecurringSchedule) o;
    return Objects.equals(this.endTime, recurringSchedule.endTime) &&
        Objects.equals(this.frequency, recurringSchedule.frequency) &&
        Objects.equals(this.lastExecuteTime, recurringSchedule.lastExecuteTime) &&
        Objects.equals(this.monthly, recurringSchedule.monthly) &&
        Objects.equals(this.nextExecuteTime, recurringSchedule.nextExecuteTime) &&
        Objects.equals(this.startTime, recurringSchedule.startTime) &&
        Objects.equals(this.timeOfDay, recurringSchedule.timeOfDay) &&
        Objects.equals(this.timeZone, recurringSchedule.timeZone) &&
        Objects.equals(this.weekly, recurringSchedule.weekly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, frequency, lastExecuteTime, monthly, nextExecuteTime, startTime, timeOfDay, timeZone, weekly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringSchedule {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    lastExecuteTime: ").append(toIndentedString(lastExecuteTime)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    nextExecuteTime: ").append(toIndentedString(nextExecuteTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timeOfDay: ").append(toIndentedString(timeOfDay)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    weekly: ").append(toIndentedString(weekly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("frequency");
    openapiFields.add("lastExecuteTime");
    openapiFields.add("monthly");
    openapiFields.add("nextExecuteTime");
    openapiFields.add("startTime");
    openapiFields.add("timeOfDay");
    openapiFields.add("timeZone");
    openapiFields.add("weekly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecurringSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecurringSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurringSchedule is not found in the empty JSON string", RecurringSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecurringSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecurringSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("lastExecuteTime") != null && !jsonObj.get("lastExecuteTime").isJsonNull()) && !jsonObj.get("lastExecuteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastExecuteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastExecuteTime").toString()));
      }
      // validate the optional field `monthly`
      if (jsonObj.get("monthly") != null && !jsonObj.get("monthly").isJsonNull()) {
        MonthlySchedule.validateJsonElement(jsonObj.get("monthly"));
      }
      if ((jsonObj.get("nextExecuteTime") != null && !jsonObj.get("nextExecuteTime").isJsonNull()) && !jsonObj.get("nextExecuteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextExecuteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextExecuteTime").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      // validate the optional field `timeOfDay`
      if (jsonObj.get("timeOfDay") != null && !jsonObj.get("timeOfDay").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("timeOfDay"));
      }
      // validate the optional field `timeZone`
      if (jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) {
        TimeZone.validateJsonElement(jsonObj.get("timeZone"));
      }
      // validate the optional field `weekly`
      if (jsonObj.get("weekly") != null && !jsonObj.get("weekly").isJsonNull()) {
        WeeklySchedule.validateJsonElement(jsonObj.get("weekly"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurringSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurringSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurringSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurringSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurringSchedule>() {
           @Override
           public void write(JsonWriter out, RecurringSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurringSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecurringSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecurringSchedule
   * @throws IOException if the JSON string is invalid with respect to RecurringSchedule
   */
  public static RecurringSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurringSchedule.class);
  }

  /**
   * Convert an instance of RecurringSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

