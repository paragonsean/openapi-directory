/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.ModelPackage;
import org.openapitools.client.model.PackageRepository;
import org.openapitools.client.model.SoftwareRecipe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An OS Config resource representing a guest configuration policy. These policies represent the desired state for VM instance guest environments including packages to install or remove, package repository configurations, and software to install.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuestPolicy {
  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private Assignment assignment;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGE_REPOSITORIES = "packageRepositories";
  @SerializedName(SERIALIZED_NAME_PACKAGE_REPOSITORIES)
  private List<PackageRepository> packageRepositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<ModelPackage> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPES = "recipes";
  @SerializedName(SERIALIZED_NAME_RECIPES)
  private List<SoftwareRecipe> recipes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GuestPolicy() {
  }

  public GuestPolicy(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public GuestPolicy assignment(Assignment assignment) {
    this.assignment = assignment;
    return this;
  }

  /**
   * Get assignment
   * @return assignment
   */
  @javax.annotation.Nullable
  public Assignment getAssignment() {
    return assignment;
  }

  public void setAssignment(Assignment assignment) {
    this.assignment = assignment;
  }


  /**
   * Output only. Time this guest policy was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GuestPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the guest policy. Length of the description is limited to 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GuestPolicy etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The etag for this guest policy. If this is provided on update, it must match the server&#39;s etag.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public GuestPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Unique name of the resource in this project using one of the following forms: &#x60;projects/{project_number}/guestPolicies/{guest_policy_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GuestPolicy packageRepositories(List<PackageRepository> packageRepositories) {
    this.packageRepositories = packageRepositories;
    return this;
  }

  public GuestPolicy addPackageRepositoriesItem(PackageRepository packageRepositoriesItem) {
    if (this.packageRepositories == null) {
      this.packageRepositories = new ArrayList<>();
    }
    this.packageRepositories.add(packageRepositoriesItem);
    return this;
  }

  /**
   * A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
   * @return packageRepositories
   */
  @javax.annotation.Nullable
  public List<PackageRepository> getPackageRepositories() {
    return packageRepositories;
  }

  public void setPackageRepositories(List<PackageRepository> packageRepositories) {
    this.packageRepositories = packageRepositories;
  }


  public GuestPolicy packages(List<ModelPackage> packages) {
    this.packages = packages;
    return this;
  }

  public GuestPolicy addPackagesItem(ModelPackage packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * The software packages to be managed by this policy.
   * @return packages
   */
  @javax.annotation.Nullable
  public List<ModelPackage> getPackages() {
    return packages;
  }

  public void setPackages(List<ModelPackage> packages) {
    this.packages = packages;
  }


  public GuestPolicy recipes(List<SoftwareRecipe> recipes) {
    this.recipes = recipes;
    return this;
  }

  public GuestPolicy addRecipesItem(SoftwareRecipe recipesItem) {
    if (this.recipes == null) {
      this.recipes = new ArrayList<>();
    }
    this.recipes.add(recipesItem);
    return this;
  }

  /**
   * A list of Recipes to install on the VM instance.
   * @return recipes
   */
  @javax.annotation.Nullable
  public List<SoftwareRecipe> getRecipes() {
    return recipes;
  }

  public void setRecipes(List<SoftwareRecipe> recipes) {
    this.recipes = recipes;
  }


  /**
   * Output only. Last time this guest policy was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuestPolicy guestPolicy = (GuestPolicy) o;
    return Objects.equals(this.assignment, guestPolicy.assignment) &&
        Objects.equals(this.createTime, guestPolicy.createTime) &&
        Objects.equals(this.description, guestPolicy.description) &&
        Objects.equals(this.etag, guestPolicy.etag) &&
        Objects.equals(this.name, guestPolicy.name) &&
        Objects.equals(this.packageRepositories, guestPolicy.packageRepositories) &&
        Objects.equals(this.packages, guestPolicy.packages) &&
        Objects.equals(this.recipes, guestPolicy.recipes) &&
        Objects.equals(this.updateTime, guestPolicy.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignment, createTime, description, etag, name, packageRepositories, packages, recipes, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuestPolicy {\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packageRepositories: ").append(toIndentedString(packageRepositories)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    recipes: ").append(toIndentedString(recipes)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignment");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("name");
    openapiFields.add("packageRepositories");
    openapiFields.add("packages");
    openapiFields.add("recipes");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuestPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuestPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuestPolicy is not found in the empty JSON string", GuestPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuestPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuestPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignment`
      if (jsonObj.get("assignment") != null && !jsonObj.get("assignment").isJsonNull()) {
        Assignment.validateJsonElement(jsonObj.get("assignment"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("packageRepositories") != null && !jsonObj.get("packageRepositories").isJsonNull()) {
        JsonArray jsonArraypackageRepositories = jsonObj.getAsJsonArray("packageRepositories");
        if (jsonArraypackageRepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packageRepositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packageRepositories` to be an array in the JSON string but got `%s`", jsonObj.get("packageRepositories").toString()));
          }

          // validate the optional field `packageRepositories` (array)
          for (int i = 0; i < jsonArraypackageRepositories.size(); i++) {
            PackageRepository.validateJsonElement(jsonArraypackageRepositories.get(i));
          };
        }
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            ModelPackage.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if (jsonObj.get("recipes") != null && !jsonObj.get("recipes").isJsonNull()) {
        JsonArray jsonArrayrecipes = jsonObj.getAsJsonArray("recipes");
        if (jsonArrayrecipes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipes` to be an array in the JSON string but got `%s`", jsonObj.get("recipes").toString()));
          }

          // validate the optional field `recipes` (array)
          for (int i = 0; i < jsonArrayrecipes.size(); i++) {
            SoftwareRecipe.validateJsonElement(jsonArrayrecipes.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuestPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuestPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuestPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuestPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GuestPolicy>() {
           @Override
           public void write(JsonWriter out, GuestPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuestPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuestPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuestPolicy
   * @throws IOException if the JSON string is invalid with respect to GuestPolicy
   */
  public static GuestPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuestPolicy.class);
  }

  /**
   * Convert an instance of GuestPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

