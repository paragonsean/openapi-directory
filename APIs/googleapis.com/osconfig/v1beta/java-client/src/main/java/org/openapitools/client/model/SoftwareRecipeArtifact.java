/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SoftwareRecipeArtifactGcs;
import org.openapitools.client.model.SoftwareRecipeArtifactRemote;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a resource to be used in the recipe.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoftwareRecipeArtifact {
  public static final String SERIALIZED_NAME_ALLOW_INSECURE = "allowInsecure";
  @SerializedName(SERIALIZED_NAME_ALLOW_INSECURE)
  private Boolean allowInsecure;

  public static final String SERIALIZED_NAME_GCS = "gcs";
  @SerializedName(SERIALIZED_NAME_GCS)
  private SoftwareRecipeArtifactGcs gcs;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REMOTE = "remote";
  @SerializedName(SERIALIZED_NAME_REMOTE)
  private SoftwareRecipeArtifactRemote remote;

  public SoftwareRecipeArtifact() {
  }

  public SoftwareRecipeArtifact allowInsecure(Boolean allowInsecure) {
    this.allowInsecure = allowInsecure;
    return this;
  }

  /**
   * Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.
   * @return allowInsecure
   */
  @javax.annotation.Nullable
  public Boolean getAllowInsecure() {
    return allowInsecure;
  }

  public void setAllowInsecure(Boolean allowInsecure) {
    this.allowInsecure = allowInsecure;
  }


  public SoftwareRecipeArtifact gcs(SoftwareRecipeArtifactGcs gcs) {
    this.gcs = gcs;
    return this;
  }

  /**
   * Get gcs
   * @return gcs
   */
  @javax.annotation.Nullable
  public SoftwareRecipeArtifactGcs getGcs() {
    return gcs;
  }

  public void setGcs(SoftwareRecipeArtifactGcs gcs) {
    this.gcs = gcs;
  }


  public SoftwareRecipeArtifact id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SoftwareRecipeArtifact remote(SoftwareRecipeArtifactRemote remote) {
    this.remote = remote;
    return this;
  }

  /**
   * Get remote
   * @return remote
   */
  @javax.annotation.Nullable
  public SoftwareRecipeArtifactRemote getRemote() {
    return remote;
  }

  public void setRemote(SoftwareRecipeArtifactRemote remote) {
    this.remote = remote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareRecipeArtifact softwareRecipeArtifact = (SoftwareRecipeArtifact) o;
    return Objects.equals(this.allowInsecure, softwareRecipeArtifact.allowInsecure) &&
        Objects.equals(this.gcs, softwareRecipeArtifact.gcs) &&
        Objects.equals(this.id, softwareRecipeArtifact.id) &&
        Objects.equals(this.remote, softwareRecipeArtifact.remote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowInsecure, gcs, id, remote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareRecipeArtifact {\n");
    sb.append("    allowInsecure: ").append(toIndentedString(allowInsecure)).append("\n");
    sb.append("    gcs: ").append(toIndentedString(gcs)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowInsecure");
    openapiFields.add("gcs");
    openapiFields.add("id");
    openapiFields.add("remote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoftwareRecipeArtifact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareRecipeArtifact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareRecipeArtifact is not found in the empty JSON string", SoftwareRecipeArtifact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareRecipeArtifact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareRecipeArtifact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gcs`
      if (jsonObj.get("gcs") != null && !jsonObj.get("gcs").isJsonNull()) {
        SoftwareRecipeArtifactGcs.validateJsonElement(jsonObj.get("gcs"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `remote`
      if (jsonObj.get("remote") != null && !jsonObj.get("remote").isJsonNull()) {
        SoftwareRecipeArtifactRemote.validateJsonElement(jsonObj.get("remote"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareRecipeArtifact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareRecipeArtifact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareRecipeArtifact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareRecipeArtifact.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareRecipeArtifact>() {
           @Override
           public void write(JsonWriter out, SoftwareRecipeArtifact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareRecipeArtifact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoftwareRecipeArtifact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoftwareRecipeArtifact
   * @throws IOException if the JSON string is invalid with respect to SoftwareRecipeArtifact
   */
  public static SoftwareRecipeArtifact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareRecipeArtifact.class);
  }

  /**
   * Convert an instance of SoftwareRecipeArtifact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

