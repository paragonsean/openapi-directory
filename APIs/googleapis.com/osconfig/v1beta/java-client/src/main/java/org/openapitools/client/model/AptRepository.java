/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single Apt package repository. This repository is added to a repo file that is stored at &#x60;/etc/apt/sources.list.d/google_osconfig.list&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AptRepository {
  /**
   * Type of archive files in this repository. The default behavior is DEB.
   */
  @JsonAdapter(ArchiveTypeEnum.Adapter.class)
  public enum ArchiveTypeEnum {
    ARCHIVE_TYPE_UNSPECIFIED("ARCHIVE_TYPE_UNSPECIFIED"),
    
    DEB("DEB"),
    
    DEB_SRC("DEB_SRC");

    private String value;

    ArchiveTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArchiveTypeEnum fromValue(String value) {
      for (ArchiveTypeEnum b : ArchiveTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArchiveTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArchiveTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArchiveTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArchiveTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArchiveTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ARCHIVE_TYPE = "archiveType";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_TYPE)
  private ArchiveTypeEnum archiveType;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<String> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRIBUTION = "distribution";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION)
  private String distribution;

  public static final String SERIALIZED_NAME_GPG_KEY = "gpgKey";
  @SerializedName(SERIALIZED_NAME_GPG_KEY)
  private String gpgKey;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public AptRepository() {
  }

  public AptRepository archiveType(ArchiveTypeEnum archiveType) {
    this.archiveType = archiveType;
    return this;
  }

  /**
   * Type of archive files in this repository. The default behavior is DEB.
   * @return archiveType
   */
  @javax.annotation.Nullable
  public ArchiveTypeEnum getArchiveType() {
    return archiveType;
  }

  public void setArchiveType(ArchiveTypeEnum archiveType) {
    this.archiveType = archiveType;
  }


  public AptRepository components(List<String> components) {
    this.components = components;
    return this;
  }

  public AptRepository addComponentsItem(String componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Required. List of components for this repository. Must contain at least one item.
   * @return components
   */
  @javax.annotation.Nullable
  public List<String> getComponents() {
    return components;
  }

  public void setComponents(List<String> components) {
    this.components = components;
  }


  public AptRepository distribution(String distribution) {
    this.distribution = distribution;
    return this;
  }

  /**
   * Required. Distribution of this repository.
   * @return distribution
   */
  @javax.annotation.Nullable
  public String getDistribution() {
    return distribution;
  }

  public void setDistribution(String distribution) {
    this.distribution = distribution;
  }


  public AptRepository gpgKey(String gpgKey) {
    this.gpgKey = gpgKey;
    return this;
  }

  /**
   * URI of the key file for this repository. The agent maintains a keyring at &#x60;/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg&#x60; containing all the keys in any applied guest policy.
   * @return gpgKey
   */
  @javax.annotation.Nullable
  public String getGpgKey() {
    return gpgKey;
  }

  public void setGpgKey(String gpgKey) {
    this.gpgKey = gpgKey;
  }


  public AptRepository uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Required. URI for this repository.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AptRepository aptRepository = (AptRepository) o;
    return Objects.equals(this.archiveType, aptRepository.archiveType) &&
        Objects.equals(this.components, aptRepository.components) &&
        Objects.equals(this.distribution, aptRepository.distribution) &&
        Objects.equals(this.gpgKey, aptRepository.gpgKey) &&
        Objects.equals(this.uri, aptRepository.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveType, components, distribution, gpgKey, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AptRepository {\n");
    sb.append("    archiveType: ").append(toIndentedString(archiveType)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    gpgKey: ").append(toIndentedString(gpgKey)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveType");
    openapiFields.add("components");
    openapiFields.add("distribution");
    openapiFields.add("gpgKey");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AptRepository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AptRepository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AptRepository is not found in the empty JSON string", AptRepository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AptRepository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AptRepository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("archiveType") != null && !jsonObj.get("archiveType").isJsonNull()) && !jsonObj.get("archiveType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiveType").toString()));
      }
      // validate the optional field `archiveType`
      if (jsonObj.get("archiveType") != null && !jsonObj.get("archiveType").isJsonNull()) {
        ArchiveTypeEnum.validateJsonElement(jsonObj.get("archiveType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull() && !jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }
      if ((jsonObj.get("distribution") != null && !jsonObj.get("distribution").isJsonNull()) && !jsonObj.get("distribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distribution").toString()));
      }
      if ((jsonObj.get("gpgKey") != null && !jsonObj.get("gpgKey").isJsonNull()) && !jsonObj.get("gpgKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpgKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpgKey").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AptRepository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AptRepository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AptRepository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AptRepository.class));

       return (TypeAdapter<T>) new TypeAdapter<AptRepository>() {
           @Override
           public void write(JsonWriter out, AptRepository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AptRepository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AptRepository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AptRepository
   * @throws IOException if the JSON string is invalid with respect to AptRepository
   */
  public static AptRepository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AptRepository.class);
  }

  /**
   * Convert an instance of AptRepository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

