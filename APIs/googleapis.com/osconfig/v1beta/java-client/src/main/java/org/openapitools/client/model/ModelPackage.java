/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Package is a reference to the software package to be installed or removed. The agent on the VM instance uses the system package manager to apply the config. These are the commands that the agent uses to install or remove packages. Apt install: &#x60;apt-get update &amp;&amp; apt-get -y install package1 package2 package3&#x60; remove: &#x60;apt-get -y remove package1 package2 package3&#x60; Yum install: &#x60;yum -y install package1 package2 package3&#x60; remove: &#x60;yum -y remove package1 package2 package3&#x60; Zypper install: &#x60;zypper install package1 package2 package3&#x60; remove: &#x60;zypper rm package1 package2&#x60; Googet install: &#x60;googet -noconfirm install package1 package2 package3&#x60; remove: &#x60;googet -noconfirm remove package1 package2 package3&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelPackage {
  /**
   * The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
   */
  @JsonAdapter(DesiredStateEnum.Adapter.class)
  public enum DesiredStateEnum {
    DESIRED_STATE_UNSPECIFIED("DESIRED_STATE_UNSPECIFIED"),
    
    INSTALLED("INSTALLED"),
    
    UPDATED("UPDATED"),
    
    REMOVED("REMOVED");

    private String value;

    DesiredStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredStateEnum fromValue(String value) {
      for (DesiredStateEnum b : DesiredStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DesiredStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DesiredStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DesiredStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESIRED_STATE = "desiredState";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  private DesiredStateEnum desiredState;

  /**
   * Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify &#x60;ANY&#x60;, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
   */
  @JsonAdapter(ManagerEnum.Adapter.class)
  public enum ManagerEnum {
    MANAGER_UNSPECIFIED("MANAGER_UNSPECIFIED"),
    
    ANY("ANY"),
    
    APT("APT"),
    
    YUM("YUM"),
    
    ZYPPER("ZYPPER"),
    
    GOO("GOO");

    private String value;

    ManagerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagerEnum fromValue(String value) {
      for (ManagerEnum b : ManagerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private ManagerEnum manager;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ModelPackage() {
  }

  public ModelPackage desiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
   * @return desiredState
   */
  @javax.annotation.Nullable
  public DesiredStateEnum getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(DesiredStateEnum desiredState) {
    this.desiredState = desiredState;
  }


  public ModelPackage manager(ManagerEnum manager) {
    this.manager = manager;
    return this;
  }

  /**
   * Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify &#x60;ANY&#x60;, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
   * @return manager
   */
  @javax.annotation.Nullable
  public ManagerEnum getManager() {
    return manager;
  }

  public void setManager(ManagerEnum manager) {
    this.manager = manager;
  }


  public ModelPackage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPackage _package = (ModelPackage) o;
    return Objects.equals(this.desiredState, _package.desiredState) &&
        Objects.equals(this.manager, _package.manager) &&
        Objects.equals(this.name, _package.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(desiredState, manager, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPackage {\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("desiredState");
    openapiFields.add("manager");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelPackage is not found in the empty JSON string", ModelPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) && !jsonObj.get("desiredState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desiredState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desiredState").toString()));
      }
      // validate the optional field `desiredState`
      if (jsonObj.get("desiredState") != null && !jsonObj.get("desiredState").isJsonNull()) {
        DesiredStateEnum.validateJsonElement(jsonObj.get("desiredState"));
      }
      if ((jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) && !jsonObj.get("manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager").toString()));
      }
      // validate the optional field `manager`
      if (jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) {
        ManagerEnum.validateJsonElement(jsonObj.get("manager"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelPackage>() {
           @Override
           public void write(JsonWriter out, ModelPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelPackage
   * @throws IOException if the JSON string is invalid with respect to ModelPackage
   */
  public static ModelPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelPackage.class);
  }

  /**
   * Convert an instance of ModelPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

