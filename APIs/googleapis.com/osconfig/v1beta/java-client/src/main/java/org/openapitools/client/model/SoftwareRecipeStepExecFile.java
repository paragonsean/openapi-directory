/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Executes an artifact or local file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoftwareRecipeStepExecFile {
  public static final String SERIALIZED_NAME_ALLOWED_EXIT_CODES = "allowedExitCodes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXIT_CODES)
  private List<Integer> allowedExitCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private List<String> args = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIFACT_ID = "artifactId";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_ID)
  private String artifactId;

  public static final String SERIALIZED_NAME_LOCAL_PATH = "localPath";
  @SerializedName(SERIALIZED_NAME_LOCAL_PATH)
  private String localPath;

  public SoftwareRecipeStepExecFile() {
  }

  public SoftwareRecipeStepExecFile allowedExitCodes(List<Integer> allowedExitCodes) {
    this.allowedExitCodes = allowedExitCodes;
    return this;
  }

  public SoftwareRecipeStepExecFile addAllowedExitCodesItem(Integer allowedExitCodesItem) {
    if (this.allowedExitCodes == null) {
      this.allowedExitCodes = new ArrayList<>();
    }
    this.allowedExitCodes.add(allowedExitCodesItem);
    return this;
  }

  /**
   * Defaults to [0]. A list of possible return values that the program can return to indicate a success.
   * @return allowedExitCodes
   */
  @javax.annotation.Nullable
  public List<Integer> getAllowedExitCodes() {
    return allowedExitCodes;
  }

  public void setAllowedExitCodes(List<Integer> allowedExitCodes) {
    this.allowedExitCodes = allowedExitCodes;
  }


  public SoftwareRecipeStepExecFile args(List<String> args) {
    this.args = args;
    return this;
  }

  public SoftwareRecipeStepExecFile addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Arguments to be passed to the provided executable.
   * @return args
   */
  @javax.annotation.Nullable
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }


  public SoftwareRecipeStepExecFile artifactId(String artifactId) {
    this.artifactId = artifactId;
    return this;
  }

  /**
   * The id of the relevant artifact in the recipe.
   * @return artifactId
   */
  @javax.annotation.Nullable
  public String getArtifactId() {
    return artifactId;
  }

  public void setArtifactId(String artifactId) {
    this.artifactId = artifactId;
  }


  public SoftwareRecipeStepExecFile localPath(String localPath) {
    this.localPath = localPath;
    return this;
  }

  /**
   * The absolute path of the file on the local filesystem.
   * @return localPath
   */
  @javax.annotation.Nullable
  public String getLocalPath() {
    return localPath;
  }

  public void setLocalPath(String localPath) {
    this.localPath = localPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareRecipeStepExecFile softwareRecipeStepExecFile = (SoftwareRecipeStepExecFile) o;
    return Objects.equals(this.allowedExitCodes, softwareRecipeStepExecFile.allowedExitCodes) &&
        Objects.equals(this.args, softwareRecipeStepExecFile.args) &&
        Objects.equals(this.artifactId, softwareRecipeStepExecFile.artifactId) &&
        Objects.equals(this.localPath, softwareRecipeStepExecFile.localPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedExitCodes, args, artifactId, localPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareRecipeStepExecFile {\n");
    sb.append("    allowedExitCodes: ").append(toIndentedString(allowedExitCodes)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    localPath: ").append(toIndentedString(localPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedExitCodes");
    openapiFields.add("args");
    openapiFields.add("artifactId");
    openapiFields.add("localPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoftwareRecipeStepExecFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareRecipeStepExecFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareRecipeStepExecFile is not found in the empty JSON string", SoftwareRecipeStepExecFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareRecipeStepExecFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareRecipeStepExecFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedExitCodes") != null && !jsonObj.get("allowedExitCodes").isJsonNull() && !jsonObj.get("allowedExitCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedExitCodes` to be an array in the JSON string but got `%s`", jsonObj.get("allowedExitCodes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull() && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      if ((jsonObj.get("artifactId") != null && !jsonObj.get("artifactId").isJsonNull()) && !jsonObj.get("artifactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactId").toString()));
      }
      if ((jsonObj.get("localPath") != null && !jsonObj.get("localPath").isJsonNull()) && !jsonObj.get("localPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareRecipeStepExecFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareRecipeStepExecFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareRecipeStepExecFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareRecipeStepExecFile.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareRecipeStepExecFile>() {
           @Override
           public void write(JsonWriter out, SoftwareRecipeStepExecFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareRecipeStepExecFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoftwareRecipeStepExecFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoftwareRecipeStepExecFile
   * @throws IOException if the JSON string is invalid with respect to SoftwareRecipeStepExecFile
   */
  public static SoftwareRecipeStepExecFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareRecipeStepExecFile.class);
  }

  /**
   * Convert an instance of SoftwareRecipeStepExecFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

