/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AptSettings;
import org.openapitools.client.model.ExecStep;
import org.openapitools.client.model.WindowsUpdateSettings;
import org.openapitools.client.model.YumSettings;
import org.openapitools.client.model.ZypperSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchConfig {
  public static final String SERIALIZED_NAME_APT = "apt";
  @SerializedName(SERIALIZED_NAME_APT)
  private AptSettings apt;

  public static final String SERIALIZED_NAME_GOO = "goo";
  @SerializedName(SERIALIZED_NAME_GOO)
  private Object goo;

  public static final String SERIALIZED_NAME_MIG_INSTANCES_ALLOWED = "migInstancesAllowed";
  @SerializedName(SERIALIZED_NAME_MIG_INSTANCES_ALLOWED)
  private Boolean migInstancesAllowed;

  public static final String SERIALIZED_NAME_POST_STEP = "postStep";
  @SerializedName(SERIALIZED_NAME_POST_STEP)
  private ExecStep postStep;

  public static final String SERIALIZED_NAME_PRE_STEP = "preStep";
  @SerializedName(SERIALIZED_NAME_PRE_STEP)
  private ExecStep preStep;

  /**
   * Post-patch reboot settings.
   */
  @JsonAdapter(RebootConfigEnum.Adapter.class)
  public enum RebootConfigEnum {
    REBOOT_CONFIG_UNSPECIFIED("REBOOT_CONFIG_UNSPECIFIED"),
    
    DEFAULT("DEFAULT"),
    
    ALWAYS("ALWAYS"),
    
    NEVER("NEVER");

    private String value;

    RebootConfigEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RebootConfigEnum fromValue(String value) {
      for (RebootConfigEnum b : RebootConfigEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RebootConfigEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RebootConfigEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RebootConfigEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RebootConfigEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RebootConfigEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REBOOT_CONFIG = "rebootConfig";
  @SerializedName(SERIALIZED_NAME_REBOOT_CONFIG)
  private RebootConfigEnum rebootConfig;

  public static final String SERIALIZED_NAME_WINDOWS_UPDATE = "windowsUpdate";
  @SerializedName(SERIALIZED_NAME_WINDOWS_UPDATE)
  private WindowsUpdateSettings windowsUpdate;

  public static final String SERIALIZED_NAME_YUM = "yum";
  @SerializedName(SERIALIZED_NAME_YUM)
  private YumSettings yum;

  public static final String SERIALIZED_NAME_ZYPPER = "zypper";
  @SerializedName(SERIALIZED_NAME_ZYPPER)
  private ZypperSettings zypper;

  public PatchConfig() {
  }

  public PatchConfig apt(AptSettings apt) {
    this.apt = apt;
    return this;
  }

  /**
   * Get apt
   * @return apt
   */
  @javax.annotation.Nullable
  public AptSettings getApt() {
    return apt;
  }

  public void setApt(AptSettings apt) {
    this.apt = apt;
  }


  public PatchConfig goo(Object goo) {
    this.goo = goo;
    return this;
  }

  /**
   * Googet patching is performed by running &#x60;googet update&#x60;.
   * @return goo
   */
  @javax.annotation.Nullable
  public Object getGoo() {
    return goo;
  }

  public void setGoo(Object goo) {
    this.goo = goo;
  }


  public PatchConfig migInstancesAllowed(Boolean migInstancesAllowed) {
    this.migInstancesAllowed = migInstancesAllowed;
    return this;
  }

  /**
   * Allows the patch job to run on Managed instance groups (MIGs).
   * @return migInstancesAllowed
   */
  @javax.annotation.Nullable
  public Boolean getMigInstancesAllowed() {
    return migInstancesAllowed;
  }

  public void setMigInstancesAllowed(Boolean migInstancesAllowed) {
    this.migInstancesAllowed = migInstancesAllowed;
  }


  public PatchConfig postStep(ExecStep postStep) {
    this.postStep = postStep;
    return this;
  }

  /**
   * Get postStep
   * @return postStep
   */
  @javax.annotation.Nullable
  public ExecStep getPostStep() {
    return postStep;
  }

  public void setPostStep(ExecStep postStep) {
    this.postStep = postStep;
  }


  public PatchConfig preStep(ExecStep preStep) {
    this.preStep = preStep;
    return this;
  }

  /**
   * Get preStep
   * @return preStep
   */
  @javax.annotation.Nullable
  public ExecStep getPreStep() {
    return preStep;
  }

  public void setPreStep(ExecStep preStep) {
    this.preStep = preStep;
  }


  public PatchConfig rebootConfig(RebootConfigEnum rebootConfig) {
    this.rebootConfig = rebootConfig;
    return this;
  }

  /**
   * Post-patch reboot settings.
   * @return rebootConfig
   */
  @javax.annotation.Nullable
  public RebootConfigEnum getRebootConfig() {
    return rebootConfig;
  }

  public void setRebootConfig(RebootConfigEnum rebootConfig) {
    this.rebootConfig = rebootConfig;
  }


  public PatchConfig windowsUpdate(WindowsUpdateSettings windowsUpdate) {
    this.windowsUpdate = windowsUpdate;
    return this;
  }

  /**
   * Get windowsUpdate
   * @return windowsUpdate
   */
  @javax.annotation.Nullable
  public WindowsUpdateSettings getWindowsUpdate() {
    return windowsUpdate;
  }

  public void setWindowsUpdate(WindowsUpdateSettings windowsUpdate) {
    this.windowsUpdate = windowsUpdate;
  }


  public PatchConfig yum(YumSettings yum) {
    this.yum = yum;
    return this;
  }

  /**
   * Get yum
   * @return yum
   */
  @javax.annotation.Nullable
  public YumSettings getYum() {
    return yum;
  }

  public void setYum(YumSettings yum) {
    this.yum = yum;
  }


  public PatchConfig zypper(ZypperSettings zypper) {
    this.zypper = zypper;
    return this;
  }

  /**
   * Get zypper
   * @return zypper
   */
  @javax.annotation.Nullable
  public ZypperSettings getZypper() {
    return zypper;
  }

  public void setZypper(ZypperSettings zypper) {
    this.zypper = zypper;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchConfig patchConfig = (PatchConfig) o;
    return Objects.equals(this.apt, patchConfig.apt) &&
        Objects.equals(this.goo, patchConfig.goo) &&
        Objects.equals(this.migInstancesAllowed, patchConfig.migInstancesAllowed) &&
        Objects.equals(this.postStep, patchConfig.postStep) &&
        Objects.equals(this.preStep, patchConfig.preStep) &&
        Objects.equals(this.rebootConfig, patchConfig.rebootConfig) &&
        Objects.equals(this.windowsUpdate, patchConfig.windowsUpdate) &&
        Objects.equals(this.yum, patchConfig.yum) &&
        Objects.equals(this.zypper, patchConfig.zypper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apt, goo, migInstancesAllowed, postStep, preStep, rebootConfig, windowsUpdate, yum, zypper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchConfig {\n");
    sb.append("    apt: ").append(toIndentedString(apt)).append("\n");
    sb.append("    goo: ").append(toIndentedString(goo)).append("\n");
    sb.append("    migInstancesAllowed: ").append(toIndentedString(migInstancesAllowed)).append("\n");
    sb.append("    postStep: ").append(toIndentedString(postStep)).append("\n");
    sb.append("    preStep: ").append(toIndentedString(preStep)).append("\n");
    sb.append("    rebootConfig: ").append(toIndentedString(rebootConfig)).append("\n");
    sb.append("    windowsUpdate: ").append(toIndentedString(windowsUpdate)).append("\n");
    sb.append("    yum: ").append(toIndentedString(yum)).append("\n");
    sb.append("    zypper: ").append(toIndentedString(zypper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apt");
    openapiFields.add("goo");
    openapiFields.add("migInstancesAllowed");
    openapiFields.add("postStep");
    openapiFields.add("preStep");
    openapiFields.add("rebootConfig");
    openapiFields.add("windowsUpdate");
    openapiFields.add("yum");
    openapiFields.add("zypper");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchConfig is not found in the empty JSON string", PatchConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apt`
      if (jsonObj.get("apt") != null && !jsonObj.get("apt").isJsonNull()) {
        AptSettings.validateJsonElement(jsonObj.get("apt"));
      }
      // validate the optional field `postStep`
      if (jsonObj.get("postStep") != null && !jsonObj.get("postStep").isJsonNull()) {
        ExecStep.validateJsonElement(jsonObj.get("postStep"));
      }
      // validate the optional field `preStep`
      if (jsonObj.get("preStep") != null && !jsonObj.get("preStep").isJsonNull()) {
        ExecStep.validateJsonElement(jsonObj.get("preStep"));
      }
      if ((jsonObj.get("rebootConfig") != null && !jsonObj.get("rebootConfig").isJsonNull()) && !jsonObj.get("rebootConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rebootConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rebootConfig").toString()));
      }
      // validate the optional field `rebootConfig`
      if (jsonObj.get("rebootConfig") != null && !jsonObj.get("rebootConfig").isJsonNull()) {
        RebootConfigEnum.validateJsonElement(jsonObj.get("rebootConfig"));
      }
      // validate the optional field `windowsUpdate`
      if (jsonObj.get("windowsUpdate") != null && !jsonObj.get("windowsUpdate").isJsonNull()) {
        WindowsUpdateSettings.validateJsonElement(jsonObj.get("windowsUpdate"));
      }
      // validate the optional field `yum`
      if (jsonObj.get("yum") != null && !jsonObj.get("yum").isJsonNull()) {
        YumSettings.validateJsonElement(jsonObj.get("yum"));
      }
      // validate the optional field `zypper`
      if (jsonObj.get("zypper") != null && !jsonObj.get("zypper").isJsonNull()) {
        ZypperSettings.validateJsonElement(jsonObj.get("zypper"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchConfig>() {
           @Override
           public void write(JsonWriter out, PatchConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchConfig
   * @throws IOException if the JSON string is invalid with respect to PatchConfig
   */
  public static PatchConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchConfig.class);
  }

  /**
   * Convert an instance of PatchConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

