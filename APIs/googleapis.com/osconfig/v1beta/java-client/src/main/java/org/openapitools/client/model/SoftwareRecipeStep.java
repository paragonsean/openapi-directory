/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SoftwareRecipeStepCopyFile;
import org.openapitools.client.model.SoftwareRecipeStepExecFile;
import org.openapitools.client.model.SoftwareRecipeStepExtractArchive;
import org.openapitools.client.model.SoftwareRecipeStepInstallDpkg;
import org.openapitools.client.model.SoftwareRecipeStepInstallMsi;
import org.openapitools.client.model.SoftwareRecipeStepInstallRpm;
import org.openapitools.client.model.SoftwareRecipeStepRunScript;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An action that can be taken as part of installing or updating a recipe.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoftwareRecipeStep {
  public static final String SERIALIZED_NAME_ARCHIVE_EXTRACTION = "archiveExtraction";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_EXTRACTION)
  private SoftwareRecipeStepExtractArchive archiveExtraction;

  public static final String SERIALIZED_NAME_DPKG_INSTALLATION = "dpkgInstallation";
  @SerializedName(SERIALIZED_NAME_DPKG_INSTALLATION)
  private SoftwareRecipeStepInstallDpkg dpkgInstallation;

  public static final String SERIALIZED_NAME_FILE_COPY = "fileCopy";
  @SerializedName(SERIALIZED_NAME_FILE_COPY)
  private SoftwareRecipeStepCopyFile fileCopy;

  public static final String SERIALIZED_NAME_FILE_EXEC = "fileExec";
  @SerializedName(SERIALIZED_NAME_FILE_EXEC)
  private SoftwareRecipeStepExecFile fileExec;

  public static final String SERIALIZED_NAME_MSI_INSTALLATION = "msiInstallation";
  @SerializedName(SERIALIZED_NAME_MSI_INSTALLATION)
  private SoftwareRecipeStepInstallMsi msiInstallation;

  public static final String SERIALIZED_NAME_RPM_INSTALLATION = "rpmInstallation";
  @SerializedName(SERIALIZED_NAME_RPM_INSTALLATION)
  private SoftwareRecipeStepInstallRpm rpmInstallation;

  public static final String SERIALIZED_NAME_SCRIPT_RUN = "scriptRun";
  @SerializedName(SERIALIZED_NAME_SCRIPT_RUN)
  private SoftwareRecipeStepRunScript scriptRun;

  public SoftwareRecipeStep() {
  }

  public SoftwareRecipeStep archiveExtraction(SoftwareRecipeStepExtractArchive archiveExtraction) {
    this.archiveExtraction = archiveExtraction;
    return this;
  }

  /**
   * Get archiveExtraction
   * @return archiveExtraction
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepExtractArchive getArchiveExtraction() {
    return archiveExtraction;
  }

  public void setArchiveExtraction(SoftwareRecipeStepExtractArchive archiveExtraction) {
    this.archiveExtraction = archiveExtraction;
  }


  public SoftwareRecipeStep dpkgInstallation(SoftwareRecipeStepInstallDpkg dpkgInstallation) {
    this.dpkgInstallation = dpkgInstallation;
    return this;
  }

  /**
   * Get dpkgInstallation
   * @return dpkgInstallation
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepInstallDpkg getDpkgInstallation() {
    return dpkgInstallation;
  }

  public void setDpkgInstallation(SoftwareRecipeStepInstallDpkg dpkgInstallation) {
    this.dpkgInstallation = dpkgInstallation;
  }


  public SoftwareRecipeStep fileCopy(SoftwareRecipeStepCopyFile fileCopy) {
    this.fileCopy = fileCopy;
    return this;
  }

  /**
   * Get fileCopy
   * @return fileCopy
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepCopyFile getFileCopy() {
    return fileCopy;
  }

  public void setFileCopy(SoftwareRecipeStepCopyFile fileCopy) {
    this.fileCopy = fileCopy;
  }


  public SoftwareRecipeStep fileExec(SoftwareRecipeStepExecFile fileExec) {
    this.fileExec = fileExec;
    return this;
  }

  /**
   * Get fileExec
   * @return fileExec
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepExecFile getFileExec() {
    return fileExec;
  }

  public void setFileExec(SoftwareRecipeStepExecFile fileExec) {
    this.fileExec = fileExec;
  }


  public SoftwareRecipeStep msiInstallation(SoftwareRecipeStepInstallMsi msiInstallation) {
    this.msiInstallation = msiInstallation;
    return this;
  }

  /**
   * Get msiInstallation
   * @return msiInstallation
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepInstallMsi getMsiInstallation() {
    return msiInstallation;
  }

  public void setMsiInstallation(SoftwareRecipeStepInstallMsi msiInstallation) {
    this.msiInstallation = msiInstallation;
  }


  public SoftwareRecipeStep rpmInstallation(SoftwareRecipeStepInstallRpm rpmInstallation) {
    this.rpmInstallation = rpmInstallation;
    return this;
  }

  /**
   * Get rpmInstallation
   * @return rpmInstallation
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepInstallRpm getRpmInstallation() {
    return rpmInstallation;
  }

  public void setRpmInstallation(SoftwareRecipeStepInstallRpm rpmInstallation) {
    this.rpmInstallation = rpmInstallation;
  }


  public SoftwareRecipeStep scriptRun(SoftwareRecipeStepRunScript scriptRun) {
    this.scriptRun = scriptRun;
    return this;
  }

  /**
   * Get scriptRun
   * @return scriptRun
   */
  @javax.annotation.Nullable
  public SoftwareRecipeStepRunScript getScriptRun() {
    return scriptRun;
  }

  public void setScriptRun(SoftwareRecipeStepRunScript scriptRun) {
    this.scriptRun = scriptRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareRecipeStep softwareRecipeStep = (SoftwareRecipeStep) o;
    return Objects.equals(this.archiveExtraction, softwareRecipeStep.archiveExtraction) &&
        Objects.equals(this.dpkgInstallation, softwareRecipeStep.dpkgInstallation) &&
        Objects.equals(this.fileCopy, softwareRecipeStep.fileCopy) &&
        Objects.equals(this.fileExec, softwareRecipeStep.fileExec) &&
        Objects.equals(this.msiInstallation, softwareRecipeStep.msiInstallation) &&
        Objects.equals(this.rpmInstallation, softwareRecipeStep.rpmInstallation) &&
        Objects.equals(this.scriptRun, softwareRecipeStep.scriptRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveExtraction, dpkgInstallation, fileCopy, fileExec, msiInstallation, rpmInstallation, scriptRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareRecipeStep {\n");
    sb.append("    archiveExtraction: ").append(toIndentedString(archiveExtraction)).append("\n");
    sb.append("    dpkgInstallation: ").append(toIndentedString(dpkgInstallation)).append("\n");
    sb.append("    fileCopy: ").append(toIndentedString(fileCopy)).append("\n");
    sb.append("    fileExec: ").append(toIndentedString(fileExec)).append("\n");
    sb.append("    msiInstallation: ").append(toIndentedString(msiInstallation)).append("\n");
    sb.append("    rpmInstallation: ").append(toIndentedString(rpmInstallation)).append("\n");
    sb.append("    scriptRun: ").append(toIndentedString(scriptRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archiveExtraction");
    openapiFields.add("dpkgInstallation");
    openapiFields.add("fileCopy");
    openapiFields.add("fileExec");
    openapiFields.add("msiInstallation");
    openapiFields.add("rpmInstallation");
    openapiFields.add("scriptRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoftwareRecipeStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareRecipeStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareRecipeStep is not found in the empty JSON string", SoftwareRecipeStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareRecipeStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareRecipeStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `archiveExtraction`
      if (jsonObj.get("archiveExtraction") != null && !jsonObj.get("archiveExtraction").isJsonNull()) {
        SoftwareRecipeStepExtractArchive.validateJsonElement(jsonObj.get("archiveExtraction"));
      }
      // validate the optional field `dpkgInstallation`
      if (jsonObj.get("dpkgInstallation") != null && !jsonObj.get("dpkgInstallation").isJsonNull()) {
        SoftwareRecipeStepInstallDpkg.validateJsonElement(jsonObj.get("dpkgInstallation"));
      }
      // validate the optional field `fileCopy`
      if (jsonObj.get("fileCopy") != null && !jsonObj.get("fileCopy").isJsonNull()) {
        SoftwareRecipeStepCopyFile.validateJsonElement(jsonObj.get("fileCopy"));
      }
      // validate the optional field `fileExec`
      if (jsonObj.get("fileExec") != null && !jsonObj.get("fileExec").isJsonNull()) {
        SoftwareRecipeStepExecFile.validateJsonElement(jsonObj.get("fileExec"));
      }
      // validate the optional field `msiInstallation`
      if (jsonObj.get("msiInstallation") != null && !jsonObj.get("msiInstallation").isJsonNull()) {
        SoftwareRecipeStepInstallMsi.validateJsonElement(jsonObj.get("msiInstallation"));
      }
      // validate the optional field `rpmInstallation`
      if (jsonObj.get("rpmInstallation") != null && !jsonObj.get("rpmInstallation").isJsonNull()) {
        SoftwareRecipeStepInstallRpm.validateJsonElement(jsonObj.get("rpmInstallation"));
      }
      // validate the optional field `scriptRun`
      if (jsonObj.get("scriptRun") != null && !jsonObj.get("scriptRun").isJsonNull()) {
        SoftwareRecipeStepRunScript.validateJsonElement(jsonObj.get("scriptRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareRecipeStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareRecipeStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareRecipeStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareRecipeStep.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareRecipeStep>() {
           @Override
           public void write(JsonWriter out, SoftwareRecipeStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareRecipeStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoftwareRecipeStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoftwareRecipeStep
   * @throws IOException if the JSON string is invalid with respect to SoftwareRecipeStep
   */
  public static SoftwareRecipeStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareRecipeStep.class);
  }

  /**
   * Convert an instance of SoftwareRecipeStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

