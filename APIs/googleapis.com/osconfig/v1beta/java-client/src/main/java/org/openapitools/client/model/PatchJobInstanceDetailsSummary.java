/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the current patch state across all instances that this patch job affects. Contains counts of instances in different states. These states map to &#x60;InstancePatchState&#x60;. List patch job instance details to see the specific states of each instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchJobInstanceDetailsSummary {
  public static final String SERIALIZED_NAME_ACKED_INSTANCE_COUNT = "ackedInstanceCount";
  @SerializedName(SERIALIZED_NAME_ACKED_INSTANCE_COUNT)
  private String ackedInstanceCount;

  public static final String SERIALIZED_NAME_APPLYING_PATCHES_INSTANCE_COUNT = "applyingPatchesInstanceCount";
  @SerializedName(SERIALIZED_NAME_APPLYING_PATCHES_INSTANCE_COUNT)
  private String applyingPatchesInstanceCount;

  public static final String SERIALIZED_NAME_DOWNLOADING_PATCHES_INSTANCE_COUNT = "downloadingPatchesInstanceCount";
  @SerializedName(SERIALIZED_NAME_DOWNLOADING_PATCHES_INSTANCE_COUNT)
  private String downloadingPatchesInstanceCount;

  public static final String SERIALIZED_NAME_FAILED_INSTANCE_COUNT = "failedInstanceCount";
  @SerializedName(SERIALIZED_NAME_FAILED_INSTANCE_COUNT)
  private String failedInstanceCount;

  public static final String SERIALIZED_NAME_INACTIVE_INSTANCE_COUNT = "inactiveInstanceCount";
  @SerializedName(SERIALIZED_NAME_INACTIVE_INSTANCE_COUNT)
  private String inactiveInstanceCount;

  public static final String SERIALIZED_NAME_NO_AGENT_DETECTED_INSTANCE_COUNT = "noAgentDetectedInstanceCount";
  @SerializedName(SERIALIZED_NAME_NO_AGENT_DETECTED_INSTANCE_COUNT)
  private String noAgentDetectedInstanceCount;

  public static final String SERIALIZED_NAME_NOTIFIED_INSTANCE_COUNT = "notifiedInstanceCount";
  @SerializedName(SERIALIZED_NAME_NOTIFIED_INSTANCE_COUNT)
  private String notifiedInstanceCount;

  public static final String SERIALIZED_NAME_PENDING_INSTANCE_COUNT = "pendingInstanceCount";
  @SerializedName(SERIALIZED_NAME_PENDING_INSTANCE_COUNT)
  private String pendingInstanceCount;

  public static final String SERIALIZED_NAME_POST_PATCH_STEP_INSTANCE_COUNT = "postPatchStepInstanceCount";
  @SerializedName(SERIALIZED_NAME_POST_PATCH_STEP_INSTANCE_COUNT)
  private String postPatchStepInstanceCount;

  public static final String SERIALIZED_NAME_PRE_PATCH_STEP_INSTANCE_COUNT = "prePatchStepInstanceCount";
  @SerializedName(SERIALIZED_NAME_PRE_PATCH_STEP_INSTANCE_COUNT)
  private String prePatchStepInstanceCount;

  public static final String SERIALIZED_NAME_REBOOTING_INSTANCE_COUNT = "rebootingInstanceCount";
  @SerializedName(SERIALIZED_NAME_REBOOTING_INSTANCE_COUNT)
  private String rebootingInstanceCount;

  public static final String SERIALIZED_NAME_STARTED_INSTANCE_COUNT = "startedInstanceCount";
  @SerializedName(SERIALIZED_NAME_STARTED_INSTANCE_COUNT)
  private String startedInstanceCount;

  public static final String SERIALIZED_NAME_SUCCEEDED_INSTANCE_COUNT = "succeededInstanceCount";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_INSTANCE_COUNT)
  private String succeededInstanceCount;

  public static final String SERIALIZED_NAME_SUCCEEDED_REBOOT_REQUIRED_INSTANCE_COUNT = "succeededRebootRequiredInstanceCount";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_REBOOT_REQUIRED_INSTANCE_COUNT)
  private String succeededRebootRequiredInstanceCount;

  public static final String SERIALIZED_NAME_TIMED_OUT_INSTANCE_COUNT = "timedOutInstanceCount";
  @SerializedName(SERIALIZED_NAME_TIMED_OUT_INSTANCE_COUNT)
  private String timedOutInstanceCount;

  public PatchJobInstanceDetailsSummary() {
  }

  public PatchJobInstanceDetailsSummary ackedInstanceCount(String ackedInstanceCount) {
    this.ackedInstanceCount = ackedInstanceCount;
    return this;
  }

  /**
   * Number of instances that have acked and will start shortly.
   * @return ackedInstanceCount
   */
  @javax.annotation.Nullable
  public String getAckedInstanceCount() {
    return ackedInstanceCount;
  }

  public void setAckedInstanceCount(String ackedInstanceCount) {
    this.ackedInstanceCount = ackedInstanceCount;
  }


  public PatchJobInstanceDetailsSummary applyingPatchesInstanceCount(String applyingPatchesInstanceCount) {
    this.applyingPatchesInstanceCount = applyingPatchesInstanceCount;
    return this;
  }

  /**
   * Number of instances that are applying patches.
   * @return applyingPatchesInstanceCount
   */
  @javax.annotation.Nullable
  public String getApplyingPatchesInstanceCount() {
    return applyingPatchesInstanceCount;
  }

  public void setApplyingPatchesInstanceCount(String applyingPatchesInstanceCount) {
    this.applyingPatchesInstanceCount = applyingPatchesInstanceCount;
  }


  public PatchJobInstanceDetailsSummary downloadingPatchesInstanceCount(String downloadingPatchesInstanceCount) {
    this.downloadingPatchesInstanceCount = downloadingPatchesInstanceCount;
    return this;
  }

  /**
   * Number of instances that are downloading patches.
   * @return downloadingPatchesInstanceCount
   */
  @javax.annotation.Nullable
  public String getDownloadingPatchesInstanceCount() {
    return downloadingPatchesInstanceCount;
  }

  public void setDownloadingPatchesInstanceCount(String downloadingPatchesInstanceCount) {
    this.downloadingPatchesInstanceCount = downloadingPatchesInstanceCount;
  }


  public PatchJobInstanceDetailsSummary failedInstanceCount(String failedInstanceCount) {
    this.failedInstanceCount = failedInstanceCount;
    return this;
  }

  /**
   * Number of instances that failed.
   * @return failedInstanceCount
   */
  @javax.annotation.Nullable
  public String getFailedInstanceCount() {
    return failedInstanceCount;
  }

  public void setFailedInstanceCount(String failedInstanceCount) {
    this.failedInstanceCount = failedInstanceCount;
  }


  public PatchJobInstanceDetailsSummary inactiveInstanceCount(String inactiveInstanceCount) {
    this.inactiveInstanceCount = inactiveInstanceCount;
    return this;
  }

  /**
   * Number of instances that are inactive.
   * @return inactiveInstanceCount
   */
  @javax.annotation.Nullable
  public String getInactiveInstanceCount() {
    return inactiveInstanceCount;
  }

  public void setInactiveInstanceCount(String inactiveInstanceCount) {
    this.inactiveInstanceCount = inactiveInstanceCount;
  }


  public PatchJobInstanceDetailsSummary noAgentDetectedInstanceCount(String noAgentDetectedInstanceCount) {
    this.noAgentDetectedInstanceCount = noAgentDetectedInstanceCount;
    return this;
  }

  /**
   * Number of instances that do not appear to be running the agent. Check to ensure that the agent is installed, running, and able to communicate with the service.
   * @return noAgentDetectedInstanceCount
   */
  @javax.annotation.Nullable
  public String getNoAgentDetectedInstanceCount() {
    return noAgentDetectedInstanceCount;
  }

  public void setNoAgentDetectedInstanceCount(String noAgentDetectedInstanceCount) {
    this.noAgentDetectedInstanceCount = noAgentDetectedInstanceCount;
  }


  public PatchJobInstanceDetailsSummary notifiedInstanceCount(String notifiedInstanceCount) {
    this.notifiedInstanceCount = notifiedInstanceCount;
    return this;
  }

  /**
   * Number of instances notified about patch job.
   * @return notifiedInstanceCount
   */
  @javax.annotation.Nullable
  public String getNotifiedInstanceCount() {
    return notifiedInstanceCount;
  }

  public void setNotifiedInstanceCount(String notifiedInstanceCount) {
    this.notifiedInstanceCount = notifiedInstanceCount;
  }


  public PatchJobInstanceDetailsSummary pendingInstanceCount(String pendingInstanceCount) {
    this.pendingInstanceCount = pendingInstanceCount;
    return this;
  }

  /**
   * Number of instances pending patch job.
   * @return pendingInstanceCount
   */
  @javax.annotation.Nullable
  public String getPendingInstanceCount() {
    return pendingInstanceCount;
  }

  public void setPendingInstanceCount(String pendingInstanceCount) {
    this.pendingInstanceCount = pendingInstanceCount;
  }


  public PatchJobInstanceDetailsSummary postPatchStepInstanceCount(String postPatchStepInstanceCount) {
    this.postPatchStepInstanceCount = postPatchStepInstanceCount;
    return this;
  }

  /**
   * Number of instances that are running the post-patch step.
   * @return postPatchStepInstanceCount
   */
  @javax.annotation.Nullable
  public String getPostPatchStepInstanceCount() {
    return postPatchStepInstanceCount;
  }

  public void setPostPatchStepInstanceCount(String postPatchStepInstanceCount) {
    this.postPatchStepInstanceCount = postPatchStepInstanceCount;
  }


  public PatchJobInstanceDetailsSummary prePatchStepInstanceCount(String prePatchStepInstanceCount) {
    this.prePatchStepInstanceCount = prePatchStepInstanceCount;
    return this;
  }

  /**
   * Number of instances that are running the pre-patch step.
   * @return prePatchStepInstanceCount
   */
  @javax.annotation.Nullable
  public String getPrePatchStepInstanceCount() {
    return prePatchStepInstanceCount;
  }

  public void setPrePatchStepInstanceCount(String prePatchStepInstanceCount) {
    this.prePatchStepInstanceCount = prePatchStepInstanceCount;
  }


  public PatchJobInstanceDetailsSummary rebootingInstanceCount(String rebootingInstanceCount) {
    this.rebootingInstanceCount = rebootingInstanceCount;
    return this;
  }

  /**
   * Number of instances rebooting.
   * @return rebootingInstanceCount
   */
  @javax.annotation.Nullable
  public String getRebootingInstanceCount() {
    return rebootingInstanceCount;
  }

  public void setRebootingInstanceCount(String rebootingInstanceCount) {
    this.rebootingInstanceCount = rebootingInstanceCount;
  }


  public PatchJobInstanceDetailsSummary startedInstanceCount(String startedInstanceCount) {
    this.startedInstanceCount = startedInstanceCount;
    return this;
  }

  /**
   * Number of instances that have started.
   * @return startedInstanceCount
   */
  @javax.annotation.Nullable
  public String getStartedInstanceCount() {
    return startedInstanceCount;
  }

  public void setStartedInstanceCount(String startedInstanceCount) {
    this.startedInstanceCount = startedInstanceCount;
  }


  public PatchJobInstanceDetailsSummary succeededInstanceCount(String succeededInstanceCount) {
    this.succeededInstanceCount = succeededInstanceCount;
    return this;
  }

  /**
   * Number of instances that have completed successfully.
   * @return succeededInstanceCount
   */
  @javax.annotation.Nullable
  public String getSucceededInstanceCount() {
    return succeededInstanceCount;
  }

  public void setSucceededInstanceCount(String succeededInstanceCount) {
    this.succeededInstanceCount = succeededInstanceCount;
  }


  public PatchJobInstanceDetailsSummary succeededRebootRequiredInstanceCount(String succeededRebootRequiredInstanceCount) {
    this.succeededRebootRequiredInstanceCount = succeededRebootRequiredInstanceCount;
    return this;
  }

  /**
   * Number of instances that require reboot.
   * @return succeededRebootRequiredInstanceCount
   */
  @javax.annotation.Nullable
  public String getSucceededRebootRequiredInstanceCount() {
    return succeededRebootRequiredInstanceCount;
  }

  public void setSucceededRebootRequiredInstanceCount(String succeededRebootRequiredInstanceCount) {
    this.succeededRebootRequiredInstanceCount = succeededRebootRequiredInstanceCount;
  }


  public PatchJobInstanceDetailsSummary timedOutInstanceCount(String timedOutInstanceCount) {
    this.timedOutInstanceCount = timedOutInstanceCount;
    return this;
  }

  /**
   * Number of instances that exceeded the time out while applying the patch.
   * @return timedOutInstanceCount
   */
  @javax.annotation.Nullable
  public String getTimedOutInstanceCount() {
    return timedOutInstanceCount;
  }

  public void setTimedOutInstanceCount(String timedOutInstanceCount) {
    this.timedOutInstanceCount = timedOutInstanceCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchJobInstanceDetailsSummary patchJobInstanceDetailsSummary = (PatchJobInstanceDetailsSummary) o;
    return Objects.equals(this.ackedInstanceCount, patchJobInstanceDetailsSummary.ackedInstanceCount) &&
        Objects.equals(this.applyingPatchesInstanceCount, patchJobInstanceDetailsSummary.applyingPatchesInstanceCount) &&
        Objects.equals(this.downloadingPatchesInstanceCount, patchJobInstanceDetailsSummary.downloadingPatchesInstanceCount) &&
        Objects.equals(this.failedInstanceCount, patchJobInstanceDetailsSummary.failedInstanceCount) &&
        Objects.equals(this.inactiveInstanceCount, patchJobInstanceDetailsSummary.inactiveInstanceCount) &&
        Objects.equals(this.noAgentDetectedInstanceCount, patchJobInstanceDetailsSummary.noAgentDetectedInstanceCount) &&
        Objects.equals(this.notifiedInstanceCount, patchJobInstanceDetailsSummary.notifiedInstanceCount) &&
        Objects.equals(this.pendingInstanceCount, patchJobInstanceDetailsSummary.pendingInstanceCount) &&
        Objects.equals(this.postPatchStepInstanceCount, patchJobInstanceDetailsSummary.postPatchStepInstanceCount) &&
        Objects.equals(this.prePatchStepInstanceCount, patchJobInstanceDetailsSummary.prePatchStepInstanceCount) &&
        Objects.equals(this.rebootingInstanceCount, patchJobInstanceDetailsSummary.rebootingInstanceCount) &&
        Objects.equals(this.startedInstanceCount, patchJobInstanceDetailsSummary.startedInstanceCount) &&
        Objects.equals(this.succeededInstanceCount, patchJobInstanceDetailsSummary.succeededInstanceCount) &&
        Objects.equals(this.succeededRebootRequiredInstanceCount, patchJobInstanceDetailsSummary.succeededRebootRequiredInstanceCount) &&
        Objects.equals(this.timedOutInstanceCount, patchJobInstanceDetailsSummary.timedOutInstanceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ackedInstanceCount, applyingPatchesInstanceCount, downloadingPatchesInstanceCount, failedInstanceCount, inactiveInstanceCount, noAgentDetectedInstanceCount, notifiedInstanceCount, pendingInstanceCount, postPatchStepInstanceCount, prePatchStepInstanceCount, rebootingInstanceCount, startedInstanceCount, succeededInstanceCount, succeededRebootRequiredInstanceCount, timedOutInstanceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchJobInstanceDetailsSummary {\n");
    sb.append("    ackedInstanceCount: ").append(toIndentedString(ackedInstanceCount)).append("\n");
    sb.append("    applyingPatchesInstanceCount: ").append(toIndentedString(applyingPatchesInstanceCount)).append("\n");
    sb.append("    downloadingPatchesInstanceCount: ").append(toIndentedString(downloadingPatchesInstanceCount)).append("\n");
    sb.append("    failedInstanceCount: ").append(toIndentedString(failedInstanceCount)).append("\n");
    sb.append("    inactiveInstanceCount: ").append(toIndentedString(inactiveInstanceCount)).append("\n");
    sb.append("    noAgentDetectedInstanceCount: ").append(toIndentedString(noAgentDetectedInstanceCount)).append("\n");
    sb.append("    notifiedInstanceCount: ").append(toIndentedString(notifiedInstanceCount)).append("\n");
    sb.append("    pendingInstanceCount: ").append(toIndentedString(pendingInstanceCount)).append("\n");
    sb.append("    postPatchStepInstanceCount: ").append(toIndentedString(postPatchStepInstanceCount)).append("\n");
    sb.append("    prePatchStepInstanceCount: ").append(toIndentedString(prePatchStepInstanceCount)).append("\n");
    sb.append("    rebootingInstanceCount: ").append(toIndentedString(rebootingInstanceCount)).append("\n");
    sb.append("    startedInstanceCount: ").append(toIndentedString(startedInstanceCount)).append("\n");
    sb.append("    succeededInstanceCount: ").append(toIndentedString(succeededInstanceCount)).append("\n");
    sb.append("    succeededRebootRequiredInstanceCount: ").append(toIndentedString(succeededRebootRequiredInstanceCount)).append("\n");
    sb.append("    timedOutInstanceCount: ").append(toIndentedString(timedOutInstanceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ackedInstanceCount");
    openapiFields.add("applyingPatchesInstanceCount");
    openapiFields.add("downloadingPatchesInstanceCount");
    openapiFields.add("failedInstanceCount");
    openapiFields.add("inactiveInstanceCount");
    openapiFields.add("noAgentDetectedInstanceCount");
    openapiFields.add("notifiedInstanceCount");
    openapiFields.add("pendingInstanceCount");
    openapiFields.add("postPatchStepInstanceCount");
    openapiFields.add("prePatchStepInstanceCount");
    openapiFields.add("rebootingInstanceCount");
    openapiFields.add("startedInstanceCount");
    openapiFields.add("succeededInstanceCount");
    openapiFields.add("succeededRebootRequiredInstanceCount");
    openapiFields.add("timedOutInstanceCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchJobInstanceDetailsSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchJobInstanceDetailsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchJobInstanceDetailsSummary is not found in the empty JSON string", PatchJobInstanceDetailsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchJobInstanceDetailsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchJobInstanceDetailsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ackedInstanceCount") != null && !jsonObj.get("ackedInstanceCount").isJsonNull()) && !jsonObj.get("ackedInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackedInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackedInstanceCount").toString()));
      }
      if ((jsonObj.get("applyingPatchesInstanceCount") != null && !jsonObj.get("applyingPatchesInstanceCount").isJsonNull()) && !jsonObj.get("applyingPatchesInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applyingPatchesInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applyingPatchesInstanceCount").toString()));
      }
      if ((jsonObj.get("downloadingPatchesInstanceCount") != null && !jsonObj.get("downloadingPatchesInstanceCount").isJsonNull()) && !jsonObj.get("downloadingPatchesInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadingPatchesInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadingPatchesInstanceCount").toString()));
      }
      if ((jsonObj.get("failedInstanceCount") != null && !jsonObj.get("failedInstanceCount").isJsonNull()) && !jsonObj.get("failedInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failedInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failedInstanceCount").toString()));
      }
      if ((jsonObj.get("inactiveInstanceCount") != null && !jsonObj.get("inactiveInstanceCount").isJsonNull()) && !jsonObj.get("inactiveInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inactiveInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inactiveInstanceCount").toString()));
      }
      if ((jsonObj.get("noAgentDetectedInstanceCount") != null && !jsonObj.get("noAgentDetectedInstanceCount").isJsonNull()) && !jsonObj.get("noAgentDetectedInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noAgentDetectedInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noAgentDetectedInstanceCount").toString()));
      }
      if ((jsonObj.get("notifiedInstanceCount") != null && !jsonObj.get("notifiedInstanceCount").isJsonNull()) && !jsonObj.get("notifiedInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifiedInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifiedInstanceCount").toString()));
      }
      if ((jsonObj.get("pendingInstanceCount") != null && !jsonObj.get("pendingInstanceCount").isJsonNull()) && !jsonObj.get("pendingInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingInstanceCount").toString()));
      }
      if ((jsonObj.get("postPatchStepInstanceCount") != null && !jsonObj.get("postPatchStepInstanceCount").isJsonNull()) && !jsonObj.get("postPatchStepInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postPatchStepInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postPatchStepInstanceCount").toString()));
      }
      if ((jsonObj.get("prePatchStepInstanceCount") != null && !jsonObj.get("prePatchStepInstanceCount").isJsonNull()) && !jsonObj.get("prePatchStepInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prePatchStepInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prePatchStepInstanceCount").toString()));
      }
      if ((jsonObj.get("rebootingInstanceCount") != null && !jsonObj.get("rebootingInstanceCount").isJsonNull()) && !jsonObj.get("rebootingInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rebootingInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rebootingInstanceCount").toString()));
      }
      if ((jsonObj.get("startedInstanceCount") != null && !jsonObj.get("startedInstanceCount").isJsonNull()) && !jsonObj.get("startedInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startedInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startedInstanceCount").toString()));
      }
      if ((jsonObj.get("succeededInstanceCount") != null && !jsonObj.get("succeededInstanceCount").isJsonNull()) && !jsonObj.get("succeededInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `succeededInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("succeededInstanceCount").toString()));
      }
      if ((jsonObj.get("succeededRebootRequiredInstanceCount") != null && !jsonObj.get("succeededRebootRequiredInstanceCount").isJsonNull()) && !jsonObj.get("succeededRebootRequiredInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `succeededRebootRequiredInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("succeededRebootRequiredInstanceCount").toString()));
      }
      if ((jsonObj.get("timedOutInstanceCount") != null && !jsonObj.get("timedOutInstanceCount").isJsonNull()) && !jsonObj.get("timedOutInstanceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timedOutInstanceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timedOutInstanceCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchJobInstanceDetailsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchJobInstanceDetailsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchJobInstanceDetailsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchJobInstanceDetailsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchJobInstanceDetailsSummary>() {
           @Override
           public void write(JsonWriter out, PatchJobInstanceDetailsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchJobInstanceDetailsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchJobInstanceDetailsSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchJobInstanceDetailsSummary
   * @throws IOException if the JSON string is invalid with respect to PatchJobInstanceDetailsSummary
   */
  public static PatchJobInstanceDetailsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchJobInstanceDetailsSummary.class);
  }

  /**
   * Convert an instance of PatchJobInstanceDetailsSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

