/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zypper patching is performed by running &#x60;zypper patch&#x60;. See also https://en.opensuse.org/SDB:Zypper_manual.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZypperSettings {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDES = "excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List<String> excludes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUSIVE_PATCHES = "exclusivePatches";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_PATCHES)
  private List<String> exclusivePatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITIES = "severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  private List<String> severities = new ArrayList<>();

  public static final String SERIALIZED_NAME_WITH_OPTIONAL = "withOptional";
  @SerializedName(SERIALIZED_NAME_WITH_OPTIONAL)
  private Boolean withOptional;

  public static final String SERIALIZED_NAME_WITH_UPDATE = "withUpdate";
  @SerializedName(SERIALIZED_NAME_WITH_UPDATE)
  private Boolean withUpdate;

  public ZypperSettings() {
  }

  public ZypperSettings categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public ZypperSettings addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Install only patches with these categories. Common categories include security, recommended, and feature.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public ZypperSettings excludes(List<String> excludes) {
    this.excludes = excludes;
    return this;
  }

  public ZypperSettings addExcludesItem(String excludesItem) {
    if (this.excludes == null) {
      this.excludes = new ArrayList<>();
    }
    this.excludes.add(excludesItem);
    return this;
  }

  /**
   * List of patches to exclude from update.
   * @return excludes
   */
  @javax.annotation.Nullable
  public List<String> getExcludes() {
    return excludes;
  }

  public void setExcludes(List<String> excludes) {
    this.excludes = excludes;
  }


  public ZypperSettings exclusivePatches(List<String> exclusivePatches) {
    this.exclusivePatches = exclusivePatches;
    return this;
  }

  public ZypperSettings addExclusivePatchesItem(String exclusivePatchesItem) {
    if (this.exclusivePatches == null) {
      this.exclusivePatches = new ArrayList<>();
    }
    this.exclusivePatches.add(exclusivePatchesItem);
    return this;
  }

  /**
   * An exclusive list of patches to be updated. These are the only patches that will be installed using &#39;zypper patch patch:&#39; command. This field must not be used with any other patch configuration fields.
   * @return exclusivePatches
   */
  @javax.annotation.Nullable
  public List<String> getExclusivePatches() {
    return exclusivePatches;
  }

  public void setExclusivePatches(List<String> exclusivePatches) {
    this.exclusivePatches = exclusivePatches;
  }


  public ZypperSettings severities(List<String> severities) {
    this.severities = severities;
    return this;
  }

  public ZypperSettings addSeveritiesItem(String severitiesItem) {
    if (this.severities == null) {
      this.severities = new ArrayList<>();
    }
    this.severities.add(severitiesItem);
    return this;
  }

  /**
   * Install only patches with these severities. Common severities include critical, important, moderate, and low.
   * @return severities
   */
  @javax.annotation.Nullable
  public List<String> getSeverities() {
    return severities;
  }

  public void setSeverities(List<String> severities) {
    this.severities = severities;
  }


  public ZypperSettings withOptional(Boolean withOptional) {
    this.withOptional = withOptional;
    return this;
  }

  /**
   * Adds the &#x60;--with-optional&#x60; flag to &#x60;zypper patch&#x60;.
   * @return withOptional
   */
  @javax.annotation.Nullable
  public Boolean getWithOptional() {
    return withOptional;
  }

  public void setWithOptional(Boolean withOptional) {
    this.withOptional = withOptional;
  }


  public ZypperSettings withUpdate(Boolean withUpdate) {
    this.withUpdate = withUpdate;
    return this;
  }

  /**
   * Adds the &#x60;--with-update&#x60; flag, to &#x60;zypper patch&#x60;.
   * @return withUpdate
   */
  @javax.annotation.Nullable
  public Boolean getWithUpdate() {
    return withUpdate;
  }

  public void setWithUpdate(Boolean withUpdate) {
    this.withUpdate = withUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZypperSettings zypperSettings = (ZypperSettings) o;
    return Objects.equals(this.categories, zypperSettings.categories) &&
        Objects.equals(this.excludes, zypperSettings.excludes) &&
        Objects.equals(this.exclusivePatches, zypperSettings.exclusivePatches) &&
        Objects.equals(this.severities, zypperSettings.severities) &&
        Objects.equals(this.withOptional, zypperSettings.withOptional) &&
        Objects.equals(this.withUpdate, zypperSettings.withUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, excludes, exclusivePatches, severities, withOptional, withUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZypperSettings {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    exclusivePatches: ").append(toIndentedString(exclusivePatches)).append("\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    withOptional: ").append(toIndentedString(withOptional)).append("\n");
    sb.append("    withUpdate: ").append(toIndentedString(withUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("excludes");
    openapiFields.add("exclusivePatches");
    openapiFields.add("severities");
    openapiFields.add("withOptional");
    openapiFields.add("withUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZypperSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZypperSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZypperSettings is not found in the empty JSON string", ZypperSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZypperSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZypperSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludes") != null && !jsonObj.get("excludes").isJsonNull() && !jsonObj.get("excludes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludes` to be an array in the JSON string but got `%s`", jsonObj.get("excludes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclusivePatches") != null && !jsonObj.get("exclusivePatches").isJsonNull() && !jsonObj.get("exclusivePatches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusivePatches` to be an array in the JSON string but got `%s`", jsonObj.get("exclusivePatches").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("severities") != null && !jsonObj.get("severities").isJsonNull() && !jsonObj.get("severities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `severities` to be an array in the JSON string but got `%s`", jsonObj.get("severities").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZypperSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZypperSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZypperSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZypperSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ZypperSettings>() {
           @Override
           public void write(JsonWriter out, ZypperSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZypperSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZypperSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZypperSettings
   * @throws IOException if the JSON string is invalid with respect to ZypperSettings
   */
  public static ZypperSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZypperSettings.class);
  }

  /**
   * Convert an instance of ZypperSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

