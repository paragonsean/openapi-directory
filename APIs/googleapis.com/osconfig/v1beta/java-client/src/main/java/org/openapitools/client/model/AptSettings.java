/*
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Apt patching is completed by executing &#x60;apt-get update &amp;&amp; apt-get upgrade&#x60;. Additional options can be set to control how this is executed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:00.971702-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AptSettings {
  public static final String SERIALIZED_NAME_EXCLUDES = "excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List<String> excludes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUSIVE_PACKAGES = "exclusivePackages";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_PACKAGES)
  private List<String> exclusivePackages = new ArrayList<>();

  /**
   * By changing the type to DIST, the patching is performed using &#x60;apt-get dist-upgrade&#x60; instead.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    DIST("DIST"),
    
    UPGRADE("UPGRADE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AptSettings() {
  }

  public AptSettings excludes(List<String> excludes) {
    this.excludes = excludes;
    return this;
  }

  public AptSettings addExcludesItem(String excludesItem) {
    if (this.excludes == null) {
      this.excludes = new ArrayList<>();
    }
    this.excludes.add(excludesItem);
    return this;
  }

  /**
   * List of packages to exclude from update. These packages will be excluded
   * @return excludes
   */
  @javax.annotation.Nullable
  public List<String> getExcludes() {
    return excludes;
  }

  public void setExcludes(List<String> excludes) {
    this.excludes = excludes;
  }


  public AptSettings exclusivePackages(List<String> exclusivePackages) {
    this.exclusivePackages = exclusivePackages;
    return this;
  }

  public AptSettings addExclusivePackagesItem(String exclusivePackagesItem) {
    if (this.exclusivePackages == null) {
      this.exclusivePackages = new ArrayList<>();
    }
    this.exclusivePackages.add(exclusivePackagesItem);
    return this;
  }

  /**
   * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
   * @return exclusivePackages
   */
  @javax.annotation.Nullable
  public List<String> getExclusivePackages() {
    return exclusivePackages;
  }

  public void setExclusivePackages(List<String> exclusivePackages) {
    this.exclusivePackages = exclusivePackages;
  }


  public AptSettings type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * By changing the type to DIST, the patching is performed using &#x60;apt-get dist-upgrade&#x60; instead.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AptSettings aptSettings = (AptSettings) o;
    return Objects.equals(this.excludes, aptSettings.excludes) &&
        Objects.equals(this.exclusivePackages, aptSettings.exclusivePackages) &&
        Objects.equals(this.type, aptSettings.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludes, exclusivePackages, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AptSettings {\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    exclusivePackages: ").append(toIndentedString(exclusivePackages)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludes");
    openapiFields.add("exclusivePackages");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AptSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AptSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AptSettings is not found in the empty JSON string", AptSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AptSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AptSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludes") != null && !jsonObj.get("excludes").isJsonNull() && !jsonObj.get("excludes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludes` to be an array in the JSON string but got `%s`", jsonObj.get("excludes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exclusivePackages") != null && !jsonObj.get("exclusivePackages").isJsonNull() && !jsonObj.get("exclusivePackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusivePackages` to be an array in the JSON string but got `%s`", jsonObj.get("exclusivePackages").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AptSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AptSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AptSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AptSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AptSettings>() {
           @Override
           public void write(JsonWriter out, AptSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AptSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AptSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AptSettings
   * @throws IOException if the JSON string is invalid with respect to AptSettings
   */
  public static AptSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AptSettings.class);
  }

  /**
   * Convert an instance of AptSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

