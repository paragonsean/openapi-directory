/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FixedOrPercent from './FixedOrPercent';

/**
 * The PatchRollout model module.
 * @module model/PatchRollout
 * @version v1beta
 */
class PatchRollout {
    /**
     * Constructs a new <code>PatchRollout</code>.
     * Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
     * @alias module:model/PatchRollout
     */
    constructor() { 
        
        PatchRollout.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchRollout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchRollout} obj Optional instance to populate.
     * @return {module:model/PatchRollout} The populated <code>PatchRollout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchRollout();

            if (data.hasOwnProperty('disruptionBudget')) {
                obj['disruptionBudget'] = FixedOrPercent.constructFromObject(data['disruptionBudget']);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchRollout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchRollout</code>.
     */
    static validateJSON(data) {
        // validate the optional field `disruptionBudget`
        if (data['disruptionBudget']) { // data not null
          FixedOrPercent.validateJSON(data['disruptionBudget']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}



/**
 * @member {module:model/FixedOrPercent} disruptionBudget
 */
PatchRollout.prototype['disruptionBudget'] = undefined;

/**
 * Mode of the patch rollout.
 * @member {module:model/PatchRollout.ModeEnum} mode
 */
PatchRollout.prototype['mode'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
PatchRollout['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "ZONE_BY_ZONE"
     * @const
     */
    "ZONE_BY_ZONE": "ZONE_BY_ZONE",

    /**
     * value: "CONCURRENT_ZONES"
     * @const
     */
    "CONCURRENT_ZONES": "CONCURRENT_ZONES"
};



export default PatchRollout;

