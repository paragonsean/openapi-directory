/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignmentGroupLabel from './AssignmentGroupLabel';
import AssignmentOsType from './AssignmentOsType';

/**
 * The Assignment model module.
 * @module model/Assignment
 * @version v1beta
 */
class Assignment {
    /**
     * Constructs a new <code>Assignment</code>.
     * An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
     * @alias module:model/Assignment
     */
    constructor() { 
        
        Assignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Assignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assignment} obj Optional instance to populate.
     * @return {module:model/Assignment} The populated <code>Assignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assignment();

            if (data.hasOwnProperty('groupLabels')) {
                obj['groupLabels'] = ApiClient.convertToType(data['groupLabels'], [AssignmentGroupLabel]);
            }
            if (data.hasOwnProperty('instanceNamePrefixes')) {
                obj['instanceNamePrefixes'] = ApiClient.convertToType(data['instanceNamePrefixes'], ['String']);
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], ['String']);
            }
            if (data.hasOwnProperty('osTypes')) {
                obj['osTypes'] = ApiClient.convertToType(data['osTypes'], [AssignmentOsType]);
            }
            if (data.hasOwnProperty('zones')) {
                obj['zones'] = ApiClient.convertToType(data['zones'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assignment</code>.
     */
    static validateJSON(data) {
        if (data['groupLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupLabels'])) {
                throw new Error("Expected the field `groupLabels` to be an array in the JSON data but got " + data['groupLabels']);
            }
            // validate the optional field `groupLabels` (array)
            for (const item of data['groupLabels']) {
                AssignmentGroupLabel.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceNamePrefixes'])) {
            throw new Error("Expected the field `instanceNamePrefixes` to be an array in the JSON data but got " + data['instanceNamePrefixes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instances'])) {
            throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
        }
        if (data['osTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osTypes'])) {
                throw new Error("Expected the field `osTypes` to be an array in the JSON data but got " + data['osTypes']);
            }
            // validate the optional field `osTypes` (array)
            for (const item of data['osTypes']) {
                AssignmentOsType.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zones'])) {
            throw new Error("Expected the field `zones` to be an array in the JSON data but got " + data['zones']);
        }

        return true;
    }


}



/**
 * Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example \"env=prod or env=staging\".
 * @member {Array.<module:model/AssignmentGroupLabel>} groupLabels
 */
Assignment.prototype['groupLabels'] = undefined;

/**
 * Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix=\"prod-\". Only supported for project-level policies.
 * @member {Array.<String>} instanceNamePrefixes
 */
Assignment.prototype['instanceNamePrefixes'] = undefined;

/**
 * Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.
 * @member {Array.<String>} instances
 */
Assignment.prototype['instances'] = undefined;

/**
 * Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.
 * @member {Array.<module:model/AssignmentOsType>} osTypes
 */
Assignment.prototype['osTypes'] = undefined;

/**
 * Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.
 * @member {Array.<String>} zones
 */
Assignment.prototype['zones'] = undefined;






export default Assignment;

