/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AptSettings model module.
 * @module model/AptSettings
 * @version v1beta
 */
class AptSettings {
    /**
     * Constructs a new <code>AptSettings</code>.
     * Apt patching is completed by executing &#x60;apt-get update &amp;&amp; apt-get upgrade&#x60;. Additional options can be set to control how this is executed.
     * @alias module:model/AptSettings
     */
    constructor() { 
        
        AptSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AptSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AptSettings} obj Optional instance to populate.
     * @return {module:model/AptSettings} The populated <code>AptSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AptSettings();

            if (data.hasOwnProperty('excludes')) {
                obj['excludes'] = ApiClient.convertToType(data['excludes'], ['String']);
            }
            if (data.hasOwnProperty('exclusivePackages')) {
                obj['exclusivePackages'] = ApiClient.convertToType(data['exclusivePackages'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AptSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AptSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['excludes'])) {
            throw new Error("Expected the field `excludes` to be an array in the JSON data but got " + data['excludes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exclusivePackages'])) {
            throw new Error("Expected the field `exclusivePackages` to be an array in the JSON data but got " + data['exclusivePackages']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * List of packages to exclude from update. These packages will be excluded
 * @member {Array.<String>} excludes
 */
AptSettings.prototype['excludes'] = undefined;

/**
 * An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
 * @member {Array.<String>} exclusivePackages
 */
AptSettings.prototype['exclusivePackages'] = undefined;

/**
 * By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
 * @member {module:model/AptSettings.TypeEnum} type
 */
AptSettings.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AptSettings['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "DIST"
     * @const
     */
    "DIST": "DIST",

    /**
     * value: "UPGRADE"
     * @const
     */
    "UPGRADE": "UPGRADE"
};



export default AptSettings;

