/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OneTimeSchedule from './OneTimeSchedule';
import PatchConfig from './PatchConfig';
import PatchInstanceFilter from './PatchInstanceFilter';
import PatchRollout from './PatchRollout';
import RecurringSchedule from './RecurringSchedule';

/**
 * The PatchDeployment model module.
 * @module model/PatchDeployment
 * @version v1beta
 */
class PatchDeployment {
    /**
     * Constructs a new <code>PatchDeployment</code>.
     * Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs).
     * @alias module:model/PatchDeployment
     */
    constructor() { 
        
        PatchDeployment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchDeployment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchDeployment} obj Optional instance to populate.
     * @return {module:model/PatchDeployment} The populated <code>PatchDeployment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchDeployment();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('instanceFilter')) {
                obj['instanceFilter'] = PatchInstanceFilter.constructFromObject(data['instanceFilter']);
            }
            if (data.hasOwnProperty('lastExecuteTime')) {
                obj['lastExecuteTime'] = ApiClient.convertToType(data['lastExecuteTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oneTimeSchedule')) {
                obj['oneTimeSchedule'] = OneTimeSchedule.constructFromObject(data['oneTimeSchedule']);
            }
            if (data.hasOwnProperty('patchConfig')) {
                obj['patchConfig'] = PatchConfig.constructFromObject(data['patchConfig']);
            }
            if (data.hasOwnProperty('recurringSchedule')) {
                obj['recurringSchedule'] = RecurringSchedule.constructFromObject(data['recurringSchedule']);
            }
            if (data.hasOwnProperty('rollout')) {
                obj['rollout'] = PatchRollout.constructFromObject(data['rollout']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchDeployment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchDeployment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // validate the optional field `instanceFilter`
        if (data['instanceFilter']) { // data not null
          PatchInstanceFilter.validateJSON(data['instanceFilter']);
        }
        // ensure the json data is a string
        if (data['lastExecuteTime'] && !(typeof data['lastExecuteTime'] === 'string' || data['lastExecuteTime'] instanceof String)) {
            throw new Error("Expected the field `lastExecuteTime` to be a primitive type in the JSON string but got " + data['lastExecuteTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `oneTimeSchedule`
        if (data['oneTimeSchedule']) { // data not null
          OneTimeSchedule.validateJSON(data['oneTimeSchedule']);
        }
        // validate the optional field `patchConfig`
        if (data['patchConfig']) { // data not null
          PatchConfig.validateJSON(data['patchConfig']);
        }
        // validate the optional field `recurringSchedule`
        if (data['recurringSchedule']) { // data not null
          RecurringSchedule.validateJSON(data['recurringSchedule']);
        }
        // validate the optional field `rollout`
        if (data['rollout']) { // data not null
          PatchRollout.validateJSON(data['rollout']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 * @member {String} createTime
 */
PatchDeployment.prototype['createTime'] = undefined;

/**
 * Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
 * @member {String} description
 */
PatchDeployment.prototype['description'] = undefined;

/**
 * Optional. Duration of the patch. After the duration ends, the patch times out.
 * @member {String} duration
 */
PatchDeployment.prototype['duration'] = undefined;

/**
 * @member {module:model/PatchInstanceFilter} instanceFilter
 */
PatchDeployment.prototype['instanceFilter'] = undefined;

/**
 * Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 * @member {String} lastExecuteTime
 */
PatchDeployment.prototype['lastExecuteTime'] = undefined;

/**
 * Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
 * @member {String} name
 */
PatchDeployment.prototype['name'] = undefined;

/**
 * @member {module:model/OneTimeSchedule} oneTimeSchedule
 */
PatchDeployment.prototype['oneTimeSchedule'] = undefined;

/**
 * @member {module:model/PatchConfig} patchConfig
 */
PatchDeployment.prototype['patchConfig'] = undefined;

/**
 * @member {module:model/RecurringSchedule} recurringSchedule
 */
PatchDeployment.prototype['recurringSchedule'] = undefined;

/**
 * @member {module:model/PatchRollout} rollout
 */
PatchDeployment.prototype['rollout'] = undefined;

/**
 * Output only. Current state of the patch deployment.
 * @member {module:model/PatchDeployment.StateEnum} state
 */
PatchDeployment.prototype['state'] = undefined;

/**
 * Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 * @member {String} updateTime
 */
PatchDeployment.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PatchDeployment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED"
};



export default PatchDeployment;

