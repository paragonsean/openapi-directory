/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ZypperSettings model module.
 * @module model/ZypperSettings
 * @version v1beta
 */
class ZypperSettings {
    /**
     * Constructs a new <code>ZypperSettings</code>.
     * Zypper patching is performed by running &#x60;zypper patch&#x60;. See also https://en.opensuse.org/SDB:Zypper_manual.
     * @alias module:model/ZypperSettings
     */
    constructor() { 
        
        ZypperSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZypperSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZypperSettings} obj Optional instance to populate.
     * @return {module:model/ZypperSettings} The populated <code>ZypperSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZypperSettings();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('excludes')) {
                obj['excludes'] = ApiClient.convertToType(data['excludes'], ['String']);
            }
            if (data.hasOwnProperty('exclusivePatches')) {
                obj['exclusivePatches'] = ApiClient.convertToType(data['exclusivePatches'], ['String']);
            }
            if (data.hasOwnProperty('severities')) {
                obj['severities'] = ApiClient.convertToType(data['severities'], ['String']);
            }
            if (data.hasOwnProperty('withOptional')) {
                obj['withOptional'] = ApiClient.convertToType(data['withOptional'], 'Boolean');
            }
            if (data.hasOwnProperty('withUpdate')) {
                obj['withUpdate'] = ApiClient.convertToType(data['withUpdate'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZypperSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZypperSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludes'])) {
            throw new Error("Expected the field `excludes` to be an array in the JSON data but got " + data['excludes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exclusivePatches'])) {
            throw new Error("Expected the field `exclusivePatches` to be an array in the JSON data but got " + data['exclusivePatches']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['severities'])) {
            throw new Error("Expected the field `severities` to be an array in the JSON data but got " + data['severities']);
        }

        return true;
    }


}



/**
 * Install only patches with these categories. Common categories include security, recommended, and feature.
 * @member {Array.<String>} categories
 */
ZypperSettings.prototype['categories'] = undefined;

/**
 * List of patches to exclude from update.
 * @member {Array.<String>} excludes
 */
ZypperSettings.prototype['excludes'] = undefined;

/**
 * An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
 * @member {Array.<String>} exclusivePatches
 */
ZypperSettings.prototype['exclusivePatches'] = undefined;

/**
 * Install only patches with these severities. Common severities include critical, important, moderate, and low.
 * @member {Array.<String>} severities
 */
ZypperSettings.prototype['severities'] = undefined;

/**
 * Adds the `--with-optional` flag to `zypper patch`.
 * @member {Boolean} withOptional
 */
ZypperSettings.prototype['withOptional'] = undefined;

/**
 * Adds the `--with-update` flag, to `zypper patch`.
 * @member {Boolean} withUpdate
 */
ZypperSettings.prototype['withUpdate'] = undefined;






export default ZypperSettings;

