/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SoftwareRecipeArtifactGcs from './SoftwareRecipeArtifactGcs';
import SoftwareRecipeArtifactRemote from './SoftwareRecipeArtifactRemote';

/**
 * The SoftwareRecipeArtifact model module.
 * @module model/SoftwareRecipeArtifact
 * @version v1beta
 */
class SoftwareRecipeArtifact {
    /**
     * Constructs a new <code>SoftwareRecipeArtifact</code>.
     * Specifies a resource to be used in the recipe.
     * @alias module:model/SoftwareRecipeArtifact
     */
    constructor() { 
        
        SoftwareRecipeArtifact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoftwareRecipeArtifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoftwareRecipeArtifact} obj Optional instance to populate.
     * @return {module:model/SoftwareRecipeArtifact} The populated <code>SoftwareRecipeArtifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoftwareRecipeArtifact();

            if (data.hasOwnProperty('allowInsecure')) {
                obj['allowInsecure'] = ApiClient.convertToType(data['allowInsecure'], 'Boolean');
            }
            if (data.hasOwnProperty('gcs')) {
                obj['gcs'] = SoftwareRecipeArtifactGcs.constructFromObject(data['gcs']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('remote')) {
                obj['remote'] = SoftwareRecipeArtifactRemote.constructFromObject(data['remote']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoftwareRecipeArtifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoftwareRecipeArtifact</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gcs`
        if (data['gcs']) { // data not null
          SoftwareRecipeArtifactGcs.validateJSON(data['gcs']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `remote`
        if (data['remote']) { // data not null
          SoftwareRecipeArtifactRemote.validateJSON(data['remote']);
        }

        return true;
    }


}



/**
 * Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.
 * @member {Boolean} allowInsecure
 */
SoftwareRecipeArtifact.prototype['allowInsecure'] = undefined;

/**
 * @member {module:model/SoftwareRecipeArtifactGcs} gcs
 */
SoftwareRecipeArtifact.prototype['gcs'] = undefined;

/**
 * Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.
 * @member {String} id
 */
SoftwareRecipeArtifact.prototype['id'] = undefined;

/**
 * @member {module:model/SoftwareRecipeArtifactRemote} remote
 */
SoftwareRecipeArtifact.prototype['remote'] = undefined;






export default SoftwareRecipeArtifact;

