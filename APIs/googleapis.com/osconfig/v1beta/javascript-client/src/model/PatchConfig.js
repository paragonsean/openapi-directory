/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AptSettings from './AptSettings';
import ExecStep from './ExecStep';
import WindowsUpdateSettings from './WindowsUpdateSettings';
import YumSettings from './YumSettings';
import ZypperSettings from './ZypperSettings';

/**
 * The PatchConfig model module.
 * @module model/PatchConfig
 * @version v1beta
 */
class PatchConfig {
    /**
     * Constructs a new <code>PatchConfig</code>.
     * Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
     * @alias module:model/PatchConfig
     */
    constructor() { 
        
        PatchConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchConfig} obj Optional instance to populate.
     * @return {module:model/PatchConfig} The populated <code>PatchConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchConfig();

            if (data.hasOwnProperty('apt')) {
                obj['apt'] = AptSettings.constructFromObject(data['apt']);
            }
            if (data.hasOwnProperty('goo')) {
                obj['goo'] = ApiClient.convertToType(data['goo'], Object);
            }
            if (data.hasOwnProperty('migInstancesAllowed')) {
                obj['migInstancesAllowed'] = ApiClient.convertToType(data['migInstancesAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('postStep')) {
                obj['postStep'] = ExecStep.constructFromObject(data['postStep']);
            }
            if (data.hasOwnProperty('preStep')) {
                obj['preStep'] = ExecStep.constructFromObject(data['preStep']);
            }
            if (data.hasOwnProperty('rebootConfig')) {
                obj['rebootConfig'] = ApiClient.convertToType(data['rebootConfig'], 'String');
            }
            if (data.hasOwnProperty('windowsUpdate')) {
                obj['windowsUpdate'] = WindowsUpdateSettings.constructFromObject(data['windowsUpdate']);
            }
            if (data.hasOwnProperty('yum')) {
                obj['yum'] = YumSettings.constructFromObject(data['yum']);
            }
            if (data.hasOwnProperty('zypper')) {
                obj['zypper'] = ZypperSettings.constructFromObject(data['zypper']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `apt`
        if (data['apt']) { // data not null
          AptSettings.validateJSON(data['apt']);
        }
        // validate the optional field `postStep`
        if (data['postStep']) { // data not null
          ExecStep.validateJSON(data['postStep']);
        }
        // validate the optional field `preStep`
        if (data['preStep']) { // data not null
          ExecStep.validateJSON(data['preStep']);
        }
        // ensure the json data is a string
        if (data['rebootConfig'] && !(typeof data['rebootConfig'] === 'string' || data['rebootConfig'] instanceof String)) {
            throw new Error("Expected the field `rebootConfig` to be a primitive type in the JSON string but got " + data['rebootConfig']);
        }
        // validate the optional field `windowsUpdate`
        if (data['windowsUpdate']) { // data not null
          WindowsUpdateSettings.validateJSON(data['windowsUpdate']);
        }
        // validate the optional field `yum`
        if (data['yum']) { // data not null
          YumSettings.validateJSON(data['yum']);
        }
        // validate the optional field `zypper`
        if (data['zypper']) { // data not null
          ZypperSettings.validateJSON(data['zypper']);
        }

        return true;
    }


}



/**
 * @member {module:model/AptSettings} apt
 */
PatchConfig.prototype['apt'] = undefined;

/**
 * Googet patching is performed by running `googet update`.
 * @member {Object} goo
 */
PatchConfig.prototype['goo'] = undefined;

/**
 * Allows the patch job to run on Managed instance groups (MIGs).
 * @member {Boolean} migInstancesAllowed
 */
PatchConfig.prototype['migInstancesAllowed'] = undefined;

/**
 * @member {module:model/ExecStep} postStep
 */
PatchConfig.prototype['postStep'] = undefined;

/**
 * @member {module:model/ExecStep} preStep
 */
PatchConfig.prototype['preStep'] = undefined;

/**
 * Post-patch reboot settings.
 * @member {module:model/PatchConfig.RebootConfigEnum} rebootConfig
 */
PatchConfig.prototype['rebootConfig'] = undefined;

/**
 * @member {module:model/WindowsUpdateSettings} windowsUpdate
 */
PatchConfig.prototype['windowsUpdate'] = undefined;

/**
 * @member {module:model/YumSettings} yum
 */
PatchConfig.prototype['yum'] = undefined;

/**
 * @member {module:model/ZypperSettings} zypper
 */
PatchConfig.prototype['zypper'] = undefined;





/**
 * Allowed values for the <code>rebootConfig</code> property.
 * @enum {String}
 * @readonly
 */
PatchConfig['RebootConfigEnum'] = {

    /**
     * value: "REBOOT_CONFIG_UNSPECIFIED"
     * @const
     */
    "REBOOT_CONFIG_UNSPECIFIED": "REBOOT_CONFIG_UNSPECIFIED",

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "ALWAYS"
     * @const
     */
    "ALWAYS": "ALWAYS",

    /**
     * value: "NEVER"
     * @const
     */
    "NEVER": "NEVER"
};



export default PatchConfig;

