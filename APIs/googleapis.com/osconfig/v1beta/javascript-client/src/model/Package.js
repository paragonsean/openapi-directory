/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Package model module.
 * @module model/Package
 * @version v1beta
 */
class Package {
    /**
     * Constructs a new <code>Package</code>.
     * Package is a reference to the software package to be installed or removed. The agent on the VM instance uses the system package manager to apply the config. These are the commands that the agent uses to install or remove packages. Apt install: &#x60;apt-get update &amp;&amp; apt-get -y install package1 package2 package3&#x60; remove: &#x60;apt-get -y remove package1 package2 package3&#x60; Yum install: &#x60;yum -y install package1 package2 package3&#x60; remove: &#x60;yum -y remove package1 package2 package3&#x60; Zypper install: &#x60;zypper install package1 package2 package3&#x60; remove: &#x60;zypper rm package1 package2&#x60; Googet install: &#x60;googet -noconfirm install package1 package2 package3&#x60; remove: &#x60;googet -noconfirm remove package1 package2 package3&#x60;
     * @alias module:model/Package
     */
    constructor() { 
        
        Package.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Package</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Package} obj Optional instance to populate.
     * @return {module:model/Package} The populated <code>Package</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Package();

            if (data.hasOwnProperty('desiredState')) {
                obj['desiredState'] = ApiClient.convertToType(data['desiredState'], 'String');
            }
            if (data.hasOwnProperty('manager')) {
                obj['manager'] = ApiClient.convertToType(data['manager'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Package</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Package</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['desiredState'] && !(typeof data['desiredState'] === 'string' || data['desiredState'] instanceof String)) {
            throw new Error("Expected the field `desiredState` to be a primitive type in the JSON string but got " + data['desiredState']);
        }
        // ensure the json data is a string
        if (data['manager'] && !(typeof data['manager'] === 'string' || data['manager'] instanceof String)) {
            throw new Error("Expected the field `manager` to be a primitive type in the JSON string but got " + data['manager']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
 * @member {module:model/Package.DesiredStateEnum} desiredState
 */
Package.prototype['desiredState'] = undefined;

/**
 * Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
 * @member {module:model/Package.ManagerEnum} manager
 */
Package.prototype['manager'] = undefined;

/**
 * Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.
 * @member {String} name
 */
Package.prototype['name'] = undefined;





/**
 * Allowed values for the <code>desiredState</code> property.
 * @enum {String}
 * @readonly
 */
Package['DesiredStateEnum'] = {

    /**
     * value: "DESIRED_STATE_UNSPECIFIED"
     * @const
     */
    "DESIRED_STATE_UNSPECIFIED": "DESIRED_STATE_UNSPECIFIED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "UPDATED"
     * @const
     */
    "UPDATED": "UPDATED",

    /**
     * value: "REMOVED"
     * @const
     */
    "REMOVED": "REMOVED"
};


/**
 * Allowed values for the <code>manager</code> property.
 * @enum {String}
 * @readonly
 */
Package['ManagerEnum'] = {

    /**
     * value: "MANAGER_UNSPECIFIED"
     * @const
     */
    "MANAGER_UNSPECIFIED": "MANAGER_UNSPECIFIED",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY",

    /**
     * value: "APT"
     * @const
     */
    "APT": "APT",

    /**
     * value: "YUM"
     * @const
     */
    "YUM": "YUM",

    /**
     * value: "ZYPPER"
     * @const
     */
    "ZYPPER": "ZYPPER",

    /**
     * value: "GOO"
     * @const
     */
    "GOO": "GOO"
};



export default Package;

