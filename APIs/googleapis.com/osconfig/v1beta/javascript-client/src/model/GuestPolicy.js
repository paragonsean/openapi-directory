/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assignment from './Assignment';
import Package from './Package';
import PackageRepository from './PackageRepository';
import SoftwareRecipe from './SoftwareRecipe';

/**
 * The GuestPolicy model module.
 * @module model/GuestPolicy
 * @version v1beta
 */
class GuestPolicy {
    /**
     * Constructs a new <code>GuestPolicy</code>.
     * An OS Config resource representing a guest configuration policy. These policies represent the desired state for VM instance guest environments including packages to install or remove, package repository configurations, and software to install.
     * @alias module:model/GuestPolicy
     */
    constructor() { 
        
        GuestPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GuestPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GuestPolicy} obj Optional instance to populate.
     * @return {module:model/GuestPolicy} The populated <code>GuestPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GuestPolicy();

            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = Assignment.constructFromObject(data['assignment']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('packageRepositories')) {
                obj['packageRepositories'] = ApiClient.convertToType(data['packageRepositories'], [PackageRepository]);
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [Package]);
            }
            if (data.hasOwnProperty('recipes')) {
                obj['recipes'] = ApiClient.convertToType(data['recipes'], [SoftwareRecipe]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GuestPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GuestPolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignment`
        if (data['assignment']) { // data not null
          Assignment.validateJSON(data['assignment']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['packageRepositories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packageRepositories'])) {
                throw new Error("Expected the field `packageRepositories` to be an array in the JSON data but got " + data['packageRepositories']);
            }
            // validate the optional field `packageRepositories` (array)
            for (const item of data['packageRepositories']) {
                PackageRepository.validateJSON(item);
            };
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                Package.validateJSON(item);
            };
        }
        if (data['recipes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipes'])) {
                throw new Error("Expected the field `recipes` to be an array in the JSON data but got " + data['recipes']);
            }
            // validate the optional field `recipes` (array)
            for (const item of data['recipes']) {
                SoftwareRecipe.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/Assignment} assignment
 */
GuestPolicy.prototype['assignment'] = undefined;

/**
 * Output only. Time this guest policy was created.
 * @member {String} createTime
 */
GuestPolicy.prototype['createTime'] = undefined;

/**
 * Description of the guest policy. Length of the description is limited to 1024 characters.
 * @member {String} description
 */
GuestPolicy.prototype['description'] = undefined;

/**
 * The etag for this guest policy. If this is provided on update, it must match the server's etag.
 * @member {String} etag
 */
GuestPolicy.prototype['etag'] = undefined;

/**
 * Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
 * @member {String} name
 */
GuestPolicy.prototype['name'] = undefined;

/**
 * A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
 * @member {Array.<module:model/PackageRepository>} packageRepositories
 */
GuestPolicy.prototype['packageRepositories'] = undefined;

/**
 * The software packages to be managed by this policy.
 * @member {Array.<module:model/Package>} packages
 */
GuestPolicy.prototype['packages'] = undefined;

/**
 * A list of Recipes to install on the VM instance.
 * @member {Array.<module:model/SoftwareRecipe>} recipes
 */
GuestPolicy.prototype['recipes'] = undefined;

/**
 * Output only. Last time this guest policy was updated.
 * @member {String} updateTime
 */
GuestPolicy.prototype['updateTime'] = undefined;






export default GuestPolicy;

