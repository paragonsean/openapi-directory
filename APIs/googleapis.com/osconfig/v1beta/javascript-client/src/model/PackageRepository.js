/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AptRepository from './AptRepository';
import GooRepository from './GooRepository';
import YumRepository from './YumRepository';
import ZypperRepository from './ZypperRepository';

/**
 * The PackageRepository model module.
 * @module model/PackageRepository
 * @version v1beta
 */
class PackageRepository {
    /**
     * Constructs a new <code>PackageRepository</code>.
     * A package repository.
     * @alias module:model/PackageRepository
     */
    constructor() { 
        
        PackageRepository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageRepository} obj Optional instance to populate.
     * @return {module:model/PackageRepository} The populated <code>PackageRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageRepository();

            if (data.hasOwnProperty('apt')) {
                obj['apt'] = AptRepository.constructFromObject(data['apt']);
            }
            if (data.hasOwnProperty('goo')) {
                obj['goo'] = GooRepository.constructFromObject(data['goo']);
            }
            if (data.hasOwnProperty('yum')) {
                obj['yum'] = YumRepository.constructFromObject(data['yum']);
            }
            if (data.hasOwnProperty('zypper')) {
                obj['zypper'] = ZypperRepository.constructFromObject(data['zypper']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageRepository</code>.
     */
    static validateJSON(data) {
        // validate the optional field `apt`
        if (data['apt']) { // data not null
          AptRepository.validateJSON(data['apt']);
        }
        // validate the optional field `goo`
        if (data['goo']) { // data not null
          GooRepository.validateJSON(data['goo']);
        }
        // validate the optional field `yum`
        if (data['yum']) { // data not null
          YumRepository.validateJSON(data['yum']);
        }
        // validate the optional field `zypper`
        if (data['zypper']) { // data not null
          ZypperRepository.validateJSON(data['zypper']);
        }

        return true;
    }


}



/**
 * @member {module:model/AptRepository} apt
 */
PackageRepository.prototype['apt'] = undefined;

/**
 * @member {module:model/GooRepository} goo
 */
PackageRepository.prototype['goo'] = undefined;

/**
 * @member {module:model/YumRepository} yum
 */
PackageRepository.prototype['yum'] = undefined;

/**
 * @member {module:model/ZypperRepository} zypper
 */
PackageRepository.prototype['zypper'] = undefined;






export default PackageRepository;

