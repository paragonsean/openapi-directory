/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LookupEffectiveGuestPolicyRequest model module.
 * @module model/LookupEffectiveGuestPolicyRequest
 * @version v1beta
 */
class LookupEffectiveGuestPolicyRequest {
    /**
     * Constructs a new <code>LookupEffectiveGuestPolicyRequest</code>.
     * A request message for getting the effective guest policy assigned to the instance.
     * @alias module:model/LookupEffectiveGuestPolicyRequest
     */
    constructor() { 
        
        LookupEffectiveGuestPolicyRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LookupEffectiveGuestPolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LookupEffectiveGuestPolicyRequest} obj Optional instance to populate.
     * @return {module:model/LookupEffectiveGuestPolicyRequest} The populated <code>LookupEffectiveGuestPolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LookupEffectiveGuestPolicyRequest();

            if (data.hasOwnProperty('osArchitecture')) {
                obj['osArchitecture'] = ApiClient.convertToType(data['osArchitecture'], 'String');
            }
            if (data.hasOwnProperty('osShortName')) {
                obj['osShortName'] = ApiClient.convertToType(data['osShortName'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LookupEffectiveGuestPolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LookupEffectiveGuestPolicyRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['osArchitecture'] && !(typeof data['osArchitecture'] === 'string' || data['osArchitecture'] instanceof String)) {
            throw new Error("Expected the field `osArchitecture` to be a primitive type in the JSON string but got " + data['osArchitecture']);
        }
        // ensure the json data is a string
        if (data['osShortName'] && !(typeof data['osShortName'] === 'string' || data['osShortName'] instanceof String)) {
            throw new Error("Expected the field `osShortName` to be a primitive type in the JSON string but got " + data['osShortName']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }

        return true;
    }


}



/**
 * Architecture of OS running on the instance. The OS Config agent only provides this field for targeting if OS Inventory is enabled for that instance.
 * @member {String} osArchitecture
 */
LookupEffectiveGuestPolicyRequest.prototype['osArchitecture'] = undefined;

/**
 * Short name of the OS running on the instance. The OS Config agent only provides this field for targeting if OS Inventory is enabled for that instance.
 * @member {String} osShortName
 */
LookupEffectiveGuestPolicyRequest.prototype['osShortName'] = undefined;

/**
 * Version of the OS running on the instance. The OS Config agent only provides this field for targeting if OS Inventory is enabled for that VM instance.
 * @member {String} osVersion
 */
LookupEffectiveGuestPolicyRequest.prototype['osVersion'] = undefined;






export default LookupEffectiveGuestPolicyRequest;

