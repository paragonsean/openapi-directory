/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SoftwareRecipeStepCopyFile from './SoftwareRecipeStepCopyFile';
import SoftwareRecipeStepExecFile from './SoftwareRecipeStepExecFile';
import SoftwareRecipeStepExtractArchive from './SoftwareRecipeStepExtractArchive';
import SoftwareRecipeStepInstallDpkg from './SoftwareRecipeStepInstallDpkg';
import SoftwareRecipeStepInstallMsi from './SoftwareRecipeStepInstallMsi';
import SoftwareRecipeStepInstallRpm from './SoftwareRecipeStepInstallRpm';
import SoftwareRecipeStepRunScript from './SoftwareRecipeStepRunScript';

/**
 * The SoftwareRecipeStep model module.
 * @module model/SoftwareRecipeStep
 * @version v1beta
 */
class SoftwareRecipeStep {
    /**
     * Constructs a new <code>SoftwareRecipeStep</code>.
     * An action that can be taken as part of installing or updating a recipe.
     * @alias module:model/SoftwareRecipeStep
     */
    constructor() { 
        
        SoftwareRecipeStep.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoftwareRecipeStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoftwareRecipeStep} obj Optional instance to populate.
     * @return {module:model/SoftwareRecipeStep} The populated <code>SoftwareRecipeStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoftwareRecipeStep();

            if (data.hasOwnProperty('archiveExtraction')) {
                obj['archiveExtraction'] = SoftwareRecipeStepExtractArchive.constructFromObject(data['archiveExtraction']);
            }
            if (data.hasOwnProperty('dpkgInstallation')) {
                obj['dpkgInstallation'] = SoftwareRecipeStepInstallDpkg.constructFromObject(data['dpkgInstallation']);
            }
            if (data.hasOwnProperty('fileCopy')) {
                obj['fileCopy'] = SoftwareRecipeStepCopyFile.constructFromObject(data['fileCopy']);
            }
            if (data.hasOwnProperty('fileExec')) {
                obj['fileExec'] = SoftwareRecipeStepExecFile.constructFromObject(data['fileExec']);
            }
            if (data.hasOwnProperty('msiInstallation')) {
                obj['msiInstallation'] = SoftwareRecipeStepInstallMsi.constructFromObject(data['msiInstallation']);
            }
            if (data.hasOwnProperty('rpmInstallation')) {
                obj['rpmInstallation'] = SoftwareRecipeStepInstallRpm.constructFromObject(data['rpmInstallation']);
            }
            if (data.hasOwnProperty('scriptRun')) {
                obj['scriptRun'] = SoftwareRecipeStepRunScript.constructFromObject(data['scriptRun']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoftwareRecipeStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoftwareRecipeStep</code>.
     */
    static validateJSON(data) {
        // validate the optional field `archiveExtraction`
        if (data['archiveExtraction']) { // data not null
          SoftwareRecipeStepExtractArchive.validateJSON(data['archiveExtraction']);
        }
        // validate the optional field `dpkgInstallation`
        if (data['dpkgInstallation']) { // data not null
          SoftwareRecipeStepInstallDpkg.validateJSON(data['dpkgInstallation']);
        }
        // validate the optional field `fileCopy`
        if (data['fileCopy']) { // data not null
          SoftwareRecipeStepCopyFile.validateJSON(data['fileCopy']);
        }
        // validate the optional field `fileExec`
        if (data['fileExec']) { // data not null
          SoftwareRecipeStepExecFile.validateJSON(data['fileExec']);
        }
        // validate the optional field `msiInstallation`
        if (data['msiInstallation']) { // data not null
          SoftwareRecipeStepInstallMsi.validateJSON(data['msiInstallation']);
        }
        // validate the optional field `rpmInstallation`
        if (data['rpmInstallation']) { // data not null
          SoftwareRecipeStepInstallRpm.validateJSON(data['rpmInstallation']);
        }
        // validate the optional field `scriptRun`
        if (data['scriptRun']) { // data not null
          SoftwareRecipeStepRunScript.validateJSON(data['scriptRun']);
        }

        return true;
    }


}



/**
 * @member {module:model/SoftwareRecipeStepExtractArchive} archiveExtraction
 */
SoftwareRecipeStep.prototype['archiveExtraction'] = undefined;

/**
 * @member {module:model/SoftwareRecipeStepInstallDpkg} dpkgInstallation
 */
SoftwareRecipeStep.prototype['dpkgInstallation'] = undefined;

/**
 * @member {module:model/SoftwareRecipeStepCopyFile} fileCopy
 */
SoftwareRecipeStep.prototype['fileCopy'] = undefined;

/**
 * @member {module:model/SoftwareRecipeStepExecFile} fileExec
 */
SoftwareRecipeStep.prototype['fileExec'] = undefined;

/**
 * @member {module:model/SoftwareRecipeStepInstallMsi} msiInstallation
 */
SoftwareRecipeStep.prototype['msiInstallation'] = undefined;

/**
 * @member {module:model/SoftwareRecipeStepInstallRpm} rpmInstallation
 */
SoftwareRecipeStep.prototype['rpmInstallation'] = undefined;

/**
 * @member {module:model/SoftwareRecipeStepRunScript} scriptRun
 */
SoftwareRecipeStep.prototype['scriptRun'] = undefined;






export default SoftwareRecipeStep;

