/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchConfig from './PatchConfig';
import PatchInstanceFilter from './PatchInstanceFilter';
import PatchJobInstanceDetailsSummary from './PatchJobInstanceDetailsSummary';
import PatchRollout from './PatchRollout';

/**
 * The PatchJob model module.
 * @module model/PatchJob
 * @version v1beta
 */
class PatchJob {
    /**
     * Constructs a new <code>PatchJob</code>.
     * A high level representation of a patch job that is either in progress or has completed. Instance details are not included in the job. To paginate through instance details, use &#x60;ListPatchJobInstanceDetails&#x60;. For more information about patch jobs, see [Creating patch jobs](https://cloud.google.com/compute/docs/os-patch-management/create-patch-job).
     * @alias module:model/PatchJob
     */
    constructor() { 
        
        PatchJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchJob} obj Optional instance to populate.
     * @return {module:model/PatchJob} The populated <code>PatchJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchJob();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('dryRun')) {
                obj['dryRun'] = ApiClient.convertToType(data['dryRun'], 'Boolean');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('instanceDetailsSummary')) {
                obj['instanceDetailsSummary'] = PatchJobInstanceDetailsSummary.constructFromObject(data['instanceDetailsSummary']);
            }
            if (data.hasOwnProperty('instanceFilter')) {
                obj['instanceFilter'] = PatchInstanceFilter.constructFromObject(data['instanceFilter']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('patchConfig')) {
                obj['patchConfig'] = PatchConfig.constructFromObject(data['patchConfig']);
            }
            if (data.hasOwnProperty('patchDeployment')) {
                obj['patchDeployment'] = ApiClient.convertToType(data['patchDeployment'], 'String');
            }
            if (data.hasOwnProperty('percentComplete')) {
                obj['percentComplete'] = ApiClient.convertToType(data['percentComplete'], 'Number');
            }
            if (data.hasOwnProperty('rollout')) {
                obj['rollout'] = PatchRollout.constructFromObject(data['rollout']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // validate the optional field `instanceDetailsSummary`
        if (data['instanceDetailsSummary']) { // data not null
          PatchJobInstanceDetailsSummary.validateJSON(data['instanceDetailsSummary']);
        }
        // validate the optional field `instanceFilter`
        if (data['instanceFilter']) { // data not null
          PatchInstanceFilter.validateJSON(data['instanceFilter']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `patchConfig`
        if (data['patchConfig']) { // data not null
          PatchConfig.validateJSON(data['patchConfig']);
        }
        // ensure the json data is a string
        if (data['patchDeployment'] && !(typeof data['patchDeployment'] === 'string' || data['patchDeployment'] instanceof String)) {
            throw new Error("Expected the field `patchDeployment` to be a primitive type in the JSON string but got " + data['patchDeployment']);
        }
        // validate the optional field `rollout`
        if (data['rollout']) { // data not null
          PatchRollout.validateJSON(data['rollout']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Time this patch job was created.
 * @member {String} createTime
 */
PatchJob.prototype['createTime'] = undefined;

/**
 * Description of the patch job. Length of the description is limited to 1024 characters.
 * @member {String} description
 */
PatchJob.prototype['description'] = undefined;

/**
 * Display name for this patch job. This is not a unique identifier.
 * @member {String} displayName
 */
PatchJob.prototype['displayName'] = undefined;

/**
 * If this patch job is a dry run, the agent reports that it has finished without running any updates on the VM instance.
 * @member {Boolean} dryRun
 */
PatchJob.prototype['dryRun'] = undefined;

/**
 * Duration of the patch job. After the duration ends, the patch job times out.
 * @member {String} duration
 */
PatchJob.prototype['duration'] = undefined;

/**
 * If this patch job failed, this message provides information about the failure.
 * @member {String} errorMessage
 */
PatchJob.prototype['errorMessage'] = undefined;

/**
 * @member {module:model/PatchJobInstanceDetailsSummary} instanceDetailsSummary
 */
PatchJob.prototype['instanceDetailsSummary'] = undefined;

/**
 * @member {module:model/PatchInstanceFilter} instanceFilter
 */
PatchJob.prototype['instanceFilter'] = undefined;

/**
 * Unique identifier for this patch job in the form `projects/_*_/patchJobs/_*`
 * @member {String} name
 */
PatchJob.prototype['name'] = undefined;

/**
 * @member {module:model/PatchConfig} patchConfig
 */
PatchJob.prototype['patchConfig'] = undefined;

/**
 * Output only. Name of the patch deployment that created this patch job.
 * @member {String} patchDeployment
 */
PatchJob.prototype['patchDeployment'] = undefined;

/**
 * Reflects the overall progress of the patch job in the range of 0.0 being no progress to 100.0 being complete.
 * @member {Number} percentComplete
 */
PatchJob.prototype['percentComplete'] = undefined;

/**
 * @member {module:model/PatchRollout} rollout
 */
PatchJob.prototype['rollout'] = undefined;

/**
 * The current state of the PatchJob.
 * @member {module:model/PatchJob.StateEnum} state
 */
PatchJob.prototype['state'] = undefined;

/**
 * Last time this patch job was updated.
 * @member {String} updateTime
 */
PatchJob.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PatchJob['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "STARTED"
     * @const
     */
    "STARTED": "STARTED",

    /**
     * value: "INSTANCE_LOOKUP"
     * @const
     */
    "INSTANCE_LOOKUP": "INSTANCE_LOOKUP",

    /**
     * value: "PATCHING"
     * @const
     */
    "PATCHING": "PATCHING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "COMPLETED_WITH_ERRORS"
     * @const
     */
    "COMPLETED_WITH_ERRORS": "COMPLETED_WITH_ERRORS",

    /**
     * value: "CANCELED"
     * @const
     */
    "CANCELED": "CANCELED",

    /**
     * value: "TIMED_OUT"
     * @const
     */
    "TIMED_OUT": "TIMED_OUT"
};



export default PatchJob;

