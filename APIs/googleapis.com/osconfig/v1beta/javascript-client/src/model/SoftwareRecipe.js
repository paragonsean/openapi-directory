/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SoftwareRecipeArtifact from './SoftwareRecipeArtifact';
import SoftwareRecipeStep from './SoftwareRecipeStep';

/**
 * The SoftwareRecipe model module.
 * @module model/SoftwareRecipe
 * @version v1beta
 */
class SoftwareRecipe {
    /**
     * Constructs a new <code>SoftwareRecipe</code>.
     * A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is &#x60;UPDATED&#x60;, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
     * @alias module:model/SoftwareRecipe
     */
    constructor() { 
        
        SoftwareRecipe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoftwareRecipe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoftwareRecipe} obj Optional instance to populate.
     * @return {module:model/SoftwareRecipe} The populated <code>SoftwareRecipe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoftwareRecipe();

            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], [SoftwareRecipeArtifact]);
            }
            if (data.hasOwnProperty('desiredState')) {
                obj['desiredState'] = ApiClient.convertToType(data['desiredState'], 'String');
            }
            if (data.hasOwnProperty('installSteps')) {
                obj['installSteps'] = ApiClient.convertToType(data['installSteps'], [SoftwareRecipeStep]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateSteps')) {
                obj['updateSteps'] = ApiClient.convertToType(data['updateSteps'], [SoftwareRecipeStep]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoftwareRecipe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoftwareRecipe</code>.
     */
    static validateJSON(data) {
        if (data['artifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artifacts'])) {
                throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
            }
            // validate the optional field `artifacts` (array)
            for (const item of data['artifacts']) {
                SoftwareRecipeArtifact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['desiredState'] && !(typeof data['desiredState'] === 'string' || data['desiredState'] instanceof String)) {
            throw new Error("Expected the field `desiredState` to be a primitive type in the JSON string but got " + data['desiredState']);
        }
        if (data['installSteps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['installSteps'])) {
                throw new Error("Expected the field `installSteps` to be an array in the JSON data but got " + data['installSteps']);
            }
            // validate the optional field `installSteps` (array)
            for (const item of data['installSteps']) {
                SoftwareRecipeStep.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['updateSteps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['updateSteps'])) {
                throw new Error("Expected the field `updateSteps` to be an array in the JSON data but got " + data['updateSteps']);
            }
            // validate the optional field `updateSteps` (array)
            for (const item of data['updateSteps']) {
                SoftwareRecipeStep.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Resources available to be used in the steps in the recipe.
 * @member {Array.<module:model/SoftwareRecipeArtifact>} artifacts
 */
SoftwareRecipe.prototype['artifacts'] = undefined;

/**
 * Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
 * @member {module:model/SoftwareRecipe.DesiredStateEnum} desiredState
 */
SoftwareRecipe.prototype['desiredState'] = undefined;

/**
 * Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.
 * @member {Array.<module:model/SoftwareRecipeStep>} installSteps
 */
SoftwareRecipe.prototype['installSteps'] = undefined;

/**
 * Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.
 * @member {String} name
 */
SoftwareRecipe.prototype['name'] = undefined;

/**
 * Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.
 * @member {Array.<module:model/SoftwareRecipeStep>} updateSteps
 */
SoftwareRecipe.prototype['updateSteps'] = undefined;

/**
 * The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).
 * @member {String} version
 */
SoftwareRecipe.prototype['version'] = undefined;





/**
 * Allowed values for the <code>desiredState</code> property.
 * @enum {String}
 * @readonly
 */
SoftwareRecipe['DesiredStateEnum'] = {

    /**
     * value: "DESIRED_STATE_UNSPECIFIED"
     * @const
     */
    "DESIRED_STATE_UNSPECIFIED": "DESIRED_STATE_UNSPECIFIED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "UPDATED"
     * @const
     */
    "UPDATED": "UPDATED",

    /**
     * value: "REMOVED"
     * @const
     */
    "REMOVED": "REMOVED"
};



export default SoftwareRecipe;

