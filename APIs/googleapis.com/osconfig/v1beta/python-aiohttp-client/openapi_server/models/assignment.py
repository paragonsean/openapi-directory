# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_group_label import AssignmentGroupLabel
from openapi_server.models.assignment_os_type import AssignmentOsType
from openapi_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_labels: List[AssignmentGroupLabel]=None, instance_name_prefixes: List[str]=None, instances: List[str]=None, os_types: List[AssignmentOsType]=None, zones: List[str]=None):
        """Assignment - a model defined in OpenAPI

        :param group_labels: The group_labels of this Assignment.
        :param instance_name_prefixes: The instance_name_prefixes of this Assignment.
        :param instances: The instances of this Assignment.
        :param os_types: The os_types of this Assignment.
        :param zones: The zones of this Assignment.
        """
        self.openapi_types = {
            'group_labels': List[AssignmentGroupLabel],
            'instance_name_prefixes': List[str],
            'instances': List[str],
            'os_types': List[AssignmentOsType],
            'zones': List[str]
        }

        self.attribute_map = {
            'group_labels': 'groupLabels',
            'instance_name_prefixes': 'instanceNamePrefixes',
            'instances': 'instances',
            'os_types': 'osTypes',
            'zones': 'zones'
        }

        self._group_labels = group_labels
        self._instance_name_prefixes = instance_name_prefixes
        self._instances = instances
        self._os_types = os_types
        self._zones = zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assignment of this Assignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_labels(self):
        """Gets the group_labels of this Assignment.

        Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example \"env=prod or env=staging\".

        :return: The group_labels of this Assignment.
        :rtype: List[AssignmentGroupLabel]
        """
        return self._group_labels

    @group_labels.setter
    def group_labels(self, group_labels):
        """Sets the group_labels of this Assignment.

        Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example \"env=prod or env=staging\".

        :param group_labels: The group_labels of this Assignment.
        :type group_labels: List[AssignmentGroupLabel]
        """

        self._group_labels = group_labels

    @property
    def instance_name_prefixes(self):
        """Gets the instance_name_prefixes of this Assignment.

        Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix=\"prod-\". Only supported for project-level policies.

        :return: The instance_name_prefixes of this Assignment.
        :rtype: List[str]
        """
        return self._instance_name_prefixes

    @instance_name_prefixes.setter
    def instance_name_prefixes(self, instance_name_prefixes):
        """Sets the instance_name_prefixes of this Assignment.

        Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix=\"prod-\". Only supported for project-level policies.

        :param instance_name_prefixes: The instance_name_prefixes of this Assignment.
        :type instance_name_prefixes: List[str]
        """

        self._instance_name_prefixes = instance_name_prefixes

    @property
    def instances(self):
        """Gets the instances of this Assignment.

        Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.

        :return: The instances of this Assignment.
        :rtype: List[str]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Assignment.

        Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.

        :param instances: The instances of this Assignment.
        :type instances: List[str]
        """

        self._instances = instances

    @property
    def os_types(self):
        """Gets the os_types of this Assignment.

        Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.

        :return: The os_types of this Assignment.
        :rtype: List[AssignmentOsType]
        """
        return self._os_types

    @os_types.setter
    def os_types(self, os_types):
        """Sets the os_types of this Assignment.

        Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.

        :param os_types: The os_types of this Assignment.
        :type os_types: List[AssignmentOsType]
        """

        self._os_types = os_types

    @property
    def zones(self):
        """Gets the zones of this Assignment.

        Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.

        :return: The zones of this Assignment.
        :rtype: List[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this Assignment.

        Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.

        :param zones: The zones of this Assignment.
        :type zones: List[str]
        """

        self._zones = zones
