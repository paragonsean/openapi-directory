# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_config import PatchConfig
from openapi_server.models.patch_instance_filter import PatchInstanceFilter
from openapi_server.models.patch_rollout import PatchRollout
from openapi_server import util


class ExecutePatchJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, dry_run: bool=None, duration: str=None, instance_filter: PatchInstanceFilter=None, patch_config: PatchConfig=None, rollout: PatchRollout=None):
        """ExecutePatchJobRequest - a model defined in OpenAPI

        :param description: The description of this ExecutePatchJobRequest.
        :param display_name: The display_name of this ExecutePatchJobRequest.
        :param dry_run: The dry_run of this ExecutePatchJobRequest.
        :param duration: The duration of this ExecutePatchJobRequest.
        :param instance_filter: The instance_filter of this ExecutePatchJobRequest.
        :param patch_config: The patch_config of this ExecutePatchJobRequest.
        :param rollout: The rollout of this ExecutePatchJobRequest.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'dry_run': bool,
            'duration': str,
            'instance_filter': PatchInstanceFilter,
            'patch_config': PatchConfig,
            'rollout': PatchRollout
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'dry_run': 'dryRun',
            'duration': 'duration',
            'instance_filter': 'instanceFilter',
            'patch_config': 'patchConfig',
            'rollout': 'rollout'
        }

        self._description = description
        self._display_name = display_name
        self._dry_run = dry_run
        self._duration = duration
        self._instance_filter = instance_filter
        self._patch_config = patch_config
        self._rollout = rollout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutePatchJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutePatchJobRequest of this ExecutePatchJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ExecutePatchJobRequest.

        Description of the patch job. Length of the description is limited to 1024 characters.

        :return: The description of this ExecutePatchJobRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExecutePatchJobRequest.

        Description of the patch job. Length of the description is limited to 1024 characters.

        :param description: The description of this ExecutePatchJobRequest.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ExecutePatchJobRequest.

        Display name for this patch job. This does not have to be unique.

        :return: The display_name of this ExecutePatchJobRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExecutePatchJobRequest.

        Display name for this patch job. This does not have to be unique.

        :param display_name: The display_name of this ExecutePatchJobRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dry_run(self):
        """Gets the dry_run of this ExecutePatchJobRequest.

        If this patch is a dry-run only, instances are contacted but will do nothing.

        :return: The dry_run of this ExecutePatchJobRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ExecutePatchJobRequest.

        If this patch is a dry-run only, instances are contacted but will do nothing.

        :param dry_run: The dry_run of this ExecutePatchJobRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def duration(self):
        """Gets the duration of this ExecutePatchJobRequest.

        Duration of the patch job. After the duration ends, the patch job times out.

        :return: The duration of this ExecutePatchJobRequest.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ExecutePatchJobRequest.

        Duration of the patch job. After the duration ends, the patch job times out.

        :param duration: The duration of this ExecutePatchJobRequest.
        :type duration: str
        """

        self._duration = duration

    @property
    def instance_filter(self):
        """Gets the instance_filter of this ExecutePatchJobRequest.


        :return: The instance_filter of this ExecutePatchJobRequest.
        :rtype: PatchInstanceFilter
        """
        return self._instance_filter

    @instance_filter.setter
    def instance_filter(self, instance_filter):
        """Sets the instance_filter of this ExecutePatchJobRequest.


        :param instance_filter: The instance_filter of this ExecutePatchJobRequest.
        :type instance_filter: PatchInstanceFilter
        """

        self._instance_filter = instance_filter

    @property
    def patch_config(self):
        """Gets the patch_config of this ExecutePatchJobRequest.


        :return: The patch_config of this ExecutePatchJobRequest.
        :rtype: PatchConfig
        """
        return self._patch_config

    @patch_config.setter
    def patch_config(self, patch_config):
        """Sets the patch_config of this ExecutePatchJobRequest.


        :param patch_config: The patch_config of this ExecutePatchJobRequest.
        :type patch_config: PatchConfig
        """

        self._patch_config = patch_config

    @property
    def rollout(self):
        """Gets the rollout of this ExecutePatchJobRequest.


        :return: The rollout of this ExecutePatchJobRequest.
        :rtype: PatchRollout
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this ExecutePatchJobRequest.


        :param rollout: The rollout of this ExecutePatchJobRequest.
        :type rollout: PatchRollout
        """

        self._rollout = rollout
