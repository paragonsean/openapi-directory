# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Package(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_state: str=None, manager: str=None, name: str=None):
        """Package - a model defined in OpenAPI

        :param desired_state: The desired_state of this Package.
        :param manager: The manager of this Package.
        :param name: The name of this Package.
        """
        self.openapi_types = {
            'desired_state': str,
            'manager': str,
            'name': str
        }

        self.attribute_map = {
            'desired_state': 'desiredState',
            'manager': 'manager',
            'name': 'name'
        }

        self._desired_state = desired_state
        self._manager = manager
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Package':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Package of this Package.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_state(self):
        """Gets the desired_state of this Package.

        The desired_state the agent should maintain for this package. The default is to ensure the package is installed.

        :return: The desired_state of this Package.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this Package.

        The desired_state the agent should maintain for this package. The default is to ensure the package is installed.

        :param desired_state: The desired_state of this Package.
        :type desired_state: str
        """
        allowed_values = ["DESIRED_STATE_UNSPECIFIED", "INSTALLED", "UPDATED", "REMOVED"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def manager(self):
        """Gets the manager of this Package.

        Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.

        :return: The manager of this Package.
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this Package.

        Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.

        :param manager: The manager of this Package.
        :type manager: str
        """
        allowed_values = ["MANAGER_UNSPECIFIED", "ANY", "APT", "YUM", "ZYPPER", "GOO"]  # noqa: E501
        if manager not in allowed_values:
            raise ValueError(
                "Invalid value for `manager` ({0}), must be one of {1}"
                .format(manager, allowed_values)
            )

        self._manager = manager

    @property
    def name(self):
        """Gets the name of this Package.

        Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.

        :return: The name of this Package.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Package.

        Required. The name of the package. A package is uniquely identified for conflict validation by checking the package name and the manager(s) that the package targets.

        :param name: The name of this Package.
        :type name: str
        """

        self._name = name
