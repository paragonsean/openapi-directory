# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.software_recipe_artifact_gcs import SoftwareRecipeArtifactGcs
from openapi_server.models.software_recipe_artifact_remote import SoftwareRecipeArtifactRemote
from openapi_server import util


class SoftwareRecipeArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_insecure: bool=None, gcs: SoftwareRecipeArtifactGcs=None, id: str=None, remote: SoftwareRecipeArtifactRemote=None):
        """SoftwareRecipeArtifact - a model defined in OpenAPI

        :param allow_insecure: The allow_insecure of this SoftwareRecipeArtifact.
        :param gcs: The gcs of this SoftwareRecipeArtifact.
        :param id: The id of this SoftwareRecipeArtifact.
        :param remote: The remote of this SoftwareRecipeArtifact.
        """
        self.openapi_types = {
            'allow_insecure': bool,
            'gcs': SoftwareRecipeArtifactGcs,
            'id': str,
            'remote': SoftwareRecipeArtifactRemote
        }

        self.attribute_map = {
            'allow_insecure': 'allowInsecure',
            'gcs': 'gcs',
            'id': 'id',
            'remote': 'remote'
        }

        self._allow_insecure = allow_insecure
        self._gcs = gcs
        self._id = id
        self._remote = remote

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareRecipeArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareRecipeArtifact of this SoftwareRecipeArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_insecure(self):
        """Gets the allow_insecure of this SoftwareRecipeArtifact.

        Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.

        :return: The allow_insecure of this SoftwareRecipeArtifact.
        :rtype: bool
        """
        return self._allow_insecure

    @allow_insecure.setter
    def allow_insecure(self, allow_insecure):
        """Sets the allow_insecure of this SoftwareRecipeArtifact.

        Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.

        :param allow_insecure: The allow_insecure of this SoftwareRecipeArtifact.
        :type allow_insecure: bool
        """

        self._allow_insecure = allow_insecure

    @property
    def gcs(self):
        """Gets the gcs of this SoftwareRecipeArtifact.


        :return: The gcs of this SoftwareRecipeArtifact.
        :rtype: SoftwareRecipeArtifactGcs
        """
        return self._gcs

    @gcs.setter
    def gcs(self, gcs):
        """Sets the gcs of this SoftwareRecipeArtifact.


        :param gcs: The gcs of this SoftwareRecipeArtifact.
        :type gcs: SoftwareRecipeArtifactGcs
        """

        self._gcs = gcs

    @property
    def id(self):
        """Gets the id of this SoftwareRecipeArtifact.

        Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.

        :return: The id of this SoftwareRecipeArtifact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SoftwareRecipeArtifact.

        Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.

        :param id: The id of this SoftwareRecipeArtifact.
        :type id: str
        """

        self._id = id

    @property
    def remote(self):
        """Gets the remote of this SoftwareRecipeArtifact.


        :return: The remote of this SoftwareRecipeArtifact.
        :rtype: SoftwareRecipeArtifactRemote
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this SoftwareRecipeArtifact.


        :param remote: The remote of this SoftwareRecipeArtifact.
        :type remote: SoftwareRecipeArtifactRemote
        """

        self._remote = remote
