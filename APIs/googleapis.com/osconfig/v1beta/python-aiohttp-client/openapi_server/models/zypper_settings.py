# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZypperSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, excludes: List[str]=None, exclusive_patches: List[str]=None, severities: List[str]=None, with_optional: bool=None, with_update: bool=None):
        """ZypperSettings - a model defined in OpenAPI

        :param categories: The categories of this ZypperSettings.
        :param excludes: The excludes of this ZypperSettings.
        :param exclusive_patches: The exclusive_patches of this ZypperSettings.
        :param severities: The severities of this ZypperSettings.
        :param with_optional: The with_optional of this ZypperSettings.
        :param with_update: The with_update of this ZypperSettings.
        """
        self.openapi_types = {
            'categories': List[str],
            'excludes': List[str],
            'exclusive_patches': List[str],
            'severities': List[str],
            'with_optional': bool,
            'with_update': bool
        }

        self.attribute_map = {
            'categories': 'categories',
            'excludes': 'excludes',
            'exclusive_patches': 'exclusivePatches',
            'severities': 'severities',
            'with_optional': 'withOptional',
            'with_update': 'withUpdate'
        }

        self._categories = categories
        self._excludes = excludes
        self._exclusive_patches = exclusive_patches
        self._severities = severities
        self._with_optional = with_optional
        self._with_update = with_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZypperSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZypperSettings of this ZypperSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this ZypperSettings.

        Install only patches with these categories. Common categories include security, recommended, and feature.

        :return: The categories of this ZypperSettings.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ZypperSettings.

        Install only patches with these categories. Common categories include security, recommended, and feature.

        :param categories: The categories of this ZypperSettings.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def excludes(self):
        """Gets the excludes of this ZypperSettings.

        List of patches to exclude from update.

        :return: The excludes of this ZypperSettings.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this ZypperSettings.

        List of patches to exclude from update.

        :param excludes: The excludes of this ZypperSettings.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def exclusive_patches(self):
        """Gets the exclusive_patches of this ZypperSettings.

        An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.

        :return: The exclusive_patches of this ZypperSettings.
        :rtype: List[str]
        """
        return self._exclusive_patches

    @exclusive_patches.setter
    def exclusive_patches(self, exclusive_patches):
        """Sets the exclusive_patches of this ZypperSettings.

        An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.

        :param exclusive_patches: The exclusive_patches of this ZypperSettings.
        :type exclusive_patches: List[str]
        """

        self._exclusive_patches = exclusive_patches

    @property
    def severities(self):
        """Gets the severities of this ZypperSettings.

        Install only patches with these severities. Common severities include critical, important, moderate, and low.

        :return: The severities of this ZypperSettings.
        :rtype: List[str]
        """
        return self._severities

    @severities.setter
    def severities(self, severities):
        """Sets the severities of this ZypperSettings.

        Install only patches with these severities. Common severities include critical, important, moderate, and low.

        :param severities: The severities of this ZypperSettings.
        :type severities: List[str]
        """

        self._severities = severities

    @property
    def with_optional(self):
        """Gets the with_optional of this ZypperSettings.

        Adds the `--with-optional` flag to `zypper patch`.

        :return: The with_optional of this ZypperSettings.
        :rtype: bool
        """
        return self._with_optional

    @with_optional.setter
    def with_optional(self, with_optional):
        """Sets the with_optional of this ZypperSettings.

        Adds the `--with-optional` flag to `zypper patch`.

        :param with_optional: The with_optional of this ZypperSettings.
        :type with_optional: bool
        """

        self._with_optional = with_optional

    @property
    def with_update(self):
        """Gets the with_update of this ZypperSettings.

        Adds the `--with-update` flag, to `zypper patch`.

        :return: The with_update of this ZypperSettings.
        :rtype: bool
        """
        return self._with_update

    @with_update.setter
    def with_update(self, with_update):
        """Sets the with_update of this ZypperSettings.

        Adds the `--with-update` flag, to `zypper patch`.

        :param with_update: The with_update of this ZypperSettings.
        :type with_update: bool
        """

        self._with_update = with_update
