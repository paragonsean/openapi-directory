# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoftwareRecipeStepExtractArchive(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_id: str=None, destination: str=None, type: str=None):
        """SoftwareRecipeStepExtractArchive - a model defined in OpenAPI

        :param artifact_id: The artifact_id of this SoftwareRecipeStepExtractArchive.
        :param destination: The destination of this SoftwareRecipeStepExtractArchive.
        :param type: The type of this SoftwareRecipeStepExtractArchive.
        """
        self.openapi_types = {
            'artifact_id': str,
            'destination': str,
            'type': str
        }

        self.attribute_map = {
            'artifact_id': 'artifactId',
            'destination': 'destination',
            'type': 'type'
        }

        self._artifact_id = artifact_id
        self._destination = destination
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareRecipeStepExtractArchive':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareRecipeStepExtractArchive of this SoftwareRecipeStepExtractArchive.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_id(self):
        """Gets the artifact_id of this SoftwareRecipeStepExtractArchive.

        Required. The id of the relevant artifact in the recipe.

        :return: The artifact_id of this SoftwareRecipeStepExtractArchive.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this SoftwareRecipeStepExtractArchive.

        Required. The id of the relevant artifact in the recipe.

        :param artifact_id: The artifact_id of this SoftwareRecipeStepExtractArchive.
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def destination(self):
        """Gets the destination of this SoftwareRecipeStepExtractArchive.

        Directory to extract archive to. Defaults to `/` on Linux or `C:\\` on Windows.

        :return: The destination of this SoftwareRecipeStepExtractArchive.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this SoftwareRecipeStepExtractArchive.

        Directory to extract archive to. Defaults to `/` on Linux or `C:\\` on Windows.

        :param destination: The destination of this SoftwareRecipeStepExtractArchive.
        :type destination: str
        """

        self._destination = destination

    @property
    def type(self):
        """Gets the type of this SoftwareRecipeStepExtractArchive.

        Required. The type of the archive to extract.

        :return: The type of this SoftwareRecipeStepExtractArchive.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SoftwareRecipeStepExtractArchive.

        Required. The type of the archive to extract.

        :param type: The type of this SoftwareRecipeStepExtractArchive.
        :type type: str
        """
        allowed_values = ["ARCHIVE_TYPE_UNSPECIFIED", "TAR", "TAR_GZIP", "TAR_BZIP", "TAR_LZMA", "TAR_XZ", "ZIP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
