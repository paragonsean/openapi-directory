# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AptRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_type: str=None, components: List[str]=None, distribution: str=None, gpg_key: str=None, uri: str=None):
        """AptRepository - a model defined in OpenAPI

        :param archive_type: The archive_type of this AptRepository.
        :param components: The components of this AptRepository.
        :param distribution: The distribution of this AptRepository.
        :param gpg_key: The gpg_key of this AptRepository.
        :param uri: The uri of this AptRepository.
        """
        self.openapi_types = {
            'archive_type': str,
            'components': List[str],
            'distribution': str,
            'gpg_key': str,
            'uri': str
        }

        self.attribute_map = {
            'archive_type': 'archiveType',
            'components': 'components',
            'distribution': 'distribution',
            'gpg_key': 'gpgKey',
            'uri': 'uri'
        }

        self._archive_type = archive_type
        self._components = components
        self._distribution = distribution
        self._gpg_key = gpg_key
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AptRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AptRepository of this AptRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_type(self):
        """Gets the archive_type of this AptRepository.

        Type of archive files in this repository. The default behavior is DEB.

        :return: The archive_type of this AptRepository.
        :rtype: str
        """
        return self._archive_type

    @archive_type.setter
    def archive_type(self, archive_type):
        """Sets the archive_type of this AptRepository.

        Type of archive files in this repository. The default behavior is DEB.

        :param archive_type: The archive_type of this AptRepository.
        :type archive_type: str
        """
        allowed_values = ["ARCHIVE_TYPE_UNSPECIFIED", "DEB", "DEB_SRC"]  # noqa: E501
        if archive_type not in allowed_values:
            raise ValueError(
                "Invalid value for `archive_type` ({0}), must be one of {1}"
                .format(archive_type, allowed_values)
            )

        self._archive_type = archive_type

    @property
    def components(self):
        """Gets the components of this AptRepository.

        Required. List of components for this repository. Must contain at least one item.

        :return: The components of this AptRepository.
        :rtype: List[str]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this AptRepository.

        Required. List of components for this repository. Must contain at least one item.

        :param components: The components of this AptRepository.
        :type components: List[str]
        """

        self._components = components

    @property
    def distribution(self):
        """Gets the distribution of this AptRepository.

        Required. Distribution of this repository.

        :return: The distribution of this AptRepository.
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this AptRepository.

        Required. Distribution of this repository.

        :param distribution: The distribution of this AptRepository.
        :type distribution: str
        """

        self._distribution = distribution

    @property
    def gpg_key(self):
        """Gets the gpg_key of this AptRepository.

        URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.

        :return: The gpg_key of this AptRepository.
        :rtype: str
        """
        return self._gpg_key

    @gpg_key.setter
    def gpg_key(self, gpg_key):
        """Sets the gpg_key of this AptRepository.

        URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg` containing all the keys in any applied guest policy.

        :param gpg_key: The gpg_key of this AptRepository.
        :type gpg_key: str
        """

        self._gpg_key = gpg_key

    @property
    def uri(self):
        """Gets the uri of this AptRepository.

        Required. URI for this repository.

        :return: The uri of this AptRepository.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AptRepository.

        Required. URI for this repository.

        :param uri: The uri of this AptRepository.
        :type uri: str
        """

        self._uri = uri
