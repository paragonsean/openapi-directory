# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class YumSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excludes: List[str]=None, exclusive_packages: List[str]=None, minimal: bool=None, security: bool=None):
        """YumSettings - a model defined in OpenAPI

        :param excludes: The excludes of this YumSettings.
        :param exclusive_packages: The exclusive_packages of this YumSettings.
        :param minimal: The minimal of this YumSettings.
        :param security: The security of this YumSettings.
        """
        self.openapi_types = {
            'excludes': List[str],
            'exclusive_packages': List[str],
            'minimal': bool,
            'security': bool
        }

        self.attribute_map = {
            'excludes': 'excludes',
            'exclusive_packages': 'exclusivePackages',
            'minimal': 'minimal',
            'security': 'security'
        }

        self._excludes = excludes
        self._exclusive_packages = exclusive_packages
        self._minimal = minimal
        self._security = security

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YumSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YumSettings of this YumSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excludes(self):
        """Gets the excludes of this YumSettings.

        List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.

        :return: The excludes of this YumSettings.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this YumSettings.

        List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.

        :param excludes: The excludes of this YumSettings.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def exclusive_packages(self):
        """Gets the exclusive_packages of this YumSettings.

        An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.

        :return: The exclusive_packages of this YumSettings.
        :rtype: List[str]
        """
        return self._exclusive_packages

    @exclusive_packages.setter
    def exclusive_packages(self, exclusive_packages):
        """Sets the exclusive_packages of this YumSettings.

        An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.

        :param exclusive_packages: The exclusive_packages of this YumSettings.
        :type exclusive_packages: List[str]
        """

        self._exclusive_packages = exclusive_packages

    @property
    def minimal(self):
        """Gets the minimal of this YumSettings.

        Will cause patch to run `yum update-minimal` instead.

        :return: The minimal of this YumSettings.
        :rtype: bool
        """
        return self._minimal

    @minimal.setter
    def minimal(self, minimal):
        """Sets the minimal of this YumSettings.

        Will cause patch to run `yum update-minimal` instead.

        :param minimal: The minimal of this YumSettings.
        :type minimal: bool
        """

        self._minimal = minimal

    @property
    def security(self):
        """Gets the security of this YumSettings.

        Adds the `--security` flag to `yum update`. Not supported on all platforms.

        :return: The security of this YumSettings.
        :rtype: bool
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this YumSettings.

        Adds the `--security` flag to `yum update`. Not supported on all platforms.

        :param security: The security of this YumSettings.
        :type security: bool
        """

        self._security = security
