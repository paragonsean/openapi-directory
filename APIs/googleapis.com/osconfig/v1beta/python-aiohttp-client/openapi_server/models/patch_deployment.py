# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.one_time_schedule import OneTimeSchedule
from openapi_server.models.patch_config import PatchConfig
from openapi_server.models.patch_instance_filter import PatchInstanceFilter
from openapi_server.models.patch_rollout import PatchRollout
from openapi_server.models.recurring_schedule import RecurringSchedule
from openapi_server import util


class PatchDeployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, duration: str=None, instance_filter: PatchInstanceFilter=None, last_execute_time: str=None, name: str=None, one_time_schedule: OneTimeSchedule=None, patch_config: PatchConfig=None, recurring_schedule: RecurringSchedule=None, rollout: PatchRollout=None, state: str=None, update_time: str=None):
        """PatchDeployment - a model defined in OpenAPI

        :param create_time: The create_time of this PatchDeployment.
        :param description: The description of this PatchDeployment.
        :param duration: The duration of this PatchDeployment.
        :param instance_filter: The instance_filter of this PatchDeployment.
        :param last_execute_time: The last_execute_time of this PatchDeployment.
        :param name: The name of this PatchDeployment.
        :param one_time_schedule: The one_time_schedule of this PatchDeployment.
        :param patch_config: The patch_config of this PatchDeployment.
        :param recurring_schedule: The recurring_schedule of this PatchDeployment.
        :param rollout: The rollout of this PatchDeployment.
        :param state: The state of this PatchDeployment.
        :param update_time: The update_time of this PatchDeployment.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'duration': str,
            'instance_filter': PatchInstanceFilter,
            'last_execute_time': str,
            'name': str,
            'one_time_schedule': OneTimeSchedule,
            'patch_config': PatchConfig,
            'recurring_schedule': RecurringSchedule,
            'rollout': PatchRollout,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'duration': 'duration',
            'instance_filter': 'instanceFilter',
            'last_execute_time': 'lastExecuteTime',
            'name': 'name',
            'one_time_schedule': 'oneTimeSchedule',
            'patch_config': 'patchConfig',
            'recurring_schedule': 'recurringSchedule',
            'rollout': 'rollout',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._duration = duration
        self._instance_filter = instance_filter
        self._last_execute_time = last_execute_time
        self._name = name
        self._one_time_schedule = one_time_schedule
        self._patch_config = patch_config
        self._recurring_schedule = recurring_schedule
        self._rollout = rollout
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchDeployment of this PatchDeployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PatchDeployment.

        Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The create_time of this PatchDeployment.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PatchDeployment.

        Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param create_time: The create_time of this PatchDeployment.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this PatchDeployment.

        Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.

        :return: The description of this PatchDeployment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchDeployment.

        Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.

        :param description: The description of this PatchDeployment.
        :type description: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this PatchDeployment.

        Optional. Duration of the patch. After the duration ends, the patch times out.

        :return: The duration of this PatchDeployment.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PatchDeployment.

        Optional. Duration of the patch. After the duration ends, the patch times out.

        :param duration: The duration of this PatchDeployment.
        :type duration: str
        """

        self._duration = duration

    @property
    def instance_filter(self):
        """Gets the instance_filter of this PatchDeployment.


        :return: The instance_filter of this PatchDeployment.
        :rtype: PatchInstanceFilter
        """
        return self._instance_filter

    @instance_filter.setter
    def instance_filter(self, instance_filter):
        """Sets the instance_filter of this PatchDeployment.


        :param instance_filter: The instance_filter of this PatchDeployment.
        :type instance_filter: PatchInstanceFilter
        """

        self._instance_filter = instance_filter

    @property
    def last_execute_time(self):
        """Gets the last_execute_time of this PatchDeployment.

        Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The last_execute_time of this PatchDeployment.
        :rtype: str
        """
        return self._last_execute_time

    @last_execute_time.setter
    def last_execute_time(self, last_execute_time):
        """Sets the last_execute_time of this PatchDeployment.

        Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param last_execute_time: The last_execute_time of this PatchDeployment.
        :type last_execute_time: str
        """

        self._last_execute_time = last_execute_time

    @property
    def name(self):
        """Gets the name of this PatchDeployment.

        Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.

        :return: The name of this PatchDeployment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchDeployment.

        Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.

        :param name: The name of this PatchDeployment.
        :type name: str
        """

        self._name = name

    @property
    def one_time_schedule(self):
        """Gets the one_time_schedule of this PatchDeployment.


        :return: The one_time_schedule of this PatchDeployment.
        :rtype: OneTimeSchedule
        """
        return self._one_time_schedule

    @one_time_schedule.setter
    def one_time_schedule(self, one_time_schedule):
        """Sets the one_time_schedule of this PatchDeployment.


        :param one_time_schedule: The one_time_schedule of this PatchDeployment.
        :type one_time_schedule: OneTimeSchedule
        """

        self._one_time_schedule = one_time_schedule

    @property
    def patch_config(self):
        """Gets the patch_config of this PatchDeployment.


        :return: The patch_config of this PatchDeployment.
        :rtype: PatchConfig
        """
        return self._patch_config

    @patch_config.setter
    def patch_config(self, patch_config):
        """Sets the patch_config of this PatchDeployment.


        :param patch_config: The patch_config of this PatchDeployment.
        :type patch_config: PatchConfig
        """

        self._patch_config = patch_config

    @property
    def recurring_schedule(self):
        """Gets the recurring_schedule of this PatchDeployment.


        :return: The recurring_schedule of this PatchDeployment.
        :rtype: RecurringSchedule
        """
        return self._recurring_schedule

    @recurring_schedule.setter
    def recurring_schedule(self, recurring_schedule):
        """Sets the recurring_schedule of this PatchDeployment.


        :param recurring_schedule: The recurring_schedule of this PatchDeployment.
        :type recurring_schedule: RecurringSchedule
        """

        self._recurring_schedule = recurring_schedule

    @property
    def rollout(self):
        """Gets the rollout of this PatchDeployment.


        :return: The rollout of this PatchDeployment.
        :rtype: PatchRollout
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this PatchDeployment.


        :param rollout: The rollout of this PatchDeployment.
        :type rollout: PatchRollout
        """

        self._rollout = rollout

    @property
    def state(self):
        """Gets the state of this PatchDeployment.

        Output only. Current state of the patch deployment.

        :return: The state of this PatchDeployment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PatchDeployment.

        Output only. Current state of the patch deployment.

        :param state: The state of this PatchDeployment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "PAUSED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this PatchDeployment.

        Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The update_time of this PatchDeployment.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PatchDeployment.

        Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param update_time: The update_time of this PatchDeployment.
        :type update_time: str
        """

        self._update_time = update_time
