# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.week_day_of_month import WeekDayOfMonth
from openapi_server import util


class MonthlySchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, month_day: int=None, week_day_of_month: WeekDayOfMonth=None):
        """MonthlySchedule - a model defined in OpenAPI

        :param month_day: The month_day of this MonthlySchedule.
        :param week_day_of_month: The week_day_of_month of this MonthlySchedule.
        """
        self.openapi_types = {
            'month_day': int,
            'week_day_of_month': WeekDayOfMonth
        }

        self.attribute_map = {
            'month_day': 'monthDay',
            'week_day_of_month': 'weekDayOfMonth'
        }

        self._month_day = month_day
        self._week_day_of_month = week_day_of_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonthlySchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonthlySchedule of this MonthlySchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def month_day(self):
        """Gets the month_day of this MonthlySchedule.

        Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run \"every month on the 31st\" will not run in February, April, June, etc.

        :return: The month_day of this MonthlySchedule.
        :rtype: int
        """
        return self._month_day

    @month_day.setter
    def month_day(self, month_day):
        """Sets the month_day of this MonthlySchedule.

        Required. One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run \"every month on the 31st\" will not run in February, April, June, etc.

        :param month_day: The month_day of this MonthlySchedule.
        :type month_day: int
        """

        self._month_day = month_day

    @property
    def week_day_of_month(self):
        """Gets the week_day_of_month of this MonthlySchedule.


        :return: The week_day_of_month of this MonthlySchedule.
        :rtype: WeekDayOfMonth
        """
        return self._week_day_of_month

    @week_day_of_month.setter
    def week_day_of_month(self, week_day_of_month):
        """Sets the week_day_of_month of this MonthlySchedule.


        :param week_day_of_month: The week_day_of_month of this MonthlySchedule.
        :type week_day_of_month: WeekDayOfMonth
        """

        self._week_day_of_month = week_day_of_month
