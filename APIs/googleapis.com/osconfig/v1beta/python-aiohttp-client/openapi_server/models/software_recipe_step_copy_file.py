# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoftwareRecipeStepCopyFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_id: str=None, destination: str=None, overwrite: bool=None, permissions: str=None):
        """SoftwareRecipeStepCopyFile - a model defined in OpenAPI

        :param artifact_id: The artifact_id of this SoftwareRecipeStepCopyFile.
        :param destination: The destination of this SoftwareRecipeStepCopyFile.
        :param overwrite: The overwrite of this SoftwareRecipeStepCopyFile.
        :param permissions: The permissions of this SoftwareRecipeStepCopyFile.
        """
        self.openapi_types = {
            'artifact_id': str,
            'destination': str,
            'overwrite': bool,
            'permissions': str
        }

        self.attribute_map = {
            'artifact_id': 'artifactId',
            'destination': 'destination',
            'overwrite': 'overwrite',
            'permissions': 'permissions'
        }

        self._artifact_id = artifact_id
        self._destination = destination
        self._overwrite = overwrite
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareRecipeStepCopyFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareRecipeStepCopyFile of this SoftwareRecipeStepCopyFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_id(self):
        """Gets the artifact_id of this SoftwareRecipeStepCopyFile.

        Required. The id of the relevant artifact in the recipe.

        :return: The artifact_id of this SoftwareRecipeStepCopyFile.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this SoftwareRecipeStepCopyFile.

        Required. The id of the relevant artifact in the recipe.

        :param artifact_id: The artifact_id of this SoftwareRecipeStepCopyFile.
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def destination(self):
        """Gets the destination of this SoftwareRecipeStepCopyFile.

        Required. The absolute path on the instance to put the file.

        :return: The destination of this SoftwareRecipeStepCopyFile.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this SoftwareRecipeStepCopyFile.

        Required. The absolute path on the instance to put the file.

        :param destination: The destination of this SoftwareRecipeStepCopyFile.
        :type destination: str
        """

        self._destination = destination

    @property
    def overwrite(self):
        """Gets the overwrite of this SoftwareRecipeStepCopyFile.

        Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.

        :return: The overwrite of this SoftwareRecipeStepCopyFile.
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this SoftwareRecipeStepCopyFile.

        Whether to allow this step to overwrite existing files. If this is false and the file already exists the file is not overwritten and the step is considered a success. Defaults to false.

        :param overwrite: The overwrite of this SoftwareRecipeStepCopyFile.
        :type overwrite: bool
        """

        self._overwrite = overwrite

    @property
    def permissions(self):
        """Gets the permissions of this SoftwareRecipeStepCopyFile.

        Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4

        :return: The permissions of this SoftwareRecipeStepCopyFile.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this SoftwareRecipeStepCopyFile.

        Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4

        :param permissions: The permissions of this SoftwareRecipeStepCopyFile.
        :type permissions: str
        """

        self._permissions = permissions
