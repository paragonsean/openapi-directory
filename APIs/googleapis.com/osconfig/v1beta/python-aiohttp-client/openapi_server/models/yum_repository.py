# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class YumRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, display_name: str=None, gpg_keys: List[str]=None, id: str=None):
        """YumRepository - a model defined in OpenAPI

        :param base_url: The base_url of this YumRepository.
        :param display_name: The display_name of this YumRepository.
        :param gpg_keys: The gpg_keys of this YumRepository.
        :param id: The id of this YumRepository.
        """
        self.openapi_types = {
            'base_url': str,
            'display_name': str,
            'gpg_keys': List[str],
            'id': str
        }

        self.attribute_map = {
            'base_url': 'baseUrl',
            'display_name': 'displayName',
            'gpg_keys': 'gpgKeys',
            'id': 'id'
        }

        self._base_url = base_url
        self._display_name = display_name
        self._gpg_keys = gpg_keys
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YumRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YumRepository of this YumRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this YumRepository.

        Required. The location of the repository directory.

        :return: The base_url of this YumRepository.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this YumRepository.

        Required. The location of the repository directory.

        :param base_url: The base_url of this YumRepository.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def display_name(self):
        """Gets the display_name of this YumRepository.

        The display name of the repository.

        :return: The display_name of this YumRepository.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this YumRepository.

        The display name of the repository.

        :param display_name: The display_name of this YumRepository.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def gpg_keys(self):
        """Gets the gpg_keys of this YumRepository.

        URIs of GPG keys.

        :return: The gpg_keys of this YumRepository.
        :rtype: List[str]
        """
        return self._gpg_keys

    @gpg_keys.setter
    def gpg_keys(self, gpg_keys):
        """Sets the gpg_keys of this YumRepository.

        URIs of GPG keys.

        :param gpg_keys: The gpg_keys of this YumRepository.
        :type gpg_keys: List[str]
        """

        self._gpg_keys = gpg_keys

    @property
    def id(self):
        """Gets the id of this YumRepository.

        Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.

        :return: The id of this YumRepository.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this YumRepository.

        Required. A one word, unique name for this repository. This is the `repo id` in the Yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for guest policy conflicts.

        :param id: The id of this YumRepository.
        :type id: str
        """

        self._id = id
