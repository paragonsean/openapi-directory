# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.effective_guest_policy_sourced_package import EffectiveGuestPolicySourcedPackage
from openapi_server.models.effective_guest_policy_sourced_package_repository import EffectiveGuestPolicySourcedPackageRepository
from openapi_server.models.effective_guest_policy_sourced_software_recipe import EffectiveGuestPolicySourcedSoftwareRecipe
from openapi_server import util


class EffectiveGuestPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_repositories: List[EffectiveGuestPolicySourcedPackageRepository]=None, packages: List[EffectiveGuestPolicySourcedPackage]=None, software_recipes: List[EffectiveGuestPolicySourcedSoftwareRecipe]=None):
        """EffectiveGuestPolicy - a model defined in OpenAPI

        :param package_repositories: The package_repositories of this EffectiveGuestPolicy.
        :param packages: The packages of this EffectiveGuestPolicy.
        :param software_recipes: The software_recipes of this EffectiveGuestPolicy.
        """
        self.openapi_types = {
            'package_repositories': List[EffectiveGuestPolicySourcedPackageRepository],
            'packages': List[EffectiveGuestPolicySourcedPackage],
            'software_recipes': List[EffectiveGuestPolicySourcedSoftwareRecipe]
        }

        self.attribute_map = {
            'package_repositories': 'packageRepositories',
            'packages': 'packages',
            'software_recipes': 'softwareRecipes'
        }

        self._package_repositories = package_repositories
        self._packages = packages
        self._software_recipes = software_recipes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveGuestPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveGuestPolicy of this EffectiveGuestPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_repositories(self):
        """Gets the package_repositories of this EffectiveGuestPolicy.

        List of package repository configurations assigned to the VM instance.

        :return: The package_repositories of this EffectiveGuestPolicy.
        :rtype: List[EffectiveGuestPolicySourcedPackageRepository]
        """
        return self._package_repositories

    @package_repositories.setter
    def package_repositories(self, package_repositories):
        """Sets the package_repositories of this EffectiveGuestPolicy.

        List of package repository configurations assigned to the VM instance.

        :param package_repositories: The package_repositories of this EffectiveGuestPolicy.
        :type package_repositories: List[EffectiveGuestPolicySourcedPackageRepository]
        """

        self._package_repositories = package_repositories

    @property
    def packages(self):
        """Gets the packages of this EffectiveGuestPolicy.

        List of package configurations assigned to the VM instance.

        :return: The packages of this EffectiveGuestPolicy.
        :rtype: List[EffectiveGuestPolicySourcedPackage]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this EffectiveGuestPolicy.

        List of package configurations assigned to the VM instance.

        :param packages: The packages of this EffectiveGuestPolicy.
        :type packages: List[EffectiveGuestPolicySourcedPackage]
        """

        self._packages = packages

    @property
    def software_recipes(self):
        """Gets the software_recipes of this EffectiveGuestPolicy.

        List of recipes assigned to the VM instance.

        :return: The software_recipes of this EffectiveGuestPolicy.
        :rtype: List[EffectiveGuestPolicySourcedSoftwareRecipe]
        """
        return self._software_recipes

    @software_recipes.setter
    def software_recipes(self, software_recipes):
        """Sets the software_recipes of this EffectiveGuestPolicy.

        List of recipes assigned to the VM instance.

        :param software_recipes: The software_recipes of this EffectiveGuestPolicy.
        :type software_recipes: List[EffectiveGuestPolicySourcedSoftwareRecipe]
        """

        self._software_recipes = software_recipes
