# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment import Assignment
from openapi_server.models.package import Package
from openapi_server.models.package_repository import PackageRepository
from openapi_server.models.software_recipe import SoftwareRecipe
from openapi_server import util


class GuestPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: Assignment=None, create_time: str=None, description: str=None, etag: str=None, name: str=None, package_repositories: List[PackageRepository]=None, packages: List[Package]=None, recipes: List[SoftwareRecipe]=None, update_time: str=None):
        """GuestPolicy - a model defined in OpenAPI

        :param assignment: The assignment of this GuestPolicy.
        :param create_time: The create_time of this GuestPolicy.
        :param description: The description of this GuestPolicy.
        :param etag: The etag of this GuestPolicy.
        :param name: The name of this GuestPolicy.
        :param package_repositories: The package_repositories of this GuestPolicy.
        :param packages: The packages of this GuestPolicy.
        :param recipes: The recipes of this GuestPolicy.
        :param update_time: The update_time of this GuestPolicy.
        """
        self.openapi_types = {
            'assignment': Assignment,
            'create_time': str,
            'description': str,
            'etag': str,
            'name': str,
            'package_repositories': List[PackageRepository],
            'packages': List[Package],
            'recipes': List[SoftwareRecipe],
            'update_time': str
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'name': 'name',
            'package_repositories': 'packageRepositories',
            'packages': 'packages',
            'recipes': 'recipes',
            'update_time': 'updateTime'
        }

        self._assignment = assignment
        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._name = name
        self._package_repositories = package_repositories
        self._packages = packages
        self._recipes = recipes
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestPolicy of this GuestPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this GuestPolicy.


        :return: The assignment of this GuestPolicy.
        :rtype: Assignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this GuestPolicy.


        :param assignment: The assignment of this GuestPolicy.
        :type assignment: Assignment
        """

        self._assignment = assignment

    @property
    def create_time(self):
        """Gets the create_time of this GuestPolicy.

        Output only. Time this guest policy was created.

        :return: The create_time of this GuestPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GuestPolicy.

        Output only. Time this guest policy was created.

        :param create_time: The create_time of this GuestPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GuestPolicy.

        Description of the guest policy. Length of the description is limited to 1024 characters.

        :return: The description of this GuestPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GuestPolicy.

        Description of the guest policy. Length of the description is limited to 1024 characters.

        :param description: The description of this GuestPolicy.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this GuestPolicy.

        The etag for this guest policy. If this is provided on update, it must match the server's etag.

        :return: The etag of this GuestPolicy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GuestPolicy.

        The etag for this guest policy. If this is provided on update, it must match the server's etag.

        :param etag: The etag of this GuestPolicy.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this GuestPolicy.

        Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.

        :return: The name of this GuestPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GuestPolicy.

        Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.

        :param name: The name of this GuestPolicy.
        :type name: str
        """

        self._name = name

    @property
    def package_repositories(self):
        """Gets the package_repositories of this GuestPolicy.

        A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.

        :return: The package_repositories of this GuestPolicy.
        :rtype: List[PackageRepository]
        """
        return self._package_repositories

    @package_repositories.setter
    def package_repositories(self, package_repositories):
        """Sets the package_repositories of this GuestPolicy.

        A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.

        :param package_repositories: The package_repositories of this GuestPolicy.
        :type package_repositories: List[PackageRepository]
        """

        self._package_repositories = package_repositories

    @property
    def packages(self):
        """Gets the packages of this GuestPolicy.

        The software packages to be managed by this policy.

        :return: The packages of this GuestPolicy.
        :rtype: List[Package]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this GuestPolicy.

        The software packages to be managed by this policy.

        :param packages: The packages of this GuestPolicy.
        :type packages: List[Package]
        """

        self._packages = packages

    @property
    def recipes(self):
        """Gets the recipes of this GuestPolicy.

        A list of Recipes to install on the VM instance.

        :return: The recipes of this GuestPolicy.
        :rtype: List[SoftwareRecipe]
        """
        return self._recipes

    @recipes.setter
    def recipes(self, recipes):
        """Sets the recipes of this GuestPolicy.

        A list of Recipes to install on the VM instance.

        :param recipes: The recipes of this GuestPolicy.
        :type recipes: List[SoftwareRecipe]
        """

        self._recipes = recipes

    @property
    def update_time(self):
        """Gets the update_time of this GuestPolicy.

        Output only. Last time this guest policy was updated.

        :return: The update_time of this GuestPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GuestPolicy.

        Output only. Last time this guest policy was updated.

        :param update_time: The update_time of this GuestPolicy.
        :type update_time: str
        """

        self._update_time = update_time
