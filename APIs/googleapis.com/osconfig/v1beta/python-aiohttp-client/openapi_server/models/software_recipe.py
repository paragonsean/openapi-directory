# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.software_recipe_artifact import SoftwareRecipeArtifact
from openapi_server.models.software_recipe_step import SoftwareRecipeStep
from openapi_server import util


class SoftwareRecipe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: List[SoftwareRecipeArtifact]=None, desired_state: str=None, install_steps: List[SoftwareRecipeStep]=None, name: str=None, update_steps: List[SoftwareRecipeStep]=None, version: str=None):
        """SoftwareRecipe - a model defined in OpenAPI

        :param artifacts: The artifacts of this SoftwareRecipe.
        :param desired_state: The desired_state of this SoftwareRecipe.
        :param install_steps: The install_steps of this SoftwareRecipe.
        :param name: The name of this SoftwareRecipe.
        :param update_steps: The update_steps of this SoftwareRecipe.
        :param version: The version of this SoftwareRecipe.
        """
        self.openapi_types = {
            'artifacts': List[SoftwareRecipeArtifact],
            'desired_state': str,
            'install_steps': List[SoftwareRecipeStep],
            'name': str,
            'update_steps': List[SoftwareRecipeStep],
            'version': str
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'desired_state': 'desiredState',
            'install_steps': 'installSteps',
            'name': 'name',
            'update_steps': 'updateSteps',
            'version': 'version'
        }

        self._artifacts = artifacts
        self._desired_state = desired_state
        self._install_steps = install_steps
        self._name = name
        self._update_steps = update_steps
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareRecipe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareRecipe of this SoftwareRecipe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this SoftwareRecipe.

        Resources available to be used in the steps in the recipe.

        :return: The artifacts of this SoftwareRecipe.
        :rtype: List[SoftwareRecipeArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this SoftwareRecipe.

        Resources available to be used in the steps in the recipe.

        :param artifacts: The artifacts of this SoftwareRecipe.
        :type artifacts: List[SoftwareRecipeArtifact]
        """

        self._artifacts = artifacts

    @property
    def desired_state(self):
        """Gets the desired_state of this SoftwareRecipe.

        Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.

        :return: The desired_state of this SoftwareRecipe.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this SoftwareRecipe.

        Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.

        :param desired_state: The desired_state of this SoftwareRecipe.
        :type desired_state: str
        """
        allowed_values = ["DESIRED_STATE_UNSPECIFIED", "INSTALLED", "UPDATED", "REMOVED"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def install_steps(self):
        """Gets the install_steps of this SoftwareRecipe.

        Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.

        :return: The install_steps of this SoftwareRecipe.
        :rtype: List[SoftwareRecipeStep]
        """
        return self._install_steps

    @install_steps.setter
    def install_steps(self, install_steps):
        """Sets the install_steps of this SoftwareRecipe.

        Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.

        :param install_steps: The install_steps of this SoftwareRecipe.
        :type install_steps: List[SoftwareRecipeStep]
        """

        self._install_steps = install_steps

    @property
    def name(self):
        """Gets the name of this SoftwareRecipe.

        Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.

        :return: The name of this SoftwareRecipe.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoftwareRecipe.

        Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.

        :param name: The name of this SoftwareRecipe.
        :type name: str
        """

        self._name = name

    @property
    def update_steps(self):
        """Gets the update_steps of this SoftwareRecipe.

        Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.

        :return: The update_steps of this SoftwareRecipe.
        :rtype: List[SoftwareRecipeStep]
        """
        return self._update_steps

    @update_steps.setter
    def update_steps(self, update_steps):
        """Sets the update_steps of this SoftwareRecipe.

        Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.

        :param update_steps: The update_steps of this SoftwareRecipe.
        :type update_steps: List[SoftwareRecipeStep]
        """

        self._update_steps = update_steps

    @property
    def version(self):
        """Gets the version of this SoftwareRecipe.

        The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).

        :return: The version of this SoftwareRecipe.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SoftwareRecipe.

        The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).

        :param version: The version of this SoftwareRecipe.
        :type version: str
        """

        self._version = version
