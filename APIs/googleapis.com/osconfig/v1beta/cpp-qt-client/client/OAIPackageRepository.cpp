/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageRepository::OAIPackageRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageRepository::OAIPackageRepository() {
    this->initializeModel();
}

OAIPackageRepository::~OAIPackageRepository() {}

void OAIPackageRepository::initializeModel() {

    m_apt_isSet = false;
    m_apt_isValid = false;

    m_goo_isSet = false;
    m_goo_isValid = false;

    m_yum_isSet = false;
    m_yum_isValid = false;

    m_zypper_isSet = false;
    m_zypper_isValid = false;
}

void OAIPackageRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageRepository::fromJsonObject(QJsonObject json) {

    m_apt_isValid = ::OpenAPI::fromJsonValue(m_apt, json[QString("apt")]);
    m_apt_isSet = !json[QString("apt")].isNull() && m_apt_isValid;

    m_goo_isValid = ::OpenAPI::fromJsonValue(m_goo, json[QString("goo")]);
    m_goo_isSet = !json[QString("goo")].isNull() && m_goo_isValid;

    m_yum_isValid = ::OpenAPI::fromJsonValue(m_yum, json[QString("yum")]);
    m_yum_isSet = !json[QString("yum")].isNull() && m_yum_isValid;

    m_zypper_isValid = ::OpenAPI::fromJsonValue(m_zypper, json[QString("zypper")]);
    m_zypper_isSet = !json[QString("zypper")].isNull() && m_zypper_isValid;
}

QString OAIPackageRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_apt.isSet()) {
        obj.insert(QString("apt"), ::OpenAPI::toJsonValue(m_apt));
    }
    if (m_goo.isSet()) {
        obj.insert(QString("goo"), ::OpenAPI::toJsonValue(m_goo));
    }
    if (m_yum.isSet()) {
        obj.insert(QString("yum"), ::OpenAPI::toJsonValue(m_yum));
    }
    if (m_zypper.isSet()) {
        obj.insert(QString("zypper"), ::OpenAPI::toJsonValue(m_zypper));
    }
    return obj;
}

OAIAptRepository OAIPackageRepository::getApt() const {
    return m_apt;
}
void OAIPackageRepository::setApt(const OAIAptRepository &apt) {
    m_apt = apt;
    m_apt_isSet = true;
}

bool OAIPackageRepository::is_apt_Set() const{
    return m_apt_isSet;
}

bool OAIPackageRepository::is_apt_Valid() const{
    return m_apt_isValid;
}

OAIGooRepository OAIPackageRepository::getGoo() const {
    return m_goo;
}
void OAIPackageRepository::setGoo(const OAIGooRepository &goo) {
    m_goo = goo;
    m_goo_isSet = true;
}

bool OAIPackageRepository::is_goo_Set() const{
    return m_goo_isSet;
}

bool OAIPackageRepository::is_goo_Valid() const{
    return m_goo_isValid;
}

OAIYumRepository OAIPackageRepository::getYum() const {
    return m_yum;
}
void OAIPackageRepository::setYum(const OAIYumRepository &yum) {
    m_yum = yum;
    m_yum_isSet = true;
}

bool OAIPackageRepository::is_yum_Set() const{
    return m_yum_isSet;
}

bool OAIPackageRepository::is_yum_Valid() const{
    return m_yum_isValid;
}

OAIZypperRepository OAIPackageRepository::getZypper() const {
    return m_zypper;
}
void OAIPackageRepository::setZypper(const OAIZypperRepository &zypper) {
    m_zypper = zypper;
    m_zypper_isSet = true;
}

bool OAIPackageRepository::is_zypper_Set() const{
    return m_zypper_isSet;
}

bool OAIPackageRepository::is_zypper_Valid() const{
    return m_zypper_isValid;
}

bool OAIPackageRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_goo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zypper.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
