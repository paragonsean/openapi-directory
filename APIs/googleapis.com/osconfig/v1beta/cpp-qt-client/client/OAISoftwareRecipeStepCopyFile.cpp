/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareRecipeStepCopyFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareRecipeStepCopyFile::OAISoftwareRecipeStepCopyFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareRecipeStepCopyFile::OAISoftwareRecipeStepCopyFile() {
    this->initializeModel();
}

OAISoftwareRecipeStepCopyFile::~OAISoftwareRecipeStepCopyFile() {}

void OAISoftwareRecipeStepCopyFile::initializeModel() {

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_overwrite_isSet = false;
    m_overwrite_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAISoftwareRecipeStepCopyFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareRecipeStepCopyFile::fromJsonObject(QJsonObject json) {

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_overwrite_isValid = ::OpenAPI::fromJsonValue(m_overwrite, json[QString("overwrite")]);
    m_overwrite_isSet = !json[QString("overwrite")].isNull() && m_overwrite_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAISoftwareRecipeStepCopyFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareRecipeStepCopyFile::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_overwrite_isSet) {
        obj.insert(QString("overwrite"), ::OpenAPI::toJsonValue(m_overwrite));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAISoftwareRecipeStepCopyFile::getArtifactId() const {
    return m_artifact_id;
}
void OAISoftwareRecipeStepCopyFile::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAISoftwareRecipeStepCopyFile::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAISoftwareRecipeStepCopyFile::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAISoftwareRecipeStepCopyFile::getDestination() const {
    return m_destination;
}
void OAISoftwareRecipeStepCopyFile::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAISoftwareRecipeStepCopyFile::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAISoftwareRecipeStepCopyFile::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAISoftwareRecipeStepCopyFile::isOverwrite() const {
    return m_overwrite;
}
void OAISoftwareRecipeStepCopyFile::setOverwrite(const bool &overwrite) {
    m_overwrite = overwrite;
    m_overwrite_isSet = true;
}

bool OAISoftwareRecipeStepCopyFile::is_overwrite_Set() const{
    return m_overwrite_isSet;
}

bool OAISoftwareRecipeStepCopyFile::is_overwrite_Valid() const{
    return m_overwrite_isValid;
}

QString OAISoftwareRecipeStepCopyFile::getPermissions() const {
    return m_permissions;
}
void OAISoftwareRecipeStepCopyFile::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAISoftwareRecipeStepCopyFile::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAISoftwareRecipeStepCopyFile::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAISoftwareRecipeStepCopyFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareRecipeStepCopyFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
