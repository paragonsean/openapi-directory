/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareRecipeStepExecFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareRecipeStepExecFile::OAISoftwareRecipeStepExecFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareRecipeStepExecFile::OAISoftwareRecipeStepExecFile() {
    this->initializeModel();
}

OAISoftwareRecipeStepExecFile::~OAISoftwareRecipeStepExecFile() {}

void OAISoftwareRecipeStepExecFile::initializeModel() {

    m_allowed_exit_codes_isSet = false;
    m_allowed_exit_codes_isValid = false;

    m_args_isSet = false;
    m_args_isValid = false;

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;
}

void OAISoftwareRecipeStepExecFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareRecipeStepExecFile::fromJsonObject(QJsonObject json) {

    m_allowed_exit_codes_isValid = ::OpenAPI::fromJsonValue(m_allowed_exit_codes, json[QString("allowedExitCodes")]);
    m_allowed_exit_codes_isSet = !json[QString("allowedExitCodes")].isNull() && m_allowed_exit_codes_isValid;

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("localPath")]);
    m_local_path_isSet = !json[QString("localPath")].isNull() && m_local_path_isValid;
}

QString OAISoftwareRecipeStepExecFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareRecipeStepExecFile::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_exit_codes.size() > 0) {
        obj.insert(QString("allowedExitCodes"), ::OpenAPI::toJsonValue(m_allowed_exit_codes));
    }
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("localPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    return obj;
}

QList<qint32> OAISoftwareRecipeStepExecFile::getAllowedExitCodes() const {
    return m_allowed_exit_codes;
}
void OAISoftwareRecipeStepExecFile::setAllowedExitCodes(const QList<qint32> &allowed_exit_codes) {
    m_allowed_exit_codes = allowed_exit_codes;
    m_allowed_exit_codes_isSet = true;
}

bool OAISoftwareRecipeStepExecFile::is_allowed_exit_codes_Set() const{
    return m_allowed_exit_codes_isSet;
}

bool OAISoftwareRecipeStepExecFile::is_allowed_exit_codes_Valid() const{
    return m_allowed_exit_codes_isValid;
}

QList<QString> OAISoftwareRecipeStepExecFile::getArgs() const {
    return m_args;
}
void OAISoftwareRecipeStepExecFile::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAISoftwareRecipeStepExecFile::is_args_Set() const{
    return m_args_isSet;
}

bool OAISoftwareRecipeStepExecFile::is_args_Valid() const{
    return m_args_isValid;
}

QString OAISoftwareRecipeStepExecFile::getArtifactId() const {
    return m_artifact_id;
}
void OAISoftwareRecipeStepExecFile::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAISoftwareRecipeStepExecFile::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAISoftwareRecipeStepExecFile::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAISoftwareRecipeStepExecFile::getLocalPath() const {
    return m_local_path;
}
void OAISoftwareRecipeStepExecFile::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAISoftwareRecipeStepExecFile::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAISoftwareRecipeStepExecFile::is_local_path_Valid() const{
    return m_local_path_isValid;
}

bool OAISoftwareRecipeStepExecFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_exit_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareRecipeStepExecFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
