/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookupEffectiveGuestPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookupEffectiveGuestPolicyRequest::OAILookupEffectiveGuestPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookupEffectiveGuestPolicyRequest::OAILookupEffectiveGuestPolicyRequest() {
    this->initializeModel();
}

OAILookupEffectiveGuestPolicyRequest::~OAILookupEffectiveGuestPolicyRequest() {}

void OAILookupEffectiveGuestPolicyRequest::initializeModel() {

    m_os_architecture_isSet = false;
    m_os_architecture_isValid = false;

    m_os_short_name_isSet = false;
    m_os_short_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;
}

void OAILookupEffectiveGuestPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookupEffectiveGuestPolicyRequest::fromJsonObject(QJsonObject json) {

    m_os_architecture_isValid = ::OpenAPI::fromJsonValue(m_os_architecture, json[QString("osArchitecture")]);
    m_os_architecture_isSet = !json[QString("osArchitecture")].isNull() && m_os_architecture_isValid;

    m_os_short_name_isValid = ::OpenAPI::fromJsonValue(m_os_short_name, json[QString("osShortName")]);
    m_os_short_name_isSet = !json[QString("osShortName")].isNull() && m_os_short_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;
}

QString OAILookupEffectiveGuestPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookupEffectiveGuestPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_os_architecture_isSet) {
        obj.insert(QString("osArchitecture"), ::OpenAPI::toJsonValue(m_os_architecture));
    }
    if (m_os_short_name_isSet) {
        obj.insert(QString("osShortName"), ::OpenAPI::toJsonValue(m_os_short_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    return obj;
}

QString OAILookupEffectiveGuestPolicyRequest::getOsArchitecture() const {
    return m_os_architecture;
}
void OAILookupEffectiveGuestPolicyRequest::setOsArchitecture(const QString &os_architecture) {
    m_os_architecture = os_architecture;
    m_os_architecture_isSet = true;
}

bool OAILookupEffectiveGuestPolicyRequest::is_os_architecture_Set() const{
    return m_os_architecture_isSet;
}

bool OAILookupEffectiveGuestPolicyRequest::is_os_architecture_Valid() const{
    return m_os_architecture_isValid;
}

QString OAILookupEffectiveGuestPolicyRequest::getOsShortName() const {
    return m_os_short_name;
}
void OAILookupEffectiveGuestPolicyRequest::setOsShortName(const QString &os_short_name) {
    m_os_short_name = os_short_name;
    m_os_short_name_isSet = true;
}

bool OAILookupEffectiveGuestPolicyRequest::is_os_short_name_Set() const{
    return m_os_short_name_isSet;
}

bool OAILookupEffectiveGuestPolicyRequest::is_os_short_name_Valid() const{
    return m_os_short_name_isValid;
}

QString OAILookupEffectiveGuestPolicyRequest::getOsVersion() const {
    return m_os_version;
}
void OAILookupEffectiveGuestPolicyRequest::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAILookupEffectiveGuestPolicyRequest::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAILookupEffectiveGuestPolicyRequest::is_os_version_Valid() const{
    return m_os_version_isValid;
}

bool OAILookupEffectiveGuestPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookupEffectiveGuestPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
