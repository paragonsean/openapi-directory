/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExecutePatchJobRequest.h
 *
 * A request message to initiate patching across Compute Engine instances.
 */

#ifndef OAIExecutePatchJobRequest_H
#define OAIExecutePatchJobRequest_H

#include <QJsonObject>

#include "OAIPatchConfig.h"
#include "OAIPatchInstanceFilter.h"
#include "OAIPatchRollout.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPatchInstanceFilter;
class OAIPatchConfig;
class OAIPatchRollout;

class OAIExecutePatchJobRequest : public OAIObject {
public:
    OAIExecutePatchJobRequest();
    OAIExecutePatchJobRequest(QString json);
    ~OAIExecutePatchJobRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isDryRun() const;
    void setDryRun(const bool &dry_run);
    bool is_dry_run_Set() const;
    bool is_dry_run_Valid() const;

    QString getDuration() const;
    void setDuration(const QString &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    OAIPatchInstanceFilter getInstanceFilter() const;
    void setInstanceFilter(const OAIPatchInstanceFilter &instance_filter);
    bool is_instance_filter_Set() const;
    bool is_instance_filter_Valid() const;

    OAIPatchConfig getPatchConfig() const;
    void setPatchConfig(const OAIPatchConfig &patch_config);
    bool is_patch_config_Set() const;
    bool is_patch_config_Valid() const;

    OAIPatchRollout getRollout() const;
    void setRollout(const OAIPatchRollout &rollout);
    bool is_rollout_Set() const;
    bool is_rollout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_dry_run;
    bool m_dry_run_isSet;
    bool m_dry_run_isValid;

    QString m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    OAIPatchInstanceFilter m_instance_filter;
    bool m_instance_filter_isSet;
    bool m_instance_filter_isValid;

    OAIPatchConfig m_patch_config;
    bool m_patch_config_isSet;
    bool m_patch_config_isValid;

    OAIPatchRollout m_rollout;
    bool m_rollout_isSet;
    bool m_rollout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExecutePatchJobRequest)

#endif // OAIExecutePatchJobRequest_H
