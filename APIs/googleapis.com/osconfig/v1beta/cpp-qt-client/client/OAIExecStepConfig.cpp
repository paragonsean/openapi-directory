/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecStepConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecStepConfig::OAIExecStepConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecStepConfig::OAIExecStepConfig() {
    this->initializeModel();
}

OAIExecStepConfig::~OAIExecStepConfig() {}

void OAIExecStepConfig::initializeModel() {

    m_allowed_success_codes_isSet = false;
    m_allowed_success_codes_isValid = false;

    m_gcs_object_isSet = false;
    m_gcs_object_isValid = false;

    m_interpreter_isSet = false;
    m_interpreter_isValid = false;

    m_local_path_isSet = false;
    m_local_path_isValid = false;
}

void OAIExecStepConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecStepConfig::fromJsonObject(QJsonObject json) {

    m_allowed_success_codes_isValid = ::OpenAPI::fromJsonValue(m_allowed_success_codes, json[QString("allowedSuccessCodes")]);
    m_allowed_success_codes_isSet = !json[QString("allowedSuccessCodes")].isNull() && m_allowed_success_codes_isValid;

    m_gcs_object_isValid = ::OpenAPI::fromJsonValue(m_gcs_object, json[QString("gcsObject")]);
    m_gcs_object_isSet = !json[QString("gcsObject")].isNull() && m_gcs_object_isValid;

    m_interpreter_isValid = ::OpenAPI::fromJsonValue(m_interpreter, json[QString("interpreter")]);
    m_interpreter_isSet = !json[QString("interpreter")].isNull() && m_interpreter_isValid;

    m_local_path_isValid = ::OpenAPI::fromJsonValue(m_local_path, json[QString("localPath")]);
    m_local_path_isSet = !json[QString("localPath")].isNull() && m_local_path_isValid;
}

QString OAIExecStepConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecStepConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_success_codes.size() > 0) {
        obj.insert(QString("allowedSuccessCodes"), ::OpenAPI::toJsonValue(m_allowed_success_codes));
    }
    if (m_gcs_object.isSet()) {
        obj.insert(QString("gcsObject"), ::OpenAPI::toJsonValue(m_gcs_object));
    }
    if (m_interpreter_isSet) {
        obj.insert(QString("interpreter"), ::OpenAPI::toJsonValue(m_interpreter));
    }
    if (m_local_path_isSet) {
        obj.insert(QString("localPath"), ::OpenAPI::toJsonValue(m_local_path));
    }
    return obj;
}

QList<qint32> OAIExecStepConfig::getAllowedSuccessCodes() const {
    return m_allowed_success_codes;
}
void OAIExecStepConfig::setAllowedSuccessCodes(const QList<qint32> &allowed_success_codes) {
    m_allowed_success_codes = allowed_success_codes;
    m_allowed_success_codes_isSet = true;
}

bool OAIExecStepConfig::is_allowed_success_codes_Set() const{
    return m_allowed_success_codes_isSet;
}

bool OAIExecStepConfig::is_allowed_success_codes_Valid() const{
    return m_allowed_success_codes_isValid;
}

OAIGcsObject OAIExecStepConfig::getGcsObject() const {
    return m_gcs_object;
}
void OAIExecStepConfig::setGcsObject(const OAIGcsObject &gcs_object) {
    m_gcs_object = gcs_object;
    m_gcs_object_isSet = true;
}

bool OAIExecStepConfig::is_gcs_object_Set() const{
    return m_gcs_object_isSet;
}

bool OAIExecStepConfig::is_gcs_object_Valid() const{
    return m_gcs_object_isValid;
}

QString OAIExecStepConfig::getInterpreter() const {
    return m_interpreter;
}
void OAIExecStepConfig::setInterpreter(const QString &interpreter) {
    m_interpreter = interpreter;
    m_interpreter_isSet = true;
}

bool OAIExecStepConfig::is_interpreter_Set() const{
    return m_interpreter_isSet;
}

bool OAIExecStepConfig::is_interpreter_Valid() const{
    return m_interpreter_isValid;
}

QString OAIExecStepConfig::getLocalPath() const {
    return m_local_path;
}
void OAIExecStepConfig::setLocalPath(const QString &local_path) {
    m_local_path = local_path;
    m_local_path_isSet = true;
}

bool OAIExecStepConfig::is_local_path_Set() const{
    return m_local_path_isSet;
}

bool OAIExecStepConfig::is_local_path_Valid() const{
    return m_local_path_isValid;
}

bool OAIExecStepConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_success_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpreter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecStepConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
