/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPatchConfig.h
 *
 * Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
 */

#ifndef OAIPatchConfig_H
#define OAIPatchConfig_H

#include <QJsonObject>

#include "OAIAptSettings.h"
#include "OAIExecStep.h"
#include "OAIObject.h"
#include "OAIWindowsUpdateSettings.h"
#include "OAIYumSettings.h"
#include "OAIZypperSettings.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAptSettings;
class OAIExecStep;
class OAIWindowsUpdateSettings;
class OAIYumSettings;
class OAIZypperSettings;

class OAIPatchConfig : public OAIObject {
public:
    OAIPatchConfig();
    OAIPatchConfig(QString json);
    ~OAIPatchConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAptSettings getApt() const;
    void setApt(const OAIAptSettings &apt);
    bool is_apt_Set() const;
    bool is_apt_Valid() const;

    OAIObject getGoo() const;
    void setGoo(const OAIObject &goo);
    bool is_goo_Set() const;
    bool is_goo_Valid() const;

    bool isMigInstancesAllowed() const;
    void setMigInstancesAllowed(const bool &mig_instances_allowed);
    bool is_mig_instances_allowed_Set() const;
    bool is_mig_instances_allowed_Valid() const;

    OAIExecStep getPostStep() const;
    void setPostStep(const OAIExecStep &post_step);
    bool is_post_step_Set() const;
    bool is_post_step_Valid() const;

    OAIExecStep getPreStep() const;
    void setPreStep(const OAIExecStep &pre_step);
    bool is_pre_step_Set() const;
    bool is_pre_step_Valid() const;

    QString getRebootConfig() const;
    void setRebootConfig(const QString &reboot_config);
    bool is_reboot_config_Set() const;
    bool is_reboot_config_Valid() const;

    OAIWindowsUpdateSettings getWindowsUpdate() const;
    void setWindowsUpdate(const OAIWindowsUpdateSettings &windows_update);
    bool is_windows_update_Set() const;
    bool is_windows_update_Valid() const;

    OAIYumSettings getYum() const;
    void setYum(const OAIYumSettings &yum);
    bool is_yum_Set() const;
    bool is_yum_Valid() const;

    OAIZypperSettings getZypper() const;
    void setZypper(const OAIZypperSettings &zypper);
    bool is_zypper_Set() const;
    bool is_zypper_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAptSettings m_apt;
    bool m_apt_isSet;
    bool m_apt_isValid;

    OAIObject m_goo;
    bool m_goo_isSet;
    bool m_goo_isValid;

    bool m_mig_instances_allowed;
    bool m_mig_instances_allowed_isSet;
    bool m_mig_instances_allowed_isValid;

    OAIExecStep m_post_step;
    bool m_post_step_isSet;
    bool m_post_step_isValid;

    OAIExecStep m_pre_step;
    bool m_pre_step_isSet;
    bool m_pre_step_isValid;

    QString m_reboot_config;
    bool m_reboot_config_isSet;
    bool m_reboot_config_isValid;

    OAIWindowsUpdateSettings m_windows_update;
    bool m_windows_update_isSet;
    bool m_windows_update_isValid;

    OAIYumSettings m_yum;
    bool m_yum_isSet;
    bool m_yum_isValid;

    OAIZypperSettings m_zypper;
    bool m_zypper_isSet;
    bool m_zypper_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPatchConfig)

#endif // OAIPatchConfig_H
