/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestPolicy::OAIGuestPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestPolicy::OAIGuestPolicy() {
    this->initializeModel();
}

OAIGuestPolicy::~OAIGuestPolicy() {}

void OAIGuestPolicy::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_repositories_isSet = false;
    m_package_repositories_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_recipes_isSet = false;
    m_recipes_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGuestPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestPolicy::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_repositories_isValid = ::OpenAPI::fromJsonValue(m_package_repositories, json[QString("packageRepositories")]);
    m_package_repositories_isSet = !json[QString("packageRepositories")].isNull() && m_package_repositories_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_recipes_isValid = ::OpenAPI::fromJsonValue(m_recipes, json[QString("recipes")]);
    m_recipes_isSet = !json[QString("recipes")].isNull() && m_recipes_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGuestPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment.isSet()) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_repositories.size() > 0) {
        obj.insert(QString("packageRepositories"), ::OpenAPI::toJsonValue(m_package_repositories));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_recipes.size() > 0) {
        obj.insert(QString("recipes"), ::OpenAPI::toJsonValue(m_recipes));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAssignment OAIGuestPolicy::getAssignment() const {
    return m_assignment;
}
void OAIGuestPolicy::setAssignment(const OAIAssignment &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAIGuestPolicy::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAIGuestPolicy::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QString OAIGuestPolicy::getCreateTime() const {
    return m_create_time;
}
void OAIGuestPolicy::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGuestPolicy::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGuestPolicy::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGuestPolicy::getDescription() const {
    return m_description;
}
void OAIGuestPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGuestPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGuestPolicy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGuestPolicy::getEtag() const {
    return m_etag;
}
void OAIGuestPolicy::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGuestPolicy::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGuestPolicy::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGuestPolicy::getName() const {
    return m_name;
}
void OAIGuestPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGuestPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGuestPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPackageRepository> OAIGuestPolicy::getPackageRepositories() const {
    return m_package_repositories;
}
void OAIGuestPolicy::setPackageRepositories(const QList<OAIPackageRepository> &package_repositories) {
    m_package_repositories = package_repositories;
    m_package_repositories_isSet = true;
}

bool OAIGuestPolicy::is_package_repositories_Set() const{
    return m_package_repositories_isSet;
}

bool OAIGuestPolicy::is_package_repositories_Valid() const{
    return m_package_repositories_isValid;
}

QList<OAIPackage> OAIGuestPolicy::getPackages() const {
    return m_packages;
}
void OAIGuestPolicy::setPackages(const QList<OAIPackage> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIGuestPolicy::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIGuestPolicy::is_packages_Valid() const{
    return m_packages_isValid;
}

QList<OAISoftwareRecipe> OAIGuestPolicy::getRecipes() const {
    return m_recipes;
}
void OAIGuestPolicy::setRecipes(const QList<OAISoftwareRecipe> &recipes) {
    m_recipes = recipes;
    m_recipes_isSet = true;
}

bool OAIGuestPolicy::is_recipes_Set() const{
    return m_recipes_isSet;
}

bool OAIGuestPolicy::is_recipes_Valid() const{
    return m_recipes_isValid;
}

QString OAIGuestPolicy::getUpdateTime() const {
    return m_update_time;
}
void OAIGuestPolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGuestPolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGuestPolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGuestPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
