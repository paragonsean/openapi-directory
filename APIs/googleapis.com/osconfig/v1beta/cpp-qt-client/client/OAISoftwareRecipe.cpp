/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareRecipe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareRecipe::OAISoftwareRecipe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareRecipe::OAISoftwareRecipe() {
    this->initializeModel();
}

OAISoftwareRecipe::~OAISoftwareRecipe() {}

void OAISoftwareRecipe::initializeModel() {

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_install_steps_isSet = false;
    m_install_steps_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_steps_isSet = false;
    m_update_steps_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISoftwareRecipe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareRecipe::fromJsonObject(QJsonObject json) {

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("desiredState")]);
    m_desired_state_isSet = !json[QString("desiredState")].isNull() && m_desired_state_isValid;

    m_install_steps_isValid = ::OpenAPI::fromJsonValue(m_install_steps, json[QString("installSteps")]);
    m_install_steps_isSet = !json[QString("installSteps")].isNull() && m_install_steps_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_steps_isValid = ::OpenAPI::fromJsonValue(m_update_steps, json[QString("updateSteps")]);
    m_update_steps_isSet = !json[QString("updateSteps")].isNull() && m_update_steps_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISoftwareRecipe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareRecipe::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_desired_state_isSet) {
        obj.insert(QString("desiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_install_steps.size() > 0) {
        obj.insert(QString("installSteps"), ::OpenAPI::toJsonValue(m_install_steps));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_steps.size() > 0) {
        obj.insert(QString("updateSteps"), ::OpenAPI::toJsonValue(m_update_steps));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAISoftwareRecipeArtifact> OAISoftwareRecipe::getArtifacts() const {
    return m_artifacts;
}
void OAISoftwareRecipe::setArtifacts(const QList<OAISoftwareRecipeArtifact> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAISoftwareRecipe::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAISoftwareRecipe::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QString OAISoftwareRecipe::getDesiredState() const {
    return m_desired_state;
}
void OAISoftwareRecipe::setDesiredState(const QString &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAISoftwareRecipe::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAISoftwareRecipe::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QList<OAISoftwareRecipeStep> OAISoftwareRecipe::getInstallSteps() const {
    return m_install_steps;
}
void OAISoftwareRecipe::setInstallSteps(const QList<OAISoftwareRecipeStep> &install_steps) {
    m_install_steps = install_steps;
    m_install_steps_isSet = true;
}

bool OAISoftwareRecipe::is_install_steps_Set() const{
    return m_install_steps_isSet;
}

bool OAISoftwareRecipe::is_install_steps_Valid() const{
    return m_install_steps_isValid;
}

QString OAISoftwareRecipe::getName() const {
    return m_name;
}
void OAISoftwareRecipe::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISoftwareRecipe::is_name_Set() const{
    return m_name_isSet;
}

bool OAISoftwareRecipe::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISoftwareRecipeStep> OAISoftwareRecipe::getUpdateSteps() const {
    return m_update_steps;
}
void OAISoftwareRecipe::setUpdateSteps(const QList<OAISoftwareRecipeStep> &update_steps) {
    m_update_steps = update_steps;
    m_update_steps_isSet = true;
}

bool OAISoftwareRecipe::is_update_steps_Set() const{
    return m_update_steps_isSet;
}

bool OAISoftwareRecipe::is_update_steps_Valid() const{
    return m_update_steps_isValid;
}

QString OAISoftwareRecipe::getVersion() const {
    return m_version;
}
void OAISoftwareRecipe::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISoftwareRecipe::is_version_Set() const{
    return m_version_isSet;
}

bool OAISoftwareRecipe::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISoftwareRecipe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareRecipe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
