/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchRollout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchRollout::OAIPatchRollout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchRollout::OAIPatchRollout() {
    this->initializeModel();
}

OAIPatchRollout::~OAIPatchRollout() {}

void OAIPatchRollout::initializeModel() {

    m_disruption_budget_isSet = false;
    m_disruption_budget_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAIPatchRollout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchRollout::fromJsonObject(QJsonObject json) {

    m_disruption_budget_isValid = ::OpenAPI::fromJsonValue(m_disruption_budget, json[QString("disruptionBudget")]);
    m_disruption_budget_isSet = !json[QString("disruptionBudget")].isNull() && m_disruption_budget_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAIPatchRollout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchRollout::asJsonObject() const {
    QJsonObject obj;
    if (m_disruption_budget.isSet()) {
        obj.insert(QString("disruptionBudget"), ::OpenAPI::toJsonValue(m_disruption_budget));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

OAIFixedOrPercent OAIPatchRollout::getDisruptionBudget() const {
    return m_disruption_budget;
}
void OAIPatchRollout::setDisruptionBudget(const OAIFixedOrPercent &disruption_budget) {
    m_disruption_budget = disruption_budget;
    m_disruption_budget_isSet = true;
}

bool OAIPatchRollout::is_disruption_budget_Set() const{
    return m_disruption_budget_isSet;
}

bool OAIPatchRollout::is_disruption_budget_Valid() const{
    return m_disruption_budget_isValid;
}

QString OAIPatchRollout::getMode() const {
    return m_mode;
}
void OAIPatchRollout::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIPatchRollout::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIPatchRollout::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAIPatchRollout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disruption_budget.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchRollout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
