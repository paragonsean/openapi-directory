/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackage::OAIPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackage::OAIPackage() {
    this->initializeModel();
}

OAIPackage::~OAIPackage() {}

void OAIPackage::initializeModel() {

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_manager_isSet = false;
    m_manager_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackage::fromJsonObject(QJsonObject json) {

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("desiredState")]);
    m_desired_state_isSet = !json[QString("desiredState")].isNull() && m_desired_state_isValid;

    m_manager_isValid = ::OpenAPI::fromJsonValue(m_manager, json[QString("manager")]);
    m_manager_isSet = !json[QString("manager")].isNull() && m_manager_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_state_isSet) {
        obj.insert(QString("desiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_manager_isSet) {
        obj.insert(QString("manager"), ::OpenAPI::toJsonValue(m_manager));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIPackage::getDesiredState() const {
    return m_desired_state;
}
void OAIPackage::setDesiredState(const QString &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIPackage::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIPackage::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

QString OAIPackage::getManager() const {
    return m_manager;
}
void OAIPackage::setManager(const QString &manager) {
    m_manager = manager;
    m_manager_isSet = true;
}

bool OAIPackage::is_manager_Set() const{
    return m_manager_isSet;
}

bool OAIPackage::is_manager_Valid() const{
    return m_manager_isValid;
}

QString OAIPackage::getName() const {
    return m_name;
}
void OAIPackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPackage::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
