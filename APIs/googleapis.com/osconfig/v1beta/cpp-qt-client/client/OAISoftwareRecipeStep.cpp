/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareRecipeStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareRecipeStep::OAISoftwareRecipeStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareRecipeStep::OAISoftwareRecipeStep() {
    this->initializeModel();
}

OAISoftwareRecipeStep::~OAISoftwareRecipeStep() {}

void OAISoftwareRecipeStep::initializeModel() {

    m_archive_extraction_isSet = false;
    m_archive_extraction_isValid = false;

    m_dpkg_installation_isSet = false;
    m_dpkg_installation_isValid = false;

    m_file_copy_isSet = false;
    m_file_copy_isValid = false;

    m_file_exec_isSet = false;
    m_file_exec_isValid = false;

    m_msi_installation_isSet = false;
    m_msi_installation_isValid = false;

    m_rpm_installation_isSet = false;
    m_rpm_installation_isValid = false;

    m_script_run_isSet = false;
    m_script_run_isValid = false;
}

void OAISoftwareRecipeStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareRecipeStep::fromJsonObject(QJsonObject json) {

    m_archive_extraction_isValid = ::OpenAPI::fromJsonValue(m_archive_extraction, json[QString("archiveExtraction")]);
    m_archive_extraction_isSet = !json[QString("archiveExtraction")].isNull() && m_archive_extraction_isValid;

    m_dpkg_installation_isValid = ::OpenAPI::fromJsonValue(m_dpkg_installation, json[QString("dpkgInstallation")]);
    m_dpkg_installation_isSet = !json[QString("dpkgInstallation")].isNull() && m_dpkg_installation_isValid;

    m_file_copy_isValid = ::OpenAPI::fromJsonValue(m_file_copy, json[QString("fileCopy")]);
    m_file_copy_isSet = !json[QString("fileCopy")].isNull() && m_file_copy_isValid;

    m_file_exec_isValid = ::OpenAPI::fromJsonValue(m_file_exec, json[QString("fileExec")]);
    m_file_exec_isSet = !json[QString("fileExec")].isNull() && m_file_exec_isValid;

    m_msi_installation_isValid = ::OpenAPI::fromJsonValue(m_msi_installation, json[QString("msiInstallation")]);
    m_msi_installation_isSet = !json[QString("msiInstallation")].isNull() && m_msi_installation_isValid;

    m_rpm_installation_isValid = ::OpenAPI::fromJsonValue(m_rpm_installation, json[QString("rpmInstallation")]);
    m_rpm_installation_isSet = !json[QString("rpmInstallation")].isNull() && m_rpm_installation_isValid;

    m_script_run_isValid = ::OpenAPI::fromJsonValue(m_script_run, json[QString("scriptRun")]);
    m_script_run_isSet = !json[QString("scriptRun")].isNull() && m_script_run_isValid;
}

QString OAISoftwareRecipeStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareRecipeStep::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_extraction.isSet()) {
        obj.insert(QString("archiveExtraction"), ::OpenAPI::toJsonValue(m_archive_extraction));
    }
    if (m_dpkg_installation.isSet()) {
        obj.insert(QString("dpkgInstallation"), ::OpenAPI::toJsonValue(m_dpkg_installation));
    }
    if (m_file_copy.isSet()) {
        obj.insert(QString("fileCopy"), ::OpenAPI::toJsonValue(m_file_copy));
    }
    if (m_file_exec.isSet()) {
        obj.insert(QString("fileExec"), ::OpenAPI::toJsonValue(m_file_exec));
    }
    if (m_msi_installation.isSet()) {
        obj.insert(QString("msiInstallation"), ::OpenAPI::toJsonValue(m_msi_installation));
    }
    if (m_rpm_installation.isSet()) {
        obj.insert(QString("rpmInstallation"), ::OpenAPI::toJsonValue(m_rpm_installation));
    }
    if (m_script_run.isSet()) {
        obj.insert(QString("scriptRun"), ::OpenAPI::toJsonValue(m_script_run));
    }
    return obj;
}

OAISoftwareRecipeStepExtractArchive OAISoftwareRecipeStep::getArchiveExtraction() const {
    return m_archive_extraction;
}
void OAISoftwareRecipeStep::setArchiveExtraction(const OAISoftwareRecipeStepExtractArchive &archive_extraction) {
    m_archive_extraction = archive_extraction;
    m_archive_extraction_isSet = true;
}

bool OAISoftwareRecipeStep::is_archive_extraction_Set() const{
    return m_archive_extraction_isSet;
}

bool OAISoftwareRecipeStep::is_archive_extraction_Valid() const{
    return m_archive_extraction_isValid;
}

OAISoftwareRecipeStepInstallDpkg OAISoftwareRecipeStep::getDpkgInstallation() const {
    return m_dpkg_installation;
}
void OAISoftwareRecipeStep::setDpkgInstallation(const OAISoftwareRecipeStepInstallDpkg &dpkg_installation) {
    m_dpkg_installation = dpkg_installation;
    m_dpkg_installation_isSet = true;
}

bool OAISoftwareRecipeStep::is_dpkg_installation_Set() const{
    return m_dpkg_installation_isSet;
}

bool OAISoftwareRecipeStep::is_dpkg_installation_Valid() const{
    return m_dpkg_installation_isValid;
}

OAISoftwareRecipeStepCopyFile OAISoftwareRecipeStep::getFileCopy() const {
    return m_file_copy;
}
void OAISoftwareRecipeStep::setFileCopy(const OAISoftwareRecipeStepCopyFile &file_copy) {
    m_file_copy = file_copy;
    m_file_copy_isSet = true;
}

bool OAISoftwareRecipeStep::is_file_copy_Set() const{
    return m_file_copy_isSet;
}

bool OAISoftwareRecipeStep::is_file_copy_Valid() const{
    return m_file_copy_isValid;
}

OAISoftwareRecipeStepExecFile OAISoftwareRecipeStep::getFileExec() const {
    return m_file_exec;
}
void OAISoftwareRecipeStep::setFileExec(const OAISoftwareRecipeStepExecFile &file_exec) {
    m_file_exec = file_exec;
    m_file_exec_isSet = true;
}

bool OAISoftwareRecipeStep::is_file_exec_Set() const{
    return m_file_exec_isSet;
}

bool OAISoftwareRecipeStep::is_file_exec_Valid() const{
    return m_file_exec_isValid;
}

OAISoftwareRecipeStepInstallMsi OAISoftwareRecipeStep::getMsiInstallation() const {
    return m_msi_installation;
}
void OAISoftwareRecipeStep::setMsiInstallation(const OAISoftwareRecipeStepInstallMsi &msi_installation) {
    m_msi_installation = msi_installation;
    m_msi_installation_isSet = true;
}

bool OAISoftwareRecipeStep::is_msi_installation_Set() const{
    return m_msi_installation_isSet;
}

bool OAISoftwareRecipeStep::is_msi_installation_Valid() const{
    return m_msi_installation_isValid;
}

OAISoftwareRecipeStepInstallRpm OAISoftwareRecipeStep::getRpmInstallation() const {
    return m_rpm_installation;
}
void OAISoftwareRecipeStep::setRpmInstallation(const OAISoftwareRecipeStepInstallRpm &rpm_installation) {
    m_rpm_installation = rpm_installation;
    m_rpm_installation_isSet = true;
}

bool OAISoftwareRecipeStep::is_rpm_installation_Set() const{
    return m_rpm_installation_isSet;
}

bool OAISoftwareRecipeStep::is_rpm_installation_Valid() const{
    return m_rpm_installation_isValid;
}

OAISoftwareRecipeStepRunScript OAISoftwareRecipeStep::getScriptRun() const {
    return m_script_run;
}
void OAISoftwareRecipeStep::setScriptRun(const OAISoftwareRecipeStepRunScript &script_run) {
    m_script_run = script_run;
    m_script_run_isSet = true;
}

bool OAISoftwareRecipeStep::is_script_run_Set() const{
    return m_script_run_isSet;
}

bool OAISoftwareRecipeStep::is_script_run_Valid() const{
    return m_script_run_isValid;
}

bool OAISoftwareRecipeStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_extraction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpkg_installation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_exec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi_installation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpm_installation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_run.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareRecipeStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
