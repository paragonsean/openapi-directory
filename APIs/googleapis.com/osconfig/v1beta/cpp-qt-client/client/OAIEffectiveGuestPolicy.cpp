/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffectiveGuestPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEffectiveGuestPolicy::OAIEffectiveGuestPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEffectiveGuestPolicy::OAIEffectiveGuestPolicy() {
    this->initializeModel();
}

OAIEffectiveGuestPolicy::~OAIEffectiveGuestPolicy() {}

void OAIEffectiveGuestPolicy::initializeModel() {

    m_package_repositories_isSet = false;
    m_package_repositories_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_software_recipes_isSet = false;
    m_software_recipes_isValid = false;
}

void OAIEffectiveGuestPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEffectiveGuestPolicy::fromJsonObject(QJsonObject json) {

    m_package_repositories_isValid = ::OpenAPI::fromJsonValue(m_package_repositories, json[QString("packageRepositories")]);
    m_package_repositories_isSet = !json[QString("packageRepositories")].isNull() && m_package_repositories_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_software_recipes_isValid = ::OpenAPI::fromJsonValue(m_software_recipes, json[QString("softwareRecipes")]);
    m_software_recipes_isSet = !json[QString("softwareRecipes")].isNull() && m_software_recipes_isValid;
}

QString OAIEffectiveGuestPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEffectiveGuestPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_package_repositories.size() > 0) {
        obj.insert(QString("packageRepositories"), ::OpenAPI::toJsonValue(m_package_repositories));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_software_recipes.size() > 0) {
        obj.insert(QString("softwareRecipes"), ::OpenAPI::toJsonValue(m_software_recipes));
    }
    return obj;
}

QList<OAIEffectiveGuestPolicySourcedPackageRepository> OAIEffectiveGuestPolicy::getPackageRepositories() const {
    return m_package_repositories;
}
void OAIEffectiveGuestPolicy::setPackageRepositories(const QList<OAIEffectiveGuestPolicySourcedPackageRepository> &package_repositories) {
    m_package_repositories = package_repositories;
    m_package_repositories_isSet = true;
}

bool OAIEffectiveGuestPolicy::is_package_repositories_Set() const{
    return m_package_repositories_isSet;
}

bool OAIEffectiveGuestPolicy::is_package_repositories_Valid() const{
    return m_package_repositories_isValid;
}

QList<OAIEffectiveGuestPolicySourcedPackage> OAIEffectiveGuestPolicy::getPackages() const {
    return m_packages;
}
void OAIEffectiveGuestPolicy::setPackages(const QList<OAIEffectiveGuestPolicySourcedPackage> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIEffectiveGuestPolicy::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIEffectiveGuestPolicy::is_packages_Valid() const{
    return m_packages_isValid;
}

QList<OAIEffectiveGuestPolicySourcedSoftwareRecipe> OAIEffectiveGuestPolicy::getSoftwareRecipes() const {
    return m_software_recipes;
}
void OAIEffectiveGuestPolicy::setSoftwareRecipes(const QList<OAIEffectiveGuestPolicySourcedSoftwareRecipe> &software_recipes) {
    m_software_recipes = software_recipes;
    m_software_recipes_isSet = true;
}

bool OAIEffectiveGuestPolicy::is_software_recipes_Set() const{
    return m_software_recipes_isSet;
}

bool OAIEffectiveGuestPolicy::is_software_recipes_Valid() const{
    return m_software_recipes_isValid;
}

bool OAIEffectiveGuestPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_recipes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEffectiveGuestPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
