/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutePatchJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutePatchJobRequest::OAIExecutePatchJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutePatchJobRequest::OAIExecutePatchJobRequest() {
    this->initializeModel();
}

OAIExecutePatchJobRequest::~OAIExecutePatchJobRequest() {}

void OAIExecutePatchJobRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_instance_filter_isSet = false;
    m_instance_filter_isValid = false;

    m_patch_config_isSet = false;
    m_patch_config_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;
}

void OAIExecutePatchJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutePatchJobRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_instance_filter_isValid = ::OpenAPI::fromJsonValue(m_instance_filter, json[QString("instanceFilter")]);
    m_instance_filter_isSet = !json[QString("instanceFilter")].isNull() && m_instance_filter_isValid;

    m_patch_config_isValid = ::OpenAPI::fromJsonValue(m_patch_config, json[QString("patchConfig")]);
    m_patch_config_isSet = !json[QString("patchConfig")].isNull() && m_patch_config_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;
}

QString OAIExecutePatchJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutePatchJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_instance_filter.isSet()) {
        obj.insert(QString("instanceFilter"), ::OpenAPI::toJsonValue(m_instance_filter));
    }
    if (m_patch_config.isSet()) {
        obj.insert(QString("patchConfig"), ::OpenAPI::toJsonValue(m_patch_config));
    }
    if (m_rollout.isSet()) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    return obj;
}

QString OAIExecutePatchJobRequest::getDescription() const {
    return m_description;
}
void OAIExecutePatchJobRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExecutePatchJobRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExecutePatchJobRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIExecutePatchJobRequest::getDisplayName() const {
    return m_display_name;
}
void OAIExecutePatchJobRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIExecutePatchJobRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIExecutePatchJobRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIExecutePatchJobRequest::isDryRun() const {
    return m_dry_run;
}
void OAIExecutePatchJobRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIExecutePatchJobRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIExecutePatchJobRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

QString OAIExecutePatchJobRequest::getDuration() const {
    return m_duration;
}
void OAIExecutePatchJobRequest::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIExecutePatchJobRequest::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIExecutePatchJobRequest::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIPatchInstanceFilter OAIExecutePatchJobRequest::getInstanceFilter() const {
    return m_instance_filter;
}
void OAIExecutePatchJobRequest::setInstanceFilter(const OAIPatchInstanceFilter &instance_filter) {
    m_instance_filter = instance_filter;
    m_instance_filter_isSet = true;
}

bool OAIExecutePatchJobRequest::is_instance_filter_Set() const{
    return m_instance_filter_isSet;
}

bool OAIExecutePatchJobRequest::is_instance_filter_Valid() const{
    return m_instance_filter_isValid;
}

OAIPatchConfig OAIExecutePatchJobRequest::getPatchConfig() const {
    return m_patch_config;
}
void OAIExecutePatchJobRequest::setPatchConfig(const OAIPatchConfig &patch_config) {
    m_patch_config = patch_config;
    m_patch_config_isSet = true;
}

bool OAIExecutePatchJobRequest::is_patch_config_Set() const{
    return m_patch_config_isSet;
}

bool OAIExecutePatchJobRequest::is_patch_config_Valid() const{
    return m_patch_config_isValid;
}

OAIPatchRollout OAIExecutePatchJobRequest::getRollout() const {
    return m_rollout;
}
void OAIExecutePatchJobRequest::setRollout(const OAIPatchRollout &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAIExecutePatchJobRequest::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAIExecutePatchJobRequest::is_rollout_Valid() const{
    return m_rollout_isValid;
}

bool OAIExecutePatchJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutePatchJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
