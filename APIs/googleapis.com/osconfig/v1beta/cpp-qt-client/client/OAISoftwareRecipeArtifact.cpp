/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareRecipeArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareRecipeArtifact::OAISoftwareRecipeArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareRecipeArtifact::OAISoftwareRecipeArtifact() {
    this->initializeModel();
}

OAISoftwareRecipeArtifact::~OAISoftwareRecipeArtifact() {}

void OAISoftwareRecipeArtifact::initializeModel() {

    m_allow_insecure_isSet = false;
    m_allow_insecure_isValid = false;

    m_gcs_isSet = false;
    m_gcs_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_remote_isSet = false;
    m_remote_isValid = false;
}

void OAISoftwareRecipeArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareRecipeArtifact::fromJsonObject(QJsonObject json) {

    m_allow_insecure_isValid = ::OpenAPI::fromJsonValue(m_allow_insecure, json[QString("allowInsecure")]);
    m_allow_insecure_isSet = !json[QString("allowInsecure")].isNull() && m_allow_insecure_isValid;

    m_gcs_isValid = ::OpenAPI::fromJsonValue(m_gcs, json[QString("gcs")]);
    m_gcs_isSet = !json[QString("gcs")].isNull() && m_gcs_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_remote_isValid = ::OpenAPI::fromJsonValue(m_remote, json[QString("remote")]);
    m_remote_isSet = !json[QString("remote")].isNull() && m_remote_isValid;
}

QString OAISoftwareRecipeArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareRecipeArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_insecure_isSet) {
        obj.insert(QString("allowInsecure"), ::OpenAPI::toJsonValue(m_allow_insecure));
    }
    if (m_gcs.isSet()) {
        obj.insert(QString("gcs"), ::OpenAPI::toJsonValue(m_gcs));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_remote.isSet()) {
        obj.insert(QString("remote"), ::OpenAPI::toJsonValue(m_remote));
    }
    return obj;
}

bool OAISoftwareRecipeArtifact::isAllowInsecure() const {
    return m_allow_insecure;
}
void OAISoftwareRecipeArtifact::setAllowInsecure(const bool &allow_insecure) {
    m_allow_insecure = allow_insecure;
    m_allow_insecure_isSet = true;
}

bool OAISoftwareRecipeArtifact::is_allow_insecure_Set() const{
    return m_allow_insecure_isSet;
}

bool OAISoftwareRecipeArtifact::is_allow_insecure_Valid() const{
    return m_allow_insecure_isValid;
}

OAISoftwareRecipeArtifactGcs OAISoftwareRecipeArtifact::getGcs() const {
    return m_gcs;
}
void OAISoftwareRecipeArtifact::setGcs(const OAISoftwareRecipeArtifactGcs &gcs) {
    m_gcs = gcs;
    m_gcs_isSet = true;
}

bool OAISoftwareRecipeArtifact::is_gcs_Set() const{
    return m_gcs_isSet;
}

bool OAISoftwareRecipeArtifact::is_gcs_Valid() const{
    return m_gcs_isValid;
}

QString OAISoftwareRecipeArtifact::getId() const {
    return m_id;
}
void OAISoftwareRecipeArtifact::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISoftwareRecipeArtifact::is_id_Set() const{
    return m_id_isSet;
}

bool OAISoftwareRecipeArtifact::is_id_Valid() const{
    return m_id_isValid;
}

OAISoftwareRecipeArtifactRemote OAISoftwareRecipeArtifact::getRemote() const {
    return m_remote;
}
void OAISoftwareRecipeArtifact::setRemote(const OAISoftwareRecipeArtifactRemote &remote) {
    m_remote = remote;
    m_remote_isSet = true;
}

bool OAISoftwareRecipeArtifact::is_remote_Set() const{
    return m_remote_isSet;
}

bool OAISoftwareRecipeArtifact::is_remote_Valid() const{
    return m_remote_isValid;
}

bool OAISoftwareRecipeArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_insecure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareRecipeArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
