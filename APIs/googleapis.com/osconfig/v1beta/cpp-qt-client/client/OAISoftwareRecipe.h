/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISoftwareRecipe.h
 *
 * A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is &#x60;UPDATED&#x60;, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
 */

#ifndef OAISoftwareRecipe_H
#define OAISoftwareRecipe_H

#include <QJsonObject>

#include "OAISoftwareRecipeArtifact.h"
#include "OAISoftwareRecipeStep.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISoftwareRecipeArtifact;
class OAISoftwareRecipeStep;

class OAISoftwareRecipe : public OAIObject {
public:
    OAISoftwareRecipe();
    OAISoftwareRecipe(QString json);
    ~OAISoftwareRecipe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISoftwareRecipeArtifact> getArtifacts() const;
    void setArtifacts(const QList<OAISoftwareRecipeArtifact> &artifacts);
    bool is_artifacts_Set() const;
    bool is_artifacts_Valid() const;

    QString getDesiredState() const;
    void setDesiredState(const QString &desired_state);
    bool is_desired_state_Set() const;
    bool is_desired_state_Valid() const;

    QList<OAISoftwareRecipeStep> getInstallSteps() const;
    void setInstallSteps(const QList<OAISoftwareRecipeStep> &install_steps);
    bool is_install_steps_Set() const;
    bool is_install_steps_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAISoftwareRecipeStep> getUpdateSteps() const;
    void setUpdateSteps(const QList<OAISoftwareRecipeStep> &update_steps);
    bool is_update_steps_Set() const;
    bool is_update_steps_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISoftwareRecipeArtifact> m_artifacts;
    bool m_artifacts_isSet;
    bool m_artifacts_isValid;

    QString m_desired_state;
    bool m_desired_state_isSet;
    bool m_desired_state_isValid;

    QList<OAISoftwareRecipeStep> m_install_steps;
    bool m_install_steps_isSet;
    bool m_install_steps_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAISoftwareRecipeStep> m_update_steps;
    bool m_update_steps_isSet;
    bool m_update_steps_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISoftwareRecipe)

#endif // OAISoftwareRecipe_H
