/**
 * OS Config API
 * OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignment::OAIAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignment::OAIAssignment() {
    this->initializeModel();
}

OAIAssignment::~OAIAssignment() {}

void OAIAssignment::initializeModel() {

    m_group_labels_isSet = false;
    m_group_labels_isValid = false;

    m_instance_name_prefixes_isSet = false;
    m_instance_name_prefixes_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_os_types_isSet = false;
    m_os_types_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAIAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignment::fromJsonObject(QJsonObject json) {

    m_group_labels_isValid = ::OpenAPI::fromJsonValue(m_group_labels, json[QString("groupLabels")]);
    m_group_labels_isSet = !json[QString("groupLabels")].isNull() && m_group_labels_isValid;

    m_instance_name_prefixes_isValid = ::OpenAPI::fromJsonValue(m_instance_name_prefixes, json[QString("instanceNamePrefixes")]);
    m_instance_name_prefixes_isSet = !json[QString("instanceNamePrefixes")].isNull() && m_instance_name_prefixes_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_os_types_isValid = ::OpenAPI::fromJsonValue(m_os_types, json[QString("osTypes")]);
    m_os_types_isSet = !json[QString("osTypes")].isNull() && m_os_types_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAIAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_group_labels.size() > 0) {
        obj.insert(QString("groupLabels"), ::OpenAPI::toJsonValue(m_group_labels));
    }
    if (m_instance_name_prefixes.size() > 0) {
        obj.insert(QString("instanceNamePrefixes"), ::OpenAPI::toJsonValue(m_instance_name_prefixes));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_os_types.size() > 0) {
        obj.insert(QString("osTypes"), ::OpenAPI::toJsonValue(m_os_types));
    }
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

QList<OAIAssignmentGroupLabel> OAIAssignment::getGroupLabels() const {
    return m_group_labels;
}
void OAIAssignment::setGroupLabels(const QList<OAIAssignmentGroupLabel> &group_labels) {
    m_group_labels = group_labels;
    m_group_labels_isSet = true;
}

bool OAIAssignment::is_group_labels_Set() const{
    return m_group_labels_isSet;
}

bool OAIAssignment::is_group_labels_Valid() const{
    return m_group_labels_isValid;
}

QList<QString> OAIAssignment::getInstanceNamePrefixes() const {
    return m_instance_name_prefixes;
}
void OAIAssignment::setInstanceNamePrefixes(const QList<QString> &instance_name_prefixes) {
    m_instance_name_prefixes = instance_name_prefixes;
    m_instance_name_prefixes_isSet = true;
}

bool OAIAssignment::is_instance_name_prefixes_Set() const{
    return m_instance_name_prefixes_isSet;
}

bool OAIAssignment::is_instance_name_prefixes_Valid() const{
    return m_instance_name_prefixes_isValid;
}

QList<QString> OAIAssignment::getInstances() const {
    return m_instances;
}
void OAIAssignment::setInstances(const QList<QString> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIAssignment::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIAssignment::is_instances_Valid() const{
    return m_instances_isValid;
}

QList<OAIAssignmentOsType> OAIAssignment::getOsTypes() const {
    return m_os_types;
}
void OAIAssignment::setOsTypes(const QList<OAIAssignmentOsType> &os_types) {
    m_os_types = os_types;
    m_os_types_isSet = true;
}

bool OAIAssignment::is_os_types_Set() const{
    return m_os_types_isSet;
}

bool OAIAssignment::is_os_types_Valid() const{
    return m_os_types_isValid;
}

QList<QString> OAIAssignment::getZones() const {
    return m_zones;
}
void OAIAssignment::setZones(const QList<QString> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAIAssignment::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAIAssignment::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAIAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
