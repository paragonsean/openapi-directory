/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvroConfig from './AvroConfig';

/**
 * The CloudStorageConfig model module.
 * @module model/CloudStorageConfig
 * @version v1
 */
class CloudStorageConfig {
    /**
     * Constructs a new <code>CloudStorageConfig</code>.
     * Configuration for a Cloud Storage subscription.
     * @alias module:model/CloudStorageConfig
     */
    constructor() { 
        
        CloudStorageConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudStorageConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudStorageConfig} obj Optional instance to populate.
     * @return {module:model/CloudStorageConfig} The populated <code>CloudStorageConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudStorageConfig();

            if (data.hasOwnProperty('avroConfig')) {
                obj['avroConfig'] = AvroConfig.constructFromObject(data['avroConfig']);
            }
            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('filenamePrefix')) {
                obj['filenamePrefix'] = ApiClient.convertToType(data['filenamePrefix'], 'String');
            }
            if (data.hasOwnProperty('filenameSuffix')) {
                obj['filenameSuffix'] = ApiClient.convertToType(data['filenameSuffix'], 'String');
            }
            if (data.hasOwnProperty('maxBytes')) {
                obj['maxBytes'] = ApiClient.convertToType(data['maxBytes'], 'String');
            }
            if (data.hasOwnProperty('maxDuration')) {
                obj['maxDuration'] = ApiClient.convertToType(data['maxDuration'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('textConfig')) {
                obj['textConfig'] = ApiClient.convertToType(data['textConfig'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudStorageConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudStorageConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `avroConfig`
        if (data['avroConfig']) { // data not null
          AvroConfig.validateJSON(data['avroConfig']);
        }
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['filenamePrefix'] && !(typeof data['filenamePrefix'] === 'string' || data['filenamePrefix'] instanceof String)) {
            throw new Error("Expected the field `filenamePrefix` to be a primitive type in the JSON string but got " + data['filenamePrefix']);
        }
        // ensure the json data is a string
        if (data['filenameSuffix'] && !(typeof data['filenameSuffix'] === 'string' || data['filenameSuffix'] instanceof String)) {
            throw new Error("Expected the field `filenameSuffix` to be a primitive type in the JSON string but got " + data['filenameSuffix']);
        }
        // ensure the json data is a string
        if (data['maxBytes'] && !(typeof data['maxBytes'] === 'string' || data['maxBytes'] instanceof String)) {
            throw new Error("Expected the field `maxBytes` to be a primitive type in the JSON string but got " + data['maxBytes']);
        }
        // ensure the json data is a string
        if (data['maxDuration'] && !(typeof data['maxDuration'] === 'string' || data['maxDuration'] instanceof String)) {
            throw new Error("Expected the field `maxDuration` to be a primitive type in the JSON string but got " + data['maxDuration']);
        }
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/AvroConfig} avroConfig
 */
CloudStorageConfig.prototype['avroConfig'] = undefined;

/**
 * Required. User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like \"gs://\". See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).
 * @member {String} bucket
 */
CloudStorageConfig.prototype['bucket'] = undefined;

/**
 * Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).
 * @member {String} filenamePrefix
 */
CloudStorageConfig.prototype['filenamePrefix'] = undefined;

/**
 * Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in \"/\".
 * @member {String} filenameSuffix
 */
CloudStorageConfig.prototype['filenameSuffix'] = undefined;

/**
 * Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.
 * @member {String} maxBytes
 */
CloudStorageConfig.prototype['maxBytes'] = undefined;

/**
 * Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription's acknowledgement deadline.
 * @member {String} maxDuration
 */
CloudStorageConfig.prototype['maxDuration'] = undefined;

/**
 * Optional. The service account to use to write to Cloud Storage. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.
 * @member {String} serviceAccountEmail
 */
CloudStorageConfig.prototype['serviceAccountEmail'] = undefined;

/**
 * Output only. An output-only field that indicates whether or not the subscription can receive messages.
 * @member {module:model/CloudStorageConfig.StateEnum} state
 */
CloudStorageConfig.prototype['state'] = undefined;

/**
 * Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.
 * @member {Object} textConfig
 */
CloudStorageConfig.prototype['textConfig'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CloudStorageConfig['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PERMISSION_DENIED"
     * @const
     */
    "PERMISSION_DENIED": "PERMISSION_DENIED",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "IN_TRANSIT_LOCATION_RESTRICTION"
     * @const
     */
    "IN_TRANSIT_LOCATION_RESTRICTION": "IN_TRANSIT_LOCATION_RESTRICTION"
};



export default CloudStorageConfig;

