/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeadLetterPolicy model module.
 * @module model/DeadLetterPolicy
 * @version v1
 */
class DeadLetterPolicy {
    /**
     * Constructs a new <code>DeadLetterPolicy</code>.
     * Dead lettering is done on a best effort basis. The same message might be dead lettered multiple times. If validation on any of the fields fails at subscription creation/updation, the create/update subscription request will fail.
     * @alias module:model/DeadLetterPolicy
     */
    constructor() { 
        
        DeadLetterPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeadLetterPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeadLetterPolicy} obj Optional instance to populate.
     * @return {module:model/DeadLetterPolicy} The populated <code>DeadLetterPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeadLetterPolicy();

            if (data.hasOwnProperty('deadLetterTopic')) {
                obj['deadLetterTopic'] = ApiClient.convertToType(data['deadLetterTopic'], 'String');
            }
            if (data.hasOwnProperty('maxDeliveryAttempts')) {
                obj['maxDeliveryAttempts'] = ApiClient.convertToType(data['maxDeliveryAttempts'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeadLetterPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeadLetterPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deadLetterTopic'] && !(typeof data['deadLetterTopic'] === 'string' || data['deadLetterTopic'] instanceof String)) {
            throw new Error("Expected the field `deadLetterTopic` to be a primitive type in the JSON string but got " + data['deadLetterTopic']);
        }

        return true;
    }


}



/**
 * Optional. The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.
 * @member {String} deadLetterTopic
 */
DeadLetterPolicy.prototype['deadLetterTopic'] = undefined;

/**
 * Optional. The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.
 * @member {Number} maxDeliveryAttempts
 */
DeadLetterPolicy.prototype['maxDeliveryAttempts'] = undefined;






export default DeadLetterPolicy;

