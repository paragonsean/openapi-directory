/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IngestionDataSourceSettings from './IngestionDataSourceSettings';
import MessageStoragePolicy from './MessageStoragePolicy';
import SchemaSettings from './SchemaSettings';

/**
 * The Topic model module.
 * @module model/Topic
 * @version v1
 */
class Topic {
    /**
     * Constructs a new <code>Topic</code>.
     * A topic resource.
     * @alias module:model/Topic
     */
    constructor() { 
        
        Topic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Topic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Topic} obj Optional instance to populate.
     * @return {module:model/Topic} The populated <code>Topic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Topic();

            if (data.hasOwnProperty('ingestionDataSourceSettings')) {
                obj['ingestionDataSourceSettings'] = IngestionDataSourceSettings.constructFromObject(data['ingestionDataSourceSettings']);
            }
            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('messageRetentionDuration')) {
                obj['messageRetentionDuration'] = ApiClient.convertToType(data['messageRetentionDuration'], 'String');
            }
            if (data.hasOwnProperty('messageStoragePolicy')) {
                obj['messageStoragePolicy'] = MessageStoragePolicy.constructFromObject(data['messageStoragePolicy']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaSettings')) {
                obj['schemaSettings'] = SchemaSettings.constructFromObject(data['schemaSettings']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Topic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Topic</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ingestionDataSourceSettings`
        if (data['ingestionDataSourceSettings']) { // data not null
          IngestionDataSourceSettings.validateJSON(data['ingestionDataSourceSettings']);
        }
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // ensure the json data is a string
        if (data['messageRetentionDuration'] && !(typeof data['messageRetentionDuration'] === 'string' || data['messageRetentionDuration'] instanceof String)) {
            throw new Error("Expected the field `messageRetentionDuration` to be a primitive type in the JSON string but got " + data['messageRetentionDuration']);
        }
        // validate the optional field `messageStoragePolicy`
        if (data['messageStoragePolicy']) { // data not null
          MessageStoragePolicy.validateJSON(data['messageStoragePolicy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `schemaSettings`
        if (data['schemaSettings']) { // data not null
          SchemaSettings.validateJSON(data['schemaSettings']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/IngestionDataSourceSettings} ingestionDataSourceSettings
 */
Topic.prototype['ingestionDataSourceSettings'] = undefined;

/**
 * Optional. The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. The expected format is `projects/_*_/locations/_*_/keyRings/_*_/cryptoKeys/_*`.
 * @member {String} kmsKeyName
 */
Topic.prototype['kmsKeyName'] = undefined;

/**
 * Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).
 * @member {Object.<String, String>} labels
 */
Topic.prototype['labels'] = undefined;

/**
 * Optional. Indicates the minimum duration to retain a message after it is published to the topic. If this field is set, messages published to the topic in the last `message_retention_duration` are always available to subscribers. For instance, it allows any attached subscription to [seek to a timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) that is up to `message_retention_duration` in the past. If this field is not set, message retention is controlled by settings on individual subscriptions. Cannot be more than 31 days or less than 10 minutes.
 * @member {String} messageRetentionDuration
 */
Topic.prototype['messageRetentionDuration'] = undefined;

/**
 * @member {module:model/MessageStoragePolicy} messageStoragePolicy
 */
Topic.prototype['messageStoragePolicy'] = undefined;

/**
 * Required. The name of the topic. It must have the format `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.
 * @member {String} name
 */
Topic.prototype['name'] = undefined;

/**
 * Optional. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
 * @member {Boolean} satisfiesPzs
 */
Topic.prototype['satisfiesPzs'] = undefined;

/**
 * @member {module:model/SchemaSettings} schemaSettings
 */
Topic.prototype['schemaSettings'] = undefined;

/**
 * Output only. An output-only field indicating the state of the topic.
 * @member {module:model/Topic.StateEnum} state
 */
Topic.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Topic['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INGESTION_RESOURCE_ERROR"
     * @const
     */
    "INGESTION_RESOURCE_ERROR": "INGESTION_RESOURCE_ERROR"
};



export default Topic;

