/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PubsubMessage from './PubsubMessage';

/**
 * The ReceivedMessage model module.
 * @module model/ReceivedMessage
 * @version v1
 */
class ReceivedMessage {
    /**
     * Constructs a new <code>ReceivedMessage</code>.
     * A message and its corresponding acknowledgment ID.
     * @alias module:model/ReceivedMessage
     */
    constructor() { 
        
        ReceivedMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReceivedMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceivedMessage} obj Optional instance to populate.
     * @return {module:model/ReceivedMessage} The populated <code>ReceivedMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceivedMessage();

            if (data.hasOwnProperty('ackId')) {
                obj['ackId'] = ApiClient.convertToType(data['ackId'], 'String');
            }
            if (data.hasOwnProperty('deliveryAttempt')) {
                obj['deliveryAttempt'] = ApiClient.convertToType(data['deliveryAttempt'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = PubsubMessage.constructFromObject(data['message']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceivedMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceivedMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ackId'] && !(typeof data['ackId'] === 'string' || data['ackId'] instanceof String)) {
            throw new Error("Expected the field `ackId` to be a primitive type in the JSON string but got " + data['ackId']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          PubsubMessage.validateJSON(data['message']);
        }

        return true;
    }


}



/**
 * Optional. This ID can be used to acknowledge the received message.
 * @member {String} ackId
 */
ReceivedMessage.prototype['ackId'] = undefined;

/**
 * Optional. The approximate number of times that Pub/Sub has attempted to deliver the associated message to a subscriber. More precisely, this is 1 + (number of NACKs) + (number of ack_deadline exceeds) for this message. A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline exceeds event is whenever a message is not acknowledged within ack_deadline. Note that ack_deadline is initially Subscription.ackDeadlineSeconds, but may get extended automatically by the client library. Upon the first delivery of a given message, `delivery_attempt` will have a value of 1. The value is calculated at best effort and is approximate. If a DeadLetterPolicy is not set on the subscription, this will be 0.
 * @member {Number} deliveryAttempt
 */
ReceivedMessage.prototype['deliveryAttempt'] = undefined;

/**
 * @member {module:model/PubsubMessage} message
 */
ReceivedMessage.prototype['message'] = undefined;






export default ReceivedMessage;

