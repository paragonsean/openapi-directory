/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Schema from './Schema';

/**
 * The ValidateMessageRequest model module.
 * @module model/ValidateMessageRequest
 * @version v1
 */
class ValidateMessageRequest {
    /**
     * Constructs a new <code>ValidateMessageRequest</code>.
     * Request for the &#x60;ValidateMessage&#x60; method.
     * @alias module:model/ValidateMessageRequest
     */
    constructor() { 
        
        ValidateMessageRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValidateMessageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidateMessageRequest} obj Optional instance to populate.
     * @return {module:model/ValidateMessageRequest} The populated <code>ValidateMessageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidateMessageRequest();

            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'Blob');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = Schema.constructFromObject(data['schema']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidateMessageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidateMessageRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          Schema.validateJSON(data['schema']);
        }

        return true;
    }


}



/**
 * The encoding expected for messages
 * @member {module:model/ValidateMessageRequest.EncodingEnum} encoding
 */
ValidateMessageRequest.prototype['encoding'] = undefined;

/**
 * Message to validate against the provided `schema_spec`.
 * @member {Blob} message
 */
ValidateMessageRequest.prototype['message'] = undefined;

/**
 * Name of the schema against which to validate. Format is `projects/{project}/schemas/{schema}`.
 * @member {String} name
 */
ValidateMessageRequest.prototype['name'] = undefined;

/**
 * @member {module:model/Schema} schema
 */
ValidateMessageRequest.prototype['schema'] = undefined;





/**
 * Allowed values for the <code>encoding</code> property.
 * @enum {String}
 * @readonly
 */
ValidateMessageRequest['EncodingEnum'] = {

    /**
     * value: "ENCODING_UNSPECIFIED"
     * @const
     */
    "ENCODING_UNSPECIFIED": "ENCODING_UNSPECIFIED",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY"
};



export default ValidateMessageRequest;

