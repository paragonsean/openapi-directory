/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MessageStoragePolicy model module.
 * @module model/MessageStoragePolicy
 * @version v1
 */
class MessageStoragePolicy {
    /**
     * Constructs a new <code>MessageStoragePolicy</code>.
     * A policy constraining the storage of messages published to the topic.
     * @alias module:model/MessageStoragePolicy
     */
    constructor() { 
        
        MessageStoragePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessageStoragePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageStoragePolicy} obj Optional instance to populate.
     * @return {module:model/MessageStoragePolicy} The populated <code>MessageStoragePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageStoragePolicy();

            if (data.hasOwnProperty('allowedPersistenceRegions')) {
                obj['allowedPersistenceRegions'] = ApiClient.convertToType(data['allowedPersistenceRegions'], ['String']);
            }
            if (data.hasOwnProperty('enforceInTransit')) {
                obj['enforceInTransit'] = ApiClient.convertToType(data['enforceInTransit'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageStoragePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageStoragePolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedPersistenceRegions'])) {
            throw new Error("Expected the field `allowedPersistenceRegions` to be an array in the JSON data but got " + data['allowedPersistenceRegions']);
        }

        return true;
    }


}



/**
 * Optional. A list of IDs of Google Cloud regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed Google Cloud regions (or running outside of Google Cloud altogether) are routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
 * @member {Array.<String>} allowedPersistenceRegions
 */
MessageStoragePolicy.prototype['allowedPersistenceRegions'] = undefined;

/**
 * Optional. If true, `allowed_persistence_regions` is also used to enforce in-transit guarantees for messages. That is, Pub/Sub will fail Publish operations on this topic and subscribe operations on any subscription attached to this topic in any region that is not in `allowed_persistence_regions`.
 * @member {Boolean} enforceInTransit
 */
MessageStoragePolicy.prototype['enforceInTransit'] = undefined;






export default MessageStoragePolicy;

