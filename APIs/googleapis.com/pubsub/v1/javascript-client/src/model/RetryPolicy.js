/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RetryPolicy model module.
 * @module model/RetryPolicy
 * @version v1
 */
class RetryPolicy {
    /**
     * Constructs a new <code>RetryPolicy</code>.
     * A policy that specifies how Pub/Sub retries message delivery. Retry delay will be exponential based on provided minimum and maximum backoffs. https://en.wikipedia.org/wiki/Exponential_backoff. RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message. Retry Policy is implemented on a best effort basis. At times, the delay between consecutive deliveries may not match the configuration. That is, delay can be more or less than configured backoff.
     * @alias module:model/RetryPolicy
     */
    constructor() { 
        
        RetryPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetryPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetryPolicy} obj Optional instance to populate.
     * @return {module:model/RetryPolicy} The populated <code>RetryPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetryPolicy();

            if (data.hasOwnProperty('maximumBackoff')) {
                obj['maximumBackoff'] = ApiClient.convertToType(data['maximumBackoff'], 'String');
            }
            if (data.hasOwnProperty('minimumBackoff')) {
                obj['minimumBackoff'] = ApiClient.convertToType(data['minimumBackoff'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetryPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetryPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maximumBackoff'] && !(typeof data['maximumBackoff'] === 'string' || data['maximumBackoff'] instanceof String)) {
            throw new Error("Expected the field `maximumBackoff` to be a primitive type in the JSON string but got " + data['maximumBackoff']);
        }
        // ensure the json data is a string
        if (data['minimumBackoff'] && !(typeof data['minimumBackoff'] === 'string' || data['minimumBackoff'] instanceof String)) {
            throw new Error("Expected the field `minimumBackoff` to be a primitive type in the JSON string but got " + data['minimumBackoff']);
        }

        return true;
    }


}



/**
 * Optional. The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
 * @member {String} maximumBackoff
 */
RetryPolicy.prototype['maximumBackoff'] = undefined;

/**
 * Optional. The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
 * @member {String} minimumBackoff
 */
RetryPolicy.prototype['minimumBackoff'] = undefined;






export default RetryPolicy;

