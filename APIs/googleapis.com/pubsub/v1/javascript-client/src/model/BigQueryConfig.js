/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BigQueryConfig model module.
 * @module model/BigQueryConfig
 * @version v1
 */
class BigQueryConfig {
    /**
     * Constructs a new <code>BigQueryConfig</code>.
     * Configuration for a BigQuery subscription.
     * @alias module:model/BigQueryConfig
     */
    constructor() { 
        
        BigQueryConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BigQueryConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BigQueryConfig} obj Optional instance to populate.
     * @return {module:model/BigQueryConfig} The populated <code>BigQueryConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BigQueryConfig();

            if (data.hasOwnProperty('dropUnknownFields')) {
                obj['dropUnknownFields'] = ApiClient.convertToType(data['dropUnknownFields'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
            if (data.hasOwnProperty('useTableSchema')) {
                obj['useTableSchema'] = ApiClient.convertToType(data['useTableSchema'], 'Boolean');
            }
            if (data.hasOwnProperty('useTopicSchema')) {
                obj['useTopicSchema'] = ApiClient.convertToType(data['useTopicSchema'], 'Boolean');
            }
            if (data.hasOwnProperty('writeMetadata')) {
                obj['writeMetadata'] = ApiClient.convertToType(data['writeMetadata'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BigQueryConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BigQueryConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}



/**
 * Optional. When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
 * @member {Boolean} dropUnknownFields
 */
BigQueryConfig.prototype['dropUnknownFields'] = undefined;

/**
 * Optional. The service account to use to write to BigQuery. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.
 * @member {String} serviceAccountEmail
 */
BigQueryConfig.prototype['serviceAccountEmail'] = undefined;

/**
 * Output only. An output-only field that indicates whether or not the subscription can receive messages.
 * @member {module:model/BigQueryConfig.StateEnum} state
 */
BigQueryConfig.prototype['state'] = undefined;

/**
 * Optional. The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
 * @member {String} table
 */
BigQueryConfig.prototype['table'] = undefined;

/**
 * Optional. When true, use the BigQuery table's schema as the columns to write to in BigQuery. `use_table_schema` and `use_topic_schema` cannot be enabled at the same time.
 * @member {Boolean} useTableSchema
 */
BigQueryConfig.prototype['useTableSchema'] = undefined;

/**
 * Optional. When true, use the topic's schema as the columns to write to in BigQuery, if it exists. `use_topic_schema` and `use_table_schema` cannot be enabled at the same time.
 * @member {Boolean} useTopicSchema
 */
BigQueryConfig.prototype['useTopicSchema'] = undefined;

/**
 * Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
 * @member {Boolean} writeMetadata
 */
BigQueryConfig.prototype['writeMetadata'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BigQueryConfig['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PERMISSION_DENIED"
     * @const
     */
    "PERMISSION_DENIED": "PERMISSION_DENIED",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "SCHEMA_MISMATCH"
     * @const
     */
    "SCHEMA_MISMATCH": "SCHEMA_MISMATCH",

    /**
     * value: "IN_TRANSIT_LOCATION_RESTRICTION"
     * @const
     */
    "IN_TRANSIT_LOCATION_RESTRICTION": "IN_TRANSIT_LOCATION_RESTRICTION"
};



export default BigQueryConfig;

