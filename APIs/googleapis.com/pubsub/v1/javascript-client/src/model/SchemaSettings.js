/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SchemaSettings model module.
 * @module model/SchemaSettings
 * @version v1
 */
class SchemaSettings {
    /**
     * Constructs a new <code>SchemaSettings</code>.
     * Settings for validating messages published against a schema.
     * @alias module:model/SchemaSettings
     */
    constructor() { 
        
        SchemaSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaSettings} obj Optional instance to populate.
     * @return {module:model/SchemaSettings} The populated <code>SchemaSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaSettings();

            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('firstRevisionId')) {
                obj['firstRevisionId'] = ApiClient.convertToType(data['firstRevisionId'], 'String');
            }
            if (data.hasOwnProperty('lastRevisionId')) {
                obj['lastRevisionId'] = ApiClient.convertToType(data['lastRevisionId'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['firstRevisionId'] && !(typeof data['firstRevisionId'] === 'string' || data['firstRevisionId'] instanceof String)) {
            throw new Error("Expected the field `firstRevisionId` to be a primitive type in the JSON string but got " + data['firstRevisionId']);
        }
        // ensure the json data is a string
        if (data['lastRevisionId'] && !(typeof data['lastRevisionId'] === 'string' || data['lastRevisionId'] instanceof String)) {
            throw new Error("Expected the field `lastRevisionId` to be a primitive type in the JSON string but got " + data['lastRevisionId']);
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }

        return true;
    }


}



/**
 * Optional. The encoding of messages validated against `schema`.
 * @member {module:model/SchemaSettings.EncodingEnum} encoding
 */
SchemaSettings.prototype['encoding'] = undefined;

/**
 * Optional. The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
 * @member {String} firstRevisionId
 */
SchemaSettings.prototype['firstRevisionId'] = undefined;

/**
 * Optional. The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
 * @member {String} lastRevisionId
 */
SchemaSettings.prototype['lastRevisionId'] = undefined;

/**
 * Required. The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.
 * @member {String} schema
 */
SchemaSettings.prototype['schema'] = undefined;





/**
 * Allowed values for the <code>encoding</code> property.
 * @enum {String}
 * @readonly
 */
SchemaSettings['EncodingEnum'] = {

    /**
     * value: "ENCODING_UNSPECIFIED"
     * @const
     */
    "ENCODING_UNSPECIFIED": "ENCODING_UNSPECIFIED",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY"
};



export default SchemaSettings;

