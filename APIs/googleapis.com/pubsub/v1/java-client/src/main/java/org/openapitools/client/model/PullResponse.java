/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReceivedMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for the &#x60;Pull&#x60; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullResponse {
  public static final String SERIALIZED_NAME_RECEIVED_MESSAGES = "receivedMessages";
  @SerializedName(SERIALIZED_NAME_RECEIVED_MESSAGES)
  private List<ReceivedMessage> receivedMessages = new ArrayList<>();

  public PullResponse() {
  }

  public PullResponse receivedMessages(List<ReceivedMessage> receivedMessages) {
    this.receivedMessages = receivedMessages;
    return this;
  }

  public PullResponse addReceivedMessagesItem(ReceivedMessage receivedMessagesItem) {
    if (this.receivedMessages == null) {
      this.receivedMessages = new ArrayList<>();
    }
    this.receivedMessages.add(receivedMessagesItem);
    return this;
  }

  /**
   * Optional. Received Pub/Sub messages. The list will be empty if there are no more messages available in the backlog, or if no messages could be returned before the request timeout. For JSON, the response can be entirely empty. The Pub/Sub system may return fewer than the &#x60;maxMessages&#x60; requested even if there are more messages available in the backlog.
   * @return receivedMessages
   */
  @javax.annotation.Nullable
  public List<ReceivedMessage> getReceivedMessages() {
    return receivedMessages;
  }

  public void setReceivedMessages(List<ReceivedMessage> receivedMessages) {
    this.receivedMessages = receivedMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullResponse pullResponse = (PullResponse) o;
    return Objects.equals(this.receivedMessages, pullResponse.receivedMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(receivedMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullResponse {\n");
    sb.append("    receivedMessages: ").append(toIndentedString(receivedMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receivedMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullResponse is not found in the empty JSON string", PullResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("receivedMessages") != null && !jsonObj.get("receivedMessages").isJsonNull()) {
        JsonArray jsonArrayreceivedMessages = jsonObj.getAsJsonArray("receivedMessages");
        if (jsonArrayreceivedMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("receivedMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `receivedMessages` to be an array in the JSON string but got `%s`", jsonObj.get("receivedMessages").toString()));
          }

          // validate the optional field `receivedMessages` (array)
          for (int i = 0; i < jsonArrayreceivedMessages.size(); i++) {
            ReceivedMessage.validateJsonElement(jsonArrayreceivedMessages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PullResponse>() {
           @Override
           public void write(JsonWriter out, PullResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullResponse
   * @throws IOException if the JSON string is invalid with respect to PullResponse
   */
  public static PullResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullResponse.class);
  }

  /**
   * Convert an instance of PullResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

