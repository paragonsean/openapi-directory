/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A policy constraining the storage of messages published to the topic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageStoragePolicy {
  public static final String SERIALIZED_NAME_ALLOWED_PERSISTENCE_REGIONS = "allowedPersistenceRegions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PERSISTENCE_REGIONS)
  private List<String> allowedPersistenceRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENFORCE_IN_TRANSIT = "enforceInTransit";
  @SerializedName(SERIALIZED_NAME_ENFORCE_IN_TRANSIT)
  private Boolean enforceInTransit;

  public MessageStoragePolicy() {
  }

  public MessageStoragePolicy allowedPersistenceRegions(List<String> allowedPersistenceRegions) {
    this.allowedPersistenceRegions = allowedPersistenceRegions;
    return this;
  }

  public MessageStoragePolicy addAllowedPersistenceRegionsItem(String allowedPersistenceRegionsItem) {
    if (this.allowedPersistenceRegions == null) {
      this.allowedPersistenceRegions = new ArrayList<>();
    }
    this.allowedPersistenceRegions.add(allowedPersistenceRegionsItem);
    return this;
  }

  /**
   * Optional. A list of IDs of Google Cloud regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed Google Cloud regions (or running outside of Google Cloud altogether) are routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.
   * @return allowedPersistenceRegions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedPersistenceRegions() {
    return allowedPersistenceRegions;
  }

  public void setAllowedPersistenceRegions(List<String> allowedPersistenceRegions) {
    this.allowedPersistenceRegions = allowedPersistenceRegions;
  }


  public MessageStoragePolicy enforceInTransit(Boolean enforceInTransit) {
    this.enforceInTransit = enforceInTransit;
    return this;
  }

  /**
   * Optional. If true, &#x60;allowed_persistence_regions&#x60; is also used to enforce in-transit guarantees for messages. That is, Pub/Sub will fail Publish operations on this topic and subscribe operations on any subscription attached to this topic in any region that is not in &#x60;allowed_persistence_regions&#x60;.
   * @return enforceInTransit
   */
  @javax.annotation.Nullable
  public Boolean getEnforceInTransit() {
    return enforceInTransit;
  }

  public void setEnforceInTransit(Boolean enforceInTransit) {
    this.enforceInTransit = enforceInTransit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageStoragePolicy messageStoragePolicy = (MessageStoragePolicy) o;
    return Objects.equals(this.allowedPersistenceRegions, messageStoragePolicy.allowedPersistenceRegions) &&
        Objects.equals(this.enforceInTransit, messageStoragePolicy.enforceInTransit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedPersistenceRegions, enforceInTransit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageStoragePolicy {\n");
    sb.append("    allowedPersistenceRegions: ").append(toIndentedString(allowedPersistenceRegions)).append("\n");
    sb.append("    enforceInTransit: ").append(toIndentedString(enforceInTransit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedPersistenceRegions");
    openapiFields.add("enforceInTransit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageStoragePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageStoragePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageStoragePolicy is not found in the empty JSON string", MessageStoragePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageStoragePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageStoragePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedPersistenceRegions") != null && !jsonObj.get("allowedPersistenceRegions").isJsonNull() && !jsonObj.get("allowedPersistenceRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedPersistenceRegions` to be an array in the JSON string but got `%s`", jsonObj.get("allowedPersistenceRegions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageStoragePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageStoragePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageStoragePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageStoragePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageStoragePolicy>() {
           @Override
           public void write(JsonWriter out, MessageStoragePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageStoragePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageStoragePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageStoragePolicy
   * @throws IOException if the JSON string is invalid with respect to MessageStoragePolicy
   */
  public static MessageStoragePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageStoragePolicy.class);
  }

  /**
   * Convert an instance of MessageStoragePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

