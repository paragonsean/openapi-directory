/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.IngestionDataSourceSettings;
import org.openapitools.client.model.MessageStoragePolicy;
import org.openapitools.client.model.SchemaSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A topic resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Topic {
  public static final String SERIALIZED_NAME_INGESTION_DATA_SOURCE_SETTINGS = "ingestionDataSourceSettings";
  @SerializedName(SERIALIZED_NAME_INGESTION_DATA_SOURCE_SETTINGS)
  private IngestionDataSourceSettings ingestionDataSourceSettings;

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MESSAGE_RETENTION_DURATION = "messageRetentionDuration";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RETENTION_DURATION)
  private String messageRetentionDuration;

  public static final String SERIALIZED_NAME_MESSAGE_STORAGE_POLICY = "messageStoragePolicy";
  @SerializedName(SERIALIZED_NAME_MESSAGE_STORAGE_POLICY)
  private MessageStoragePolicy messageStoragePolicy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SCHEMA_SETTINGS = "schemaSettings";
  @SerializedName(SERIALIZED_NAME_SCHEMA_SETTINGS)
  private SchemaSettings schemaSettings;

  /**
   * Output only. An output-only field indicating the state of the topic.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    INGESTION_RESOURCE_ERROR("INGESTION_RESOURCE_ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public Topic() {
  }

  public Topic(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public Topic ingestionDataSourceSettings(IngestionDataSourceSettings ingestionDataSourceSettings) {
    this.ingestionDataSourceSettings = ingestionDataSourceSettings;
    return this;
  }

  /**
   * Get ingestionDataSourceSettings
   * @return ingestionDataSourceSettings
   */
  @javax.annotation.Nullable
  public IngestionDataSourceSettings getIngestionDataSourceSettings() {
    return ingestionDataSourceSettings;
  }

  public void setIngestionDataSourceSettings(IngestionDataSourceSettings ingestionDataSourceSettings) {
    this.ingestionDataSourceSettings = ingestionDataSourceSettings;
  }


  public Topic kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * Optional. The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. The expected format is &#x60;projects/_*_/locations/_*_/keyRings/_*_/cryptoKeys/_*&#x60;.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  public Topic labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Topic putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Topic messageRetentionDuration(String messageRetentionDuration) {
    this.messageRetentionDuration = messageRetentionDuration;
    return this;
  }

  /**
   * Optional. Indicates the minimum duration to retain a message after it is published to the topic. If this field is set, messages published to the topic in the last &#x60;message_retention_duration&#x60; are always available to subscribers. For instance, it allows any attached subscription to [seek to a timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) that is up to &#x60;message_retention_duration&#x60; in the past. If this field is not set, message retention is controlled by settings on individual subscriptions. Cannot be more than 31 days or less than 10 minutes.
   * @return messageRetentionDuration
   */
  @javax.annotation.Nullable
  public String getMessageRetentionDuration() {
    return messageRetentionDuration;
  }

  public void setMessageRetentionDuration(String messageRetentionDuration) {
    this.messageRetentionDuration = messageRetentionDuration;
  }


  public Topic messageStoragePolicy(MessageStoragePolicy messageStoragePolicy) {
    this.messageStoragePolicy = messageStoragePolicy;
    return this;
  }

  /**
   * Get messageStoragePolicy
   * @return messageStoragePolicy
   */
  @javax.annotation.Nullable
  public MessageStoragePolicy getMessageStoragePolicy() {
    return messageStoragePolicy;
  }

  public void setMessageStoragePolicy(MessageStoragePolicy messageStoragePolicy) {
    this.messageStoragePolicy = messageStoragePolicy;
  }


  public Topic name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the topic. It must have the format &#x60;\&quot;projects/{project}/topics/{topic}\&quot;&#x60;. &#x60;{topic}&#x60; must start with a letter, and contain only letters (&#x60;[A-Za-z]&#x60;), numbers (&#x60;[0-9]&#x60;), dashes (&#x60;-&#x60;), underscores (&#x60;_&#x60;), periods (&#x60;.&#x60;), tildes (&#x60;~&#x60;), plus (&#x60;+&#x60;) or percent signs (&#x60;%&#x60;). It must be between 3 and 255 characters in length, and it must not start with &#x60;\&quot;goog\&quot;&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Topic satisfiesPzs(Boolean satisfiesPzs) {
    this.satisfiesPzs = satisfiesPzs;
    return this;
  }

  /**
   * Optional. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }

  public void setSatisfiesPzs(Boolean satisfiesPzs) {
    this.satisfiesPzs = satisfiesPzs;
  }


  public Topic schemaSettings(SchemaSettings schemaSettings) {
    this.schemaSettings = schemaSettings;
    return this;
  }

  /**
   * Get schemaSettings
   * @return schemaSettings
   */
  @javax.annotation.Nullable
  public SchemaSettings getSchemaSettings() {
    return schemaSettings;
  }

  public void setSchemaSettings(SchemaSettings schemaSettings) {
    this.schemaSettings = schemaSettings;
  }


  /**
   * Output only. An output-only field indicating the state of the topic.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Topic topic = (Topic) o;
    return Objects.equals(this.ingestionDataSourceSettings, topic.ingestionDataSourceSettings) &&
        Objects.equals(this.kmsKeyName, topic.kmsKeyName) &&
        Objects.equals(this.labels, topic.labels) &&
        Objects.equals(this.messageRetentionDuration, topic.messageRetentionDuration) &&
        Objects.equals(this.messageStoragePolicy, topic.messageStoragePolicy) &&
        Objects.equals(this.name, topic.name) &&
        Objects.equals(this.satisfiesPzs, topic.satisfiesPzs) &&
        Objects.equals(this.schemaSettings, topic.schemaSettings) &&
        Objects.equals(this.state, topic.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ingestionDataSourceSettings, kmsKeyName, labels, messageRetentionDuration, messageStoragePolicy, name, satisfiesPzs, schemaSettings, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Topic {\n");
    sb.append("    ingestionDataSourceSettings: ").append(toIndentedString(ingestionDataSourceSettings)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    messageRetentionDuration: ").append(toIndentedString(messageRetentionDuration)).append("\n");
    sb.append("    messageStoragePolicy: ").append(toIndentedString(messageStoragePolicy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    schemaSettings: ").append(toIndentedString(schemaSettings)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ingestionDataSourceSettings");
    openapiFields.add("kmsKeyName");
    openapiFields.add("labels");
    openapiFields.add("messageRetentionDuration");
    openapiFields.add("messageStoragePolicy");
    openapiFields.add("name");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("schemaSettings");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Topic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Topic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Topic is not found in the empty JSON string", Topic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Topic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Topic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ingestionDataSourceSettings`
      if (jsonObj.get("ingestionDataSourceSettings") != null && !jsonObj.get("ingestionDataSourceSettings").isJsonNull()) {
        IngestionDataSourceSettings.validateJsonElement(jsonObj.get("ingestionDataSourceSettings"));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("messageRetentionDuration") != null && !jsonObj.get("messageRetentionDuration").isJsonNull()) && !jsonObj.get("messageRetentionDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageRetentionDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageRetentionDuration").toString()));
      }
      // validate the optional field `messageStoragePolicy`
      if (jsonObj.get("messageStoragePolicy") != null && !jsonObj.get("messageStoragePolicy").isJsonNull()) {
        MessageStoragePolicy.validateJsonElement(jsonObj.get("messageStoragePolicy"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `schemaSettings`
      if (jsonObj.get("schemaSettings") != null && !jsonObj.get("schemaSettings").isJsonNull()) {
        SchemaSettings.validateJsonElement(jsonObj.get("schemaSettings"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Topic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Topic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Topic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Topic.class));

       return (TypeAdapter<T>) new TypeAdapter<Topic>() {
           @Override
           public void write(JsonWriter out, Topic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Topic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Topic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Topic
   * @throws IOException if the JSON string is invalid with respect to Topic
   */
  public static Topic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Topic.class);
  }

  /**
   * Convert an instance of Topic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

