/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for validating messages published against a schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaSettings {
  /**
   * Optional. The encoding of messages validated against &#x60;schema&#x60;.
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
  public enum EncodingEnum {
    ENCODING_UNSPECIFIED("ENCODING_UNSPECIFIED"),
    
    JSON("JSON"),
    
    BINARY("BINARY");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String value) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingEnum encoding;

  public static final String SERIALIZED_NAME_FIRST_REVISION_ID = "firstRevisionId";
  @SerializedName(SERIALIZED_NAME_FIRST_REVISION_ID)
  private String firstRevisionId;

  public static final String SERIALIZED_NAME_LAST_REVISION_ID = "lastRevisionId";
  @SerializedName(SERIALIZED_NAME_LAST_REVISION_ID)
  private String lastRevisionId;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public SchemaSettings() {
  }

  public SchemaSettings encoding(EncodingEnum encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Optional. The encoding of messages validated against &#x60;schema&#x60;.
   * @return encoding
   */
  @javax.annotation.Nullable
  public EncodingEnum getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingEnum encoding) {
    this.encoding = encoding;
  }


  public SchemaSettings firstRevisionId(String firstRevisionId) {
    this.firstRevisionId = firstRevisionId;
    return this;
  }

  /**
   * Optional. The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.
   * @return firstRevisionId
   */
  @javax.annotation.Nullable
  public String getFirstRevisionId() {
    return firstRevisionId;
  }

  public void setFirstRevisionId(String firstRevisionId) {
    this.firstRevisionId = firstRevisionId;
  }


  public SchemaSettings lastRevisionId(String lastRevisionId) {
    this.lastRevisionId = lastRevisionId;
    return this;
  }

  /**
   * Optional. The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.
   * @return lastRevisionId
   */
  @javax.annotation.Nullable
  public String getLastRevisionId() {
    return lastRevisionId;
  }

  public void setLastRevisionId(String lastRevisionId) {
    this.lastRevisionId = lastRevisionId;
  }


  public SchemaSettings schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Required. The name of the schema that messages published should be validated against. Format is &#x60;projects/{project}/schemas/{schema}&#x60;. The value of this field will be &#x60;_deleted-schema_&#x60; if the schema has been deleted.
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaSettings schemaSettings = (SchemaSettings) o;
    return Objects.equals(this.encoding, schemaSettings.encoding) &&
        Objects.equals(this.firstRevisionId, schemaSettings.firstRevisionId) &&
        Objects.equals(this.lastRevisionId, schemaSettings.lastRevisionId) &&
        Objects.equals(this.schema, schemaSettings.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, firstRevisionId, lastRevisionId, schema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaSettings {\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    firstRevisionId: ").append(toIndentedString(firstRevisionId)).append("\n");
    sb.append("    lastRevisionId: ").append(toIndentedString(lastRevisionId)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encoding");
    openapiFields.add("firstRevisionId");
    openapiFields.add("lastRevisionId");
    openapiFields.add("schema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaSettings is not found in the empty JSON string", SchemaSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        EncodingEnum.validateJsonElement(jsonObj.get("encoding"));
      }
      if ((jsonObj.get("firstRevisionId") != null && !jsonObj.get("firstRevisionId").isJsonNull()) && !jsonObj.get("firstRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstRevisionId").toString()));
      }
      if ((jsonObj.get("lastRevisionId") != null && !jsonObj.get("lastRevisionId").isJsonNull()) && !jsonObj.get("lastRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRevisionId").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaSettings>() {
           @Override
           public void write(JsonWriter out, SchemaSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaSettings
   * @throws IOException if the JSON string is invalid with respect to SchemaSettings
   */
  public static SchemaSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaSettings.class);
  }

  /**
   * Convert an instance of SchemaSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

