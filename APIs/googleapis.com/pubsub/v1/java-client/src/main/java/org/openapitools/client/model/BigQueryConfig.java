/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for a BigQuery subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BigQueryConfig {
  public static final String SERIALIZED_NAME_DROP_UNKNOWN_FIELDS = "dropUnknownFields";
  @SerializedName(SERIALIZED_NAME_DROP_UNKNOWN_FIELDS)
  private Boolean dropUnknownFields;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL = "serviceAccountEmail";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL)
  private String serviceAccountEmail;

  /**
   * Output only. An output-only field that indicates whether or not the subscription can receive messages.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    SCHEMA_MISMATCH("SCHEMA_MISMATCH"),
    
    IN_TRANSIT_LOCATION_RESTRICTION("IN_TRANSIT_LOCATION_RESTRICTION");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_USE_TABLE_SCHEMA = "useTableSchema";
  @SerializedName(SERIALIZED_NAME_USE_TABLE_SCHEMA)
  private Boolean useTableSchema;

  public static final String SERIALIZED_NAME_USE_TOPIC_SCHEMA = "useTopicSchema";
  @SerializedName(SERIALIZED_NAME_USE_TOPIC_SCHEMA)
  private Boolean useTopicSchema;

  public static final String SERIALIZED_NAME_WRITE_METADATA = "writeMetadata";
  @SerializedName(SERIALIZED_NAME_WRITE_METADATA)
  private Boolean writeMetadata;

  public BigQueryConfig() {
  }

  public BigQueryConfig(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public BigQueryConfig dropUnknownFields(Boolean dropUnknownFields) {
    this.dropUnknownFields = dropUnknownFields;
    return this;
  }

  /**
   * Optional. When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription&#39;s backlog.
   * @return dropUnknownFields
   */
  @javax.annotation.Nullable
  public Boolean getDropUnknownFields() {
    return dropUnknownFields;
  }

  public void setDropUnknownFields(Boolean dropUnknownFields) {
    this.dropUnknownFields = dropUnknownFields;
  }


  public BigQueryConfig serviceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
    return this;
  }

  /**
   * Optional. The service account to use to write to BigQuery. The subscription creator or updater that specifies this field must have &#x60;iam.serviceAccounts.actAs&#x60; permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.
   * @return serviceAccountEmail
   */
  @javax.annotation.Nullable
  public String getServiceAccountEmail() {
    return serviceAccountEmail;
  }

  public void setServiceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
  }


  /**
   * Output only. An output-only field that indicates whether or not the subscription can receive messages.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public BigQueryConfig table(String table) {
    this.table = table;
    return this;
  }

  /**
   * Optional. The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public BigQueryConfig useTableSchema(Boolean useTableSchema) {
    this.useTableSchema = useTableSchema;
    return this;
  }

  /**
   * Optional. When true, use the BigQuery table&#39;s schema as the columns to write to in BigQuery. &#x60;use_table_schema&#x60; and &#x60;use_topic_schema&#x60; cannot be enabled at the same time.
   * @return useTableSchema
   */
  @javax.annotation.Nullable
  public Boolean getUseTableSchema() {
    return useTableSchema;
  }

  public void setUseTableSchema(Boolean useTableSchema) {
    this.useTableSchema = useTableSchema;
  }


  public BigQueryConfig useTopicSchema(Boolean useTopicSchema) {
    this.useTopicSchema = useTopicSchema;
    return this;
  }

  /**
   * Optional. When true, use the topic&#39;s schema as the columns to write to in BigQuery, if it exists. &#x60;use_topic_schema&#x60; and &#x60;use_table_schema&#x60; cannot be enabled at the same time.
   * @return useTopicSchema
   */
  @javax.annotation.Nullable
  public Boolean getUseTopicSchema() {
    return useTopicSchema;
  }

  public void setUseTopicSchema(Boolean useTopicSchema) {
    this.useTopicSchema = useTopicSchema;
  }


  public BigQueryConfig writeMetadata(Boolean writeMetadata) {
    this.writeMetadata = writeMetadata;
    return this;
  }

  /**
   * Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
   * @return writeMetadata
   */
  @javax.annotation.Nullable
  public Boolean getWriteMetadata() {
    return writeMetadata;
  }

  public void setWriteMetadata(Boolean writeMetadata) {
    this.writeMetadata = writeMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BigQueryConfig bigQueryConfig = (BigQueryConfig) o;
    return Objects.equals(this.dropUnknownFields, bigQueryConfig.dropUnknownFields) &&
        Objects.equals(this.serviceAccountEmail, bigQueryConfig.serviceAccountEmail) &&
        Objects.equals(this.state, bigQueryConfig.state) &&
        Objects.equals(this.table, bigQueryConfig.table) &&
        Objects.equals(this.useTableSchema, bigQueryConfig.useTableSchema) &&
        Objects.equals(this.useTopicSchema, bigQueryConfig.useTopicSchema) &&
        Objects.equals(this.writeMetadata, bigQueryConfig.writeMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dropUnknownFields, serviceAccountEmail, state, table, useTableSchema, useTopicSchema, writeMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BigQueryConfig {\n");
    sb.append("    dropUnknownFields: ").append(toIndentedString(dropUnknownFields)).append("\n");
    sb.append("    serviceAccountEmail: ").append(toIndentedString(serviceAccountEmail)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    useTableSchema: ").append(toIndentedString(useTableSchema)).append("\n");
    sb.append("    useTopicSchema: ").append(toIndentedString(useTopicSchema)).append("\n");
    sb.append("    writeMetadata: ").append(toIndentedString(writeMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dropUnknownFields");
    openapiFields.add("serviceAccountEmail");
    openapiFields.add("state");
    openapiFields.add("table");
    openapiFields.add("useTableSchema");
    openapiFields.add("useTopicSchema");
    openapiFields.add("writeMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BigQueryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BigQueryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BigQueryConfig is not found in the empty JSON string", BigQueryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BigQueryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BigQueryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("serviceAccountEmail") != null && !jsonObj.get("serviceAccountEmail").isJsonNull()) && !jsonObj.get("serviceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountEmail").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BigQueryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BigQueryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BigQueryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BigQueryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BigQueryConfig>() {
           @Override
           public void write(JsonWriter out, BigQueryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BigQueryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BigQueryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BigQueryConfig
   * @throws IOException if the JSON string is invalid with respect to BigQueryConfig
   */
  public static BigQueryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BigQueryConfig.class);
  }

  /**
   * Convert an instance of BigQueryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

