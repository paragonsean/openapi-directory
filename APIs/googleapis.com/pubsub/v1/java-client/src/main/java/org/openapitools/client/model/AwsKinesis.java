/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ingestion settings for Amazon Kinesis Data Streams.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AwsKinesis {
  public static final String SERIALIZED_NAME_AWS_ROLE_ARN = "awsRoleArn";
  @SerializedName(SERIALIZED_NAME_AWS_ROLE_ARN)
  private String awsRoleArn;

  public static final String SERIALIZED_NAME_CONSUMER_ARN = "consumerArn";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ARN)
  private String consumerArn;

  public static final String SERIALIZED_NAME_GCP_SERVICE_ACCOUNT = "gcpServiceAccount";
  @SerializedName(SERIALIZED_NAME_GCP_SERVICE_ACCOUNT)
  private String gcpServiceAccount;

  /**
   * Output only. An output-only field that indicates the state of the Kinesis ingestion source.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    KINESIS_PERMISSION_DENIED("KINESIS_PERMISSION_DENIED"),
    
    PUBLISH_PERMISSION_DENIED("PUBLISH_PERMISSION_DENIED"),
    
    STREAM_NOT_FOUND("STREAM_NOT_FOUND"),
    
    CONSUMER_NOT_FOUND("CONSUMER_NOT_FOUND");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STREAM_ARN = "streamArn";
  @SerializedName(SERIALIZED_NAME_STREAM_ARN)
  private String streamArn;

  public AwsKinesis() {
  }

  public AwsKinesis(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public AwsKinesis awsRoleArn(String awsRoleArn) {
    this.awsRoleArn = awsRoleArn;
    return this;
  }

  /**
   * Required. AWS role ARN to be used for Federated Identity authentication with Kinesis. Check the Pub/Sub docs for how to set up this role and the required permissions that need to be attached to it.
   * @return awsRoleArn
   */
  @javax.annotation.Nullable
  public String getAwsRoleArn() {
    return awsRoleArn;
  }

  public void setAwsRoleArn(String awsRoleArn) {
    this.awsRoleArn = awsRoleArn;
  }


  public AwsKinesis consumerArn(String consumerArn) {
    this.consumerArn = consumerArn;
    return this;
  }

  /**
   * Required. The Kinesis consumer ARN to used for ingestion in Enhanced Fan-Out mode. The consumer must be already created and ready to be used.
   * @return consumerArn
   */
  @javax.annotation.Nullable
  public String getConsumerArn() {
    return consumerArn;
  }

  public void setConsumerArn(String consumerArn) {
    this.consumerArn = consumerArn;
  }


  public AwsKinesis gcpServiceAccount(String gcpServiceAccount) {
    this.gcpServiceAccount = gcpServiceAccount;
    return this;
  }

  /**
   * Required. The GCP service account to be used for Federated Identity authentication with Kinesis (via a &#x60;AssumeRoleWithWebIdentity&#x60; call for the provided role). The &#x60;aws_role_arn&#x60; must be set up with &#x60;accounts.google.com:sub&#x60; equals to this service account number.
   * @return gcpServiceAccount
   */
  @javax.annotation.Nullable
  public String getGcpServiceAccount() {
    return gcpServiceAccount;
  }

  public void setGcpServiceAccount(String gcpServiceAccount) {
    this.gcpServiceAccount = gcpServiceAccount;
  }


  /**
   * Output only. An output-only field that indicates the state of the Kinesis ingestion source.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public AwsKinesis streamArn(String streamArn) {
    this.streamArn = streamArn;
    return this;
  }

  /**
   * Required. The Kinesis stream ARN to ingest data from.
   * @return streamArn
   */
  @javax.annotation.Nullable
  public String getStreamArn() {
    return streamArn;
  }

  public void setStreamArn(String streamArn) {
    this.streamArn = streamArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AwsKinesis awsKinesis = (AwsKinesis) o;
    return Objects.equals(this.awsRoleArn, awsKinesis.awsRoleArn) &&
        Objects.equals(this.consumerArn, awsKinesis.consumerArn) &&
        Objects.equals(this.gcpServiceAccount, awsKinesis.gcpServiceAccount) &&
        Objects.equals(this.state, awsKinesis.state) &&
        Objects.equals(this.streamArn, awsKinesis.streamArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsRoleArn, consumerArn, gcpServiceAccount, state, streamArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AwsKinesis {\n");
    sb.append("    awsRoleArn: ").append(toIndentedString(awsRoleArn)).append("\n");
    sb.append("    consumerArn: ").append(toIndentedString(consumerArn)).append("\n");
    sb.append("    gcpServiceAccount: ").append(toIndentedString(gcpServiceAccount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    streamArn: ").append(toIndentedString(streamArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsRoleArn");
    openapiFields.add("consumerArn");
    openapiFields.add("gcpServiceAccount");
    openapiFields.add("state");
    openapiFields.add("streamArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AwsKinesis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AwsKinesis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AwsKinesis is not found in the empty JSON string", AwsKinesis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AwsKinesis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AwsKinesis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awsRoleArn") != null && !jsonObj.get("awsRoleArn").isJsonNull()) && !jsonObj.get("awsRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awsRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awsRoleArn").toString()));
      }
      if ((jsonObj.get("consumerArn") != null && !jsonObj.get("consumerArn").isJsonNull()) && !jsonObj.get("consumerArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerArn").toString()));
      }
      if ((jsonObj.get("gcpServiceAccount") != null && !jsonObj.get("gcpServiceAccount").isJsonNull()) && !jsonObj.get("gcpServiceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcpServiceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcpServiceAccount").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("streamArn") != null && !jsonObj.get("streamArn").isJsonNull()) && !jsonObj.get("streamArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AwsKinesis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AwsKinesis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AwsKinesis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AwsKinesis.class));

       return (TypeAdapter<T>) new TypeAdapter<AwsKinesis>() {
           @Override
           public void write(JsonWriter out, AwsKinesis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AwsKinesis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AwsKinesis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AwsKinesis
   * @throws IOException if the JSON string is invalid with respect to AwsKinesis
   */
  public static AwsKinesis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AwsKinesis.class);
  }

  /**
   * Convert an instance of AwsKinesis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

