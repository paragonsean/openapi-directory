/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PubsubMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message and its corresponding acknowledgment ID.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceivedMessage {
  public static final String SERIALIZED_NAME_ACK_ID = "ackId";
  @SerializedName(SERIALIZED_NAME_ACK_ID)
  private String ackId;

  public static final String SERIALIZED_NAME_DELIVERY_ATTEMPT = "deliveryAttempt";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ATTEMPT)
  private Integer deliveryAttempt;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private PubsubMessage message;

  public ReceivedMessage() {
  }

  public ReceivedMessage ackId(String ackId) {
    this.ackId = ackId;
    return this;
  }

  /**
   * Optional. This ID can be used to acknowledge the received message.
   * @return ackId
   */
  @javax.annotation.Nullable
  public String getAckId() {
    return ackId;
  }

  public void setAckId(String ackId) {
    this.ackId = ackId;
  }


  public ReceivedMessage deliveryAttempt(Integer deliveryAttempt) {
    this.deliveryAttempt = deliveryAttempt;
    return this;
  }

  /**
   * Optional. The approximate number of times that Pub/Sub has attempted to deliver the associated message to a subscriber. More precisely, this is 1 + (number of NACKs) + (number of ack_deadline exceeds) for this message. A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline exceeds event is whenever a message is not acknowledged within ack_deadline. Note that ack_deadline is initially Subscription.ackDeadlineSeconds, but may get extended automatically by the client library. Upon the first delivery of a given message, &#x60;delivery_attempt&#x60; will have a value of 1. The value is calculated at best effort and is approximate. If a DeadLetterPolicy is not set on the subscription, this will be 0.
   * @return deliveryAttempt
   */
  @javax.annotation.Nullable
  public Integer getDeliveryAttempt() {
    return deliveryAttempt;
  }

  public void setDeliveryAttempt(Integer deliveryAttempt) {
    this.deliveryAttempt = deliveryAttempt;
  }


  public ReceivedMessage message(PubsubMessage message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public PubsubMessage getMessage() {
    return message;
  }

  public void setMessage(PubsubMessage message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceivedMessage receivedMessage = (ReceivedMessage) o;
    return Objects.equals(this.ackId, receivedMessage.ackId) &&
        Objects.equals(this.deliveryAttempt, receivedMessage.deliveryAttempt) &&
        Objects.equals(this.message, receivedMessage.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ackId, deliveryAttempt, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceivedMessage {\n");
    sb.append("    ackId: ").append(toIndentedString(ackId)).append("\n");
    sb.append("    deliveryAttempt: ").append(toIndentedString(deliveryAttempt)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ackId");
    openapiFields.add("deliveryAttempt");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceivedMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceivedMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceivedMessage is not found in the empty JSON string", ReceivedMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceivedMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceivedMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ackId") != null && !jsonObj.get("ackId").isJsonNull()) && !jsonObj.get("ackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackId").toString()));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        PubsubMessage.validateJsonElement(jsonObj.get("message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceivedMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceivedMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceivedMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceivedMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceivedMessage>() {
           @Override
           public void write(JsonWriter out, ReceivedMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceivedMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceivedMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceivedMessage
   * @throws IOException if the JSON string is invalid with respect to ReceivedMessage
   */
  public static ReceivedMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceivedMessage.class);
  }

  /**
   * Convert an instance of ReceivedMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

