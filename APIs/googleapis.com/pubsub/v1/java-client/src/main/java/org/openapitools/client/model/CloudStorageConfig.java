/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AvroConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for a Cloud Storage subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:53.464766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudStorageConfig {
  public static final String SERIALIZED_NAME_AVRO_CONFIG = "avroConfig";
  @SerializedName(SERIALIZED_NAME_AVRO_CONFIG)
  private AvroConfig avroConfig;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_FILENAME_PREFIX = "filenamePrefix";
  @SerializedName(SERIALIZED_NAME_FILENAME_PREFIX)
  private String filenamePrefix;

  public static final String SERIALIZED_NAME_FILENAME_SUFFIX = "filenameSuffix";
  @SerializedName(SERIALIZED_NAME_FILENAME_SUFFIX)
  private String filenameSuffix;

  public static final String SERIALIZED_NAME_MAX_BYTES = "maxBytes";
  @SerializedName(SERIALIZED_NAME_MAX_BYTES)
  private String maxBytes;

  public static final String SERIALIZED_NAME_MAX_DURATION = "maxDuration";
  @SerializedName(SERIALIZED_NAME_MAX_DURATION)
  private String maxDuration;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL = "serviceAccountEmail";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL)
  private String serviceAccountEmail;

  /**
   * Output only. An output-only field that indicates whether or not the subscription can receive messages.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    IN_TRANSIT_LOCATION_RESTRICTION("IN_TRANSIT_LOCATION_RESTRICTION");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TEXT_CONFIG = "textConfig";
  @SerializedName(SERIALIZED_NAME_TEXT_CONFIG)
  private Object textConfig;

  public CloudStorageConfig() {
  }

  public CloudStorageConfig(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public CloudStorageConfig avroConfig(AvroConfig avroConfig) {
    this.avroConfig = avroConfig;
    return this;
  }

  /**
   * Get avroConfig
   * @return avroConfig
   */
  @javax.annotation.Nullable
  public AvroConfig getAvroConfig() {
    return avroConfig;
  }

  public void setAvroConfig(AvroConfig avroConfig) {
    this.avroConfig = avroConfig;
  }


  public CloudStorageConfig bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Required. User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like \&quot;gs://\&quot;. See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public CloudStorageConfig filenamePrefix(String filenamePrefix) {
    this.filenamePrefix = filenamePrefix;
    return this;
  }

  /**
   * Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).
   * @return filenamePrefix
   */
  @javax.annotation.Nullable
  public String getFilenamePrefix() {
    return filenamePrefix;
  }

  public void setFilenamePrefix(String filenamePrefix) {
    this.filenamePrefix = filenamePrefix;
  }


  public CloudStorageConfig filenameSuffix(String filenameSuffix) {
    this.filenameSuffix = filenameSuffix;
    return this;
  }

  /**
   * Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in \&quot;/\&quot;.
   * @return filenameSuffix
   */
  @javax.annotation.Nullable
  public String getFilenameSuffix() {
    return filenameSuffix;
  }

  public void setFilenameSuffix(String filenameSuffix) {
    this.filenameSuffix = filenameSuffix;
  }


  public CloudStorageConfig maxBytes(String maxBytes) {
    this.maxBytes = maxBytes;
    return this;
  }

  /**
   * Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.
   * @return maxBytes
   */
  @javax.annotation.Nullable
  public String getMaxBytes() {
    return maxBytes;
  }

  public void setMaxBytes(String maxBytes) {
    this.maxBytes = maxBytes;
  }


  public CloudStorageConfig maxDuration(String maxDuration) {
    this.maxDuration = maxDuration;
    return this;
  }

  /**
   * Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription&#39;s acknowledgement deadline.
   * @return maxDuration
   */
  @javax.annotation.Nullable
  public String getMaxDuration() {
    return maxDuration;
  }

  public void setMaxDuration(String maxDuration) {
    this.maxDuration = maxDuration;
  }


  public CloudStorageConfig serviceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
    return this;
  }

  /**
   * Optional. The service account to use to write to Cloud Storage. The subscription creator or updater that specifies this field must have &#x60;iam.serviceAccounts.actAs&#x60; permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.
   * @return serviceAccountEmail
   */
  @javax.annotation.Nullable
  public String getServiceAccountEmail() {
    return serviceAccountEmail;
  }

  public void setServiceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
  }


  /**
   * Output only. An output-only field that indicates whether or not the subscription can receive messages.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public CloudStorageConfig textConfig(Object textConfig) {
    this.textConfig = textConfig;
    return this;
  }

  /**
   * Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.
   * @return textConfig
   */
  @javax.annotation.Nullable
  public Object getTextConfig() {
    return textConfig;
  }

  public void setTextConfig(Object textConfig) {
    this.textConfig = textConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudStorageConfig cloudStorageConfig = (CloudStorageConfig) o;
    return Objects.equals(this.avroConfig, cloudStorageConfig.avroConfig) &&
        Objects.equals(this.bucket, cloudStorageConfig.bucket) &&
        Objects.equals(this.filenamePrefix, cloudStorageConfig.filenamePrefix) &&
        Objects.equals(this.filenameSuffix, cloudStorageConfig.filenameSuffix) &&
        Objects.equals(this.maxBytes, cloudStorageConfig.maxBytes) &&
        Objects.equals(this.maxDuration, cloudStorageConfig.maxDuration) &&
        Objects.equals(this.serviceAccountEmail, cloudStorageConfig.serviceAccountEmail) &&
        Objects.equals(this.state, cloudStorageConfig.state) &&
        Objects.equals(this.textConfig, cloudStorageConfig.textConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avroConfig, bucket, filenamePrefix, filenameSuffix, maxBytes, maxDuration, serviceAccountEmail, state, textConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudStorageConfig {\n");
    sb.append("    avroConfig: ").append(toIndentedString(avroConfig)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    filenamePrefix: ").append(toIndentedString(filenamePrefix)).append("\n");
    sb.append("    filenameSuffix: ").append(toIndentedString(filenameSuffix)).append("\n");
    sb.append("    maxBytes: ").append(toIndentedString(maxBytes)).append("\n");
    sb.append("    maxDuration: ").append(toIndentedString(maxDuration)).append("\n");
    sb.append("    serviceAccountEmail: ").append(toIndentedString(serviceAccountEmail)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    textConfig: ").append(toIndentedString(textConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avroConfig");
    openapiFields.add("bucket");
    openapiFields.add("filenamePrefix");
    openapiFields.add("filenameSuffix");
    openapiFields.add("maxBytes");
    openapiFields.add("maxDuration");
    openapiFields.add("serviceAccountEmail");
    openapiFields.add("state");
    openapiFields.add("textConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudStorageConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudStorageConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudStorageConfig is not found in the empty JSON string", CloudStorageConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudStorageConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudStorageConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `avroConfig`
      if (jsonObj.get("avroConfig") != null && !jsonObj.get("avroConfig").isJsonNull()) {
        AvroConfig.validateJsonElement(jsonObj.get("avroConfig"));
      }
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("filenamePrefix") != null && !jsonObj.get("filenamePrefix").isJsonNull()) && !jsonObj.get("filenamePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filenamePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filenamePrefix").toString()));
      }
      if ((jsonObj.get("filenameSuffix") != null && !jsonObj.get("filenameSuffix").isJsonNull()) && !jsonObj.get("filenameSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filenameSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filenameSuffix").toString()));
      }
      if ((jsonObj.get("maxBytes") != null && !jsonObj.get("maxBytes").isJsonNull()) && !jsonObj.get("maxBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxBytes").toString()));
      }
      if ((jsonObj.get("maxDuration") != null && !jsonObj.get("maxDuration").isJsonNull()) && !jsonObj.get("maxDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxDuration").toString()));
      }
      if ((jsonObj.get("serviceAccountEmail") != null && !jsonObj.get("serviceAccountEmail").isJsonNull()) && !jsonObj.get("serviceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountEmail").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudStorageConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudStorageConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudStorageConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudStorageConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudStorageConfig>() {
           @Override
           public void write(JsonWriter out, CloudStorageConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudStorageConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudStorageConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudStorageConfig
   * @throws IOException if the JSON string is invalid with respect to CloudStorageConfig
   */
  public static CloudStorageConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudStorageConfig.class);
  }

  /**
   * Convert an instance of CloudStorageConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

