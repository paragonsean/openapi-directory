# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BigQueryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drop_unknown_fields: bool=None, service_account_email: str=None, state: str=None, table: str=None, use_table_schema: bool=None, use_topic_schema: bool=None, write_metadata: bool=None):
        """BigQueryConfig - a model defined in OpenAPI

        :param drop_unknown_fields: The drop_unknown_fields of this BigQueryConfig.
        :param service_account_email: The service_account_email of this BigQueryConfig.
        :param state: The state of this BigQueryConfig.
        :param table: The table of this BigQueryConfig.
        :param use_table_schema: The use_table_schema of this BigQueryConfig.
        :param use_topic_schema: The use_topic_schema of this BigQueryConfig.
        :param write_metadata: The write_metadata of this BigQueryConfig.
        """
        self.openapi_types = {
            'drop_unknown_fields': bool,
            'service_account_email': str,
            'state': str,
            'table': str,
            'use_table_schema': bool,
            'use_topic_schema': bool,
            'write_metadata': bool
        }

        self.attribute_map = {
            'drop_unknown_fields': 'dropUnknownFields',
            'service_account_email': 'serviceAccountEmail',
            'state': 'state',
            'table': 'table',
            'use_table_schema': 'useTableSchema',
            'use_topic_schema': 'useTopicSchema',
            'write_metadata': 'writeMetadata'
        }

        self._drop_unknown_fields = drop_unknown_fields
        self._service_account_email = service_account_email
        self._state = state
        self._table = table
        self._use_table_schema = use_table_schema
        self._use_topic_schema = use_topic_schema
        self._write_metadata = write_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BigQueryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BigQueryConfig of this BigQueryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drop_unknown_fields(self):
        """Gets the drop_unknown_fields of this BigQueryConfig.

        Optional. When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.

        :return: The drop_unknown_fields of this BigQueryConfig.
        :rtype: bool
        """
        return self._drop_unknown_fields

    @drop_unknown_fields.setter
    def drop_unknown_fields(self, drop_unknown_fields):
        """Sets the drop_unknown_fields of this BigQueryConfig.

        Optional. When true and use_topic_schema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.

        :param drop_unknown_fields: The drop_unknown_fields of this BigQueryConfig.
        :type drop_unknown_fields: bool
        """

        self._drop_unknown_fields = drop_unknown_fields

    @property
    def service_account_email(self):
        """Gets the service_account_email of this BigQueryConfig.

        Optional. The service account to use to write to BigQuery. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.

        :return: The service_account_email of this BigQueryConfig.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this BigQueryConfig.

        Optional. The service account to use to write to BigQuery. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.

        :param service_account_email: The service_account_email of this BigQueryConfig.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def state(self):
        """Gets the state of this BigQueryConfig.

        Output only. An output-only field that indicates whether or not the subscription can receive messages.

        :return: The state of this BigQueryConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BigQueryConfig.

        Output only. An output-only field that indicates whether or not the subscription can receive messages.

        :param state: The state of this BigQueryConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "PERMISSION_DENIED", "NOT_FOUND", "SCHEMA_MISMATCH", "IN_TRANSIT_LOCATION_RESTRICTION"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def table(self):
        """Gets the table of this BigQueryConfig.

        Optional. The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}

        :return: The table of this BigQueryConfig.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this BigQueryConfig.

        Optional. The name of the table to which to write data, of the form {projectId}.{datasetId}.{tableId}

        :param table: The table of this BigQueryConfig.
        :type table: str
        """

        self._table = table

    @property
    def use_table_schema(self):
        """Gets the use_table_schema of this BigQueryConfig.

        Optional. When true, use the BigQuery table's schema as the columns to write to in BigQuery. `use_table_schema` and `use_topic_schema` cannot be enabled at the same time.

        :return: The use_table_schema of this BigQueryConfig.
        :rtype: bool
        """
        return self._use_table_schema

    @use_table_schema.setter
    def use_table_schema(self, use_table_schema):
        """Sets the use_table_schema of this BigQueryConfig.

        Optional. When true, use the BigQuery table's schema as the columns to write to in BigQuery. `use_table_schema` and `use_topic_schema` cannot be enabled at the same time.

        :param use_table_schema: The use_table_schema of this BigQueryConfig.
        :type use_table_schema: bool
        """

        self._use_table_schema = use_table_schema

    @property
    def use_topic_schema(self):
        """Gets the use_topic_schema of this BigQueryConfig.

        Optional. When true, use the topic's schema as the columns to write to in BigQuery, if it exists. `use_topic_schema` and `use_table_schema` cannot be enabled at the same time.

        :return: The use_topic_schema of this BigQueryConfig.
        :rtype: bool
        """
        return self._use_topic_schema

    @use_topic_schema.setter
    def use_topic_schema(self, use_topic_schema):
        """Sets the use_topic_schema of this BigQueryConfig.

        Optional. When true, use the topic's schema as the columns to write to in BigQuery, if it exists. `use_topic_schema` and `use_table_schema` cannot be enabled at the same time.

        :param use_topic_schema: The use_topic_schema of this BigQueryConfig.
        :type use_topic_schema: bool
        """

        self._use_topic_schema = use_topic_schema

    @property
    def write_metadata(self):
        """Gets the write_metadata of this BigQueryConfig.

        Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.

        :return: The write_metadata of this BigQueryConfig.
        :rtype: bool
        """
        return self._write_metadata

    @write_metadata.setter
    def write_metadata(self, write_metadata):
        """Sets the write_metadata of this BigQueryConfig.

        Optional. When true, write the subscription name, message_id, publish_time, attributes, and ordering_key to additional columns in the table. The subscription name, message_id, and publish_time fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.

        :param write_metadata: The write_metadata of this BigQueryConfig.
        :type write_metadata: bool
        """

        self._write_metadata = write_metadata
