# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.no_wrapper import NoWrapper
from openapi_server.models.oidc_token import OidcToken
from openapi_server import util


class PushConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, no_wrapper: NoWrapper=None, oidc_token: OidcToken=None, pubsub_wrapper: object=None, push_endpoint: str=None):
        """PushConfig - a model defined in OpenAPI

        :param attributes: The attributes of this PushConfig.
        :param no_wrapper: The no_wrapper of this PushConfig.
        :param oidc_token: The oidc_token of this PushConfig.
        :param pubsub_wrapper: The pubsub_wrapper of this PushConfig.
        :param push_endpoint: The push_endpoint of this PushConfig.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'no_wrapper': NoWrapper,
            'oidc_token': OidcToken,
            'pubsub_wrapper': object,
            'push_endpoint': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'no_wrapper': 'noWrapper',
            'oidc_token': 'oidcToken',
            'pubsub_wrapper': 'pubsubWrapper',
            'push_endpoint': 'pushEndpoint'
        }

        self._attributes = attributes
        self._no_wrapper = no_wrapper
        self._oidc_token = oidc_token
        self._pubsub_wrapper = pubsub_wrapper
        self._push_endpoint = push_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PushConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PushConfig of this PushConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this PushConfig.

        Optional. Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: `attributes { \"x-goog-version\": \"v1\" }`

        :return: The attributes of this PushConfig.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PushConfig.

        Optional. Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is `x-goog-version`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the `CreateSubscription` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a `ModifyPushConfig` call, its value will not be changed. `GetSubscription` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the `x-goog-version` attribute are: * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API. * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API. For example: `attributes { \"x-goog-version\": \"v1\" }`

        :param attributes: The attributes of this PushConfig.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def no_wrapper(self):
        """Gets the no_wrapper of this PushConfig.


        :return: The no_wrapper of this PushConfig.
        :rtype: NoWrapper
        """
        return self._no_wrapper

    @no_wrapper.setter
    def no_wrapper(self, no_wrapper):
        """Sets the no_wrapper of this PushConfig.


        :param no_wrapper: The no_wrapper of this PushConfig.
        :type no_wrapper: NoWrapper
        """

        self._no_wrapper = no_wrapper

    @property
    def oidc_token(self):
        """Gets the oidc_token of this PushConfig.


        :return: The oidc_token of this PushConfig.
        :rtype: OidcToken
        """
        return self._oidc_token

    @oidc_token.setter
    def oidc_token(self, oidc_token):
        """Sets the oidc_token of this PushConfig.


        :param oidc_token: The oidc_token of this PushConfig.
        :type oidc_token: OidcToken
        """

        self._oidc_token = oidc_token

    @property
    def pubsub_wrapper(self):
        """Gets the pubsub_wrapper of this PushConfig.

        The payload to the push endpoint is in the form of the JSON representation of a PubsubMessage (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).

        :return: The pubsub_wrapper of this PushConfig.
        :rtype: object
        """
        return self._pubsub_wrapper

    @pubsub_wrapper.setter
    def pubsub_wrapper(self, pubsub_wrapper):
        """Sets the pubsub_wrapper of this PushConfig.

        The payload to the push endpoint is in the form of the JSON representation of a PubsubMessage (https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#pubsubmessage).

        :param pubsub_wrapper: The pubsub_wrapper of this PushConfig.
        :type pubsub_wrapper: object
        """

        self._pubsub_wrapper = pubsub_wrapper

    @property
    def push_endpoint(self):
        """Gets the push_endpoint of this PushConfig.

        Optional. A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.

        :return: The push_endpoint of this PushConfig.
        :rtype: str
        """
        return self._push_endpoint

    @push_endpoint.setter
    def push_endpoint(self, push_endpoint):
        """Sets the push_endpoint of this PushConfig.

        Optional. A URL locating the endpoint to which messages should be pushed. For example, a Webhook endpoint might use `https://example.com/push`.

        :param push_endpoint: The push_endpoint of this PushConfig.
        :type push_endpoint: str
        """

        self._push_endpoint = push_endpoint
