# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSnapshotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, subscription: str=None):
        """CreateSnapshotRequest - a model defined in OpenAPI

        :param labels: The labels of this CreateSnapshotRequest.
        :param subscription: The subscription of this CreateSnapshotRequest.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'subscription': str
        }

        self.attribute_map = {
            'labels': 'labels',
            'subscription': 'subscription'
        }

        self._labels = labels
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSnapshotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSnapshotRequest of this CreateSnapshotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this CreateSnapshotRequest.

        Optional. See [Creating and managing labels](https://cloud.google.com/pubsub/docs/labels).

        :return: The labels of this CreateSnapshotRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateSnapshotRequest.

        Optional. See [Creating and managing labels](https://cloud.google.com/pubsub/docs/labels).

        :param labels: The labels of this CreateSnapshotRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def subscription(self):
        """Gets the subscription of this CreateSnapshotRequest.

        Required. The subscription whose backlog the snapshot retains. Specifically, the created snapshot is guaranteed to retain: (a) The existing backlog on the subscription. More precisely, this is defined as the messages in the subscription's backlog that are unacknowledged upon the successful completion of the `CreateSnapshot` request; as well as: (b) Any messages published to the subscription's topic following the successful completion of the CreateSnapshot request. Format is `projects/{project}/subscriptions/{sub}`.

        :return: The subscription of this CreateSnapshotRequest.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this CreateSnapshotRequest.

        Required. The subscription whose backlog the snapshot retains. Specifically, the created snapshot is guaranteed to retain: (a) The existing backlog on the subscription. More precisely, this is defined as the messages in the subscription's backlog that are unacknowledged upon the successful completion of the `CreateSnapshot` request; as well as: (b) Any messages published to the subscription's topic following the successful completion of the CreateSnapshot request. Format is `projects/{project}/subscriptions/{sub}`.

        :param subscription: The subscription of this CreateSnapshotRequest.
        :type subscription: str
        """

        self._subscription = subscription
