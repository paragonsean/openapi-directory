# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ingestion_data_source_settings import IngestionDataSourceSettings
from openapi_server.models.message_storage_policy import MessageStoragePolicy
from openapi_server.models.schema_settings import SchemaSettings
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingestion_data_source_settings: IngestionDataSourceSettings=None, kms_key_name: str=None, labels: Dict[str, str]=None, message_retention_duration: str=None, message_storage_policy: MessageStoragePolicy=None, name: str=None, satisfies_pzs: bool=None, schema_settings: SchemaSettings=None, state: str=None):
        """Topic - a model defined in OpenAPI

        :param ingestion_data_source_settings: The ingestion_data_source_settings of this Topic.
        :param kms_key_name: The kms_key_name of this Topic.
        :param labels: The labels of this Topic.
        :param message_retention_duration: The message_retention_duration of this Topic.
        :param message_storage_policy: The message_storage_policy of this Topic.
        :param name: The name of this Topic.
        :param satisfies_pzs: The satisfies_pzs of this Topic.
        :param schema_settings: The schema_settings of this Topic.
        :param state: The state of this Topic.
        """
        self.openapi_types = {
            'ingestion_data_source_settings': IngestionDataSourceSettings,
            'kms_key_name': str,
            'labels': Dict[str, str],
            'message_retention_duration': str,
            'message_storage_policy': MessageStoragePolicy,
            'name': str,
            'satisfies_pzs': bool,
            'schema_settings': SchemaSettings,
            'state': str
        }

        self.attribute_map = {
            'ingestion_data_source_settings': 'ingestionDataSourceSettings',
            'kms_key_name': 'kmsKeyName',
            'labels': 'labels',
            'message_retention_duration': 'messageRetentionDuration',
            'message_storage_policy': 'messageStoragePolicy',
            'name': 'name',
            'satisfies_pzs': 'satisfiesPzs',
            'schema_settings': 'schemaSettings',
            'state': 'state'
        }

        self._ingestion_data_source_settings = ingestion_data_source_settings
        self._kms_key_name = kms_key_name
        self._labels = labels
        self._message_retention_duration = message_retention_duration
        self._message_storage_policy = message_storage_policy
        self._name = name
        self._satisfies_pzs = satisfies_pzs
        self._schema_settings = schema_settings
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topic of this Topic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingestion_data_source_settings(self):
        """Gets the ingestion_data_source_settings of this Topic.


        :return: The ingestion_data_source_settings of this Topic.
        :rtype: IngestionDataSourceSettings
        """
        return self._ingestion_data_source_settings

    @ingestion_data_source_settings.setter
    def ingestion_data_source_settings(self, ingestion_data_source_settings):
        """Sets the ingestion_data_source_settings of this Topic.


        :param ingestion_data_source_settings: The ingestion_data_source_settings of this Topic.
        :type ingestion_data_source_settings: IngestionDataSourceSettings
        """

        self._ingestion_data_source_settings = ingestion_data_source_settings

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this Topic.

        Optional. The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.

        :return: The kms_key_name of this Topic.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this Topic.

        Optional. The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.

        :param kms_key_name: The kms_key_name of this Topic.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def labels(self):
        """Gets the labels of this Topic.

        Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).

        :return: The labels of this Topic.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Topic.

        Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).

        :param labels: The labels of this Topic.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def message_retention_duration(self):
        """Gets the message_retention_duration of this Topic.

        Optional. Indicates the minimum duration to retain a message after it is published to the topic. If this field is set, messages published to the topic in the last `message_retention_duration` are always available to subscribers. For instance, it allows any attached subscription to [seek to a timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) that is up to `message_retention_duration` in the past. If this field is not set, message retention is controlled by settings on individual subscriptions. Cannot be more than 31 days or less than 10 minutes.

        :return: The message_retention_duration of this Topic.
        :rtype: str
        """
        return self._message_retention_duration

    @message_retention_duration.setter
    def message_retention_duration(self, message_retention_duration):
        """Sets the message_retention_duration of this Topic.

        Optional. Indicates the minimum duration to retain a message after it is published to the topic. If this field is set, messages published to the topic in the last `message_retention_duration` are always available to subscribers. For instance, it allows any attached subscription to [seek to a timestamp](https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) that is up to `message_retention_duration` in the past. If this field is not set, message retention is controlled by settings on individual subscriptions. Cannot be more than 31 days or less than 10 minutes.

        :param message_retention_duration: The message_retention_duration of this Topic.
        :type message_retention_duration: str
        """

        self._message_retention_duration = message_retention_duration

    @property
    def message_storage_policy(self):
        """Gets the message_storage_policy of this Topic.


        :return: The message_storage_policy of this Topic.
        :rtype: MessageStoragePolicy
        """
        return self._message_storage_policy

    @message_storage_policy.setter
    def message_storage_policy(self, message_storage_policy):
        """Sets the message_storage_policy of this Topic.


        :param message_storage_policy: The message_storage_policy of this Topic.
        :type message_storage_policy: MessageStoragePolicy
        """

        self._message_storage_policy = message_storage_policy

    @property
    def name(self):
        """Gets the name of this Topic.

        Required. The name of the topic. It must have the format `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.

        :return: The name of this Topic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Topic.

        Required. The name of the topic. It must have the format `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.

        :param name: The name of this Topic.
        :type name: str
        """

        self._name = name

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Topic.

        Optional. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :return: The satisfies_pzs of this Topic.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Topic.

        Optional. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :param satisfies_pzs: The satisfies_pzs of this Topic.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def schema_settings(self):
        """Gets the schema_settings of this Topic.


        :return: The schema_settings of this Topic.
        :rtype: SchemaSettings
        """
        return self._schema_settings

    @schema_settings.setter
    def schema_settings(self, schema_settings):
        """Sets the schema_settings of this Topic.


        :param schema_settings: The schema_settings of this Topic.
        :type schema_settings: SchemaSettings
        """

        self._schema_settings = schema_settings

    @property
    def state(self):
        """Gets the state of this Topic.

        Output only. An output-only field indicating the state of the topic.

        :return: The state of this Topic.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Topic.

        Output only. An output-only field indicating the state of the topic.

        :param state: The state of this Topic.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "INGESTION_RESOURCE_ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
