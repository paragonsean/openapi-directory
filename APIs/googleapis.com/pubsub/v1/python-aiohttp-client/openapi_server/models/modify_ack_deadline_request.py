# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyAckDeadlineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_deadline_seconds: int=None, ack_ids: List[str]=None):
        """ModifyAckDeadlineRequest - a model defined in OpenAPI

        :param ack_deadline_seconds: The ack_deadline_seconds of this ModifyAckDeadlineRequest.
        :param ack_ids: The ack_ids of this ModifyAckDeadlineRequest.
        """
        self.openapi_types = {
            'ack_deadline_seconds': int,
            'ack_ids': List[str]
        }

        self.attribute_map = {
            'ack_deadline_seconds': 'ackDeadlineSeconds',
            'ack_ids': 'ackIds'
        }

        self._ack_deadline_seconds = ack_deadline_seconds
        self._ack_ids = ack_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyAckDeadlineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyAckDeadlineRequest of this ModifyAckDeadlineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_deadline_seconds(self):
        """Gets the ack_deadline_seconds of this ModifyAckDeadlineRequest.

        Required. The new ack deadline with respect to the time this request was sent to the Pub/Sub system. For example, if the value is 10, the new ack deadline will expire 10 seconds after the `ModifyAckDeadline` call was made. Specifying zero might immediately make the message available for delivery to another subscriber client. This typically results in an increase in the rate of message redeliveries (that is, duplicates). The minimum deadline you can specify is 0 seconds. The maximum deadline you can specify in a single request is 600 seconds (10 minutes).

        :return: The ack_deadline_seconds of this ModifyAckDeadlineRequest.
        :rtype: int
        """
        return self._ack_deadline_seconds

    @ack_deadline_seconds.setter
    def ack_deadline_seconds(self, ack_deadline_seconds):
        """Sets the ack_deadline_seconds of this ModifyAckDeadlineRequest.

        Required. The new ack deadline with respect to the time this request was sent to the Pub/Sub system. For example, if the value is 10, the new ack deadline will expire 10 seconds after the `ModifyAckDeadline` call was made. Specifying zero might immediately make the message available for delivery to another subscriber client. This typically results in an increase in the rate of message redeliveries (that is, duplicates). The minimum deadline you can specify is 0 seconds. The maximum deadline you can specify in a single request is 600 seconds (10 minutes).

        :param ack_deadline_seconds: The ack_deadline_seconds of this ModifyAckDeadlineRequest.
        :type ack_deadline_seconds: int
        """

        self._ack_deadline_seconds = ack_deadline_seconds

    @property
    def ack_ids(self):
        """Gets the ack_ids of this ModifyAckDeadlineRequest.

        Required. List of acknowledgment IDs.

        :return: The ack_ids of this ModifyAckDeadlineRequest.
        :rtype: List[str]
        """
        return self._ack_ids

    @ack_ids.setter
    def ack_ids(self, ack_ids):
        """Sets the ack_ids of this ModifyAckDeadlineRequest.

        Required. List of acknowledgment IDs.

        :param ack_ids: The ack_ids of this ModifyAckDeadlineRequest.
        :type ack_ids: List[str]
        """

        self._ack_ids = ack_ids
