# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SeekRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, snapshot: str=None, time: str=None):
        """SeekRequest - a model defined in OpenAPI

        :param snapshot: The snapshot of this SeekRequest.
        :param time: The time of this SeekRequest.
        """
        self.openapi_types = {
            'snapshot': str,
            'time': str
        }

        self.attribute_map = {
            'snapshot': 'snapshot',
            'time': 'time'
        }

        self._snapshot = snapshot
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeekRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeekRequest of this SeekRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def snapshot(self):
        """Gets the snapshot of this SeekRequest.

        Optional. The snapshot to seek to. The snapshot's topic must be the same as that of the provided subscription. Format is `projects/{project}/snapshots/{snap}`.

        :return: The snapshot of this SeekRequest.
        :rtype: str
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this SeekRequest.

        Optional. The snapshot to seek to. The snapshot's topic must be the same as that of the provided subscription. Format is `projects/{project}/snapshots/{snap}`.

        :param snapshot: The snapshot of this SeekRequest.
        :type snapshot: str
        """

        self._snapshot = snapshot

    @property
    def time(self):
        """Gets the time of this SeekRequest.

        Optional. The time to seek to. Messages retained in the subscription that were published before this time are marked as acknowledged, and messages retained in the subscription that were published after this time are marked as unacknowledged. Note that this operation affects only those messages retained in the subscription (configured by the combination of `message_retention_duration` and `retain_acked_messages`). For example, if `time` corresponds to a point before the message retention window (or to a point before the system's notion of the subscription creation time), only retained messages will be marked as unacknowledged, and already-expunged messages will not be restored.

        :return: The time of this SeekRequest.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SeekRequest.

        Optional. The time to seek to. Messages retained in the subscription that were published before this time are marked as acknowledged, and messages retained in the subscription that were published after this time are marked as unacknowledged. Note that this operation affects only those messages retained in the subscription (configured by the combination of `message_retention_duration` and `retain_acked_messages`). For example, if `time` corresponds to a point before the message retention window (or to a point before the system's notion of the subscription creation time), only retained messages will be marked as unacknowledged, and already-expunged messages will not be restored.

        :param time: The time of this SeekRequest.
        :type time: str
        """

        self._time = time
