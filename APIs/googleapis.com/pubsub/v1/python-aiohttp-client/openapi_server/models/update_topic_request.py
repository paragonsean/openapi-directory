# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.topic import Topic
from openapi_server import util


class UpdateTopicRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic: Topic=None, update_mask: str=None):
        """UpdateTopicRequest - a model defined in OpenAPI

        :param topic: The topic of this UpdateTopicRequest.
        :param update_mask: The update_mask of this UpdateTopicRequest.
        """
        self.openapi_types = {
            'topic': Topic,
            'update_mask': str
        }

        self.attribute_map = {
            'topic': 'topic',
            'update_mask': 'updateMask'
        }

        self._topic = topic
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTopicRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTopicRequest of this UpdateTopicRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self):
        """Gets the topic of this UpdateTopicRequest.


        :return: The topic of this UpdateTopicRequest.
        :rtype: Topic
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this UpdateTopicRequest.


        :param topic: The topic of this UpdateTopicRequest.
        :type topic: Topic
        """

        self._topic = topic

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdateTopicRequest.

        Required. Indicates which fields in the provided topic to update. Must be specified and non-empty. Note that if `update_mask` contains \"message_storage_policy\" but the `message_storage_policy` is not set in the `topic` provided above, then the updated value is determined by the policy configured at the project or organization level.

        :return: The update_mask of this UpdateTopicRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdateTopicRequest.

        Required. Indicates which fields in the provided topic to update. Must be specified and non-empty. Note that if `update_mask` contains \"message_storage_policy\" but the `message_storage_policy` is not set in the `topic` provided above, then the updated value is determined by the policy configured at the project or organization level.

        :param update_mask: The update_mask of this UpdateTopicRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
