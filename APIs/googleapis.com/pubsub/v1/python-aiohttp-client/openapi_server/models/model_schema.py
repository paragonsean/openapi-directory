# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, definition: str=None, name: str=None, revision_create_time: str=None, revision_id: str=None, type: str=None):
        """ModelSchema - a model defined in OpenAPI

        :param definition: The definition of this ModelSchema.
        :param name: The name of this ModelSchema.
        :param revision_create_time: The revision_create_time of this ModelSchema.
        :param revision_id: The revision_id of this ModelSchema.
        :param type: The type of this ModelSchema.
        """
        self.openapi_types = {
            'definition': str,
            'name': str,
            'revision_create_time': str,
            'revision_id': str,
            'type': str
        }

        self.attribute_map = {
            'definition': 'definition',
            'name': 'name',
            'revision_create_time': 'revisionCreateTime',
            'revision_id': 'revisionId',
            'type': 'type'
        }

        self._definition = definition
        self._name = name
        self._revision_create_time = revision_create_time
        self._revision_id = revision_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schema of this ModelSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def definition(self):
        """Gets the definition of this ModelSchema.

        The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.

        :return: The definition of this ModelSchema.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ModelSchema.

        The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.

        :param definition: The definition of this ModelSchema.
        :type definition: str
        """

        self._definition = definition

    @property
    def name(self):
        """Gets the name of this ModelSchema.

        Required. Name of the schema. Format is `projects/{project}/schemas/{schema}`.

        :return: The name of this ModelSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelSchema.

        Required. Name of the schema. Format is `projects/{project}/schemas/{schema}`.

        :param name: The name of this ModelSchema.
        :type name: str
        """

        self._name = name

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this ModelSchema.

        Output only. The timestamp that the revision was created.

        :return: The revision_create_time of this ModelSchema.
        :rtype: str
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this ModelSchema.

        Output only. The timestamp that the revision was created.

        :param revision_create_time: The revision_create_time of this ModelSchema.
        :type revision_create_time: str
        """

        self._revision_create_time = revision_create_time

    @property
    def revision_id(self):
        """Gets the revision_id of this ModelSchema.

        Output only. Immutable. The revision ID of the schema.

        :return: The revision_id of this ModelSchema.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this ModelSchema.

        Output only. Immutable. The revision ID of the schema.

        :param revision_id: The revision_id of this ModelSchema.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def type(self):
        """Gets the type of this ModelSchema.

        The type of the schema definition.

        :return: The type of this ModelSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelSchema.

        The type of the schema definition.

        :param type: The type of this ModelSchema.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "PROTOCOL_BUFFER", "AVRO"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
