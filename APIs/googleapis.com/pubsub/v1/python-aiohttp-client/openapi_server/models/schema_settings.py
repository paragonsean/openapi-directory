# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchemaSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, first_revision_id: str=None, last_revision_id: str=None, _schema: str=None):
        """SchemaSettings - a model defined in OpenAPI

        :param encoding: The encoding of this SchemaSettings.
        :param first_revision_id: The first_revision_id of this SchemaSettings.
        :param last_revision_id: The last_revision_id of this SchemaSettings.
        :param _schema: The _schema of this SchemaSettings.
        """
        self.openapi_types = {
            'encoding': str,
            'first_revision_id': str,
            'last_revision_id': str,
            '_schema': str
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'first_revision_id': 'firstRevisionId',
            'last_revision_id': 'lastRevisionId',
            '_schema': 'schema'
        }

        self._encoding = encoding
        self._first_revision_id = first_revision_id
        self._last_revision_id = last_revision_id
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaSettings of this SchemaSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this SchemaSettings.

        Optional. The encoding of messages validated against `schema`.

        :return: The encoding of this SchemaSettings.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this SchemaSettings.

        Optional. The encoding of messages validated against `schema`.

        :param encoding: The encoding of this SchemaSettings.
        :type encoding: str
        """
        allowed_values = ["ENCODING_UNSPECIFIED", "JSON", "BINARY"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def first_revision_id(self):
        """Gets the first_revision_id of this SchemaSettings.

        Optional. The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.

        :return: The first_revision_id of this SchemaSettings.
        :rtype: str
        """
        return self._first_revision_id

    @first_revision_id.setter
    def first_revision_id(self, first_revision_id):
        """Sets the first_revision_id of this SchemaSettings.

        Optional. The minimum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against last_revision or any revision created before.

        :param first_revision_id: The first_revision_id of this SchemaSettings.
        :type first_revision_id: str
        """

        self._first_revision_id = first_revision_id

    @property
    def last_revision_id(self):
        """Gets the last_revision_id of this SchemaSettings.

        Optional. The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.

        :return: The last_revision_id of this SchemaSettings.
        :rtype: str
        """
        return self._last_revision_id

    @last_revision_id.setter
    def last_revision_id(self, last_revision_id):
        """Sets the last_revision_id of this SchemaSettings.

        Optional. The maximum (inclusive) revision allowed for validating messages. If empty or not present, allow any revision to be validated against first_revision or any revision created after.

        :param last_revision_id: The last_revision_id of this SchemaSettings.
        :type last_revision_id: str
        """

        self._last_revision_id = last_revision_id

    @property
    def _schema(self):
        """Gets the _schema of this SchemaSettings.

        Required. The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.

        :return: The _schema of this SchemaSettings.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this SchemaSettings.

        Required. The name of the schema that messages published should be validated against. Format is `projects/{project}/schemas/{schema}`. The value of this field will be `_deleted-schema_` if the schema has been deleted.

        :param _schema: The _schema of this SchemaSettings.
        :type _schema: str
        """

        self.__schema = _schema
