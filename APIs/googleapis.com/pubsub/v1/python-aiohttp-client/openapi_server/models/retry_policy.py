# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetryPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_backoff: str=None, minimum_backoff: str=None):
        """RetryPolicy - a model defined in OpenAPI

        :param maximum_backoff: The maximum_backoff of this RetryPolicy.
        :param minimum_backoff: The minimum_backoff of this RetryPolicy.
        """
        self.openapi_types = {
            'maximum_backoff': str,
            'minimum_backoff': str
        }

        self.attribute_map = {
            'maximum_backoff': 'maximumBackoff',
            'minimum_backoff': 'minimumBackoff'
        }

        self._maximum_backoff = maximum_backoff
        self._minimum_backoff = minimum_backoff

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryPolicy of this RetryPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_backoff(self):
        """Gets the maximum_backoff of this RetryPolicy.

        Optional. The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.

        :return: The maximum_backoff of this RetryPolicy.
        :rtype: str
        """
        return self._maximum_backoff

    @maximum_backoff.setter
    def maximum_backoff(self, maximum_backoff):
        """Sets the maximum_backoff of this RetryPolicy.

        Optional. The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.

        :param maximum_backoff: The maximum_backoff of this RetryPolicy.
        :type maximum_backoff: str
        """

        self._maximum_backoff = maximum_backoff

    @property
    def minimum_backoff(self):
        """Gets the minimum_backoff of this RetryPolicy.

        Optional. The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.

        :return: The minimum_backoff of this RetryPolicy.
        :rtype: str
        """
        return self._minimum_backoff

    @minimum_backoff.setter
    def minimum_backoff(self, minimum_backoff):
        """Sets the minimum_backoff of this RetryPolicy.

        Optional. The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.

        :param minimum_backoff: The minimum_backoff of this RetryPolicy.
        :type minimum_backoff: str
        """

        self._minimum_backoff = minimum_backoff
