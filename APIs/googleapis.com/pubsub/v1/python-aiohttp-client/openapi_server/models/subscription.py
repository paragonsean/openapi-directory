# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_config import BigQueryConfig
from openapi_server.models.cloud_storage_config import CloudStorageConfig
from openapi_server.models.dead_letter_policy import DeadLetterPolicy
from openapi_server.models.expiration_policy import ExpirationPolicy
from openapi_server.models.push_config import PushConfig
from openapi_server.models.retry_policy import RetryPolicy
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_deadline_seconds: int=None, bigquery_config: BigQueryConfig=None, cloud_storage_config: CloudStorageConfig=None, dead_letter_policy: DeadLetterPolicy=None, detached: bool=None, enable_exactly_once_delivery: bool=None, enable_message_ordering: bool=None, expiration_policy: ExpirationPolicy=None, filter: str=None, labels: Dict[str, str]=None, message_retention_duration: str=None, name: str=None, push_config: PushConfig=None, retain_acked_messages: bool=None, retry_policy: RetryPolicy=None, state: str=None, topic: str=None, topic_message_retention_duration: str=None):
        """Subscription - a model defined in OpenAPI

        :param ack_deadline_seconds: The ack_deadline_seconds of this Subscription.
        :param bigquery_config: The bigquery_config of this Subscription.
        :param cloud_storage_config: The cloud_storage_config of this Subscription.
        :param dead_letter_policy: The dead_letter_policy of this Subscription.
        :param detached: The detached of this Subscription.
        :param enable_exactly_once_delivery: The enable_exactly_once_delivery of this Subscription.
        :param enable_message_ordering: The enable_message_ordering of this Subscription.
        :param expiration_policy: The expiration_policy of this Subscription.
        :param filter: The filter of this Subscription.
        :param labels: The labels of this Subscription.
        :param message_retention_duration: The message_retention_duration of this Subscription.
        :param name: The name of this Subscription.
        :param push_config: The push_config of this Subscription.
        :param retain_acked_messages: The retain_acked_messages of this Subscription.
        :param retry_policy: The retry_policy of this Subscription.
        :param state: The state of this Subscription.
        :param topic: The topic of this Subscription.
        :param topic_message_retention_duration: The topic_message_retention_duration of this Subscription.
        """
        self.openapi_types = {
            'ack_deadline_seconds': int,
            'bigquery_config': BigQueryConfig,
            'cloud_storage_config': CloudStorageConfig,
            'dead_letter_policy': DeadLetterPolicy,
            'detached': bool,
            'enable_exactly_once_delivery': bool,
            'enable_message_ordering': bool,
            'expiration_policy': ExpirationPolicy,
            'filter': str,
            'labels': Dict[str, str],
            'message_retention_duration': str,
            'name': str,
            'push_config': PushConfig,
            'retain_acked_messages': bool,
            'retry_policy': RetryPolicy,
            'state': str,
            'topic': str,
            'topic_message_retention_duration': str
        }

        self.attribute_map = {
            'ack_deadline_seconds': 'ackDeadlineSeconds',
            'bigquery_config': 'bigqueryConfig',
            'cloud_storage_config': 'cloudStorageConfig',
            'dead_letter_policy': 'deadLetterPolicy',
            'detached': 'detached',
            'enable_exactly_once_delivery': 'enableExactlyOnceDelivery',
            'enable_message_ordering': 'enableMessageOrdering',
            'expiration_policy': 'expirationPolicy',
            'filter': 'filter',
            'labels': 'labels',
            'message_retention_duration': 'messageRetentionDuration',
            'name': 'name',
            'push_config': 'pushConfig',
            'retain_acked_messages': 'retainAckedMessages',
            'retry_policy': 'retryPolicy',
            'state': 'state',
            'topic': 'topic',
            'topic_message_retention_duration': 'topicMessageRetentionDuration'
        }

        self._ack_deadline_seconds = ack_deadline_seconds
        self._bigquery_config = bigquery_config
        self._cloud_storage_config = cloud_storage_config
        self._dead_letter_policy = dead_letter_policy
        self._detached = detached
        self._enable_exactly_once_delivery = enable_exactly_once_delivery
        self._enable_message_ordering = enable_message_ordering
        self._expiration_policy = expiration_policy
        self._filter = filter
        self._labels = labels
        self._message_retention_duration = message_retention_duration
        self._name = name
        self._push_config = push_config
        self._retain_acked_messages = retain_acked_messages
        self._retry_policy = retry_policy
        self._state = state
        self._topic = topic
        self._topic_message_retention_duration = topic_message_retention_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_deadline_seconds(self):
        """Gets the ack_deadline_seconds of this Subscription.

        Optional. The approximate amount of time (on a best-effort basis) Pub/Sub waits for the subscriber to acknowledge receipt before resending the message. In the interval after the message is delivered and before it is acknowledged, it is considered to be _outstanding_. During that time period, the message will not be redelivered (on a best-effort basis). For pull subscriptions, this value is used as the initial value for the ack deadline. To override this value for a given message, call `ModifyAckDeadline` with the corresponding `ack_id` if using non-streaming pull or send the `ack_id` in a `StreamingModifyAckDeadlineRequest` if using streaming pull. The minimum custom deadline you can specify is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the message.

        :return: The ack_deadline_seconds of this Subscription.
        :rtype: int
        """
        return self._ack_deadline_seconds

    @ack_deadline_seconds.setter
    def ack_deadline_seconds(self, ack_deadline_seconds):
        """Sets the ack_deadline_seconds of this Subscription.

        Optional. The approximate amount of time (on a best-effort basis) Pub/Sub waits for the subscriber to acknowledge receipt before resending the message. In the interval after the message is delivered and before it is acknowledged, it is considered to be _outstanding_. During that time period, the message will not be redelivered (on a best-effort basis). For pull subscriptions, this value is used as the initial value for the ack deadline. To override this value for a given message, call `ModifyAckDeadline` with the corresponding `ack_id` if using non-streaming pull or send the `ack_id` in a `StreamingModifyAckDeadlineRequest` if using streaming pull. The minimum custom deadline you can specify is 10 seconds. The maximum custom deadline you can specify is 600 seconds (10 minutes). If this parameter is 0, a default value of 10 seconds is used. For push delivery, this value is also used to set the request timeout for the call to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the message.

        :param ack_deadline_seconds: The ack_deadline_seconds of this Subscription.
        :type ack_deadline_seconds: int
        """

        self._ack_deadline_seconds = ack_deadline_seconds

    @property
    def bigquery_config(self):
        """Gets the bigquery_config of this Subscription.


        :return: The bigquery_config of this Subscription.
        :rtype: BigQueryConfig
        """
        return self._bigquery_config

    @bigquery_config.setter
    def bigquery_config(self, bigquery_config):
        """Sets the bigquery_config of this Subscription.


        :param bigquery_config: The bigquery_config of this Subscription.
        :type bigquery_config: BigQueryConfig
        """

        self._bigquery_config = bigquery_config

    @property
    def cloud_storage_config(self):
        """Gets the cloud_storage_config of this Subscription.


        :return: The cloud_storage_config of this Subscription.
        :rtype: CloudStorageConfig
        """
        return self._cloud_storage_config

    @cloud_storage_config.setter
    def cloud_storage_config(self, cloud_storage_config):
        """Sets the cloud_storage_config of this Subscription.


        :param cloud_storage_config: The cloud_storage_config of this Subscription.
        :type cloud_storage_config: CloudStorageConfig
        """

        self._cloud_storage_config = cloud_storage_config

    @property
    def dead_letter_policy(self):
        """Gets the dead_letter_policy of this Subscription.


        :return: The dead_letter_policy of this Subscription.
        :rtype: DeadLetterPolicy
        """
        return self._dead_letter_policy

    @dead_letter_policy.setter
    def dead_letter_policy(self, dead_letter_policy):
        """Sets the dead_letter_policy of this Subscription.


        :param dead_letter_policy: The dead_letter_policy of this Subscription.
        :type dead_letter_policy: DeadLetterPolicy
        """

        self._dead_letter_policy = dead_letter_policy

    @property
    def detached(self):
        """Gets the detached of this Subscription.

        Optional. Indicates whether the subscription is detached from its topic. Detached subscriptions don't receive messages from their topic and don't retain any backlog. `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will not be made.

        :return: The detached of this Subscription.
        :rtype: bool
        """
        return self._detached

    @detached.setter
    def detached(self, detached):
        """Sets the detached of this Subscription.

        Optional. Indicates whether the subscription is detached from its topic. Detached subscriptions don't receive messages from their topic and don't retain any backlog. `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will not be made.

        :param detached: The detached of this Subscription.
        :type detached: bool
        """

        self._detached = detached

    @property
    def enable_exactly_once_delivery(self):
        """Gets the enable_exactly_once_delivery of this Subscription.

        Optional. If true, Pub/Sub provides the following guarantees for the delivery of a message with a given value of `message_id` on this subscription: * The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires. * An acknowledged message will not be resent to a subscriber. Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery` is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct `message_id` values.

        :return: The enable_exactly_once_delivery of this Subscription.
        :rtype: bool
        """
        return self._enable_exactly_once_delivery

    @enable_exactly_once_delivery.setter
    def enable_exactly_once_delivery(self, enable_exactly_once_delivery):
        """Sets the enable_exactly_once_delivery of this Subscription.

        Optional. If true, Pub/Sub provides the following guarantees for the delivery of a message with a given value of `message_id` on this subscription: * The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires. * An acknowledged message will not be resent to a subscriber. Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery` is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct `message_id` values.

        :param enable_exactly_once_delivery: The enable_exactly_once_delivery of this Subscription.
        :type enable_exactly_once_delivery: bool
        """

        self._enable_exactly_once_delivery = enable_exactly_once_delivery

    @property
    def enable_message_ordering(self):
        """Gets the enable_message_ordering of this Subscription.

        Optional. If true, messages published with the same `ordering_key` in `PubsubMessage` will be delivered to the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.

        :return: The enable_message_ordering of this Subscription.
        :rtype: bool
        """
        return self._enable_message_ordering

    @enable_message_ordering.setter
    def enable_message_ordering(self, enable_message_ordering):
        """Sets the enable_message_ordering of this Subscription.

        Optional. If true, messages published with the same `ordering_key` in `PubsubMessage` will be delivered to the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they may be delivered in any order.

        :param enable_message_ordering: The enable_message_ordering of this Subscription.
        :type enable_message_ordering: bool
        """

        self._enable_message_ordering = enable_message_ordering

    @property
    def expiration_policy(self):
        """Gets the expiration_policy of this Subscription.


        :return: The expiration_policy of this Subscription.
        :rtype: ExpirationPolicy
        """
        return self._expiration_policy

    @expiration_policy.setter
    def expiration_policy(self, expiration_policy):
        """Sets the expiration_policy of this Subscription.


        :param expiration_policy: The expiration_policy of this Subscription.
        :type expiration_policy: ExpirationPolicy
        """

        self._expiration_policy = expiration_policy

    @property
    def filter(self):
        """Gets the filter of this Subscription.

        Optional. An expression written in the Pub/Sub [filter language](https://cloud.google.com/pubsub/docs/filtering). If non-empty, then only `PubsubMessage`s whose `attributes` field matches the filter are delivered on this subscription. If empty, then no messages are filtered out.

        :return: The filter of this Subscription.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Subscription.

        Optional. An expression written in the Pub/Sub [filter language](https://cloud.google.com/pubsub/docs/filtering). If non-empty, then only `PubsubMessage`s whose `attributes` field matches the filter are delivered on this subscription. If empty, then no messages are filtered out.

        :param filter: The filter of this Subscription.
        :type filter: str
        """

        self._filter = filter

    @property
    def labels(self):
        """Gets the labels of this Subscription.

        Optional. See [Creating and managing labels](https://cloud.google.com/pubsub/docs/labels).

        :return: The labels of this Subscription.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Subscription.

        Optional. See [Creating and managing labels](https://cloud.google.com/pubsub/docs/labels).

        :param labels: The labels of this Subscription.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def message_retention_duration(self):
        """Gets the message_retention_duration of this Subscription.

        Optional. How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If `retain_acked_messages` is true, then this also configures the retention of acknowledged messages, and thus configures how far back in time a `Seek` can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10 minutes.

        :return: The message_retention_duration of this Subscription.
        :rtype: str
        """
        return self._message_retention_duration

    @message_retention_duration.setter
    def message_retention_duration(self, message_retention_duration):
        """Sets the message_retention_duration of this Subscription.

        Optional. How long to retain unacknowledged messages in the subscription's backlog, from the moment a message is published. If `retain_acked_messages` is true, then this also configures the retention of acknowledged messages, and thus configures how far back in time a `Seek` can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10 minutes.

        :param message_retention_duration: The message_retention_duration of this Subscription.
        :type message_retention_duration: str
        """

        self._message_retention_duration = message_retention_duration

    @property
    def name(self):
        """Gets the name of this Subscription.

        Required. The name of the subscription. It must have the format `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        Required. The name of the subscription. It must have the format `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.

        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def push_config(self):
        """Gets the push_config of this Subscription.


        :return: The push_config of this Subscription.
        :rtype: PushConfig
        """
        return self._push_config

    @push_config.setter
    def push_config(self, push_config):
        """Sets the push_config of this Subscription.


        :param push_config: The push_config of this Subscription.
        :type push_config: PushConfig
        """

        self._push_config = push_config

    @property
    def retain_acked_messages(self):
        """Gets the retain_acked_messages of this Subscription.

        Optional. Indicates whether to retain acknowledged messages. If true, then messages are not expunged from the subscription's backlog, even if they are acknowledged, until they fall out of the `message_retention_duration` window. This must be true if you would like to [`Seek` to a timestamp] (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) in the past to replay previously-acknowledged messages.

        :return: The retain_acked_messages of this Subscription.
        :rtype: bool
        """
        return self._retain_acked_messages

    @retain_acked_messages.setter
    def retain_acked_messages(self, retain_acked_messages):
        """Sets the retain_acked_messages of this Subscription.

        Optional. Indicates whether to retain acknowledged messages. If true, then messages are not expunged from the subscription's backlog, even if they are acknowledged, until they fall out of the `message_retention_duration` window. This must be true if you would like to [`Seek` to a timestamp] (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time) in the past to replay previously-acknowledged messages.

        :param retain_acked_messages: The retain_acked_messages of this Subscription.
        :type retain_acked_messages: bool
        """

        self._retain_acked_messages = retain_acked_messages

    @property
    def retry_policy(self):
        """Gets the retry_policy of this Subscription.


        :return: The retry_policy of this Subscription.
        :rtype: RetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this Subscription.


        :param retry_policy: The retry_policy of this Subscription.
        :type retry_policy: RetryPolicy
        """

        self._retry_policy = retry_policy

    @property
    def state(self):
        """Gets the state of this Subscription.

        Output only. An output-only field indicating whether or not the subscription can receive messages.

        :return: The state of this Subscription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Subscription.

        Output only. An output-only field indicating whether or not the subscription can receive messages.

        :param state: The state of this Subscription.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "RESOURCE_ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def topic(self):
        """Gets the topic of this Subscription.

        Required. The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`. The value of this field will be `_deleted-topic_` if the topic has been deleted.

        :return: The topic of this Subscription.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Subscription.

        Required. The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`. The value of this field will be `_deleted-topic_` if the topic has been deleted.

        :param topic: The topic of this Subscription.
        :type topic: str
        """

        self._topic = topic

    @property
    def topic_message_retention_duration(self):
        """Gets the topic_message_retention_duration of this Subscription.

        Output only. Indicates the minimum duration for which a message is retained after it is published to the subscription's topic. If this field is set, messages published to the subscription's topic in the last `topic_message_retention_duration` are always available to subscribers. See the `message_retention_duration` field in `Topic`. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :return: The topic_message_retention_duration of this Subscription.
        :rtype: str
        """
        return self._topic_message_retention_duration

    @topic_message_retention_duration.setter
    def topic_message_retention_duration(self, topic_message_retention_duration):
        """Sets the topic_message_retention_duration of this Subscription.

        Output only. Indicates the minimum duration for which a message is retained after it is published to the subscription's topic. If this field is set, messages published to the subscription's topic in the last `topic_message_retention_duration` are always available to subscribers. See the `message_retention_duration` field in `Topic`. This field is set only in responses from the server; it is ignored if it is set in any requests.

        :param topic_message_retention_duration: The topic_message_retention_duration of this Subscription.
        :type topic_message_retention_duration: str
        """

        self._topic_message_retention_duration = topic_message_retention_duration
