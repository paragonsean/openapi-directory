# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.avro_config import AvroConfig
from openapi_server import util


class CloudStorageConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avro_config: AvroConfig=None, bucket: str=None, filename_prefix: str=None, filename_suffix: str=None, max_bytes: str=None, max_duration: str=None, service_account_email: str=None, state: str=None, text_config: object=None):
        """CloudStorageConfig - a model defined in OpenAPI

        :param avro_config: The avro_config of this CloudStorageConfig.
        :param bucket: The bucket of this CloudStorageConfig.
        :param filename_prefix: The filename_prefix of this CloudStorageConfig.
        :param filename_suffix: The filename_suffix of this CloudStorageConfig.
        :param max_bytes: The max_bytes of this CloudStorageConfig.
        :param max_duration: The max_duration of this CloudStorageConfig.
        :param service_account_email: The service_account_email of this CloudStorageConfig.
        :param state: The state of this CloudStorageConfig.
        :param text_config: The text_config of this CloudStorageConfig.
        """
        self.openapi_types = {
            'avro_config': AvroConfig,
            'bucket': str,
            'filename_prefix': str,
            'filename_suffix': str,
            'max_bytes': str,
            'max_duration': str,
            'service_account_email': str,
            'state': str,
            'text_config': object
        }

        self.attribute_map = {
            'avro_config': 'avroConfig',
            'bucket': 'bucket',
            'filename_prefix': 'filenamePrefix',
            'filename_suffix': 'filenameSuffix',
            'max_bytes': 'maxBytes',
            'max_duration': 'maxDuration',
            'service_account_email': 'serviceAccountEmail',
            'state': 'state',
            'text_config': 'textConfig'
        }

        self._avro_config = avro_config
        self._bucket = bucket
        self._filename_prefix = filename_prefix
        self._filename_suffix = filename_suffix
        self._max_bytes = max_bytes
        self._max_duration = max_duration
        self._service_account_email = service_account_email
        self._state = state
        self._text_config = text_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudStorageConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudStorageConfig of this CloudStorageConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avro_config(self):
        """Gets the avro_config of this CloudStorageConfig.


        :return: The avro_config of this CloudStorageConfig.
        :rtype: AvroConfig
        """
        return self._avro_config

    @avro_config.setter
    def avro_config(self, avro_config):
        """Sets the avro_config of this CloudStorageConfig.


        :param avro_config: The avro_config of this CloudStorageConfig.
        :type avro_config: AvroConfig
        """

        self._avro_config = avro_config

    @property
    def bucket(self):
        """Gets the bucket of this CloudStorageConfig.

        Required. User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like \"gs://\". See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).

        :return: The bucket of this CloudStorageConfig.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this CloudStorageConfig.

        Required. User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like \"gs://\". See the [bucket naming requirements] (https://cloud.google.com/storage/docs/buckets#naming).

        :param bucket: The bucket of this CloudStorageConfig.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def filename_prefix(self):
        """Gets the filename_prefix of this CloudStorageConfig.

        Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).

        :return: The filename_prefix of this CloudStorageConfig.
        :rtype: str
        """
        return self._filename_prefix

    @filename_prefix.setter
    def filename_prefix(self, filename_prefix):
        """Sets the filename_prefix of this CloudStorageConfig.

        Optional. User-provided prefix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming).

        :param filename_prefix: The filename_prefix of this CloudStorageConfig.
        :type filename_prefix: str
        """

        self._filename_prefix = filename_prefix

    @property
    def filename_suffix(self):
        """Gets the filename_suffix of this CloudStorageConfig.

        Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in \"/\".

        :return: The filename_suffix of this CloudStorageConfig.
        :rtype: str
        """
        return self._filename_suffix

    @filename_suffix.setter
    def filename_suffix(self, filename_suffix):
        """Sets the filename_suffix of this CloudStorageConfig.

        Optional. User-provided suffix for Cloud Storage filename. See the [object naming requirements](https://cloud.google.com/storage/docs/objects#naming). Must not end in \"/\".

        :param filename_suffix: The filename_suffix of this CloudStorageConfig.
        :type filename_suffix: str
        """

        self._filename_suffix = filename_suffix

    @property
    def max_bytes(self):
        """Gets the max_bytes of this CloudStorageConfig.

        Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.

        :return: The max_bytes of this CloudStorageConfig.
        :rtype: str
        """
        return self._max_bytes

    @max_bytes.setter
    def max_bytes(self, max_bytes):
        """Sets the max_bytes of this CloudStorageConfig.

        Optional. The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB. The max_bytes limit may be exceeded in cases where messages are larger than the limit.

        :param max_bytes: The max_bytes of this CloudStorageConfig.
        :type max_bytes: str
        """

        self._max_bytes = max_bytes

    @property
    def max_duration(self):
        """Gets the max_duration of this CloudStorageConfig.

        Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription's acknowledgement deadline.

        :return: The max_duration of this CloudStorageConfig.
        :rtype: str
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this CloudStorageConfig.

        Optional. The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes. May not exceed the subscription's acknowledgement deadline.

        :param max_duration: The max_duration of this CloudStorageConfig.
        :type max_duration: str
        """

        self._max_duration = max_duration

    @property
    def service_account_email(self):
        """Gets the service_account_email of this CloudStorageConfig.

        Optional. The service account to use to write to Cloud Storage. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.

        :return: The service_account_email of this CloudStorageConfig.
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this CloudStorageConfig.

        Optional. The service account to use to write to Cloud Storage. The subscription creator or updater that specifies this field must have `iam.serviceAccounts.actAs` permission on the service account. If not specified, the Pub/Sub [service agent](https://cloud.google.com/iam/docs/service-agents), service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com, is used.

        :param service_account_email: The service_account_email of this CloudStorageConfig.
        :type service_account_email: str
        """

        self._service_account_email = service_account_email

    @property
    def state(self):
        """Gets the state of this CloudStorageConfig.

        Output only. An output-only field that indicates whether or not the subscription can receive messages.

        :return: The state of this CloudStorageConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudStorageConfig.

        Output only. An output-only field that indicates whether or not the subscription can receive messages.

        :param state: The state of this CloudStorageConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "PERMISSION_DENIED", "NOT_FOUND", "IN_TRANSIT_LOCATION_RESTRICTION"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def text_config(self):
        """Gets the text_config of this CloudStorageConfig.

        Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.

        :return: The text_config of this CloudStorageConfig.
        :rtype: object
        """
        return self._text_config

    @text_config.setter
    def text_config(self, text_config):
        """Sets the text_config of this CloudStorageConfig.

        Configuration for writing message data in text format. Message payloads will be written to files as raw text, separated by a newline.

        :param text_config: The text_config of this CloudStorageConfig.
        :type text_config: object
        """

        self._text_config = text_config
