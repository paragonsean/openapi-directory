# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeadLetterPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dead_letter_topic: str=None, max_delivery_attempts: int=None):
        """DeadLetterPolicy - a model defined in OpenAPI

        :param dead_letter_topic: The dead_letter_topic of this DeadLetterPolicy.
        :param max_delivery_attempts: The max_delivery_attempts of this DeadLetterPolicy.
        """
        self.openapi_types = {
            'dead_letter_topic': str,
            'max_delivery_attempts': int
        }

        self.attribute_map = {
            'dead_letter_topic': 'deadLetterTopic',
            'max_delivery_attempts': 'maxDeliveryAttempts'
        }

        self._dead_letter_topic = dead_letter_topic
        self._max_delivery_attempts = max_delivery_attempts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeadLetterPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeadLetterPolicy of this DeadLetterPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dead_letter_topic(self):
        """Gets the dead_letter_topic of this DeadLetterPolicy.

        Optional. The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.

        :return: The dead_letter_topic of this DeadLetterPolicy.
        :rtype: str
        """
        return self._dead_letter_topic

    @dead_letter_topic.setter
    def dead_letter_topic(self, dead_letter_topic):
        """Sets the dead_letter_topic of this DeadLetterPolicy.

        Optional. The name of the topic to which dead letter messages should be published. Format is `projects/{project}/topics/{topic}`.The Pub/Sub service account associated with the enclosing subscription's parent project (i.e., service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have permission to Publish() to this topic. The operation will fail if the topic does not exist. Users should ensure that there is a subscription attached to this topic since messages published to a topic with no subscriptions are lost.

        :param dead_letter_topic: The dead_letter_topic of this DeadLetterPolicy.
        :type dead_letter_topic: str
        """

        self._dead_letter_topic = dead_letter_topic

    @property
    def max_delivery_attempts(self):
        """Gets the max_delivery_attempts of this DeadLetterPolicy.

        Optional. The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.

        :return: The max_delivery_attempts of this DeadLetterPolicy.
        :rtype: int
        """
        return self._max_delivery_attempts

    @max_delivery_attempts.setter
    def max_delivery_attempts(self, max_delivery_attempts):
        """Sets the max_delivery_attempts of this DeadLetterPolicy.

        Optional. The maximum number of delivery attempts for any message. The value must be between 5 and 100. The number of delivery attempts is defined as 1 + (the sum of number of NACKs and number of times the acknowledgement deadline has been exceeded for the message). A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that client libraries may automatically extend ack_deadlines. This field will be honored on a best effort basis. If this parameter is 0, a default value of 5 is used.

        :param max_delivery_attempts: The max_delivery_attempts of this DeadLetterPolicy.
        :type max_delivery_attempts: int
        """

        self._max_delivery_attempts = max_delivery_attempts
