# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageStoragePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_persistence_regions: List[str]=None, enforce_in_transit: bool=None):
        """MessageStoragePolicy - a model defined in OpenAPI

        :param allowed_persistence_regions: The allowed_persistence_regions of this MessageStoragePolicy.
        :param enforce_in_transit: The enforce_in_transit of this MessageStoragePolicy.
        """
        self.openapi_types = {
            'allowed_persistence_regions': List[str],
            'enforce_in_transit': bool
        }

        self.attribute_map = {
            'allowed_persistence_regions': 'allowedPersistenceRegions',
            'enforce_in_transit': 'enforceInTransit'
        }

        self._allowed_persistence_regions = allowed_persistence_regions
        self._enforce_in_transit = enforce_in_transit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageStoragePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageStoragePolicy of this MessageStoragePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_persistence_regions(self):
        """Gets the allowed_persistence_regions of this MessageStoragePolicy.

        Optional. A list of IDs of Google Cloud regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed Google Cloud regions (or running outside of Google Cloud altogether) are routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.

        :return: The allowed_persistence_regions of this MessageStoragePolicy.
        :rtype: List[str]
        """
        return self._allowed_persistence_regions

    @allowed_persistence_regions.setter
    def allowed_persistence_regions(self, allowed_persistence_regions):
        """Sets the allowed_persistence_regions of this MessageStoragePolicy.

        Optional. A list of IDs of Google Cloud regions where messages that are published to the topic may be persisted in storage. Messages published by publishers running in non-allowed Google Cloud regions (or running outside of Google Cloud altogether) are routed for storage in one of the allowed regions. An empty list means that no regions are allowed, and is not a valid configuration.

        :param allowed_persistence_regions: The allowed_persistence_regions of this MessageStoragePolicy.
        :type allowed_persistence_regions: List[str]
        """

        self._allowed_persistence_regions = allowed_persistence_regions

    @property
    def enforce_in_transit(self):
        """Gets the enforce_in_transit of this MessageStoragePolicy.

        Optional. If true, `allowed_persistence_regions` is also used to enforce in-transit guarantees for messages. That is, Pub/Sub will fail Publish operations on this topic and subscribe operations on any subscription attached to this topic in any region that is not in `allowed_persistence_regions`.

        :return: The enforce_in_transit of this MessageStoragePolicy.
        :rtype: bool
        """
        return self._enforce_in_transit

    @enforce_in_transit.setter
    def enforce_in_transit(self, enforce_in_transit):
        """Sets the enforce_in_transit of this MessageStoragePolicy.

        Optional. If true, `allowed_persistence_regions` is also used to enforce in-transit guarantees for messages. That is, Pub/Sub will fail Publish operations on this topic and subscribe operations on any subscription attached to this topic in any region that is not in `allowed_persistence_regions`.

        :param enforce_in_transit: The enforce_in_transit of this MessageStoragePolicy.
        :type enforce_in_transit: bool
        """

        self._enforce_in_transit = enforce_in_transit
