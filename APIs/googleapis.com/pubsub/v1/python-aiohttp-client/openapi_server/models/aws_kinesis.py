# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AwsKinesis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws_role_arn: str=None, consumer_arn: str=None, gcp_service_account: str=None, state: str=None, stream_arn: str=None):
        """AwsKinesis - a model defined in OpenAPI

        :param aws_role_arn: The aws_role_arn of this AwsKinesis.
        :param consumer_arn: The consumer_arn of this AwsKinesis.
        :param gcp_service_account: The gcp_service_account of this AwsKinesis.
        :param state: The state of this AwsKinesis.
        :param stream_arn: The stream_arn of this AwsKinesis.
        """
        self.openapi_types = {
            'aws_role_arn': str,
            'consumer_arn': str,
            'gcp_service_account': str,
            'state': str,
            'stream_arn': str
        }

        self.attribute_map = {
            'aws_role_arn': 'awsRoleArn',
            'consumer_arn': 'consumerArn',
            'gcp_service_account': 'gcpServiceAccount',
            'state': 'state',
            'stream_arn': 'streamArn'
        }

        self._aws_role_arn = aws_role_arn
        self._consumer_arn = consumer_arn
        self._gcp_service_account = gcp_service_account
        self._state = state
        self._stream_arn = stream_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsKinesis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsKinesis of this AwsKinesis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_role_arn(self):
        """Gets the aws_role_arn of this AwsKinesis.

        Required. AWS role ARN to be used for Federated Identity authentication with Kinesis. Check the Pub/Sub docs for how to set up this role and the required permissions that need to be attached to it.

        :return: The aws_role_arn of this AwsKinesis.
        :rtype: str
        """
        return self._aws_role_arn

    @aws_role_arn.setter
    def aws_role_arn(self, aws_role_arn):
        """Sets the aws_role_arn of this AwsKinesis.

        Required. AWS role ARN to be used for Federated Identity authentication with Kinesis. Check the Pub/Sub docs for how to set up this role and the required permissions that need to be attached to it.

        :param aws_role_arn: The aws_role_arn of this AwsKinesis.
        :type aws_role_arn: str
        """

        self._aws_role_arn = aws_role_arn

    @property
    def consumer_arn(self):
        """Gets the consumer_arn of this AwsKinesis.

        Required. The Kinesis consumer ARN to used for ingestion in Enhanced Fan-Out mode. The consumer must be already created and ready to be used.

        :return: The consumer_arn of this AwsKinesis.
        :rtype: str
        """
        return self._consumer_arn

    @consumer_arn.setter
    def consumer_arn(self, consumer_arn):
        """Sets the consumer_arn of this AwsKinesis.

        Required. The Kinesis consumer ARN to used for ingestion in Enhanced Fan-Out mode. The consumer must be already created and ready to be used.

        :param consumer_arn: The consumer_arn of this AwsKinesis.
        :type consumer_arn: str
        """

        self._consumer_arn = consumer_arn

    @property
    def gcp_service_account(self):
        """Gets the gcp_service_account of this AwsKinesis.

        Required. The GCP service account to be used for Federated Identity authentication with Kinesis (via a `AssumeRoleWithWebIdentity` call for the provided role). The `aws_role_arn` must be set up with `accounts.google.com:sub` equals to this service account number.

        :return: The gcp_service_account of this AwsKinesis.
        :rtype: str
        """
        return self._gcp_service_account

    @gcp_service_account.setter
    def gcp_service_account(self, gcp_service_account):
        """Sets the gcp_service_account of this AwsKinesis.

        Required. The GCP service account to be used for Federated Identity authentication with Kinesis (via a `AssumeRoleWithWebIdentity` call for the provided role). The `aws_role_arn` must be set up with `accounts.google.com:sub` equals to this service account number.

        :param gcp_service_account: The gcp_service_account of this AwsKinesis.
        :type gcp_service_account: str
        """

        self._gcp_service_account = gcp_service_account

    @property
    def state(self):
        """Gets the state of this AwsKinesis.

        Output only. An output-only field that indicates the state of the Kinesis ingestion source.

        :return: The state of this AwsKinesis.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AwsKinesis.

        Output only. An output-only field that indicates the state of the Kinesis ingestion source.

        :param state: The state of this AwsKinesis.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "KINESIS_PERMISSION_DENIED", "PUBLISH_PERMISSION_DENIED", "STREAM_NOT_FOUND", "CONSUMER_NOT_FOUND"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stream_arn(self):
        """Gets the stream_arn of this AwsKinesis.

        Required. The Kinesis stream ARN to ingest data from.

        :return: The stream_arn of this AwsKinesis.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this AwsKinesis.

        Required. The Kinesis stream ARN to ingest data from.

        :param stream_arn: The stream_arn of this AwsKinesis.
        :type stream_arn: str
        """

        self._stream_arn = stream_arn
