# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_schema import ModelSchema
from openapi_server import util


class ValidateMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, message: str=None, name: str=None, _schema: ModelSchema=None):
        """ValidateMessageRequest - a model defined in OpenAPI

        :param encoding: The encoding of this ValidateMessageRequest.
        :param message: The message of this ValidateMessageRequest.
        :param name: The name of this ValidateMessageRequest.
        :param _schema: The _schema of this ValidateMessageRequest.
        """
        self.openapi_types = {
            'encoding': str,
            'message': str,
            'name': str,
            '_schema': ModelSchema
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'message': 'message',
            'name': 'name',
            '_schema': 'schema'
        }

        self._encoding = encoding
        self._message = message
        self._name = name
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateMessageRequest of this ValidateMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this ValidateMessageRequest.

        The encoding expected for messages

        :return: The encoding of this ValidateMessageRequest.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this ValidateMessageRequest.

        The encoding expected for messages

        :param encoding: The encoding of this ValidateMessageRequest.
        :type encoding: str
        """
        allowed_values = ["ENCODING_UNSPECIFIED", "JSON", "BINARY"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def message(self):
        """Gets the message of this ValidateMessageRequest.

        Message to validate against the provided `schema_spec`.

        :return: The message of this ValidateMessageRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ValidateMessageRequest.

        Message to validate against the provided `schema_spec`.

        :param message: The message of this ValidateMessageRequest.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this ValidateMessageRequest.

        Name of the schema against which to validate. Format is `projects/{project}/schemas/{schema}`.

        :return: The name of this ValidateMessageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ValidateMessageRequest.

        Name of the schema against which to validate. Format is `projects/{project}/schemas/{schema}`.

        :param name: The name of this ValidateMessageRequest.
        :type name: str
        """

        self._name = name

    @property
    def _schema(self):
        """Gets the _schema of this ValidateMessageRequest.


        :return: The _schema of this ValidateMessageRequest.
        :rtype: ModelSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ValidateMessageRequest.


        :param _schema: The _schema of this ValidateMessageRequest.
        :type _schema: ModelSchema
        """

        self.__schema = _schema
