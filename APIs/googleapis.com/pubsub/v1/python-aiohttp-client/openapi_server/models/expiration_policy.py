# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpirationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ttl: str=None):
        """ExpirationPolicy - a model defined in OpenAPI

        :param ttl: The ttl of this ExpirationPolicy.
        """
        self.openapi_types = {
            'ttl': str
        }

        self.attribute_map = {
            'ttl': 'ttl'
        }

        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpirationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpirationPolicy of this ExpirationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ttl(self):
        """Gets the ttl of this ExpirationPolicy.

        Optional. Specifies the \"time-to-live\" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of \"activity\" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.

        :return: The ttl of this ExpirationPolicy.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this ExpirationPolicy.

        Optional. Specifies the \"time-to-live\" duration for an associated resource. The resource expires if it is not active for a period of `ttl`. The definition of \"activity\" depends on the type of the associated resource. The minimum and maximum allowed values for `ttl` depend on the type of the associated resource, as well. If `ttl` is not set, the associated resource never expires.

        :param ttl: The ttl of this ExpirationPolicy.
        :type ttl: str
        """

        self._ttl = ttl
