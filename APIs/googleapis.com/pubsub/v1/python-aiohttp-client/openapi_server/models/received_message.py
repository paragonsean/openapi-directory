# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pubsub_message import PubsubMessage
from openapi_server import util


class ReceivedMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_id: str=None, delivery_attempt: int=None, message: PubsubMessage=None):
        """ReceivedMessage - a model defined in OpenAPI

        :param ack_id: The ack_id of this ReceivedMessage.
        :param delivery_attempt: The delivery_attempt of this ReceivedMessage.
        :param message: The message of this ReceivedMessage.
        """
        self.openapi_types = {
            'ack_id': str,
            'delivery_attempt': int,
            'message': PubsubMessage
        }

        self.attribute_map = {
            'ack_id': 'ackId',
            'delivery_attempt': 'deliveryAttempt',
            'message': 'message'
        }

        self._ack_id = ack_id
        self._delivery_attempt = delivery_attempt
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceivedMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReceivedMessage of this ReceivedMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_id(self):
        """Gets the ack_id of this ReceivedMessage.

        Optional. This ID can be used to acknowledge the received message.

        :return: The ack_id of this ReceivedMessage.
        :rtype: str
        """
        return self._ack_id

    @ack_id.setter
    def ack_id(self, ack_id):
        """Sets the ack_id of this ReceivedMessage.

        Optional. This ID can be used to acknowledge the received message.

        :param ack_id: The ack_id of this ReceivedMessage.
        :type ack_id: str
        """

        self._ack_id = ack_id

    @property
    def delivery_attempt(self):
        """Gets the delivery_attempt of this ReceivedMessage.

        Optional. The approximate number of times that Pub/Sub has attempted to deliver the associated message to a subscriber. More precisely, this is 1 + (number of NACKs) + (number of ack_deadline exceeds) for this message. A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline exceeds event is whenever a message is not acknowledged within ack_deadline. Note that ack_deadline is initially Subscription.ackDeadlineSeconds, but may get extended automatically by the client library. Upon the first delivery of a given message, `delivery_attempt` will have a value of 1. The value is calculated at best effort and is approximate. If a DeadLetterPolicy is not set on the subscription, this will be 0.

        :return: The delivery_attempt of this ReceivedMessage.
        :rtype: int
        """
        return self._delivery_attempt

    @delivery_attempt.setter
    def delivery_attempt(self, delivery_attempt):
        """Sets the delivery_attempt of this ReceivedMessage.

        Optional. The approximate number of times that Pub/Sub has attempted to deliver the associated message to a subscriber. More precisely, this is 1 + (number of NACKs) + (number of ack_deadline exceeds) for this message. A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline exceeds event is whenever a message is not acknowledged within ack_deadline. Note that ack_deadline is initially Subscription.ackDeadlineSeconds, but may get extended automatically by the client library. Upon the first delivery of a given message, `delivery_attempt` will have a value of 1. The value is calculated at best effort and is approximate. If a DeadLetterPolicy is not set on the subscription, this will be 0.

        :param delivery_attempt: The delivery_attempt of this ReceivedMessage.
        :type delivery_attempt: int
        """

        self._delivery_attempt = delivery_attempt

    @property
    def message(self):
        """Gets the message of this ReceivedMessage.


        :return: The message of this ReceivedMessage.
        :rtype: PubsubMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReceivedMessage.


        :param message: The message of this ReceivedMessage.
        :type message: PubsubMessage
        """

        self._message = message
