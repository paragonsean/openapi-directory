# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Snapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expire_time: str=None, labels: Dict[str, str]=None, name: str=None, topic: str=None):
        """Snapshot - a model defined in OpenAPI

        :param expire_time: The expire_time of this Snapshot.
        :param labels: The labels of this Snapshot.
        :param name: The name of this Snapshot.
        :param topic: The topic of this Snapshot.
        """
        self.openapi_types = {
            'expire_time': str,
            'labels': Dict[str, str],
            'name': str,
            'topic': str
        }

        self.attribute_map = {
            'expire_time': 'expireTime',
            'labels': 'labels',
            'name': 'name',
            'topic': 'topic'
        }

        self._expire_time = expire_time
        self._labels = labels
        self._name = name
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snapshot of this Snapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expire_time(self):
        """Gets the expire_time of this Snapshot.

        Optional. The snapshot is guaranteed to exist up until this time. A newly-created snapshot expires no later than 7 days from the time of its creation. Its exact lifetime is determined at creation by the existing backlog in the source subscription. Specifically, the lifetime of the snapshot is `7 days - (age of oldest unacked message in the subscription)`. For example, consider a subscription whose oldest unacked message is 3 days old. If a snapshot is created from this subscription, the snapshot -- which will always capture this 3-day-old backlog as long as the snapshot exists -- will expire in 4 days. The service will refuse to create a snapshot that would expire in less than 1 hour after creation.

        :return: The expire_time of this Snapshot.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Snapshot.

        Optional. The snapshot is guaranteed to exist up until this time. A newly-created snapshot expires no later than 7 days from the time of its creation. Its exact lifetime is determined at creation by the existing backlog in the source subscription. Specifically, the lifetime of the snapshot is `7 days - (age of oldest unacked message in the subscription)`. For example, consider a subscription whose oldest unacked message is 3 days old. If a snapshot is created from this subscription, the snapshot -- which will always capture this 3-day-old backlog as long as the snapshot exists -- will expire in 4 days. The service will refuse to create a snapshot that would expire in less than 1 hour after creation.

        :param expire_time: The expire_time of this Snapshot.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def labels(self):
        """Gets the labels of this Snapshot.

        Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).

        :return: The labels of this Snapshot.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Snapshot.

        Optional. See [Creating and managing labels] (https://cloud.google.com/pubsub/docs/labels).

        :param labels: The labels of this Snapshot.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Snapshot.

        Optional. The name of the snapshot.

        :return: The name of this Snapshot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snapshot.

        Optional. The name of the snapshot.

        :param name: The name of this Snapshot.
        :type name: str
        """

        self._name = name

    @property
    def topic(self):
        """Gets the topic of this Snapshot.

        Optional. The name of the topic from which this snapshot is retaining messages.

        :return: The topic of this Snapshot.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Snapshot.

        Optional. The name of the topic from which this snapshot is retaining messages.

        :param topic: The topic of this Snapshot.
        :type topic: str
        """

        self._topic = topic
