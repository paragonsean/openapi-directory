/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_ack_deadline_seconds_isSet = false;
    m_ack_deadline_seconds_isValid = false;

    m_bigquery_config_isSet = false;
    m_bigquery_config_isValid = false;

    m_cloud_storage_config_isSet = false;
    m_cloud_storage_config_isValid = false;

    m_dead_letter_policy_isSet = false;
    m_dead_letter_policy_isValid = false;

    m_detached_isSet = false;
    m_detached_isValid = false;

    m_enable_exactly_once_delivery_isSet = false;
    m_enable_exactly_once_delivery_isValid = false;

    m_enable_message_ordering_isSet = false;
    m_enable_message_ordering_isValid = false;

    m_expiration_policy_isSet = false;
    m_expiration_policy_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_message_retention_duration_isSet = false;
    m_message_retention_duration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_push_config_isSet = false;
    m_push_config_isValid = false;

    m_retain_acked_messages_isSet = false;
    m_retain_acked_messages_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_topic_message_retention_duration_isSet = false;
    m_topic_message_retention_duration_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_ack_deadline_seconds_isValid = ::OpenAPI::fromJsonValue(m_ack_deadline_seconds, json[QString("ackDeadlineSeconds")]);
    m_ack_deadline_seconds_isSet = !json[QString("ackDeadlineSeconds")].isNull() && m_ack_deadline_seconds_isValid;

    m_bigquery_config_isValid = ::OpenAPI::fromJsonValue(m_bigquery_config, json[QString("bigqueryConfig")]);
    m_bigquery_config_isSet = !json[QString("bigqueryConfig")].isNull() && m_bigquery_config_isValid;

    m_cloud_storage_config_isValid = ::OpenAPI::fromJsonValue(m_cloud_storage_config, json[QString("cloudStorageConfig")]);
    m_cloud_storage_config_isSet = !json[QString("cloudStorageConfig")].isNull() && m_cloud_storage_config_isValid;

    m_dead_letter_policy_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_policy, json[QString("deadLetterPolicy")]);
    m_dead_letter_policy_isSet = !json[QString("deadLetterPolicy")].isNull() && m_dead_letter_policy_isValid;

    m_detached_isValid = ::OpenAPI::fromJsonValue(m_detached, json[QString("detached")]);
    m_detached_isSet = !json[QString("detached")].isNull() && m_detached_isValid;

    m_enable_exactly_once_delivery_isValid = ::OpenAPI::fromJsonValue(m_enable_exactly_once_delivery, json[QString("enableExactlyOnceDelivery")]);
    m_enable_exactly_once_delivery_isSet = !json[QString("enableExactlyOnceDelivery")].isNull() && m_enable_exactly_once_delivery_isValid;

    m_enable_message_ordering_isValid = ::OpenAPI::fromJsonValue(m_enable_message_ordering, json[QString("enableMessageOrdering")]);
    m_enable_message_ordering_isSet = !json[QString("enableMessageOrdering")].isNull() && m_enable_message_ordering_isValid;

    m_expiration_policy_isValid = ::OpenAPI::fromJsonValue(m_expiration_policy, json[QString("expirationPolicy")]);
    m_expiration_policy_isSet = !json[QString("expirationPolicy")].isNull() && m_expiration_policy_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_message_retention_duration_isValid = ::OpenAPI::fromJsonValue(m_message_retention_duration, json[QString("messageRetentionDuration")]);
    m_message_retention_duration_isSet = !json[QString("messageRetentionDuration")].isNull() && m_message_retention_duration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_push_config_isValid = ::OpenAPI::fromJsonValue(m_push_config, json[QString("pushConfig")]);
    m_push_config_isSet = !json[QString("pushConfig")].isNull() && m_push_config_isValid;

    m_retain_acked_messages_isValid = ::OpenAPI::fromJsonValue(m_retain_acked_messages, json[QString("retainAckedMessages")]);
    m_retain_acked_messages_isSet = !json[QString("retainAckedMessages")].isNull() && m_retain_acked_messages_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_topic_message_retention_duration_isValid = ::OpenAPI::fromJsonValue(m_topic_message_retention_duration, json[QString("topicMessageRetentionDuration")]);
    m_topic_message_retention_duration_isSet = !json[QString("topicMessageRetentionDuration")].isNull() && m_topic_message_retention_duration_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_ack_deadline_seconds_isSet) {
        obj.insert(QString("ackDeadlineSeconds"), ::OpenAPI::toJsonValue(m_ack_deadline_seconds));
    }
    if (m_bigquery_config.isSet()) {
        obj.insert(QString("bigqueryConfig"), ::OpenAPI::toJsonValue(m_bigquery_config));
    }
    if (m_cloud_storage_config.isSet()) {
        obj.insert(QString("cloudStorageConfig"), ::OpenAPI::toJsonValue(m_cloud_storage_config));
    }
    if (m_dead_letter_policy.isSet()) {
        obj.insert(QString("deadLetterPolicy"), ::OpenAPI::toJsonValue(m_dead_letter_policy));
    }
    if (m_detached_isSet) {
        obj.insert(QString("detached"), ::OpenAPI::toJsonValue(m_detached));
    }
    if (m_enable_exactly_once_delivery_isSet) {
        obj.insert(QString("enableExactlyOnceDelivery"), ::OpenAPI::toJsonValue(m_enable_exactly_once_delivery));
    }
    if (m_enable_message_ordering_isSet) {
        obj.insert(QString("enableMessageOrdering"), ::OpenAPI::toJsonValue(m_enable_message_ordering));
    }
    if (m_expiration_policy.isSet()) {
        obj.insert(QString("expirationPolicy"), ::OpenAPI::toJsonValue(m_expiration_policy));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_message_retention_duration_isSet) {
        obj.insert(QString("messageRetentionDuration"), ::OpenAPI::toJsonValue(m_message_retention_duration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_push_config.isSet()) {
        obj.insert(QString("pushConfig"), ::OpenAPI::toJsonValue(m_push_config));
    }
    if (m_retain_acked_messages_isSet) {
        obj.insert(QString("retainAckedMessages"), ::OpenAPI::toJsonValue(m_retain_acked_messages));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_topic_message_retention_duration_isSet) {
        obj.insert(QString("topicMessageRetentionDuration"), ::OpenAPI::toJsonValue(m_topic_message_retention_duration));
    }
    return obj;
}

qint32 OAISubscription::getAckDeadlineSeconds() const {
    return m_ack_deadline_seconds;
}
void OAISubscription::setAckDeadlineSeconds(const qint32 &ack_deadline_seconds) {
    m_ack_deadline_seconds = ack_deadline_seconds;
    m_ack_deadline_seconds_isSet = true;
}

bool OAISubscription::is_ack_deadline_seconds_Set() const{
    return m_ack_deadline_seconds_isSet;
}

bool OAISubscription::is_ack_deadline_seconds_Valid() const{
    return m_ack_deadline_seconds_isValid;
}

OAIBigQueryConfig OAISubscription::getBigqueryConfig() const {
    return m_bigquery_config;
}
void OAISubscription::setBigqueryConfig(const OAIBigQueryConfig &bigquery_config) {
    m_bigquery_config = bigquery_config;
    m_bigquery_config_isSet = true;
}

bool OAISubscription::is_bigquery_config_Set() const{
    return m_bigquery_config_isSet;
}

bool OAISubscription::is_bigquery_config_Valid() const{
    return m_bigquery_config_isValid;
}

OAICloudStorageConfig OAISubscription::getCloudStorageConfig() const {
    return m_cloud_storage_config;
}
void OAISubscription::setCloudStorageConfig(const OAICloudStorageConfig &cloud_storage_config) {
    m_cloud_storage_config = cloud_storage_config;
    m_cloud_storage_config_isSet = true;
}

bool OAISubscription::is_cloud_storage_config_Set() const{
    return m_cloud_storage_config_isSet;
}

bool OAISubscription::is_cloud_storage_config_Valid() const{
    return m_cloud_storage_config_isValid;
}

OAIDeadLetterPolicy OAISubscription::getDeadLetterPolicy() const {
    return m_dead_letter_policy;
}
void OAISubscription::setDeadLetterPolicy(const OAIDeadLetterPolicy &dead_letter_policy) {
    m_dead_letter_policy = dead_letter_policy;
    m_dead_letter_policy_isSet = true;
}

bool OAISubscription::is_dead_letter_policy_Set() const{
    return m_dead_letter_policy_isSet;
}

bool OAISubscription::is_dead_letter_policy_Valid() const{
    return m_dead_letter_policy_isValid;
}

bool OAISubscription::isDetached() const {
    return m_detached;
}
void OAISubscription::setDetached(const bool &detached) {
    m_detached = detached;
    m_detached_isSet = true;
}

bool OAISubscription::is_detached_Set() const{
    return m_detached_isSet;
}

bool OAISubscription::is_detached_Valid() const{
    return m_detached_isValid;
}

bool OAISubscription::isEnableExactlyOnceDelivery() const {
    return m_enable_exactly_once_delivery;
}
void OAISubscription::setEnableExactlyOnceDelivery(const bool &enable_exactly_once_delivery) {
    m_enable_exactly_once_delivery = enable_exactly_once_delivery;
    m_enable_exactly_once_delivery_isSet = true;
}

bool OAISubscription::is_enable_exactly_once_delivery_Set() const{
    return m_enable_exactly_once_delivery_isSet;
}

bool OAISubscription::is_enable_exactly_once_delivery_Valid() const{
    return m_enable_exactly_once_delivery_isValid;
}

bool OAISubscription::isEnableMessageOrdering() const {
    return m_enable_message_ordering;
}
void OAISubscription::setEnableMessageOrdering(const bool &enable_message_ordering) {
    m_enable_message_ordering = enable_message_ordering;
    m_enable_message_ordering_isSet = true;
}

bool OAISubscription::is_enable_message_ordering_Set() const{
    return m_enable_message_ordering_isSet;
}

bool OAISubscription::is_enable_message_ordering_Valid() const{
    return m_enable_message_ordering_isValid;
}

OAIExpirationPolicy OAISubscription::getExpirationPolicy() const {
    return m_expiration_policy;
}
void OAISubscription::setExpirationPolicy(const OAIExpirationPolicy &expiration_policy) {
    m_expiration_policy = expiration_policy;
    m_expiration_policy_isSet = true;
}

bool OAISubscription::is_expiration_policy_Set() const{
    return m_expiration_policy_isSet;
}

bool OAISubscription::is_expiration_policy_Valid() const{
    return m_expiration_policy_isValid;
}

QString OAISubscription::getFilter() const {
    return m_filter;
}
void OAISubscription::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISubscription::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISubscription::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap<QString, QString> OAISubscription::getLabels() const {
    return m_labels;
}
void OAISubscription::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISubscription::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISubscription::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISubscription::getMessageRetentionDuration() const {
    return m_message_retention_duration;
}
void OAISubscription::setMessageRetentionDuration(const QString &message_retention_duration) {
    m_message_retention_duration = message_retention_duration;
    m_message_retention_duration_isSet = true;
}

bool OAISubscription::is_message_retention_duration_Set() const{
    return m_message_retention_duration_isSet;
}

bool OAISubscription::is_message_retention_duration_Valid() const{
    return m_message_retention_duration_isValid;
}

QString OAISubscription::getName() const {
    return m_name;
}
void OAISubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscription::is_name_Valid() const{
    return m_name_isValid;
}

OAIPushConfig OAISubscription::getPushConfig() const {
    return m_push_config;
}
void OAISubscription::setPushConfig(const OAIPushConfig &push_config) {
    m_push_config = push_config;
    m_push_config_isSet = true;
}

bool OAISubscription::is_push_config_Set() const{
    return m_push_config_isSet;
}

bool OAISubscription::is_push_config_Valid() const{
    return m_push_config_isValid;
}

bool OAISubscription::isRetainAckedMessages() const {
    return m_retain_acked_messages;
}
void OAISubscription::setRetainAckedMessages(const bool &retain_acked_messages) {
    m_retain_acked_messages = retain_acked_messages;
    m_retain_acked_messages_isSet = true;
}

bool OAISubscription::is_retain_acked_messages_Set() const{
    return m_retain_acked_messages_isSet;
}

bool OAISubscription::is_retain_acked_messages_Valid() const{
    return m_retain_acked_messages_isValid;
}

OAIRetryPolicy OAISubscription::getRetryPolicy() const {
    return m_retry_policy;
}
void OAISubscription::setRetryPolicy(const OAIRetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAISubscription::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAISubscription::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

QString OAISubscription::getState() const {
    return m_state;
}
void OAISubscription::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscription::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscription::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubscription::getTopic() const {
    return m_topic;
}
void OAISubscription::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAISubscription::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAISubscription::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAISubscription::getTopicMessageRetentionDuration() const {
    return m_topic_message_retention_duration;
}
void OAISubscription::setTopicMessageRetentionDuration(const QString &topic_message_retention_duration) {
    m_topic_message_retention_duration = topic_message_retention_duration;
    m_topic_message_retention_duration_isSet = true;
}

bool OAISubscription::is_topic_message_retention_duration_Set() const{
    return m_topic_message_retention_duration_isSet;
}

bool OAISubscription::is_topic_message_retention_duration_Valid() const{
    return m_topic_message_retention_duration_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ack_deadline_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigquery_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_storage_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_exactly_once_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_message_ordering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_retention_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_acked_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_message_retention_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
