/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigQueryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigQueryConfig::OAIBigQueryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigQueryConfig::OAIBigQueryConfig() {
    this->initializeModel();
}

OAIBigQueryConfig::~OAIBigQueryConfig() {}

void OAIBigQueryConfig::initializeModel() {

    m_drop_unknown_fields_isSet = false;
    m_drop_unknown_fields_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_use_table_schema_isSet = false;
    m_use_table_schema_isValid = false;

    m_use_topic_schema_isSet = false;
    m_use_topic_schema_isValid = false;

    m_write_metadata_isSet = false;
    m_write_metadata_isValid = false;
}

void OAIBigQueryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigQueryConfig::fromJsonObject(QJsonObject json) {

    m_drop_unknown_fields_isValid = ::OpenAPI::fromJsonValue(m_drop_unknown_fields, json[QString("dropUnknownFields")]);
    m_drop_unknown_fields_isSet = !json[QString("dropUnknownFields")].isNull() && m_drop_unknown_fields_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_use_table_schema_isValid = ::OpenAPI::fromJsonValue(m_use_table_schema, json[QString("useTableSchema")]);
    m_use_table_schema_isSet = !json[QString("useTableSchema")].isNull() && m_use_table_schema_isValid;

    m_use_topic_schema_isValid = ::OpenAPI::fromJsonValue(m_use_topic_schema, json[QString("useTopicSchema")]);
    m_use_topic_schema_isSet = !json[QString("useTopicSchema")].isNull() && m_use_topic_schema_isValid;

    m_write_metadata_isValid = ::OpenAPI::fromJsonValue(m_write_metadata, json[QString("writeMetadata")]);
    m_write_metadata_isSet = !json[QString("writeMetadata")].isNull() && m_write_metadata_isValid;
}

QString OAIBigQueryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigQueryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_drop_unknown_fields_isSet) {
        obj.insert(QString("dropUnknownFields"), ::OpenAPI::toJsonValue(m_drop_unknown_fields));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_use_table_schema_isSet) {
        obj.insert(QString("useTableSchema"), ::OpenAPI::toJsonValue(m_use_table_schema));
    }
    if (m_use_topic_schema_isSet) {
        obj.insert(QString("useTopicSchema"), ::OpenAPI::toJsonValue(m_use_topic_schema));
    }
    if (m_write_metadata_isSet) {
        obj.insert(QString("writeMetadata"), ::OpenAPI::toJsonValue(m_write_metadata));
    }
    return obj;
}

bool OAIBigQueryConfig::isDropUnknownFields() const {
    return m_drop_unknown_fields;
}
void OAIBigQueryConfig::setDropUnknownFields(const bool &drop_unknown_fields) {
    m_drop_unknown_fields = drop_unknown_fields;
    m_drop_unknown_fields_isSet = true;
}

bool OAIBigQueryConfig::is_drop_unknown_fields_Set() const{
    return m_drop_unknown_fields_isSet;
}

bool OAIBigQueryConfig::is_drop_unknown_fields_Valid() const{
    return m_drop_unknown_fields_isValid;
}

QString OAIBigQueryConfig::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAIBigQueryConfig::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAIBigQueryConfig::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAIBigQueryConfig::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAIBigQueryConfig::getState() const {
    return m_state;
}
void OAIBigQueryConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBigQueryConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBigQueryConfig::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBigQueryConfig::getTable() const {
    return m_table;
}
void OAIBigQueryConfig::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIBigQueryConfig::is_table_Set() const{
    return m_table_isSet;
}

bool OAIBigQueryConfig::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIBigQueryConfig::isUseTableSchema() const {
    return m_use_table_schema;
}
void OAIBigQueryConfig::setUseTableSchema(const bool &use_table_schema) {
    m_use_table_schema = use_table_schema;
    m_use_table_schema_isSet = true;
}

bool OAIBigQueryConfig::is_use_table_schema_Set() const{
    return m_use_table_schema_isSet;
}

bool OAIBigQueryConfig::is_use_table_schema_Valid() const{
    return m_use_table_schema_isValid;
}

bool OAIBigQueryConfig::isUseTopicSchema() const {
    return m_use_topic_schema;
}
void OAIBigQueryConfig::setUseTopicSchema(const bool &use_topic_schema) {
    m_use_topic_schema = use_topic_schema;
    m_use_topic_schema_isSet = true;
}

bool OAIBigQueryConfig::is_use_topic_schema_Set() const{
    return m_use_topic_schema_isSet;
}

bool OAIBigQueryConfig::is_use_topic_schema_Valid() const{
    return m_use_topic_schema_isValid;
}

bool OAIBigQueryConfig::isWriteMetadata() const {
    return m_write_metadata;
}
void OAIBigQueryConfig::setWriteMetadata(const bool &write_metadata) {
    m_write_metadata = write_metadata;
    m_write_metadata_isSet = true;
}

bool OAIBigQueryConfig::is_write_metadata_Set() const{
    return m_write_metadata_isSet;
}

bool OAIBigQueryConfig::is_write_metadata_Valid() const{
    return m_write_metadata_isValid;
}

bool OAIBigQueryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drop_unknown_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_table_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_topic_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigQueryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
