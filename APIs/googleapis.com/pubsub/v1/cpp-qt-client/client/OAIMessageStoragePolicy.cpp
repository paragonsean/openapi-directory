/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStoragePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStoragePolicy::OAIMessageStoragePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStoragePolicy::OAIMessageStoragePolicy() {
    this->initializeModel();
}

OAIMessageStoragePolicy::~OAIMessageStoragePolicy() {}

void OAIMessageStoragePolicy::initializeModel() {

    m_allowed_persistence_regions_isSet = false;
    m_allowed_persistence_regions_isValid = false;

    m_enforce_in_transit_isSet = false;
    m_enforce_in_transit_isValid = false;
}

void OAIMessageStoragePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStoragePolicy::fromJsonObject(QJsonObject json) {

    m_allowed_persistence_regions_isValid = ::OpenAPI::fromJsonValue(m_allowed_persistence_regions, json[QString("allowedPersistenceRegions")]);
    m_allowed_persistence_regions_isSet = !json[QString("allowedPersistenceRegions")].isNull() && m_allowed_persistence_regions_isValid;

    m_enforce_in_transit_isValid = ::OpenAPI::fromJsonValue(m_enforce_in_transit, json[QString("enforceInTransit")]);
    m_enforce_in_transit_isSet = !json[QString("enforceInTransit")].isNull() && m_enforce_in_transit_isValid;
}

QString OAIMessageStoragePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStoragePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_persistence_regions.size() > 0) {
        obj.insert(QString("allowedPersistenceRegions"), ::OpenAPI::toJsonValue(m_allowed_persistence_regions));
    }
    if (m_enforce_in_transit_isSet) {
        obj.insert(QString("enforceInTransit"), ::OpenAPI::toJsonValue(m_enforce_in_transit));
    }
    return obj;
}

QList<QString> OAIMessageStoragePolicy::getAllowedPersistenceRegions() const {
    return m_allowed_persistence_regions;
}
void OAIMessageStoragePolicy::setAllowedPersistenceRegions(const QList<QString> &allowed_persistence_regions) {
    m_allowed_persistence_regions = allowed_persistence_regions;
    m_allowed_persistence_regions_isSet = true;
}

bool OAIMessageStoragePolicy::is_allowed_persistence_regions_Set() const{
    return m_allowed_persistence_regions_isSet;
}

bool OAIMessageStoragePolicy::is_allowed_persistence_regions_Valid() const{
    return m_allowed_persistence_regions_isValid;
}

bool OAIMessageStoragePolicy::isEnforceInTransit() const {
    return m_enforce_in_transit;
}
void OAIMessageStoragePolicy::setEnforceInTransit(const bool &enforce_in_transit) {
    m_enforce_in_transit = enforce_in_transit;
    m_enforce_in_transit_isSet = true;
}

bool OAIMessageStoragePolicy::is_enforce_in_transit_Set() const{
    return m_enforce_in_transit_isSet;
}

bool OAIMessageStoragePolicy::is_enforce_in_transit_Valid() const{
    return m_enforce_in_transit_isValid;
}

bool OAIMessageStoragePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_persistence_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_in_transit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStoragePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
