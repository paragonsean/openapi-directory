/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema::OAISchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema::OAISchema() {
    this->initializeModel();
}

OAISchema::~OAISchema() {}

void OAISchema::initializeModel() {

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revision_create_time_isSet = false;
    m_revision_create_time_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchema::fromJsonObject(QJsonObject json) {

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revision_create_time_isValid = ::OpenAPI::fromJsonValue(m_revision_create_time, json[QString("revisionCreateTime")]);
    m_revision_create_time_isSet = !json[QString("revisionCreateTime")].isNull() && m_revision_create_time_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchema::asJsonObject() const {
    QJsonObject obj;
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revision_create_time_isSet) {
        obj.insert(QString("revisionCreateTime"), ::OpenAPI::toJsonValue(m_revision_create_time));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISchema::getDefinition() const {
    return m_definition;
}
void OAISchema::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAISchema::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAISchema::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAISchema::getName() const {
    return m_name;
}
void OAISchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAISchema::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISchema::getRevisionCreateTime() const {
    return m_revision_create_time;
}
void OAISchema::setRevisionCreateTime(const QString &revision_create_time) {
    m_revision_create_time = revision_create_time;
    m_revision_create_time_isSet = true;
}

bool OAISchema::is_revision_create_time_Set() const{
    return m_revision_create_time_isSet;
}

bool OAISchema::is_revision_create_time_Valid() const{
    return m_revision_create_time_isValid;
}

QString OAISchema::getRevisionId() const {
    return m_revision_id;
}
void OAISchema::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAISchema::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAISchema::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAISchema::getType() const {
    return m_type;
}
void OAISchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
