/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaSettings::OAISchemaSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaSettings::OAISchemaSettings() {
    this->initializeModel();
}

OAISchemaSettings::~OAISchemaSettings() {}

void OAISchemaSettings::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_first_revision_id_isSet = false;
    m_first_revision_id_isValid = false;

    m_last_revision_id_isSet = false;
    m_last_revision_id_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAISchemaSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaSettings::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_first_revision_id_isValid = ::OpenAPI::fromJsonValue(m_first_revision_id, json[QString("firstRevisionId")]);
    m_first_revision_id_isSet = !json[QString("firstRevisionId")].isNull() && m_first_revision_id_isValid;

    m_last_revision_id_isValid = ::OpenAPI::fromJsonValue(m_last_revision_id, json[QString("lastRevisionId")]);
    m_last_revision_id_isSet = !json[QString("lastRevisionId")].isNull() && m_last_revision_id_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAISchemaSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_first_revision_id_isSet) {
        obj.insert(QString("firstRevisionId"), ::OpenAPI::toJsonValue(m_first_revision_id));
    }
    if (m_last_revision_id_isSet) {
        obj.insert(QString("lastRevisionId"), ::OpenAPI::toJsonValue(m_last_revision_id));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAISchemaSettings::getEncoding() const {
    return m_encoding;
}
void OAISchemaSettings::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAISchemaSettings::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAISchemaSettings::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAISchemaSettings::getFirstRevisionId() const {
    return m_first_revision_id;
}
void OAISchemaSettings::setFirstRevisionId(const QString &first_revision_id) {
    m_first_revision_id = first_revision_id;
    m_first_revision_id_isSet = true;
}

bool OAISchemaSettings::is_first_revision_id_Set() const{
    return m_first_revision_id_isSet;
}

bool OAISchemaSettings::is_first_revision_id_Valid() const{
    return m_first_revision_id_isValid;
}

QString OAISchemaSettings::getLastRevisionId() const {
    return m_last_revision_id;
}
void OAISchemaSettings::setLastRevisionId(const QString &last_revision_id) {
    m_last_revision_id = last_revision_id;
    m_last_revision_id_isSet = true;
}

bool OAISchemaSettings::is_last_revision_id_Set() const{
    return m_last_revision_id_isSet;
}

bool OAISchemaSettings::is_last_revision_id_Valid() const{
    return m_last_revision_id_isValid;
}

QString OAISchemaSettings::getSchema() const {
    return m_schema;
}
void OAISchemaSettings::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISchemaSettings::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISchemaSettings::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAISchemaSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
