/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeadLetterPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeadLetterPolicy::OAIDeadLetterPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeadLetterPolicy::OAIDeadLetterPolicy() {
    this->initializeModel();
}

OAIDeadLetterPolicy::~OAIDeadLetterPolicy() {}

void OAIDeadLetterPolicy::initializeModel() {

    m_dead_letter_topic_isSet = false;
    m_dead_letter_topic_isValid = false;

    m_max_delivery_attempts_isSet = false;
    m_max_delivery_attempts_isValid = false;
}

void OAIDeadLetterPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeadLetterPolicy::fromJsonObject(QJsonObject json) {

    m_dead_letter_topic_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_topic, json[QString("deadLetterTopic")]);
    m_dead_letter_topic_isSet = !json[QString("deadLetterTopic")].isNull() && m_dead_letter_topic_isValid;

    m_max_delivery_attempts_isValid = ::OpenAPI::fromJsonValue(m_max_delivery_attempts, json[QString("maxDeliveryAttempts")]);
    m_max_delivery_attempts_isSet = !json[QString("maxDeliveryAttempts")].isNull() && m_max_delivery_attempts_isValid;
}

QString OAIDeadLetterPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeadLetterPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_dead_letter_topic_isSet) {
        obj.insert(QString("deadLetterTopic"), ::OpenAPI::toJsonValue(m_dead_letter_topic));
    }
    if (m_max_delivery_attempts_isSet) {
        obj.insert(QString("maxDeliveryAttempts"), ::OpenAPI::toJsonValue(m_max_delivery_attempts));
    }
    return obj;
}

QString OAIDeadLetterPolicy::getDeadLetterTopic() const {
    return m_dead_letter_topic;
}
void OAIDeadLetterPolicy::setDeadLetterTopic(const QString &dead_letter_topic) {
    m_dead_letter_topic = dead_letter_topic;
    m_dead_letter_topic_isSet = true;
}

bool OAIDeadLetterPolicy::is_dead_letter_topic_Set() const{
    return m_dead_letter_topic_isSet;
}

bool OAIDeadLetterPolicy::is_dead_letter_topic_Valid() const{
    return m_dead_letter_topic_isValid;
}

qint32 OAIDeadLetterPolicy::getMaxDeliveryAttempts() const {
    return m_max_delivery_attempts;
}
void OAIDeadLetterPolicy::setMaxDeliveryAttempts(const qint32 &max_delivery_attempts) {
    m_max_delivery_attempts = max_delivery_attempts;
    m_max_delivery_attempts_isSet = true;
}

bool OAIDeadLetterPolicy::is_max_delivery_attempts_Set() const{
    return m_max_delivery_attempts_isSet;
}

bool OAIDeadLetterPolicy::is_max_delivery_attempts_Valid() const{
    return m_max_delivery_attempts_isValid;
}

bool OAIDeadLetterPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dead_letter_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_delivery_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeadLetterPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
