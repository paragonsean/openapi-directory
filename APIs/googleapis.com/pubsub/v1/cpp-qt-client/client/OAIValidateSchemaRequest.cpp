/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateSchemaRequest::OAIValidateSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateSchemaRequest::OAIValidateSchemaRequest() {
    this->initializeModel();
}

OAIValidateSchemaRequest::~OAIValidateSchemaRequest() {}

void OAIValidateSchemaRequest::initializeModel() {

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAIValidateSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateSchemaRequest::fromJsonObject(QJsonObject json) {

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAIValidateSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

OAISchema OAIValidateSchemaRequest::getSchema() const {
    return m_schema;
}
void OAIValidateSchemaRequest::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIValidateSchemaRequest::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIValidateSchemaRequest::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIValidateSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
