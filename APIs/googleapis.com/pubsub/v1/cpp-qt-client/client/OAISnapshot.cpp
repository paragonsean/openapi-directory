/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshot::OAISnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshot::OAISnapshot() {
    this->initializeModel();
}

OAISnapshot::~OAISnapshot() {}

void OAISnapshot::initializeModel() {

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAISnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshot::fromJsonObject(QJsonObject json) {

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAISnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QString OAISnapshot::getExpireTime() const {
    return m_expire_time;
}
void OAISnapshot::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAISnapshot::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAISnapshot::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QMap<QString, QString> OAISnapshot::getLabels() const {
    return m_labels;
}
void OAISnapshot::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISnapshot::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISnapshot::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISnapshot::getName() const {
    return m_name;
}
void OAISnapshot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISnapshot::is_name_Set() const{
    return m_name_isSet;
}

bool OAISnapshot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISnapshot::getTopic() const {
    return m_topic;
}
void OAISnapshot::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAISnapshot::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAISnapshot::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAISnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
