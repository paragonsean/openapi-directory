/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudStorageConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudStorageConfig::OAICloudStorageConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudStorageConfig::OAICloudStorageConfig() {
    this->initializeModel();
}

OAICloudStorageConfig::~OAICloudStorageConfig() {}

void OAICloudStorageConfig::initializeModel() {

    m_avro_config_isSet = false;
    m_avro_config_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_filename_prefix_isSet = false;
    m_filename_prefix_isValid = false;

    m_filename_suffix_isSet = false;
    m_filename_suffix_isValid = false;

    m_max_bytes_isSet = false;
    m_max_bytes_isValid = false;

    m_max_duration_isSet = false;
    m_max_duration_isValid = false;

    m_service_account_email_isSet = false;
    m_service_account_email_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_config_isSet = false;
    m_text_config_isValid = false;
}

void OAICloudStorageConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudStorageConfig::fromJsonObject(QJsonObject json) {

    m_avro_config_isValid = ::OpenAPI::fromJsonValue(m_avro_config, json[QString("avroConfig")]);
    m_avro_config_isSet = !json[QString("avroConfig")].isNull() && m_avro_config_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_filename_prefix_isValid = ::OpenAPI::fromJsonValue(m_filename_prefix, json[QString("filenamePrefix")]);
    m_filename_prefix_isSet = !json[QString("filenamePrefix")].isNull() && m_filename_prefix_isValid;

    m_filename_suffix_isValid = ::OpenAPI::fromJsonValue(m_filename_suffix, json[QString("filenameSuffix")]);
    m_filename_suffix_isSet = !json[QString("filenameSuffix")].isNull() && m_filename_suffix_isValid;

    m_max_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_bytes, json[QString("maxBytes")]);
    m_max_bytes_isSet = !json[QString("maxBytes")].isNull() && m_max_bytes_isValid;

    m_max_duration_isValid = ::OpenAPI::fromJsonValue(m_max_duration, json[QString("maxDuration")]);
    m_max_duration_isSet = !json[QString("maxDuration")].isNull() && m_max_duration_isValid;

    m_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_service_account_email, json[QString("serviceAccountEmail")]);
    m_service_account_email_isSet = !json[QString("serviceAccountEmail")].isNull() && m_service_account_email_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_config_isValid = ::OpenAPI::fromJsonValue(m_text_config, json[QString("textConfig")]);
    m_text_config_isSet = !json[QString("textConfig")].isNull() && m_text_config_isValid;
}

QString OAICloudStorageConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudStorageConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_avro_config.isSet()) {
        obj.insert(QString("avroConfig"), ::OpenAPI::toJsonValue(m_avro_config));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_filename_prefix_isSet) {
        obj.insert(QString("filenamePrefix"), ::OpenAPI::toJsonValue(m_filename_prefix));
    }
    if (m_filename_suffix_isSet) {
        obj.insert(QString("filenameSuffix"), ::OpenAPI::toJsonValue(m_filename_suffix));
    }
    if (m_max_bytes_isSet) {
        obj.insert(QString("maxBytes"), ::OpenAPI::toJsonValue(m_max_bytes));
    }
    if (m_max_duration_isSet) {
        obj.insert(QString("maxDuration"), ::OpenAPI::toJsonValue(m_max_duration));
    }
    if (m_service_account_email_isSet) {
        obj.insert(QString("serviceAccountEmail"), ::OpenAPI::toJsonValue(m_service_account_email));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_config_isSet) {
        obj.insert(QString("textConfig"), ::OpenAPI::toJsonValue(m_text_config));
    }
    return obj;
}

OAIAvroConfig OAICloudStorageConfig::getAvroConfig() const {
    return m_avro_config;
}
void OAICloudStorageConfig::setAvroConfig(const OAIAvroConfig &avro_config) {
    m_avro_config = avro_config;
    m_avro_config_isSet = true;
}

bool OAICloudStorageConfig::is_avro_config_Set() const{
    return m_avro_config_isSet;
}

bool OAICloudStorageConfig::is_avro_config_Valid() const{
    return m_avro_config_isValid;
}

QString OAICloudStorageConfig::getBucket() const {
    return m_bucket;
}
void OAICloudStorageConfig::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAICloudStorageConfig::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAICloudStorageConfig::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAICloudStorageConfig::getFilenamePrefix() const {
    return m_filename_prefix;
}
void OAICloudStorageConfig::setFilenamePrefix(const QString &filename_prefix) {
    m_filename_prefix = filename_prefix;
    m_filename_prefix_isSet = true;
}

bool OAICloudStorageConfig::is_filename_prefix_Set() const{
    return m_filename_prefix_isSet;
}

bool OAICloudStorageConfig::is_filename_prefix_Valid() const{
    return m_filename_prefix_isValid;
}

QString OAICloudStorageConfig::getFilenameSuffix() const {
    return m_filename_suffix;
}
void OAICloudStorageConfig::setFilenameSuffix(const QString &filename_suffix) {
    m_filename_suffix = filename_suffix;
    m_filename_suffix_isSet = true;
}

bool OAICloudStorageConfig::is_filename_suffix_Set() const{
    return m_filename_suffix_isSet;
}

bool OAICloudStorageConfig::is_filename_suffix_Valid() const{
    return m_filename_suffix_isValid;
}

QString OAICloudStorageConfig::getMaxBytes() const {
    return m_max_bytes;
}
void OAICloudStorageConfig::setMaxBytes(const QString &max_bytes) {
    m_max_bytes = max_bytes;
    m_max_bytes_isSet = true;
}

bool OAICloudStorageConfig::is_max_bytes_Set() const{
    return m_max_bytes_isSet;
}

bool OAICloudStorageConfig::is_max_bytes_Valid() const{
    return m_max_bytes_isValid;
}

QString OAICloudStorageConfig::getMaxDuration() const {
    return m_max_duration;
}
void OAICloudStorageConfig::setMaxDuration(const QString &max_duration) {
    m_max_duration = max_duration;
    m_max_duration_isSet = true;
}

bool OAICloudStorageConfig::is_max_duration_Set() const{
    return m_max_duration_isSet;
}

bool OAICloudStorageConfig::is_max_duration_Valid() const{
    return m_max_duration_isValid;
}

QString OAICloudStorageConfig::getServiceAccountEmail() const {
    return m_service_account_email;
}
void OAICloudStorageConfig::setServiceAccountEmail(const QString &service_account_email) {
    m_service_account_email = service_account_email;
    m_service_account_email_isSet = true;
}

bool OAICloudStorageConfig::is_service_account_email_Set() const{
    return m_service_account_email_isSet;
}

bool OAICloudStorageConfig::is_service_account_email_Valid() const{
    return m_service_account_email_isValid;
}

QString OAICloudStorageConfig::getState() const {
    return m_state;
}
void OAICloudStorageConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICloudStorageConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAICloudStorageConfig::is_state_Valid() const{
    return m_state_isValid;
}

OAIObject OAICloudStorageConfig::getTextConfig() const {
    return m_text_config;
}
void OAICloudStorageConfig::setTextConfig(const OAIObject &text_config) {
    m_text_config = text_config;
    m_text_config_isSet = true;
}

bool OAICloudStorageConfig::is_text_config_Set() const{
    return m_text_config_isSet;
}

bool OAICloudStorageConfig::is_text_config_Valid() const{
    return m_text_config_isValid;
}

bool OAICloudStorageConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avro_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudStorageConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
