/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateMessageRequest::OAIValidateMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateMessageRequest::OAIValidateMessageRequest() {
    this->initializeModel();
}

OAIValidateMessageRequest::~OAIValidateMessageRequest() {}

void OAIValidateMessageRequest::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAIValidateMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateMessageRequest::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAIValidateMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAIValidateMessageRequest::getEncoding() const {
    return m_encoding;
}
void OAIValidateMessageRequest::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIValidateMessageRequest::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIValidateMessageRequest::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QByteArray OAIValidateMessageRequest::getMessage() const {
    return m_message;
}
void OAIValidateMessageRequest::setMessage(const QByteArray &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIValidateMessageRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAIValidateMessageRequest::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIValidateMessageRequest::getName() const {
    return m_name;
}
void OAIValidateMessageRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIValidateMessageRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIValidateMessageRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAISchema OAIValidateMessageRequest::getSchema() const {
    return m_schema;
}
void OAIValidateMessageRequest::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIValidateMessageRequest::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIValidateMessageRequest::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIValidateMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
