/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubscription.h
 *
 * A subscription resource. If none of &#x60;push_config&#x60;, &#x60;bigquery_config&#x60;, or &#x60;cloud_storage_config&#x60; is set, then the subscriber will pull and ack messages using API methods. At most one of these fields may be set.
 */

#ifndef OAISubscription_H
#define OAISubscription_H

#include <QJsonObject>

#include "OAIBigQueryConfig.h"
#include "OAICloudStorageConfig.h"
#include "OAIDeadLetterPolicy.h"
#include "OAIExpirationPolicy.h"
#include "OAIPushConfig.h"
#include "OAIRetryPolicy.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigQueryConfig;
class OAICloudStorageConfig;
class OAIDeadLetterPolicy;
class OAIExpirationPolicy;
class OAIPushConfig;
class OAIRetryPolicy;

class OAISubscription : public OAIObject {
public:
    OAISubscription();
    OAISubscription(QString json);
    ~OAISubscription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAckDeadlineSeconds() const;
    void setAckDeadlineSeconds(const qint32 &ack_deadline_seconds);
    bool is_ack_deadline_seconds_Set() const;
    bool is_ack_deadline_seconds_Valid() const;

    OAIBigQueryConfig getBigqueryConfig() const;
    void setBigqueryConfig(const OAIBigQueryConfig &bigquery_config);
    bool is_bigquery_config_Set() const;
    bool is_bigquery_config_Valid() const;

    OAICloudStorageConfig getCloudStorageConfig() const;
    void setCloudStorageConfig(const OAICloudStorageConfig &cloud_storage_config);
    bool is_cloud_storage_config_Set() const;
    bool is_cloud_storage_config_Valid() const;

    OAIDeadLetterPolicy getDeadLetterPolicy() const;
    void setDeadLetterPolicy(const OAIDeadLetterPolicy &dead_letter_policy);
    bool is_dead_letter_policy_Set() const;
    bool is_dead_letter_policy_Valid() const;

    bool isDetached() const;
    void setDetached(const bool &detached);
    bool is_detached_Set() const;
    bool is_detached_Valid() const;

    bool isEnableExactlyOnceDelivery() const;
    void setEnableExactlyOnceDelivery(const bool &enable_exactly_once_delivery);
    bool is_enable_exactly_once_delivery_Set() const;
    bool is_enable_exactly_once_delivery_Valid() const;

    bool isEnableMessageOrdering() const;
    void setEnableMessageOrdering(const bool &enable_message_ordering);
    bool is_enable_message_ordering_Set() const;
    bool is_enable_message_ordering_Valid() const;

    OAIExpirationPolicy getExpirationPolicy() const;
    void setExpirationPolicy(const OAIExpirationPolicy &expiration_policy);
    bool is_expiration_policy_Set() const;
    bool is_expiration_policy_Valid() const;

    QString getFilter() const;
    void setFilter(const QString &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getMessageRetentionDuration() const;
    void setMessageRetentionDuration(const QString &message_retention_duration);
    bool is_message_retention_duration_Set() const;
    bool is_message_retention_duration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPushConfig getPushConfig() const;
    void setPushConfig(const OAIPushConfig &push_config);
    bool is_push_config_Set() const;
    bool is_push_config_Valid() const;

    bool isRetainAckedMessages() const;
    void setRetainAckedMessages(const bool &retain_acked_messages);
    bool is_retain_acked_messages_Set() const;
    bool is_retain_acked_messages_Valid() const;

    OAIRetryPolicy getRetryPolicy() const;
    void setRetryPolicy(const OAIRetryPolicy &retry_policy);
    bool is_retry_policy_Set() const;
    bool is_retry_policy_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTopic() const;
    void setTopic(const QString &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    QString getTopicMessageRetentionDuration() const;
    void setTopicMessageRetentionDuration(const QString &topic_message_retention_duration);
    bool is_topic_message_retention_duration_Set() const;
    bool is_topic_message_retention_duration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_ack_deadline_seconds;
    bool m_ack_deadline_seconds_isSet;
    bool m_ack_deadline_seconds_isValid;

    OAIBigQueryConfig m_bigquery_config;
    bool m_bigquery_config_isSet;
    bool m_bigquery_config_isValid;

    OAICloudStorageConfig m_cloud_storage_config;
    bool m_cloud_storage_config_isSet;
    bool m_cloud_storage_config_isValid;

    OAIDeadLetterPolicy m_dead_letter_policy;
    bool m_dead_letter_policy_isSet;
    bool m_dead_letter_policy_isValid;

    bool m_detached;
    bool m_detached_isSet;
    bool m_detached_isValid;

    bool m_enable_exactly_once_delivery;
    bool m_enable_exactly_once_delivery_isSet;
    bool m_enable_exactly_once_delivery_isValid;

    bool m_enable_message_ordering;
    bool m_enable_message_ordering_isSet;
    bool m_enable_message_ordering_isValid;

    OAIExpirationPolicy m_expiration_policy;
    bool m_expiration_policy_isSet;
    bool m_expiration_policy_isValid;

    QString m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_message_retention_duration;
    bool m_message_retention_duration_isSet;
    bool m_message_retention_duration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPushConfig m_push_config;
    bool m_push_config_isSet;
    bool m_push_config_isValid;

    bool m_retain_acked_messages;
    bool m_retain_acked_messages_isSet;
    bool m_retain_acked_messages_isValid;

    OAIRetryPolicy m_retry_policy;
    bool m_retry_policy_isSet;
    bool m_retry_policy_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;

    QString m_topic_message_retention_duration;
    bool m_topic_message_retention_duration_isSet;
    bool m_topic_message_retention_duration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubscription)

#endif // OAISubscription_H
