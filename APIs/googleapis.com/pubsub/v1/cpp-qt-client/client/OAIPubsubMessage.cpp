/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPubsubMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPubsubMessage::OAIPubsubMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPubsubMessage::OAIPubsubMessage() {
    this->initializeModel();
}

OAIPubsubMessage::~OAIPubsubMessage() {}

void OAIPubsubMessage::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_ordering_key_isSet = false;
    m_ordering_key_isValid = false;

    m_publish_time_isSet = false;
    m_publish_time_isValid = false;
}

void OAIPubsubMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPubsubMessage::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_ordering_key_isValid = ::OpenAPI::fromJsonValue(m_ordering_key, json[QString("orderingKey")]);
    m_ordering_key_isSet = !json[QString("orderingKey")].isNull() && m_ordering_key_isValid;

    m_publish_time_isValid = ::OpenAPI::fromJsonValue(m_publish_time, json[QString("publishTime")]);
    m_publish_time_isSet = !json[QString("publishTime")].isNull() && m_publish_time_isValid;
}

QString OAIPubsubMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPubsubMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_ordering_key_isSet) {
        obj.insert(QString("orderingKey"), ::OpenAPI::toJsonValue(m_ordering_key));
    }
    if (m_publish_time_isSet) {
        obj.insert(QString("publishTime"), ::OpenAPI::toJsonValue(m_publish_time));
    }
    return obj;
}

QMap<QString, QString> OAIPubsubMessage::getAttributes() const {
    return m_attributes;
}
void OAIPubsubMessage::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIPubsubMessage::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIPubsubMessage::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QByteArray OAIPubsubMessage::getData() const {
    return m_data;
}
void OAIPubsubMessage::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPubsubMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPubsubMessage::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPubsubMessage::getMessageId() const {
    return m_message_id;
}
void OAIPubsubMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIPubsubMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIPubsubMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIPubsubMessage::getOrderingKey() const {
    return m_ordering_key;
}
void OAIPubsubMessage::setOrderingKey(const QString &ordering_key) {
    m_ordering_key = ordering_key;
    m_ordering_key_isSet = true;
}

bool OAIPubsubMessage::is_ordering_key_Set() const{
    return m_ordering_key_isSet;
}

bool OAIPubsubMessage::is_ordering_key_Valid() const{
    return m_ordering_key_isValid;
}

QString OAIPubsubMessage::getPublishTime() const {
    return m_publish_time;
}
void OAIPubsubMessage::setPublishTime(const QString &publish_time) {
    m_publish_time = publish_time;
    m_publish_time_isSet = true;
}

bool OAIPubsubMessage::is_publish_time_Set() const{
    return m_publish_time_isSet;
}

bool OAIPubsubMessage::is_publish_time_Valid() const{
    return m_publish_time_isValid;
}

bool OAIPubsubMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordering_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPubsubMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
