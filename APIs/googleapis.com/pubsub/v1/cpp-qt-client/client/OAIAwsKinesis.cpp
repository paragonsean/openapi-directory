/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsKinesis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsKinesis::OAIAwsKinesis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsKinesis::OAIAwsKinesis() {
    this->initializeModel();
}

OAIAwsKinesis::~OAIAwsKinesis() {}

void OAIAwsKinesis::initializeModel() {

    m_aws_role_arn_isSet = false;
    m_aws_role_arn_isValid = false;

    m_consumer_arn_isSet = false;
    m_consumer_arn_isValid = false;

    m_gcp_service_account_isSet = false;
    m_gcp_service_account_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;
}

void OAIAwsKinesis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsKinesis::fromJsonObject(QJsonObject json) {

    m_aws_role_arn_isValid = ::OpenAPI::fromJsonValue(m_aws_role_arn, json[QString("awsRoleArn")]);
    m_aws_role_arn_isSet = !json[QString("awsRoleArn")].isNull() && m_aws_role_arn_isValid;

    m_consumer_arn_isValid = ::OpenAPI::fromJsonValue(m_consumer_arn, json[QString("consumerArn")]);
    m_consumer_arn_isSet = !json[QString("consumerArn")].isNull() && m_consumer_arn_isValid;

    m_gcp_service_account_isValid = ::OpenAPI::fromJsonValue(m_gcp_service_account, json[QString("gcpServiceAccount")]);
    m_gcp_service_account_isSet = !json[QString("gcpServiceAccount")].isNull() && m_gcp_service_account_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("streamArn")]);
    m_stream_arn_isSet = !json[QString("streamArn")].isNull() && m_stream_arn_isValid;
}

QString OAIAwsKinesis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsKinesis::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_role_arn_isSet) {
        obj.insert(QString("awsRoleArn"), ::OpenAPI::toJsonValue(m_aws_role_arn));
    }
    if (m_consumer_arn_isSet) {
        obj.insert(QString("consumerArn"), ::OpenAPI::toJsonValue(m_consumer_arn));
    }
    if (m_gcp_service_account_isSet) {
        obj.insert(QString("gcpServiceAccount"), ::OpenAPI::toJsonValue(m_gcp_service_account));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("streamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    return obj;
}

QString OAIAwsKinesis::getAwsRoleArn() const {
    return m_aws_role_arn;
}
void OAIAwsKinesis::setAwsRoleArn(const QString &aws_role_arn) {
    m_aws_role_arn = aws_role_arn;
    m_aws_role_arn_isSet = true;
}

bool OAIAwsKinesis::is_aws_role_arn_Set() const{
    return m_aws_role_arn_isSet;
}

bool OAIAwsKinesis::is_aws_role_arn_Valid() const{
    return m_aws_role_arn_isValid;
}

QString OAIAwsKinesis::getConsumerArn() const {
    return m_consumer_arn;
}
void OAIAwsKinesis::setConsumerArn(const QString &consumer_arn) {
    m_consumer_arn = consumer_arn;
    m_consumer_arn_isSet = true;
}

bool OAIAwsKinesis::is_consumer_arn_Set() const{
    return m_consumer_arn_isSet;
}

bool OAIAwsKinesis::is_consumer_arn_Valid() const{
    return m_consumer_arn_isValid;
}

QString OAIAwsKinesis::getGcpServiceAccount() const {
    return m_gcp_service_account;
}
void OAIAwsKinesis::setGcpServiceAccount(const QString &gcp_service_account) {
    m_gcp_service_account = gcp_service_account;
    m_gcp_service_account_isSet = true;
}

bool OAIAwsKinesis::is_gcp_service_account_Set() const{
    return m_gcp_service_account_isSet;
}

bool OAIAwsKinesis::is_gcp_service_account_Valid() const{
    return m_gcp_service_account_isValid;
}

QString OAIAwsKinesis::getState() const {
    return m_state;
}
void OAIAwsKinesis::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAwsKinesis::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAwsKinesis::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAwsKinesis::getStreamArn() const {
    return m_stream_arn;
}
void OAIAwsKinesis::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIAwsKinesis::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIAwsKinesis::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

bool OAIAwsKinesis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcp_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsKinesis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
