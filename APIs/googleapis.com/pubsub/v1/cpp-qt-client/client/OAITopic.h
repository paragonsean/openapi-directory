/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopic.h
 *
 * A topic resource.
 */

#ifndef OAITopic_H
#define OAITopic_H

#include <QJsonObject>

#include "OAIIngestionDataSourceSettings.h"
#include "OAIMessageStoragePolicy.h"
#include "OAISchemaSettings.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIngestionDataSourceSettings;
class OAIMessageStoragePolicy;
class OAISchemaSettings;

class OAITopic : public OAIObject {
public:
    OAITopic();
    OAITopic(QString json);
    ~OAITopic() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIngestionDataSourceSettings getIngestionDataSourceSettings() const;
    void setIngestionDataSourceSettings(const OAIIngestionDataSourceSettings &ingestion_data_source_settings);
    bool is_ingestion_data_source_settings_Set() const;
    bool is_ingestion_data_source_settings_Valid() const;

    QString getKmsKeyName() const;
    void setKmsKeyName(const QString &kms_key_name);
    bool is_kms_key_name_Set() const;
    bool is_kms_key_name_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getMessageRetentionDuration() const;
    void setMessageRetentionDuration(const QString &message_retention_duration);
    bool is_message_retention_duration_Set() const;
    bool is_message_retention_duration_Valid() const;

    OAIMessageStoragePolicy getMessageStoragePolicy() const;
    void setMessageStoragePolicy(const OAIMessageStoragePolicy &message_storage_policy);
    bool is_message_storage_policy_Set() const;
    bool is_message_storage_policy_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isSatisfiesPzs() const;
    void setSatisfiesPzs(const bool &satisfies_pzs);
    bool is_satisfies_pzs_Set() const;
    bool is_satisfies_pzs_Valid() const;

    OAISchemaSettings getSchemaSettings() const;
    void setSchemaSettings(const OAISchemaSettings &schema_settings);
    bool is_schema_settings_Set() const;
    bool is_schema_settings_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIngestionDataSourceSettings m_ingestion_data_source_settings;
    bool m_ingestion_data_source_settings_isSet;
    bool m_ingestion_data_source_settings_isValid;

    QString m_kms_key_name;
    bool m_kms_key_name_isSet;
    bool m_kms_key_name_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_message_retention_duration;
    bool m_message_retention_duration_isSet;
    bool m_message_retention_duration_isValid;

    OAIMessageStoragePolicy m_message_storage_policy;
    bool m_message_storage_policy_isSet;
    bool m_message_storage_policy_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_satisfies_pzs;
    bool m_satisfies_pzs_isSet;
    bool m_satisfies_pzs_isValid;

    OAISchemaSettings m_schema_settings;
    bool m_schema_settings_isSet;
    bool m_schema_settings_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopic)

#endif // OAITopic_H
