/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopic::OAITopic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopic::OAITopic() {
    this->initializeModel();
}

OAITopic::~OAITopic() {}

void OAITopic::initializeModel() {

    m_ingestion_data_source_settings_isSet = false;
    m_ingestion_data_source_settings_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_message_retention_duration_isSet = false;
    m_message_retention_duration_isValid = false;

    m_message_storage_policy_isSet = false;
    m_message_storage_policy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_schema_settings_isSet = false;
    m_schema_settings_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAITopic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopic::fromJsonObject(QJsonObject json) {

    m_ingestion_data_source_settings_isValid = ::OpenAPI::fromJsonValue(m_ingestion_data_source_settings, json[QString("ingestionDataSourceSettings")]);
    m_ingestion_data_source_settings_isSet = !json[QString("ingestionDataSourceSettings")].isNull() && m_ingestion_data_source_settings_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_message_retention_duration_isValid = ::OpenAPI::fromJsonValue(m_message_retention_duration, json[QString("messageRetentionDuration")]);
    m_message_retention_duration_isSet = !json[QString("messageRetentionDuration")].isNull() && m_message_retention_duration_isValid;

    m_message_storage_policy_isValid = ::OpenAPI::fromJsonValue(m_message_storage_policy, json[QString("messageStoragePolicy")]);
    m_message_storage_policy_isSet = !json[QString("messageStoragePolicy")].isNull() && m_message_storage_policy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_schema_settings_isValid = ::OpenAPI::fromJsonValue(m_schema_settings, json[QString("schemaSettings")]);
    m_schema_settings_isSet = !json[QString("schemaSettings")].isNull() && m_schema_settings_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAITopic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopic::asJsonObject() const {
    QJsonObject obj;
    if (m_ingestion_data_source_settings.isSet()) {
        obj.insert(QString("ingestionDataSourceSettings"), ::OpenAPI::toJsonValue(m_ingestion_data_source_settings));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_message_retention_duration_isSet) {
        obj.insert(QString("messageRetentionDuration"), ::OpenAPI::toJsonValue(m_message_retention_duration));
    }
    if (m_message_storage_policy.isSet()) {
        obj.insert(QString("messageStoragePolicy"), ::OpenAPI::toJsonValue(m_message_storage_policy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_schema_settings.isSet()) {
        obj.insert(QString("schemaSettings"), ::OpenAPI::toJsonValue(m_schema_settings));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIIngestionDataSourceSettings OAITopic::getIngestionDataSourceSettings() const {
    return m_ingestion_data_source_settings;
}
void OAITopic::setIngestionDataSourceSettings(const OAIIngestionDataSourceSettings &ingestion_data_source_settings) {
    m_ingestion_data_source_settings = ingestion_data_source_settings;
    m_ingestion_data_source_settings_isSet = true;
}

bool OAITopic::is_ingestion_data_source_settings_Set() const{
    return m_ingestion_data_source_settings_isSet;
}

bool OAITopic::is_ingestion_data_source_settings_Valid() const{
    return m_ingestion_data_source_settings_isValid;
}

QString OAITopic::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAITopic::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAITopic::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAITopic::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QMap<QString, QString> OAITopic::getLabels() const {
    return m_labels;
}
void OAITopic::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITopic::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITopic::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAITopic::getMessageRetentionDuration() const {
    return m_message_retention_duration;
}
void OAITopic::setMessageRetentionDuration(const QString &message_retention_duration) {
    m_message_retention_duration = message_retention_duration;
    m_message_retention_duration_isSet = true;
}

bool OAITopic::is_message_retention_duration_Set() const{
    return m_message_retention_duration_isSet;
}

bool OAITopic::is_message_retention_duration_Valid() const{
    return m_message_retention_duration_isValid;
}

OAIMessageStoragePolicy OAITopic::getMessageStoragePolicy() const {
    return m_message_storage_policy;
}
void OAITopic::setMessageStoragePolicy(const OAIMessageStoragePolicy &message_storage_policy) {
    m_message_storage_policy = message_storage_policy;
    m_message_storage_policy_isSet = true;
}

bool OAITopic::is_message_storage_policy_Set() const{
    return m_message_storage_policy_isSet;
}

bool OAITopic::is_message_storage_policy_Valid() const{
    return m_message_storage_policy_isValid;
}

QString OAITopic::getName() const {
    return m_name;
}
void OAITopic::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITopic::is_name_Set() const{
    return m_name_isSet;
}

bool OAITopic::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITopic::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAITopic::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAITopic::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAITopic::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

OAISchemaSettings OAITopic::getSchemaSettings() const {
    return m_schema_settings;
}
void OAITopic::setSchemaSettings(const OAISchemaSettings &schema_settings) {
    m_schema_settings = schema_settings;
    m_schema_settings_isSet = true;
}

bool OAITopic::is_schema_settings_Set() const{
    return m_schema_settings_isSet;
}

bool OAITopic::is_schema_settings_Valid() const{
    return m_schema_settings_isValid;
}

QString OAITopic::getState() const {
    return m_state;
}
void OAITopic::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITopic::is_state_Set() const{
    return m_state_isSet;
}

bool OAITopic::is_state_Valid() const{
    return m_state_isValid;
}

bool OAITopic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingestion_data_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_retention_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_storage_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
