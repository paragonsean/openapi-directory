/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryPolicy::OAIRetryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryPolicy::OAIRetryPolicy() {
    this->initializeModel();
}

OAIRetryPolicy::~OAIRetryPolicy() {}

void OAIRetryPolicy::initializeModel() {

    m_maximum_backoff_isSet = false;
    m_maximum_backoff_isValid = false;

    m_minimum_backoff_isSet = false;
    m_minimum_backoff_isValid = false;
}

void OAIRetryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryPolicy::fromJsonObject(QJsonObject json) {

    m_maximum_backoff_isValid = ::OpenAPI::fromJsonValue(m_maximum_backoff, json[QString("maximumBackoff")]);
    m_maximum_backoff_isSet = !json[QString("maximumBackoff")].isNull() && m_maximum_backoff_isValid;

    m_minimum_backoff_isValid = ::OpenAPI::fromJsonValue(m_minimum_backoff, json[QString("minimumBackoff")]);
    m_minimum_backoff_isSet = !json[QString("minimumBackoff")].isNull() && m_minimum_backoff_isValid;
}

QString OAIRetryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_backoff_isSet) {
        obj.insert(QString("maximumBackoff"), ::OpenAPI::toJsonValue(m_maximum_backoff));
    }
    if (m_minimum_backoff_isSet) {
        obj.insert(QString("minimumBackoff"), ::OpenAPI::toJsonValue(m_minimum_backoff));
    }
    return obj;
}

QString OAIRetryPolicy::getMaximumBackoff() const {
    return m_maximum_backoff;
}
void OAIRetryPolicy::setMaximumBackoff(const QString &maximum_backoff) {
    m_maximum_backoff = maximum_backoff;
    m_maximum_backoff_isSet = true;
}

bool OAIRetryPolicy::is_maximum_backoff_Set() const{
    return m_maximum_backoff_isSet;
}

bool OAIRetryPolicy::is_maximum_backoff_Valid() const{
    return m_maximum_backoff_isValid;
}

QString OAIRetryPolicy::getMinimumBackoff() const {
    return m_minimum_backoff;
}
void OAIRetryPolicy::setMinimumBackoff(const QString &minimum_backoff) {
    m_minimum_backoff = minimum_backoff;
    m_minimum_backoff_isSet = true;
}

bool OAIRetryPolicy::is_minimum_backoff_Set() const{
    return m_minimum_backoff_isSet;
}

bool OAIRetryPolicy::is_minimum_backoff_Valid() const{
    return m_minimum_backoff_isValid;
}

bool OAIRetryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_backoff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_backoff_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
