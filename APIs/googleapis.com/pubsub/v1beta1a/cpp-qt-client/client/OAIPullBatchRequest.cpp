/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullBatchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullBatchRequest::OAIPullBatchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullBatchRequest::OAIPullBatchRequest() {
    this->initializeModel();
}

OAIPullBatchRequest::~OAIPullBatchRequest() {}

void OAIPullBatchRequest::initializeModel() {

    m_max_events_isSet = false;
    m_max_events_isValid = false;

    m_return_immediately_isSet = false;
    m_return_immediately_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAIPullBatchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullBatchRequest::fromJsonObject(QJsonObject json) {

    m_max_events_isValid = ::OpenAPI::fromJsonValue(m_max_events, json[QString("maxEvents")]);
    m_max_events_isSet = !json[QString("maxEvents")].isNull() && m_max_events_isValid;

    m_return_immediately_isValid = ::OpenAPI::fromJsonValue(m_return_immediately, json[QString("returnImmediately")]);
    m_return_immediately_isSet = !json[QString("returnImmediately")].isNull() && m_return_immediately_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;
}

QString OAIPullBatchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullBatchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_events_isSet) {
        obj.insert(QString("maxEvents"), ::OpenAPI::toJsonValue(m_max_events));
    }
    if (m_return_immediately_isSet) {
        obj.insert(QString("returnImmediately"), ::OpenAPI::toJsonValue(m_return_immediately));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

qint32 OAIPullBatchRequest::getMaxEvents() const {
    return m_max_events;
}
void OAIPullBatchRequest::setMaxEvents(const qint32 &max_events) {
    m_max_events = max_events;
    m_max_events_isSet = true;
}

bool OAIPullBatchRequest::is_max_events_Set() const{
    return m_max_events_isSet;
}

bool OAIPullBatchRequest::is_max_events_Valid() const{
    return m_max_events_isValid;
}

bool OAIPullBatchRequest::isReturnImmediately() const {
    return m_return_immediately;
}
void OAIPullBatchRequest::setReturnImmediately(const bool &return_immediately) {
    m_return_immediately = return_immediately;
    m_return_immediately_isSet = true;
}

bool OAIPullBatchRequest::is_return_immediately_Set() const{
    return m_return_immediately_isSet;
}

bool OAIPullBatchRequest::is_return_immediately_Valid() const{
    return m_return_immediately_isValid;
}

QString OAIPullBatchRequest::getSubscription() const {
    return m_subscription;
}
void OAIPullBatchRequest::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIPullBatchRequest::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIPullBatchRequest::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIPullBatchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_immediately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullBatchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
