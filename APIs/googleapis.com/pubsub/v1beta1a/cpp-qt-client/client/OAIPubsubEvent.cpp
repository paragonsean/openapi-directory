/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPubsubEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPubsubEvent::OAIPubsubEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPubsubEvent::OAIPubsubEvent() {
    this->initializeModel();
}

OAIPubsubEvent::~OAIPubsubEvent() {}

void OAIPubsubEvent::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;
}

void OAIPubsubEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPubsubEvent::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;
}

QString OAIPubsubEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPubsubEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    return obj;
}

bool OAIPubsubEvent::isDeleted() const {
    return m_deleted;
}
void OAIPubsubEvent::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIPubsubEvent::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIPubsubEvent::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIPubsubMessage OAIPubsubEvent::getMessage() const {
    return m_message;
}
void OAIPubsubEvent::setMessage(const OAIPubsubMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPubsubEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPubsubEvent::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPubsubEvent::getSubscription() const {
    return m_subscription;
}
void OAIPubsubEvent::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIPubsubEvent::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIPubsubEvent::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIPubsubEvent::isTruncated() const {
    return m_truncated;
}
void OAIPubsubEvent::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIPubsubEvent::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIPubsubEvent::is_truncated_Valid() const{
    return m_truncated_isValid;
}

bool OAIPubsubEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPubsubEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
