/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullRequest::OAIPullRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullRequest::OAIPullRequest() {
    this->initializeModel();
}

OAIPullRequest::~OAIPullRequest() {}

void OAIPullRequest::initializeModel() {

    m_return_immediately_isSet = false;
    m_return_immediately_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAIPullRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullRequest::fromJsonObject(QJsonObject json) {

    m_return_immediately_isValid = ::OpenAPI::fromJsonValue(m_return_immediately, json[QString("returnImmediately")]);
    m_return_immediately_isSet = !json[QString("returnImmediately")].isNull() && m_return_immediately_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;
}

QString OAIPullRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_return_immediately_isSet) {
        obj.insert(QString("returnImmediately"), ::OpenAPI::toJsonValue(m_return_immediately));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

bool OAIPullRequest::isReturnImmediately() const {
    return m_return_immediately;
}
void OAIPullRequest::setReturnImmediately(const bool &return_immediately) {
    m_return_immediately = return_immediately;
    m_return_immediately_isSet = true;
}

bool OAIPullRequest::is_return_immediately_Set() const{
    return m_return_immediately_isSet;
}

bool OAIPullRequest::is_return_immediately_Valid() const{
    return m_return_immediately_isValid;
}

QString OAIPullRequest::getSubscription() const {
    return m_subscription;
}
void OAIPullRequest::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIPullRequest::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIPullRequest::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIPullRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_immediately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
