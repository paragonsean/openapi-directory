/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A key-value pair applied to a given object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:52.662594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Label {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NUM_VALUE = "numValue";
  @SerializedName(SERIALIZED_NAME_NUM_VALUE)
  private String numValue;

  public static final String SERIALIZED_NAME_STR_VALUE = "strValue";
  @SerializedName(SERIALIZED_NAME_STR_VALUE)
  private String strValue;

  public Label() {
  }

  public Label key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The key of a label is a syntactically valid URL (as per RFC 1738) with the \&quot;scheme\&quot; and initial slashes omitted and with the additional restrictions noted below. Each key should be globally unique. The \&quot;host\&quot; portion is called the \&quot;namespace\&quot; and is not necessarily resolvable to a network endpoint. Instead, the namespace indicates what system or entity defines the semantics of the label. Namespaces do not restrict the set of objects to which a label may be associated. Keys are defined by the following grammar: key &#x3D; hostname \&quot;/\&quot; kpath kpath &#x3D; ksegment *[ \&quot;/\&quot; ksegment ] ksegment &#x3D; alphadigit | *[ alphadigit | \&quot;-\&quot; | \&quot;_\&quot; | \&quot;.\&quot; ] where \&quot;hostname\&quot; and \&quot;alphadigit\&quot; are defined as in RFC 1738. Example key: spanner.google.com/universe
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Label numValue(String numValue) {
    this.numValue = numValue;
    return this;
  }

  /**
   * An integer value.
   * @return numValue
   */
  @javax.annotation.Nullable
  public String getNumValue() {
    return numValue;
  }

  public void setNumValue(String numValue) {
    this.numValue = numValue;
  }


  public Label strValue(String strValue) {
    this.strValue = strValue;
    return this;
  }

  /**
   * A string value.
   * @return strValue
   */
  @javax.annotation.Nullable
  public String getStrValue() {
    return strValue;
  }

  public void setStrValue(String strValue) {
    this.strValue = strValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Label label = (Label) o;
    return Objects.equals(this.key, label.key) &&
        Objects.equals(this.numValue, label.numValue) &&
        Objects.equals(this.strValue, label.strValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, numValue, strValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Label {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    numValue: ").append(toIndentedString(numValue)).append("\n");
    sb.append("    strValue: ").append(toIndentedString(strValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("numValue");
    openapiFields.add("strValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Label
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Label.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Label is not found in the empty JSON string", Label.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Label.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Label` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("numValue") != null && !jsonObj.get("numValue").isJsonNull()) && !jsonObj.get("numValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numValue").toString()));
      }
      if ((jsonObj.get("strValue") != null && !jsonObj.get("strValue").isJsonNull()) && !jsonObj.get("strValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Label.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Label' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Label> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Label.class));

       return (TypeAdapter<T>) new TypeAdapter<Label>() {
           @Override
           public void write(JsonWriter out, Label value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Label read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Label given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Label
   * @throws IOException if the JSON string is invalid with respect to Label
   */
  public static Label fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Label.class);
  }

  /**
   * Convert an instance of Label to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

