/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Label;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message data and its labels.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:52.662594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PubsubMessage {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private byte[] data;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private List<Label> label = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_PUBLISH_TIME = "publishTime";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TIME)
  private String publishTime;

  public PubsubMessage() {
  }

  public PubsubMessage data(byte[] data) {
    this.data = data;
    return this;
  }

  /**
   * The message payload.
   * @return data
   */
  @javax.annotation.Nullable
  public byte[] getData() {
    return data;
  }

  public void setData(byte[] data) {
    this.data = data;
  }


  public PubsubMessage label(List<Label> label) {
    this.label = label;
    return this;
  }

  public PubsubMessage addLabelItem(Label labelItem) {
    if (this.label == null) {
      this.label = new ArrayList<>();
    }
    this.label.add(labelItem);
    return this;
  }

  /**
   * Optional list of labels for this message. Keys in this collection must be unique.
   * @return label
   */
  @javax.annotation.Nullable
  public List<Label> getLabel() {
    return label;
  }

  public void setLabel(List<Label> label) {
    this.label = label;
  }


  public PubsubMessage messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * ID of this message assigned by the server at publication time. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a PubsubMessage via a Pull call or a push delivery. It must not be populated by a publisher in a Publish call.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public PubsubMessage publishTime(String publishTime) {
    this.publishTime = publishTime;
    return this;
  }

  /**
   * The time at which the message was published. The time is milliseconds since the UNIX epoch.
   * @return publishTime
   */
  @javax.annotation.Nullable
  public String getPublishTime() {
    return publishTime;
  }

  public void setPublishTime(String publishTime) {
    this.publishTime = publishTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PubsubMessage pubsubMessage = (PubsubMessage) o;
    return Arrays.equals(this.data, pubsubMessage.data) &&
        Objects.equals(this.label, pubsubMessage.label) &&
        Objects.equals(this.messageId, pubsubMessage.messageId) &&
        Objects.equals(this.publishTime, pubsubMessage.publishTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(data), label, messageId, publishTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PubsubMessage {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    publishTime: ").append(toIndentedString(publishTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("label");
    openapiFields.add("messageId");
    openapiFields.add("publishTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PubsubMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PubsubMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PubsubMessage is not found in the empty JSON string", PubsubMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PubsubMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PubsubMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        JsonArray jsonArraylabel = jsonObj.getAsJsonArray("label");
        if (jsonArraylabel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("label").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `label` to be an array in the JSON string but got `%s`", jsonObj.get("label").toString()));
          }

          // validate the optional field `label` (array)
          for (int i = 0; i < jsonArraylabel.size(); i++) {
            Label.validateJsonElement(jsonArraylabel.get(i));
          };
        }
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("publishTime") != null && !jsonObj.get("publishTime").isJsonNull()) && !jsonObj.get("publishTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PubsubMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PubsubMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PubsubMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PubsubMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<PubsubMessage>() {
           @Override
           public void write(JsonWriter out, PubsubMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PubsubMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PubsubMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PubsubMessage
   * @throws IOException if the JSON string is invalid with respect to PubsubMessage
   */
  public static PubsubMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PubsubMessage.class);
  }

  /**
   * Convert an instance of PubsubMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

