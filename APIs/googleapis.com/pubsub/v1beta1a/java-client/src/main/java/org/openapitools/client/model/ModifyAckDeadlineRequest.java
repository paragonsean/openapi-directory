/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request for the ModifyAckDeadline method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:52.662594-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModifyAckDeadlineRequest {
  public static final String SERIALIZED_NAME_ACK_DEADLINE_SECONDS = "ackDeadlineSeconds";
  @SerializedName(SERIALIZED_NAME_ACK_DEADLINE_SECONDS)
  private Integer ackDeadlineSeconds;

  public static final String SERIALIZED_NAME_ACK_ID = "ackId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ACK_ID)
  private String ackId;

  public static final String SERIALIZED_NAME_ACK_IDS = "ackIds";
  @SerializedName(SERIALIZED_NAME_ACK_IDS)
  private List<String> ackIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private String subscription;

  public ModifyAckDeadlineRequest() {
  }

  public ModifyAckDeadlineRequest ackDeadlineSeconds(Integer ackDeadlineSeconds) {
    this.ackDeadlineSeconds = ackDeadlineSeconds;
    return this;
  }

  /**
   * The new ack deadline with respect to the time this request was sent to the Pub/Sub system. Must be &gt;&#x3D; 0. For example, if the value is 10, the new ack deadline will expire 10 seconds after the ModifyAckDeadline call was made. Specifying zero may immediately make the message available for another pull request.
   * @return ackDeadlineSeconds
   */
  @javax.annotation.Nullable
  public Integer getAckDeadlineSeconds() {
    return ackDeadlineSeconds;
  }

  public void setAckDeadlineSeconds(Integer ackDeadlineSeconds) {
    this.ackDeadlineSeconds = ackDeadlineSeconds;
  }


  @Deprecated
  public ModifyAckDeadlineRequest ackId(String ackId) {
    this.ackId = ackId;
    return this;
  }

  /**
   * The acknowledgment ID. Either this or ack_ids must be populated, not both.
   * @return ackId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getAckId() {
    return ackId;
  }

  @Deprecated
  public void setAckId(String ackId) {
    this.ackId = ackId;
  }


  public ModifyAckDeadlineRequest ackIds(List<String> ackIds) {
    this.ackIds = ackIds;
    return this;
  }

  public ModifyAckDeadlineRequest addAckIdsItem(String ackIdsItem) {
    if (this.ackIds == null) {
      this.ackIds = new ArrayList<>();
    }
    this.ackIds.add(ackIdsItem);
    return this;
  }

  /**
   * List of acknowledgment IDs. Either this field or ack_id should be populated, not both.
   * @return ackIds
   */
  @javax.annotation.Nullable
  public List<String> getAckIds() {
    return ackIds;
  }

  public void setAckIds(List<String> ackIds) {
    this.ackIds = ackIds;
  }


  public ModifyAckDeadlineRequest subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Next Index: 5 The name of the subscription from which messages are being pulled.
   * @return subscription
   */
  @javax.annotation.Nullable
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyAckDeadlineRequest modifyAckDeadlineRequest = (ModifyAckDeadlineRequest) o;
    return Objects.equals(this.ackDeadlineSeconds, modifyAckDeadlineRequest.ackDeadlineSeconds) &&
        Objects.equals(this.ackId, modifyAckDeadlineRequest.ackId) &&
        Objects.equals(this.ackIds, modifyAckDeadlineRequest.ackIds) &&
        Objects.equals(this.subscription, modifyAckDeadlineRequest.subscription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ackDeadlineSeconds, ackId, ackIds, subscription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyAckDeadlineRequest {\n");
    sb.append("    ackDeadlineSeconds: ").append(toIndentedString(ackDeadlineSeconds)).append("\n");
    sb.append("    ackId: ").append(toIndentedString(ackId)).append("\n");
    sb.append("    ackIds: ").append(toIndentedString(ackIds)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ackDeadlineSeconds");
    openapiFields.add("ackId");
    openapiFields.add("ackIds");
    openapiFields.add("subscription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyAckDeadlineRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyAckDeadlineRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyAckDeadlineRequest is not found in the empty JSON string", ModifyAckDeadlineRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyAckDeadlineRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyAckDeadlineRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ackId") != null && !jsonObj.get("ackId").isJsonNull()) && !jsonObj.get("ackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ackId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ackIds") != null && !jsonObj.get("ackIds").isJsonNull() && !jsonObj.get("ackIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ackIds` to be an array in the JSON string but got `%s`", jsonObj.get("ackIds").toString()));
      }
      if ((jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) && !jsonObj.get("subscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyAckDeadlineRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyAckDeadlineRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyAckDeadlineRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyAckDeadlineRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyAckDeadlineRequest>() {
           @Override
           public void write(JsonWriter out, ModifyAckDeadlineRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyAckDeadlineRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyAckDeadlineRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyAckDeadlineRequest
   * @throws IOException if the JSON string is invalid with respect to ModifyAckDeadlineRequest
   */
  public static ModifyAckDeadlineRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyAckDeadlineRequest.class);
  }

  /**
   * Convert an instance of ModifyAckDeadlineRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

