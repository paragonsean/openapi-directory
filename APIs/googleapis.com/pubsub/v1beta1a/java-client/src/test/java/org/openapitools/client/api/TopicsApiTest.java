/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListTopicsResponse;
import org.openapitools.client.model.PublishBatchRequest;
import org.openapitools.client.model.PublishBatchResponse;
import org.openapitools.client.model.PublishRequest;
import org.openapitools.client.model.Topic;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopicsApi
 */
@Disabled
public class TopicsApiTest {

    private final TopicsApi api = new TopicsApi();

    /**
     * Creates the given topic with the given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubTopicsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Topic topic = null;
        Topic response = api.pubsubTopicsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, topic);
        // TODO: test validations
    }

    /**
     * Deletes the topic with the given name. Returns NOT_FOUND if the topic does not exist. After a topic is deleted, a new topic may be created with the same name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubTopicsDeleteTest() throws ApiException {
        String topic = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.pubsubTopicsDelete(topic, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the configuration of a topic. Since the topic only has the name attribute, this method is only useful to check the existence of a topic. If other attributes are added in the future, they will be returned here.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubTopicsGetTest() throws ApiException {
        String topic = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Topic response = api.pubsubTopicsGet(topic, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists matching topics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubTopicsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        String query = null;
        ListTopicsResponse response = api.pubsubTopicsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, query);
        // TODO: test validations
    }

    /**
     * Adds a message to the topic. Returns NOT_FOUND if the topic does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubTopicsPublishTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublishRequest publishRequest = null;
        Object response = api.pubsubTopicsPublish($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, publishRequest);
        // TODO: test validations
    }

    /**
     * Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubTopicsPublishBatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublishBatchRequest publishBatchRequest = null;
        PublishBatchResponse response = api.pubsubTopicsPublishBatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, publishBatchRequest);
        // TODO: test validations
    }

}
