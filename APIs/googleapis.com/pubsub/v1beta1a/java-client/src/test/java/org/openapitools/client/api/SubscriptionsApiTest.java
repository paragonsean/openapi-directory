/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta1a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcknowledgeRequest;
import org.openapitools.client.model.ListSubscriptionsResponse;
import org.openapitools.client.model.ModifyAckDeadlineRequest;
import org.openapitools.client.model.ModifyPushConfigRequest;
import org.openapitools.client.model.PullBatchRequest;
import org.openapitools.client.model.PullBatchResponse;
import org.openapitools.client.model.PullRequest;
import org.openapitools.client.model.PullResponse;
import org.openapitools.client.model.Subscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * Acknowledges a particular received message: the Pub/Sub system can remove the given message from the subscription. Acknowledging a message whose Ack deadline has expired may succeed, but the message could have been already redelivered. Acknowledging a message more than once will not result in an error. This is only used for messages received via pull.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsAcknowledgeTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AcknowledgeRequest acknowledgeRequest = null;
        Object response = api.pubsubSubscriptionsAcknowledge($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeRequest);
        // TODO: test validations
    }

    /**
     * Creates a subscription on a given topic for a given subscriber. If the subscription already exists, returns ALREADY_EXISTS. If the corresponding topic doesn&#39;t exist, returns NOT_FOUND. If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Subscription subscription = null;
        Subscription response = api.pubsubSubscriptionsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, subscription);
        // TODO: test validations
    }

    /**
     * Deletes an existing subscription. All pending messages in the subscription are immediately dropped. Calls to Pull after deletion will return NOT_FOUND.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsDeleteTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.pubsubSubscriptionsDelete(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the configuration details of a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsGetTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Subscription response = api.pubsubSubscriptionsGet(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists matching subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        String query = null;
        ListSubscriptionsResponse response = api.pubsubSubscriptionsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, query);
        // TODO: test validations
    }

    /**
     * Modifies the Ack deadline for a message received from a pull request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsModifyAckDeadlineTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyAckDeadlineRequest modifyAckDeadlineRequest = null;
        Object response = api.pubsubSubscriptionsModifyAckDeadline($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyAckDeadlineRequest);
        // TODO: test validations
    }

    /**
     * Modifies the PushConfig for a specified subscription. This method can be used to suspend the flow of messages to an endpoint by clearing the PushConfig field in the request. Messages will be accumulated for delivery even if no push configuration is defined or while the configuration is modified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsModifyPushConfigTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyPushConfigRequest modifyPushConfigRequest = null;
        Object response = api.pubsubSubscriptionsModifyPushConfig($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyPushConfigRequest);
        // TODO: test validations
    }

    /**
     * Pulls a single message from the server. If return_immediately is true, and no messages are available in the subscription, this method returns FAILED_PRECONDITION. The system is free to return an UNAVAILABLE error if no messages are available in a reasonable amount of time (to reduce system load).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsPullTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PullRequest pullRequest = null;
        PullResponse response = api.pubsubSubscriptionsPull($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pullRequest);
        // TODO: test validations
    }

    /**
     * Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. The system is free to return UNAVAILABLE if there are too many pull requests outstanding for the given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubSubscriptionsPullBatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PullBatchRequest pullBatchRequest = null;
        PullBatchResponse response = api.pubsubSubscriptionsPullBatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pullBatchRequest);
        // TODO: test validations
    }

}
