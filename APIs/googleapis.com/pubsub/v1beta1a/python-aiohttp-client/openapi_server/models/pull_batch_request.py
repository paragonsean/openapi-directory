# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_events: int=None, return_immediately: bool=None, subscription: str=None):
        """PullBatchRequest - a model defined in OpenAPI

        :param max_events: The max_events of this PullBatchRequest.
        :param return_immediately: The return_immediately of this PullBatchRequest.
        :param subscription: The subscription of this PullBatchRequest.
        """
        self.openapi_types = {
            'max_events': int,
            'return_immediately': bool,
            'subscription': str
        }

        self.attribute_map = {
            'max_events': 'maxEvents',
            'return_immediately': 'returnImmediately',
            'subscription': 'subscription'
        }

        self._max_events = max_events
        self._return_immediately = return_immediately
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullBatchRequest of this PullBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_events(self):
        """Gets the max_events of this PullBatchRequest.

        The maximum number of PubsubEvents returned for this request. The Pub/Sub system may return fewer than the number of events specified.

        :return: The max_events of this PullBatchRequest.
        :rtype: int
        """
        return self._max_events

    @max_events.setter
    def max_events(self, max_events):
        """Sets the max_events of this PullBatchRequest.

        The maximum number of PubsubEvents returned for this request. The Pub/Sub system may return fewer than the number of events specified.

        :param max_events: The max_events of this PullBatchRequest.
        :type max_events: int
        """

        self._max_events = max_events

    @property
    def return_immediately(self):
        """Gets the return_immediately of this PullBatchRequest.

        If this is specified as true the system will respond immediately even if it is not able to return a message in the Pull response. Otherwise the system is allowed to wait until at least one message is available rather than returning no messages. The client may cancel the request if it does not wish to wait any longer for the response.

        :return: The return_immediately of this PullBatchRequest.
        :rtype: bool
        """
        return self._return_immediately

    @return_immediately.setter
    def return_immediately(self, return_immediately):
        """Sets the return_immediately of this PullBatchRequest.

        If this is specified as true the system will respond immediately even if it is not able to return a message in the Pull response. Otherwise the system is allowed to wait until at least one message is available rather than returning no messages. The client may cancel the request if it does not wish to wait any longer for the response.

        :param return_immediately: The return_immediately of this PullBatchRequest.
        :type return_immediately: bool
        """

        self._return_immediately = return_immediately

    @property
    def subscription(self):
        """Gets the subscription of this PullBatchRequest.

        The subscription from which messages should be pulled.

        :return: The subscription of this PullBatchRequest.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this PullBatchRequest.

        The subscription from which messages should be pulled.

        :param subscription: The subscription of this PullBatchRequest.
        :type subscription: str
        """

        self._subscription = subscription
