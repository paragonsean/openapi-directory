# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcknowledgeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_id: List[str]=None, subscription: str=None):
        """AcknowledgeRequest - a model defined in OpenAPI

        :param ack_id: The ack_id of this AcknowledgeRequest.
        :param subscription: The subscription of this AcknowledgeRequest.
        """
        self.openapi_types = {
            'ack_id': List[str],
            'subscription': str
        }

        self.attribute_map = {
            'ack_id': 'ackId',
            'subscription': 'subscription'
        }

        self._ack_id = ack_id
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcknowledgeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcknowledgeRequest of this AcknowledgeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_id(self):
        """Gets the ack_id of this AcknowledgeRequest.

        The acknowledgment ID for the message being acknowledged. This was returned by the Pub/Sub system in the Pull response.

        :return: The ack_id of this AcknowledgeRequest.
        :rtype: List[str]
        """
        return self._ack_id

    @ack_id.setter
    def ack_id(self, ack_id):
        """Sets the ack_id of this AcknowledgeRequest.

        The acknowledgment ID for the message being acknowledged. This was returned by the Pub/Sub system in the Pull response.

        :param ack_id: The ack_id of this AcknowledgeRequest.
        :type ack_id: List[str]
        """

        self._ack_id = ack_id

    @property
    def subscription(self):
        """Gets the subscription of this AcknowledgeRequest.

        The subscription whose message is being acknowledged.

        :return: The subscription of this AcknowledgeRequest.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this AcknowledgeRequest.

        The subscription whose message is being acknowledged.

        :param subscription: The subscription of this AcknowledgeRequest.
        :type subscription: str
        """

        self._subscription = subscription
