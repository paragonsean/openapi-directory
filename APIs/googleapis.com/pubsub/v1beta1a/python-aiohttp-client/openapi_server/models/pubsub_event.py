# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pubsub_message import PubsubMessage
from openapi_server import util


class PubsubEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: bool=None, message: PubsubMessage=None, subscription: str=None, truncated: bool=None):
        """PubsubEvent - a model defined in OpenAPI

        :param deleted: The deleted of this PubsubEvent.
        :param message: The message of this PubsubEvent.
        :param subscription: The subscription of this PubsubEvent.
        :param truncated: The truncated of this PubsubEvent.
        """
        self.openapi_types = {
            'deleted': bool,
            'message': PubsubMessage,
            'subscription': str,
            'truncated': bool
        }

        self.attribute_map = {
            'deleted': 'deleted',
            'message': 'message',
            'subscription': 'subscription',
            'truncated': 'truncated'
        }

        self._deleted = deleted
        self._message = message
        self._subscription = subscription
        self._truncated = truncated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubsubEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubsubEvent of this PubsubEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this PubsubEvent.

        Indicates that this subscription has been deleted. (Note that pull subscribers will always receive NOT_FOUND in response in their pull request on the subscription, rather than seeing this boolean.)

        :return: The deleted of this PubsubEvent.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this PubsubEvent.

        Indicates that this subscription has been deleted. (Note that pull subscribers will always receive NOT_FOUND in response in their pull request on the subscription, rather than seeing this boolean.)

        :param deleted: The deleted of this PubsubEvent.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def message(self):
        """Gets the message of this PubsubEvent.


        :return: The message of this PubsubEvent.
        :rtype: PubsubMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PubsubEvent.


        :param message: The message of this PubsubEvent.
        :type message: PubsubMessage
        """

        self._message = message

    @property
    def subscription(self):
        """Gets the subscription of this PubsubEvent.

        The subscription that received the event.

        :return: The subscription of this PubsubEvent.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this PubsubEvent.

        The subscription that received the event.

        :param subscription: The subscription of this PubsubEvent.
        :type subscription: str
        """

        self._subscription = subscription

    @property
    def truncated(self):
        """Gets the truncated of this PubsubEvent.

        Indicates that this subscription has been truncated.

        :return: The truncated of this PubsubEvent.
        :rtype: bool
        """
        return self._truncated

    @truncated.setter
    def truncated(self, truncated):
        """Sets the truncated of this PubsubEvent.

        Indicates that this subscription has been truncated.

        :param truncated: The truncated of this PubsubEvent.
        :type truncated: bool
        """

        self._truncated = truncated
