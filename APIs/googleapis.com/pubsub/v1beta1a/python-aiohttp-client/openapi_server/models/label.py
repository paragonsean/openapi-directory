# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, num_value: str=None, str_value: str=None):
        """Label - a model defined in OpenAPI

        :param key: The key of this Label.
        :param num_value: The num_value of this Label.
        :param str_value: The str_value of this Label.
        """
        self.openapi_types = {
            'key': str,
            'num_value': str,
            'str_value': str
        }

        self.attribute_map = {
            'key': 'key',
            'num_value': 'numValue',
            'str_value': 'strValue'
        }

        self._key = key
        self._num_value = num_value
        self._str_value = str_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this Label.

        The key of a label is a syntactically valid URL (as per RFC 1738) with the \"scheme\" and initial slashes omitted and with the additional restrictions noted below. Each key should be globally unique. The \"host\" portion is called the \"namespace\" and is not necessarily resolvable to a network endpoint. Instead, the namespace indicates what system or entity defines the semantics of the label. Namespaces do not restrict the set of objects to which a label may be associated. Keys are defined by the following grammar: key = hostname \"/\" kpath kpath = ksegment *[ \"/\" ksegment ] ksegment = alphadigit | *[ alphadigit | \"-\" | \"_\" | \".\" ] where \"hostname\" and \"alphadigit\" are defined as in RFC 1738. Example key: spanner.google.com/universe

        :return: The key of this Label.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Label.

        The key of a label is a syntactically valid URL (as per RFC 1738) with the \"scheme\" and initial slashes omitted and with the additional restrictions noted below. Each key should be globally unique. The \"host\" portion is called the \"namespace\" and is not necessarily resolvable to a network endpoint. Instead, the namespace indicates what system or entity defines the semantics of the label. Namespaces do not restrict the set of objects to which a label may be associated. Keys are defined by the following grammar: key = hostname \"/\" kpath kpath = ksegment *[ \"/\" ksegment ] ksegment = alphadigit | *[ alphadigit | \"-\" | \"_\" | \".\" ] where \"hostname\" and \"alphadigit\" are defined as in RFC 1738. Example key: spanner.google.com/universe

        :param key: The key of this Label.
        :type key: str
        """

        self._key = key

    @property
    def num_value(self):
        """Gets the num_value of this Label.

        An integer value.

        :return: The num_value of this Label.
        :rtype: str
        """
        return self._num_value

    @num_value.setter
    def num_value(self, num_value):
        """Sets the num_value of this Label.

        An integer value.

        :param num_value: The num_value of this Label.
        :type num_value: str
        """

        self._num_value = num_value

    @property
    def str_value(self):
        """Gets the str_value of this Label.

        A string value.

        :return: The str_value of this Label.
        :rtype: str
        """
        return self._str_value

    @str_value.setter
    def str_value(self, str_value):
        """Sets the str_value of this Label.

        A string value.

        :param str_value: The str_value of this Label.
        :type str_value: str
        """

        self._str_value = str_value
