# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.push_config import PushConfig
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_deadline_seconds: int=None, name: str=None, push_config: PushConfig=None, topic: str=None):
        """Subscription - a model defined in OpenAPI

        :param ack_deadline_seconds: The ack_deadline_seconds of this Subscription.
        :param name: The name of this Subscription.
        :param push_config: The push_config of this Subscription.
        :param topic: The topic of this Subscription.
        """
        self.openapi_types = {
            'ack_deadline_seconds': int,
            'name': str,
            'push_config': PushConfig,
            'topic': str
        }

        self.attribute_map = {
            'ack_deadline_seconds': 'ackDeadlineSeconds',
            'name': 'name',
            'push_config': 'pushConfig',
            'topic': 'topic'
        }

        self._ack_deadline_seconds = ack_deadline_seconds
        self._name = name
        self._push_config = push_config
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_deadline_seconds(self):
        """Gets the ack_deadline_seconds of this Subscription.

        For either push or pull delivery, the value is the maximum time after a subscriber receives a message before the subscriber should acknowledge or Nack the message. If the Ack deadline for a message passes without an Ack or a Nack, the Pub/Sub system will eventually redeliver the message. If a subscriber acknowledges after the deadline, the Pub/Sub system may accept the Ack, but it is possible that the message has been already delivered again. Multiple Acks to the message are allowed and will succeed. For push delivery, this value is used to set the request timeout for the call to the push endpoint. For pull delivery, this value is used as the initial value for the Ack deadline. It may be overridden for each message using its corresponding ack_id with ModifyAckDeadline. While a message is outstanding (i.e. it has been delivered to a pull subscriber and the subscriber has not yet Acked or Nacked), the Pub/Sub system will not deliver that message to another pull subscriber (on a best-effort basis).

        :return: The ack_deadline_seconds of this Subscription.
        :rtype: int
        """
        return self._ack_deadline_seconds

    @ack_deadline_seconds.setter
    def ack_deadline_seconds(self, ack_deadline_seconds):
        """Sets the ack_deadline_seconds of this Subscription.

        For either push or pull delivery, the value is the maximum time after a subscriber receives a message before the subscriber should acknowledge or Nack the message. If the Ack deadline for a message passes without an Ack or a Nack, the Pub/Sub system will eventually redeliver the message. If a subscriber acknowledges after the deadline, the Pub/Sub system may accept the Ack, but it is possible that the message has been already delivered again. Multiple Acks to the message are allowed and will succeed. For push delivery, this value is used to set the request timeout for the call to the push endpoint. For pull delivery, this value is used as the initial value for the Ack deadline. It may be overridden for each message using its corresponding ack_id with ModifyAckDeadline. While a message is outstanding (i.e. it has been delivered to a pull subscriber and the subscriber has not yet Acked or Nacked), the Pub/Sub system will not deliver that message to another pull subscriber (on a best-effort basis).

        :param ack_deadline_seconds: The ack_deadline_seconds of this Subscription.
        :type ack_deadline_seconds: int
        """

        self._ack_deadline_seconds = ack_deadline_seconds

    @property
    def name(self):
        """Gets the name of this Subscription.

        Name of the subscription.

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        Name of the subscription.

        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def push_config(self):
        """Gets the push_config of this Subscription.


        :return: The push_config of this Subscription.
        :rtype: PushConfig
        """
        return self._push_config

    @push_config.setter
    def push_config(self, push_config):
        """Sets the push_config of this Subscription.


        :param push_config: The push_config of this Subscription.
        :type push_config: PushConfig
        """

        self._push_config = push_config

    @property
    def topic(self):
        """Gets the topic of this Subscription.

        The name of the topic from which this subscription is receiving messages.

        :return: The topic of this Subscription.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Subscription.

        The name of the topic from which this subscription is receiving messages.

        :param topic: The topic of this Subscription.
        :type topic: str
        """

        self._topic = topic
