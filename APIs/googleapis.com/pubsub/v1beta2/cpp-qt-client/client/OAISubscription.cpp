/**
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_ack_deadline_seconds_isSet = false;
    m_ack_deadline_seconds_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_push_config_isSet = false;
    m_push_config_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_ack_deadline_seconds_isValid = ::OpenAPI::fromJsonValue(m_ack_deadline_seconds, json[QString("ackDeadlineSeconds")]);
    m_ack_deadline_seconds_isSet = !json[QString("ackDeadlineSeconds")].isNull() && m_ack_deadline_seconds_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_push_config_isValid = ::OpenAPI::fromJsonValue(m_push_config, json[QString("pushConfig")]);
    m_push_config_isSet = !json[QString("pushConfig")].isNull() && m_push_config_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_ack_deadline_seconds_isSet) {
        obj.insert(QString("ackDeadlineSeconds"), ::OpenAPI::toJsonValue(m_ack_deadline_seconds));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_push_config.isSet()) {
        obj.insert(QString("pushConfig"), ::OpenAPI::toJsonValue(m_push_config));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

qint32 OAISubscription::getAckDeadlineSeconds() const {
    return m_ack_deadline_seconds;
}
void OAISubscription::setAckDeadlineSeconds(const qint32 &ack_deadline_seconds) {
    m_ack_deadline_seconds = ack_deadline_seconds;
    m_ack_deadline_seconds_isSet = true;
}

bool OAISubscription::is_ack_deadline_seconds_Set() const{
    return m_ack_deadline_seconds_isSet;
}

bool OAISubscription::is_ack_deadline_seconds_Valid() const{
    return m_ack_deadline_seconds_isValid;
}

QString OAISubscription::getName() const {
    return m_name;
}
void OAISubscription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscription::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscription::is_name_Valid() const{
    return m_name_isValid;
}

OAIPushConfig OAISubscription::getPushConfig() const {
    return m_push_config;
}
void OAISubscription::setPushConfig(const OAIPushConfig &push_config) {
    m_push_config = push_config;
    m_push_config_isSet = true;
}

bool OAISubscription::is_push_config_Set() const{
    return m_push_config_isSet;
}

bool OAISubscription::is_push_config_Valid() const{
    return m_push_config_isValid;
}

QString OAISubscription::getTopic() const {
    return m_topic;
}
void OAISubscription::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAISubscription::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAISubscription::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ack_deadline_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
