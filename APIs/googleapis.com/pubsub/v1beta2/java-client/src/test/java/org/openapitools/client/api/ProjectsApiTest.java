/*
 * Cloud Pub/Sub API
 * Provides reliable, many-to-many, asynchronous messaging between applications. 
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcknowledgeRequest;
import org.openapitools.client.model.ListSubscriptionsResponse;
import org.openapitools.client.model.ListTopicSubscriptionsResponse;
import org.openapitools.client.model.ListTopicsResponse;
import org.openapitools.client.model.ModifyAckDeadlineRequest;
import org.openapitools.client.model.ModifyPushConfigRequest;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PublishRequest;
import org.openapitools.client.model.PublishResponse;
import org.openapitools.client.model.PullRequest;
import org.openapitools.client.model.PullResponse;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.Topic;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Acknowledges the messages associated with the &#x60;ack_ids&#x60; in the &#x60;AcknowledgeRequest&#x60;. The Pub/Sub system can remove the relevant messages from the subscription. Acknowledging a message whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsAcknowledgeTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AcknowledgeRequest acknowledgeRequest = null;
        Object response = api.pubsubProjectsSubscriptionsAcknowledge(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledgeRequest);
        // TODO: test validations
    }

    /**
     * Deletes an existing subscription. All pending messages in the subscription are immediately dropped. Calls to &#x60;Pull&#x60; after deletion will return &#x60;NOT_FOUND&#x60;. After a subscription is deleted, a new one may be created with the same name, but the new one has no association with the old subscription, or its topic unless the same topic is specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsDeleteTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.pubsubProjectsSubscriptionsDelete(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the configuration details of a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsGetTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Subscription response = api.pubsubProjectsSubscriptionsGet(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists matching subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsListTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSubscriptionsResponse response = api.pubsubProjectsSubscriptionsList(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Modifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for redelivery if the processing was interrupted. Note that this does not modify the subscription-level &#x60;ackDeadlineSeconds&#x60; used for subsequent messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsModifyAckDeadlineTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyAckDeadlineRequest modifyAckDeadlineRequest = null;
        Object response = api.pubsubProjectsSubscriptionsModifyAckDeadline(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyAckDeadlineRequest);
        // TODO: test validations
    }

    /**
     * Modifies the &#x60;PushConfig&#x60; for a specified subscription. This may be used to change a push subscription to a pull one (signified by an empty &#x60;PushConfig&#x60;) or vice versa, or change the endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the &#x60;PushConfig&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsModifyPushConfigTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyPushConfigRequest modifyPushConfigRequest = null;
        Object response = api.pubsubProjectsSubscriptionsModifyPushConfig(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyPushConfigRequest);
        // TODO: test validations
    }

    /**
     * Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. The server may return &#x60;UNAVAILABLE&#x60; if there are too many concurrent pull requests pending for the given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsSubscriptionsPullTest() throws ApiException {
        String subscription = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PullRequest pullRequest = null;
        PullResponse response = api.pubsubProjectsSubscriptionsPull(subscription, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pullRequest);
        // TODO: test validations
    }

    /**
     * Creates the given topic with the given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsCreateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Topic topic = null;
        Topic response = api.pubsubProjectsTopicsCreate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, topic);
        // TODO: test validations
    }

    /**
     * Deletes the topic with the given name. Returns &#x60;NOT_FOUND&#x60; if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their &#x60;topic&#x60; field is set to &#x60;_deleted-topic_&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsDeleteTest() throws ApiException {
        String topic = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.pubsubProjectsTopicsDelete(topic, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the configuration of a topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsGetTest() throws ApiException {
        String topic = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Topic response = api.pubsubProjectsTopicsGet(topic, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.pubsubProjectsTopicsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists matching topics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsListTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTopicsResponse response = api.pubsubProjectsTopicsList(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Adds one or more messages to the topic. Returns &#x60;NOT_FOUND&#x60; if the topic does not exist. The message payload must not be empty; it must contain either a non-empty data field, or at least one attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsPublishTest() throws ApiException {
        String topic = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublishRequest publishRequest = null;
        PublishResponse response = api.pubsubProjectsTopicsPublish(topic, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, publishRequest);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.pubsubProjectsTopicsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Lists the name of the subscriptions for this topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsSubscriptionsListTest() throws ApiException {
        String topic = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTopicSubscriptionsResponse response = api.pubsubProjectsTopicsSubscriptionsList(topic, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pubsubProjectsTopicsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.pubsubProjectsTopicsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
