# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.push_config import PushConfig
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ack_deadline_seconds: int=None, name: str=None, push_config: PushConfig=None, topic: str=None):
        """Subscription - a model defined in OpenAPI

        :param ack_deadline_seconds: The ack_deadline_seconds of this Subscription.
        :param name: The name of this Subscription.
        :param push_config: The push_config of this Subscription.
        :param topic: The topic of this Subscription.
        """
        self.openapi_types = {
            'ack_deadline_seconds': int,
            'name': str,
            'push_config': PushConfig,
            'topic': str
        }

        self.attribute_map = {
            'ack_deadline_seconds': 'ackDeadlineSeconds',
            'name': 'name',
            'push_config': 'pushConfig',
            'topic': 'topic'
        }

        self._ack_deadline_seconds = ack_deadline_seconds
        self._name = name
        self._push_config = push_config
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ack_deadline_seconds(self):
        """Gets the ack_deadline_seconds of this Subscription.

        This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions, this value is used as the initial value for the ack deadline. To override this value for a given message, call `ModifyAckDeadline` with the corresponding `ack_id` if using pull. The maximum custom deadline you can specify is 600 seconds (10 minutes). For push delivery, this value is also used to set the request timeout for the call to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the message. If this parameter is 0, a default value of 10 seconds is used.

        :return: The ack_deadline_seconds of this Subscription.
        :rtype: int
        """
        return self._ack_deadline_seconds

    @ack_deadline_seconds.setter
    def ack_deadline_seconds(self, ack_deadline_seconds):
        """Sets the ack_deadline_seconds of this Subscription.

        This value is the maximum time after a subscriber receives a message before the subscriber should acknowledge the message. After message delivery but before the ack deadline expires and before the message is acknowledged, it is an outstanding message and will not be delivered again during that time (on a best-effort basis). For pull subscriptions, this value is used as the initial value for the ack deadline. To override this value for a given message, call `ModifyAckDeadline` with the corresponding `ack_id` if using pull. The maximum custom deadline you can specify is 600 seconds (10 minutes). For push delivery, this value is also used to set the request timeout for the call to the push endpoint. If the subscriber never acknowledges the message, the Pub/Sub system will eventually redeliver the message. If this parameter is 0, a default value of 10 seconds is used.

        :param ack_deadline_seconds: The ack_deadline_seconds of this Subscription.
        :type ack_deadline_seconds: int
        """

        self._ack_deadline_seconds = ack_deadline_seconds

    @property
    def name(self):
        """Gets the name of this Subscription.

        The name of the subscription. It must have the format `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.

        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.

        The name of the subscription. It must have the format `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `\"goog\"`.

        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def push_config(self):
        """Gets the push_config of this Subscription.


        :return: The push_config of this Subscription.
        :rtype: PushConfig
        """
        return self._push_config

    @push_config.setter
    def push_config(self, push_config):
        """Sets the push_config of this Subscription.


        :param push_config: The push_config of this Subscription.
        :type push_config: PushConfig
        """

        self._push_config = push_config

    @property
    def topic(self):
        """Gets the topic of this Subscription.

        The name of the topic from which this subscription is receiving messages. The value of this field will be `_deleted-topic_` if the topic has been deleted.

        :return: The topic of this Subscription.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Subscription.

        The name of the topic from which this subscription is receiving messages. The value of this field will be `_deleted-topic_` if the topic has been deleted.

        :param topic: The topic of this Subscription.
        :type topic: str
        """

        self._topic = topic
