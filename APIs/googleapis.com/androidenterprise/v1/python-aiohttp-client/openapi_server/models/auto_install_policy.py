# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_install_constraint import AutoInstallConstraint
from openapi_server import util


class AutoInstallPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_install_constraint: List[AutoInstallConstraint]=None, auto_install_mode: str=None, auto_install_priority: int=None, minimum_version_code: int=None):
        """AutoInstallPolicy - a model defined in OpenAPI

        :param auto_install_constraint: The auto_install_constraint of this AutoInstallPolicy.
        :param auto_install_mode: The auto_install_mode of this AutoInstallPolicy.
        :param auto_install_priority: The auto_install_priority of this AutoInstallPolicy.
        :param minimum_version_code: The minimum_version_code of this AutoInstallPolicy.
        """
        self.openapi_types = {
            'auto_install_constraint': List[AutoInstallConstraint],
            'auto_install_mode': str,
            'auto_install_priority': int,
            'minimum_version_code': int
        }

        self.attribute_map = {
            'auto_install_constraint': 'autoInstallConstraint',
            'auto_install_mode': 'autoInstallMode',
            'auto_install_priority': 'autoInstallPriority',
            'minimum_version_code': 'minimumVersionCode'
        }

        self._auto_install_constraint = auto_install_constraint
        self._auto_install_mode = auto_install_mode
        self._auto_install_priority = auto_install_priority
        self._minimum_version_code = minimum_version_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoInstallPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoInstallPolicy of this AutoInstallPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_install_constraint(self):
        """Gets the auto_install_constraint of this AutoInstallPolicy.

        The constraints for auto-installing the app. You can specify a maximum of one constraint.

        :return: The auto_install_constraint of this AutoInstallPolicy.
        :rtype: List[AutoInstallConstraint]
        """
        return self._auto_install_constraint

    @auto_install_constraint.setter
    def auto_install_constraint(self, auto_install_constraint):
        """Sets the auto_install_constraint of this AutoInstallPolicy.

        The constraints for auto-installing the app. You can specify a maximum of one constraint.

        :param auto_install_constraint: The auto_install_constraint of this AutoInstallPolicy.
        :type auto_install_constraint: List[AutoInstallConstraint]
        """

        self._auto_install_constraint = auto_install_constraint

    @property
    def auto_install_mode(self):
        """Gets the auto_install_mode of this AutoInstallPolicy.

        The auto-install mode. If unset, defaults to \"doNotAutoInstall\". An app is automatically installed regardless of a set maintenance window.

        :return: The auto_install_mode of this AutoInstallPolicy.
        :rtype: str
        """
        return self._auto_install_mode

    @auto_install_mode.setter
    def auto_install_mode(self, auto_install_mode):
        """Sets the auto_install_mode of this AutoInstallPolicy.

        The auto-install mode. If unset, defaults to \"doNotAutoInstall\". An app is automatically installed regardless of a set maintenance window.

        :param auto_install_mode: The auto_install_mode of this AutoInstallPolicy.
        :type auto_install_mode: str
        """
        allowed_values = ["autoInstallModeUnspecified", "doNotAutoInstall", "autoInstallOnce", "forceAutoInstall"]  # noqa: E501
        if auto_install_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_install_mode` ({0}), must be one of {1}"
                .format(auto_install_mode, allowed_values)
            )

        self._auto_install_mode = auto_install_mode

    @property
    def auto_install_priority(self):
        """Gets the auto_install_priority of this AutoInstallPolicy.

        The priority of the install, as an unsigned integer. A lower number means higher priority.

        :return: The auto_install_priority of this AutoInstallPolicy.
        :rtype: int
        """
        return self._auto_install_priority

    @auto_install_priority.setter
    def auto_install_priority(self, auto_install_priority):
        """Sets the auto_install_priority of this AutoInstallPolicy.

        The priority of the install, as an unsigned integer. A lower number means higher priority.

        :param auto_install_priority: The auto_install_priority of this AutoInstallPolicy.
        :type auto_install_priority: int
        """

        self._auto_install_priority = auto_install_priority

    @property
    def minimum_version_code(self):
        """Gets the minimum_version_code of this AutoInstallPolicy.

        The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.

        :return: The minimum_version_code of this AutoInstallPolicy.
        :rtype: int
        """
        return self._minimum_version_code

    @minimum_version_code.setter
    def minimum_version_code(self, minimum_version_code):
        """Sets the minimum_version_code of this AutoInstallPolicy.

        The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.

        :param minimum_version_code: The minimum_version_code of this AutoInstallPolicy.
        :type minimum_version_code: int
        """

        self._minimum_version_code = minimum_version_code
