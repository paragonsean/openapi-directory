# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_visibility import ProductVisibility
from openapi_server import util


class ProductSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_id: List[str]=None, product_set_behavior: str=None, product_visibility: List[ProductVisibility]=None):
        """ProductSet - a model defined in OpenAPI

        :param product_id: The product_id of this ProductSet.
        :param product_set_behavior: The product_set_behavior of this ProductSet.
        :param product_visibility: The product_visibility of this ProductSet.
        """
        self.openapi_types = {
            'product_id': List[str],
            'product_set_behavior': str,
            'product_visibility': List[ProductVisibility]
        }

        self.attribute_map = {
            'product_id': 'productId',
            'product_set_behavior': 'productSetBehavior',
            'product_visibility': 'productVisibility'
        }

        self._product_id = product_id
        self._product_set_behavior = product_set_behavior
        self._product_visibility = product_visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSet of this ProductSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self):
        """Gets the product_id of this ProductSet.

        The list of product IDs making up the set of products.

        :return: The product_id of this ProductSet.
        :rtype: List[str]
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductSet.

        The list of product IDs making up the set of products.

        :param product_id: The product_id of this ProductSet.
        :type product_id: List[str]
        """

        self._product_id = product_id

    @property
    def product_set_behavior(self):
        """Gets the product_set_behavior of this ProductSet.

        The interpretation of this product set. \"unknown\" should never be sent and is ignored if received. \"whitelist\" means that the user is entitled to access the product set. \"includeAll\" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. \"allApproved\" means that the user is entitled to access all products that are approved for the enterprise. If the value is \"allApproved\" or \"includeAll\", the productId field is ignored. If no value is provided, it is interpreted as \"whitelist\" for backwards compatibility. Further \"allApproved\" or \"includeAll\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks for Android app. Use ProductVisibility to enable \"alpha\" or \"beta\" tracks per user.

        :return: The product_set_behavior of this ProductSet.
        :rtype: str
        """
        return self._product_set_behavior

    @product_set_behavior.setter
    def product_set_behavior(self, product_set_behavior):
        """Sets the product_set_behavior of this ProductSet.

        The interpretation of this product set. \"unknown\" should never be sent and is ignored if received. \"whitelist\" means that the user is entitled to access the product set. \"includeAll\" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. \"allApproved\" means that the user is entitled to access all products that are approved for the enterprise. If the value is \"allApproved\" or \"includeAll\", the productId field is ignored. If no value is provided, it is interpreted as \"whitelist\" for backwards compatibility. Further \"allApproved\" or \"includeAll\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks for Android app. Use ProductVisibility to enable \"alpha\" or \"beta\" tracks per user.

        :param product_set_behavior: The product_set_behavior of this ProductSet.
        :type product_set_behavior: str
        """
        allowed_values = ["unknown", "whitelist", "includeAll", "allApproved"]  # noqa: E501
        if product_set_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `product_set_behavior` ({0}), must be one of {1}"
                .format(product_set_behavior, allowed_values)
            )

        self._product_set_behavior = product_set_behavior

    @property
    def product_visibility(self):
        """Gets the product_visibility of this ProductSet.

        Additional list of product IDs making up the product set. Unlike the productID array, in this list It's possible to specify which tracks (alpha, beta, production) of a product are visible to the user. See ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.

        :return: The product_visibility of this ProductSet.
        :rtype: List[ProductVisibility]
        """
        return self._product_visibility

    @product_visibility.setter
    def product_visibility(self, product_visibility):
        """Sets the product_visibility of this ProductSet.

        Additional list of product IDs making up the product set. Unlike the productID array, in this list It's possible to specify which tracks (alpha, beta, production) of a product are visible to the user. See ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.

        :param product_visibility: The product_visibility of this ProductSet.
        :type product_visibility: List[ProductVisibility]
        """

        self._product_visibility = product_visibility
