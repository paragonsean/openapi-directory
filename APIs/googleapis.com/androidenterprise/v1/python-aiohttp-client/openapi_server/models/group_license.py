# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquisition_kind: str=None, approval: str=None, num_provisioned: int=None, num_purchased: int=None, permissions: str=None, product_id: str=None):
        """GroupLicense - a model defined in OpenAPI

        :param acquisition_kind: The acquisition_kind of this GroupLicense.
        :param approval: The approval of this GroupLicense.
        :param num_provisioned: The num_provisioned of this GroupLicense.
        :param num_purchased: The num_purchased of this GroupLicense.
        :param permissions: The permissions of this GroupLicense.
        :param product_id: The product_id of this GroupLicense.
        """
        self.openapi_types = {
            'acquisition_kind': str,
            'approval': str,
            'num_provisioned': int,
            'num_purchased': int,
            'permissions': str,
            'product_id': str
        }

        self.attribute_map = {
            'acquisition_kind': 'acquisitionKind',
            'approval': 'approval',
            'num_provisioned': 'numProvisioned',
            'num_purchased': 'numPurchased',
            'permissions': 'permissions',
            'product_id': 'productId'
        }

        self._acquisition_kind = acquisition_kind
        self._approval = approval
        self._num_provisioned = num_provisioned
        self._num_purchased = num_purchased
        self._permissions = permissions
        self._product_id = product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupLicense of this GroupLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquisition_kind(self):
        """Gets the acquisition_kind of this GroupLicense.

        How this group license was acquired. \"bulkPurchase\" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is \"free\" (for free products).

        :return: The acquisition_kind of this GroupLicense.
        :rtype: str
        """
        return self._acquisition_kind

    @acquisition_kind.setter
    def acquisition_kind(self, acquisition_kind):
        """Sets the acquisition_kind of this GroupLicense.

        How this group license was acquired. \"bulkPurchase\" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is \"free\" (for free products).

        :param acquisition_kind: The acquisition_kind of this GroupLicense.
        :type acquisition_kind: str
        """
        allowed_values = ["free", "bulkPurchase"]  # noqa: E501
        if acquisition_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `acquisition_kind` ({0}), must be one of {1}"
                .format(acquisition_kind, allowed_values)
            )

        self._acquisition_kind = acquisition_kind

    @property
    def approval(self):
        """Gets the approval of this GroupLicense.

        Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.

        :return: The approval of this GroupLicense.
        :rtype: str
        """
        return self._approval

    @approval.setter
    def approval(self, approval):
        """Sets the approval of this GroupLicense.

        Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.

        :param approval: The approval of this GroupLicense.
        :type approval: str
        """
        allowed_values = ["approved", "unapproved"]  # noqa: E501
        if approval not in allowed_values:
            raise ValueError(
                "Invalid value for `approval` ({0}), must be one of {1}"
                .format(approval, allowed_values)
            )

        self._approval = approval

    @property
    def num_provisioned(self):
        """Gets the num_provisioned of this GroupLicense.

        The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.

        :return: The num_provisioned of this GroupLicense.
        :rtype: int
        """
        return self._num_provisioned

    @num_provisioned.setter
    def num_provisioned(self, num_provisioned):
        """Sets the num_provisioned of this GroupLicense.

        The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.

        :param num_provisioned: The num_provisioned of this GroupLicense.
        :type num_provisioned: int
        """

        self._num_provisioned = num_provisioned

    @property
    def num_purchased(self):
        """Gets the num_purchased of this GroupLicense.

        The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is \"free\").

        :return: The num_purchased of this GroupLicense.
        :rtype: int
        """
        return self._num_purchased

    @num_purchased.setter
    def num_purchased(self, num_purchased):
        """Sets the num_purchased of this GroupLicense.

        The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is \"free\").

        :param num_purchased: The num_purchased of this GroupLicense.
        :type num_purchased: int
        """

        self._num_purchased = num_purchased

    @property
    def permissions(self):
        """Gets the permissions of this GroupLicense.

        The permission approval status of the product. This field is only set if the product is approved. Possible states are: - \"currentApproved\", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - \"needsReapproval\", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - \"allCurrentAndFutureApproved\", the current permissions are approved and any future permission updates will be automatically approved without administrator review. 

        :return: The permissions of this GroupLicense.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GroupLicense.

        The permission approval status of the product. This field is only set if the product is approved. Possible states are: - \"currentApproved\", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - \"needsReapproval\", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - \"allCurrentAndFutureApproved\", the current permissions are approved and any future permission updates will be automatically approved without administrator review. 

        :param permissions: The permissions of this GroupLicense.
        :type permissions: str
        """
        allowed_values = ["currentApproved", "needsReapproval", "allCurrentAndFutureApproved"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    @property
    def product_id(self):
        """Gets the product_id of this GroupLicense.

        The ID of the product that the license is for. For example, \"app:com.google.android.gm\".

        :return: The product_id of this GroupLicense.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GroupLicense.

        The ID of the product that the license is for. For example, \"app:com.google.android.gm\".

        :param product_id: The product_id of this GroupLicense.
        :type product_id: str
        """

        self._product_id = product_id
