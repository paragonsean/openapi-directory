# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permission_id: str=None, state: str=None):
        """ProductPermission - a model defined in OpenAPI

        :param permission_id: The permission_id of this ProductPermission.
        :param state: The state of this ProductPermission.
        """
        self.openapi_types = {
            'permission_id': str,
            'state': str
        }

        self.attribute_map = {
            'permission_id': 'permissionId',
            'state': 'state'
        }

        self._permission_id = permission_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPermission of this ProductPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission_id(self):
        """Gets the permission_id of this ProductPermission.

        An opaque string uniquely identifying the permission.

        :return: The permission_id of this ProductPermission.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this ProductPermission.

        An opaque string uniquely identifying the permission.

        :param permission_id: The permission_id of this ProductPermission.
        :type permission_id: str
        """

        self._permission_id = permission_id

    @property
    def state(self):
        """Gets the state of this ProductPermission.

        Whether the permission has been accepted or not.

        :return: The state of this ProductPermission.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProductPermission.

        Whether the permission has been accepted or not.

        :param state: The state of this ProductPermission.
        :type state: str
        """
        allowed_values = ["required", "accepted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
