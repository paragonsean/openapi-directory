# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewDeviceEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, dpc_package_name: str=None, management_type: str=None, user_id: str=None):
        """NewDeviceEvent - a model defined in OpenAPI

        :param device_id: The device_id of this NewDeviceEvent.
        :param dpc_package_name: The dpc_package_name of this NewDeviceEvent.
        :param management_type: The management_type of this NewDeviceEvent.
        :param user_id: The user_id of this NewDeviceEvent.
        """
        self.openapi_types = {
            'device_id': str,
            'dpc_package_name': str,
            'management_type': str,
            'user_id': str
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'dpc_package_name': 'dpcPackageName',
            'management_type': 'managementType',
            'user_id': 'userId'
        }

        self._device_id = device_id
        self._dpc_package_name = dpc_package_name
        self._management_type = management_type
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewDeviceEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewDeviceEvent of this NewDeviceEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this NewDeviceEvent.

        The Android ID of the device. This field will always be present.

        :return: The device_id of this NewDeviceEvent.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this NewDeviceEvent.

        The Android ID of the device. This field will always be present.

        :param device_id: The device_id of this NewDeviceEvent.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def dpc_package_name(self):
        """Gets the dpc_package_name of this NewDeviceEvent.

        Policy app on the device.

        :return: The dpc_package_name of this NewDeviceEvent.
        :rtype: str
        """
        return self._dpc_package_name

    @dpc_package_name.setter
    def dpc_package_name(self, dpc_package_name):
        """Sets the dpc_package_name of this NewDeviceEvent.

        Policy app on the device.

        :param dpc_package_name: The dpc_package_name of this NewDeviceEvent.
        :type dpc_package_name: str
        """

        self._dpc_package_name = dpc_package_name

    @property
    def management_type(self):
        """Gets the management_type of this NewDeviceEvent.

        Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device where the DPC is set as device owner, - \"managedProfile\", a device where the DPC is set as profile owner. 

        :return: The management_type of this NewDeviceEvent.
        :rtype: str
        """
        return self._management_type

    @management_type.setter
    def management_type(self, management_type):
        """Sets the management_type of this NewDeviceEvent.

        Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device where the DPC is set as device owner, - \"managedProfile\", a device where the DPC is set as profile owner. 

        :param management_type: The management_type of this NewDeviceEvent.
        :type management_type: str
        """
        allowed_values = ["managedDevice", "managedProfile"]  # noqa: E501
        if management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `management_type` ({0}), must be one of {1}"
                .format(management_type, allowed_values)
            )

        self._management_type = management_type

    @property
    def user_id(self):
        """Gets the user_id of this NewDeviceEvent.

        The ID of the user. This field will always be present.

        :return: The user_id of this NewDeviceEvent.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NewDeviceEvent.

        The ID of the user. This field will always be present.

        :param user_id: The user_id of this NewDeviceEvent.
        :type user_id: str
        """

        self._user_id = user_id
