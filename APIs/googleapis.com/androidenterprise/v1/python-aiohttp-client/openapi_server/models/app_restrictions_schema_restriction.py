# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_restrictions_schema_restriction_restriction_value import AppRestrictionsSchemaRestrictionRestrictionValue
from openapi_server import util


class AppRestrictionsSchemaRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: AppRestrictionsSchemaRestrictionRestrictionValue=None, description: str=None, entry: List[str]=None, entry_value: List[str]=None, key: str=None, nested_restriction: List[AppRestrictionsSchemaRestriction]=None, restriction_type: str=None, title: str=None):
        """AppRestrictionsSchemaRestriction - a model defined in OpenAPI

        :param default_value: The default_value of this AppRestrictionsSchemaRestriction.
        :param description: The description of this AppRestrictionsSchemaRestriction.
        :param entry: The entry of this AppRestrictionsSchemaRestriction.
        :param entry_value: The entry_value of this AppRestrictionsSchemaRestriction.
        :param key: The key of this AppRestrictionsSchemaRestriction.
        :param nested_restriction: The nested_restriction of this AppRestrictionsSchemaRestriction.
        :param restriction_type: The restriction_type of this AppRestrictionsSchemaRestriction.
        :param title: The title of this AppRestrictionsSchemaRestriction.
        """
        self.openapi_types = {
            'default_value': AppRestrictionsSchemaRestrictionRestrictionValue,
            'description': str,
            'entry': List[str],
            'entry_value': List[str],
            'key': str,
            'nested_restriction': List[AppRestrictionsSchemaRestriction],
            'restriction_type': str,
            'title': str
        }

        self.attribute_map = {
            'default_value': 'defaultValue',
            'description': 'description',
            'entry': 'entry',
            'entry_value': 'entryValue',
            'key': 'key',
            'nested_restriction': 'nestedRestriction',
            'restriction_type': 'restrictionType',
            'title': 'title'
        }

        self._default_value = default_value
        self._description = description
        self._entry = entry
        self._entry_value = entry_value
        self._key = key
        self._nested_restriction = nested_restriction
        self._restriction_type = restriction_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppRestrictionsSchemaRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppRestrictionsSchemaRestriction of this AppRestrictionsSchemaRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this AppRestrictionsSchemaRestriction.


        :return: The default_value of this AppRestrictionsSchemaRestriction.
        :rtype: AppRestrictionsSchemaRestrictionRestrictionValue
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this AppRestrictionsSchemaRestriction.


        :param default_value: The default_value of this AppRestrictionsSchemaRestriction.
        :type default_value: AppRestrictionsSchemaRestrictionRestrictionValue
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this AppRestrictionsSchemaRestriction.

        A longer description of the restriction, giving more detail of what it affects.

        :return: The description of this AppRestrictionsSchemaRestriction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppRestrictionsSchemaRestriction.

        A longer description of the restriction, giving more detail of what it affects.

        :param description: The description of this AppRestrictionsSchemaRestriction.
        :type description: str
        """

        self._description = description

    @property
    def entry(self):
        """Gets the entry of this AppRestrictionsSchemaRestriction.

        For choice or multiselect restrictions, the list of possible entries' human-readable names.

        :return: The entry of this AppRestrictionsSchemaRestriction.
        :rtype: List[str]
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this AppRestrictionsSchemaRestriction.

        For choice or multiselect restrictions, the list of possible entries' human-readable names.

        :param entry: The entry of this AppRestrictionsSchemaRestriction.
        :type entry: List[str]
        """

        self._entry = entry

    @property
    def entry_value(self):
        """Gets the entry_value of this AppRestrictionsSchemaRestriction.

        For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.

        :return: The entry_value of this AppRestrictionsSchemaRestriction.
        :rtype: List[str]
        """
        return self._entry_value

    @entry_value.setter
    def entry_value(self, entry_value):
        """Sets the entry_value of this AppRestrictionsSchemaRestriction.

        For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.

        :param entry_value: The entry_value of this AppRestrictionsSchemaRestriction.
        :type entry_value: List[str]
        """

        self._entry_value = entry_value

    @property
    def key(self):
        """Gets the key of this AppRestrictionsSchemaRestriction.

        The unique key that the product uses to identify the restriction, e.g. \"com.google.android.gm.fieldname\".

        :return: The key of this AppRestrictionsSchemaRestriction.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AppRestrictionsSchemaRestriction.

        The unique key that the product uses to identify the restriction, e.g. \"com.google.android.gm.fieldname\".

        :param key: The key of this AppRestrictionsSchemaRestriction.
        :type key: str
        """

        self._key = key

    @property
    def nested_restriction(self):
        """Gets the nested_restriction of this AppRestrictionsSchemaRestriction.

        For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.

        :return: The nested_restriction of this AppRestrictionsSchemaRestriction.
        :rtype: List[AppRestrictionsSchemaRestriction]
        """
        return self._nested_restriction

    @nested_restriction.setter
    def nested_restriction(self, nested_restriction):
        """Sets the nested_restriction of this AppRestrictionsSchemaRestriction.

        For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.

        :param nested_restriction: The nested_restriction of this AppRestrictionsSchemaRestriction.
        :type nested_restriction: List[AppRestrictionsSchemaRestriction]
        """

        self._nested_restriction = nested_restriction

    @property
    def restriction_type(self):
        """Gets the restriction_type of this AppRestrictionsSchemaRestriction.

        The type of the restriction.

        :return: The restriction_type of this AppRestrictionsSchemaRestriction.
        :rtype: str
        """
        return self._restriction_type

    @restriction_type.setter
    def restriction_type(self, restriction_type):
        """Sets the restriction_type of this AppRestrictionsSchemaRestriction.

        The type of the restriction.

        :param restriction_type: The restriction_type of this AppRestrictionsSchemaRestriction.
        :type restriction_type: str
        """
        allowed_values = ["bool", "string", "integer", "choice", "multiselect", "hidden", "bundle", "bundleArray"]  # noqa: E501
        if restriction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_type` ({0}), must be one of {1}"
                .format(restriction_type, allowed_values)
            )

        self._restriction_type = restriction_type

    @property
    def title(self):
        """Gets the title of this AppRestrictionsSchemaRestriction.

        The name of the restriction.

        :return: The title of this AppRestrictionsSchemaRestriction.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AppRestrictionsSchemaRestriction.

        The name of the restriction.

        :param title: The title of this AppRestrictionsSchemaRestriction.
        :type title: str
        """

        self._title = title
