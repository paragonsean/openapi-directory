# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.maintenance_window import MaintenanceWindow
from openapi_server.models.product_policy import ProductPolicy
from openapi_server import util


class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_update_policy: str=None, device_report_policy: str=None, maintenance_window: MaintenanceWindow=None, product_availability_policy: str=None, product_policy: List[ProductPolicy]=None):
        """Policy - a model defined in OpenAPI

        :param auto_update_policy: The auto_update_policy of this Policy.
        :param device_report_policy: The device_report_policy of this Policy.
        :param maintenance_window: The maintenance_window of this Policy.
        :param product_availability_policy: The product_availability_policy of this Policy.
        :param product_policy: The product_policy of this Policy.
        """
        self.openapi_types = {
            'auto_update_policy': str,
            'device_report_policy': str,
            'maintenance_window': MaintenanceWindow,
            'product_availability_policy': str,
            'product_policy': List[ProductPolicy]
        }

        self.attribute_map = {
            'auto_update_policy': 'autoUpdatePolicy',
            'device_report_policy': 'deviceReportPolicy',
            'maintenance_window': 'maintenanceWindow',
            'product_availability_policy': 'productAvailabilityPolicy',
            'product_policy': 'productPolicy'
        }

        self._auto_update_policy = auto_update_policy
        self._device_report_policy = device_report_policy
        self._maintenance_window = maintenance_window
        self._product_availability_policy = product_availability_policy
        self._product_policy = product_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy of this Policy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_update_policy(self):
        """Gets the auto_update_policy of this Policy.

        Controls when automatic app updates on the device can be applied. Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, autoUpdatePolicy has no effect. \"choiceToTheUser\" allows the device's user to configure the app update policy. \"always\" enables auto updates. \"never\" disables auto updates. \"wifiOnly\" enables auto updates only when the device is connected to wifi.

        :return: The auto_update_policy of this Policy.
        :rtype: str
        """
        return self._auto_update_policy

    @auto_update_policy.setter
    def auto_update_policy(self, auto_update_policy):
        """Sets the auto_update_policy of this Policy.

        Controls when automatic app updates on the device can be applied. Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, autoUpdatePolicy has no effect. \"choiceToTheUser\" allows the device's user to configure the app update policy. \"always\" enables auto updates. \"never\" disables auto updates. \"wifiOnly\" enables auto updates only when the device is connected to wifi.

        :param auto_update_policy: The auto_update_policy of this Policy.
        :type auto_update_policy: str
        """
        allowed_values = ["autoUpdatePolicyUnspecified", "choiceToTheUser", "never", "wifiOnly", "always"]  # noqa: E501
        if auto_update_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_update_policy` ({0}), must be one of {1}"
                .format(auto_update_policy, allowed_values)
            )

        self._auto_update_policy = auto_update_policy

    @property
    def device_report_policy(self):
        """Gets the device_report_policy of this Policy.

        Whether the device reports app states to the EMM. The default value is \"deviceReportDisabled\".

        :return: The device_report_policy of this Policy.
        :rtype: str
        """
        return self._device_report_policy

    @device_report_policy.setter
    def device_report_policy(self, device_report_policy):
        """Sets the device_report_policy of this Policy.

        Whether the device reports app states to the EMM. The default value is \"deviceReportDisabled\".

        :param device_report_policy: The device_report_policy of this Policy.
        :type device_report_policy: str
        """
        allowed_values = ["deviceReportPolicyUnspecified", "deviceReportDisabled", "deviceReportEnabled"]  # noqa: E501
        if device_report_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `device_report_policy` ({0}), must be one of {1}"
                .format(device_report_policy, allowed_values)
            )

        self._device_report_policy = device_report_policy

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this Policy.


        :return: The maintenance_window of this Policy.
        :rtype: MaintenanceWindow
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this Policy.


        :param maintenance_window: The maintenance_window of this Policy.
        :type maintenance_window: MaintenanceWindow
        """

        self._maintenance_window = maintenance_window

    @property
    def product_availability_policy(self):
        """Gets the product_availability_policy of this Policy.

        The availability granted to the device for the specified products. \"all\" gives the device access to all products, regardless of approval status. \"all\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks. \"whitelist\" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.

        :return: The product_availability_policy of this Policy.
        :rtype: str
        """
        return self._product_availability_policy

    @product_availability_policy.setter
    def product_availability_policy(self, product_availability_policy):
        """Sets the product_availability_policy of this Policy.

        The availability granted to the device for the specified products. \"all\" gives the device access to all products, regardless of approval status. \"all\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks. \"whitelist\" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.

        :param product_availability_policy: The product_availability_policy of this Policy.
        :type product_availability_policy: str
        """
        allowed_values = ["productAvailabilityPolicyUnspecified", "whitelist", "all"]  # noqa: E501
        if product_availability_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `product_availability_policy` ({0}), must be one of {1}"
                .format(product_availability_policy, allowed_values)
            )

        self._product_availability_policy = product_availability_policy

    @property
    def product_policy(self):
        """Gets the product_policy of this Policy.

        The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.

        :return: The product_policy of this Policy.
        :rtype: List[ProductPolicy]
        """
        return self._product_policy

    @product_policy.setter
    def product_policy(self, product_policy):
        """Sets the product_policy of this Policy.

        The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.

        :param product_policy: The product_policy of this Policy.
        :type product_policy: List[ProductPolicy]
        """

        self._product_policy = product_policy
