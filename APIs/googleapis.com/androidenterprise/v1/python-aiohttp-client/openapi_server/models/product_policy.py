# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_install_policy import AutoInstallPolicy
from openapi_server.models.enterprise_authentication_app_link_config import EnterpriseAuthenticationAppLinkConfig
from openapi_server.models.managed_configuration import ManagedConfiguration
from openapi_server import util


class ProductPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_install_policy: AutoInstallPolicy=None, auto_update_mode: str=None, enterprise_authentication_app_link_configs: List[EnterpriseAuthenticationAppLinkConfig]=None, managed_configuration: ManagedConfiguration=None, product_id: str=None, track_ids: List[str]=None, tracks: List[str]=None):
        """ProductPolicy - a model defined in OpenAPI

        :param auto_install_policy: The auto_install_policy of this ProductPolicy.
        :param auto_update_mode: The auto_update_mode of this ProductPolicy.
        :param enterprise_authentication_app_link_configs: The enterprise_authentication_app_link_configs of this ProductPolicy.
        :param managed_configuration: The managed_configuration of this ProductPolicy.
        :param product_id: The product_id of this ProductPolicy.
        :param track_ids: The track_ids of this ProductPolicy.
        :param tracks: The tracks of this ProductPolicy.
        """
        self.openapi_types = {
            'auto_install_policy': AutoInstallPolicy,
            'auto_update_mode': str,
            'enterprise_authentication_app_link_configs': List[EnterpriseAuthenticationAppLinkConfig],
            'managed_configuration': ManagedConfiguration,
            'product_id': str,
            'track_ids': List[str],
            'tracks': List[str]
        }

        self.attribute_map = {
            'auto_install_policy': 'autoInstallPolicy',
            'auto_update_mode': 'autoUpdateMode',
            'enterprise_authentication_app_link_configs': 'enterpriseAuthenticationAppLinkConfigs',
            'managed_configuration': 'managedConfiguration',
            'product_id': 'productId',
            'track_ids': 'trackIds',
            'tracks': 'tracks'
        }

        self._auto_install_policy = auto_install_policy
        self._auto_update_mode = auto_update_mode
        self._enterprise_authentication_app_link_configs = enterprise_authentication_app_link_configs
        self._managed_configuration = managed_configuration
        self._product_id = product_id
        self._track_ids = track_ids
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPolicy of this ProductPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_install_policy(self):
        """Gets the auto_install_policy of this ProductPolicy.


        :return: The auto_install_policy of this ProductPolicy.
        :rtype: AutoInstallPolicy
        """
        return self._auto_install_policy

    @auto_install_policy.setter
    def auto_install_policy(self, auto_install_policy):
        """Sets the auto_install_policy of this ProductPolicy.


        :param auto_install_policy: The auto_install_policy of this ProductPolicy.
        :type auto_install_policy: AutoInstallPolicy
        """

        self._auto_install_policy = auto_install_policy

    @property
    def auto_update_mode(self):
        """Gets the auto_update_mode of this ProductPolicy.

        The auto-update mode for the product. When autoUpdateMode is used, it always takes precedence over the user's choice. So when a user makes changes to the device settings manually, these changes are ignored.

        :return: The auto_update_mode of this ProductPolicy.
        :rtype: str
        """
        return self._auto_update_mode

    @auto_update_mode.setter
    def auto_update_mode(self, auto_update_mode):
        """Sets the auto_update_mode of this ProductPolicy.

        The auto-update mode for the product. When autoUpdateMode is used, it always takes precedence over the user's choice. So when a user makes changes to the device settings manually, these changes are ignored.

        :param auto_update_mode: The auto_update_mode of this ProductPolicy.
        :type auto_update_mode: str
        """
        allowed_values = ["autoUpdateModeUnspecified", "autoUpdateDefault", "autoUpdatePostponed", "autoUpdateHighPriority"]  # noqa: E501
        if auto_update_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_update_mode` ({0}), must be one of {1}"
                .format(auto_update_mode, allowed_values)
            )

        self._auto_update_mode = auto_update_mode

    @property
    def enterprise_authentication_app_link_configs(self):
        """Gets the enterprise_authentication_app_link_configs of this ProductPolicy.

        An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider's authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the default handler for the authentication url on the device.

        :return: The enterprise_authentication_app_link_configs of this ProductPolicy.
        :rtype: List[EnterpriseAuthenticationAppLinkConfig]
        """
        return self._enterprise_authentication_app_link_configs

    @enterprise_authentication_app_link_configs.setter
    def enterprise_authentication_app_link_configs(self, enterprise_authentication_app_link_configs):
        """Sets the enterprise_authentication_app_link_configs of this ProductPolicy.

        An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider's authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the default handler for the authentication url on the device.

        :param enterprise_authentication_app_link_configs: The enterprise_authentication_app_link_configs of this ProductPolicy.
        :type enterprise_authentication_app_link_configs: List[EnterpriseAuthenticationAppLinkConfig]
        """

        self._enterprise_authentication_app_link_configs = enterprise_authentication_app_link_configs

    @property
    def managed_configuration(self):
        """Gets the managed_configuration of this ProductPolicy.


        :return: The managed_configuration of this ProductPolicy.
        :rtype: ManagedConfiguration
        """
        return self._managed_configuration

    @managed_configuration.setter
    def managed_configuration(self, managed_configuration):
        """Sets the managed_configuration of this ProductPolicy.


        :param managed_configuration: The managed_configuration of this ProductPolicy.
        :type managed_configuration: ManagedConfiguration
        """

        self._managed_configuration = managed_configuration

    @property
    def product_id(self):
        """Gets the product_id of this ProductPolicy.

        The ID of the product. For example, \"app:com.google.android.gm\".

        :return: The product_id of this ProductPolicy.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductPolicy.

        The ID of the product. For example, \"app:com.google.android.gm\".

        :param product_id: The product_id of this ProductPolicy.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def track_ids(self):
        """Gets the track_ids of this ProductPolicy.

        Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get.

        :return: The track_ids of this ProductPolicy.
        :rtype: List[str]
        """
        return self._track_ids

    @track_ids.setter
    def track_ids(self, track_ids):
        """Sets the track_ids of this ProductPolicy.

        Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get.

        :param track_ids: The track_ids of this ProductPolicy.
        :type track_ids: List[str]
        """

        self._track_ids = track_ids

    @property
    def tracks(self):
        """Gets the tracks of this ProductPolicy.

        Deprecated. Use trackIds instead.

        :return: The tracks of this ProductPolicy.
        :rtype: List[str]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this ProductPolicy.

        Deprecated. Use trackIds instead.

        :param tracks: The tracks of this ProductPolicy.
        :type tracks: List[str]
        """
        allowed_values = ["appTrackUnspecified", "production", "beta", "alpha"]  # noqa: E501
        if not set(tracks).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `tracks` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(tracks) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._tracks = tracks
