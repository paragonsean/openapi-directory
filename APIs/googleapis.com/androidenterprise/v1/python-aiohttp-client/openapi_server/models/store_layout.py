# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreLayout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, homepage_id: str=None, store_layout_type: str=None):
        """StoreLayout - a model defined in OpenAPI

        :param homepage_id: The homepage_id of this StoreLayout.
        :param store_layout_type: The store_layout_type of this StoreLayout.
        """
        self.openapi_types = {
            'homepage_id': str,
            'store_layout_type': str
        }

        self.attribute_map = {
            'homepage_id': 'homepageId',
            'store_layout_type': 'storeLayoutType'
        }

        self._homepage_id = homepage_id
        self._store_layout_type = store_layout_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreLayout of this StoreLayout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def homepage_id(self):
        """Gets the homepage_id of this StoreLayout.

        The ID of the store page to be used as the homepage. The homepage is the first page shown in the managed Google Play Store. Not specifying a homepage is equivalent to setting the store layout type to \"basic\".

        :return: The homepage_id of this StoreLayout.
        :rtype: str
        """
        return self._homepage_id

    @homepage_id.setter
    def homepage_id(self, homepage_id):
        """Sets the homepage_id of this StoreLayout.

        The ID of the store page to be used as the homepage. The homepage is the first page shown in the managed Google Play Store. Not specifying a homepage is equivalent to setting the store layout type to \"basic\".

        :param homepage_id: The homepage_id of this StoreLayout.
        :type homepage_id: str
        """

        self._homepage_id = homepage_id

    @property
    def store_layout_type(self):
        """Gets the store_layout_type of this StoreLayout.

        The store layout type. By default, this value is set to \"basic\" if the homepageId field is not set, and to \"custom\" otherwise. If set to \"basic\", the layout will consist of all approved apps that have been whitelisted for the user.

        :return: The store_layout_type of this StoreLayout.
        :rtype: str
        """
        return self._store_layout_type

    @store_layout_type.setter
    def store_layout_type(self, store_layout_type):
        """Sets the store_layout_type of this StoreLayout.

        The store layout type. By default, this value is set to \"basic\" if the homepageId field is not set, and to \"custom\" otherwise. If set to \"basic\", the layout will consist of all approved apps that have been whitelisted for the user.

        :param store_layout_type: The store_layout_type of this StoreLayout.
        :type store_layout_type: str
        """
        allowed_values = ["unknown", "basic", "custom"]  # noqa: E501
        if store_layout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `store_layout_type` ({0}), must be one of {1}"
                .format(store_layout_type, allowed_values)
            )

        self._store_layout_type = store_layout_type
