# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_restrictions_schema_change_event import AppRestrictionsSchemaChangeEvent
from openapi_server.models.app_update_event import AppUpdateEvent
from openapi_server.models.device_report_update_event import DeviceReportUpdateEvent
from openapi_server.models.install_failure_event import InstallFailureEvent
from openapi_server.models.new_device_event import NewDeviceEvent
from openapi_server.models.new_permissions_event import NewPermissionsEvent
from openapi_server.models.product_approval_event import ProductApprovalEvent
from openapi_server.models.product_availability_change_event import ProductAvailabilityChangeEvent
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_restrictions_schema_change_event: AppRestrictionsSchemaChangeEvent=None, app_update_event: AppUpdateEvent=None, device_report_update_event: DeviceReportUpdateEvent=None, enterprise_id: str=None, install_failure_event: InstallFailureEvent=None, new_device_event: NewDeviceEvent=None, new_permissions_event: NewPermissionsEvent=None, notification_type: str=None, product_approval_event: ProductApprovalEvent=None, product_availability_change_event: ProductAvailabilityChangeEvent=None, timestamp_millis: str=None):
        """Notification - a model defined in OpenAPI

        :param app_restrictions_schema_change_event: The app_restrictions_schema_change_event of this Notification.
        :param app_update_event: The app_update_event of this Notification.
        :param device_report_update_event: The device_report_update_event of this Notification.
        :param enterprise_id: The enterprise_id of this Notification.
        :param install_failure_event: The install_failure_event of this Notification.
        :param new_device_event: The new_device_event of this Notification.
        :param new_permissions_event: The new_permissions_event of this Notification.
        :param notification_type: The notification_type of this Notification.
        :param product_approval_event: The product_approval_event of this Notification.
        :param product_availability_change_event: The product_availability_change_event of this Notification.
        :param timestamp_millis: The timestamp_millis of this Notification.
        """
        self.openapi_types = {
            'app_restrictions_schema_change_event': AppRestrictionsSchemaChangeEvent,
            'app_update_event': AppUpdateEvent,
            'device_report_update_event': DeviceReportUpdateEvent,
            'enterprise_id': str,
            'install_failure_event': InstallFailureEvent,
            'new_device_event': NewDeviceEvent,
            'new_permissions_event': NewPermissionsEvent,
            'notification_type': str,
            'product_approval_event': ProductApprovalEvent,
            'product_availability_change_event': ProductAvailabilityChangeEvent,
            'timestamp_millis': str
        }

        self.attribute_map = {
            'app_restrictions_schema_change_event': 'appRestrictionsSchemaChangeEvent',
            'app_update_event': 'appUpdateEvent',
            'device_report_update_event': 'deviceReportUpdateEvent',
            'enterprise_id': 'enterpriseId',
            'install_failure_event': 'installFailureEvent',
            'new_device_event': 'newDeviceEvent',
            'new_permissions_event': 'newPermissionsEvent',
            'notification_type': 'notificationType',
            'product_approval_event': 'productApprovalEvent',
            'product_availability_change_event': 'productAvailabilityChangeEvent',
            'timestamp_millis': 'timestampMillis'
        }

        self._app_restrictions_schema_change_event = app_restrictions_schema_change_event
        self._app_update_event = app_update_event
        self._device_report_update_event = device_report_update_event
        self._enterprise_id = enterprise_id
        self._install_failure_event = install_failure_event
        self._new_device_event = new_device_event
        self._new_permissions_event = new_permissions_event
        self._notification_type = notification_type
        self._product_approval_event = product_approval_event
        self._product_availability_change_event = product_availability_change_event
        self._timestamp_millis = timestamp_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_restrictions_schema_change_event(self):
        """Gets the app_restrictions_schema_change_event of this Notification.


        :return: The app_restrictions_schema_change_event of this Notification.
        :rtype: AppRestrictionsSchemaChangeEvent
        """
        return self._app_restrictions_schema_change_event

    @app_restrictions_schema_change_event.setter
    def app_restrictions_schema_change_event(self, app_restrictions_schema_change_event):
        """Sets the app_restrictions_schema_change_event of this Notification.


        :param app_restrictions_schema_change_event: The app_restrictions_schema_change_event of this Notification.
        :type app_restrictions_schema_change_event: AppRestrictionsSchemaChangeEvent
        """

        self._app_restrictions_schema_change_event = app_restrictions_schema_change_event

    @property
    def app_update_event(self):
        """Gets the app_update_event of this Notification.


        :return: The app_update_event of this Notification.
        :rtype: AppUpdateEvent
        """
        return self._app_update_event

    @app_update_event.setter
    def app_update_event(self, app_update_event):
        """Sets the app_update_event of this Notification.


        :param app_update_event: The app_update_event of this Notification.
        :type app_update_event: AppUpdateEvent
        """

        self._app_update_event = app_update_event

    @property
    def device_report_update_event(self):
        """Gets the device_report_update_event of this Notification.


        :return: The device_report_update_event of this Notification.
        :rtype: DeviceReportUpdateEvent
        """
        return self._device_report_update_event

    @device_report_update_event.setter
    def device_report_update_event(self, device_report_update_event):
        """Sets the device_report_update_event of this Notification.


        :param device_report_update_event: The device_report_update_event of this Notification.
        :type device_report_update_event: DeviceReportUpdateEvent
        """

        self._device_report_update_event = device_report_update_event

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this Notification.

        The ID of the enterprise for which the notification is sent. This will always be present.

        :return: The enterprise_id of this Notification.
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this Notification.

        The ID of the enterprise for which the notification is sent. This will always be present.

        :param enterprise_id: The enterprise_id of this Notification.
        :type enterprise_id: str
        """

        self._enterprise_id = enterprise_id

    @property
    def install_failure_event(self):
        """Gets the install_failure_event of this Notification.


        :return: The install_failure_event of this Notification.
        :rtype: InstallFailureEvent
        """
        return self._install_failure_event

    @install_failure_event.setter
    def install_failure_event(self, install_failure_event):
        """Sets the install_failure_event of this Notification.


        :param install_failure_event: The install_failure_event of this Notification.
        :type install_failure_event: InstallFailureEvent
        """

        self._install_failure_event = install_failure_event

    @property
    def new_device_event(self):
        """Gets the new_device_event of this Notification.


        :return: The new_device_event of this Notification.
        :rtype: NewDeviceEvent
        """
        return self._new_device_event

    @new_device_event.setter
    def new_device_event(self, new_device_event):
        """Sets the new_device_event of this Notification.


        :param new_device_event: The new_device_event of this Notification.
        :type new_device_event: NewDeviceEvent
        """

        self._new_device_event = new_device_event

    @property
    def new_permissions_event(self):
        """Gets the new_permissions_event of this Notification.


        :return: The new_permissions_event of this Notification.
        :rtype: NewPermissionsEvent
        """
        return self._new_permissions_event

    @new_permissions_event.setter
    def new_permissions_event(self, new_permissions_event):
        """Sets the new_permissions_event of this Notification.


        :param new_permissions_event: The new_permissions_event of this Notification.
        :type new_permissions_event: NewPermissionsEvent
        """

        self._new_permissions_event = new_permissions_event

    @property
    def notification_type(self):
        """Gets the notification_type of this Notification.

        Type of the notification.

        :return: The notification_type of this Notification.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this Notification.

        Type of the notification.

        :param notification_type: The notification_type of this Notification.
        :type notification_type: str
        """
        allowed_values = ["unknown", "testNotification", "productApproval", "installFailure", "appUpdate", "newPermissions", "appRestricionsSchemaChange", "productAvailabilityChange", "newDevice", "deviceReportUpdate"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def product_approval_event(self):
        """Gets the product_approval_event of this Notification.


        :return: The product_approval_event of this Notification.
        :rtype: ProductApprovalEvent
        """
        return self._product_approval_event

    @product_approval_event.setter
    def product_approval_event(self, product_approval_event):
        """Sets the product_approval_event of this Notification.


        :param product_approval_event: The product_approval_event of this Notification.
        :type product_approval_event: ProductApprovalEvent
        """

        self._product_approval_event = product_approval_event

    @property
    def product_availability_change_event(self):
        """Gets the product_availability_change_event of this Notification.


        :return: The product_availability_change_event of this Notification.
        :rtype: ProductAvailabilityChangeEvent
        """
        return self._product_availability_change_event

    @product_availability_change_event.setter
    def product_availability_change_event(self, product_availability_change_event):
        """Sets the product_availability_change_event of this Notification.


        :param product_availability_change_event: The product_availability_change_event of this Notification.
        :type product_availability_change_event: ProductAvailabilityChangeEvent
        """

        self._product_availability_change_event = product_availability_change_event

    @property
    def timestamp_millis(self):
        """Gets the timestamp_millis of this Notification.

        The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.

        :return: The timestamp_millis of this Notification.
        :rtype: str
        """
        return self._timestamp_millis

    @timestamp_millis.setter
    def timestamp_millis(self, timestamp_millis):
        """Sets the timestamp_millis of this Notification.

        The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.

        :param timestamp_millis: The timestamp_millis of this Notification.
        :type timestamp_millis: str
        """

        self._timestamp_millis = timestamp_millis
