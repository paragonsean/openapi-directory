# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_id: str=None, reason: str=None):
        """Entitlement - a model defined in OpenAPI

        :param product_id: The product_id of this Entitlement.
        :param reason: The reason of this Entitlement.
        """
        self.openapi_types = {
            'product_id': str,
            'reason': str
        }

        self.attribute_map = {
            'product_id': 'productId',
            'reason': 'reason'
        }

        self._product_id = product_id
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entitlement of this Entitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self):
        """Gets the product_id of this Entitlement.

        The ID of the product that the entitlement is for. For example, \"app:com.google.android.gm\".

        :return: The product_id of this Entitlement.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Entitlement.

        The ID of the product that the entitlement is for. For example, \"app:com.google.android.gm\".

        :param product_id: The product_id of this Entitlement.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def reason(self):
        """Gets the reason of this Entitlement.

        The reason for the entitlement. For example, \"free\" for free apps. This property is temporary: it will be replaced by the acquisition kind field of group licenses.

        :return: The reason of this Entitlement.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Entitlement.

        The reason for the entitlement. For example, \"free\" for free apps. This property is temporary: it will be replaced by the acquisition kind field of group licenses.

        :param reason: The reason of this Entitlement.
        :type reason: str
        """
        allowed_values = ["free", "groupLicense", "userPurchase"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
