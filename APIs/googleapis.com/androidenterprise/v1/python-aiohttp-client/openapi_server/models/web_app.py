# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_app_icon import WebAppIcon
from openapi_server import util


class WebApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_mode: str=None, icons: List[WebAppIcon]=None, is_published: bool=None, start_url: str=None, title: str=None, version_code: str=None, web_app_id: str=None):
        """WebApp - a model defined in OpenAPI

        :param display_mode: The display_mode of this WebApp.
        :param icons: The icons of this WebApp.
        :param is_published: The is_published of this WebApp.
        :param start_url: The start_url of this WebApp.
        :param title: The title of this WebApp.
        :param version_code: The version_code of this WebApp.
        :param web_app_id: The web_app_id of this WebApp.
        """
        self.openapi_types = {
            'display_mode': str,
            'icons': List[WebAppIcon],
            'is_published': bool,
            'start_url': str,
            'title': str,
            'version_code': str,
            'web_app_id': str
        }

        self.attribute_map = {
            'display_mode': 'displayMode',
            'icons': 'icons',
            'is_published': 'isPublished',
            'start_url': 'startUrl',
            'title': 'title',
            'version_code': 'versionCode',
            'web_app_id': 'webAppId'
        }

        self._display_mode = display_mode
        self._icons = icons
        self._is_published = is_published
        self._start_url = start_url
        self._title = title
        self._version_code = version_code
        self._web_app_id = web_app_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebApp of this WebApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_mode(self):
        """Gets the display_mode of this WebApp.

        The display mode of the web app. Possible values include: - \"minimalUi\", the device's status bar, navigation bar, the app's URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - \"standalone\", the device's status bar and navigation bar are visible when the app is open. - \"fullScreen\", the app opens in full screen mode, hiding the device's status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. 

        :return: The display_mode of this WebApp.
        :rtype: str
        """
        return self._display_mode

    @display_mode.setter
    def display_mode(self, display_mode):
        """Sets the display_mode of this WebApp.

        The display mode of the web app. Possible values include: - \"minimalUi\", the device's status bar, navigation bar, the app's URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - \"standalone\", the device's status bar and navigation bar are visible when the app is open. - \"fullScreen\", the app opens in full screen mode, hiding the device's status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. 

        :param display_mode: The display_mode of this WebApp.
        :type display_mode: str
        """
        allowed_values = ["displayModeUnspecified", "minimalUi", "standalone", "fullScreen"]  # noqa: E501
        if display_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `display_mode` ({0}), must be one of {1}"
                .format(display_mode, allowed_values)
            )

        self._display_mode = display_mode

    @property
    def icons(self):
        """Gets the icons of this WebApp.

        A list of icons representing this website. If absent, a default icon (for create) or the current icon (for update) will be used.

        :return: The icons of this WebApp.
        :rtype: List[WebAppIcon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this WebApp.

        A list of icons representing this website. If absent, a default icon (for create) or the current icon (for update) will be used.

        :param icons: The icons of this WebApp.
        :type icons: List[WebAppIcon]
        """

        self._icons = icons

    @property
    def is_published(self):
        """Gets the is_published of this WebApp.

        A flag whether the app has been published to the Play store yet.

        :return: The is_published of this WebApp.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this WebApp.

        A flag whether the app has been published to the Play store yet.

        :param is_published: The is_published of this WebApp.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def start_url(self):
        """Gets the start_url of this WebApp.

        The start URL, i.e. the URL that should load when the user opens the application.

        :return: The start_url of this WebApp.
        :rtype: str
        """
        return self._start_url

    @start_url.setter
    def start_url(self, start_url):
        """Sets the start_url of this WebApp.

        The start URL, i.e. the URL that should load when the user opens the application.

        :param start_url: The start_url of this WebApp.
        :type start_url: str
        """

        self._start_url = start_url

    @property
    def title(self):
        """Gets the title of this WebApp.

        The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).

        :return: The title of this WebApp.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WebApp.

        The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).

        :param title: The title of this WebApp.
        :type title: str
        """

        self._title = title

    @property
    def version_code(self):
        """Gets the version_code of this WebApp.

        The current version of the app. Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.

        :return: The version_code of this WebApp.
        :rtype: str
        """
        return self._version_code

    @version_code.setter
    def version_code(self, version_code):
        """Sets the version_code of this WebApp.

        The current version of the app. Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.

        :param version_code: The version_code of this WebApp.
        :type version_code: str
        """

        self._version_code = version_code

    @property
    def web_app_id(self):
        """Gets the web_app_id of this WebApp.

        The ID of the application. A string of the form \"app:<package name>\" where the package name always starts with the prefix \"com.google.enterprise.webapp.\" followed by a random id.

        :return: The web_app_id of this WebApp.
        :rtype: str
        """
        return self._web_app_id

    @web_app_id.setter
    def web_app_id(self, web_app_id):
        """Sets the web_app_id of this WebApp.

        The ID of the application. A string of the form \"app:<package name>\" where the package name always starts with the prefix \"com.google.enterprise.webapp.\" followed by a random id.

        :param web_app_id: The web_app_id of this WebApp.
        :type web_app_id: str
        """

        self._web_app_id = web_app_id
