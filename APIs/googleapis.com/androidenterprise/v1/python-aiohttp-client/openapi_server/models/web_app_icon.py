# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebAppIcon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_data: str=None):
        """WebAppIcon - a model defined in OpenAPI

        :param image_data: The image_data of this WebAppIcon.
        """
        self.openapi_types = {
            'image_data': str
        }

        self.attribute_map = {
            'image_data': 'imageData'
        }

        self._image_data = image_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebAppIcon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebAppIcon of this WebAppIcon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_data(self):
        """Gets the image_data of this WebAppIcon.

        The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 \"Base 64 Encoding with URL and Filename Safe Alphabet\"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512. 

        :return: The image_data of this WebAppIcon.
        :rtype: str
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data):
        """Sets the image_data of this WebAppIcon.

        The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 \"Base 64 Encoding with URL and Filename Safe Alphabet\"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512. 

        :param image_data: The image_data of this WebAppIcon.
        :type image_data: str
        """

        self._image_data = image_data
