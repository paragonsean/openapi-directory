# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductVisibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_id: str=None, track_ids: List[str]=None, tracks: List[str]=None):
        """ProductVisibility - a model defined in OpenAPI

        :param product_id: The product_id of this ProductVisibility.
        :param track_ids: The track_ids of this ProductVisibility.
        :param tracks: The tracks of this ProductVisibility.
        """
        self.openapi_types = {
            'product_id': str,
            'track_ids': List[str],
            'tracks': List[str]
        }

        self.attribute_map = {
            'product_id': 'productId',
            'track_ids': 'trackIds',
            'tracks': 'tracks'
        }

        self._product_id = product_id
        self._track_ids = track_ids
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductVisibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductVisibility of this ProductVisibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self):
        """Gets the product_id of this ProductVisibility.

        The product ID to make visible to the user. Required for each item in the productVisibility list.

        :return: The product_id of this ProductVisibility.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVisibility.

        The product ID to make visible to the user. Required for each item in the productVisibility list.

        :param product_id: The product_id of this ProductVisibility.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def track_ids(self):
        """Gets the track_ids of this ProductVisibility.

        Grants the user visibility to the specified product track(s), identified by trackIds.

        :return: The track_ids of this ProductVisibility.
        :rtype: List[str]
        """
        return self._track_ids

    @track_ids.setter
    def track_ids(self, track_ids):
        """Sets the track_ids of this ProductVisibility.

        Grants the user visibility to the specified product track(s), identified by trackIds.

        :param track_ids: The track_ids of this ProductVisibility.
        :type track_ids: List[str]
        """

        self._track_ids = track_ids

    @property
    def tracks(self):
        """Gets the tracks of this ProductVisibility.

        Deprecated. Use trackIds instead.

        :return: The tracks of this ProductVisibility.
        :rtype: List[str]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this ProductVisibility.

        Deprecated. Use trackIds instead.

        :param tracks: The tracks of this ProductVisibility.
        :type tracks: List[str]
        """
        allowed_values = ["appTrackUnspecified", "production", "beta", "alpha"]  # noqa: E501
        if not set(tracks).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `tracks` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(tracks) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._tracks = tracks
