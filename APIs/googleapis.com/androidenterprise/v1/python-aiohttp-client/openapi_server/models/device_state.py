# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_state: str=None):
        """DeviceState - a model defined in OpenAPI

        :param account_state: The account_state of this DeviceState.
        """
        self.openapi_types = {
            'account_state': str
        }

        self.attribute_map = {
            'account_state': 'accountState'
        }

        self._account_state = account_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceState of this DeviceState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_state(self):
        """Gets the account_state of this DeviceState.

        The state of the Google account on the device. \"enabled\" indicates that the Google account on the device can be used to access Google services (including Google Play), while \"disabled\" means that it cannot. A new device is initially in the \"disabled\" state.

        :return: The account_state of this DeviceState.
        :rtype: str
        """
        return self._account_state

    @account_state.setter
    def account_state(self, account_state):
        """Sets the account_state of this DeviceState.

        The state of the Google account on the device. \"enabled\" indicates that the Google account on the device can be used to access Google services (including Google Play), while \"disabled\" means that it cannot. A new device is initially in the \"disabled\" state.

        :param account_state: The account_state of this DeviceState.
        :type account_state: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if account_state not in allowed_values:
            raise ValueError(
                "Invalid value for `account_state` ({0}), must be one of {1}"
                .format(account_state, allowed_values)
            )

        self._account_state = account_state
