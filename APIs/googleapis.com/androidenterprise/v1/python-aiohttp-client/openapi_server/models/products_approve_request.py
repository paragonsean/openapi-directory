# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.approval_url_info import ApprovalUrlInfo
from openapi_server import util


class ProductsApproveRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_url_info: ApprovalUrlInfo=None, approved_permissions: str=None):
        """ProductsApproveRequest - a model defined in OpenAPI

        :param approval_url_info: The approval_url_info of this ProductsApproveRequest.
        :param approved_permissions: The approved_permissions of this ProductsApproveRequest.
        """
        self.openapi_types = {
            'approval_url_info': ApprovalUrlInfo,
            'approved_permissions': str
        }

        self.attribute_map = {
            'approval_url_info': 'approvalUrlInfo',
            'approved_permissions': 'approvedPermissions'
        }

        self._approval_url_info = approval_url_info
        self._approved_permissions = approved_permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductsApproveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductsApproveRequest of this ProductsApproveRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_url_info(self):
        """Gets the approval_url_info of this ProductsApproveRequest.


        :return: The approval_url_info of this ProductsApproveRequest.
        :rtype: ApprovalUrlInfo
        """
        return self._approval_url_info

    @approval_url_info.setter
    def approval_url_info(self, approval_url_info):
        """Sets the approval_url_info of this ProductsApproveRequest.


        :param approval_url_info: The approval_url_info of this ProductsApproveRequest.
        :type approval_url_info: ApprovalUrlInfo
        """

        self._approval_url_info = approval_url_info

    @property
    def approved_permissions(self):
        """Gets the approved_permissions of this ProductsApproveRequest.

        Sets how new permission requests for the product are handled. \"allPermissions\" automatically approves all current and future permissions for the product. \"currentPermissionsOnly\" approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.

        :return: The approved_permissions of this ProductsApproveRequest.
        :rtype: str
        """
        return self._approved_permissions

    @approved_permissions.setter
    def approved_permissions(self, approved_permissions):
        """Sets the approved_permissions of this ProductsApproveRequest.

        Sets how new permission requests for the product are handled. \"allPermissions\" automatically approves all current and future permissions for the product. \"currentPermissionsOnly\" approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.

        :param approved_permissions: The approved_permissions of this ProductsApproveRequest.
        :type approved_permissions: str
        """
        allowed_values = ["currentPermissionsOnly", "allPermissions"]  # noqa: E501
        if approved_permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `approved_permissions` ({0}), must be one of {1}"
                .format(approved_permissions, allowed_values)
            )

        self._approved_permissions = approved_permissions
