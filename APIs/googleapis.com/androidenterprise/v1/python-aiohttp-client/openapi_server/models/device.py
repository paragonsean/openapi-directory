# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_report import DeviceReport
from openapi_server.models.policy import Policy
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_id: str=None, device: str=None, latest_build_fingerprint: str=None, maker: str=None, management_type: str=None, model: str=None, policy: Policy=None, product: str=None, report: DeviceReport=None, retail_brand: str=None, sdk_version: int=None):
        """Device - a model defined in OpenAPI

        :param android_id: The android_id of this Device.
        :param device: The device of this Device.
        :param latest_build_fingerprint: The latest_build_fingerprint of this Device.
        :param maker: The maker of this Device.
        :param management_type: The management_type of this Device.
        :param model: The model of this Device.
        :param policy: The policy of this Device.
        :param product: The product of this Device.
        :param report: The report of this Device.
        :param retail_brand: The retail_brand of this Device.
        :param sdk_version: The sdk_version of this Device.
        """
        self.openapi_types = {
            'android_id': str,
            'device': str,
            'latest_build_fingerprint': str,
            'maker': str,
            'management_type': str,
            'model': str,
            'policy': Policy,
            'product': str,
            'report': DeviceReport,
            'retail_brand': str,
            'sdk_version': int
        }

        self.attribute_map = {
            'android_id': 'androidId',
            'device': 'device',
            'latest_build_fingerprint': 'latestBuildFingerprint',
            'maker': 'maker',
            'management_type': 'managementType',
            'model': 'model',
            'policy': 'policy',
            'product': 'product',
            'report': 'report',
            'retail_brand': 'retailBrand',
            'sdk_version': 'sdkVersion'
        }

        self._android_id = android_id
        self._device = device
        self._latest_build_fingerprint = latest_build_fingerprint
        self._maker = maker
        self._management_type = management_type
        self._model = model
        self._policy = policy
        self._product = product
        self._report = report
        self._retail_brand = retail_brand
        self._sdk_version = sdk_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_id(self):
        """Gets the android_id of this Device.

        The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, \"123456789abcdef0\".

        :return: The android_id of this Device.
        :rtype: str
        """
        return self._android_id

    @android_id.setter
    def android_id(self, android_id):
        """Sets the android_id of this Device.

        The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, \"123456789abcdef0\".

        :param android_id: The android_id of this Device.
        :type android_id: str
        """

        self._android_id = android_id

    @property
    def device(self):
        """Gets the device of this Device.

        The internal hardware codename of the device. This comes from android.os.Build.DEVICE. (field named \"device\" per logs/wireless/android/android_checkin.proto)

        :return: The device of this Device.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Device.

        The internal hardware codename of the device. This comes from android.os.Build.DEVICE. (field named \"device\" per logs/wireless/android/android_checkin.proto)

        :param device: The device of this Device.
        :type device: str
        """

        self._device = device

    @property
    def latest_build_fingerprint(self):
        """Gets the latest_build_fingerprint of this Device.

        The build fingerprint of the device if known.

        :return: The latest_build_fingerprint of this Device.
        :rtype: str
        """
        return self._latest_build_fingerprint

    @latest_build_fingerprint.setter
    def latest_build_fingerprint(self, latest_build_fingerprint):
        """Sets the latest_build_fingerprint of this Device.

        The build fingerprint of the device if known.

        :param latest_build_fingerprint: The latest_build_fingerprint of this Device.
        :type latest_build_fingerprint: str
        """

        self._latest_build_fingerprint = latest_build_fingerprint

    @property
    def maker(self):
        """Gets the maker of this Device.

        The manufacturer of the device. This comes from android.os.Build.MANUFACTURER.

        :return: The maker of this Device.
        :rtype: str
        """
        return self._maker

    @maker.setter
    def maker(self, maker):
        """Sets the maker of this Device.

        The manufacturer of the device. This comes from android.os.Build.MANUFACTURER.

        :param maker: The maker of this Device.
        :type maker: str
        """

        self._maker = maker

    @property
    def management_type(self):
        """Gets the management_type of this Device.

        Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device that has the EMM's device policy controller (DPC) as the device owner. - \"managedProfile\", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. - \"containerApp\", no longer used (deprecated). - \"unmanagedProfile\", a device that has been allowed (by the domain's admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC. 

        :return: The management_type of this Device.
        :rtype: str
        """
        return self._management_type

    @management_type.setter
    def management_type(self, management_type):
        """Sets the management_type of this Device.

        Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device that has the EMM's device policy controller (DPC) as the device owner. - \"managedProfile\", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. - \"containerApp\", no longer used (deprecated). - \"unmanagedProfile\", a device that has been allowed (by the domain's admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC. 

        :param management_type: The management_type of this Device.
        :type management_type: str
        """
        allowed_values = ["managedDevice", "managedProfile", "containerApp", "unmanagedProfile"]  # noqa: E501
        if management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `management_type` ({0}), must be one of {1}"
                .format(management_type, allowed_values)
            )

        self._management_type = management_type

    @property
    def model(self):
        """Gets the model of this Device.

        The model name of the device. This comes from android.os.Build.MODEL.

        :return: The model of this Device.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Device.

        The model name of the device. This comes from android.os.Build.MODEL.

        :param model: The model of this Device.
        :type model: str
        """

        self._model = model

    @property
    def policy(self):
        """Gets the policy of this Device.


        :return: The policy of this Device.
        :rtype: Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Device.


        :param policy: The policy of this Device.
        :type policy: Policy
        """

        self._policy = policy

    @property
    def product(self):
        """Gets the product of this Device.

        The product name of the device. This comes from android.os.Build.PRODUCT.

        :return: The product of this Device.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Device.

        The product name of the device. This comes from android.os.Build.PRODUCT.

        :param product: The product of this Device.
        :type product: str
        """

        self._product = product

    @property
    def report(self):
        """Gets the report of this Device.


        :return: The report of this Device.
        :rtype: DeviceReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this Device.


        :param report: The report of this Device.
        :type report: DeviceReport
        """

        self._report = report

    @property
    def retail_brand(self):
        """Gets the retail_brand of this Device.

        Retail brand for the device, if set. See android.os.Build.BRAND

        :return: The retail_brand of this Device.
        :rtype: str
        """
        return self._retail_brand

    @retail_brand.setter
    def retail_brand(self, retail_brand):
        """Sets the retail_brand of this Device.

        Retail brand for the device, if set. See android.os.Build.BRAND

        :param retail_brand: The retail_brand of this Device.
        :type retail_brand: str
        """

        self._retail_brand = retail_brand

    @property
    def sdk_version(self):
        """Gets the sdk_version of this Device.

        API compatibility version.

        :return: The sdk_version of this Device.
        :rtype: int
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this Device.

        API compatibility version.

        :param sdk_version: The sdk_version of this Device.
        :type sdk_version: int
        """

        self._sdk_version = sdk_version
