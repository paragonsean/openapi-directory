# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoInstallConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charging_state_constraint: str=None, device_idle_state_constraint: str=None, network_type_constraint: str=None):
        """AutoInstallConstraint - a model defined in OpenAPI

        :param charging_state_constraint: The charging_state_constraint of this AutoInstallConstraint.
        :param device_idle_state_constraint: The device_idle_state_constraint of this AutoInstallConstraint.
        :param network_type_constraint: The network_type_constraint of this AutoInstallConstraint.
        """
        self.openapi_types = {
            'charging_state_constraint': str,
            'device_idle_state_constraint': str,
            'network_type_constraint': str
        }

        self.attribute_map = {
            'charging_state_constraint': 'chargingStateConstraint',
            'device_idle_state_constraint': 'deviceIdleStateConstraint',
            'network_type_constraint': 'networkTypeConstraint'
        }

        self._charging_state_constraint = charging_state_constraint
        self._device_idle_state_constraint = device_idle_state_constraint
        self._network_type_constraint = network_type_constraint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoInstallConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoInstallConstraint of this AutoInstallConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charging_state_constraint(self):
        """Gets the charging_state_constraint of this AutoInstallConstraint.

        Charging state constraint.

        :return: The charging_state_constraint of this AutoInstallConstraint.
        :rtype: str
        """
        return self._charging_state_constraint

    @charging_state_constraint.setter
    def charging_state_constraint(self, charging_state_constraint):
        """Sets the charging_state_constraint of this AutoInstallConstraint.

        Charging state constraint.

        :param charging_state_constraint: The charging_state_constraint of this AutoInstallConstraint.
        :type charging_state_constraint: str
        """
        allowed_values = ["chargingStateConstraintUnspecified", "chargingNotRequired", "chargingRequired"]  # noqa: E501
        if charging_state_constraint not in allowed_values:
            raise ValueError(
                "Invalid value for `charging_state_constraint` ({0}), must be one of {1}"
                .format(charging_state_constraint, allowed_values)
            )

        self._charging_state_constraint = charging_state_constraint

    @property
    def device_idle_state_constraint(self):
        """Gets the device_idle_state_constraint of this AutoInstallConstraint.

        Device idle state constraint.

        :return: The device_idle_state_constraint of this AutoInstallConstraint.
        :rtype: str
        """
        return self._device_idle_state_constraint

    @device_idle_state_constraint.setter
    def device_idle_state_constraint(self, device_idle_state_constraint):
        """Sets the device_idle_state_constraint of this AutoInstallConstraint.

        Device idle state constraint.

        :param device_idle_state_constraint: The device_idle_state_constraint of this AutoInstallConstraint.
        :type device_idle_state_constraint: str
        """
        allowed_values = ["deviceIdleStateConstraintUnspecified", "deviceIdleNotRequired", "deviceIdleRequired"]  # noqa: E501
        if device_idle_state_constraint not in allowed_values:
            raise ValueError(
                "Invalid value for `device_idle_state_constraint` ({0}), must be one of {1}"
                .format(device_idle_state_constraint, allowed_values)
            )

        self._device_idle_state_constraint = device_idle_state_constraint

    @property
    def network_type_constraint(self):
        """Gets the network_type_constraint of this AutoInstallConstraint.

        Network type constraint.

        :return: The network_type_constraint of this AutoInstallConstraint.
        :rtype: str
        """
        return self._network_type_constraint

    @network_type_constraint.setter
    def network_type_constraint(self, network_type_constraint):
        """Sets the network_type_constraint of this AutoInstallConstraint.

        Network type constraint.

        :param network_type_constraint: The network_type_constraint of this AutoInstallConstraint.
        :type network_type_constraint: str
        """
        allowed_values = ["networkTypeConstraintUnspecified", "anyNetwork", "unmeteredNetwork"]  # noqa: E501
        if network_type_constraint not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type_constraint` ({0}), must be one of {1}"
                .format(network_type_constraint, allowed_values)
            )

        self._network_type_constraint = network_type_constraint
