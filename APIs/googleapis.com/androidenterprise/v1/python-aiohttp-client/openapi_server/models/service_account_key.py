# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAccountKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, id: str=None, public_data: str=None, type: str=None):
        """ServiceAccountKey - a model defined in OpenAPI

        :param data: The data of this ServiceAccountKey.
        :param id: The id of this ServiceAccountKey.
        :param public_data: The public_data of this ServiceAccountKey.
        :param type: The type of this ServiceAccountKey.
        """
        self.openapi_types = {
            'data': str,
            'id': str,
            'public_data': str,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'id': 'id',
            'public_data': 'publicData',
            'type': 'type'
        }

        self._data = data
        self._id = id
        self._public_data = public_data
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAccountKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAccountKey of this ServiceAccountKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this ServiceAccountKey.

        The body of the private key credentials file, in string format. This is only populated when the ServiceAccountKey is created, and is not stored by Google.

        :return: The data of this ServiceAccountKey.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ServiceAccountKey.

        The body of the private key credentials file, in string format. This is only populated when the ServiceAccountKey is created, and is not stored by Google.

        :param data: The data of this ServiceAccountKey.
        :type data: str
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this ServiceAccountKey.

        An opaque, unique identifier for this ServiceAccountKey. Assigned by the server.

        :return: The id of this ServiceAccountKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceAccountKey.

        An opaque, unique identifier for this ServiceAccountKey. Assigned by the server.

        :param id: The id of this ServiceAccountKey.
        :type id: str
        """

        self._id = id

    @property
    def public_data(self):
        """Gets the public_data of this ServiceAccountKey.

        Public key data for the credentials file. This is an X.509 cert. If you are using the googleCredentials key type, this is identical to the cert that can be retrieved by using the X.509 cert url inside of the credentials file.

        :return: The public_data of this ServiceAccountKey.
        :rtype: str
        """
        return self._public_data

    @public_data.setter
    def public_data(self, public_data):
        """Sets the public_data of this ServiceAccountKey.

        Public key data for the credentials file. This is an X.509 cert. If you are using the googleCredentials key type, this is identical to the cert that can be retrieved by using the X.509 cert url inside of the credentials file.

        :param public_data: The public_data of this ServiceAccountKey.
        :type public_data: str
        """

        self._public_data = public_data

    @property
    def type(self):
        """Gets the type of this ServiceAccountKey.

        The file format of the generated key data.

        :return: The type of this ServiceAccountKey.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceAccountKey.

        The file format of the generated key data.

        :param type: The type of this ServiceAccountKey.
        :type type: str
        """
        allowed_values = ["googleCredentials", "pkcs12"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
