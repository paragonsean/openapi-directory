# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification import Notification
from openapi_server import util


class NotificationSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification: List[Notification]=None, notification_set_id: str=None):
        """NotificationSet - a model defined in OpenAPI

        :param notification: The notification of this NotificationSet.
        :param notification_set_id: The notification_set_id of this NotificationSet.
        """
        self.openapi_types = {
            'notification': List[Notification],
            'notification_set_id': str
        }

        self.attribute_map = {
            'notification': 'notification',
            'notification_set_id': 'notificationSetId'
        }

        self._notification = notification
        self._notification_set_id = notification_set_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSet of this NotificationSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification(self):
        """Gets the notification of this NotificationSet.

        The notifications received, or empty if no notifications are present.

        :return: The notification of this NotificationSet.
        :rtype: List[Notification]
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this NotificationSet.

        The notifications received, or empty if no notifications are present.

        :param notification: The notification of this NotificationSet.
        :type notification: List[Notification]
        """

        self._notification = notification

    @property
    def notification_set_id(self):
        """Gets the notification_set_id of this NotificationSet.

        The notification set ID, required to mark the notification as received with the Enterprises.AcknowledgeNotification API. This will be omitted if no notifications are present.

        :return: The notification_set_id of this NotificationSet.
        :rtype: str
        """
        return self._notification_set_id

    @notification_set_id.setter
    def notification_set_id(self, notification_set_id):
        """Sets the notification_set_id of this NotificationSet.

        The notification set ID, required to mark the notification as received with the Enterprises.AcknowledgeNotification API. This will be omitted if no notifications are present.

        :param notification_set_id: The notification_set_id of this NotificationSet.
        :type notification_set_id: str
        """

        self._notification_set_id = notification_set_id
