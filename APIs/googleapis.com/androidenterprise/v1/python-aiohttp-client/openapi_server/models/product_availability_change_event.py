# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductAvailabilityChangeEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_status: str=None, product_id: str=None):
        """ProductAvailabilityChangeEvent - a model defined in OpenAPI

        :param availability_status: The availability_status of this ProductAvailabilityChangeEvent.
        :param product_id: The product_id of this ProductAvailabilityChangeEvent.
        """
        self.openapi_types = {
            'availability_status': str,
            'product_id': str
        }

        self.attribute_map = {
            'availability_status': 'availabilityStatus',
            'product_id': 'productId'
        }

        self._availability_status = availability_status
        self._product_id = product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductAvailabilityChangeEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductAvailabilityChangeEvent of this ProductAvailabilityChangeEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_status(self):
        """Gets the availability_status of this ProductAvailabilityChangeEvent.

        The new state of the product. This field will always be present.

        :return: The availability_status of this ProductAvailabilityChangeEvent.
        :rtype: str
        """
        return self._availability_status

    @availability_status.setter
    def availability_status(self, availability_status):
        """Sets the availability_status of this ProductAvailabilityChangeEvent.

        The new state of the product. This field will always be present.

        :param availability_status: The availability_status of this ProductAvailabilityChangeEvent.
        :type availability_status: str
        """
        allowed_values = ["unknown", "available", "removed", "unpublished"]  # noqa: E501
        if availability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_status` ({0}), must be one of {1}"
                .format(availability_status, allowed_values)
            )

        self._availability_status = availability_status

    @property
    def product_id(self):
        """Gets the product_id of this ProductAvailabilityChangeEvent.

        The id of the product (e.g. \"app:com.google.android.gm\") for which the product availability changed. This field will always be present.

        :return: The product_id of this ProductAvailabilityChangeEvent.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductAvailabilityChangeEvent.

        The id of the product (e.g. \"app:com.google.android.gm\") for which the product availability changed. This field will always be present.

        :param product_id: The product_id of this ProductAvailabilityChangeEvent.
        :type product_id: str
        """

        self._product_id = product_id
