# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_report import DeviceReport
from openapi_server import util


class DeviceReportUpdateEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, report: DeviceReport=None, user_id: str=None):
        """DeviceReportUpdateEvent - a model defined in OpenAPI

        :param device_id: The device_id of this DeviceReportUpdateEvent.
        :param report: The report of this DeviceReportUpdateEvent.
        :param user_id: The user_id of this DeviceReportUpdateEvent.
        """
        self.openapi_types = {
            'device_id': str,
            'report': DeviceReport,
            'user_id': str
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'report': 'report',
            'user_id': 'userId'
        }

        self._device_id = device_id
        self._report = report
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceReportUpdateEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceReportUpdateEvent of this DeviceReportUpdateEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this DeviceReportUpdateEvent.

        The Android ID of the device. This field will always be present.

        :return: The device_id of this DeviceReportUpdateEvent.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceReportUpdateEvent.

        The Android ID of the device. This field will always be present.

        :param device_id: The device_id of this DeviceReportUpdateEvent.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def report(self):
        """Gets the report of this DeviceReportUpdateEvent.


        :return: The report of this DeviceReportUpdateEvent.
        :rtype: DeviceReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this DeviceReportUpdateEvent.


        :param report: The report of this DeviceReportUpdateEvent.
        :type report: DeviceReport
        """

        self._report = report

    @property
    def user_id(self):
        """Gets the user_id of this DeviceReportUpdateEvent.

        The ID of the user. This field will always be present.

        :return: The user_id of this DeviceReportUpdateEvent.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeviceReportUpdateEvent.

        The ID of the user. This field will always be present.

        :param user_id: The user_id of this DeviceReportUpdateEvent.
        :type user_id: str
        """

        self._user_id = user_id
