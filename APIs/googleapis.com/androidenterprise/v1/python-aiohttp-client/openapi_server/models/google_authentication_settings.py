# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAuthenticationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dedicated_devices_allowed: str=None, google_authentication_required: str=None):
        """GoogleAuthenticationSettings - a model defined in OpenAPI

        :param dedicated_devices_allowed: The dedicated_devices_allowed of this GoogleAuthenticationSettings.
        :param google_authentication_required: The google_authentication_required of this GoogleAuthenticationSettings.
        """
        self.openapi_types = {
            'dedicated_devices_allowed': str,
            'google_authentication_required': str
        }

        self.attribute_map = {
            'dedicated_devices_allowed': 'dedicatedDevicesAllowed',
            'google_authentication_required': 'googleAuthenticationRequired'
        }

        self._dedicated_devices_allowed = dedicated_devices_allowed
        self._google_authentication_required = google_authentication_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAuthenticationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAuthenticationSettings of this GoogleAuthenticationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dedicated_devices_allowed(self):
        """Gets the dedicated_devices_allowed of this GoogleAuthenticationSettings.

        Whether dedicated devices are allowed.

        :return: The dedicated_devices_allowed of this GoogleAuthenticationSettings.
        :rtype: str
        """
        return self._dedicated_devices_allowed

    @dedicated_devices_allowed.setter
    def dedicated_devices_allowed(self, dedicated_devices_allowed):
        """Sets the dedicated_devices_allowed of this GoogleAuthenticationSettings.

        Whether dedicated devices are allowed.

        :param dedicated_devices_allowed: The dedicated_devices_allowed of this GoogleAuthenticationSettings.
        :type dedicated_devices_allowed: str
        """
        allowed_values = ["dedicatedDevicesAllowedUnspecified", "disallowed", "allowed"]  # noqa: E501
        if dedicated_devices_allowed not in allowed_values:
            raise ValueError(
                "Invalid value for `dedicated_devices_allowed` ({0}), must be one of {1}"
                .format(dedicated_devices_allowed, allowed_values)
            )

        self._dedicated_devices_allowed = dedicated_devices_allowed

    @property
    def google_authentication_required(self):
        """Gets the google_authentication_required of this GoogleAuthenticationSettings.

        Whether Google authentication is required.

        :return: The google_authentication_required of this GoogleAuthenticationSettings.
        :rtype: str
        """
        return self._google_authentication_required

    @google_authentication_required.setter
    def google_authentication_required(self, google_authentication_required):
        """Sets the google_authentication_required of this GoogleAuthenticationSettings.

        Whether Google authentication is required.

        :param google_authentication_required: The google_authentication_required of this GoogleAuthenticationSettings.
        :type google_authentication_required: str
        """
        allowed_values = ["googleAuthenticationRequiredUnspecified", "notRequired", "required"]  # noqa: E501
        if google_authentication_required not in allowed_values:
            raise ValueError(
                "Invalid value for `google_authentication_required` ({0}), must be one of {1}"
                .format(google_authentication_required, allowed_values)
            )

        self._google_authentication_required = google_authentication_required
