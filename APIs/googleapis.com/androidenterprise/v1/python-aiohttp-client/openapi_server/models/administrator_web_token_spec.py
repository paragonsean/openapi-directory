# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.administrator_web_token_spec_managed_configurations import AdministratorWebTokenSpecManagedConfigurations
from openapi_server.models.administrator_web_token_spec_play_search import AdministratorWebTokenSpecPlaySearch
from openapi_server.models.administrator_web_token_spec_private_apps import AdministratorWebTokenSpecPrivateApps
from openapi_server.models.administrator_web_token_spec_store_builder import AdministratorWebTokenSpecStoreBuilder
from openapi_server.models.administrator_web_token_spec_web_apps import AdministratorWebTokenSpecWebApps
from openapi_server.models.administrator_web_token_spec_zero_touch import AdministratorWebTokenSpecZeroTouch
from openapi_server import util


class AdministratorWebTokenSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_configurations: AdministratorWebTokenSpecManagedConfigurations=None, parent: str=None, permission: List[str]=None, play_search: AdministratorWebTokenSpecPlaySearch=None, private_apps: AdministratorWebTokenSpecPrivateApps=None, store_builder: AdministratorWebTokenSpecStoreBuilder=None, web_apps: AdministratorWebTokenSpecWebApps=None, zero_touch: AdministratorWebTokenSpecZeroTouch=None):
        """AdministratorWebTokenSpec - a model defined in OpenAPI

        :param managed_configurations: The managed_configurations of this AdministratorWebTokenSpec.
        :param parent: The parent of this AdministratorWebTokenSpec.
        :param permission: The permission of this AdministratorWebTokenSpec.
        :param play_search: The play_search of this AdministratorWebTokenSpec.
        :param private_apps: The private_apps of this AdministratorWebTokenSpec.
        :param store_builder: The store_builder of this AdministratorWebTokenSpec.
        :param web_apps: The web_apps of this AdministratorWebTokenSpec.
        :param zero_touch: The zero_touch of this AdministratorWebTokenSpec.
        """
        self.openapi_types = {
            'managed_configurations': AdministratorWebTokenSpecManagedConfigurations,
            'parent': str,
            'permission': List[str],
            'play_search': AdministratorWebTokenSpecPlaySearch,
            'private_apps': AdministratorWebTokenSpecPrivateApps,
            'store_builder': AdministratorWebTokenSpecStoreBuilder,
            'web_apps': AdministratorWebTokenSpecWebApps,
            'zero_touch': AdministratorWebTokenSpecZeroTouch
        }

        self.attribute_map = {
            'managed_configurations': 'managedConfigurations',
            'parent': 'parent',
            'permission': 'permission',
            'play_search': 'playSearch',
            'private_apps': 'privateApps',
            'store_builder': 'storeBuilder',
            'web_apps': 'webApps',
            'zero_touch': 'zeroTouch'
        }

        self._managed_configurations = managed_configurations
        self._parent = parent
        self._permission = permission
        self._play_search = play_search
        self._private_apps = private_apps
        self._store_builder = store_builder
        self._web_apps = web_apps
        self._zero_touch = zero_touch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdministratorWebTokenSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdministratorWebTokenSpec of this AdministratorWebTokenSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_configurations(self):
        """Gets the managed_configurations of this AdministratorWebTokenSpec.


        :return: The managed_configurations of this AdministratorWebTokenSpec.
        :rtype: AdministratorWebTokenSpecManagedConfigurations
        """
        return self._managed_configurations

    @managed_configurations.setter
    def managed_configurations(self, managed_configurations):
        """Sets the managed_configurations of this AdministratorWebTokenSpec.


        :param managed_configurations: The managed_configurations of this AdministratorWebTokenSpec.
        :type managed_configurations: AdministratorWebTokenSpecManagedConfigurations
        """

        self._managed_configurations = managed_configurations

    @property
    def parent(self):
        """Gets the parent of this AdministratorWebTokenSpec.

        The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https. Use whitespaces to separate multiple parent URIs.

        :return: The parent of this AdministratorWebTokenSpec.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AdministratorWebTokenSpec.

        The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https. Use whitespaces to separate multiple parent URIs.

        :param parent: The parent of this AdministratorWebTokenSpec.
        :type parent: str
        """

        self._parent = parent

    @property
    def permission(self):
        """Gets the permission of this AdministratorWebTokenSpec.

        Deprecated. Use PlaySearch.approveApps.

        :return: The permission of this AdministratorWebTokenSpec.
        :rtype: List[str]
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AdministratorWebTokenSpec.

        Deprecated. Use PlaySearch.approveApps.

        :param permission: The permission of this AdministratorWebTokenSpec.
        :type permission: List[str]
        """
        allowed_values = ["unknown", "approveApps", "manageMcm"]  # noqa: E501
        if not set(permission).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permission` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(permission) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._permission = permission

    @property
    def play_search(self):
        """Gets the play_search of this AdministratorWebTokenSpec.


        :return: The play_search of this AdministratorWebTokenSpec.
        :rtype: AdministratorWebTokenSpecPlaySearch
        """
        return self._play_search

    @play_search.setter
    def play_search(self, play_search):
        """Sets the play_search of this AdministratorWebTokenSpec.


        :param play_search: The play_search of this AdministratorWebTokenSpec.
        :type play_search: AdministratorWebTokenSpecPlaySearch
        """

        self._play_search = play_search

    @property
    def private_apps(self):
        """Gets the private_apps of this AdministratorWebTokenSpec.


        :return: The private_apps of this AdministratorWebTokenSpec.
        :rtype: AdministratorWebTokenSpecPrivateApps
        """
        return self._private_apps

    @private_apps.setter
    def private_apps(self, private_apps):
        """Sets the private_apps of this AdministratorWebTokenSpec.


        :param private_apps: The private_apps of this AdministratorWebTokenSpec.
        :type private_apps: AdministratorWebTokenSpecPrivateApps
        """

        self._private_apps = private_apps

    @property
    def store_builder(self):
        """Gets the store_builder of this AdministratorWebTokenSpec.


        :return: The store_builder of this AdministratorWebTokenSpec.
        :rtype: AdministratorWebTokenSpecStoreBuilder
        """
        return self._store_builder

    @store_builder.setter
    def store_builder(self, store_builder):
        """Sets the store_builder of this AdministratorWebTokenSpec.


        :param store_builder: The store_builder of this AdministratorWebTokenSpec.
        :type store_builder: AdministratorWebTokenSpecStoreBuilder
        """

        self._store_builder = store_builder

    @property
    def web_apps(self):
        """Gets the web_apps of this AdministratorWebTokenSpec.


        :return: The web_apps of this AdministratorWebTokenSpec.
        :rtype: AdministratorWebTokenSpecWebApps
        """
        return self._web_apps

    @web_apps.setter
    def web_apps(self, web_apps):
        """Sets the web_apps of this AdministratorWebTokenSpec.


        :param web_apps: The web_apps of this AdministratorWebTokenSpec.
        :type web_apps: AdministratorWebTokenSpecWebApps
        """

        self._web_apps = web_apps

    @property
    def zero_touch(self):
        """Gets the zero_touch of this AdministratorWebTokenSpec.


        :return: The zero_touch of this AdministratorWebTokenSpec.
        :rtype: AdministratorWebTokenSpecZeroTouch
        """
        return self._zero_touch

    @zero_touch.setter
    def zero_touch(self, zero_touch):
        """Sets the zero_touch of this AdministratorWebTokenSpec.


        :param zero_touch: The zero_touch of this AdministratorWebTokenSpec.
        :type zero_touch: AdministratorWebTokenSpecZeroTouch
        """

        self._zero_touch = zero_touch
