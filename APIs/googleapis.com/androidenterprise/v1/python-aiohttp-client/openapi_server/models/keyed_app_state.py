# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyedAppState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, key: str=None, message: str=None, severity: str=None, state_timestamp_millis: str=None):
        """KeyedAppState - a model defined in OpenAPI

        :param data: The data of this KeyedAppState.
        :param key: The key of this KeyedAppState.
        :param message: The message of this KeyedAppState.
        :param severity: The severity of this KeyedAppState.
        :param state_timestamp_millis: The state_timestamp_millis of this KeyedAppState.
        """
        self.openapi_types = {
            'data': str,
            'key': str,
            'message': str,
            'severity': str,
            'state_timestamp_millis': str
        }

        self.attribute_map = {
            'data': 'data',
            'key': 'key',
            'message': 'message',
            'severity': 'severity',
            'state_timestamp_millis': 'stateTimestampMillis'
        }

        self._data = data
        self._key = key
        self._message = message
        self._severity = severity
        self._state_timestamp_millis = state_timestamp_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyedAppState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyedAppState of this KeyedAppState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this KeyedAppState.

        Additional field intended for machine-readable data. For example, a number or JSON object. To prevent XSS, we recommend removing any HTML from the data before displaying it.

        :return: The data of this KeyedAppState.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this KeyedAppState.

        Additional field intended for machine-readable data. For example, a number or JSON object. To prevent XSS, we recommend removing any HTML from the data before displaying it.

        :param data: The data of this KeyedAppState.
        :type data: str
        """

        self._data = data

    @property
    def key(self):
        """Gets the key of this KeyedAppState.

        Key indicating what the app is providing a state for. The content of the key is set by the app's developer. To prevent XSS, we recommend removing any HTML from the key before displaying it. This field will always be present.

        :return: The key of this KeyedAppState.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyedAppState.

        Key indicating what the app is providing a state for. The content of the key is set by the app's developer. To prevent XSS, we recommend removing any HTML from the key before displaying it. This field will always be present.

        :param key: The key of this KeyedAppState.
        :type key: str
        """

        self._key = key

    @property
    def message(self):
        """Gets the message of this KeyedAppState.

        Free-form, human-readable message describing the app state. For example, an error message. To prevent XSS, we recommend removing any HTML from the message before displaying it.

        :return: The message of this KeyedAppState.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this KeyedAppState.

        Free-form, human-readable message describing the app state. For example, an error message. To prevent XSS, we recommend removing any HTML from the message before displaying it.

        :param message: The message of this KeyedAppState.
        :type message: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this KeyedAppState.

        Severity of the app state. This field will always be present.

        :return: The severity of this KeyedAppState.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this KeyedAppState.

        Severity of the app state. This field will always be present.

        :param severity: The severity of this KeyedAppState.
        :type severity: str
        """
        allowed_values = ["severityUnknown", "severityInfo", "severityError"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def state_timestamp_millis(self):
        """Gets the state_timestamp_millis of this KeyedAppState.

        Timestamp of when the app set the state in milliseconds since epoch. This field will always be present.

        :return: The state_timestamp_millis of this KeyedAppState.
        :rtype: str
        """
        return self._state_timestamp_millis

    @state_timestamp_millis.setter
    def state_timestamp_millis(self, state_timestamp_millis):
        """Sets the state_timestamp_millis of this KeyedAppState.

        Timestamp of when the app set the state in milliseconds since epoch. This field will always be present.

        :param state_timestamp_millis: The state_timestamp_millis of this KeyedAppState.
        :type state_timestamp_millis: str
        """

        self._state_timestamp_millis = state_timestamp_millis
