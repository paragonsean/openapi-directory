# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_production: bool=None, target_sdk_version: int=None, track: str=None, track_id: List[str]=None, version_code: int=None, version_string: str=None):
        """AppVersion - a model defined in OpenAPI

        :param is_production: The is_production of this AppVersion.
        :param target_sdk_version: The target_sdk_version of this AppVersion.
        :param track: The track of this AppVersion.
        :param track_id: The track_id of this AppVersion.
        :param version_code: The version_code of this AppVersion.
        :param version_string: The version_string of this AppVersion.
        """
        self.openapi_types = {
            'is_production': bool,
            'target_sdk_version': int,
            'track': str,
            'track_id': List[str],
            'version_code': int,
            'version_string': str
        }

        self.attribute_map = {
            'is_production': 'isProduction',
            'target_sdk_version': 'targetSdkVersion',
            'track': 'track',
            'track_id': 'trackId',
            'version_code': 'versionCode',
            'version_string': 'versionString'
        }

        self._is_production = is_production
        self._target_sdk_version = target_sdk_version
        self._track = track
        self._track_id = track_id
        self._version_code = version_code
        self._version_string = version_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppVersion of this AppVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_production(self):
        """Gets the is_production of this AppVersion.

        True if this version is a production APK.

        :return: The is_production of this AppVersion.
        :rtype: bool
        """
        return self._is_production

    @is_production.setter
    def is_production(self, is_production):
        """Sets the is_production of this AppVersion.

        True if this version is a production APK.

        :param is_production: The is_production of this AppVersion.
        :type is_production: bool
        """

        self._is_production = is_production

    @property
    def target_sdk_version(self):
        """Gets the target_sdk_version of this AppVersion.

        The SDK version this app targets, as specified in the manifest of the APK. See http://developer.android.com/guide/topics/manifest/uses-sdk-element.html

        :return: The target_sdk_version of this AppVersion.
        :rtype: int
        """
        return self._target_sdk_version

    @target_sdk_version.setter
    def target_sdk_version(self, target_sdk_version):
        """Sets the target_sdk_version of this AppVersion.

        The SDK version this app targets, as specified in the manifest of the APK. See http://developer.android.com/guide/topics/manifest/uses-sdk-element.html

        :param target_sdk_version: The target_sdk_version of this AppVersion.
        :type target_sdk_version: int
        """

        self._target_sdk_version = target_sdk_version

    @property
    def track(self):
        """Gets the track of this AppVersion.

        Deprecated, use trackId instead.

        :return: The track of this AppVersion.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this AppVersion.

        Deprecated, use trackId instead.

        :param track: The track of this AppVersion.
        :type track: str
        """
        allowed_values = ["appTrackUnspecified", "production", "beta", "alpha"]  # noqa: E501
        if track not in allowed_values:
            raise ValueError(
                "Invalid value for `track` ({0}), must be one of {1}"
                .format(track, allowed_values)
            )

        self._track = track

    @property
    def track_id(self):
        """Gets the track_id of this AppVersion.

        Track ids that the app version is published in. Replaces the track field (deprecated), but doesn't include the production track (see isProduction instead).

        :return: The track_id of this AppVersion.
        :rtype: List[str]
        """
        return self._track_id

    @track_id.setter
    def track_id(self, track_id):
        """Sets the track_id of this AppVersion.

        Track ids that the app version is published in. Replaces the track field (deprecated), but doesn't include the production track (see isProduction instead).

        :param track_id: The track_id of this AppVersion.
        :type track_id: List[str]
        """

        self._track_id = track_id

    @property
    def version_code(self):
        """Gets the version_code of this AppVersion.

        Unique increasing identifier for the app version.

        :return: The version_code of this AppVersion.
        :rtype: int
        """
        return self._version_code

    @version_code.setter
    def version_code(self, version_code):
        """Sets the version_code of this AppVersion.

        Unique increasing identifier for the app version.

        :param version_code: The version_code of this AppVersion.
        :type version_code: int
        """

        self._version_code = version_code

    @property
    def version_string(self):
        """Gets the version_string of this AppVersion.

        The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be \"1.4\").

        :return: The version_string of this AppVersion.
        :rtype: str
        """
        return self._version_string

    @version_string.setter
    def version_string(self, version_string):
        """Sets the version_string of this AppVersion.

        The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be \"1.4\").

        :param version_string: The version_string of this AppVersion.
        :type version_string: str
        """

        self._version_string = version_string
