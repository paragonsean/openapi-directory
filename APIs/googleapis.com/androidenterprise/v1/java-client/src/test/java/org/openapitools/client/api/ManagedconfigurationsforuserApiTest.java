/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ManagedConfiguration;
import org.openapitools.client.model.ManagedConfigurationsForUserListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagedconfigurationsforuserApi
 */
@Disabled
public class ManagedconfigurationsforuserApiTest {

    private final ManagedconfigurationsforuserApi api = new ManagedconfigurationsforuserApi();

    /**
     * Removes a per-user managed configuration for an app for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseManagedconfigurationsforuserDeleteTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String managedConfigurationForUserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidenterpriseManagedconfigurationsforuserDelete(enterpriseId, userId, managedConfigurationForUserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves details of a per-user managed configuration for an app for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseManagedconfigurationsforuserGetTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String managedConfigurationForUserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManagedConfiguration response = api.androidenterpriseManagedconfigurationsforuserGet(enterpriseId, userId, managedConfigurationForUserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all the per-user managed configurations for the specified user. Only the ID is set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseManagedconfigurationsforuserListTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManagedConfigurationsForUserListResponse response = api.androidenterpriseManagedconfigurationsforuserList(enterpriseId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Adds or updates the managed configuration settings for an app for the specified user. If you support the Managed configurations iframe, you can apply managed configurations to a user by specifying an mcmId and its associated configuration variables (if any) in the request. Alternatively, all EMMs can apply managed configurations by passing a list of managed properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseManagedconfigurationsforuserUpdateTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String managedConfigurationForUserId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManagedConfiguration managedConfiguration = null;
        ManagedConfiguration response = api.androidenterpriseManagedconfigurationsforuserUpdate(enterpriseId, userId, managedConfigurationForUserId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, managedConfiguration);
        // TODO: test validations
    }

}
