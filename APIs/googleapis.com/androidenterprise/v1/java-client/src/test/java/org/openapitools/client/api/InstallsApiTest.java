/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Install;
import org.openapitools.client.model.InstallsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstallsApi
 */
@Disabled
public class InstallsApiTest {

    private final InstallsApi api = new InstallsApi();

    /**
     * Requests to remove an app from a device. A call to get or list will still show the app as installed on the device until it is actually removed. A successful response indicates that a removal request has been sent to the device. The call will be considered successful even if the app is not present on the device (e.g. it was never installed, or was removed by the user).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseInstallsDeleteTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String deviceId = null;
        String installId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidenterpriseInstallsDelete(enterpriseId, userId, deviceId, installId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves details of an installation of an app on a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseInstallsGetTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String deviceId = null;
        String installId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Install response = api.androidenterpriseInstallsGet(enterpriseId, userId, deviceId, installId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the details of all apps installed on the specified device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseInstallsListTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String deviceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstallsListResponse response = api.androidenterpriseInstallsList(enterpriseId, userId, deviceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Requests to install the latest version of an app to a device. If the app is already installed, then it is updated to the latest version if necessary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseInstallsUpdateTest() throws ApiException {
        String enterpriseId = null;
        String userId = null;
        String deviceId = null;
        String installId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Install install = null;
        Install response = api.androidenterpriseInstallsUpdate(enterpriseId, userId, deviceId, installId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, install);
        // TODO: test validations
    }

}
