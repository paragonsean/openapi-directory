/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdministratorWebToken;
import org.openapitools.client.model.AdministratorWebTokenSpec;
import org.openapitools.client.model.CreateEnrollmentTokenResponse;
import org.openapitools.client.model.Enterprise;
import org.openapitools.client.model.EnterpriseAccount;
import org.openapitools.client.model.EnterprisesListResponse;
import org.openapitools.client.model.EnterprisesSendTestPushNotificationResponse;
import org.openapitools.client.model.NotificationSet;
import org.openapitools.client.model.ServiceAccount;
import org.openapitools.client.model.SignupInfo;
import org.openapitools.client.model.StoreLayout;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnterprisesApi
 */
@Disabled
public class EnterprisesApiTest {

    private final EnterprisesApi api = new EnterprisesApi();

    /**
     * Acknowledges notifications that were received from Enterprises.PullNotificationSet to prevent subsequent calls from returning the same notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesAcknowledgeNotificationSetTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String notificationSetId = null;
        api.androidenterpriseEnterprisesAcknowledgeNotificationSet($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, notificationSetId);
        // TODO: test validations
    }

    /**
     * Completes the signup flow, by specifying the Completion token and Enterprise token. This request must not be called multiple times for a given Enterprise Token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesCompleteSignupTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String completionToken = null;
        String enterpriseToken = null;
        Enterprise response = api.androidenterpriseEnterprisesCompleteSignup($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completionToken, enterpriseToken);
        // TODO: test validations
    }

    /**
     * Returns a token for device enrollment. The DPC can encode this token within the QR/NFC/zero-touch enrollment payload or fetch it before calling the on-device API to authenticate the user. The token can be generated for each device or reused across multiple devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesCreateEnrollmentTokenTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String deviceType = null;
        CreateEnrollmentTokenResponse response = api.androidenterpriseEnterprisesCreateEnrollmentToken(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deviceType);
        // TODO: test validations
    }

    /**
     * Returns a unique token to access an embeddable UI. To generate a web UI, pass the generated token into the managed Google Play javascript API. Each token may only be used to start one UI session. See the javascript API documentation for further information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesCreateWebTokenTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AdministratorWebTokenSpec administratorWebTokenSpec = null;
        AdministratorWebToken response = api.androidenterpriseEnterprisesCreateWebToken(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, administratorWebTokenSpec);
        // TODO: test validations
    }

    /**
     * Enrolls an enterprise with the calling EMM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesEnrollTest() throws ApiException {
        String token = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Enterprise enterprise = null;
        Enterprise response = api.androidenterpriseEnterprisesEnroll(token, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enterprise);
        // TODO: test validations
    }

    /**
     * Generates a sign-up URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesGenerateSignupUrlTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String callbackUrl = null;
        SignupInfo response = api.androidenterpriseEnterprisesGenerateSignupUrl($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, callbackUrl);
        // TODO: test validations
    }

    /**
     * Retrieves the name and domain of an enterprise.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesGetTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Enterprise response = api.androidenterpriseEnterprisesGet(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns a service account and credentials. The service account can be bound to the enterprise by calling setAccount. The service account is unique to this enterprise and EMM, and will be deleted if the enterprise is unbound. The credentials contain private key data and are not stored server-side. This method can only be called after calling Enterprises.Enroll or Enterprises.CompleteSignup, and before Enterprises.SetAccount; at other times it will return an error. Subsequent calls after the first will generate a new, unique set of credentials, and invalidate the previously generated credentials. Once the service account is bound to the enterprise, it can be managed using the serviceAccountKeys resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesGetServiceAccountTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String keyType = null;
        ServiceAccount response = api.androidenterpriseEnterprisesGetServiceAccount(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, keyType);
        // TODO: test validations
    }

    /**
     * Returns the store layout for the enterprise. If the store layout has not been set, returns \&quot;basic\&quot; as the store layout type and no homepage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesGetStoreLayoutTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StoreLayout response = api.androidenterpriseEnterprisesGetStoreLayout(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Looks up an enterprise by domain name. This is only supported for enterprises created via the Google-initiated creation flow. Lookup of the id is not needed for enterprises created via the EMM-initiated flow since the EMM learns the enterprise ID in the callback specified in the Enterprises.generateSignupUrl call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesListTest() throws ApiException {
        String domain = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EnterprisesListResponse response = api.androidenterpriseEnterprisesList(domain, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Pulls and returns a notification set for the enterprises associated with the service account authenticated for the request. The notification set may be empty if no notification are pending. A notification set returned needs to be acknowledged within 20 seconds by calling Enterprises.AcknowledgeNotificationSet, unless the notification set is empty. Notifications that are not acknowledged within the 20 seconds will eventually be included again in the response to another PullNotificationSet request, and those that are never acknowledged will ultimately be deleted according to the Google Cloud Platform Pub/Sub system policy. Multiple requests might be performed concurrently to retrieve notifications, in which case the pending notifications (if any) will be split among each caller, if any are pending. If no notifications are present, an empty notification list is returned. Subsequent requests may return more notifications once they become available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesPullNotificationSetTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestMode = null;
        NotificationSet response = api.androidenterpriseEnterprisesPullNotificationSet($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestMode);
        // TODO: test validations
    }

    /**
     * Sends a test notification to validate the EMM integration with the Google Cloud Pub/Sub service for this enterprise.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesSendTestPushNotificationTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EnterprisesSendTestPushNotificationResponse response = api.androidenterpriseEnterprisesSendTestPushNotification(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Sets the account that will be used to authenticate to the API as the enterprise.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesSetAccountTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EnterpriseAccount enterpriseAccount = null;
        EnterpriseAccount response = api.androidenterpriseEnterprisesSetAccount(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enterpriseAccount);
        // TODO: test validations
    }

    /**
     * Sets the store layout for the enterprise. By default, storeLayoutType is set to \&quot;basic\&quot; and the basic store layout is enabled. The basic layout only contains apps approved by the admin, and that have been added to the available product set for a user (using the setAvailableProductSet call). Apps on the page are sorted in order of their product ID value. If you create a custom store layout (by setting storeLayoutType &#x3D; \&quot;custom\&quot; and setting a homepage), the basic store layout is disabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesSetStoreLayoutTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StoreLayout storeLayout = null;
        StoreLayout response = api.androidenterpriseEnterprisesSetStoreLayout(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, storeLayout);
        // TODO: test validations
    }

    /**
     * Unenrolls an enterprise from the calling EMM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidenterpriseEnterprisesUnenrollTest() throws ApiException {
        String enterpriseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidenterpriseEnterprisesUnenroll(enterpriseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
