/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The existence of an Installs resource indicates that an app is installed on a particular device (or that an install is pending). The API can be used to create an install resource using the update method. This triggers the actual install of the app on the device. If the user does not already have an entitlement for the app, then an attempt is made to create one. If this fails (for example, because the app is not free and there is no available license), then the creation of the install fails. The API can also be used to update an installed app. If the update method is used on an existing install, then the app will be updated to the latest available version. Note that it is not possible to force the installation of a specific version of an app: the version code is read-only. If a user installs an app themselves (as permitted by the enterprise), then again an install resource and possibly an entitlement resource are automatically created. The API can also be used to delete an install resource, which triggers the removal of the app from the device. Note that deleting an install does not automatically remove the corresponding entitlement, even if there are no remaining installs. The install resource will also be deleted if the user uninstalls the app themselves.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Install {
  /**
   * Install state. The state \&quot;installPending\&quot; means that an install request has recently been made and download to the device is in progress. The state \&quot;installed\&quot; means that the app has been installed. This field is read-only.
   */
  @JsonAdapter(InstallStateEnum.Adapter.class)
  public enum InstallStateEnum {
    INSTALLED("installed"),
    
    INSTALL_PENDING("installPending");

    private String value;

    InstallStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstallStateEnum fromValue(String value) {
      for (InstallStateEnum b : InstallStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstallStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstallStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstallStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstallStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstallStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTALL_STATE = "installState";
  @SerializedName(SERIALIZED_NAME_INSTALL_STATE)
  private InstallStateEnum installState;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_VERSION_CODE = "versionCode";
  @SerializedName(SERIALIZED_NAME_VERSION_CODE)
  private Integer versionCode;

  public Install() {
  }

  public Install installState(InstallStateEnum installState) {
    this.installState = installState;
    return this;
  }

  /**
   * Install state. The state \&quot;installPending\&quot; means that an install request has recently been made and download to the device is in progress. The state \&quot;installed\&quot; means that the app has been installed. This field is read-only.
   * @return installState
   */
  @javax.annotation.Nullable
  public InstallStateEnum getInstallState() {
    return installState;
  }

  public void setInstallState(InstallStateEnum installState) {
    this.installState = installState;
  }


  public Install productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The ID of the product that the install is for. For example, \&quot;app:com.google.android.gm\&quot;.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Install versionCode(Integer versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  /**
   * The version of the installed product. Guaranteed to be set only if the install state is \&quot;installed\&quot;.
   * @return versionCode
   */
  @javax.annotation.Nullable
  public Integer getVersionCode() {
    return versionCode;
  }

  public void setVersionCode(Integer versionCode) {
    this.versionCode = versionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Install install = (Install) o;
    return Objects.equals(this.installState, install.installState) &&
        Objects.equals(this.productId, install.productId) &&
        Objects.equals(this.versionCode, install.versionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(installState, productId, versionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Install {\n");
    sb.append("    installState: ").append(toIndentedString(installState)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    versionCode: ").append(toIndentedString(versionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("installState");
    openapiFields.add("productId");
    openapiFields.add("versionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Install
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Install.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Install is not found in the empty JSON string", Install.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Install.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Install` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("installState") != null && !jsonObj.get("installState").isJsonNull()) && !jsonObj.get("installState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installState").toString()));
      }
      // validate the optional field `installState`
      if (jsonObj.get("installState") != null && !jsonObj.get("installState").isJsonNull()) {
        InstallStateEnum.validateJsonElement(jsonObj.get("installState"));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Install.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Install' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Install> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Install.class));

       return (TypeAdapter<T>) new TypeAdapter<Install>() {
           @Override
           public void write(JsonWriter out, Install value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Install read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Install given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Install
   * @throws IOException if the JSON string is invalid with respect to Install
   */
  public static Install fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Install.class);
  }

  /**
   * Convert an instance of Install to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

