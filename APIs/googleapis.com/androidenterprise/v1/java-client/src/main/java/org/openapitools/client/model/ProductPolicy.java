/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoInstallPolicy;
import org.openapitools.client.model.EnterpriseAuthenticationAppLinkConfig;
import org.openapitools.client.model.ManagedConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The policy for a product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductPolicy {
  public static final String SERIALIZED_NAME_AUTO_INSTALL_POLICY = "autoInstallPolicy";
  @SerializedName(SERIALIZED_NAME_AUTO_INSTALL_POLICY)
  private AutoInstallPolicy autoInstallPolicy;

  /**
   * The auto-update mode for the product. When autoUpdateMode is used, it always takes precedence over the user&#39;s choice. So when a user makes changes to the device settings manually, these changes are ignored.
   */
  @JsonAdapter(AutoUpdateModeEnum.Adapter.class)
  public enum AutoUpdateModeEnum {
    AUTO_UPDATE_MODE_UNSPECIFIED("autoUpdateModeUnspecified"),
    
    AUTO_UPDATE_DEFAULT("autoUpdateDefault"),
    
    AUTO_UPDATE_POSTPONED("autoUpdatePostponed"),
    
    AUTO_UPDATE_HIGH_PRIORITY("autoUpdateHighPriority");

    private String value;

    AutoUpdateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoUpdateModeEnum fromValue(String value) {
      for (AutoUpdateModeEnum b : AutoUpdateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoUpdateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoUpdateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoUpdateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoUpdateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoUpdateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_UPDATE_MODE = "autoUpdateMode";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE_MODE)
  private AutoUpdateModeEnum autoUpdateMode;

  public static final String SERIALIZED_NAME_ENTERPRISE_AUTHENTICATION_APP_LINK_CONFIGS = "enterpriseAuthenticationAppLinkConfigs";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_AUTHENTICATION_APP_LINK_CONFIGS)
  private List<EnterpriseAuthenticationAppLinkConfig> enterpriseAuthenticationAppLinkConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGED_CONFIGURATION = "managedConfiguration";
  @SerializedName(SERIALIZED_NAME_MANAGED_CONFIGURATION)
  private ManagedConfiguration managedConfiguration;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_TRACK_IDS = "trackIds";
  @SerializedName(SERIALIZED_NAME_TRACK_IDS)
  private List<String> trackIds = new ArrayList<>();

  /**
   * Gets or Sets tracks
   */
  @JsonAdapter(TracksEnum.Adapter.class)
  public enum TracksEnum {
    APP_TRACK_UNSPECIFIED("appTrackUnspecified"),
    
    PRODUCTION("production"),
    
    BETA("beta"),
    
    ALPHA("alpha");

    private String value;

    TracksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TracksEnum fromValue(String value) {
      for (TracksEnum b : TracksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TracksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TracksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TracksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TracksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TracksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<TracksEnum> tracks = new ArrayList<>();

  public ProductPolicy() {
  }

  public ProductPolicy autoInstallPolicy(AutoInstallPolicy autoInstallPolicy) {
    this.autoInstallPolicy = autoInstallPolicy;
    return this;
  }

  /**
   * Get autoInstallPolicy
   * @return autoInstallPolicy
   */
  @javax.annotation.Nullable
  public AutoInstallPolicy getAutoInstallPolicy() {
    return autoInstallPolicy;
  }

  public void setAutoInstallPolicy(AutoInstallPolicy autoInstallPolicy) {
    this.autoInstallPolicy = autoInstallPolicy;
  }


  public ProductPolicy autoUpdateMode(AutoUpdateModeEnum autoUpdateMode) {
    this.autoUpdateMode = autoUpdateMode;
    return this;
  }

  /**
   * The auto-update mode for the product. When autoUpdateMode is used, it always takes precedence over the user&#39;s choice. So when a user makes changes to the device settings manually, these changes are ignored.
   * @return autoUpdateMode
   */
  @javax.annotation.Nullable
  public AutoUpdateModeEnum getAutoUpdateMode() {
    return autoUpdateMode;
  }

  public void setAutoUpdateMode(AutoUpdateModeEnum autoUpdateMode) {
    this.autoUpdateMode = autoUpdateMode;
  }


  public ProductPolicy enterpriseAuthenticationAppLinkConfigs(List<EnterpriseAuthenticationAppLinkConfig> enterpriseAuthenticationAppLinkConfigs) {
    this.enterpriseAuthenticationAppLinkConfigs = enterpriseAuthenticationAppLinkConfigs;
    return this;
  }

  public ProductPolicy addEnterpriseAuthenticationAppLinkConfigsItem(EnterpriseAuthenticationAppLinkConfig enterpriseAuthenticationAppLinkConfigsItem) {
    if (this.enterpriseAuthenticationAppLinkConfigs == null) {
      this.enterpriseAuthenticationAppLinkConfigs = new ArrayList<>();
    }
    this.enterpriseAuthenticationAppLinkConfigs.add(enterpriseAuthenticationAppLinkConfigsItem);
    return this;
  }

  /**
   * An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider&#39;s authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the default handler for the authentication url on the device.
   * @return enterpriseAuthenticationAppLinkConfigs
   */
  @javax.annotation.Nullable
  public List<EnterpriseAuthenticationAppLinkConfig> getEnterpriseAuthenticationAppLinkConfigs() {
    return enterpriseAuthenticationAppLinkConfigs;
  }

  public void setEnterpriseAuthenticationAppLinkConfigs(List<EnterpriseAuthenticationAppLinkConfig> enterpriseAuthenticationAppLinkConfigs) {
    this.enterpriseAuthenticationAppLinkConfigs = enterpriseAuthenticationAppLinkConfigs;
  }


  public ProductPolicy managedConfiguration(ManagedConfiguration managedConfiguration) {
    this.managedConfiguration = managedConfiguration;
    return this;
  }

  /**
   * Get managedConfiguration
   * @return managedConfiguration
   */
  @javax.annotation.Nullable
  public ManagedConfiguration getManagedConfiguration() {
    return managedConfiguration;
  }

  public void setManagedConfiguration(ManagedConfiguration managedConfiguration) {
    this.managedConfiguration = managedConfiguration;
  }


  public ProductPolicy productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The ID of the product. For example, \&quot;app:com.google.android.gm\&quot;.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ProductPolicy trackIds(List<String> trackIds) {
    this.trackIds = trackIds;
    return this;
  }

  public ProductPolicy addTrackIdsItem(String trackIdsItem) {
    if (this.trackIds == null) {
      this.trackIds = new ArrayList<>();
    }
    this.trackIds.add(trackIdsItem);
    return this;
  }

  /**
   * Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get.
   * @return trackIds
   */
  @javax.annotation.Nullable
  public List<String> getTrackIds() {
    return trackIds;
  }

  public void setTrackIds(List<String> trackIds) {
    this.trackIds = trackIds;
  }


  public ProductPolicy tracks(List<TracksEnum> tracks) {
    this.tracks = tracks;
    return this;
  }

  public ProductPolicy addTracksItem(TracksEnum tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * Deprecated. Use trackIds instead.
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<TracksEnum> getTracks() {
    return tracks;
  }

  public void setTracks(List<TracksEnum> tracks) {
    this.tracks = tracks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductPolicy productPolicy = (ProductPolicy) o;
    return Objects.equals(this.autoInstallPolicy, productPolicy.autoInstallPolicy) &&
        Objects.equals(this.autoUpdateMode, productPolicy.autoUpdateMode) &&
        Objects.equals(this.enterpriseAuthenticationAppLinkConfigs, productPolicy.enterpriseAuthenticationAppLinkConfigs) &&
        Objects.equals(this.managedConfiguration, productPolicy.managedConfiguration) &&
        Objects.equals(this.productId, productPolicy.productId) &&
        Objects.equals(this.trackIds, productPolicy.trackIds) &&
        Objects.equals(this.tracks, productPolicy.tracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoInstallPolicy, autoUpdateMode, enterpriseAuthenticationAppLinkConfigs, managedConfiguration, productId, trackIds, tracks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductPolicy {\n");
    sb.append("    autoInstallPolicy: ").append(toIndentedString(autoInstallPolicy)).append("\n");
    sb.append("    autoUpdateMode: ").append(toIndentedString(autoUpdateMode)).append("\n");
    sb.append("    enterpriseAuthenticationAppLinkConfigs: ").append(toIndentedString(enterpriseAuthenticationAppLinkConfigs)).append("\n");
    sb.append("    managedConfiguration: ").append(toIndentedString(managedConfiguration)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    trackIds: ").append(toIndentedString(trackIds)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoInstallPolicy");
    openapiFields.add("autoUpdateMode");
    openapiFields.add("enterpriseAuthenticationAppLinkConfigs");
    openapiFields.add("managedConfiguration");
    openapiFields.add("productId");
    openapiFields.add("trackIds");
    openapiFields.add("tracks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductPolicy is not found in the empty JSON string", ProductPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoInstallPolicy`
      if (jsonObj.get("autoInstallPolicy") != null && !jsonObj.get("autoInstallPolicy").isJsonNull()) {
        AutoInstallPolicy.validateJsonElement(jsonObj.get("autoInstallPolicy"));
      }
      if ((jsonObj.get("autoUpdateMode") != null && !jsonObj.get("autoUpdateMode").isJsonNull()) && !jsonObj.get("autoUpdateMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoUpdateMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoUpdateMode").toString()));
      }
      // validate the optional field `autoUpdateMode`
      if (jsonObj.get("autoUpdateMode") != null && !jsonObj.get("autoUpdateMode").isJsonNull()) {
        AutoUpdateModeEnum.validateJsonElement(jsonObj.get("autoUpdateMode"));
      }
      if (jsonObj.get("enterpriseAuthenticationAppLinkConfigs") != null && !jsonObj.get("enterpriseAuthenticationAppLinkConfigs").isJsonNull()) {
        JsonArray jsonArrayenterpriseAuthenticationAppLinkConfigs = jsonObj.getAsJsonArray("enterpriseAuthenticationAppLinkConfigs");
        if (jsonArrayenterpriseAuthenticationAppLinkConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enterpriseAuthenticationAppLinkConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enterpriseAuthenticationAppLinkConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("enterpriseAuthenticationAppLinkConfigs").toString()));
          }

          // validate the optional field `enterpriseAuthenticationAppLinkConfigs` (array)
          for (int i = 0; i < jsonArrayenterpriseAuthenticationAppLinkConfigs.size(); i++) {
            EnterpriseAuthenticationAppLinkConfig.validateJsonElement(jsonArrayenterpriseAuthenticationAppLinkConfigs.get(i));
          };
        }
      }
      // validate the optional field `managedConfiguration`
      if (jsonObj.get("managedConfiguration") != null && !jsonObj.get("managedConfiguration").isJsonNull()) {
        ManagedConfiguration.validateJsonElement(jsonObj.get("managedConfiguration"));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trackIds") != null && !jsonObj.get("trackIds").isJsonNull() && !jsonObj.get("trackIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackIds` to be an array in the JSON string but got `%s`", jsonObj.get("trackIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull() && !jsonObj.get("tracks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductPolicy>() {
           @Override
           public void write(JsonWriter out, ProductPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductPolicy
   * @throws IOException if the JSON string is invalid with respect to ProductPolicy
   */
  public static ProductPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductPolicy.class);
  }

  /**
   * Convert an instance of ProductPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

