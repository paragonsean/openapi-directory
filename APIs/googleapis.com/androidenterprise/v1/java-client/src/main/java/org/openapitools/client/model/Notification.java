/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppRestrictionsSchemaChangeEvent;
import org.openapitools.client.model.AppUpdateEvent;
import org.openapitools.client.model.DeviceReportUpdateEvent;
import org.openapitools.client.model.InstallFailureEvent;
import org.openapitools.client.model.NewDeviceEvent;
import org.openapitools.client.model.NewPermissionsEvent;
import org.openapitools.client.model.ProductApprovalEvent;
import org.openapitools.client.model.ProductAvailabilityChangeEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A notification of one event relating to an enterprise.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Notification {
  public static final String SERIALIZED_NAME_APP_RESTRICTIONS_SCHEMA_CHANGE_EVENT = "appRestrictionsSchemaChangeEvent";
  @SerializedName(SERIALIZED_NAME_APP_RESTRICTIONS_SCHEMA_CHANGE_EVENT)
  private AppRestrictionsSchemaChangeEvent appRestrictionsSchemaChangeEvent;

  public static final String SERIALIZED_NAME_APP_UPDATE_EVENT = "appUpdateEvent";
  @SerializedName(SERIALIZED_NAME_APP_UPDATE_EVENT)
  private AppUpdateEvent appUpdateEvent;

  public static final String SERIALIZED_NAME_DEVICE_REPORT_UPDATE_EVENT = "deviceReportUpdateEvent";
  @SerializedName(SERIALIZED_NAME_DEVICE_REPORT_UPDATE_EVENT)
  private DeviceReportUpdateEvent deviceReportUpdateEvent;

  public static final String SERIALIZED_NAME_ENTERPRISE_ID = "enterpriseId";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_ID)
  private String enterpriseId;

  public static final String SERIALIZED_NAME_INSTALL_FAILURE_EVENT = "installFailureEvent";
  @SerializedName(SERIALIZED_NAME_INSTALL_FAILURE_EVENT)
  private InstallFailureEvent installFailureEvent;

  public static final String SERIALIZED_NAME_NEW_DEVICE_EVENT = "newDeviceEvent";
  @SerializedName(SERIALIZED_NAME_NEW_DEVICE_EVENT)
  private NewDeviceEvent newDeviceEvent;

  public static final String SERIALIZED_NAME_NEW_PERMISSIONS_EVENT = "newPermissionsEvent";
  @SerializedName(SERIALIZED_NAME_NEW_PERMISSIONS_EVENT)
  private NewPermissionsEvent newPermissionsEvent;

  /**
   * Type of the notification.
   */
  @JsonAdapter(NotificationTypeEnum.Adapter.class)
  public enum NotificationTypeEnum {
    UNKNOWN("unknown"),
    
    TEST_NOTIFICATION("testNotification"),
    
    PRODUCT_APPROVAL("productApproval"),
    
    INSTALL_FAILURE("installFailure"),
    
    APP_UPDATE("appUpdate"),
    
    NEW_PERMISSIONS("newPermissions"),
    
    APP_RESTRICIONS_SCHEMA_CHANGE("appRestricionsSchemaChange"),
    
    PRODUCT_AVAILABILITY_CHANGE("productAvailabilityChange"),
    
    NEW_DEVICE("newDevice"),
    
    DEVICE_REPORT_UPDATE("deviceReportUpdate");

    private String value;

    NotificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotificationTypeEnum fromValue(String value) {
      for (NotificationTypeEnum b : NotificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotificationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NotificationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private NotificationTypeEnum notificationType;

  public static final String SERIALIZED_NAME_PRODUCT_APPROVAL_EVENT = "productApprovalEvent";
  @SerializedName(SERIALIZED_NAME_PRODUCT_APPROVAL_EVENT)
  private ProductApprovalEvent productApprovalEvent;

  public static final String SERIALIZED_NAME_PRODUCT_AVAILABILITY_CHANGE_EVENT = "productAvailabilityChangeEvent";
  @SerializedName(SERIALIZED_NAME_PRODUCT_AVAILABILITY_CHANGE_EVENT)
  private ProductAvailabilityChangeEvent productAvailabilityChangeEvent;

  public static final String SERIALIZED_NAME_TIMESTAMP_MILLIS = "timestampMillis";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_MILLIS)
  private String timestampMillis;

  public Notification() {
  }

  public Notification appRestrictionsSchemaChangeEvent(AppRestrictionsSchemaChangeEvent appRestrictionsSchemaChangeEvent) {
    this.appRestrictionsSchemaChangeEvent = appRestrictionsSchemaChangeEvent;
    return this;
  }

  /**
   * Get appRestrictionsSchemaChangeEvent
   * @return appRestrictionsSchemaChangeEvent
   */
  @javax.annotation.Nullable
  public AppRestrictionsSchemaChangeEvent getAppRestrictionsSchemaChangeEvent() {
    return appRestrictionsSchemaChangeEvent;
  }

  public void setAppRestrictionsSchemaChangeEvent(AppRestrictionsSchemaChangeEvent appRestrictionsSchemaChangeEvent) {
    this.appRestrictionsSchemaChangeEvent = appRestrictionsSchemaChangeEvent;
  }


  public Notification appUpdateEvent(AppUpdateEvent appUpdateEvent) {
    this.appUpdateEvent = appUpdateEvent;
    return this;
  }

  /**
   * Get appUpdateEvent
   * @return appUpdateEvent
   */
  @javax.annotation.Nullable
  public AppUpdateEvent getAppUpdateEvent() {
    return appUpdateEvent;
  }

  public void setAppUpdateEvent(AppUpdateEvent appUpdateEvent) {
    this.appUpdateEvent = appUpdateEvent;
  }


  public Notification deviceReportUpdateEvent(DeviceReportUpdateEvent deviceReportUpdateEvent) {
    this.deviceReportUpdateEvent = deviceReportUpdateEvent;
    return this;
  }

  /**
   * Get deviceReportUpdateEvent
   * @return deviceReportUpdateEvent
   */
  @javax.annotation.Nullable
  public DeviceReportUpdateEvent getDeviceReportUpdateEvent() {
    return deviceReportUpdateEvent;
  }

  public void setDeviceReportUpdateEvent(DeviceReportUpdateEvent deviceReportUpdateEvent) {
    this.deviceReportUpdateEvent = deviceReportUpdateEvent;
  }


  public Notification enterpriseId(String enterpriseId) {
    this.enterpriseId = enterpriseId;
    return this;
  }

  /**
   * The ID of the enterprise for which the notification is sent. This will always be present.
   * @return enterpriseId
   */
  @javax.annotation.Nullable
  public String getEnterpriseId() {
    return enterpriseId;
  }

  public void setEnterpriseId(String enterpriseId) {
    this.enterpriseId = enterpriseId;
  }


  public Notification installFailureEvent(InstallFailureEvent installFailureEvent) {
    this.installFailureEvent = installFailureEvent;
    return this;
  }

  /**
   * Get installFailureEvent
   * @return installFailureEvent
   */
  @javax.annotation.Nullable
  public InstallFailureEvent getInstallFailureEvent() {
    return installFailureEvent;
  }

  public void setInstallFailureEvent(InstallFailureEvent installFailureEvent) {
    this.installFailureEvent = installFailureEvent;
  }


  public Notification newDeviceEvent(NewDeviceEvent newDeviceEvent) {
    this.newDeviceEvent = newDeviceEvent;
    return this;
  }

  /**
   * Get newDeviceEvent
   * @return newDeviceEvent
   */
  @javax.annotation.Nullable
  public NewDeviceEvent getNewDeviceEvent() {
    return newDeviceEvent;
  }

  public void setNewDeviceEvent(NewDeviceEvent newDeviceEvent) {
    this.newDeviceEvent = newDeviceEvent;
  }


  public Notification newPermissionsEvent(NewPermissionsEvent newPermissionsEvent) {
    this.newPermissionsEvent = newPermissionsEvent;
    return this;
  }

  /**
   * Get newPermissionsEvent
   * @return newPermissionsEvent
   */
  @javax.annotation.Nullable
  public NewPermissionsEvent getNewPermissionsEvent() {
    return newPermissionsEvent;
  }

  public void setNewPermissionsEvent(NewPermissionsEvent newPermissionsEvent) {
    this.newPermissionsEvent = newPermissionsEvent;
  }


  public Notification notificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Type of the notification.
   * @return notificationType
   */
  @javax.annotation.Nullable
  public NotificationTypeEnum getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
  }


  public Notification productApprovalEvent(ProductApprovalEvent productApprovalEvent) {
    this.productApprovalEvent = productApprovalEvent;
    return this;
  }

  /**
   * Get productApprovalEvent
   * @return productApprovalEvent
   */
  @javax.annotation.Nullable
  public ProductApprovalEvent getProductApprovalEvent() {
    return productApprovalEvent;
  }

  public void setProductApprovalEvent(ProductApprovalEvent productApprovalEvent) {
    this.productApprovalEvent = productApprovalEvent;
  }


  public Notification productAvailabilityChangeEvent(ProductAvailabilityChangeEvent productAvailabilityChangeEvent) {
    this.productAvailabilityChangeEvent = productAvailabilityChangeEvent;
    return this;
  }

  /**
   * Get productAvailabilityChangeEvent
   * @return productAvailabilityChangeEvent
   */
  @javax.annotation.Nullable
  public ProductAvailabilityChangeEvent getProductAvailabilityChangeEvent() {
    return productAvailabilityChangeEvent;
  }

  public void setProductAvailabilityChangeEvent(ProductAvailabilityChangeEvent productAvailabilityChangeEvent) {
    this.productAvailabilityChangeEvent = productAvailabilityChangeEvent;
  }


  public Notification timestampMillis(String timestampMillis) {
    this.timestampMillis = timestampMillis;
    return this;
  }

  /**
   * The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.
   * @return timestampMillis
   */
  @javax.annotation.Nullable
  public String getTimestampMillis() {
    return timestampMillis;
  }

  public void setTimestampMillis(String timestampMillis) {
    this.timestampMillis = timestampMillis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.appRestrictionsSchemaChangeEvent, notification.appRestrictionsSchemaChangeEvent) &&
        Objects.equals(this.appUpdateEvent, notification.appUpdateEvent) &&
        Objects.equals(this.deviceReportUpdateEvent, notification.deviceReportUpdateEvent) &&
        Objects.equals(this.enterpriseId, notification.enterpriseId) &&
        Objects.equals(this.installFailureEvent, notification.installFailureEvent) &&
        Objects.equals(this.newDeviceEvent, notification.newDeviceEvent) &&
        Objects.equals(this.newPermissionsEvent, notification.newPermissionsEvent) &&
        Objects.equals(this.notificationType, notification.notificationType) &&
        Objects.equals(this.productApprovalEvent, notification.productApprovalEvent) &&
        Objects.equals(this.productAvailabilityChangeEvent, notification.productAvailabilityChangeEvent) &&
        Objects.equals(this.timestampMillis, notification.timestampMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appRestrictionsSchemaChangeEvent, appUpdateEvent, deviceReportUpdateEvent, enterpriseId, installFailureEvent, newDeviceEvent, newPermissionsEvent, notificationType, productApprovalEvent, productAvailabilityChangeEvent, timestampMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    sb.append("    appRestrictionsSchemaChangeEvent: ").append(toIndentedString(appRestrictionsSchemaChangeEvent)).append("\n");
    sb.append("    appUpdateEvent: ").append(toIndentedString(appUpdateEvent)).append("\n");
    sb.append("    deviceReportUpdateEvent: ").append(toIndentedString(deviceReportUpdateEvent)).append("\n");
    sb.append("    enterpriseId: ").append(toIndentedString(enterpriseId)).append("\n");
    sb.append("    installFailureEvent: ").append(toIndentedString(installFailureEvent)).append("\n");
    sb.append("    newDeviceEvent: ").append(toIndentedString(newDeviceEvent)).append("\n");
    sb.append("    newPermissionsEvent: ").append(toIndentedString(newPermissionsEvent)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    productApprovalEvent: ").append(toIndentedString(productApprovalEvent)).append("\n");
    sb.append("    productAvailabilityChangeEvent: ").append(toIndentedString(productAvailabilityChangeEvent)).append("\n");
    sb.append("    timestampMillis: ").append(toIndentedString(timestampMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appRestrictionsSchemaChangeEvent");
    openapiFields.add("appUpdateEvent");
    openapiFields.add("deviceReportUpdateEvent");
    openapiFields.add("enterpriseId");
    openapiFields.add("installFailureEvent");
    openapiFields.add("newDeviceEvent");
    openapiFields.add("newPermissionsEvent");
    openapiFields.add("notificationType");
    openapiFields.add("productApprovalEvent");
    openapiFields.add("productAvailabilityChangeEvent");
    openapiFields.add("timestampMillis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Notification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Notification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Notification is not found in the empty JSON string", Notification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Notification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Notification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appRestrictionsSchemaChangeEvent`
      if (jsonObj.get("appRestrictionsSchemaChangeEvent") != null && !jsonObj.get("appRestrictionsSchemaChangeEvent").isJsonNull()) {
        AppRestrictionsSchemaChangeEvent.validateJsonElement(jsonObj.get("appRestrictionsSchemaChangeEvent"));
      }
      // validate the optional field `appUpdateEvent`
      if (jsonObj.get("appUpdateEvent") != null && !jsonObj.get("appUpdateEvent").isJsonNull()) {
        AppUpdateEvent.validateJsonElement(jsonObj.get("appUpdateEvent"));
      }
      // validate the optional field `deviceReportUpdateEvent`
      if (jsonObj.get("deviceReportUpdateEvent") != null && !jsonObj.get("deviceReportUpdateEvent").isJsonNull()) {
        DeviceReportUpdateEvent.validateJsonElement(jsonObj.get("deviceReportUpdateEvent"));
      }
      if ((jsonObj.get("enterpriseId") != null && !jsonObj.get("enterpriseId").isJsonNull()) && !jsonObj.get("enterpriseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterpriseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterpriseId").toString()));
      }
      // validate the optional field `installFailureEvent`
      if (jsonObj.get("installFailureEvent") != null && !jsonObj.get("installFailureEvent").isJsonNull()) {
        InstallFailureEvent.validateJsonElement(jsonObj.get("installFailureEvent"));
      }
      // validate the optional field `newDeviceEvent`
      if (jsonObj.get("newDeviceEvent") != null && !jsonObj.get("newDeviceEvent").isJsonNull()) {
        NewDeviceEvent.validateJsonElement(jsonObj.get("newDeviceEvent"));
      }
      // validate the optional field `newPermissionsEvent`
      if (jsonObj.get("newPermissionsEvent") != null && !jsonObj.get("newPermissionsEvent").isJsonNull()) {
        NewPermissionsEvent.validateJsonElement(jsonObj.get("newPermissionsEvent"));
      }
      if ((jsonObj.get("notificationType") != null && !jsonObj.get("notificationType").isJsonNull()) && !jsonObj.get("notificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationType").toString()));
      }
      // validate the optional field `notificationType`
      if (jsonObj.get("notificationType") != null && !jsonObj.get("notificationType").isJsonNull()) {
        NotificationTypeEnum.validateJsonElement(jsonObj.get("notificationType"));
      }
      // validate the optional field `productApprovalEvent`
      if (jsonObj.get("productApprovalEvent") != null && !jsonObj.get("productApprovalEvent").isJsonNull()) {
        ProductApprovalEvent.validateJsonElement(jsonObj.get("productApprovalEvent"));
      }
      // validate the optional field `productAvailabilityChangeEvent`
      if (jsonObj.get("productAvailabilityChangeEvent") != null && !jsonObj.get("productAvailabilityChangeEvent").isJsonNull()) {
        ProductAvailabilityChangeEvent.validateJsonElement(jsonObj.get("productAvailabilityChangeEvent"));
      }
      if ((jsonObj.get("timestampMillis") != null && !jsonObj.get("timestampMillis").isJsonNull()) && !jsonObj.get("timestampMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampMillis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Notification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Notification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Notification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Notification.class));

       return (TypeAdapter<T>) new TypeAdapter<Notification>() {
           @Override
           public void write(JsonWriter out, Notification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Notification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Notification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Notification
   * @throws IOException if the JSON string is invalid with respect to Notification
   */
  public static Notification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Notification.class);
  }

  /**
   * Convert an instance of Notification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

