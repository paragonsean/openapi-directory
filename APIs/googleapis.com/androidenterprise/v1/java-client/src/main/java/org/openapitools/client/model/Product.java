/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppRestrictionsSchema;
import org.openapitools.client.model.AppVersion;
import org.openapitools.client.model.ProductPermission;
import org.openapitools.client.model.ProductSigningCertificate;
import org.openapitools.client.model.TrackInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Products resource represents an app in the Google Play store that is available to at least some users in the enterprise. (Some apps are restricted to a single enterprise, and no information about them is made available outside that enterprise.) The information provided for each product (localized name, icon, link to the full Google Play details page) is intended to allow a basic representation of the product within an EMM user interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Product {
  public static final String SERIALIZED_NAME_APP_RESTRICTIONS_SCHEMA = "appRestrictionsSchema";
  @SerializedName(SERIALIZED_NAME_APP_RESTRICTIONS_SCHEMA)
  private AppRestrictionsSchema appRestrictionsSchema;

  public static final String SERIALIZED_NAME_APP_TRACKS = "appTracks";
  @SerializedName(SERIALIZED_NAME_APP_TRACKS)
  private List<TrackInfo> appTracks = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private List<AppVersion> appVersion = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "authorName";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_AVAILABLE_COUNTRIES = "availableCountries";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_COUNTRIES)
  private List<String> availableCountries = new ArrayList<>();

  /**
   * Gets or Sets availableTracks
   */
  @JsonAdapter(AvailableTracksEnum.Adapter.class)
  public enum AvailableTracksEnum {
    APP_TRACK_UNSPECIFIED("appTrackUnspecified"),
    
    PRODUCTION("production"),
    
    BETA("beta"),
    
    ALPHA("alpha");

    private String value;

    AvailableTracksEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableTracksEnum fromValue(String value) {
      for (AvailableTracksEnum b : AvailableTracksEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailableTracksEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableTracksEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableTracksEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailableTracksEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailableTracksEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_TRACKS = "availableTracks";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TRACKS)
  private List<AvailableTracksEnum> availableTracks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  /**
   * The content rating for this app.
   */
  @JsonAdapter(ContentRatingEnum.Adapter.class)
  public enum ContentRatingEnum {
    RATING_UNKNOWN("ratingUnknown"),
    
    ALL("all"),
    
    PRE_TEEN("preTeen"),
    
    TEEN("teen"),
    
    MATURE("mature");

    private String value;

    ContentRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRatingEnum fromValue(String value) {
      for (ContentRatingEnum b : ContentRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_RATING = "contentRating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private ContentRatingEnum contentRating;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETAILS_URL = "detailsUrl";
  @SerializedName(SERIALIZED_NAME_DETAILS_URL)
  private String detailsUrl;

  /**
   * How and to whom the package is made available. The value publicGoogleHosted means that the package is available through the Play store and not restricted to a specific enterprise. The value privateGoogleHosted means that the package is a private app (restricted to an enterprise) but hosted by Google. The value privateSelfHosted means that the package is a private app (restricted to an enterprise) and is privately hosted.
   */
  @JsonAdapter(DistributionChannelEnum.Adapter.class)
  public enum DistributionChannelEnum {
    PUBLIC_GOOGLE_HOSTED("publicGoogleHosted"),
    
    PRIVATE_GOOGLE_HOSTED("privateGoogleHosted"),
    
    PRIVATE_SELF_HOSTED("privateSelfHosted");

    private String value;

    DistributionChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DistributionChannelEnum fromValue(String value) {
      for (DistributionChannelEnum b : DistributionChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DistributionChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DistributionChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DistributionChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DistributionChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DistributionChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISTRIBUTION_CHANNEL = "distributionChannel";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_CHANNEL)
  private DistributionChannelEnum distributionChannel;

  /**
   * Gets or Sets features
   */
  @JsonAdapter(FeaturesEnum.Adapter.class)
  public enum FeaturesEnum {
    FEATURE_UNKNOWN("featureUnknown"),
    
    VPN_APP("vpnApp");

    private String value;

    FeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeaturesEnum fromValue(String value) {
      for (FeaturesEnum b : FeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<FeaturesEnum> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_DESCRIPTION = "fullDescription";
  @SerializedName(SERIALIZED_NAME_FULL_DESCRIPTION)
  private String fullDescription;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP_MILLIS = "lastUpdatedTimestampMillis";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP_MILLIS)
  private String lastUpdatedTimestampMillis;

  public static final String SERIALIZED_NAME_MIN_ANDROID_SDK_VERSION = "minAndroidSdkVersion";
  @SerializedName(SERIALIZED_NAME_MIN_ANDROID_SDK_VERSION)
  private Integer minAndroidSdkVersion;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<ProductPermission> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  /**
   * Whether this product is free, free with in-app purchases, or paid. If the pricing is unknown, this means the product is not generally available anymore (even though it might still be available to people who own it).
   */
  @JsonAdapter(ProductPricingEnum.Adapter.class)
  public enum ProductPricingEnum {
    UNKNOWN("unknown"),
    
    FREE("free"),
    
    FREE_WITH_IN_APP_PURCHASE("freeWithInAppPurchase"),
    
    PAID("paid");

    private String value;

    ProductPricingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductPricingEnum fromValue(String value) {
      for (ProductPricingEnum b : ProductPricingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductPricingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductPricingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductPricingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductPricingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductPricingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_PRICING = "productPricing";
  @SerializedName(SERIALIZED_NAME_PRODUCT_PRICING)
  private ProductPricingEnum productPricing;

  public static final String SERIALIZED_NAME_RECENT_CHANGES = "recentChanges";
  @SerializedName(SERIALIZED_NAME_RECENT_CHANGES)
  private String recentChanges;

  public static final String SERIALIZED_NAME_REQUIRES_CONTAINER_APP = "requiresContainerApp";
  @SerializedName(SERIALIZED_NAME_REQUIRES_CONTAINER_APP)
  private Boolean requiresContainerApp;

  public static final String SERIALIZED_NAME_SCREENSHOT_URLS = "screenshotUrls";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_URLS)
  private List<String> screenshotUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNING_CERTIFICATE = "signingCertificate";
  @SerializedName(SERIALIZED_NAME_SIGNING_CERTIFICATE)
  private ProductSigningCertificate signingCertificate;

  public static final String SERIALIZED_NAME_SMALL_ICON_URL = "smallIconUrl";
  @SerializedName(SERIALIZED_NAME_SMALL_ICON_URL)
  private String smallIconUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_WORK_DETAILS_URL = "workDetailsUrl";
  @SerializedName(SERIALIZED_NAME_WORK_DETAILS_URL)
  private String workDetailsUrl;

  public Product() {
  }

  public Product appRestrictionsSchema(AppRestrictionsSchema appRestrictionsSchema) {
    this.appRestrictionsSchema = appRestrictionsSchema;
    return this;
  }

  /**
   * Get appRestrictionsSchema
   * @return appRestrictionsSchema
   */
  @javax.annotation.Nullable
  public AppRestrictionsSchema getAppRestrictionsSchema() {
    return appRestrictionsSchema;
  }

  public void setAppRestrictionsSchema(AppRestrictionsSchema appRestrictionsSchema) {
    this.appRestrictionsSchema = appRestrictionsSchema;
  }


  public Product appTracks(List<TrackInfo> appTracks) {
    this.appTracks = appTracks;
    return this;
  }

  public Product addAppTracksItem(TrackInfo appTracksItem) {
    if (this.appTracks == null) {
      this.appTracks = new ArrayList<>();
    }
    this.appTracks.add(appTracksItem);
    return this;
  }

  /**
   * The tracks visible to the enterprise.
   * @return appTracks
   */
  @javax.annotation.Nullable
  public List<TrackInfo> getAppTracks() {
    return appTracks;
  }

  public void setAppTracks(List<TrackInfo> appTracks) {
    this.appTracks = appTracks;
  }


  public Product appVersion(List<AppVersion> appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public Product addAppVersionItem(AppVersion appVersionItem) {
    if (this.appVersion == null) {
      this.appVersion = new ArrayList<>();
    }
    this.appVersion.add(appVersionItem);
    return this;
  }

  /**
   * App versions currently available for this product.
   * @return appVersion
   */
  @javax.annotation.Nullable
  public List<AppVersion> getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(List<AppVersion> appVersion) {
    this.appVersion = appVersion;
  }


  public Product authorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * The name of the author of the product (for example, the app developer).
   * @return authorName
   */
  @javax.annotation.Nullable
  public String getAuthorName() {
    return authorName;
  }

  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }


  public Product availableCountries(List<String> availableCountries) {
    this.availableCountries = availableCountries;
    return this;
  }

  public Product addAvailableCountriesItem(String availableCountriesItem) {
    if (this.availableCountries == null) {
      this.availableCountries = new ArrayList<>();
    }
    this.availableCountries.add(availableCountriesItem);
    return this;
  }

  /**
   * The countries which this app is available in.
   * @return availableCountries
   */
  @javax.annotation.Nullable
  public List<String> getAvailableCountries() {
    return availableCountries;
  }

  public void setAvailableCountries(List<String> availableCountries) {
    this.availableCountries = availableCountries;
  }


  public Product availableTracks(List<AvailableTracksEnum> availableTracks) {
    this.availableTracks = availableTracks;
    return this;
  }

  public Product addAvailableTracksItem(AvailableTracksEnum availableTracksItem) {
    if (this.availableTracks == null) {
      this.availableTracks = new ArrayList<>();
    }
    this.availableTracks.add(availableTracksItem);
    return this;
  }

  /**
   * Deprecated, use appTracks instead.
   * @return availableTracks
   */
  @javax.annotation.Nullable
  public List<AvailableTracksEnum> getAvailableTracks() {
    return availableTracks;
  }

  public void setAvailableTracks(List<AvailableTracksEnum> availableTracks) {
    this.availableTracks = availableTracks;
  }


  public Product category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The app category (e.g. RACING, SOCIAL, etc.)
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Product contentRating(ContentRatingEnum contentRating) {
    this.contentRating = contentRating;
    return this;
  }

  /**
   * The content rating for this app.
   * @return contentRating
   */
  @javax.annotation.Nullable
  public ContentRatingEnum getContentRating() {
    return contentRating;
  }

  public void setContentRating(ContentRatingEnum contentRating) {
    this.contentRating = contentRating;
  }


  public Product description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The localized promotional description, if available.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Product detailsUrl(String detailsUrl) {
    this.detailsUrl = detailsUrl;
    return this;
  }

  /**
   * A link to the (consumer) Google Play details page for the product.
   * @return detailsUrl
   */
  @javax.annotation.Nullable
  public String getDetailsUrl() {
    return detailsUrl;
  }

  public void setDetailsUrl(String detailsUrl) {
    this.detailsUrl = detailsUrl;
  }


  public Product distributionChannel(DistributionChannelEnum distributionChannel) {
    this.distributionChannel = distributionChannel;
    return this;
  }

  /**
   * How and to whom the package is made available. The value publicGoogleHosted means that the package is available through the Play store and not restricted to a specific enterprise. The value privateGoogleHosted means that the package is a private app (restricted to an enterprise) but hosted by Google. The value privateSelfHosted means that the package is a private app (restricted to an enterprise) and is privately hosted.
   * @return distributionChannel
   */
  @javax.annotation.Nullable
  public DistributionChannelEnum getDistributionChannel() {
    return distributionChannel;
  }

  public void setDistributionChannel(DistributionChannelEnum distributionChannel) {
    this.distributionChannel = distributionChannel;
  }


  public Product features(List<FeaturesEnum> features) {
    this.features = features;
    return this;
  }

  public Product addFeaturesItem(FeaturesEnum featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Noteworthy features (if any) of this product.
   * @return features
   */
  @javax.annotation.Nullable
  public List<FeaturesEnum> getFeatures() {
    return features;
  }

  public void setFeatures(List<FeaturesEnum> features) {
    this.features = features;
  }


  public Product fullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
    return this;
  }

  /**
   * The localized full app store description, if available.
   * @return fullDescription
   */
  @javax.annotation.Nullable
  public String getFullDescription() {
    return fullDescription;
  }

  public void setFullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
  }


  public Product iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * A link to an image that can be used as an icon for the product. This image is suitable for use at up to 512px x 512px.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public Product lastUpdatedTimestampMillis(String lastUpdatedTimestampMillis) {
    this.lastUpdatedTimestampMillis = lastUpdatedTimestampMillis;
    return this;
  }

  /**
   * The approximate time (within 7 days) the app was last published, expressed in milliseconds since epoch.
   * @return lastUpdatedTimestampMillis
   */
  @javax.annotation.Nullable
  public String getLastUpdatedTimestampMillis() {
    return lastUpdatedTimestampMillis;
  }

  public void setLastUpdatedTimestampMillis(String lastUpdatedTimestampMillis) {
    this.lastUpdatedTimestampMillis = lastUpdatedTimestampMillis;
  }


  public Product minAndroidSdkVersion(Integer minAndroidSdkVersion) {
    this.minAndroidSdkVersion = minAndroidSdkVersion;
    return this;
  }

  /**
   * The minimum Android SDK necessary to run the app.
   * @return minAndroidSdkVersion
   */
  @javax.annotation.Nullable
  public Integer getMinAndroidSdkVersion() {
    return minAndroidSdkVersion;
  }

  public void setMinAndroidSdkVersion(Integer minAndroidSdkVersion) {
    this.minAndroidSdkVersion = minAndroidSdkVersion;
  }


  public Product permissions(List<ProductPermission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public Product addPermissionsItem(ProductPermission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * A list of permissions required by the app.
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<ProductPermission> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<ProductPermission> permissions) {
    this.permissions = permissions;
  }


  public Product productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * A string of the form *app:&lt;package name&gt;*. For example, app:com.google.android.gm represents the Gmail app.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Product productPricing(ProductPricingEnum productPricing) {
    this.productPricing = productPricing;
    return this;
  }

  /**
   * Whether this product is free, free with in-app purchases, or paid. If the pricing is unknown, this means the product is not generally available anymore (even though it might still be available to people who own it).
   * @return productPricing
   */
  @javax.annotation.Nullable
  public ProductPricingEnum getProductPricing() {
    return productPricing;
  }

  public void setProductPricing(ProductPricingEnum productPricing) {
    this.productPricing = productPricing;
  }


  public Product recentChanges(String recentChanges) {
    this.recentChanges = recentChanges;
    return this;
  }

  /**
   * A description of the recent changes made to the app.
   * @return recentChanges
   */
  @javax.annotation.Nullable
  public String getRecentChanges() {
    return recentChanges;
  }

  public void setRecentChanges(String recentChanges) {
    this.recentChanges = recentChanges;
  }


  public Product requiresContainerApp(Boolean requiresContainerApp) {
    this.requiresContainerApp = requiresContainerApp;
    return this;
  }

  /**
   * Deprecated.
   * @return requiresContainerApp
   */
  @javax.annotation.Nullable
  public Boolean getRequiresContainerApp() {
    return requiresContainerApp;
  }

  public void setRequiresContainerApp(Boolean requiresContainerApp) {
    this.requiresContainerApp = requiresContainerApp;
  }


  public Product screenshotUrls(List<String> screenshotUrls) {
    this.screenshotUrls = screenshotUrls;
    return this;
  }

  public Product addScreenshotUrlsItem(String screenshotUrlsItem) {
    if (this.screenshotUrls == null) {
      this.screenshotUrls = new ArrayList<>();
    }
    this.screenshotUrls.add(screenshotUrlsItem);
    return this;
  }

  /**
   * A list of screenshot links representing the app.
   * @return screenshotUrls
   */
  @javax.annotation.Nullable
  public List<String> getScreenshotUrls() {
    return screenshotUrls;
  }

  public void setScreenshotUrls(List<String> screenshotUrls) {
    this.screenshotUrls = screenshotUrls;
  }


  public Product signingCertificate(ProductSigningCertificate signingCertificate) {
    this.signingCertificate = signingCertificate;
    return this;
  }

  /**
   * Get signingCertificate
   * @return signingCertificate
   */
  @javax.annotation.Nullable
  public ProductSigningCertificate getSigningCertificate() {
    return signingCertificate;
  }

  public void setSigningCertificate(ProductSigningCertificate signingCertificate) {
    this.signingCertificate = signingCertificate;
  }


  public Product smallIconUrl(String smallIconUrl) {
    this.smallIconUrl = smallIconUrl;
    return this;
  }

  /**
   * A link to a smaller image that can be used as an icon for the product. This image is suitable for use at up to 128px x 128px.
   * @return smallIconUrl
   */
  @javax.annotation.Nullable
  public String getSmallIconUrl() {
    return smallIconUrl;
  }

  public void setSmallIconUrl(String smallIconUrl) {
    this.smallIconUrl = smallIconUrl;
  }


  public Product title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The name of the product.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Product workDetailsUrl(String workDetailsUrl) {
    this.workDetailsUrl = workDetailsUrl;
    return this;
  }

  /**
   * A link to the managed Google Play details page for the product, for use by an Enterprise admin.
   * @return workDetailsUrl
   */
  @javax.annotation.Nullable
  public String getWorkDetailsUrl() {
    return workDetailsUrl;
  }

  public void setWorkDetailsUrl(String workDetailsUrl) {
    this.workDetailsUrl = workDetailsUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.appRestrictionsSchema, product.appRestrictionsSchema) &&
        Objects.equals(this.appTracks, product.appTracks) &&
        Objects.equals(this.appVersion, product.appVersion) &&
        Objects.equals(this.authorName, product.authorName) &&
        Objects.equals(this.availableCountries, product.availableCountries) &&
        Objects.equals(this.availableTracks, product.availableTracks) &&
        Objects.equals(this.category, product.category) &&
        Objects.equals(this.contentRating, product.contentRating) &&
        Objects.equals(this.description, product.description) &&
        Objects.equals(this.detailsUrl, product.detailsUrl) &&
        Objects.equals(this.distributionChannel, product.distributionChannel) &&
        Objects.equals(this.features, product.features) &&
        Objects.equals(this.fullDescription, product.fullDescription) &&
        Objects.equals(this.iconUrl, product.iconUrl) &&
        Objects.equals(this.lastUpdatedTimestampMillis, product.lastUpdatedTimestampMillis) &&
        Objects.equals(this.minAndroidSdkVersion, product.minAndroidSdkVersion) &&
        Objects.equals(this.permissions, product.permissions) &&
        Objects.equals(this.productId, product.productId) &&
        Objects.equals(this.productPricing, product.productPricing) &&
        Objects.equals(this.recentChanges, product.recentChanges) &&
        Objects.equals(this.requiresContainerApp, product.requiresContainerApp) &&
        Objects.equals(this.screenshotUrls, product.screenshotUrls) &&
        Objects.equals(this.signingCertificate, product.signingCertificate) &&
        Objects.equals(this.smallIconUrl, product.smallIconUrl) &&
        Objects.equals(this.title, product.title) &&
        Objects.equals(this.workDetailsUrl, product.workDetailsUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appRestrictionsSchema, appTracks, appVersion, authorName, availableCountries, availableTracks, category, contentRating, description, detailsUrl, distributionChannel, features, fullDescription, iconUrl, lastUpdatedTimestampMillis, minAndroidSdkVersion, permissions, productId, productPricing, recentChanges, requiresContainerApp, screenshotUrls, signingCertificate, smallIconUrl, title, workDetailsUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    appRestrictionsSchema: ").append(toIndentedString(appRestrictionsSchema)).append("\n");
    sb.append("    appTracks: ").append(toIndentedString(appTracks)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    availableCountries: ").append(toIndentedString(availableCountries)).append("\n");
    sb.append("    availableTracks: ").append(toIndentedString(availableTracks)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detailsUrl: ").append(toIndentedString(detailsUrl)).append("\n");
    sb.append("    distributionChannel: ").append(toIndentedString(distributionChannel)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    fullDescription: ").append(toIndentedString(fullDescription)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    lastUpdatedTimestampMillis: ").append(toIndentedString(lastUpdatedTimestampMillis)).append("\n");
    sb.append("    minAndroidSdkVersion: ").append(toIndentedString(minAndroidSdkVersion)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productPricing: ").append(toIndentedString(productPricing)).append("\n");
    sb.append("    recentChanges: ").append(toIndentedString(recentChanges)).append("\n");
    sb.append("    requiresContainerApp: ").append(toIndentedString(requiresContainerApp)).append("\n");
    sb.append("    screenshotUrls: ").append(toIndentedString(screenshotUrls)).append("\n");
    sb.append("    signingCertificate: ").append(toIndentedString(signingCertificate)).append("\n");
    sb.append("    smallIconUrl: ").append(toIndentedString(smallIconUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    workDetailsUrl: ").append(toIndentedString(workDetailsUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appRestrictionsSchema");
    openapiFields.add("appTracks");
    openapiFields.add("appVersion");
    openapiFields.add("authorName");
    openapiFields.add("availableCountries");
    openapiFields.add("availableTracks");
    openapiFields.add("category");
    openapiFields.add("contentRating");
    openapiFields.add("description");
    openapiFields.add("detailsUrl");
    openapiFields.add("distributionChannel");
    openapiFields.add("features");
    openapiFields.add("fullDescription");
    openapiFields.add("iconUrl");
    openapiFields.add("lastUpdatedTimestampMillis");
    openapiFields.add("minAndroidSdkVersion");
    openapiFields.add("permissions");
    openapiFields.add("productId");
    openapiFields.add("productPricing");
    openapiFields.add("recentChanges");
    openapiFields.add("requiresContainerApp");
    openapiFields.add("screenshotUrls");
    openapiFields.add("signingCertificate");
    openapiFields.add("smallIconUrl");
    openapiFields.add("title");
    openapiFields.add("workDetailsUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appRestrictionsSchema`
      if (jsonObj.get("appRestrictionsSchema") != null && !jsonObj.get("appRestrictionsSchema").isJsonNull()) {
        AppRestrictionsSchema.validateJsonElement(jsonObj.get("appRestrictionsSchema"));
      }
      if (jsonObj.get("appTracks") != null && !jsonObj.get("appTracks").isJsonNull()) {
        JsonArray jsonArrayappTracks = jsonObj.getAsJsonArray("appTracks");
        if (jsonArrayappTracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appTracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appTracks` to be an array in the JSON string but got `%s`", jsonObj.get("appTracks").toString()));
          }

          // validate the optional field `appTracks` (array)
          for (int i = 0; i < jsonArrayappTracks.size(); i++) {
            TrackInfo.validateJsonElement(jsonArrayappTracks.get(i));
          };
        }
      }
      if (jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) {
        JsonArray jsonArrayappVersion = jsonObj.getAsJsonArray("appVersion");
        if (jsonArrayappVersion != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appVersion").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appVersion` to be an array in the JSON string but got `%s`", jsonObj.get("appVersion").toString()));
          }

          // validate the optional field `appVersion` (array)
          for (int i = 0; i < jsonArrayappVersion.size(); i++) {
            AppVersion.validateJsonElement(jsonArrayappVersion.get(i));
          };
        }
      }
      if ((jsonObj.get("authorName") != null && !jsonObj.get("authorName").isJsonNull()) && !jsonObj.get("authorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableCountries") != null && !jsonObj.get("availableCountries").isJsonNull() && !jsonObj.get("availableCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableCountries` to be an array in the JSON string but got `%s`", jsonObj.get("availableCountries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableTracks") != null && !jsonObj.get("availableTracks").isJsonNull() && !jsonObj.get("availableTracks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableTracks` to be an array in the JSON string but got `%s`", jsonObj.get("availableTracks").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("contentRating") != null && !jsonObj.get("contentRating").isJsonNull()) && !jsonObj.get("contentRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentRating").toString()));
      }
      // validate the optional field `contentRating`
      if (jsonObj.get("contentRating") != null && !jsonObj.get("contentRating").isJsonNull()) {
        ContentRatingEnum.validateJsonElement(jsonObj.get("contentRating"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("detailsUrl") != null && !jsonObj.get("detailsUrl").isJsonNull()) && !jsonObj.get("detailsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailsUrl").toString()));
      }
      if ((jsonObj.get("distributionChannel") != null && !jsonObj.get("distributionChannel").isJsonNull()) && !jsonObj.get("distributionChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributionChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distributionChannel").toString()));
      }
      // validate the optional field `distributionChannel`
      if (jsonObj.get("distributionChannel") != null && !jsonObj.get("distributionChannel").isJsonNull()) {
        DistributionChannelEnum.validateJsonElement(jsonObj.get("distributionChannel"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("fullDescription") != null && !jsonObj.get("fullDescription").isJsonNull()) && !jsonObj.get("fullDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullDescription").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("lastUpdatedTimestampMillis") != null && !jsonObj.get("lastUpdatedTimestampMillis").isJsonNull()) && !jsonObj.get("lastUpdatedTimestampMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedTimestampMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedTimestampMillis").toString()));
      }
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
          }

          // validate the optional field `permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            ProductPermission.validateJsonElement(jsonArraypermissions.get(i));
          };
        }
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productPricing") != null && !jsonObj.get("productPricing").isJsonNull()) && !jsonObj.get("productPricing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productPricing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productPricing").toString()));
      }
      // validate the optional field `productPricing`
      if (jsonObj.get("productPricing") != null && !jsonObj.get("productPricing").isJsonNull()) {
        ProductPricingEnum.validateJsonElement(jsonObj.get("productPricing"));
      }
      if ((jsonObj.get("recentChanges") != null && !jsonObj.get("recentChanges").isJsonNull()) && !jsonObj.get("recentChanges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recentChanges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recentChanges").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("screenshotUrls") != null && !jsonObj.get("screenshotUrls").isJsonNull() && !jsonObj.get("screenshotUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenshotUrls` to be an array in the JSON string but got `%s`", jsonObj.get("screenshotUrls").toString()));
      }
      // validate the optional field `signingCertificate`
      if (jsonObj.get("signingCertificate") != null && !jsonObj.get("signingCertificate").isJsonNull()) {
        ProductSigningCertificate.validateJsonElement(jsonObj.get("signingCertificate"));
      }
      if ((jsonObj.get("smallIconUrl") != null && !jsonObj.get("smallIconUrl").isJsonNull()) && !jsonObj.get("smallIconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallIconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallIconUrl").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("workDetailsUrl") != null && !jsonObj.get("workDetailsUrl").isJsonNull()) && !jsonObj.get("workDetailsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workDetailsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workDetailsUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

