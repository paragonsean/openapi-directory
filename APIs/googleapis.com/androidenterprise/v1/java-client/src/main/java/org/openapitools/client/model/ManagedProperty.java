/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ManagedPropertyBundle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A managed property of a managed configuration. The property must match one of the properties in the app restrictions schema of the product. Exactly one of the value fields must be populated, and it must match the property&#39;s type in the app restrictions schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedProperty {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_VALUE_BOOL = "valueBool";
  @SerializedName(SERIALIZED_NAME_VALUE_BOOL)
  private Boolean valueBool;

  public static final String SERIALIZED_NAME_VALUE_BUNDLE = "valueBundle";
  @SerializedName(SERIALIZED_NAME_VALUE_BUNDLE)
  private ManagedPropertyBundle valueBundle;

  public static final String SERIALIZED_NAME_VALUE_BUNDLE_ARRAY = "valueBundleArray";
  @SerializedName(SERIALIZED_NAME_VALUE_BUNDLE_ARRAY)
  private List<ManagedPropertyBundle> valueBundleArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_INTEGER = "valueInteger";
  @SerializedName(SERIALIZED_NAME_VALUE_INTEGER)
  private Integer valueInteger;

  public static final String SERIALIZED_NAME_VALUE_STRING = "valueString";
  @SerializedName(SERIALIZED_NAME_VALUE_STRING)
  private String valueString;

  public static final String SERIALIZED_NAME_VALUE_STRING_ARRAY = "valueStringArray";
  @SerializedName(SERIALIZED_NAME_VALUE_STRING_ARRAY)
  private List<String> valueStringArray = new ArrayList<>();

  public ManagedProperty() {
  }

  public ManagedProperty key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The unique key that identifies the property.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ManagedProperty valueBool(Boolean valueBool) {
    this.valueBool = valueBool;
    return this;
  }

  /**
   * The boolean value - this will only be present if type of the property is bool.
   * @return valueBool
   */
  @javax.annotation.Nullable
  public Boolean getValueBool() {
    return valueBool;
  }

  public void setValueBool(Boolean valueBool) {
    this.valueBool = valueBool;
  }


  public ManagedProperty valueBundle(ManagedPropertyBundle valueBundle) {
    this.valueBundle = valueBundle;
    return this;
  }

  /**
   * Get valueBundle
   * @return valueBundle
   */
  @javax.annotation.Nullable
  public ManagedPropertyBundle getValueBundle() {
    return valueBundle;
  }

  public void setValueBundle(ManagedPropertyBundle valueBundle) {
    this.valueBundle = valueBundle;
  }


  public ManagedProperty valueBundleArray(List<ManagedPropertyBundle> valueBundleArray) {
    this.valueBundleArray = valueBundleArray;
    return this;
  }

  public ManagedProperty addValueBundleArrayItem(ManagedPropertyBundle valueBundleArrayItem) {
    if (this.valueBundleArray == null) {
      this.valueBundleArray = new ArrayList<>();
    }
    this.valueBundleArray.add(valueBundleArrayItem);
    return this;
  }

  /**
   * The list of bundles of properties - this will only be present if type of the property is bundle_array.
   * @return valueBundleArray
   */
  @javax.annotation.Nullable
  public List<ManagedPropertyBundle> getValueBundleArray() {
    return valueBundleArray;
  }

  public void setValueBundleArray(List<ManagedPropertyBundle> valueBundleArray) {
    this.valueBundleArray = valueBundleArray;
  }


  public ManagedProperty valueInteger(Integer valueInteger) {
    this.valueInteger = valueInteger;
    return this;
  }

  /**
   * The integer value - this will only be present if type of the property is integer.
   * @return valueInteger
   */
  @javax.annotation.Nullable
  public Integer getValueInteger() {
    return valueInteger;
  }

  public void setValueInteger(Integer valueInteger) {
    this.valueInteger = valueInteger;
  }


  public ManagedProperty valueString(String valueString) {
    this.valueString = valueString;
    return this;
  }

  /**
   * The string value - this will only be present if type of the property is string, choice or hidden.
   * @return valueString
   */
  @javax.annotation.Nullable
  public String getValueString() {
    return valueString;
  }

  public void setValueString(String valueString) {
    this.valueString = valueString;
  }


  public ManagedProperty valueStringArray(List<String> valueStringArray) {
    this.valueStringArray = valueStringArray;
    return this;
  }

  public ManagedProperty addValueStringArrayItem(String valueStringArrayItem) {
    if (this.valueStringArray == null) {
      this.valueStringArray = new ArrayList<>();
    }
    this.valueStringArray.add(valueStringArrayItem);
    return this;
  }

  /**
   * The list of string values - this will only be present if type of the property is multiselect.
   * @return valueStringArray
   */
  @javax.annotation.Nullable
  public List<String> getValueStringArray() {
    return valueStringArray;
  }

  public void setValueStringArray(List<String> valueStringArray) {
    this.valueStringArray = valueStringArray;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedProperty managedProperty = (ManagedProperty) o;
    return Objects.equals(this.key, managedProperty.key) &&
        Objects.equals(this.valueBool, managedProperty.valueBool) &&
        Objects.equals(this.valueBundle, managedProperty.valueBundle) &&
        Objects.equals(this.valueBundleArray, managedProperty.valueBundleArray) &&
        Objects.equals(this.valueInteger, managedProperty.valueInteger) &&
        Objects.equals(this.valueString, managedProperty.valueString) &&
        Objects.equals(this.valueStringArray, managedProperty.valueStringArray);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, valueBool, valueBundle, valueBundleArray, valueInteger, valueString, valueStringArray);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedProperty {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    valueBool: ").append(toIndentedString(valueBool)).append("\n");
    sb.append("    valueBundle: ").append(toIndentedString(valueBundle)).append("\n");
    sb.append("    valueBundleArray: ").append(toIndentedString(valueBundleArray)).append("\n");
    sb.append("    valueInteger: ").append(toIndentedString(valueInteger)).append("\n");
    sb.append("    valueString: ").append(toIndentedString(valueString)).append("\n");
    sb.append("    valueStringArray: ").append(toIndentedString(valueStringArray)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("valueBool");
    openapiFields.add("valueBundle");
    openapiFields.add("valueBundleArray");
    openapiFields.add("valueInteger");
    openapiFields.add("valueString");
    openapiFields.add("valueStringArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedProperty is not found in the empty JSON string", ManagedProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `valueBundle`
      if (jsonObj.get("valueBundle") != null && !jsonObj.get("valueBundle").isJsonNull()) {
        ManagedPropertyBundle.validateJsonElement(jsonObj.get("valueBundle"));
      }
      if (jsonObj.get("valueBundleArray") != null && !jsonObj.get("valueBundleArray").isJsonNull()) {
        JsonArray jsonArrayvalueBundleArray = jsonObj.getAsJsonArray("valueBundleArray");
        if (jsonArrayvalueBundleArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("valueBundleArray").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `valueBundleArray` to be an array in the JSON string but got `%s`", jsonObj.get("valueBundleArray").toString()));
          }

          // validate the optional field `valueBundleArray` (array)
          for (int i = 0; i < jsonArrayvalueBundleArray.size(); i++) {
            ManagedPropertyBundle.validateJsonElement(jsonArrayvalueBundleArray.get(i));
          };
        }
      }
      if ((jsonObj.get("valueString") != null && !jsonObj.get("valueString").isJsonNull()) && !jsonObj.get("valueString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueString").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valueStringArray") != null && !jsonObj.get("valueStringArray").isJsonNull() && !jsonObj.get("valueStringArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueStringArray` to be an array in the JSON string but got `%s`", jsonObj.get("valueStringArray").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedProperty>() {
           @Override
           public void write(JsonWriter out, ManagedProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedProperty
   * @throws IOException if the JSON string is invalid with respect to ManagedProperty
   */
  public static ManagedProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedProperty.class);
  }

  /**
   * Convert an instance of ManagedProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

