/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppRestrictionsSchemaRestrictionRestrictionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A restriction in the App Restriction Schema represents a piece of configuration that may be pre-applied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppRestrictionsSchemaRestriction {
  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private AppRestrictionsSchemaRestrictionRestrictionValue defaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTRY = "entry";
  @SerializedName(SERIALIZED_NAME_ENTRY)
  private List<String> entry = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRY_VALUE = "entryValue";
  @SerializedName(SERIALIZED_NAME_ENTRY_VALUE)
  private List<String> entryValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NESTED_RESTRICTION = "nestedRestriction";
  @SerializedName(SERIALIZED_NAME_NESTED_RESTRICTION)
  private List<AppRestrictionsSchemaRestriction> nestedRestriction = new ArrayList<>();

  /**
   * The type of the restriction.
   */
  @JsonAdapter(RestrictionTypeEnum.Adapter.class)
  public enum RestrictionTypeEnum {
    BOOL("bool"),
    
    STRING("string"),
    
    INTEGER("integer"),
    
    CHOICE("choice"),
    
    MULTISELECT("multiselect"),
    
    HIDDEN("hidden"),
    
    BUNDLE("bundle"),
    
    BUNDLE_ARRAY("bundleArray");

    private String value;

    RestrictionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictionTypeEnum fromValue(String value) {
      for (RestrictionTypeEnum b : RestrictionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTION_TYPE = "restrictionType";
  @SerializedName(SERIALIZED_NAME_RESTRICTION_TYPE)
  private RestrictionTypeEnum restrictionType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public AppRestrictionsSchemaRestriction() {
  }

  public AppRestrictionsSchemaRestriction defaultValue(AppRestrictionsSchemaRestrictionRestrictionValue defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public AppRestrictionsSchemaRestrictionRestrictionValue getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(AppRestrictionsSchemaRestrictionRestrictionValue defaultValue) {
    this.defaultValue = defaultValue;
  }


  public AppRestrictionsSchemaRestriction description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A longer description of the restriction, giving more detail of what it affects.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AppRestrictionsSchemaRestriction entry(List<String> entry) {
    this.entry = entry;
    return this;
  }

  public AppRestrictionsSchemaRestriction addEntryItem(String entryItem) {
    if (this.entry == null) {
      this.entry = new ArrayList<>();
    }
    this.entry.add(entryItem);
    return this;
  }

  /**
   * For choice or multiselect restrictions, the list of possible entries&#39; human-readable names.
   * @return entry
   */
  @javax.annotation.Nullable
  public List<String> getEntry() {
    return entry;
  }

  public void setEntry(List<String> entry) {
    this.entry = entry;
  }


  public AppRestrictionsSchemaRestriction entryValue(List<String> entryValue) {
    this.entryValue = entryValue;
    return this;
  }

  public AppRestrictionsSchemaRestriction addEntryValueItem(String entryValueItem) {
    if (this.entryValue == null) {
      this.entryValue = new ArrayList<>();
    }
    this.entryValue.add(entryValueItem);
    return this;
  }

  /**
   * For choice or multiselect restrictions, the list of possible entries&#39; machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.
   * @return entryValue
   */
  @javax.annotation.Nullable
  public List<String> getEntryValue() {
    return entryValue;
  }

  public void setEntryValue(List<String> entryValue) {
    this.entryValue = entryValue;
  }


  public AppRestrictionsSchemaRestriction key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The unique key that the product uses to identify the restriction, e.g. \&quot;com.google.android.gm.fieldname\&quot;.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public AppRestrictionsSchemaRestriction nestedRestriction(List<AppRestrictionsSchemaRestriction> nestedRestriction) {
    this.nestedRestriction = nestedRestriction;
    return this;
  }

  public AppRestrictionsSchemaRestriction addNestedRestrictionItem(AppRestrictionsSchemaRestriction nestedRestrictionItem) {
    if (this.nestedRestriction == null) {
      this.nestedRestriction = new ArrayList<>();
    }
    this.nestedRestriction.add(nestedRestrictionItem);
    return this;
  }

  /**
   * For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.
   * @return nestedRestriction
   */
  @javax.annotation.Nullable
  public List<AppRestrictionsSchemaRestriction> getNestedRestriction() {
    return nestedRestriction;
  }

  public void setNestedRestriction(List<AppRestrictionsSchemaRestriction> nestedRestriction) {
    this.nestedRestriction = nestedRestriction;
  }


  public AppRestrictionsSchemaRestriction restrictionType(RestrictionTypeEnum restrictionType) {
    this.restrictionType = restrictionType;
    return this;
  }

  /**
   * The type of the restriction.
   * @return restrictionType
   */
  @javax.annotation.Nullable
  public RestrictionTypeEnum getRestrictionType() {
    return restrictionType;
  }

  public void setRestrictionType(RestrictionTypeEnum restrictionType) {
    this.restrictionType = restrictionType;
  }


  public AppRestrictionsSchemaRestriction title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The name of the restriction.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRestrictionsSchemaRestriction appRestrictionsSchemaRestriction = (AppRestrictionsSchemaRestriction) o;
    return Objects.equals(this.defaultValue, appRestrictionsSchemaRestriction.defaultValue) &&
        Objects.equals(this.description, appRestrictionsSchemaRestriction.description) &&
        Objects.equals(this.entry, appRestrictionsSchemaRestriction.entry) &&
        Objects.equals(this.entryValue, appRestrictionsSchemaRestriction.entryValue) &&
        Objects.equals(this.key, appRestrictionsSchemaRestriction.key) &&
        Objects.equals(this.nestedRestriction, appRestrictionsSchemaRestriction.nestedRestriction) &&
        Objects.equals(this.restrictionType, appRestrictionsSchemaRestriction.restrictionType) &&
        Objects.equals(this.title, appRestrictionsSchemaRestriction.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValue, description, entry, entryValue, key, nestedRestriction, restrictionType, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRestrictionsSchemaRestriction {\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entry: ").append(toIndentedString(entry)).append("\n");
    sb.append("    entryValue: ").append(toIndentedString(entryValue)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    nestedRestriction: ").append(toIndentedString(nestedRestriction)).append("\n");
    sb.append("    restrictionType: ").append(toIndentedString(restrictionType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultValue");
    openapiFields.add("description");
    openapiFields.add("entry");
    openapiFields.add("entryValue");
    openapiFields.add("key");
    openapiFields.add("nestedRestriction");
    openapiFields.add("restrictionType");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppRestrictionsSchemaRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRestrictionsSchemaRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRestrictionsSchemaRestriction is not found in the empty JSON string", AppRestrictionsSchemaRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRestrictionsSchemaRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRestrictionsSchemaRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultValue`
      if (jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) {
        AppRestrictionsSchemaRestrictionRestrictionValue.validateJsonElement(jsonObj.get("defaultValue"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entry") != null && !jsonObj.get("entry").isJsonNull() && !jsonObj.get("entry").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entry` to be an array in the JSON string but got `%s`", jsonObj.get("entry").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entryValue") != null && !jsonObj.get("entryValue").isJsonNull() && !jsonObj.get("entryValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryValue` to be an array in the JSON string but got `%s`", jsonObj.get("entryValue").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (jsonObj.get("nestedRestriction") != null && !jsonObj.get("nestedRestriction").isJsonNull()) {
        JsonArray jsonArraynestedRestriction = jsonObj.getAsJsonArray("nestedRestriction");
        if (jsonArraynestedRestriction != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nestedRestriction").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nestedRestriction` to be an array in the JSON string but got `%s`", jsonObj.get("nestedRestriction").toString()));
          }

          // validate the optional field `nestedRestriction` (array)
          for (int i = 0; i < jsonArraynestedRestriction.size(); i++) {
            AppRestrictionsSchemaRestriction.validateJsonElement(jsonArraynestedRestriction.get(i));
          };
        }
      }
      if ((jsonObj.get("restrictionType") != null && !jsonObj.get("restrictionType").isJsonNull()) && !jsonObj.get("restrictionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restrictionType").toString()));
      }
      // validate the optional field `restrictionType`
      if (jsonObj.get("restrictionType") != null && !jsonObj.get("restrictionType").isJsonNull()) {
        RestrictionTypeEnum.validateJsonElement(jsonObj.get("restrictionType"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRestrictionsSchemaRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRestrictionsSchemaRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRestrictionsSchemaRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRestrictionsSchemaRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRestrictionsSchemaRestriction>() {
           @Override
           public void write(JsonWriter out, AppRestrictionsSchemaRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRestrictionsSchemaRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppRestrictionsSchemaRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppRestrictionsSchemaRestriction
   * @throws IOException if the JSON string is invalid with respect to AppRestrictionsSchemaRestriction
   */
  public static AppRestrictionsSchemaRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRestrictionsSchemaRestriction.class);
  }

  /**
   * Convert an instance of AppRestrictionsSchemaRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

