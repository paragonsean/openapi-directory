/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductVisibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of products.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSet {
  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private List<String> productId = new ArrayList<>();

  /**
   * The interpretation of this product set. \&quot;unknown\&quot; should never be sent and is ignored if received. \&quot;whitelist\&quot; means that the user is entitled to access the product set. \&quot;includeAll\&quot; means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. \&quot;allApproved\&quot; means that the user is entitled to access all products that are approved for the enterprise. If the value is \&quot;allApproved\&quot; or \&quot;includeAll\&quot;, the productId field is ignored. If no value is provided, it is interpreted as \&quot;whitelist\&quot; for backwards compatibility. Further \&quot;allApproved\&quot; or \&quot;includeAll\&quot; does not enable automatic visibility of \&quot;alpha\&quot; or \&quot;beta\&quot; tracks for Android app. Use ProductVisibility to enable \&quot;alpha\&quot; or \&quot;beta\&quot; tracks per user.
   */
  @JsonAdapter(ProductSetBehaviorEnum.Adapter.class)
  public enum ProductSetBehaviorEnum {
    UNKNOWN("unknown"),
    
    WHITELIST("whitelist"),
    
    INCLUDE_ALL("includeAll"),
    
    ALL_APPROVED("allApproved");

    private String value;

    ProductSetBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductSetBehaviorEnum fromValue(String value) {
      for (ProductSetBehaviorEnum b : ProductSetBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductSetBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductSetBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductSetBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductSetBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductSetBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_SET_BEHAVIOR = "productSetBehavior";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SET_BEHAVIOR)
  private ProductSetBehaviorEnum productSetBehavior;

  public static final String SERIALIZED_NAME_PRODUCT_VISIBILITY = "productVisibility";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VISIBILITY)
  private List<ProductVisibility> productVisibility = new ArrayList<>();

  public ProductSet() {
  }

  public ProductSet productId(List<String> productId) {
    this.productId = productId;
    return this;
  }

  public ProductSet addProductIdItem(String productIdItem) {
    if (this.productId == null) {
      this.productId = new ArrayList<>();
    }
    this.productId.add(productIdItem);
    return this;
  }

  /**
   * The list of product IDs making up the set of products.
   * @return productId
   */
  @javax.annotation.Nullable
  public List<String> getProductId() {
    return productId;
  }

  public void setProductId(List<String> productId) {
    this.productId = productId;
  }


  public ProductSet productSetBehavior(ProductSetBehaviorEnum productSetBehavior) {
    this.productSetBehavior = productSetBehavior;
    return this;
  }

  /**
   * The interpretation of this product set. \&quot;unknown\&quot; should never be sent and is ignored if received. \&quot;whitelist\&quot; means that the user is entitled to access the product set. \&quot;includeAll\&quot; means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. \&quot;allApproved\&quot; means that the user is entitled to access all products that are approved for the enterprise. If the value is \&quot;allApproved\&quot; or \&quot;includeAll\&quot;, the productId field is ignored. If no value is provided, it is interpreted as \&quot;whitelist\&quot; for backwards compatibility. Further \&quot;allApproved\&quot; or \&quot;includeAll\&quot; does not enable automatic visibility of \&quot;alpha\&quot; or \&quot;beta\&quot; tracks for Android app. Use ProductVisibility to enable \&quot;alpha\&quot; or \&quot;beta\&quot; tracks per user.
   * @return productSetBehavior
   */
  @javax.annotation.Nullable
  public ProductSetBehaviorEnum getProductSetBehavior() {
    return productSetBehavior;
  }

  public void setProductSetBehavior(ProductSetBehaviorEnum productSetBehavior) {
    this.productSetBehavior = productSetBehavior;
  }


  public ProductSet productVisibility(List<ProductVisibility> productVisibility) {
    this.productVisibility = productVisibility;
    return this;
  }

  public ProductSet addProductVisibilityItem(ProductVisibility productVisibilityItem) {
    if (this.productVisibility == null) {
      this.productVisibility = new ArrayList<>();
    }
    this.productVisibility.add(productVisibilityItem);
    return this;
  }

  /**
   * Additional list of product IDs making up the product set. Unlike the productID array, in this list It&#39;s possible to specify which tracks (alpha, beta, production) of a product are visible to the user. See ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.
   * @return productVisibility
   */
  @javax.annotation.Nullable
  public List<ProductVisibility> getProductVisibility() {
    return productVisibility;
  }

  public void setProductVisibility(List<ProductVisibility> productVisibility) {
    this.productVisibility = productVisibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSet productSet = (ProductSet) o;
    return Objects.equals(this.productId, productSet.productId) &&
        Objects.equals(this.productSetBehavior, productSet.productSetBehavior) &&
        Objects.equals(this.productVisibility, productSet.productVisibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productId, productSetBehavior, productVisibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSet {\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productSetBehavior: ").append(toIndentedString(productSetBehavior)).append("\n");
    sb.append("    productVisibility: ").append(toIndentedString(productVisibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productId");
    openapiFields.add("productSetBehavior");
    openapiFields.add("productVisibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSet is not found in the empty JSON string", ProductSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull() && !jsonObj.get("productId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be an array in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productSetBehavior") != null && !jsonObj.get("productSetBehavior").isJsonNull()) && !jsonObj.get("productSetBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productSetBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productSetBehavior").toString()));
      }
      // validate the optional field `productSetBehavior`
      if (jsonObj.get("productSetBehavior") != null && !jsonObj.get("productSetBehavior").isJsonNull()) {
        ProductSetBehaviorEnum.validateJsonElement(jsonObj.get("productSetBehavior"));
      }
      if (jsonObj.get("productVisibility") != null && !jsonObj.get("productVisibility").isJsonNull()) {
        JsonArray jsonArrayproductVisibility = jsonObj.getAsJsonArray("productVisibility");
        if (jsonArrayproductVisibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productVisibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productVisibility` to be an array in the JSON string but got `%s`", jsonObj.get("productVisibility").toString()));
          }

          // validate the optional field `productVisibility` (array)
          for (int i = 0; i < jsonArrayproductVisibility.size(); i++) {
            ProductVisibility.validateJsonElement(jsonArrayproductVisibility.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSet.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSet>() {
           @Override
           public void write(JsonWriter out, ProductSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSet
   * @throws IOException if the JSON string is invalid with respect to ProductSet
   */
  public static ProductSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSet.class);
  }

  /**
   * Convert an instance of ProductSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

