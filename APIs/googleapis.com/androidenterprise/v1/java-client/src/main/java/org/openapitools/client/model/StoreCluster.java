/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocalizedText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of a managed Google Play store cluster, a list of products displayed as part of a store page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoreCluster {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<LocalizedText> name = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_IN_PAGE = "orderInPage";
  @SerializedName(SERIALIZED_NAME_ORDER_IN_PAGE)
  private String orderInPage;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private List<String> productId = new ArrayList<>();

  public StoreCluster() {
  }

  public StoreCluster id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of this cluster. Assigned by the server. Immutable once assigned.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StoreCluster name(List<LocalizedText> name) {
    this.name = name;
    return this;
  }

  public StoreCluster addNameItem(LocalizedText nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.
   * @return name
   */
  @javax.annotation.Nullable
  public List<LocalizedText> getName() {
    return name;
  }

  public void setName(List<LocalizedText> name) {
    this.name = name;
  }


  public StoreCluster orderInPage(String orderInPage) {
    this.orderInPage = orderInPage;
    return this;
  }

  /**
   * String (US-ASCII only) used to determine order of this cluster within the parent page&#39;s elements. Page elements are sorted in lexicographic order of this field. Duplicated values are allowed, but ordering between elements with duplicate order is undefined. The value of this field is never visible to a user, it is used solely for the purpose of defining an ordering. Maximum length is 256 characters.
   * @return orderInPage
   */
  @javax.annotation.Nullable
  public String getOrderInPage() {
    return orderInPage;
  }

  public void setOrderInPage(String orderInPage) {
    this.orderInPage = orderInPage;
  }


  public StoreCluster productId(List<String> productId) {
    this.productId = productId;
    return this;
  }

  public StoreCluster addProductIdItem(String productIdItem) {
    if (this.productId == null) {
      this.productId = new ArrayList<>();
    }
    this.productId.add(productIdItem);
    return this;
  }

  /**
   * List of products in the order they are displayed in the cluster. There should not be duplicates within a cluster.
   * @return productId
   */
  @javax.annotation.Nullable
  public List<String> getProductId() {
    return productId;
  }

  public void setProductId(List<String> productId) {
    this.productId = productId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreCluster storeCluster = (StoreCluster) o;
    return Objects.equals(this.id, storeCluster.id) &&
        Objects.equals(this.name, storeCluster.name) &&
        Objects.equals(this.orderInPage, storeCluster.orderInPage) &&
        Objects.equals(this.productId, storeCluster.productId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, orderInPage, productId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreCluster {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orderInPage: ").append(toIndentedString(orderInPage)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("orderInPage");
    openapiFields.add("productId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoreCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoreCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreCluster is not found in the empty JSON string", StoreCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoreCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoreCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        JsonArray jsonArrayname = jsonObj.getAsJsonArray("name");
        if (jsonArrayname != null) {
          // ensure the json data is an array
          if (!jsonObj.get("name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
          }

          // validate the optional field `name` (array)
          for (int i = 0; i < jsonArrayname.size(); i++) {
            LocalizedText.validateJsonElement(jsonArrayname.get(i));
          };
        }
      }
      if ((jsonObj.get("orderInPage") != null && !jsonObj.get("orderInPage").isJsonNull()) && !jsonObj.get("orderInPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderInPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderInPage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull() && !jsonObj.get("productId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be an array in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreCluster>() {
           @Override
           public void write(JsonWriter out, StoreCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoreCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoreCluster
   * @throws IOException if the JSON string is invalid with respect to StoreCluster
   */
  public static StoreCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreCluster.class);
  }

  /**
   * Convert an instance of StoreCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

