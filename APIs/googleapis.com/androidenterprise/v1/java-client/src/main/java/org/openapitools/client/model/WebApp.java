/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebAppIcon;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A WebApps resource represents a web app created for an enterprise. Web apps are published to managed Google Play and can be distributed like other Android apps. On a user&#39;s device, a web app opens its specified URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebApp {
  /**
   * The display mode of the web app. Possible values include: - \&quot;minimalUi\&quot;, the device&#39;s status bar, navigation bar, the app&#39;s URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - \&quot;standalone\&quot;, the device&#39;s status bar and navigation bar are visible when the app is open. - \&quot;fullScreen\&quot;, the app opens in full screen mode, hiding the device&#39;s status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. 
   */
  @JsonAdapter(DisplayModeEnum.Adapter.class)
  public enum DisplayModeEnum {
    DISPLAY_MODE_UNSPECIFIED("displayModeUnspecified"),
    
    MINIMAL_UI("minimalUi"),
    
    STANDALONE("standalone"),
    
    FULL_SCREEN("fullScreen");

    private String value;

    DisplayModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayModeEnum fromValue(String value) {
      for (DisplayModeEnum b : DisplayModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_MODE = "displayMode";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MODE)
  private DisplayModeEnum displayMode;

  public static final String SERIALIZED_NAME_ICONS = "icons";
  @SerializedName(SERIALIZED_NAME_ICONS)
  private List<WebAppIcon> icons = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "isPublished";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_START_URL = "startUrl";
  @SerializedName(SERIALIZED_NAME_START_URL)
  private String startUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION_CODE = "versionCode";
  @SerializedName(SERIALIZED_NAME_VERSION_CODE)
  private String versionCode;

  public static final String SERIALIZED_NAME_WEB_APP_ID = "webAppId";
  @SerializedName(SERIALIZED_NAME_WEB_APP_ID)
  private String webAppId;

  public WebApp() {
  }

  public WebApp displayMode(DisplayModeEnum displayMode) {
    this.displayMode = displayMode;
    return this;
  }

  /**
   * The display mode of the web app. Possible values include: - \&quot;minimalUi\&quot;, the device&#39;s status bar, navigation bar, the app&#39;s URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - \&quot;standalone\&quot;, the device&#39;s status bar and navigation bar are visible when the app is open. - \&quot;fullScreen\&quot;, the app opens in full screen mode, hiding the device&#39;s status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. 
   * @return displayMode
   */
  @javax.annotation.Nullable
  public DisplayModeEnum getDisplayMode() {
    return displayMode;
  }

  public void setDisplayMode(DisplayModeEnum displayMode) {
    this.displayMode = displayMode;
  }


  public WebApp icons(List<WebAppIcon> icons) {
    this.icons = icons;
    return this;
  }

  public WebApp addIconsItem(WebAppIcon iconsItem) {
    if (this.icons == null) {
      this.icons = new ArrayList<>();
    }
    this.icons.add(iconsItem);
    return this;
  }

  /**
   * A list of icons representing this website. If absent, a default icon (for create) or the current icon (for update) will be used.
   * @return icons
   */
  @javax.annotation.Nullable
  public List<WebAppIcon> getIcons() {
    return icons;
  }

  public void setIcons(List<WebAppIcon> icons) {
    this.icons = icons;
  }


  public WebApp isPublished(Boolean isPublished) {
    this.isPublished = isPublished;
    return this;
  }

  /**
   * A flag whether the app has been published to the Play store yet.
   * @return isPublished
   */
  @javax.annotation.Nullable
  public Boolean getIsPublished() {
    return isPublished;
  }

  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public WebApp startUrl(String startUrl) {
    this.startUrl = startUrl;
    return this;
  }

  /**
   * The start URL, i.e. the URL that should load when the user opens the application.
   * @return startUrl
   */
  @javax.annotation.Nullable
  public String getStartUrl() {
    return startUrl;
  }

  public void setStartUrl(String startUrl) {
    this.startUrl = startUrl;
  }


  public WebApp title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public WebApp versionCode(String versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  /**
   * The current version of the app. Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.
   * @return versionCode
   */
  @javax.annotation.Nullable
  public String getVersionCode() {
    return versionCode;
  }

  public void setVersionCode(String versionCode) {
    this.versionCode = versionCode;
  }


  public WebApp webAppId(String webAppId) {
    this.webAppId = webAppId;
    return this;
  }

  /**
   * The ID of the application. A string of the form \&quot;app:&lt;package name&gt;\&quot; where the package name always starts with the prefix \&quot;com.google.enterprise.webapp.\&quot; followed by a random id.
   * @return webAppId
   */
  @javax.annotation.Nullable
  public String getWebAppId() {
    return webAppId;
  }

  public void setWebAppId(String webAppId) {
    this.webAppId = webAppId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebApp webApp = (WebApp) o;
    return Objects.equals(this.displayMode, webApp.displayMode) &&
        Objects.equals(this.icons, webApp.icons) &&
        Objects.equals(this.isPublished, webApp.isPublished) &&
        Objects.equals(this.startUrl, webApp.startUrl) &&
        Objects.equals(this.title, webApp.title) &&
        Objects.equals(this.versionCode, webApp.versionCode) &&
        Objects.equals(this.webAppId, webApp.webAppId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayMode, icons, isPublished, startUrl, title, versionCode, webAppId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebApp {\n");
    sb.append("    displayMode: ").append(toIndentedString(displayMode)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    startUrl: ").append(toIndentedString(startUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    versionCode: ").append(toIndentedString(versionCode)).append("\n");
    sb.append("    webAppId: ").append(toIndentedString(webAppId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayMode");
    openapiFields.add("icons");
    openapiFields.add("isPublished");
    openapiFields.add("startUrl");
    openapiFields.add("title");
    openapiFields.add("versionCode");
    openapiFields.add("webAppId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebApp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebApp is not found in the empty JSON string", WebApp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayMode") != null && !jsonObj.get("displayMode").isJsonNull()) && !jsonObj.get("displayMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMode").toString()));
      }
      // validate the optional field `displayMode`
      if (jsonObj.get("displayMode") != null && !jsonObj.get("displayMode").isJsonNull()) {
        DisplayModeEnum.validateJsonElement(jsonObj.get("displayMode"));
      }
      if (jsonObj.get("icons") != null && !jsonObj.get("icons").isJsonNull()) {
        JsonArray jsonArrayicons = jsonObj.getAsJsonArray("icons");
        if (jsonArrayicons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("icons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `icons` to be an array in the JSON string but got `%s`", jsonObj.get("icons").toString()));
          }

          // validate the optional field `icons` (array)
          for (int i = 0; i < jsonArrayicons.size(); i++) {
            WebAppIcon.validateJsonElement(jsonArrayicons.get(i));
          };
        }
      }
      if ((jsonObj.get("startUrl") != null && !jsonObj.get("startUrl").isJsonNull()) && !jsonObj.get("startUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startUrl").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("versionCode") != null && !jsonObj.get("versionCode").isJsonNull()) && !jsonObj.get("versionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionCode").toString()));
      }
      if ((jsonObj.get("webAppId") != null && !jsonObj.get("webAppId").isJsonNull()) && !jsonObj.get("webAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAppId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebApp.class));

       return (TypeAdapter<T>) new TypeAdapter<WebApp>() {
           @Override
           public void write(JsonWriter out, WebApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebApp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebApp
   * @throws IOException if the JSON string is invalid with respect to WebApp
   */
  public static WebApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebApp.class);
  }

  /**
   * Convert an instance of WebApp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

