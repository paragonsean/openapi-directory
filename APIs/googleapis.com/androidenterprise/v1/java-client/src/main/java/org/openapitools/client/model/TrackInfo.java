/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Id to name association of a track.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackInfo {
  public static final String SERIALIZED_NAME_TRACK_ALIAS = "trackAlias";
  @SerializedName(SERIALIZED_NAME_TRACK_ALIAS)
  private String trackAlias;

  public static final String SERIALIZED_NAME_TRACK_ID = "trackId";
  @SerializedName(SERIALIZED_NAME_TRACK_ID)
  private String trackId;

  public TrackInfo() {
  }

  public TrackInfo trackAlias(String trackAlias) {
    this.trackAlias = trackAlias;
    return this;
  }

  /**
   * A modifiable name for a track. This is the visible name in the play developer console.
   * @return trackAlias
   */
  @javax.annotation.Nullable
  public String getTrackAlias() {
    return trackAlias;
  }

  public void setTrackAlias(String trackAlias) {
    this.trackAlias = trackAlias;
  }


  public TrackInfo trackId(String trackId) {
    this.trackId = trackId;
    return this;
  }

  /**
   * Unmodifiable, unique track identifier. This identifier is the releaseTrackId in the url of the play developer console page that displays the track information.
   * @return trackId
   */
  @javax.annotation.Nullable
  public String getTrackId() {
    return trackId;
  }

  public void setTrackId(String trackId) {
    this.trackId = trackId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackInfo trackInfo = (TrackInfo) o;
    return Objects.equals(this.trackAlias, trackInfo.trackAlias) &&
        Objects.equals(this.trackId, trackInfo.trackId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackAlias, trackId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackInfo {\n");
    sb.append("    trackAlias: ").append(toIndentedString(trackAlias)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trackAlias");
    openapiFields.add("trackId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackInfo is not found in the empty JSON string", TrackInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("trackAlias") != null && !jsonObj.get("trackAlias").isJsonNull()) && !jsonObj.get("trackAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackAlias").toString()));
      }
      if ((jsonObj.get("trackId") != null && !jsonObj.get("trackId").isJsonNull()) && !jsonObj.get("trackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackInfo>() {
           @Override
           public void write(JsonWriter out, TrackInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackInfo
   * @throws IOException if the JSON string is invalid with respect to TrackInfo
   */
  public static TrackInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackInfo.class);
  }

  /**
   * Convert an instance of TrackInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

