/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains settings for Google-provided user authentication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAuthenticationSettings {
  /**
   * Whether dedicated devices are allowed.
   */
  @JsonAdapter(DedicatedDevicesAllowedEnum.Adapter.class)
  public enum DedicatedDevicesAllowedEnum {
    DEDICATED_DEVICES_ALLOWED_UNSPECIFIED("dedicatedDevicesAllowedUnspecified"),
    
    DISALLOWED("disallowed"),
    
    ALLOWED("allowed");

    private String value;

    DedicatedDevicesAllowedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DedicatedDevicesAllowedEnum fromValue(String value) {
      for (DedicatedDevicesAllowedEnum b : DedicatedDevicesAllowedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DedicatedDevicesAllowedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DedicatedDevicesAllowedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DedicatedDevicesAllowedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DedicatedDevicesAllowedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DedicatedDevicesAllowedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEDICATED_DEVICES_ALLOWED = "dedicatedDevicesAllowed";
  @SerializedName(SERIALIZED_NAME_DEDICATED_DEVICES_ALLOWED)
  private DedicatedDevicesAllowedEnum dedicatedDevicesAllowed;

  /**
   * Whether Google authentication is required.
   */
  @JsonAdapter(GoogleAuthenticationRequiredEnum.Adapter.class)
  public enum GoogleAuthenticationRequiredEnum {
    GOOGLE_AUTHENTICATION_REQUIRED_UNSPECIFIED("googleAuthenticationRequiredUnspecified"),
    
    NOT_REQUIRED("notRequired"),
    
    REQUIRED("required");

    private String value;

    GoogleAuthenticationRequiredEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoogleAuthenticationRequiredEnum fromValue(String value) {
      for (GoogleAuthenticationRequiredEnum b : GoogleAuthenticationRequiredEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoogleAuthenticationRequiredEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoogleAuthenticationRequiredEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoogleAuthenticationRequiredEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoogleAuthenticationRequiredEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoogleAuthenticationRequiredEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOOGLE_AUTHENTICATION_REQUIRED = "googleAuthenticationRequired";
  @SerializedName(SERIALIZED_NAME_GOOGLE_AUTHENTICATION_REQUIRED)
  private GoogleAuthenticationRequiredEnum googleAuthenticationRequired;

  public GoogleAuthenticationSettings() {
  }

  public GoogleAuthenticationSettings dedicatedDevicesAllowed(DedicatedDevicesAllowedEnum dedicatedDevicesAllowed) {
    this.dedicatedDevicesAllowed = dedicatedDevicesAllowed;
    return this;
  }

  /**
   * Whether dedicated devices are allowed.
   * @return dedicatedDevicesAllowed
   */
  @javax.annotation.Nullable
  public DedicatedDevicesAllowedEnum getDedicatedDevicesAllowed() {
    return dedicatedDevicesAllowed;
  }

  public void setDedicatedDevicesAllowed(DedicatedDevicesAllowedEnum dedicatedDevicesAllowed) {
    this.dedicatedDevicesAllowed = dedicatedDevicesAllowed;
  }


  public GoogleAuthenticationSettings googleAuthenticationRequired(GoogleAuthenticationRequiredEnum googleAuthenticationRequired) {
    this.googleAuthenticationRequired = googleAuthenticationRequired;
    return this;
  }

  /**
   * Whether Google authentication is required.
   * @return googleAuthenticationRequired
   */
  @javax.annotation.Nullable
  public GoogleAuthenticationRequiredEnum getGoogleAuthenticationRequired() {
    return googleAuthenticationRequired;
  }

  public void setGoogleAuthenticationRequired(GoogleAuthenticationRequiredEnum googleAuthenticationRequired) {
    this.googleAuthenticationRequired = googleAuthenticationRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAuthenticationSettings googleAuthenticationSettings = (GoogleAuthenticationSettings) o;
    return Objects.equals(this.dedicatedDevicesAllowed, googleAuthenticationSettings.dedicatedDevicesAllowed) &&
        Objects.equals(this.googleAuthenticationRequired, googleAuthenticationSettings.googleAuthenticationRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dedicatedDevicesAllowed, googleAuthenticationRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAuthenticationSettings {\n");
    sb.append("    dedicatedDevicesAllowed: ").append(toIndentedString(dedicatedDevicesAllowed)).append("\n");
    sb.append("    googleAuthenticationRequired: ").append(toIndentedString(googleAuthenticationRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dedicatedDevicesAllowed");
    openapiFields.add("googleAuthenticationRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAuthenticationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAuthenticationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAuthenticationSettings is not found in the empty JSON string", GoogleAuthenticationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAuthenticationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAuthenticationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dedicatedDevicesAllowed") != null && !jsonObj.get("dedicatedDevicesAllowed").isJsonNull()) && !jsonObj.get("dedicatedDevicesAllowed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dedicatedDevicesAllowed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dedicatedDevicesAllowed").toString()));
      }
      // validate the optional field `dedicatedDevicesAllowed`
      if (jsonObj.get("dedicatedDevicesAllowed") != null && !jsonObj.get("dedicatedDevicesAllowed").isJsonNull()) {
        DedicatedDevicesAllowedEnum.validateJsonElement(jsonObj.get("dedicatedDevicesAllowed"));
      }
      if ((jsonObj.get("googleAuthenticationRequired") != null && !jsonObj.get("googleAuthenticationRequired").isJsonNull()) && !jsonObj.get("googleAuthenticationRequired").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleAuthenticationRequired` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleAuthenticationRequired").toString()));
      }
      // validate the optional field `googleAuthenticationRequired`
      if (jsonObj.get("googleAuthenticationRequired") != null && !jsonObj.get("googleAuthenticationRequired").isJsonNull()) {
        GoogleAuthenticationRequiredEnum.validateJsonElement(jsonObj.get("googleAuthenticationRequired"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAuthenticationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAuthenticationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAuthenticationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAuthenticationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAuthenticationSettings>() {
           @Override
           public void write(JsonWriter out, GoogleAuthenticationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAuthenticationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAuthenticationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAuthenticationSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleAuthenticationSettings
   */
  public static GoogleAuthenticationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAuthenticationSettings.class);
  }

  /**
   * Convert an instance of GoogleAuthenticationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

