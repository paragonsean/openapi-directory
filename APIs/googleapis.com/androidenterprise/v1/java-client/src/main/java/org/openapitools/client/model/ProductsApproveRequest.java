/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApprovalUrlInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductsApproveRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductsApproveRequest {
  public static final String SERIALIZED_NAME_APPROVAL_URL_INFO = "approvalUrlInfo";
  @SerializedName(SERIALIZED_NAME_APPROVAL_URL_INFO)
  private ApprovalUrlInfo approvalUrlInfo;

  /**
   * Sets how new permission requests for the product are handled. \&quot;allPermissions\&quot; automatically approves all current and future permissions for the product. \&quot;currentPermissionsOnly\&quot; approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.
   */
  @JsonAdapter(ApprovedPermissionsEnum.Adapter.class)
  public enum ApprovedPermissionsEnum {
    CURRENT_PERMISSIONS_ONLY("currentPermissionsOnly"),
    
    ALL_PERMISSIONS("allPermissions");

    private String value;

    ApprovedPermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovedPermissionsEnum fromValue(String value) {
      for (ApprovedPermissionsEnum b : ApprovedPermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovedPermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovedPermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovedPermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovedPermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApprovedPermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROVED_PERMISSIONS = "approvedPermissions";
  @SerializedName(SERIALIZED_NAME_APPROVED_PERMISSIONS)
  private ApprovedPermissionsEnum approvedPermissions;

  public ProductsApproveRequest() {
  }

  public ProductsApproveRequest approvalUrlInfo(ApprovalUrlInfo approvalUrlInfo) {
    this.approvalUrlInfo = approvalUrlInfo;
    return this;
  }

  /**
   * Get approvalUrlInfo
   * @return approvalUrlInfo
   */
  @javax.annotation.Nullable
  public ApprovalUrlInfo getApprovalUrlInfo() {
    return approvalUrlInfo;
  }

  public void setApprovalUrlInfo(ApprovalUrlInfo approvalUrlInfo) {
    this.approvalUrlInfo = approvalUrlInfo;
  }


  public ProductsApproveRequest approvedPermissions(ApprovedPermissionsEnum approvedPermissions) {
    this.approvedPermissions = approvedPermissions;
    return this;
  }

  /**
   * Sets how new permission requests for the product are handled. \&quot;allPermissions\&quot; automatically approves all current and future permissions for the product. \&quot;currentPermissionsOnly\&quot; approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.
   * @return approvedPermissions
   */
  @javax.annotation.Nullable
  public ApprovedPermissionsEnum getApprovedPermissions() {
    return approvedPermissions;
  }

  public void setApprovedPermissions(ApprovedPermissionsEnum approvedPermissions) {
    this.approvedPermissions = approvedPermissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductsApproveRequest productsApproveRequest = (ProductsApproveRequest) o;
    return Objects.equals(this.approvalUrlInfo, productsApproveRequest.approvalUrlInfo) &&
        Objects.equals(this.approvedPermissions, productsApproveRequest.approvedPermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalUrlInfo, approvedPermissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductsApproveRequest {\n");
    sb.append("    approvalUrlInfo: ").append(toIndentedString(approvalUrlInfo)).append("\n");
    sb.append("    approvedPermissions: ").append(toIndentedString(approvedPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approvalUrlInfo");
    openapiFields.add("approvedPermissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductsApproveRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductsApproveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductsApproveRequest is not found in the empty JSON string", ProductsApproveRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductsApproveRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductsApproveRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `approvalUrlInfo`
      if (jsonObj.get("approvalUrlInfo") != null && !jsonObj.get("approvalUrlInfo").isJsonNull()) {
        ApprovalUrlInfo.validateJsonElement(jsonObj.get("approvalUrlInfo"));
      }
      if ((jsonObj.get("approvedPermissions") != null && !jsonObj.get("approvedPermissions").isJsonNull()) && !jsonObj.get("approvedPermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedPermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvedPermissions").toString()));
      }
      // validate the optional field `approvedPermissions`
      if (jsonObj.get("approvedPermissions") != null && !jsonObj.get("approvedPermissions").isJsonNull()) {
        ApprovedPermissionsEnum.validateJsonElement(jsonObj.get("approvedPermissions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductsApproveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductsApproveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductsApproveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductsApproveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductsApproveRequest>() {
           @Override
           public void write(JsonWriter out, ProductsApproveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductsApproveRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductsApproveRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductsApproveRequest
   * @throws IOException if the JSON string is invalid with respect to ProductsApproveRequest
   */
  public static ProductsApproveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductsApproveRequest.class);
  }

  /**
   * Convert an instance of ProductsApproveRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

