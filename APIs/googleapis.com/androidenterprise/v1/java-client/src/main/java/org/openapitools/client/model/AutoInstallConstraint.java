/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The auto-install constraint. Defines a set of restrictions for installation. At least one of the fields must be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoInstallConstraint {
  /**
   * Charging state constraint.
   */
  @JsonAdapter(ChargingStateConstraintEnum.Adapter.class)
  public enum ChargingStateConstraintEnum {
    CHARGING_STATE_CONSTRAINT_UNSPECIFIED("chargingStateConstraintUnspecified"),
    
    CHARGING_NOT_REQUIRED("chargingNotRequired"),
    
    CHARGING_REQUIRED("chargingRequired");

    private String value;

    ChargingStateConstraintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargingStateConstraintEnum fromValue(String value) {
      for (ChargingStateConstraintEnum b : ChargingStateConstraintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargingStateConstraintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargingStateConstraintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargingStateConstraintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargingStateConstraintEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChargingStateConstraintEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHARGING_STATE_CONSTRAINT = "chargingStateConstraint";
  @SerializedName(SERIALIZED_NAME_CHARGING_STATE_CONSTRAINT)
  private ChargingStateConstraintEnum chargingStateConstraint;

  /**
   * Device idle state constraint.
   */
  @JsonAdapter(DeviceIdleStateConstraintEnum.Adapter.class)
  public enum DeviceIdleStateConstraintEnum {
    DEVICE_IDLE_STATE_CONSTRAINT_UNSPECIFIED("deviceIdleStateConstraintUnspecified"),
    
    DEVICE_IDLE_NOT_REQUIRED("deviceIdleNotRequired"),
    
    DEVICE_IDLE_REQUIRED("deviceIdleRequired");

    private String value;

    DeviceIdleStateConstraintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceIdleStateConstraintEnum fromValue(String value) {
      for (DeviceIdleStateConstraintEnum b : DeviceIdleStateConstraintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceIdleStateConstraintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceIdleStateConstraintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceIdleStateConstraintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceIdleStateConstraintEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceIdleStateConstraintEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_IDLE_STATE_CONSTRAINT = "deviceIdleStateConstraint";
  @SerializedName(SERIALIZED_NAME_DEVICE_IDLE_STATE_CONSTRAINT)
  private DeviceIdleStateConstraintEnum deviceIdleStateConstraint;

  /**
   * Network type constraint.
   */
  @JsonAdapter(NetworkTypeConstraintEnum.Adapter.class)
  public enum NetworkTypeConstraintEnum {
    NETWORK_TYPE_CONSTRAINT_UNSPECIFIED("networkTypeConstraintUnspecified"),
    
    ANY_NETWORK("anyNetwork"),
    
    UNMETERED_NETWORK("unmeteredNetwork");

    private String value;

    NetworkTypeConstraintEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkTypeConstraintEnum fromValue(String value) {
      for (NetworkTypeConstraintEnum b : NetworkTypeConstraintEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkTypeConstraintEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkTypeConstraintEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkTypeConstraintEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkTypeConstraintEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkTypeConstraintEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK_TYPE_CONSTRAINT = "networkTypeConstraint";
  @SerializedName(SERIALIZED_NAME_NETWORK_TYPE_CONSTRAINT)
  private NetworkTypeConstraintEnum networkTypeConstraint;

  public AutoInstallConstraint() {
  }

  public AutoInstallConstraint chargingStateConstraint(ChargingStateConstraintEnum chargingStateConstraint) {
    this.chargingStateConstraint = chargingStateConstraint;
    return this;
  }

  /**
   * Charging state constraint.
   * @return chargingStateConstraint
   */
  @javax.annotation.Nullable
  public ChargingStateConstraintEnum getChargingStateConstraint() {
    return chargingStateConstraint;
  }

  public void setChargingStateConstraint(ChargingStateConstraintEnum chargingStateConstraint) {
    this.chargingStateConstraint = chargingStateConstraint;
  }


  public AutoInstallConstraint deviceIdleStateConstraint(DeviceIdleStateConstraintEnum deviceIdleStateConstraint) {
    this.deviceIdleStateConstraint = deviceIdleStateConstraint;
    return this;
  }

  /**
   * Device idle state constraint.
   * @return deviceIdleStateConstraint
   */
  @javax.annotation.Nullable
  public DeviceIdleStateConstraintEnum getDeviceIdleStateConstraint() {
    return deviceIdleStateConstraint;
  }

  public void setDeviceIdleStateConstraint(DeviceIdleStateConstraintEnum deviceIdleStateConstraint) {
    this.deviceIdleStateConstraint = deviceIdleStateConstraint;
  }


  public AutoInstallConstraint networkTypeConstraint(NetworkTypeConstraintEnum networkTypeConstraint) {
    this.networkTypeConstraint = networkTypeConstraint;
    return this;
  }

  /**
   * Network type constraint.
   * @return networkTypeConstraint
   */
  @javax.annotation.Nullable
  public NetworkTypeConstraintEnum getNetworkTypeConstraint() {
    return networkTypeConstraint;
  }

  public void setNetworkTypeConstraint(NetworkTypeConstraintEnum networkTypeConstraint) {
    this.networkTypeConstraint = networkTypeConstraint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoInstallConstraint autoInstallConstraint = (AutoInstallConstraint) o;
    return Objects.equals(this.chargingStateConstraint, autoInstallConstraint.chargingStateConstraint) &&
        Objects.equals(this.deviceIdleStateConstraint, autoInstallConstraint.deviceIdleStateConstraint) &&
        Objects.equals(this.networkTypeConstraint, autoInstallConstraint.networkTypeConstraint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargingStateConstraint, deviceIdleStateConstraint, networkTypeConstraint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoInstallConstraint {\n");
    sb.append("    chargingStateConstraint: ").append(toIndentedString(chargingStateConstraint)).append("\n");
    sb.append("    deviceIdleStateConstraint: ").append(toIndentedString(deviceIdleStateConstraint)).append("\n");
    sb.append("    networkTypeConstraint: ").append(toIndentedString(networkTypeConstraint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargingStateConstraint");
    openapiFields.add("deviceIdleStateConstraint");
    openapiFields.add("networkTypeConstraint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoInstallConstraint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoInstallConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoInstallConstraint is not found in the empty JSON string", AutoInstallConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoInstallConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoInstallConstraint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chargingStateConstraint") != null && !jsonObj.get("chargingStateConstraint").isJsonNull()) && !jsonObj.get("chargingStateConstraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargingStateConstraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargingStateConstraint").toString()));
      }
      // validate the optional field `chargingStateConstraint`
      if (jsonObj.get("chargingStateConstraint") != null && !jsonObj.get("chargingStateConstraint").isJsonNull()) {
        ChargingStateConstraintEnum.validateJsonElement(jsonObj.get("chargingStateConstraint"));
      }
      if ((jsonObj.get("deviceIdleStateConstraint") != null && !jsonObj.get("deviceIdleStateConstraint").isJsonNull()) && !jsonObj.get("deviceIdleStateConstraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceIdleStateConstraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceIdleStateConstraint").toString()));
      }
      // validate the optional field `deviceIdleStateConstraint`
      if (jsonObj.get("deviceIdleStateConstraint") != null && !jsonObj.get("deviceIdleStateConstraint").isJsonNull()) {
        DeviceIdleStateConstraintEnum.validateJsonElement(jsonObj.get("deviceIdleStateConstraint"));
      }
      if ((jsonObj.get("networkTypeConstraint") != null && !jsonObj.get("networkTypeConstraint").isJsonNull()) && !jsonObj.get("networkTypeConstraint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkTypeConstraint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkTypeConstraint").toString()));
      }
      // validate the optional field `networkTypeConstraint`
      if (jsonObj.get("networkTypeConstraint") != null && !jsonObj.get("networkTypeConstraint").isJsonNull()) {
        NetworkTypeConstraintEnum.validateJsonElement(jsonObj.get("networkTypeConstraint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoInstallConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoInstallConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoInstallConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoInstallConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoInstallConstraint>() {
           @Override
           public void write(JsonWriter out, AutoInstallConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoInstallConstraint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoInstallConstraint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoInstallConstraint
   * @throws IOException if the JSON string is invalid with respect to AutoInstallConstraint
   */
  public static AutoInstallConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoInstallConstraint.class);
  }

  /**
   * Convert an instance of AutoInstallConstraint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

