/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdministratorWebTokenSpecManagedConfigurations;
import org.openapitools.client.model.AdministratorWebTokenSpecPlaySearch;
import org.openapitools.client.model.AdministratorWebTokenSpecPrivateApps;
import org.openapitools.client.model.AdministratorWebTokenSpecStoreBuilder;
import org.openapitools.client.model.AdministratorWebTokenSpecWebApps;
import org.openapitools.client.model.AdministratorWebTokenSpecZeroTouch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification for a token used to generate iframes. The token specifies what data the admin is allowed to modify and the URI the iframe is allowed to communiate with.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdministratorWebTokenSpec {
  public static final String SERIALIZED_NAME_MANAGED_CONFIGURATIONS = "managedConfigurations";
  @SerializedName(SERIALIZED_NAME_MANAGED_CONFIGURATIONS)
  private AdministratorWebTokenSpecManagedConfigurations managedConfigurations;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  /**
   * Gets or Sets permission
   */
  @JsonAdapter(PermissionEnum.Adapter.class)
  public enum PermissionEnum {
    UNKNOWN("unknown"),
    
    APPROVE_APPS("approveApps"),
    
    MANAGE_MCM("manageMcm");

    private String value;

    PermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionEnum fromValue(String value) {
      for (PermissionEnum b : PermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private List<PermissionEnum> permission = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAY_SEARCH = "playSearch";
  @SerializedName(SERIALIZED_NAME_PLAY_SEARCH)
  private AdministratorWebTokenSpecPlaySearch playSearch;

  public static final String SERIALIZED_NAME_PRIVATE_APPS = "privateApps";
  @SerializedName(SERIALIZED_NAME_PRIVATE_APPS)
  private AdministratorWebTokenSpecPrivateApps privateApps;

  public static final String SERIALIZED_NAME_STORE_BUILDER = "storeBuilder";
  @SerializedName(SERIALIZED_NAME_STORE_BUILDER)
  private AdministratorWebTokenSpecStoreBuilder storeBuilder;

  public static final String SERIALIZED_NAME_WEB_APPS = "webApps";
  @SerializedName(SERIALIZED_NAME_WEB_APPS)
  private AdministratorWebTokenSpecWebApps webApps;

  public static final String SERIALIZED_NAME_ZERO_TOUCH = "zeroTouch";
  @SerializedName(SERIALIZED_NAME_ZERO_TOUCH)
  private AdministratorWebTokenSpecZeroTouch zeroTouch;

  public AdministratorWebTokenSpec() {
  }

  public AdministratorWebTokenSpec managedConfigurations(AdministratorWebTokenSpecManagedConfigurations managedConfigurations) {
    this.managedConfigurations = managedConfigurations;
    return this;
  }

  /**
   * Get managedConfigurations
   * @return managedConfigurations
   */
  @javax.annotation.Nullable
  public AdministratorWebTokenSpecManagedConfigurations getManagedConfigurations() {
    return managedConfigurations;
  }

  public void setManagedConfigurations(AdministratorWebTokenSpecManagedConfigurations managedConfigurations) {
    this.managedConfigurations = managedConfigurations;
  }


  public AdministratorWebTokenSpec parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https. Use whitespaces to separate multiple parent URIs.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public AdministratorWebTokenSpec permission(List<PermissionEnum> permission) {
    this.permission = permission;
    return this;
  }

  public AdministratorWebTokenSpec addPermissionItem(PermissionEnum permissionItem) {
    if (this.permission == null) {
      this.permission = new ArrayList<>();
    }
    this.permission.add(permissionItem);
    return this;
  }

  /**
   * Deprecated. Use PlaySearch.approveApps.
   * @return permission
   */
  @javax.annotation.Nullable
  public List<PermissionEnum> getPermission() {
    return permission;
  }

  public void setPermission(List<PermissionEnum> permission) {
    this.permission = permission;
  }


  public AdministratorWebTokenSpec playSearch(AdministratorWebTokenSpecPlaySearch playSearch) {
    this.playSearch = playSearch;
    return this;
  }

  /**
   * Get playSearch
   * @return playSearch
   */
  @javax.annotation.Nullable
  public AdministratorWebTokenSpecPlaySearch getPlaySearch() {
    return playSearch;
  }

  public void setPlaySearch(AdministratorWebTokenSpecPlaySearch playSearch) {
    this.playSearch = playSearch;
  }


  public AdministratorWebTokenSpec privateApps(AdministratorWebTokenSpecPrivateApps privateApps) {
    this.privateApps = privateApps;
    return this;
  }

  /**
   * Get privateApps
   * @return privateApps
   */
  @javax.annotation.Nullable
  public AdministratorWebTokenSpecPrivateApps getPrivateApps() {
    return privateApps;
  }

  public void setPrivateApps(AdministratorWebTokenSpecPrivateApps privateApps) {
    this.privateApps = privateApps;
  }


  public AdministratorWebTokenSpec storeBuilder(AdministratorWebTokenSpecStoreBuilder storeBuilder) {
    this.storeBuilder = storeBuilder;
    return this;
  }

  /**
   * Get storeBuilder
   * @return storeBuilder
   */
  @javax.annotation.Nullable
  public AdministratorWebTokenSpecStoreBuilder getStoreBuilder() {
    return storeBuilder;
  }

  public void setStoreBuilder(AdministratorWebTokenSpecStoreBuilder storeBuilder) {
    this.storeBuilder = storeBuilder;
  }


  public AdministratorWebTokenSpec webApps(AdministratorWebTokenSpecWebApps webApps) {
    this.webApps = webApps;
    return this;
  }

  /**
   * Get webApps
   * @return webApps
   */
  @javax.annotation.Nullable
  public AdministratorWebTokenSpecWebApps getWebApps() {
    return webApps;
  }

  public void setWebApps(AdministratorWebTokenSpecWebApps webApps) {
    this.webApps = webApps;
  }


  public AdministratorWebTokenSpec zeroTouch(AdministratorWebTokenSpecZeroTouch zeroTouch) {
    this.zeroTouch = zeroTouch;
    return this;
  }

  /**
   * Get zeroTouch
   * @return zeroTouch
   */
  @javax.annotation.Nullable
  public AdministratorWebTokenSpecZeroTouch getZeroTouch() {
    return zeroTouch;
  }

  public void setZeroTouch(AdministratorWebTokenSpecZeroTouch zeroTouch) {
    this.zeroTouch = zeroTouch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdministratorWebTokenSpec administratorWebTokenSpec = (AdministratorWebTokenSpec) o;
    return Objects.equals(this.managedConfigurations, administratorWebTokenSpec.managedConfigurations) &&
        Objects.equals(this.parent, administratorWebTokenSpec.parent) &&
        Objects.equals(this.permission, administratorWebTokenSpec.permission) &&
        Objects.equals(this.playSearch, administratorWebTokenSpec.playSearch) &&
        Objects.equals(this.privateApps, administratorWebTokenSpec.privateApps) &&
        Objects.equals(this.storeBuilder, administratorWebTokenSpec.storeBuilder) &&
        Objects.equals(this.webApps, administratorWebTokenSpec.webApps) &&
        Objects.equals(this.zeroTouch, administratorWebTokenSpec.zeroTouch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(managedConfigurations, parent, permission, playSearch, privateApps, storeBuilder, webApps, zeroTouch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdministratorWebTokenSpec {\n");
    sb.append("    managedConfigurations: ").append(toIndentedString(managedConfigurations)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    playSearch: ").append(toIndentedString(playSearch)).append("\n");
    sb.append("    privateApps: ").append(toIndentedString(privateApps)).append("\n");
    sb.append("    storeBuilder: ").append(toIndentedString(storeBuilder)).append("\n");
    sb.append("    webApps: ").append(toIndentedString(webApps)).append("\n");
    sb.append("    zeroTouch: ").append(toIndentedString(zeroTouch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("managedConfigurations");
    openapiFields.add("parent");
    openapiFields.add("permission");
    openapiFields.add("playSearch");
    openapiFields.add("privateApps");
    openapiFields.add("storeBuilder");
    openapiFields.add("webApps");
    openapiFields.add("zeroTouch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdministratorWebTokenSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdministratorWebTokenSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdministratorWebTokenSpec is not found in the empty JSON string", AdministratorWebTokenSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdministratorWebTokenSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdministratorWebTokenSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `managedConfigurations`
      if (jsonObj.get("managedConfigurations") != null && !jsonObj.get("managedConfigurations").isJsonNull()) {
        AdministratorWebTokenSpecManagedConfigurations.validateJsonElement(jsonObj.get("managedConfigurations"));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull() && !jsonObj.get("permission").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission` to be an array in the JSON string but got `%s`", jsonObj.get("permission").toString()));
      }
      // validate the optional field `playSearch`
      if (jsonObj.get("playSearch") != null && !jsonObj.get("playSearch").isJsonNull()) {
        AdministratorWebTokenSpecPlaySearch.validateJsonElement(jsonObj.get("playSearch"));
      }
      // validate the optional field `privateApps`
      if (jsonObj.get("privateApps") != null && !jsonObj.get("privateApps").isJsonNull()) {
        AdministratorWebTokenSpecPrivateApps.validateJsonElement(jsonObj.get("privateApps"));
      }
      // validate the optional field `storeBuilder`
      if (jsonObj.get("storeBuilder") != null && !jsonObj.get("storeBuilder").isJsonNull()) {
        AdministratorWebTokenSpecStoreBuilder.validateJsonElement(jsonObj.get("storeBuilder"));
      }
      // validate the optional field `webApps`
      if (jsonObj.get("webApps") != null && !jsonObj.get("webApps").isJsonNull()) {
        AdministratorWebTokenSpecWebApps.validateJsonElement(jsonObj.get("webApps"));
      }
      // validate the optional field `zeroTouch`
      if (jsonObj.get("zeroTouch") != null && !jsonObj.get("zeroTouch").isJsonNull()) {
        AdministratorWebTokenSpecZeroTouch.validateJsonElement(jsonObj.get("zeroTouch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdministratorWebTokenSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdministratorWebTokenSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdministratorWebTokenSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdministratorWebTokenSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<AdministratorWebTokenSpec>() {
           @Override
           public void write(JsonWriter out, AdministratorWebTokenSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdministratorWebTokenSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdministratorWebTokenSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdministratorWebTokenSpec
   * @throws IOException if the JSON string is invalid with respect to AdministratorWebTokenSpec
   */
  public static AdministratorWebTokenSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdministratorWebTokenSpec.class);
  }

  /**
   * Convert an instance of AdministratorWebTokenSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

