/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoInstallConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoInstallPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoInstallPolicy {
  public static final String SERIALIZED_NAME_AUTO_INSTALL_CONSTRAINT = "autoInstallConstraint";
  @SerializedName(SERIALIZED_NAME_AUTO_INSTALL_CONSTRAINT)
  private List<AutoInstallConstraint> autoInstallConstraint = new ArrayList<>();

  /**
   * The auto-install mode. If unset, defaults to \&quot;doNotAutoInstall\&quot;. An app is automatically installed regardless of a set maintenance window.
   */
  @JsonAdapter(AutoInstallModeEnum.Adapter.class)
  public enum AutoInstallModeEnum {
    AUTO_INSTALL_MODE_UNSPECIFIED("autoInstallModeUnspecified"),
    
    DO_NOT_AUTO_INSTALL("doNotAutoInstall"),
    
    AUTO_INSTALL_ONCE("autoInstallOnce"),
    
    FORCE_AUTO_INSTALL("forceAutoInstall");

    private String value;

    AutoInstallModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoInstallModeEnum fromValue(String value) {
      for (AutoInstallModeEnum b : AutoInstallModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoInstallModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoInstallModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoInstallModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoInstallModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoInstallModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_INSTALL_MODE = "autoInstallMode";
  @SerializedName(SERIALIZED_NAME_AUTO_INSTALL_MODE)
  private AutoInstallModeEnum autoInstallMode;

  public static final String SERIALIZED_NAME_AUTO_INSTALL_PRIORITY = "autoInstallPriority";
  @SerializedName(SERIALIZED_NAME_AUTO_INSTALL_PRIORITY)
  private Integer autoInstallPriority;

  public static final String SERIALIZED_NAME_MINIMUM_VERSION_CODE = "minimumVersionCode";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VERSION_CODE)
  private Integer minimumVersionCode;

  public AutoInstallPolicy() {
  }

  public AutoInstallPolicy autoInstallConstraint(List<AutoInstallConstraint> autoInstallConstraint) {
    this.autoInstallConstraint = autoInstallConstraint;
    return this;
  }

  public AutoInstallPolicy addAutoInstallConstraintItem(AutoInstallConstraint autoInstallConstraintItem) {
    if (this.autoInstallConstraint == null) {
      this.autoInstallConstraint = new ArrayList<>();
    }
    this.autoInstallConstraint.add(autoInstallConstraintItem);
    return this;
  }

  /**
   * The constraints for auto-installing the app. You can specify a maximum of one constraint.
   * @return autoInstallConstraint
   */
  @javax.annotation.Nullable
  public List<AutoInstallConstraint> getAutoInstallConstraint() {
    return autoInstallConstraint;
  }

  public void setAutoInstallConstraint(List<AutoInstallConstraint> autoInstallConstraint) {
    this.autoInstallConstraint = autoInstallConstraint;
  }


  public AutoInstallPolicy autoInstallMode(AutoInstallModeEnum autoInstallMode) {
    this.autoInstallMode = autoInstallMode;
    return this;
  }

  /**
   * The auto-install mode. If unset, defaults to \&quot;doNotAutoInstall\&quot;. An app is automatically installed regardless of a set maintenance window.
   * @return autoInstallMode
   */
  @javax.annotation.Nullable
  public AutoInstallModeEnum getAutoInstallMode() {
    return autoInstallMode;
  }

  public void setAutoInstallMode(AutoInstallModeEnum autoInstallMode) {
    this.autoInstallMode = autoInstallMode;
  }


  public AutoInstallPolicy autoInstallPriority(Integer autoInstallPriority) {
    this.autoInstallPriority = autoInstallPriority;
    return this;
  }

  /**
   * The priority of the install, as an unsigned integer. A lower number means higher priority.
   * @return autoInstallPriority
   */
  @javax.annotation.Nullable
  public Integer getAutoInstallPriority() {
    return autoInstallPriority;
  }

  public void setAutoInstallPriority(Integer autoInstallPriority) {
    this.autoInstallPriority = autoInstallPriority;
  }


  public AutoInstallPolicy minimumVersionCode(Integer minimumVersionCode) {
    this.minimumVersionCode = minimumVersionCode;
    return this;
  }

  /**
   * The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.
   * @return minimumVersionCode
   */
  @javax.annotation.Nullable
  public Integer getMinimumVersionCode() {
    return minimumVersionCode;
  }

  public void setMinimumVersionCode(Integer minimumVersionCode) {
    this.minimumVersionCode = minimumVersionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoInstallPolicy autoInstallPolicy = (AutoInstallPolicy) o;
    return Objects.equals(this.autoInstallConstraint, autoInstallPolicy.autoInstallConstraint) &&
        Objects.equals(this.autoInstallMode, autoInstallPolicy.autoInstallMode) &&
        Objects.equals(this.autoInstallPriority, autoInstallPolicy.autoInstallPriority) &&
        Objects.equals(this.minimumVersionCode, autoInstallPolicy.minimumVersionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoInstallConstraint, autoInstallMode, autoInstallPriority, minimumVersionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoInstallPolicy {\n");
    sb.append("    autoInstallConstraint: ").append(toIndentedString(autoInstallConstraint)).append("\n");
    sb.append("    autoInstallMode: ").append(toIndentedString(autoInstallMode)).append("\n");
    sb.append("    autoInstallPriority: ").append(toIndentedString(autoInstallPriority)).append("\n");
    sb.append("    minimumVersionCode: ").append(toIndentedString(minimumVersionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoInstallConstraint");
    openapiFields.add("autoInstallMode");
    openapiFields.add("autoInstallPriority");
    openapiFields.add("minimumVersionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoInstallPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoInstallPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoInstallPolicy is not found in the empty JSON string", AutoInstallPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoInstallPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoInstallPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("autoInstallConstraint") != null && !jsonObj.get("autoInstallConstraint").isJsonNull()) {
        JsonArray jsonArrayautoInstallConstraint = jsonObj.getAsJsonArray("autoInstallConstraint");
        if (jsonArrayautoInstallConstraint != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoInstallConstraint").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoInstallConstraint` to be an array in the JSON string but got `%s`", jsonObj.get("autoInstallConstraint").toString()));
          }

          // validate the optional field `autoInstallConstraint` (array)
          for (int i = 0; i < jsonArrayautoInstallConstraint.size(); i++) {
            AutoInstallConstraint.validateJsonElement(jsonArrayautoInstallConstraint.get(i));
          };
        }
      }
      if ((jsonObj.get("autoInstallMode") != null && !jsonObj.get("autoInstallMode").isJsonNull()) && !jsonObj.get("autoInstallMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoInstallMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoInstallMode").toString()));
      }
      // validate the optional field `autoInstallMode`
      if (jsonObj.get("autoInstallMode") != null && !jsonObj.get("autoInstallMode").isJsonNull()) {
        AutoInstallModeEnum.validateJsonElement(jsonObj.get("autoInstallMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoInstallPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoInstallPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoInstallPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoInstallPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoInstallPolicy>() {
           @Override
           public void write(JsonWriter out, AutoInstallPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoInstallPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoInstallPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoInstallPolicy
   * @throws IOException if the JSON string is invalid with respect to AutoInstallPolicy
   */
  public static AutoInstallPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoInstallPolicy.class);
  }

  /**
   * Convert an instance of AutoInstallPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

