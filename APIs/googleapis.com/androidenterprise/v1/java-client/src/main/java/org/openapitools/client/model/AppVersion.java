/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This represents a single version of the app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppVersion {
  public static final String SERIALIZED_NAME_IS_PRODUCTION = "isProduction";
  @SerializedName(SERIALIZED_NAME_IS_PRODUCTION)
  private Boolean isProduction;

  public static final String SERIALIZED_NAME_TARGET_SDK_VERSION = "targetSdkVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_SDK_VERSION)
  private Integer targetSdkVersion;

  /**
   * Deprecated, use trackId instead.
   */
  @JsonAdapter(TrackEnum.Adapter.class)
  public enum TrackEnum {
    APP_TRACK_UNSPECIFIED("appTrackUnspecified"),
    
    PRODUCTION("production"),
    
    BETA("beta"),
    
    ALPHA("alpha");

    private String value;

    TrackEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackEnum fromValue(String value) {
      for (TrackEnum b : TrackEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private TrackEnum track;

  public static final String SERIALIZED_NAME_TRACK_ID = "trackId";
  @SerializedName(SERIALIZED_NAME_TRACK_ID)
  private List<String> trackId = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_CODE = "versionCode";
  @SerializedName(SERIALIZED_NAME_VERSION_CODE)
  private Integer versionCode;

  public static final String SERIALIZED_NAME_VERSION_STRING = "versionString";
  @SerializedName(SERIALIZED_NAME_VERSION_STRING)
  private String versionString;

  public AppVersion() {
  }

  public AppVersion isProduction(Boolean isProduction) {
    this.isProduction = isProduction;
    return this;
  }

  /**
   * True if this version is a production APK.
   * @return isProduction
   */
  @javax.annotation.Nullable
  public Boolean getIsProduction() {
    return isProduction;
  }

  public void setIsProduction(Boolean isProduction) {
    this.isProduction = isProduction;
  }


  public AppVersion targetSdkVersion(Integer targetSdkVersion) {
    this.targetSdkVersion = targetSdkVersion;
    return this;
  }

  /**
   * The SDK version this app targets, as specified in the manifest of the APK. See http://developer.android.com/guide/topics/manifest/uses-sdk-element.html
   * @return targetSdkVersion
   */
  @javax.annotation.Nullable
  public Integer getTargetSdkVersion() {
    return targetSdkVersion;
  }

  public void setTargetSdkVersion(Integer targetSdkVersion) {
    this.targetSdkVersion = targetSdkVersion;
  }


  public AppVersion track(TrackEnum track) {
    this.track = track;
    return this;
  }

  /**
   * Deprecated, use trackId instead.
   * @return track
   */
  @javax.annotation.Nullable
  public TrackEnum getTrack() {
    return track;
  }

  public void setTrack(TrackEnum track) {
    this.track = track;
  }


  public AppVersion trackId(List<String> trackId) {
    this.trackId = trackId;
    return this;
  }

  public AppVersion addTrackIdItem(String trackIdItem) {
    if (this.trackId == null) {
      this.trackId = new ArrayList<>();
    }
    this.trackId.add(trackIdItem);
    return this;
  }

  /**
   * Track ids that the app version is published in. Replaces the track field (deprecated), but doesn&#39;t include the production track (see isProduction instead).
   * @return trackId
   */
  @javax.annotation.Nullable
  public List<String> getTrackId() {
    return trackId;
  }

  public void setTrackId(List<String> trackId) {
    this.trackId = trackId;
  }


  public AppVersion versionCode(Integer versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  /**
   * Unique increasing identifier for the app version.
   * @return versionCode
   */
  @javax.annotation.Nullable
  public Integer getVersionCode() {
    return versionCode;
  }

  public void setVersionCode(Integer versionCode) {
    this.versionCode = versionCode;
  }


  public AppVersion versionString(String versionString) {
    this.versionString = versionString;
    return this;
  }

  /**
   * The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be \&quot;1.4\&quot;).
   * @return versionString
   */
  @javax.annotation.Nullable
  public String getVersionString() {
    return versionString;
  }

  public void setVersionString(String versionString) {
    this.versionString = versionString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppVersion appVersion = (AppVersion) o;
    return Objects.equals(this.isProduction, appVersion.isProduction) &&
        Objects.equals(this.targetSdkVersion, appVersion.targetSdkVersion) &&
        Objects.equals(this.track, appVersion.track) &&
        Objects.equals(this.trackId, appVersion.trackId) &&
        Objects.equals(this.versionCode, appVersion.versionCode) &&
        Objects.equals(this.versionString, appVersion.versionString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isProduction, targetSdkVersion, track, trackId, versionCode, versionString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppVersion {\n");
    sb.append("    isProduction: ").append(toIndentedString(isProduction)).append("\n");
    sb.append("    targetSdkVersion: ").append(toIndentedString(targetSdkVersion)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("    versionCode: ").append(toIndentedString(versionCode)).append("\n");
    sb.append("    versionString: ").append(toIndentedString(versionString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isProduction");
    openapiFields.add("targetSdkVersion");
    openapiFields.add("track");
    openapiFields.add("trackId");
    openapiFields.add("versionCode");
    openapiFields.add("versionString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppVersion is not found in the empty JSON string", AppVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) && !jsonObj.get("track").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track").toString()));
      }
      // validate the optional field `track`
      if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
        TrackEnum.validateJsonElement(jsonObj.get("track"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trackId") != null && !jsonObj.get("trackId").isJsonNull() && !jsonObj.get("trackId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackId` to be an array in the JSON string but got `%s`", jsonObj.get("trackId").toString()));
      }
      if ((jsonObj.get("versionString") != null && !jsonObj.get("versionString").isJsonNull()) && !jsonObj.get("versionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<AppVersion>() {
           @Override
           public void write(JsonWriter out, AppVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppVersion
   * @throws IOException if the JSON string is invalid with respect to AppVersion
   */
  public static AppVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppVersion.class);
  }

  /**
   * Convert an instance of AppVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

