/*
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A typed value for the restriction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:04.392334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppRestrictionsSchemaRestrictionRestrictionValue {
  /**
   * The type of the value being provided.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BOOL("bool"),
    
    STRING("string"),
    
    INTEGER("integer"),
    
    CHOICE("choice"),
    
    MULTISELECT("multiselect"),
    
    HIDDEN("hidden"),
    
    BUNDLE("bundle"),
    
    BUNDLE_ARRAY("bundleArray");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE_BOOL = "valueBool";
  @SerializedName(SERIALIZED_NAME_VALUE_BOOL)
  private Boolean valueBool;

  public static final String SERIALIZED_NAME_VALUE_INTEGER = "valueInteger";
  @SerializedName(SERIALIZED_NAME_VALUE_INTEGER)
  private Integer valueInteger;

  public static final String SERIALIZED_NAME_VALUE_MULTISELECT = "valueMultiselect";
  @SerializedName(SERIALIZED_NAME_VALUE_MULTISELECT)
  private List<String> valueMultiselect = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_STRING = "valueString";
  @SerializedName(SERIALIZED_NAME_VALUE_STRING)
  private String valueString;

  public AppRestrictionsSchemaRestrictionRestrictionValue() {
  }

  public AppRestrictionsSchemaRestrictionRestrictionValue type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the value being provided.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AppRestrictionsSchemaRestrictionRestrictionValue valueBool(Boolean valueBool) {
    this.valueBool = valueBool;
    return this;
  }

  /**
   * The boolean value - this will only be present if type is bool.
   * @return valueBool
   */
  @javax.annotation.Nullable
  public Boolean getValueBool() {
    return valueBool;
  }

  public void setValueBool(Boolean valueBool) {
    this.valueBool = valueBool;
  }


  public AppRestrictionsSchemaRestrictionRestrictionValue valueInteger(Integer valueInteger) {
    this.valueInteger = valueInteger;
    return this;
  }

  /**
   * The integer value - this will only be present if type is integer.
   * @return valueInteger
   */
  @javax.annotation.Nullable
  public Integer getValueInteger() {
    return valueInteger;
  }

  public void setValueInteger(Integer valueInteger) {
    this.valueInteger = valueInteger;
  }


  public AppRestrictionsSchemaRestrictionRestrictionValue valueMultiselect(List<String> valueMultiselect) {
    this.valueMultiselect = valueMultiselect;
    return this;
  }

  public AppRestrictionsSchemaRestrictionRestrictionValue addValueMultiselectItem(String valueMultiselectItem) {
    if (this.valueMultiselect == null) {
      this.valueMultiselect = new ArrayList<>();
    }
    this.valueMultiselect.add(valueMultiselectItem);
    return this;
  }

  /**
   * The list of string values - this will only be present if type is multiselect.
   * @return valueMultiselect
   */
  @javax.annotation.Nullable
  public List<String> getValueMultiselect() {
    return valueMultiselect;
  }

  public void setValueMultiselect(List<String> valueMultiselect) {
    this.valueMultiselect = valueMultiselect;
  }


  public AppRestrictionsSchemaRestrictionRestrictionValue valueString(String valueString) {
    this.valueString = valueString;
    return this;
  }

  /**
   * The string value - this will be present for types string, choice and hidden.
   * @return valueString
   */
  @javax.annotation.Nullable
  public String getValueString() {
    return valueString;
  }

  public void setValueString(String valueString) {
    this.valueString = valueString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRestrictionsSchemaRestrictionRestrictionValue appRestrictionsSchemaRestrictionRestrictionValue = (AppRestrictionsSchemaRestrictionRestrictionValue) o;
    return Objects.equals(this.type, appRestrictionsSchemaRestrictionRestrictionValue.type) &&
        Objects.equals(this.valueBool, appRestrictionsSchemaRestrictionRestrictionValue.valueBool) &&
        Objects.equals(this.valueInteger, appRestrictionsSchemaRestrictionRestrictionValue.valueInteger) &&
        Objects.equals(this.valueMultiselect, appRestrictionsSchemaRestrictionRestrictionValue.valueMultiselect) &&
        Objects.equals(this.valueString, appRestrictionsSchemaRestrictionRestrictionValue.valueString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, valueBool, valueInteger, valueMultiselect, valueString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRestrictionsSchemaRestrictionRestrictionValue {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueBool: ").append(toIndentedString(valueBool)).append("\n");
    sb.append("    valueInteger: ").append(toIndentedString(valueInteger)).append("\n");
    sb.append("    valueMultiselect: ").append(toIndentedString(valueMultiselect)).append("\n");
    sb.append("    valueString: ").append(toIndentedString(valueString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("valueBool");
    openapiFields.add("valueInteger");
    openapiFields.add("valueMultiselect");
    openapiFields.add("valueString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppRestrictionsSchemaRestrictionRestrictionValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRestrictionsSchemaRestrictionRestrictionValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRestrictionsSchemaRestrictionRestrictionValue is not found in the empty JSON string", AppRestrictionsSchemaRestrictionRestrictionValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRestrictionsSchemaRestrictionRestrictionValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRestrictionsSchemaRestrictionRestrictionValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("valueMultiselect") != null && !jsonObj.get("valueMultiselect").isJsonNull() && !jsonObj.get("valueMultiselect").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueMultiselect` to be an array in the JSON string but got `%s`", jsonObj.get("valueMultiselect").toString()));
      }
      if ((jsonObj.get("valueString") != null && !jsonObj.get("valueString").isJsonNull()) && !jsonObj.get("valueString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRestrictionsSchemaRestrictionRestrictionValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRestrictionsSchemaRestrictionRestrictionValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRestrictionsSchemaRestrictionRestrictionValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRestrictionsSchemaRestrictionRestrictionValue.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRestrictionsSchemaRestrictionRestrictionValue>() {
           @Override
           public void write(JsonWriter out, AppRestrictionsSchemaRestrictionRestrictionValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRestrictionsSchemaRestrictionRestrictionValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppRestrictionsSchemaRestrictionRestrictionValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppRestrictionsSchemaRestrictionRestrictionValue
   * @throws IOException if the JSON string is invalid with respect to AppRestrictionsSchemaRestrictionRestrictionValue
   */
  public static AppRestrictionsSchemaRestrictionRestrictionValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRestrictionsSchemaRestrictionRestrictionValue.class);
  }

  /**
   * Convert an instance of AppRestrictionsSchemaRestrictionRestrictionValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

