/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppVersion::OAIAppVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppVersion::OAIAppVersion() {
    this->initializeModel();
}

OAIAppVersion::~OAIAppVersion() {}

void OAIAppVersion::initializeModel() {

    m_is_production_isSet = false;
    m_is_production_isValid = false;

    m_target_sdk_version_isSet = false;
    m_target_sdk_version_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;

    m_track_id_isSet = false;
    m_track_id_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;

    m_version_string_isSet = false;
    m_version_string_isValid = false;
}

void OAIAppVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppVersion::fromJsonObject(QJsonObject json) {

    m_is_production_isValid = ::OpenAPI::fromJsonValue(m_is_production, json[QString("isProduction")]);
    m_is_production_isSet = !json[QString("isProduction")].isNull() && m_is_production_isValid;

    m_target_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_target_sdk_version, json[QString("targetSdkVersion")]);
    m_target_sdk_version_isSet = !json[QString("targetSdkVersion")].isNull() && m_target_sdk_version_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;

    m_track_id_isValid = ::OpenAPI::fromJsonValue(m_track_id, json[QString("trackId")]);
    m_track_id_isSet = !json[QString("trackId")].isNull() && m_track_id_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;

    m_version_string_isValid = ::OpenAPI::fromJsonValue(m_version_string, json[QString("versionString")]);
    m_version_string_isSet = !json[QString("versionString")].isNull() && m_version_string_isValid;
}

QString OAIAppVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_is_production_isSet) {
        obj.insert(QString("isProduction"), ::OpenAPI::toJsonValue(m_is_production));
    }
    if (m_target_sdk_version_isSet) {
        obj.insert(QString("targetSdkVersion"), ::OpenAPI::toJsonValue(m_target_sdk_version));
    }
    if (m_track_isSet) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    if (m_track_id.size() > 0) {
        obj.insert(QString("trackId"), ::OpenAPI::toJsonValue(m_track_id));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    if (m_version_string_isSet) {
        obj.insert(QString("versionString"), ::OpenAPI::toJsonValue(m_version_string));
    }
    return obj;
}

bool OAIAppVersion::isIsProduction() const {
    return m_is_production;
}
void OAIAppVersion::setIsProduction(const bool &is_production) {
    m_is_production = is_production;
    m_is_production_isSet = true;
}

bool OAIAppVersion::is_is_production_Set() const{
    return m_is_production_isSet;
}

bool OAIAppVersion::is_is_production_Valid() const{
    return m_is_production_isValid;
}

qint32 OAIAppVersion::getTargetSdkVersion() const {
    return m_target_sdk_version;
}
void OAIAppVersion::setTargetSdkVersion(const qint32 &target_sdk_version) {
    m_target_sdk_version = target_sdk_version;
    m_target_sdk_version_isSet = true;
}

bool OAIAppVersion::is_target_sdk_version_Set() const{
    return m_target_sdk_version_isSet;
}

bool OAIAppVersion::is_target_sdk_version_Valid() const{
    return m_target_sdk_version_isValid;
}

QString OAIAppVersion::getTrack() const {
    return m_track;
}
void OAIAppVersion::setTrack(const QString &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIAppVersion::is_track_Set() const{
    return m_track_isSet;
}

bool OAIAppVersion::is_track_Valid() const{
    return m_track_isValid;
}

QList<QString> OAIAppVersion::getTrackId() const {
    return m_track_id;
}
void OAIAppVersion::setTrackId(const QList<QString> &track_id) {
    m_track_id = track_id;
    m_track_id_isSet = true;
}

bool OAIAppVersion::is_track_id_Set() const{
    return m_track_id_isSet;
}

bool OAIAppVersion::is_track_id_Valid() const{
    return m_track_id_isValid;
}

qint32 OAIAppVersion::getVersionCode() const {
    return m_version_code;
}
void OAIAppVersion::setVersionCode(const qint32 &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIAppVersion::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIAppVersion::is_version_code_Valid() const{
    return m_version_code_isValid;
}

QString OAIAppVersion::getVersionString() const {
    return m_version_string;
}
void OAIAppVersion::setVersionString(const QString &version_string) {
    m_version_string = version_string;
    m_version_string_isSet = true;
}

bool OAIAppVersion::is_version_string_Set() const{
    return m_version_string_isSet;
}

bool OAIAppVersion::is_version_string_Valid() const{
    return m_version_string_isValid;
}

bool OAIAppVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_production_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
