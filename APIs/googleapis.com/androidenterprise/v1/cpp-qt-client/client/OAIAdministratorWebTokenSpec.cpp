/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministratorWebTokenSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdministratorWebTokenSpec::OAIAdministratorWebTokenSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdministratorWebTokenSpec::OAIAdministratorWebTokenSpec() {
    this->initializeModel();
}

OAIAdministratorWebTokenSpec::~OAIAdministratorWebTokenSpec() {}

void OAIAdministratorWebTokenSpec::initializeModel() {

    m_managed_configurations_isSet = false;
    m_managed_configurations_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_play_search_isSet = false;
    m_play_search_isValid = false;

    m_private_apps_isSet = false;
    m_private_apps_isValid = false;

    m_store_builder_isSet = false;
    m_store_builder_isValid = false;

    m_web_apps_isSet = false;
    m_web_apps_isValid = false;

    m_zero_touch_isSet = false;
    m_zero_touch_isValid = false;
}

void OAIAdministratorWebTokenSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdministratorWebTokenSpec::fromJsonObject(QJsonObject json) {

    m_managed_configurations_isValid = ::OpenAPI::fromJsonValue(m_managed_configurations, json[QString("managedConfigurations")]);
    m_managed_configurations_isSet = !json[QString("managedConfigurations")].isNull() && m_managed_configurations_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_play_search_isValid = ::OpenAPI::fromJsonValue(m_play_search, json[QString("playSearch")]);
    m_play_search_isSet = !json[QString("playSearch")].isNull() && m_play_search_isValid;

    m_private_apps_isValid = ::OpenAPI::fromJsonValue(m_private_apps, json[QString("privateApps")]);
    m_private_apps_isSet = !json[QString("privateApps")].isNull() && m_private_apps_isValid;

    m_store_builder_isValid = ::OpenAPI::fromJsonValue(m_store_builder, json[QString("storeBuilder")]);
    m_store_builder_isSet = !json[QString("storeBuilder")].isNull() && m_store_builder_isValid;

    m_web_apps_isValid = ::OpenAPI::fromJsonValue(m_web_apps, json[QString("webApps")]);
    m_web_apps_isSet = !json[QString("webApps")].isNull() && m_web_apps_isValid;

    m_zero_touch_isValid = ::OpenAPI::fromJsonValue(m_zero_touch, json[QString("zeroTouch")]);
    m_zero_touch_isSet = !json[QString("zeroTouch")].isNull() && m_zero_touch_isValid;
}

QString OAIAdministratorWebTokenSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdministratorWebTokenSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_managed_configurations.isSet()) {
        obj.insert(QString("managedConfigurations"), ::OpenAPI::toJsonValue(m_managed_configurations));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permission.size() > 0) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_play_search.isSet()) {
        obj.insert(QString("playSearch"), ::OpenAPI::toJsonValue(m_play_search));
    }
    if (m_private_apps.isSet()) {
        obj.insert(QString("privateApps"), ::OpenAPI::toJsonValue(m_private_apps));
    }
    if (m_store_builder.isSet()) {
        obj.insert(QString("storeBuilder"), ::OpenAPI::toJsonValue(m_store_builder));
    }
    if (m_web_apps.isSet()) {
        obj.insert(QString("webApps"), ::OpenAPI::toJsonValue(m_web_apps));
    }
    if (m_zero_touch.isSet()) {
        obj.insert(QString("zeroTouch"), ::OpenAPI::toJsonValue(m_zero_touch));
    }
    return obj;
}

OAIAdministratorWebTokenSpecManagedConfigurations OAIAdministratorWebTokenSpec::getManagedConfigurations() const {
    return m_managed_configurations;
}
void OAIAdministratorWebTokenSpec::setManagedConfigurations(const OAIAdministratorWebTokenSpecManagedConfigurations &managed_configurations) {
    m_managed_configurations = managed_configurations;
    m_managed_configurations_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_managed_configurations_Set() const{
    return m_managed_configurations_isSet;
}

bool OAIAdministratorWebTokenSpec::is_managed_configurations_Valid() const{
    return m_managed_configurations_isValid;
}

QString OAIAdministratorWebTokenSpec::getParent() const {
    return m_parent;
}
void OAIAdministratorWebTokenSpec::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAdministratorWebTokenSpec::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<QString> OAIAdministratorWebTokenSpec::getPermission() const {
    return m_permission;
}
void OAIAdministratorWebTokenSpec::setPermission(const QList<QString> &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIAdministratorWebTokenSpec::is_permission_Valid() const{
    return m_permission_isValid;
}

OAIAdministratorWebTokenSpecPlaySearch OAIAdministratorWebTokenSpec::getPlaySearch() const {
    return m_play_search;
}
void OAIAdministratorWebTokenSpec::setPlaySearch(const OAIAdministratorWebTokenSpecPlaySearch &play_search) {
    m_play_search = play_search;
    m_play_search_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_play_search_Set() const{
    return m_play_search_isSet;
}

bool OAIAdministratorWebTokenSpec::is_play_search_Valid() const{
    return m_play_search_isValid;
}

OAIAdministratorWebTokenSpecPrivateApps OAIAdministratorWebTokenSpec::getPrivateApps() const {
    return m_private_apps;
}
void OAIAdministratorWebTokenSpec::setPrivateApps(const OAIAdministratorWebTokenSpecPrivateApps &private_apps) {
    m_private_apps = private_apps;
    m_private_apps_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_private_apps_Set() const{
    return m_private_apps_isSet;
}

bool OAIAdministratorWebTokenSpec::is_private_apps_Valid() const{
    return m_private_apps_isValid;
}

OAIAdministratorWebTokenSpecStoreBuilder OAIAdministratorWebTokenSpec::getStoreBuilder() const {
    return m_store_builder;
}
void OAIAdministratorWebTokenSpec::setStoreBuilder(const OAIAdministratorWebTokenSpecStoreBuilder &store_builder) {
    m_store_builder = store_builder;
    m_store_builder_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_store_builder_Set() const{
    return m_store_builder_isSet;
}

bool OAIAdministratorWebTokenSpec::is_store_builder_Valid() const{
    return m_store_builder_isValid;
}

OAIAdministratorWebTokenSpecWebApps OAIAdministratorWebTokenSpec::getWebApps() const {
    return m_web_apps;
}
void OAIAdministratorWebTokenSpec::setWebApps(const OAIAdministratorWebTokenSpecWebApps &web_apps) {
    m_web_apps = web_apps;
    m_web_apps_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_web_apps_Set() const{
    return m_web_apps_isSet;
}

bool OAIAdministratorWebTokenSpec::is_web_apps_Valid() const{
    return m_web_apps_isValid;
}

OAIAdministratorWebTokenSpecZeroTouch OAIAdministratorWebTokenSpec::getZeroTouch() const {
    return m_zero_touch;
}
void OAIAdministratorWebTokenSpec::setZeroTouch(const OAIAdministratorWebTokenSpecZeroTouch &zero_touch) {
    m_zero_touch = zero_touch;
    m_zero_touch_isSet = true;
}

bool OAIAdministratorWebTokenSpec::is_zero_touch_Set() const{
    return m_zero_touch_isSet;
}

bool OAIAdministratorWebTokenSpec::is_zero_touch_Valid() const{
    return m_zero_touch_isValid;
}

bool OAIAdministratorWebTokenSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_managed_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_search.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_apps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_builder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_apps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zero_touch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdministratorWebTokenSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
