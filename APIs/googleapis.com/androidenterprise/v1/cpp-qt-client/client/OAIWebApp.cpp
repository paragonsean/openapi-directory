/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebApp::OAIWebApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebApp::OAIWebApp() {
    this->initializeModel();
}

OAIWebApp::~OAIWebApp() {}

void OAIWebApp::initializeModel() {

    m_display_mode_isSet = false;
    m_display_mode_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_start_url_isSet = false;
    m_start_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;

    m_web_app_id_isSet = false;
    m_web_app_id_isValid = false;
}

void OAIWebApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebApp::fromJsonObject(QJsonObject json) {

    m_display_mode_isValid = ::OpenAPI::fromJsonValue(m_display_mode, json[QString("displayMode")]);
    m_display_mode_isSet = !json[QString("displayMode")].isNull() && m_display_mode_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_start_url_isValid = ::OpenAPI::fromJsonValue(m_start_url, json[QString("startUrl")]);
    m_start_url_isSet = !json[QString("startUrl")].isNull() && m_start_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;

    m_web_app_id_isValid = ::OpenAPI::fromJsonValue(m_web_app_id, json[QString("webAppId")]);
    m_web_app_id_isSet = !json[QString("webAppId")].isNull() && m_web_app_id_isValid;
}

QString OAIWebApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebApp::asJsonObject() const {
    QJsonObject obj;
    if (m_display_mode_isSet) {
        obj.insert(QString("displayMode"), ::OpenAPI::toJsonValue(m_display_mode));
    }
    if (m_icons.size() > 0) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_start_url_isSet) {
        obj.insert(QString("startUrl"), ::OpenAPI::toJsonValue(m_start_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    if (m_web_app_id_isSet) {
        obj.insert(QString("webAppId"), ::OpenAPI::toJsonValue(m_web_app_id));
    }
    return obj;
}

QString OAIWebApp::getDisplayMode() const {
    return m_display_mode;
}
void OAIWebApp::setDisplayMode(const QString &display_mode) {
    m_display_mode = display_mode;
    m_display_mode_isSet = true;
}

bool OAIWebApp::is_display_mode_Set() const{
    return m_display_mode_isSet;
}

bool OAIWebApp::is_display_mode_Valid() const{
    return m_display_mode_isValid;
}

QList<OAIWebAppIcon> OAIWebApp::getIcons() const {
    return m_icons;
}
void OAIWebApp::setIcons(const QList<OAIWebAppIcon> &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIWebApp::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIWebApp::is_icons_Valid() const{
    return m_icons_isValid;
}

bool OAIWebApp::isIsPublished() const {
    return m_is_published;
}
void OAIWebApp::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAIWebApp::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAIWebApp::is_is_published_Valid() const{
    return m_is_published_isValid;
}

QString OAIWebApp::getStartUrl() const {
    return m_start_url;
}
void OAIWebApp::setStartUrl(const QString &start_url) {
    m_start_url = start_url;
    m_start_url_isSet = true;
}

bool OAIWebApp::is_start_url_Set() const{
    return m_start_url_isSet;
}

bool OAIWebApp::is_start_url_Valid() const{
    return m_start_url_isValid;
}

QString OAIWebApp::getTitle() const {
    return m_title;
}
void OAIWebApp::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWebApp::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWebApp::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIWebApp::getVersionCode() const {
    return m_version_code;
}
void OAIWebApp::setVersionCode(const QString &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIWebApp::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIWebApp::is_version_code_Valid() const{
    return m_version_code_isValid;
}

QString OAIWebApp::getWebAppId() const {
    return m_web_app_id;
}
void OAIWebApp::setWebAppId(const QString &web_app_id) {
    m_web_app_id = web_app_id;
    m_web_app_id_isSet = true;
}

bool OAIWebApp::is_web_app_id_Set() const{
    return m_web_app_id_isSet;
}

bool OAIWebApp::is_web_app_id_Valid() const{
    return m_web_app_id_isValid;
}

bool OAIWebApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
