/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoInstallConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoInstallConstraint::OAIAutoInstallConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoInstallConstraint::OAIAutoInstallConstraint() {
    this->initializeModel();
}

OAIAutoInstallConstraint::~OAIAutoInstallConstraint() {}

void OAIAutoInstallConstraint::initializeModel() {

    m_charging_state_constraint_isSet = false;
    m_charging_state_constraint_isValid = false;

    m_device_idle_state_constraint_isSet = false;
    m_device_idle_state_constraint_isValid = false;

    m_network_type_constraint_isSet = false;
    m_network_type_constraint_isValid = false;
}

void OAIAutoInstallConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoInstallConstraint::fromJsonObject(QJsonObject json) {

    m_charging_state_constraint_isValid = ::OpenAPI::fromJsonValue(m_charging_state_constraint, json[QString("chargingStateConstraint")]);
    m_charging_state_constraint_isSet = !json[QString("chargingStateConstraint")].isNull() && m_charging_state_constraint_isValid;

    m_device_idle_state_constraint_isValid = ::OpenAPI::fromJsonValue(m_device_idle_state_constraint, json[QString("deviceIdleStateConstraint")]);
    m_device_idle_state_constraint_isSet = !json[QString("deviceIdleStateConstraint")].isNull() && m_device_idle_state_constraint_isValid;

    m_network_type_constraint_isValid = ::OpenAPI::fromJsonValue(m_network_type_constraint, json[QString("networkTypeConstraint")]);
    m_network_type_constraint_isSet = !json[QString("networkTypeConstraint")].isNull() && m_network_type_constraint_isValid;
}

QString OAIAutoInstallConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoInstallConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_charging_state_constraint_isSet) {
        obj.insert(QString("chargingStateConstraint"), ::OpenAPI::toJsonValue(m_charging_state_constraint));
    }
    if (m_device_idle_state_constraint_isSet) {
        obj.insert(QString("deviceIdleStateConstraint"), ::OpenAPI::toJsonValue(m_device_idle_state_constraint));
    }
    if (m_network_type_constraint_isSet) {
        obj.insert(QString("networkTypeConstraint"), ::OpenAPI::toJsonValue(m_network_type_constraint));
    }
    return obj;
}

QString OAIAutoInstallConstraint::getChargingStateConstraint() const {
    return m_charging_state_constraint;
}
void OAIAutoInstallConstraint::setChargingStateConstraint(const QString &charging_state_constraint) {
    m_charging_state_constraint = charging_state_constraint;
    m_charging_state_constraint_isSet = true;
}

bool OAIAutoInstallConstraint::is_charging_state_constraint_Set() const{
    return m_charging_state_constraint_isSet;
}

bool OAIAutoInstallConstraint::is_charging_state_constraint_Valid() const{
    return m_charging_state_constraint_isValid;
}

QString OAIAutoInstallConstraint::getDeviceIdleStateConstraint() const {
    return m_device_idle_state_constraint;
}
void OAIAutoInstallConstraint::setDeviceIdleStateConstraint(const QString &device_idle_state_constraint) {
    m_device_idle_state_constraint = device_idle_state_constraint;
    m_device_idle_state_constraint_isSet = true;
}

bool OAIAutoInstallConstraint::is_device_idle_state_constraint_Set() const{
    return m_device_idle_state_constraint_isSet;
}

bool OAIAutoInstallConstraint::is_device_idle_state_constraint_Valid() const{
    return m_device_idle_state_constraint_isValid;
}

QString OAIAutoInstallConstraint::getNetworkTypeConstraint() const {
    return m_network_type_constraint;
}
void OAIAutoInstallConstraint::setNetworkTypeConstraint(const QString &network_type_constraint) {
    m_network_type_constraint = network_type_constraint;
    m_network_type_constraint_isSet = true;
}

bool OAIAutoInstallConstraint::is_network_type_constraint_Set() const{
    return m_network_type_constraint_isSet;
}

bool OAIAutoInstallConstraint::is_network_type_constraint_Valid() const{
    return m_network_type_constraint_isValid;
}

bool OAIAutoInstallConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charging_state_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_idle_state_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoInstallConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
