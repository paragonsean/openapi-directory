/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewDeviceEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewDeviceEvent::OAINewDeviceEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewDeviceEvent::OAINewDeviceEvent() {
    this->initializeModel();
}

OAINewDeviceEvent::~OAINewDeviceEvent() {}

void OAINewDeviceEvent::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_dpc_package_name_isSet = false;
    m_dpc_package_name_isValid = false;

    m_management_type_isSet = false;
    m_management_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAINewDeviceEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewDeviceEvent::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_dpc_package_name_isValid = ::OpenAPI::fromJsonValue(m_dpc_package_name, json[QString("dpcPackageName")]);
    m_dpc_package_name_isSet = !json[QString("dpcPackageName")].isNull() && m_dpc_package_name_isValid;

    m_management_type_isValid = ::OpenAPI::fromJsonValue(m_management_type, json[QString("managementType")]);
    m_management_type_isSet = !json[QString("managementType")].isNull() && m_management_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAINewDeviceEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewDeviceEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_dpc_package_name_isSet) {
        obj.insert(QString("dpcPackageName"), ::OpenAPI::toJsonValue(m_dpc_package_name));
    }
    if (m_management_type_isSet) {
        obj.insert(QString("managementType"), ::OpenAPI::toJsonValue(m_management_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAINewDeviceEvent::getDeviceId() const {
    return m_device_id;
}
void OAINewDeviceEvent::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAINewDeviceEvent::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAINewDeviceEvent::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAINewDeviceEvent::getDpcPackageName() const {
    return m_dpc_package_name;
}
void OAINewDeviceEvent::setDpcPackageName(const QString &dpc_package_name) {
    m_dpc_package_name = dpc_package_name;
    m_dpc_package_name_isSet = true;
}

bool OAINewDeviceEvent::is_dpc_package_name_Set() const{
    return m_dpc_package_name_isSet;
}

bool OAINewDeviceEvent::is_dpc_package_name_Valid() const{
    return m_dpc_package_name_isValid;
}

QString OAINewDeviceEvent::getManagementType() const {
    return m_management_type;
}
void OAINewDeviceEvent::setManagementType(const QString &management_type) {
    m_management_type = management_type;
    m_management_type_isSet = true;
}

bool OAINewDeviceEvent::is_management_type_Set() const{
    return m_management_type_isSet;
}

bool OAINewDeviceEvent::is_management_type_Valid() const{
    return m_management_type_isValid;
}

QString OAINewDeviceEvent::getUserId() const {
    return m_user_id;
}
void OAINewDeviceEvent::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAINewDeviceEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAINewDeviceEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAINewDeviceEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpc_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewDeviceEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
