/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_android_id_isSet = false;
    m_android_id_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_latest_build_fingerprint_isSet = false;
    m_latest_build_fingerprint_isValid = false;

    m_maker_isSet = false;
    m_maker_isValid = false;

    m_management_type_isSet = false;
    m_management_type_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_retail_brand_isSet = false;
    m_retail_brand_isValid = false;

    m_sdk_version_isSet = false;
    m_sdk_version_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_android_id_isValid = ::OpenAPI::fromJsonValue(m_android_id, json[QString("androidId")]);
    m_android_id_isSet = !json[QString("androidId")].isNull() && m_android_id_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_latest_build_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_latest_build_fingerprint, json[QString("latestBuildFingerprint")]);
    m_latest_build_fingerprint_isSet = !json[QString("latestBuildFingerprint")].isNull() && m_latest_build_fingerprint_isValid;

    m_maker_isValid = ::OpenAPI::fromJsonValue(m_maker, json[QString("maker")]);
    m_maker_isSet = !json[QString("maker")].isNull() && m_maker_isValid;

    m_management_type_isValid = ::OpenAPI::fromJsonValue(m_management_type, json[QString("managementType")]);
    m_management_type_isSet = !json[QString("managementType")].isNull() && m_management_type_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;

    m_retail_brand_isValid = ::OpenAPI::fromJsonValue(m_retail_brand, json[QString("retailBrand")]);
    m_retail_brand_isSet = !json[QString("retailBrand")].isNull() && m_retail_brand_isValid;

    m_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_sdk_version, json[QString("sdkVersion")]);
    m_sdk_version_isSet = !json[QString("sdkVersion")].isNull() && m_sdk_version_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_android_id_isSet) {
        obj.insert(QString("androidId"), ::OpenAPI::toJsonValue(m_android_id));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_latest_build_fingerprint_isSet) {
        obj.insert(QString("latestBuildFingerprint"), ::OpenAPI::toJsonValue(m_latest_build_fingerprint));
    }
    if (m_maker_isSet) {
        obj.insert(QString("maker"), ::OpenAPI::toJsonValue(m_maker));
    }
    if (m_management_type_isSet) {
        obj.insert(QString("managementType"), ::OpenAPI::toJsonValue(m_management_type));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_report.isSet()) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_retail_brand_isSet) {
        obj.insert(QString("retailBrand"), ::OpenAPI::toJsonValue(m_retail_brand));
    }
    if (m_sdk_version_isSet) {
        obj.insert(QString("sdkVersion"), ::OpenAPI::toJsonValue(m_sdk_version));
    }
    return obj;
}

QString OAIDevice::getAndroidId() const {
    return m_android_id;
}
void OAIDevice::setAndroidId(const QString &android_id) {
    m_android_id = android_id;
    m_android_id_isSet = true;
}

bool OAIDevice::is_android_id_Set() const{
    return m_android_id_isSet;
}

bool OAIDevice::is_android_id_Valid() const{
    return m_android_id_isValid;
}

QString OAIDevice::getDevice() const {
    return m_device;
}
void OAIDevice::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIDevice::is_device_Set() const{
    return m_device_isSet;
}

bool OAIDevice::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIDevice::getLatestBuildFingerprint() const {
    return m_latest_build_fingerprint;
}
void OAIDevice::setLatestBuildFingerprint(const QString &latest_build_fingerprint) {
    m_latest_build_fingerprint = latest_build_fingerprint;
    m_latest_build_fingerprint_isSet = true;
}

bool OAIDevice::is_latest_build_fingerprint_Set() const{
    return m_latest_build_fingerprint_isSet;
}

bool OAIDevice::is_latest_build_fingerprint_Valid() const{
    return m_latest_build_fingerprint_isValid;
}

QString OAIDevice::getMaker() const {
    return m_maker;
}
void OAIDevice::setMaker(const QString &maker) {
    m_maker = maker;
    m_maker_isSet = true;
}

bool OAIDevice::is_maker_Set() const{
    return m_maker_isSet;
}

bool OAIDevice::is_maker_Valid() const{
    return m_maker_isValid;
}

QString OAIDevice::getManagementType() const {
    return m_management_type;
}
void OAIDevice::setManagementType(const QString &management_type) {
    m_management_type = management_type;
    m_management_type_isSet = true;
}

bool OAIDevice::is_management_type_Set() const{
    return m_management_type_isSet;
}

bool OAIDevice::is_management_type_Valid() const{
    return m_management_type_isValid;
}

QString OAIDevice::getModel() const {
    return m_model;
}
void OAIDevice::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDevice::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDevice::is_model_Valid() const{
    return m_model_isValid;
}

OAIPolicy OAIDevice::getPolicy() const {
    return m_policy;
}
void OAIDevice::setPolicy(const OAIPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIDevice::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIDevice::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIDevice::getProduct() const {
    return m_product;
}
void OAIDevice::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIDevice::is_product_Set() const{
    return m_product_isSet;
}

bool OAIDevice::is_product_Valid() const{
    return m_product_isValid;
}

OAIDeviceReport OAIDevice::getReport() const {
    return m_report;
}
void OAIDevice::setReport(const OAIDeviceReport &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIDevice::is_report_Set() const{
    return m_report_isSet;
}

bool OAIDevice::is_report_Valid() const{
    return m_report_isValid;
}

QString OAIDevice::getRetailBrand() const {
    return m_retail_brand;
}
void OAIDevice::setRetailBrand(const QString &retail_brand) {
    m_retail_brand = retail_brand;
    m_retail_brand_isSet = true;
}

bool OAIDevice::is_retail_brand_Set() const{
    return m_retail_brand_isSet;
}

bool OAIDevice::is_retail_brand_Valid() const{
    return m_retail_brand_isValid;
}

qint32 OAIDevice::getSdkVersion() const {
    return m_sdk_version;
}
void OAIDevice::setSdkVersion(const qint32 &sdk_version) {
    m_sdk_version = sdk_version;
    m_sdk_version_isSet = true;
}

bool OAIDevice::is_sdk_version_Set() const{
    return m_sdk_version_isSet;
}

bool OAIDevice::is_sdk_version_Valid() const{
    return m_sdk_version_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_build_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retail_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
