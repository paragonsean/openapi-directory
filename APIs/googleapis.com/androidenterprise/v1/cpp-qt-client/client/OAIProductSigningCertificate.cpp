/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSigningCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSigningCertificate::OAIProductSigningCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSigningCertificate::OAIProductSigningCertificate() {
    this->initializeModel();
}

OAIProductSigningCertificate::~OAIProductSigningCertificate() {}

void OAIProductSigningCertificate::initializeModel() {

    m_certificate_hash_sha1_isSet = false;
    m_certificate_hash_sha1_isValid = false;

    m_certificate_hash_sha256_isSet = false;
    m_certificate_hash_sha256_isValid = false;
}

void OAIProductSigningCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSigningCertificate::fromJsonObject(QJsonObject json) {

    m_certificate_hash_sha1_isValid = ::OpenAPI::fromJsonValue(m_certificate_hash_sha1, json[QString("certificateHashSha1")]);
    m_certificate_hash_sha1_isSet = !json[QString("certificateHashSha1")].isNull() && m_certificate_hash_sha1_isValid;

    m_certificate_hash_sha256_isValid = ::OpenAPI::fromJsonValue(m_certificate_hash_sha256, json[QString("certificateHashSha256")]);
    m_certificate_hash_sha256_isSet = !json[QString("certificateHashSha256")].isNull() && m_certificate_hash_sha256_isValid;
}

QString OAIProductSigningCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSigningCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_hash_sha1_isSet) {
        obj.insert(QString("certificateHashSha1"), ::OpenAPI::toJsonValue(m_certificate_hash_sha1));
    }
    if (m_certificate_hash_sha256_isSet) {
        obj.insert(QString("certificateHashSha256"), ::OpenAPI::toJsonValue(m_certificate_hash_sha256));
    }
    return obj;
}

QString OAIProductSigningCertificate::getCertificateHashSha1() const {
    return m_certificate_hash_sha1;
}
void OAIProductSigningCertificate::setCertificateHashSha1(const QString &certificate_hash_sha1) {
    m_certificate_hash_sha1 = certificate_hash_sha1;
    m_certificate_hash_sha1_isSet = true;
}

bool OAIProductSigningCertificate::is_certificate_hash_sha1_Set() const{
    return m_certificate_hash_sha1_isSet;
}

bool OAIProductSigningCertificate::is_certificate_hash_sha1_Valid() const{
    return m_certificate_hash_sha1_isValid;
}

QString OAIProductSigningCertificate::getCertificateHashSha256() const {
    return m_certificate_hash_sha256;
}
void OAIProductSigningCertificate::setCertificateHashSha256(const QString &certificate_hash_sha256) {
    m_certificate_hash_sha256 = certificate_hash_sha256;
    m_certificate_hash_sha256_isSet = true;
}

bool OAIProductSigningCertificate::is_certificate_hash_sha256_Set() const{
    return m_certificate_hash_sha256_isSet;
}

bool OAIProductSigningCertificate::is_certificate_hash_sha256_Valid() const{
    return m_certificate_hash_sha256_isValid;
}

bool OAIProductSigningCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_hash_sha1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_hash_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSigningCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
