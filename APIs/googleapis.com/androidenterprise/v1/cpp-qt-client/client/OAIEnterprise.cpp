/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise::OAIEnterprise(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise::OAIEnterprise() {
    this->initializeModel();
}

OAIEnterprise::~OAIEnterprise() {}

void OAIEnterprise::initializeModel() {

    m_administrator_isSet = false;
    m_administrator_isValid = false;

    m_google_authentication_settings_isSet = false;
    m_google_authentication_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_domain_isSet = false;
    m_primary_domain_isValid = false;
}

void OAIEnterprise::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise::fromJsonObject(QJsonObject json) {

    m_administrator_isValid = ::OpenAPI::fromJsonValue(m_administrator, json[QString("administrator")]);
    m_administrator_isSet = !json[QString("administrator")].isNull() && m_administrator_isValid;

    m_google_authentication_settings_isValid = ::OpenAPI::fromJsonValue(m_google_authentication_settings, json[QString("googleAuthenticationSettings")]);
    m_google_authentication_settings_isSet = !json[QString("googleAuthenticationSettings")].isNull() && m_google_authentication_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_domain_isValid = ::OpenAPI::fromJsonValue(m_primary_domain, json[QString("primaryDomain")]);
    m_primary_domain_isSet = !json[QString("primaryDomain")].isNull() && m_primary_domain_isValid;
}

QString OAIEnterprise::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator.size() > 0) {
        obj.insert(QString("administrator"), ::OpenAPI::toJsonValue(m_administrator));
    }
    if (m_google_authentication_settings.isSet()) {
        obj.insert(QString("googleAuthenticationSettings"), ::OpenAPI::toJsonValue(m_google_authentication_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_domain_isSet) {
        obj.insert(QString("primaryDomain"), ::OpenAPI::toJsonValue(m_primary_domain));
    }
    return obj;
}

QList<OAIAdministrator> OAIEnterprise::getAdministrator() const {
    return m_administrator;
}
void OAIEnterprise::setAdministrator(const QList<OAIAdministrator> &administrator) {
    m_administrator = administrator;
    m_administrator_isSet = true;
}

bool OAIEnterprise::is_administrator_Set() const{
    return m_administrator_isSet;
}

bool OAIEnterprise::is_administrator_Valid() const{
    return m_administrator_isValid;
}

OAIGoogleAuthenticationSettings OAIEnterprise::getGoogleAuthenticationSettings() const {
    return m_google_authentication_settings;
}
void OAIEnterprise::setGoogleAuthenticationSettings(const OAIGoogleAuthenticationSettings &google_authentication_settings) {
    m_google_authentication_settings = google_authentication_settings;
    m_google_authentication_settings_isSet = true;
}

bool OAIEnterprise::is_google_authentication_settings_Set() const{
    return m_google_authentication_settings_isSet;
}

bool OAIEnterprise::is_google_authentication_settings_Valid() const{
    return m_google_authentication_settings_isValid;
}

QString OAIEnterprise::getId() const {
    return m_id;
}
void OAIEnterprise::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnterprise::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnterprise::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnterprise::getName() const {
    return m_name;
}
void OAIEnterprise::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnterprise::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnterprise::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnterprise::getPrimaryDomain() const {
    return m_primary_domain;
}
void OAIEnterprise::setPrimaryDomain(const QString &primary_domain) {
    m_primary_domain = primary_domain;
    m_primary_domain_isSet = true;
}

bool OAIEnterprise::is_primary_domain_Set() const{
    return m_primary_domain_isSet;
}

bool OAIEnterprise::is_primary_domain_Valid() const{
    return m_primary_domain_isValid;
}

bool OAIEnterprise::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_authentication_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
