/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductPermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductPermissions::OAIProductPermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductPermissions::OAIProductPermissions() {
    this->initializeModel();
}

OAIProductPermissions::~OAIProductPermissions() {}

void OAIProductPermissions::initializeModel() {

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;
}

void OAIProductPermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductPermissions::fromJsonObject(QJsonObject json) {

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;
}

QString OAIProductPermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductPermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_permission.size() > 0) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    return obj;
}

QList<OAIProductPermission> OAIProductPermissions::getPermission() const {
    return m_permission;
}
void OAIProductPermissions::setPermission(const QList<OAIProductPermission> &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIProductPermissions::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIProductPermissions::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIProductPermissions::getProductId() const {
    return m_product_id;
}
void OAIProductPermissions::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductPermissions::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductPermissions::is_product_id_Valid() const{
    return m_product_id_isValid;
}

bool OAIProductPermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductPermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
