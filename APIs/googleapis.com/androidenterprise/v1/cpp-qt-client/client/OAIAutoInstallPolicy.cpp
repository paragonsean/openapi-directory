/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoInstallPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoInstallPolicy::OAIAutoInstallPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoInstallPolicy::OAIAutoInstallPolicy() {
    this->initializeModel();
}

OAIAutoInstallPolicy::~OAIAutoInstallPolicy() {}

void OAIAutoInstallPolicy::initializeModel() {

    m_auto_install_constraint_isSet = false;
    m_auto_install_constraint_isValid = false;

    m_auto_install_mode_isSet = false;
    m_auto_install_mode_isValid = false;

    m_auto_install_priority_isSet = false;
    m_auto_install_priority_isValid = false;

    m_minimum_version_code_isSet = false;
    m_minimum_version_code_isValid = false;
}

void OAIAutoInstallPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoInstallPolicy::fromJsonObject(QJsonObject json) {

    m_auto_install_constraint_isValid = ::OpenAPI::fromJsonValue(m_auto_install_constraint, json[QString("autoInstallConstraint")]);
    m_auto_install_constraint_isSet = !json[QString("autoInstallConstraint")].isNull() && m_auto_install_constraint_isValid;

    m_auto_install_mode_isValid = ::OpenAPI::fromJsonValue(m_auto_install_mode, json[QString("autoInstallMode")]);
    m_auto_install_mode_isSet = !json[QString("autoInstallMode")].isNull() && m_auto_install_mode_isValid;

    m_auto_install_priority_isValid = ::OpenAPI::fromJsonValue(m_auto_install_priority, json[QString("autoInstallPriority")]);
    m_auto_install_priority_isSet = !json[QString("autoInstallPriority")].isNull() && m_auto_install_priority_isValid;

    m_minimum_version_code_isValid = ::OpenAPI::fromJsonValue(m_minimum_version_code, json[QString("minimumVersionCode")]);
    m_minimum_version_code_isSet = !json[QString("minimumVersionCode")].isNull() && m_minimum_version_code_isValid;
}

QString OAIAutoInstallPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoInstallPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_install_constraint.size() > 0) {
        obj.insert(QString("autoInstallConstraint"), ::OpenAPI::toJsonValue(m_auto_install_constraint));
    }
    if (m_auto_install_mode_isSet) {
        obj.insert(QString("autoInstallMode"), ::OpenAPI::toJsonValue(m_auto_install_mode));
    }
    if (m_auto_install_priority_isSet) {
        obj.insert(QString("autoInstallPriority"), ::OpenAPI::toJsonValue(m_auto_install_priority));
    }
    if (m_minimum_version_code_isSet) {
        obj.insert(QString("minimumVersionCode"), ::OpenAPI::toJsonValue(m_minimum_version_code));
    }
    return obj;
}

QList<OAIAutoInstallConstraint> OAIAutoInstallPolicy::getAutoInstallConstraint() const {
    return m_auto_install_constraint;
}
void OAIAutoInstallPolicy::setAutoInstallConstraint(const QList<OAIAutoInstallConstraint> &auto_install_constraint) {
    m_auto_install_constraint = auto_install_constraint;
    m_auto_install_constraint_isSet = true;
}

bool OAIAutoInstallPolicy::is_auto_install_constraint_Set() const{
    return m_auto_install_constraint_isSet;
}

bool OAIAutoInstallPolicy::is_auto_install_constraint_Valid() const{
    return m_auto_install_constraint_isValid;
}

QString OAIAutoInstallPolicy::getAutoInstallMode() const {
    return m_auto_install_mode;
}
void OAIAutoInstallPolicy::setAutoInstallMode(const QString &auto_install_mode) {
    m_auto_install_mode = auto_install_mode;
    m_auto_install_mode_isSet = true;
}

bool OAIAutoInstallPolicy::is_auto_install_mode_Set() const{
    return m_auto_install_mode_isSet;
}

bool OAIAutoInstallPolicy::is_auto_install_mode_Valid() const{
    return m_auto_install_mode_isValid;
}

qint32 OAIAutoInstallPolicy::getAutoInstallPriority() const {
    return m_auto_install_priority;
}
void OAIAutoInstallPolicy::setAutoInstallPriority(const qint32 &auto_install_priority) {
    m_auto_install_priority = auto_install_priority;
    m_auto_install_priority_isSet = true;
}

bool OAIAutoInstallPolicy::is_auto_install_priority_Set() const{
    return m_auto_install_priority_isSet;
}

bool OAIAutoInstallPolicy::is_auto_install_priority_Valid() const{
    return m_auto_install_priority_isValid;
}

qint32 OAIAutoInstallPolicy::getMinimumVersionCode() const {
    return m_minimum_version_code;
}
void OAIAutoInstallPolicy::setMinimumVersionCode(const qint32 &minimum_version_code) {
    m_minimum_version_code = minimum_version_code;
    m_minimum_version_code_isSet = true;
}

bool OAIAutoInstallPolicy::is_minimum_version_code_Set() const{
    return m_minimum_version_code_isSet;
}

bool OAIAutoInstallPolicy::is_minimum_version_code_Valid() const{
    return m_minimum_version_code_isValid;
}

bool OAIAutoInstallPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_install_constraint.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_install_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_install_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoInstallPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
