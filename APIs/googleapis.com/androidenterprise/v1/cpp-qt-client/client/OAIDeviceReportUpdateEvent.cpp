/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceReportUpdateEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceReportUpdateEvent::OAIDeviceReportUpdateEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceReportUpdateEvent::OAIDeviceReportUpdateEvent() {
    this->initializeModel();
}

OAIDeviceReportUpdateEvent::~OAIDeviceReportUpdateEvent() {}

void OAIDeviceReportUpdateEvent::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIDeviceReportUpdateEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceReportUpdateEvent::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIDeviceReportUpdateEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceReportUpdateEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_report.isSet()) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIDeviceReportUpdateEvent::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceReportUpdateEvent::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceReportUpdateEvent::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceReportUpdateEvent::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIDeviceReport OAIDeviceReportUpdateEvent::getReport() const {
    return m_report;
}
void OAIDeviceReportUpdateEvent::setReport(const OAIDeviceReport &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIDeviceReportUpdateEvent::is_report_Set() const{
    return m_report_isSet;
}

bool OAIDeviceReportUpdateEvent::is_report_Valid() const{
    return m_report_isValid;
}

QString OAIDeviceReportUpdateEvent::getUserId() const {
    return m_user_id;
}
void OAIDeviceReportUpdateEvent::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDeviceReportUpdateEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDeviceReportUpdateEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIDeviceReportUpdateEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceReportUpdateEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
