/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_account_identifier_isSet = false;
    m_account_identifier_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_management_type_isSet = false;
    m_management_type_isValid = false;

    m_primary_email_isSet = false;
    m_primary_email_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_account_identifier_isValid = ::OpenAPI::fromJsonValue(m_account_identifier, json[QString("accountIdentifier")]);
    m_account_identifier_isSet = !json[QString("accountIdentifier")].isNull() && m_account_identifier_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_management_type_isValid = ::OpenAPI::fromJsonValue(m_management_type, json[QString("managementType")]);
    m_management_type_isSet = !json[QString("managementType")].isNull() && m_management_type_isValid;

    m_primary_email_isValid = ::OpenAPI::fromJsonValue(m_primary_email, json[QString("primaryEmail")]);
    m_primary_email_isSet = !json[QString("primaryEmail")].isNull() && m_primary_email_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_account_identifier_isSet) {
        obj.insert(QString("accountIdentifier"), ::OpenAPI::toJsonValue(m_account_identifier));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_management_type_isSet) {
        obj.insert(QString("managementType"), ::OpenAPI::toJsonValue(m_management_type));
    }
    if (m_primary_email_isSet) {
        obj.insert(QString("primaryEmail"), ::OpenAPI::toJsonValue(m_primary_email));
    }
    return obj;
}

QString OAIUser::getAccountIdentifier() const {
    return m_account_identifier;
}
void OAIUser::setAccountIdentifier(const QString &account_identifier) {
    m_account_identifier = account_identifier;
    m_account_identifier_isSet = true;
}

bool OAIUser::is_account_identifier_Set() const{
    return m_account_identifier_isSet;
}

bool OAIUser::is_account_identifier_Valid() const{
    return m_account_identifier_isValid;
}

QString OAIUser::getAccountType() const {
    return m_account_type;
}
void OAIUser::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIUser::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIUser::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getManagementType() const {
    return m_management_type;
}
void OAIUser::setManagementType(const QString &management_type) {
    m_management_type = management_type;
    m_management_type_isSet = true;
}

bool OAIUser::is_management_type_Set() const{
    return m_management_type_isSet;
}

bool OAIUser::is_management_type_Valid() const{
    return m_management_type_isValid;
}

QString OAIUser::getPrimaryEmail() const {
    return m_primary_email;
}
void OAIUser::setPrimaryEmail(const QString &primary_email) {
    m_primary_email = primary_email;
    m_primary_email_isSet = true;
}

bool OAIUser::is_primary_email_Set() const{
    return m_primary_email_isSet;
}

bool OAIUser::is_primary_email_Valid() const{
    return m_primary_email_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
