/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRestrictionsSchemaRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRestrictionsSchemaRestriction::OAIAppRestrictionsSchemaRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRestrictionsSchemaRestriction::OAIAppRestrictionsSchemaRestriction() {
    this->initializeModel();
}

OAIAppRestrictionsSchemaRestriction::~OAIAppRestrictionsSchemaRestriction() {}

void OAIAppRestrictionsSchemaRestriction::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entry_isSet = false;
    m_entry_isValid = false;

    m_entry_value_isSet = false;
    m_entry_value_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_nested_restriction_isSet = false;
    m_nested_restriction_isValid = false;

    m_restriction_type_isSet = false;
    m_restriction_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAppRestrictionsSchemaRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRestrictionsSchemaRestriction::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entry_isValid = ::OpenAPI::fromJsonValue(m_entry, json[QString("entry")]);
    m_entry_isSet = !json[QString("entry")].isNull() && m_entry_isValid;

    m_entry_value_isValid = ::OpenAPI::fromJsonValue(m_entry_value, json[QString("entryValue")]);
    m_entry_value_isSet = !json[QString("entryValue")].isNull() && m_entry_value_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_nested_restriction_isValid = ::OpenAPI::fromJsonValue(m_nested_restriction, json[QString("nestedRestriction")]);
    m_nested_restriction_isSet = !json[QString("nestedRestriction")].isNull() && m_nested_restriction_isValid;

    m_restriction_type_isValid = ::OpenAPI::fromJsonValue(m_restriction_type, json[QString("restrictionType")]);
    m_restriction_type_isSet = !json[QString("restrictionType")].isNull() && m_restriction_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAppRestrictionsSchemaRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRestrictionsSchemaRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value.isSet()) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entry.size() > 0) {
        obj.insert(QString("entry"), ::OpenAPI::toJsonValue(m_entry));
    }
    if (m_entry_value.size() > 0) {
        obj.insert(QString("entryValue"), ::OpenAPI::toJsonValue(m_entry_value));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_nested_restriction.size() > 0) {
        obj.insert(QString("nestedRestriction"), ::OpenAPI::toJsonValue(m_nested_restriction));
    }
    if (m_restriction_type_isSet) {
        obj.insert(QString("restrictionType"), ::OpenAPI::toJsonValue(m_restriction_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIAppRestrictionsSchemaRestrictionRestrictionValue OAIAppRestrictionsSchemaRestriction::getDefaultValue() const {
    return m_default_value;
}
void OAIAppRestrictionsSchemaRestriction::setDefaultValue(const OAIAppRestrictionsSchemaRestrictionRestrictionValue &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIAppRestrictionsSchemaRestriction::getDescription() const {
    return m_description;
}
void OAIAppRestrictionsSchemaRestriction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIAppRestrictionsSchemaRestriction::getEntry() const {
    return m_entry;
}
void OAIAppRestrictionsSchemaRestriction::setEntry(const QList<QString> &entry) {
    m_entry = entry;
    m_entry_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_entry_Set() const{
    return m_entry_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_entry_Valid() const{
    return m_entry_isValid;
}

QList<QString> OAIAppRestrictionsSchemaRestriction::getEntryValue() const {
    return m_entry_value;
}
void OAIAppRestrictionsSchemaRestriction::setEntryValue(const QList<QString> &entry_value) {
    m_entry_value = entry_value;
    m_entry_value_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_entry_value_Set() const{
    return m_entry_value_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_entry_value_Valid() const{
    return m_entry_value_isValid;
}

QString OAIAppRestrictionsSchemaRestriction::getKey() const {
    return m_key;
}
void OAIAppRestrictionsSchemaRestriction::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_key_Valid() const{
    return m_key_isValid;
}

QList<OAIAppRestrictionsSchemaRestriction> OAIAppRestrictionsSchemaRestriction::getNestedRestriction() const {
    return m_nested_restriction;
}
void OAIAppRestrictionsSchemaRestriction::setNestedRestriction(const QList<OAIAppRestrictionsSchemaRestriction> &nested_restriction) {
    m_nested_restriction = nested_restriction;
    m_nested_restriction_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_nested_restriction_Set() const{
    return m_nested_restriction_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_nested_restriction_Valid() const{
    return m_nested_restriction_isValid;
}

QString OAIAppRestrictionsSchemaRestriction::getRestrictionType() const {
    return m_restriction_type;
}
void OAIAppRestrictionsSchemaRestriction::setRestrictionType(const QString &restriction_type) {
    m_restriction_type = restriction_type;
    m_restriction_type_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_restriction_type_Set() const{
    return m_restriction_type_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_restriction_type_Valid() const{
    return m_restriction_type_isValid;
}

QString OAIAppRestrictionsSchemaRestriction::getTitle() const {
    return m_title;
}
void OAIAppRestrictionsSchemaRestriction::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAppRestrictionsSchemaRestriction::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAppRestrictionsSchemaRestriction::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAppRestrictionsSchemaRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nested_restriction.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRestrictionsSchemaRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
