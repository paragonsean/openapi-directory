/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_app_restrictions_schema_change_event_isSet = false;
    m_app_restrictions_schema_change_event_isValid = false;

    m_app_update_event_isSet = false;
    m_app_update_event_isValid = false;

    m_device_report_update_event_isSet = false;
    m_device_report_update_event_isValid = false;

    m_enterprise_id_isSet = false;
    m_enterprise_id_isValid = false;

    m_install_failure_event_isSet = false;
    m_install_failure_event_isValid = false;

    m_new_device_event_isSet = false;
    m_new_device_event_isValid = false;

    m_new_permissions_event_isSet = false;
    m_new_permissions_event_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_product_approval_event_isSet = false;
    m_product_approval_event_isValid = false;

    m_product_availability_change_event_isSet = false;
    m_product_availability_change_event_isValid = false;

    m_timestamp_millis_isSet = false;
    m_timestamp_millis_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_app_restrictions_schema_change_event_isValid = ::OpenAPI::fromJsonValue(m_app_restrictions_schema_change_event, json[QString("appRestrictionsSchemaChangeEvent")]);
    m_app_restrictions_schema_change_event_isSet = !json[QString("appRestrictionsSchemaChangeEvent")].isNull() && m_app_restrictions_schema_change_event_isValid;

    m_app_update_event_isValid = ::OpenAPI::fromJsonValue(m_app_update_event, json[QString("appUpdateEvent")]);
    m_app_update_event_isSet = !json[QString("appUpdateEvent")].isNull() && m_app_update_event_isValid;

    m_device_report_update_event_isValid = ::OpenAPI::fromJsonValue(m_device_report_update_event, json[QString("deviceReportUpdateEvent")]);
    m_device_report_update_event_isSet = !json[QString("deviceReportUpdateEvent")].isNull() && m_device_report_update_event_isValid;

    m_enterprise_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_id, json[QString("enterpriseId")]);
    m_enterprise_id_isSet = !json[QString("enterpriseId")].isNull() && m_enterprise_id_isValid;

    m_install_failure_event_isValid = ::OpenAPI::fromJsonValue(m_install_failure_event, json[QString("installFailureEvent")]);
    m_install_failure_event_isSet = !json[QString("installFailureEvent")].isNull() && m_install_failure_event_isValid;

    m_new_device_event_isValid = ::OpenAPI::fromJsonValue(m_new_device_event, json[QString("newDeviceEvent")]);
    m_new_device_event_isSet = !json[QString("newDeviceEvent")].isNull() && m_new_device_event_isValid;

    m_new_permissions_event_isValid = ::OpenAPI::fromJsonValue(m_new_permissions_event, json[QString("newPermissionsEvent")]);
    m_new_permissions_event_isSet = !json[QString("newPermissionsEvent")].isNull() && m_new_permissions_event_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_product_approval_event_isValid = ::OpenAPI::fromJsonValue(m_product_approval_event, json[QString("productApprovalEvent")]);
    m_product_approval_event_isSet = !json[QString("productApprovalEvent")].isNull() && m_product_approval_event_isValid;

    m_product_availability_change_event_isValid = ::OpenAPI::fromJsonValue(m_product_availability_change_event, json[QString("productAvailabilityChangeEvent")]);
    m_product_availability_change_event_isSet = !json[QString("productAvailabilityChangeEvent")].isNull() && m_product_availability_change_event_isValid;

    m_timestamp_millis_isValid = ::OpenAPI::fromJsonValue(m_timestamp_millis, json[QString("timestampMillis")]);
    m_timestamp_millis_isSet = !json[QString("timestampMillis")].isNull() && m_timestamp_millis_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_app_restrictions_schema_change_event.isSet()) {
        obj.insert(QString("appRestrictionsSchemaChangeEvent"), ::OpenAPI::toJsonValue(m_app_restrictions_schema_change_event));
    }
    if (m_app_update_event.isSet()) {
        obj.insert(QString("appUpdateEvent"), ::OpenAPI::toJsonValue(m_app_update_event));
    }
    if (m_device_report_update_event.isSet()) {
        obj.insert(QString("deviceReportUpdateEvent"), ::OpenAPI::toJsonValue(m_device_report_update_event));
    }
    if (m_enterprise_id_isSet) {
        obj.insert(QString("enterpriseId"), ::OpenAPI::toJsonValue(m_enterprise_id));
    }
    if (m_install_failure_event.isSet()) {
        obj.insert(QString("installFailureEvent"), ::OpenAPI::toJsonValue(m_install_failure_event));
    }
    if (m_new_device_event.isSet()) {
        obj.insert(QString("newDeviceEvent"), ::OpenAPI::toJsonValue(m_new_device_event));
    }
    if (m_new_permissions_event.isSet()) {
        obj.insert(QString("newPermissionsEvent"), ::OpenAPI::toJsonValue(m_new_permissions_event));
    }
    if (m_notification_type_isSet) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_product_approval_event.isSet()) {
        obj.insert(QString("productApprovalEvent"), ::OpenAPI::toJsonValue(m_product_approval_event));
    }
    if (m_product_availability_change_event.isSet()) {
        obj.insert(QString("productAvailabilityChangeEvent"), ::OpenAPI::toJsonValue(m_product_availability_change_event));
    }
    if (m_timestamp_millis_isSet) {
        obj.insert(QString("timestampMillis"), ::OpenAPI::toJsonValue(m_timestamp_millis));
    }
    return obj;
}

OAIAppRestrictionsSchemaChangeEvent OAINotification::getAppRestrictionsSchemaChangeEvent() const {
    return m_app_restrictions_schema_change_event;
}
void OAINotification::setAppRestrictionsSchemaChangeEvent(const OAIAppRestrictionsSchemaChangeEvent &app_restrictions_schema_change_event) {
    m_app_restrictions_schema_change_event = app_restrictions_schema_change_event;
    m_app_restrictions_schema_change_event_isSet = true;
}

bool OAINotification::is_app_restrictions_schema_change_event_Set() const{
    return m_app_restrictions_schema_change_event_isSet;
}

bool OAINotification::is_app_restrictions_schema_change_event_Valid() const{
    return m_app_restrictions_schema_change_event_isValid;
}

OAIAppUpdateEvent OAINotification::getAppUpdateEvent() const {
    return m_app_update_event;
}
void OAINotification::setAppUpdateEvent(const OAIAppUpdateEvent &app_update_event) {
    m_app_update_event = app_update_event;
    m_app_update_event_isSet = true;
}

bool OAINotification::is_app_update_event_Set() const{
    return m_app_update_event_isSet;
}

bool OAINotification::is_app_update_event_Valid() const{
    return m_app_update_event_isValid;
}

OAIDeviceReportUpdateEvent OAINotification::getDeviceReportUpdateEvent() const {
    return m_device_report_update_event;
}
void OAINotification::setDeviceReportUpdateEvent(const OAIDeviceReportUpdateEvent &device_report_update_event) {
    m_device_report_update_event = device_report_update_event;
    m_device_report_update_event_isSet = true;
}

bool OAINotification::is_device_report_update_event_Set() const{
    return m_device_report_update_event_isSet;
}

bool OAINotification::is_device_report_update_event_Valid() const{
    return m_device_report_update_event_isValid;
}

QString OAINotification::getEnterpriseId() const {
    return m_enterprise_id;
}
void OAINotification::setEnterpriseId(const QString &enterprise_id) {
    m_enterprise_id = enterprise_id;
    m_enterprise_id_isSet = true;
}

bool OAINotification::is_enterprise_id_Set() const{
    return m_enterprise_id_isSet;
}

bool OAINotification::is_enterprise_id_Valid() const{
    return m_enterprise_id_isValid;
}

OAIInstallFailureEvent OAINotification::getInstallFailureEvent() const {
    return m_install_failure_event;
}
void OAINotification::setInstallFailureEvent(const OAIInstallFailureEvent &install_failure_event) {
    m_install_failure_event = install_failure_event;
    m_install_failure_event_isSet = true;
}

bool OAINotification::is_install_failure_event_Set() const{
    return m_install_failure_event_isSet;
}

bool OAINotification::is_install_failure_event_Valid() const{
    return m_install_failure_event_isValid;
}

OAINewDeviceEvent OAINotification::getNewDeviceEvent() const {
    return m_new_device_event;
}
void OAINotification::setNewDeviceEvent(const OAINewDeviceEvent &new_device_event) {
    m_new_device_event = new_device_event;
    m_new_device_event_isSet = true;
}

bool OAINotification::is_new_device_event_Set() const{
    return m_new_device_event_isSet;
}

bool OAINotification::is_new_device_event_Valid() const{
    return m_new_device_event_isValid;
}

OAINewPermissionsEvent OAINotification::getNewPermissionsEvent() const {
    return m_new_permissions_event;
}
void OAINotification::setNewPermissionsEvent(const OAINewPermissionsEvent &new_permissions_event) {
    m_new_permissions_event = new_permissions_event;
    m_new_permissions_event_isSet = true;
}

bool OAINotification::is_new_permissions_event_Set() const{
    return m_new_permissions_event_isSet;
}

bool OAINotification::is_new_permissions_event_Valid() const{
    return m_new_permissions_event_isValid;
}

QString OAINotification::getNotificationType() const {
    return m_notification_type;
}
void OAINotification::setNotificationType(const QString &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAINotification::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAINotification::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

OAIProductApprovalEvent OAINotification::getProductApprovalEvent() const {
    return m_product_approval_event;
}
void OAINotification::setProductApprovalEvent(const OAIProductApprovalEvent &product_approval_event) {
    m_product_approval_event = product_approval_event;
    m_product_approval_event_isSet = true;
}

bool OAINotification::is_product_approval_event_Set() const{
    return m_product_approval_event_isSet;
}

bool OAINotification::is_product_approval_event_Valid() const{
    return m_product_approval_event_isValid;
}

OAIProductAvailabilityChangeEvent OAINotification::getProductAvailabilityChangeEvent() const {
    return m_product_availability_change_event;
}
void OAINotification::setProductAvailabilityChangeEvent(const OAIProductAvailabilityChangeEvent &product_availability_change_event) {
    m_product_availability_change_event = product_availability_change_event;
    m_product_availability_change_event_isSet = true;
}

bool OAINotification::is_product_availability_change_event_Set() const{
    return m_product_availability_change_event_isSet;
}

bool OAINotification::is_product_availability_change_event_Valid() const{
    return m_product_availability_change_event_isValid;
}

QString OAINotification::getTimestampMillis() const {
    return m_timestamp_millis;
}
void OAINotification::setTimestampMillis(const QString &timestamp_millis) {
    m_timestamp_millis = timestamp_millis;
    m_timestamp_millis_isSet = true;
}

bool OAINotification::is_timestamp_millis_Set() const{
    return m_timestamp_millis_isSet;
}

bool OAINotification::is_timestamp_millis_Valid() const{
    return m_timestamp_millis_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_restrictions_schema_change_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_update_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_report_update_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_failure_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_device_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_permissions_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_approval_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_availability_change_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
