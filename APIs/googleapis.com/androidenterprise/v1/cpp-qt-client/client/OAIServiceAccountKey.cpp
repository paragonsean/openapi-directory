/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAccountKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceAccountKey::OAIServiceAccountKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceAccountKey::OAIServiceAccountKey() {
    this->initializeModel();
}

OAIServiceAccountKey::~OAIServiceAccountKey() {}

void OAIServiceAccountKey::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_public_data_isSet = false;
    m_public_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServiceAccountKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceAccountKey::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_public_data_isValid = ::OpenAPI::fromJsonValue(m_public_data, json[QString("publicData")]);
    m_public_data_isSet = !json[QString("publicData")].isNull() && m_public_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServiceAccountKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceAccountKey::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_public_data_isSet) {
        obj.insert(QString("publicData"), ::OpenAPI::toJsonValue(m_public_data));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIServiceAccountKey::getData() const {
    return m_data;
}
void OAIServiceAccountKey::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIServiceAccountKey::is_data_Set() const{
    return m_data_isSet;
}

bool OAIServiceAccountKey::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIServiceAccountKey::getId() const {
    return m_id;
}
void OAIServiceAccountKey::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceAccountKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceAccountKey::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceAccountKey::getPublicData() const {
    return m_public_data;
}
void OAIServiceAccountKey::setPublicData(const QString &public_data) {
    m_public_data = public_data;
    m_public_data_isSet = true;
}

bool OAIServiceAccountKey::is_public_data_Set() const{
    return m_public_data_isSet;
}

bool OAIServiceAccountKey::is_public_data_Valid() const{
    return m_public_data_isValid;
}

QString OAIServiceAccountKey::getType() const {
    return m_type;
}
void OAIServiceAccountKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceAccountKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceAccountKey::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServiceAccountKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceAccountKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
