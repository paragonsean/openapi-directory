/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicy::OAIPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicy::OAIPolicy() {
    this->initializeModel();
}

OAIPolicy::~OAIPolicy() {}

void OAIPolicy::initializeModel() {

    m_auto_update_policy_isSet = false;
    m_auto_update_policy_isValid = false;

    m_device_report_policy_isSet = false;
    m_device_report_policy_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_product_availability_policy_isSet = false;
    m_product_availability_policy_isValid = false;

    m_product_policy_isSet = false;
    m_product_policy_isValid = false;
}

void OAIPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicy::fromJsonObject(QJsonObject json) {

    m_auto_update_policy_isValid = ::OpenAPI::fromJsonValue(m_auto_update_policy, json[QString("autoUpdatePolicy")]);
    m_auto_update_policy_isSet = !json[QString("autoUpdatePolicy")].isNull() && m_auto_update_policy_isValid;

    m_device_report_policy_isValid = ::OpenAPI::fromJsonValue(m_device_report_policy, json[QString("deviceReportPolicy")]);
    m_device_report_policy_isSet = !json[QString("deviceReportPolicy")].isNull() && m_device_report_policy_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("maintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("maintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_product_availability_policy_isValid = ::OpenAPI::fromJsonValue(m_product_availability_policy, json[QString("productAvailabilityPolicy")]);
    m_product_availability_policy_isSet = !json[QString("productAvailabilityPolicy")].isNull() && m_product_availability_policy_isValid;

    m_product_policy_isValid = ::OpenAPI::fromJsonValue(m_product_policy, json[QString("productPolicy")]);
    m_product_policy_isSet = !json[QString("productPolicy")].isNull() && m_product_policy_isValid;
}

QString OAIPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_update_policy_isSet) {
        obj.insert(QString("autoUpdatePolicy"), ::OpenAPI::toJsonValue(m_auto_update_policy));
    }
    if (m_device_report_policy_isSet) {
        obj.insert(QString("deviceReportPolicy"), ::OpenAPI::toJsonValue(m_device_report_policy));
    }
    if (m_maintenance_window.isSet()) {
        obj.insert(QString("maintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_product_availability_policy_isSet) {
        obj.insert(QString("productAvailabilityPolicy"), ::OpenAPI::toJsonValue(m_product_availability_policy));
    }
    if (m_product_policy.size() > 0) {
        obj.insert(QString("productPolicy"), ::OpenAPI::toJsonValue(m_product_policy));
    }
    return obj;
}

QString OAIPolicy::getAutoUpdatePolicy() const {
    return m_auto_update_policy;
}
void OAIPolicy::setAutoUpdatePolicy(const QString &auto_update_policy) {
    m_auto_update_policy = auto_update_policy;
    m_auto_update_policy_isSet = true;
}

bool OAIPolicy::is_auto_update_policy_Set() const{
    return m_auto_update_policy_isSet;
}

bool OAIPolicy::is_auto_update_policy_Valid() const{
    return m_auto_update_policy_isValid;
}

QString OAIPolicy::getDeviceReportPolicy() const {
    return m_device_report_policy;
}
void OAIPolicy::setDeviceReportPolicy(const QString &device_report_policy) {
    m_device_report_policy = device_report_policy;
    m_device_report_policy_isSet = true;
}

bool OAIPolicy::is_device_report_policy_Set() const{
    return m_device_report_policy_isSet;
}

bool OAIPolicy::is_device_report_policy_Valid() const{
    return m_device_report_policy_isValid;
}

OAIMaintenanceWindow OAIPolicy::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIPolicy::setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIPolicy::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIPolicy::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

QString OAIPolicy::getProductAvailabilityPolicy() const {
    return m_product_availability_policy;
}
void OAIPolicy::setProductAvailabilityPolicy(const QString &product_availability_policy) {
    m_product_availability_policy = product_availability_policy;
    m_product_availability_policy_isSet = true;
}

bool OAIPolicy::is_product_availability_policy_Set() const{
    return m_product_availability_policy_isSet;
}

bool OAIPolicy::is_product_availability_policy_Valid() const{
    return m_product_availability_policy_isValid;
}

QList<OAIProductPolicy> OAIPolicy::getProductPolicy() const {
    return m_product_policy;
}
void OAIPolicy::setProductPolicy(const QList<OAIProductPolicy> &product_policy) {
    m_product_policy = product_policy;
    m_product_policy_isSet = true;
}

bool OAIPolicy::is_product_policy_Set() const{
    return m_product_policy_isSet;
}

bool OAIPolicy::is_product_policy_Valid() const{
    return m_product_policy_isValid;
}

bool OAIPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_update_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_report_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_availability_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
