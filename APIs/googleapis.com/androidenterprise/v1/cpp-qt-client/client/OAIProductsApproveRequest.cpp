/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductsApproveRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductsApproveRequest::OAIProductsApproveRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductsApproveRequest::OAIProductsApproveRequest() {
    this->initializeModel();
}

OAIProductsApproveRequest::~OAIProductsApproveRequest() {}

void OAIProductsApproveRequest::initializeModel() {

    m_approval_url_info_isSet = false;
    m_approval_url_info_isValid = false;

    m_approved_permissions_isSet = false;
    m_approved_permissions_isValid = false;
}

void OAIProductsApproveRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductsApproveRequest::fromJsonObject(QJsonObject json) {

    m_approval_url_info_isValid = ::OpenAPI::fromJsonValue(m_approval_url_info, json[QString("approvalUrlInfo")]);
    m_approval_url_info_isSet = !json[QString("approvalUrlInfo")].isNull() && m_approval_url_info_isValid;

    m_approved_permissions_isValid = ::OpenAPI::fromJsonValue(m_approved_permissions, json[QString("approvedPermissions")]);
    m_approved_permissions_isSet = !json[QString("approvedPermissions")].isNull() && m_approved_permissions_isValid;
}

QString OAIProductsApproveRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductsApproveRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_url_info.isSet()) {
        obj.insert(QString("approvalUrlInfo"), ::OpenAPI::toJsonValue(m_approval_url_info));
    }
    if (m_approved_permissions_isSet) {
        obj.insert(QString("approvedPermissions"), ::OpenAPI::toJsonValue(m_approved_permissions));
    }
    return obj;
}

OAIApprovalUrlInfo OAIProductsApproveRequest::getApprovalUrlInfo() const {
    return m_approval_url_info;
}
void OAIProductsApproveRequest::setApprovalUrlInfo(const OAIApprovalUrlInfo &approval_url_info) {
    m_approval_url_info = approval_url_info;
    m_approval_url_info_isSet = true;
}

bool OAIProductsApproveRequest::is_approval_url_info_Set() const{
    return m_approval_url_info_isSet;
}

bool OAIProductsApproveRequest::is_approval_url_info_Valid() const{
    return m_approval_url_info_isValid;
}

QString OAIProductsApproveRequest::getApprovedPermissions() const {
    return m_approved_permissions;
}
void OAIProductsApproveRequest::setApprovedPermissions(const QString &approved_permissions) {
    m_approved_permissions = approved_permissions;
    m_approved_permissions_isSet = true;
}

bool OAIProductsApproveRequest::is_approved_permissions_Set() const{
    return m_approved_permissions_isSet;
}

bool OAIProductsApproveRequest::is_approved_permissions_Valid() const{
    return m_approved_permissions_isValid;
}

bool OAIProductsApproveRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_url_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductsApproveRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
