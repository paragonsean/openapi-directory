/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_app_restrictions_schema_isSet = false;
    m_app_restrictions_schema_isValid = false;

    m_app_tracks_isSet = false;
    m_app_tracks_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_available_countries_isSet = false;
    m_available_countries_isValid = false;

    m_available_tracks_isSet = false;
    m_available_tracks_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_url_isSet = false;
    m_details_url_isValid = false;

    m_distribution_channel_isSet = false;
    m_distribution_channel_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_full_description_isSet = false;
    m_full_description_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_last_updated_timestamp_millis_isSet = false;
    m_last_updated_timestamp_millis_isValid = false;

    m_min_android_sdk_version_isSet = false;
    m_min_android_sdk_version_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_pricing_isSet = false;
    m_product_pricing_isValid = false;

    m_recent_changes_isSet = false;
    m_recent_changes_isValid = false;

    m_requires_container_app_isSet = false;
    m_requires_container_app_isValid = false;

    m_screenshot_urls_isSet = false;
    m_screenshot_urls_isValid = false;

    m_signing_certificate_isSet = false;
    m_signing_certificate_isValid = false;

    m_small_icon_url_isSet = false;
    m_small_icon_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_work_details_url_isSet = false;
    m_work_details_url_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_app_restrictions_schema_isValid = ::OpenAPI::fromJsonValue(m_app_restrictions_schema, json[QString("appRestrictionsSchema")]);
    m_app_restrictions_schema_isSet = !json[QString("appRestrictionsSchema")].isNull() && m_app_restrictions_schema_isValid;

    m_app_tracks_isValid = ::OpenAPI::fromJsonValue(m_app_tracks, json[QString("appTracks")]);
    m_app_tracks_isSet = !json[QString("appTracks")].isNull() && m_app_tracks_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("authorName")]);
    m_author_name_isSet = !json[QString("authorName")].isNull() && m_author_name_isValid;

    m_available_countries_isValid = ::OpenAPI::fromJsonValue(m_available_countries, json[QString("availableCountries")]);
    m_available_countries_isSet = !json[QString("availableCountries")].isNull() && m_available_countries_isValid;

    m_available_tracks_isValid = ::OpenAPI::fromJsonValue(m_available_tracks, json[QString("availableTracks")]);
    m_available_tracks_isSet = !json[QString("availableTracks")].isNull() && m_available_tracks_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(m_content_rating, json[QString("contentRating")]);
    m_content_rating_isSet = !json[QString("contentRating")].isNull() && m_content_rating_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_url_isValid = ::OpenAPI::fromJsonValue(m_details_url, json[QString("detailsUrl")]);
    m_details_url_isSet = !json[QString("detailsUrl")].isNull() && m_details_url_isValid;

    m_distribution_channel_isValid = ::OpenAPI::fromJsonValue(m_distribution_channel, json[QString("distributionChannel")]);
    m_distribution_channel_isSet = !json[QString("distributionChannel")].isNull() && m_distribution_channel_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_full_description_isValid = ::OpenAPI::fromJsonValue(m_full_description, json[QString("fullDescription")]);
    m_full_description_isSet = !json[QString("fullDescription")].isNull() && m_full_description_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_last_updated_timestamp_millis_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp_millis, json[QString("lastUpdatedTimestampMillis")]);
    m_last_updated_timestamp_millis_isSet = !json[QString("lastUpdatedTimestampMillis")].isNull() && m_last_updated_timestamp_millis_isValid;

    m_min_android_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_min_android_sdk_version, json[QString("minAndroidSdkVersion")]);
    m_min_android_sdk_version_isSet = !json[QString("minAndroidSdkVersion")].isNull() && m_min_android_sdk_version_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_pricing_isValid = ::OpenAPI::fromJsonValue(m_product_pricing, json[QString("productPricing")]);
    m_product_pricing_isSet = !json[QString("productPricing")].isNull() && m_product_pricing_isValid;

    m_recent_changes_isValid = ::OpenAPI::fromJsonValue(m_recent_changes, json[QString("recentChanges")]);
    m_recent_changes_isSet = !json[QString("recentChanges")].isNull() && m_recent_changes_isValid;

    m_requires_container_app_isValid = ::OpenAPI::fromJsonValue(m_requires_container_app, json[QString("requiresContainerApp")]);
    m_requires_container_app_isSet = !json[QString("requiresContainerApp")].isNull() && m_requires_container_app_isValid;

    m_screenshot_urls_isValid = ::OpenAPI::fromJsonValue(m_screenshot_urls, json[QString("screenshotUrls")]);
    m_screenshot_urls_isSet = !json[QString("screenshotUrls")].isNull() && m_screenshot_urls_isValid;

    m_signing_certificate_isValid = ::OpenAPI::fromJsonValue(m_signing_certificate, json[QString("signingCertificate")]);
    m_signing_certificate_isSet = !json[QString("signingCertificate")].isNull() && m_signing_certificate_isValid;

    m_small_icon_url_isValid = ::OpenAPI::fromJsonValue(m_small_icon_url, json[QString("smallIconUrl")]);
    m_small_icon_url_isSet = !json[QString("smallIconUrl")].isNull() && m_small_icon_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_work_details_url_isValid = ::OpenAPI::fromJsonValue(m_work_details_url, json[QString("workDetailsUrl")]);
    m_work_details_url_isSet = !json[QString("workDetailsUrl")].isNull() && m_work_details_url_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_app_restrictions_schema.isSet()) {
        obj.insert(QString("appRestrictionsSchema"), ::OpenAPI::toJsonValue(m_app_restrictions_schema));
    }
    if (m_app_tracks.size() > 0) {
        obj.insert(QString("appTracks"), ::OpenAPI::toJsonValue(m_app_tracks));
    }
    if (m_app_version.size() > 0) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_author_name_isSet) {
        obj.insert(QString("authorName"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_available_countries.size() > 0) {
        obj.insert(QString("availableCountries"), ::OpenAPI::toJsonValue(m_available_countries));
    }
    if (m_available_tracks.size() > 0) {
        obj.insert(QString("availableTracks"), ::OpenAPI::toJsonValue(m_available_tracks));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_content_rating_isSet) {
        obj.insert(QString("contentRating"), ::OpenAPI::toJsonValue(m_content_rating));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details_url_isSet) {
        obj.insert(QString("detailsUrl"), ::OpenAPI::toJsonValue(m_details_url));
    }
    if (m_distribution_channel_isSet) {
        obj.insert(QString("distributionChannel"), ::OpenAPI::toJsonValue(m_distribution_channel));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_full_description_isSet) {
        obj.insert(QString("fullDescription"), ::OpenAPI::toJsonValue(m_full_description));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_last_updated_timestamp_millis_isSet) {
        obj.insert(QString("lastUpdatedTimestampMillis"), ::OpenAPI::toJsonValue(m_last_updated_timestamp_millis));
    }
    if (m_min_android_sdk_version_isSet) {
        obj.insert(QString("minAndroidSdkVersion"), ::OpenAPI::toJsonValue(m_min_android_sdk_version));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_pricing_isSet) {
        obj.insert(QString("productPricing"), ::OpenAPI::toJsonValue(m_product_pricing));
    }
    if (m_recent_changes_isSet) {
        obj.insert(QString("recentChanges"), ::OpenAPI::toJsonValue(m_recent_changes));
    }
    if (m_requires_container_app_isSet) {
        obj.insert(QString("requiresContainerApp"), ::OpenAPI::toJsonValue(m_requires_container_app));
    }
    if (m_screenshot_urls.size() > 0) {
        obj.insert(QString("screenshotUrls"), ::OpenAPI::toJsonValue(m_screenshot_urls));
    }
    if (m_signing_certificate.isSet()) {
        obj.insert(QString("signingCertificate"), ::OpenAPI::toJsonValue(m_signing_certificate));
    }
    if (m_small_icon_url_isSet) {
        obj.insert(QString("smallIconUrl"), ::OpenAPI::toJsonValue(m_small_icon_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_work_details_url_isSet) {
        obj.insert(QString("workDetailsUrl"), ::OpenAPI::toJsonValue(m_work_details_url));
    }
    return obj;
}

OAIAppRestrictionsSchema OAIProduct::getAppRestrictionsSchema() const {
    return m_app_restrictions_schema;
}
void OAIProduct::setAppRestrictionsSchema(const OAIAppRestrictionsSchema &app_restrictions_schema) {
    m_app_restrictions_schema = app_restrictions_schema;
    m_app_restrictions_schema_isSet = true;
}

bool OAIProduct::is_app_restrictions_schema_Set() const{
    return m_app_restrictions_schema_isSet;
}

bool OAIProduct::is_app_restrictions_schema_Valid() const{
    return m_app_restrictions_schema_isValid;
}

QList<OAITrackInfo> OAIProduct::getAppTracks() const {
    return m_app_tracks;
}
void OAIProduct::setAppTracks(const QList<OAITrackInfo> &app_tracks) {
    m_app_tracks = app_tracks;
    m_app_tracks_isSet = true;
}

bool OAIProduct::is_app_tracks_Set() const{
    return m_app_tracks_isSet;
}

bool OAIProduct::is_app_tracks_Valid() const{
    return m_app_tracks_isValid;
}

QList<OAIAppVersion> OAIProduct::getAppVersion() const {
    return m_app_version;
}
void OAIProduct::setAppVersion(const QList<OAIAppVersion> &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIProduct::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIProduct::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIProduct::getAuthorName() const {
    return m_author_name;
}
void OAIProduct::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIProduct::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIProduct::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QList<QString> OAIProduct::getAvailableCountries() const {
    return m_available_countries;
}
void OAIProduct::setAvailableCountries(const QList<QString> &available_countries) {
    m_available_countries = available_countries;
    m_available_countries_isSet = true;
}

bool OAIProduct::is_available_countries_Set() const{
    return m_available_countries_isSet;
}

bool OAIProduct::is_available_countries_Valid() const{
    return m_available_countries_isValid;
}

QList<QString> OAIProduct::getAvailableTracks() const {
    return m_available_tracks;
}
void OAIProduct::setAvailableTracks(const QList<QString> &available_tracks) {
    m_available_tracks = available_tracks;
    m_available_tracks_isSet = true;
}

bool OAIProduct::is_available_tracks_Set() const{
    return m_available_tracks_isSet;
}

bool OAIProduct::is_available_tracks_Valid() const{
    return m_available_tracks_isValid;
}

QString OAIProduct::getCategory() const {
    return m_category;
}
void OAIProduct::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIProduct::is_category_Set() const{
    return m_category_isSet;
}

bool OAIProduct::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIProduct::getContentRating() const {
    return m_content_rating;
}
void OAIProduct::setContentRating(const QString &content_rating) {
    m_content_rating = content_rating;
    m_content_rating_isSet = true;
}

bool OAIProduct::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAIProduct::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProduct::getDetailsUrl() const {
    return m_details_url;
}
void OAIProduct::setDetailsUrl(const QString &details_url) {
    m_details_url = details_url;
    m_details_url_isSet = true;
}

bool OAIProduct::is_details_url_Set() const{
    return m_details_url_isSet;
}

bool OAIProduct::is_details_url_Valid() const{
    return m_details_url_isValid;
}

QString OAIProduct::getDistributionChannel() const {
    return m_distribution_channel;
}
void OAIProduct::setDistributionChannel(const QString &distribution_channel) {
    m_distribution_channel = distribution_channel;
    m_distribution_channel_isSet = true;
}

bool OAIProduct::is_distribution_channel_Set() const{
    return m_distribution_channel_isSet;
}

bool OAIProduct::is_distribution_channel_Valid() const{
    return m_distribution_channel_isValid;
}

QList<QString> OAIProduct::getFeatures() const {
    return m_features;
}
void OAIProduct::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIProduct::is_features_Set() const{
    return m_features_isSet;
}

bool OAIProduct::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIProduct::getFullDescription() const {
    return m_full_description;
}
void OAIProduct::setFullDescription(const QString &full_description) {
    m_full_description = full_description;
    m_full_description_isSet = true;
}

bool OAIProduct::is_full_description_Set() const{
    return m_full_description_isSet;
}

bool OAIProduct::is_full_description_Valid() const{
    return m_full_description_isValid;
}

QString OAIProduct::getIconUrl() const {
    return m_icon_url;
}
void OAIProduct::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIProduct::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIProduct::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIProduct::getLastUpdatedTimestampMillis() const {
    return m_last_updated_timestamp_millis;
}
void OAIProduct::setLastUpdatedTimestampMillis(const QString &last_updated_timestamp_millis) {
    m_last_updated_timestamp_millis = last_updated_timestamp_millis;
    m_last_updated_timestamp_millis_isSet = true;
}

bool OAIProduct::is_last_updated_timestamp_millis_Set() const{
    return m_last_updated_timestamp_millis_isSet;
}

bool OAIProduct::is_last_updated_timestamp_millis_Valid() const{
    return m_last_updated_timestamp_millis_isValid;
}

qint32 OAIProduct::getMinAndroidSdkVersion() const {
    return m_min_android_sdk_version;
}
void OAIProduct::setMinAndroidSdkVersion(const qint32 &min_android_sdk_version) {
    m_min_android_sdk_version = min_android_sdk_version;
    m_min_android_sdk_version_isSet = true;
}

bool OAIProduct::is_min_android_sdk_version_Set() const{
    return m_min_android_sdk_version_isSet;
}

bool OAIProduct::is_min_android_sdk_version_Valid() const{
    return m_min_android_sdk_version_isValid;
}

QList<OAIProductPermission> OAIProduct::getPermissions() const {
    return m_permissions;
}
void OAIProduct::setPermissions(const QList<OAIProductPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIProduct::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIProduct::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIProduct::getProductId() const {
    return m_product_id;
}
void OAIProduct::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProduct::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProduct::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProduct::getProductPricing() const {
    return m_product_pricing;
}
void OAIProduct::setProductPricing(const QString &product_pricing) {
    m_product_pricing = product_pricing;
    m_product_pricing_isSet = true;
}

bool OAIProduct::is_product_pricing_Set() const{
    return m_product_pricing_isSet;
}

bool OAIProduct::is_product_pricing_Valid() const{
    return m_product_pricing_isValid;
}

QString OAIProduct::getRecentChanges() const {
    return m_recent_changes;
}
void OAIProduct::setRecentChanges(const QString &recent_changes) {
    m_recent_changes = recent_changes;
    m_recent_changes_isSet = true;
}

bool OAIProduct::is_recent_changes_Set() const{
    return m_recent_changes_isSet;
}

bool OAIProduct::is_recent_changes_Valid() const{
    return m_recent_changes_isValid;
}

bool OAIProduct::isRequiresContainerApp() const {
    return m_requires_container_app;
}
void OAIProduct::setRequiresContainerApp(const bool &requires_container_app) {
    m_requires_container_app = requires_container_app;
    m_requires_container_app_isSet = true;
}

bool OAIProduct::is_requires_container_app_Set() const{
    return m_requires_container_app_isSet;
}

bool OAIProduct::is_requires_container_app_Valid() const{
    return m_requires_container_app_isValid;
}

QList<QString> OAIProduct::getScreenshotUrls() const {
    return m_screenshot_urls;
}
void OAIProduct::setScreenshotUrls(const QList<QString> &screenshot_urls) {
    m_screenshot_urls = screenshot_urls;
    m_screenshot_urls_isSet = true;
}

bool OAIProduct::is_screenshot_urls_Set() const{
    return m_screenshot_urls_isSet;
}

bool OAIProduct::is_screenshot_urls_Valid() const{
    return m_screenshot_urls_isValid;
}

OAIProductSigningCertificate OAIProduct::getSigningCertificate() const {
    return m_signing_certificate;
}
void OAIProduct::setSigningCertificate(const OAIProductSigningCertificate &signing_certificate) {
    m_signing_certificate = signing_certificate;
    m_signing_certificate_isSet = true;
}

bool OAIProduct::is_signing_certificate_Set() const{
    return m_signing_certificate_isSet;
}

bool OAIProduct::is_signing_certificate_Valid() const{
    return m_signing_certificate_isValid;
}

QString OAIProduct::getSmallIconUrl() const {
    return m_small_icon_url;
}
void OAIProduct::setSmallIconUrl(const QString &small_icon_url) {
    m_small_icon_url = small_icon_url;
    m_small_icon_url_isSet = true;
}

bool OAIProduct::is_small_icon_url_Set() const{
    return m_small_icon_url_isSet;
}

bool OAIProduct::is_small_icon_url_Valid() const{
    return m_small_icon_url_isValid;
}

QString OAIProduct::getTitle() const {
    return m_title;
}
void OAIProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProduct::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProduct::getWorkDetailsUrl() const {
    return m_work_details_url;
}
void OAIProduct::setWorkDetailsUrl(const QString &work_details_url) {
    m_work_details_url = work_details_url;
    m_work_details_url_isSet = true;
}

bool OAIProduct::is_work_details_url_Set() const{
    return m_work_details_url_isSet;
}

bool OAIProduct::is_work_details_url_Valid() const{
    return m_work_details_url_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_restrictions_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_android_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_pricing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_container_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
