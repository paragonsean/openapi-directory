/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRestrictionsSchemaRestrictionRestrictionValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRestrictionsSchemaRestrictionRestrictionValue::OAIAppRestrictionsSchemaRestrictionRestrictionValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRestrictionsSchemaRestrictionRestrictionValue::OAIAppRestrictionsSchemaRestrictionRestrictionValue() {
    this->initializeModel();
}

OAIAppRestrictionsSchemaRestrictionRestrictionValue::~OAIAppRestrictionsSchemaRestrictionRestrictionValue() {}

void OAIAppRestrictionsSchemaRestrictionRestrictionValue::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_bool_isSet = false;
    m_value_bool_isValid = false;

    m_value_integer_isSet = false;
    m_value_integer_isValid = false;

    m_value_multiselect_isSet = false;
    m_value_multiselect_isValid = false;

    m_value_string_isSet = false;
    m_value_string_isValid = false;
}

void OAIAppRestrictionsSchemaRestrictionRestrictionValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRestrictionsSchemaRestrictionRestrictionValue::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_bool_isValid = ::OpenAPI::fromJsonValue(m_value_bool, json[QString("valueBool")]);
    m_value_bool_isSet = !json[QString("valueBool")].isNull() && m_value_bool_isValid;

    m_value_integer_isValid = ::OpenAPI::fromJsonValue(m_value_integer, json[QString("valueInteger")]);
    m_value_integer_isSet = !json[QString("valueInteger")].isNull() && m_value_integer_isValid;

    m_value_multiselect_isValid = ::OpenAPI::fromJsonValue(m_value_multiselect, json[QString("valueMultiselect")]);
    m_value_multiselect_isSet = !json[QString("valueMultiselect")].isNull() && m_value_multiselect_isValid;

    m_value_string_isValid = ::OpenAPI::fromJsonValue(m_value_string, json[QString("valueString")]);
    m_value_string_isSet = !json[QString("valueString")].isNull() && m_value_string_isValid;
}

QString OAIAppRestrictionsSchemaRestrictionRestrictionValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRestrictionsSchemaRestrictionRestrictionValue::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_bool_isSet) {
        obj.insert(QString("valueBool"), ::OpenAPI::toJsonValue(m_value_bool));
    }
    if (m_value_integer_isSet) {
        obj.insert(QString("valueInteger"), ::OpenAPI::toJsonValue(m_value_integer));
    }
    if (m_value_multiselect.size() > 0) {
        obj.insert(QString("valueMultiselect"), ::OpenAPI::toJsonValue(m_value_multiselect));
    }
    if (m_value_string_isSet) {
        obj.insert(QString("valueString"), ::OpenAPI::toJsonValue(m_value_string));
    }
    return obj;
}

QString OAIAppRestrictionsSchemaRestrictionRestrictionValue::getType() const {
    return m_type;
}
void OAIAppRestrictionsSchemaRestrictionRestrictionValue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::isValueBool() const {
    return m_value_bool;
}
void OAIAppRestrictionsSchemaRestrictionRestrictionValue::setValueBool(const bool &value_bool) {
    m_value_bool = value_bool;
    m_value_bool_isSet = true;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_bool_Set() const{
    return m_value_bool_isSet;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_bool_Valid() const{
    return m_value_bool_isValid;
}

qint32 OAIAppRestrictionsSchemaRestrictionRestrictionValue::getValueInteger() const {
    return m_value_integer;
}
void OAIAppRestrictionsSchemaRestrictionRestrictionValue::setValueInteger(const qint32 &value_integer) {
    m_value_integer = value_integer;
    m_value_integer_isSet = true;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_integer_Set() const{
    return m_value_integer_isSet;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_integer_Valid() const{
    return m_value_integer_isValid;
}

QList<QString> OAIAppRestrictionsSchemaRestrictionRestrictionValue::getValueMultiselect() const {
    return m_value_multiselect;
}
void OAIAppRestrictionsSchemaRestrictionRestrictionValue::setValueMultiselect(const QList<QString> &value_multiselect) {
    m_value_multiselect = value_multiselect;
    m_value_multiselect_isSet = true;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_multiselect_Set() const{
    return m_value_multiselect_isSet;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_multiselect_Valid() const{
    return m_value_multiselect_isValid;
}

QString OAIAppRestrictionsSchemaRestrictionRestrictionValue::getValueString() const {
    return m_value_string;
}
void OAIAppRestrictionsSchemaRestrictionRestrictionValue::setValueString(const QString &value_string) {
    m_value_string = value_string;
    m_value_string_isSet = true;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_string_Set() const{
    return m_value_string_isSet;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::is_value_string_Valid() const{
    return m_value_string_isValid;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_bool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_integer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_multiselect.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRestrictionsSchemaRestrictionRestrictionValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
