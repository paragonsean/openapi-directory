/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductPolicy::OAIProductPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductPolicy::OAIProductPolicy() {
    this->initializeModel();
}

OAIProductPolicy::~OAIProductPolicy() {}

void OAIProductPolicy::initializeModel() {

    m_auto_install_policy_isSet = false;
    m_auto_install_policy_isValid = false;

    m_auto_update_mode_isSet = false;
    m_auto_update_mode_isValid = false;

    m_enterprise_authentication_app_link_configs_isSet = false;
    m_enterprise_authentication_app_link_configs_isValid = false;

    m_managed_configuration_isSet = false;
    m_managed_configuration_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_track_ids_isSet = false;
    m_track_ids_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIProductPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductPolicy::fromJsonObject(QJsonObject json) {

    m_auto_install_policy_isValid = ::OpenAPI::fromJsonValue(m_auto_install_policy, json[QString("autoInstallPolicy")]);
    m_auto_install_policy_isSet = !json[QString("autoInstallPolicy")].isNull() && m_auto_install_policy_isValid;

    m_auto_update_mode_isValid = ::OpenAPI::fromJsonValue(m_auto_update_mode, json[QString("autoUpdateMode")]);
    m_auto_update_mode_isSet = !json[QString("autoUpdateMode")].isNull() && m_auto_update_mode_isValid;

    m_enterprise_authentication_app_link_configs_isValid = ::OpenAPI::fromJsonValue(m_enterprise_authentication_app_link_configs, json[QString("enterpriseAuthenticationAppLinkConfigs")]);
    m_enterprise_authentication_app_link_configs_isSet = !json[QString("enterpriseAuthenticationAppLinkConfigs")].isNull() && m_enterprise_authentication_app_link_configs_isValid;

    m_managed_configuration_isValid = ::OpenAPI::fromJsonValue(m_managed_configuration, json[QString("managedConfiguration")]);
    m_managed_configuration_isSet = !json[QString("managedConfiguration")].isNull() && m_managed_configuration_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_track_ids_isValid = ::OpenAPI::fromJsonValue(m_track_ids, json[QString("trackIds")]);
    m_track_ids_isSet = !json[QString("trackIds")].isNull() && m_track_ids_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIProductPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_install_policy.isSet()) {
        obj.insert(QString("autoInstallPolicy"), ::OpenAPI::toJsonValue(m_auto_install_policy));
    }
    if (m_auto_update_mode_isSet) {
        obj.insert(QString("autoUpdateMode"), ::OpenAPI::toJsonValue(m_auto_update_mode));
    }
    if (m_enterprise_authentication_app_link_configs.size() > 0) {
        obj.insert(QString("enterpriseAuthenticationAppLinkConfigs"), ::OpenAPI::toJsonValue(m_enterprise_authentication_app_link_configs));
    }
    if (m_managed_configuration.isSet()) {
        obj.insert(QString("managedConfiguration"), ::OpenAPI::toJsonValue(m_managed_configuration));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_track_ids.size() > 0) {
        obj.insert(QString("trackIds"), ::OpenAPI::toJsonValue(m_track_ids));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

OAIAutoInstallPolicy OAIProductPolicy::getAutoInstallPolicy() const {
    return m_auto_install_policy;
}
void OAIProductPolicy::setAutoInstallPolicy(const OAIAutoInstallPolicy &auto_install_policy) {
    m_auto_install_policy = auto_install_policy;
    m_auto_install_policy_isSet = true;
}

bool OAIProductPolicy::is_auto_install_policy_Set() const{
    return m_auto_install_policy_isSet;
}

bool OAIProductPolicy::is_auto_install_policy_Valid() const{
    return m_auto_install_policy_isValid;
}

QString OAIProductPolicy::getAutoUpdateMode() const {
    return m_auto_update_mode;
}
void OAIProductPolicy::setAutoUpdateMode(const QString &auto_update_mode) {
    m_auto_update_mode = auto_update_mode;
    m_auto_update_mode_isSet = true;
}

bool OAIProductPolicy::is_auto_update_mode_Set() const{
    return m_auto_update_mode_isSet;
}

bool OAIProductPolicy::is_auto_update_mode_Valid() const{
    return m_auto_update_mode_isValid;
}

QList<OAIEnterpriseAuthenticationAppLinkConfig> OAIProductPolicy::getEnterpriseAuthenticationAppLinkConfigs() const {
    return m_enterprise_authentication_app_link_configs;
}
void OAIProductPolicy::setEnterpriseAuthenticationAppLinkConfigs(const QList<OAIEnterpriseAuthenticationAppLinkConfig> &enterprise_authentication_app_link_configs) {
    m_enterprise_authentication_app_link_configs = enterprise_authentication_app_link_configs;
    m_enterprise_authentication_app_link_configs_isSet = true;
}

bool OAIProductPolicy::is_enterprise_authentication_app_link_configs_Set() const{
    return m_enterprise_authentication_app_link_configs_isSet;
}

bool OAIProductPolicy::is_enterprise_authentication_app_link_configs_Valid() const{
    return m_enterprise_authentication_app_link_configs_isValid;
}

OAIManagedConfiguration OAIProductPolicy::getManagedConfiguration() const {
    return m_managed_configuration;
}
void OAIProductPolicy::setManagedConfiguration(const OAIManagedConfiguration &managed_configuration) {
    m_managed_configuration = managed_configuration;
    m_managed_configuration_isSet = true;
}

bool OAIProductPolicy::is_managed_configuration_Set() const{
    return m_managed_configuration_isSet;
}

bool OAIProductPolicy::is_managed_configuration_Valid() const{
    return m_managed_configuration_isValid;
}

QString OAIProductPolicy::getProductId() const {
    return m_product_id;
}
void OAIProductPolicy::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductPolicy::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductPolicy::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QList<QString> OAIProductPolicy::getTrackIds() const {
    return m_track_ids;
}
void OAIProductPolicy::setTrackIds(const QList<QString> &track_ids) {
    m_track_ids = track_ids;
    m_track_ids_isSet = true;
}

bool OAIProductPolicy::is_track_ids_Set() const{
    return m_track_ids_isSet;
}

bool OAIProductPolicy::is_track_ids_Valid() const{
    return m_track_ids_isValid;
}

QList<QString> OAIProductPolicy::getTracks() const {
    return m_tracks;
}
void OAIProductPolicy::setTracks(const QList<QString> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIProductPolicy::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIProductPolicy::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIProductPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_install_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_update_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_authentication_app_link_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
