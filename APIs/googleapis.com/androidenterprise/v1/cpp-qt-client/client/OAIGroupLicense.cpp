/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupLicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupLicense::OAIGroupLicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupLicense::OAIGroupLicense() {
    this->initializeModel();
}

OAIGroupLicense::~OAIGroupLicense() {}

void OAIGroupLicense::initializeModel() {

    m_acquisition_kind_isSet = false;
    m_acquisition_kind_isValid = false;

    m_approval_isSet = false;
    m_approval_isValid = false;

    m_num_provisioned_isSet = false;
    m_num_provisioned_isValid = false;

    m_num_purchased_isSet = false;
    m_num_purchased_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;
}

void OAIGroupLicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupLicense::fromJsonObject(QJsonObject json) {

    m_acquisition_kind_isValid = ::OpenAPI::fromJsonValue(m_acquisition_kind, json[QString("acquisitionKind")]);
    m_acquisition_kind_isSet = !json[QString("acquisitionKind")].isNull() && m_acquisition_kind_isValid;

    m_approval_isValid = ::OpenAPI::fromJsonValue(m_approval, json[QString("approval")]);
    m_approval_isSet = !json[QString("approval")].isNull() && m_approval_isValid;

    m_num_provisioned_isValid = ::OpenAPI::fromJsonValue(m_num_provisioned, json[QString("numProvisioned")]);
    m_num_provisioned_isSet = !json[QString("numProvisioned")].isNull() && m_num_provisioned_isValid;

    m_num_purchased_isValid = ::OpenAPI::fromJsonValue(m_num_purchased, json[QString("numPurchased")]);
    m_num_purchased_isSet = !json[QString("numPurchased")].isNull() && m_num_purchased_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;
}

QString OAIGroupLicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupLicense::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_kind_isSet) {
        obj.insert(QString("acquisitionKind"), ::OpenAPI::toJsonValue(m_acquisition_kind));
    }
    if (m_approval_isSet) {
        obj.insert(QString("approval"), ::OpenAPI::toJsonValue(m_approval));
    }
    if (m_num_provisioned_isSet) {
        obj.insert(QString("numProvisioned"), ::OpenAPI::toJsonValue(m_num_provisioned));
    }
    if (m_num_purchased_isSet) {
        obj.insert(QString("numPurchased"), ::OpenAPI::toJsonValue(m_num_purchased));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    return obj;
}

QString OAIGroupLicense::getAcquisitionKind() const {
    return m_acquisition_kind;
}
void OAIGroupLicense::setAcquisitionKind(const QString &acquisition_kind) {
    m_acquisition_kind = acquisition_kind;
    m_acquisition_kind_isSet = true;
}

bool OAIGroupLicense::is_acquisition_kind_Set() const{
    return m_acquisition_kind_isSet;
}

bool OAIGroupLicense::is_acquisition_kind_Valid() const{
    return m_acquisition_kind_isValid;
}

QString OAIGroupLicense::getApproval() const {
    return m_approval;
}
void OAIGroupLicense::setApproval(const QString &approval) {
    m_approval = approval;
    m_approval_isSet = true;
}

bool OAIGroupLicense::is_approval_Set() const{
    return m_approval_isSet;
}

bool OAIGroupLicense::is_approval_Valid() const{
    return m_approval_isValid;
}

qint32 OAIGroupLicense::getNumProvisioned() const {
    return m_num_provisioned;
}
void OAIGroupLicense::setNumProvisioned(const qint32 &num_provisioned) {
    m_num_provisioned = num_provisioned;
    m_num_provisioned_isSet = true;
}

bool OAIGroupLicense::is_num_provisioned_Set() const{
    return m_num_provisioned_isSet;
}

bool OAIGroupLicense::is_num_provisioned_Valid() const{
    return m_num_provisioned_isValid;
}

qint32 OAIGroupLicense::getNumPurchased() const {
    return m_num_purchased;
}
void OAIGroupLicense::setNumPurchased(const qint32 &num_purchased) {
    m_num_purchased = num_purchased;
    m_num_purchased_isSet = true;
}

bool OAIGroupLicense::is_num_purchased_Set() const{
    return m_num_purchased_isSet;
}

bool OAIGroupLicense::is_num_purchased_Valid() const{
    return m_num_purchased_isValid;
}

QString OAIGroupLicense::getPermissions() const {
    return m_permissions;
}
void OAIGroupLicense::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGroupLicense::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGroupLicense::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIGroupLicense::getProductId() const {
    return m_product_id;
}
void OAIGroupLicense::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIGroupLicense::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIGroupLicense::is_product_id_Valid() const{
    return m_product_id_isValid;
}

bool OAIGroupLicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_provisioned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_purchased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupLicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
