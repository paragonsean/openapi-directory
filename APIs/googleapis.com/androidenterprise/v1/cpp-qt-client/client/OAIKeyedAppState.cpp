/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyedAppState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyedAppState::OAIKeyedAppState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyedAppState::OAIKeyedAppState() {
    this->initializeModel();
}

OAIKeyedAppState::~OAIKeyedAppState() {}

void OAIKeyedAppState::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_state_timestamp_millis_isSet = false;
    m_state_timestamp_millis_isValid = false;
}

void OAIKeyedAppState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyedAppState::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_state_timestamp_millis_isValid = ::OpenAPI::fromJsonValue(m_state_timestamp_millis, json[QString("stateTimestampMillis")]);
    m_state_timestamp_millis_isSet = !json[QString("stateTimestampMillis")].isNull() && m_state_timestamp_millis_isValid;
}

QString OAIKeyedAppState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyedAppState::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_state_timestamp_millis_isSet) {
        obj.insert(QString("stateTimestampMillis"), ::OpenAPI::toJsonValue(m_state_timestamp_millis));
    }
    return obj;
}

QString OAIKeyedAppState::getData() const {
    return m_data;
}
void OAIKeyedAppState::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIKeyedAppState::is_data_Set() const{
    return m_data_isSet;
}

bool OAIKeyedAppState::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIKeyedAppState::getKey() const {
    return m_key;
}
void OAIKeyedAppState::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIKeyedAppState::is_key_Set() const{
    return m_key_isSet;
}

bool OAIKeyedAppState::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIKeyedAppState::getMessage() const {
    return m_message;
}
void OAIKeyedAppState::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIKeyedAppState::is_message_Set() const{
    return m_message_isSet;
}

bool OAIKeyedAppState::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIKeyedAppState::getSeverity() const {
    return m_severity;
}
void OAIKeyedAppState::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIKeyedAppState::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIKeyedAppState::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIKeyedAppState::getStateTimestampMillis() const {
    return m_state_timestamp_millis;
}
void OAIKeyedAppState::setStateTimestampMillis(const QString &state_timestamp_millis) {
    m_state_timestamp_millis = state_timestamp_millis;
    m_state_timestamp_millis_isSet = true;
}

bool OAIKeyedAppState::is_state_timestamp_millis_Set() const{
    return m_state_timestamp_millis_isSet;
}

bool OAIKeyedAppState::is_state_timestamp_millis_Valid() const{
    return m_state_timestamp_millis_isValid;
}

bool OAIKeyedAppState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_timestamp_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyedAppState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
