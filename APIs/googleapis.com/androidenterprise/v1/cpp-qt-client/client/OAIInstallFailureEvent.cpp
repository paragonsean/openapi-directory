/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallFailureEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallFailureEvent::OAIInstallFailureEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallFailureEvent::OAIInstallFailureEvent() {
    this->initializeModel();
}

OAIInstallFailureEvent::~OAIInstallFailureEvent() {}

void OAIInstallFailureEvent::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_failure_details_isSet = false;
    m_failure_details_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIInstallFailureEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallFailureEvent::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_failure_details_isValid = ::OpenAPI::fromJsonValue(m_failure_details, json[QString("failureDetails")]);
    m_failure_details_isSet = !json[QString("failureDetails")].isNull() && m_failure_details_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIInstallFailureEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallFailureEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_failure_details_isSet) {
        obj.insert(QString("failureDetails"), ::OpenAPI::toJsonValue(m_failure_details));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIInstallFailureEvent::getDeviceId() const {
    return m_device_id;
}
void OAIInstallFailureEvent::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIInstallFailureEvent::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIInstallFailureEvent::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIInstallFailureEvent::getFailureDetails() const {
    return m_failure_details;
}
void OAIInstallFailureEvent::setFailureDetails(const QString &failure_details) {
    m_failure_details = failure_details;
    m_failure_details_isSet = true;
}

bool OAIInstallFailureEvent::is_failure_details_Set() const{
    return m_failure_details_isSet;
}

bool OAIInstallFailureEvent::is_failure_details_Valid() const{
    return m_failure_details_isValid;
}

QString OAIInstallFailureEvent::getFailureReason() const {
    return m_failure_reason;
}
void OAIInstallFailureEvent::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIInstallFailureEvent::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIInstallFailureEvent::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIInstallFailureEvent::getProductId() const {
    return m_product_id;
}
void OAIInstallFailureEvent::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIInstallFailureEvent::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIInstallFailureEvent::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIInstallFailureEvent::getUserId() const {
    return m_user_id;
}
void OAIInstallFailureEvent::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIInstallFailureEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIInstallFailureEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIInstallFailureEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallFailureEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
