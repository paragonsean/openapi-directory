/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductVisibility from './ProductVisibility';

/**
 * The ProductSet model module.
 * @module model/ProductSet
 * @version v1
 */
class ProductSet {
    /**
     * Constructs a new <code>ProductSet</code>.
     * A set of products.
     * @alias module:model/ProductSet
     */
    constructor() { 
        
        ProductSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductSet} obj Optional instance to populate.
     * @return {module:model/ProductSet} The populated <code>ProductSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductSet();

            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], ['String']);
            }
            if (data.hasOwnProperty('productSetBehavior')) {
                obj['productSetBehavior'] = ApiClient.convertToType(data['productSetBehavior'], 'String');
            }
            if (data.hasOwnProperty('productVisibility')) {
                obj['productVisibility'] = ApiClient.convertToType(data['productVisibility'], [ProductVisibility]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['productId'])) {
            throw new Error("Expected the field `productId` to be an array in the JSON data but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productSetBehavior'] && !(typeof data['productSetBehavior'] === 'string' || data['productSetBehavior'] instanceof String)) {
            throw new Error("Expected the field `productSetBehavior` to be a primitive type in the JSON string but got " + data['productSetBehavior']);
        }
        if (data['productVisibility']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productVisibility'])) {
                throw new Error("Expected the field `productVisibility` to be an array in the JSON data but got " + data['productVisibility']);
            }
            // validate the optional field `productVisibility` (array)
            for (const item of data['productVisibility']) {
                ProductVisibility.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of product IDs making up the set of products.
 * @member {Array.<String>} productId
 */
ProductSet.prototype['productId'] = undefined;

/**
 * The interpretation of this product set. \"unknown\" should never be sent and is ignored if received. \"whitelist\" means that the user is entitled to access the product set. \"includeAll\" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. \"allApproved\" means that the user is entitled to access all products that are approved for the enterprise. If the value is \"allApproved\" or \"includeAll\", the productId field is ignored. If no value is provided, it is interpreted as \"whitelist\" for backwards compatibility. Further \"allApproved\" or \"includeAll\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks for Android app. Use ProductVisibility to enable \"alpha\" or \"beta\" tracks per user.
 * @member {module:model/ProductSet.ProductSetBehaviorEnum} productSetBehavior
 */
ProductSet.prototype['productSetBehavior'] = undefined;

/**
 * Additional list of product IDs making up the product set. Unlike the productID array, in this list It's possible to specify which tracks (alpha, beta, production) of a product are visible to the user. See ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.
 * @member {Array.<module:model/ProductVisibility>} productVisibility
 */
ProductSet.prototype['productVisibility'] = undefined;





/**
 * Allowed values for the <code>productSetBehavior</code> property.
 * @enum {String}
 * @readonly
 */
ProductSet['ProductSetBehaviorEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "whitelist"
     * @const
     */
    "whitelist": "whitelist",

    /**
     * value: "includeAll"
     * @const
     */
    "includeAll": "includeAll",

    /**
     * value: "allApproved"
     * @const
     */
    "allApproved": "allApproved"
};



export default ProductSet;

