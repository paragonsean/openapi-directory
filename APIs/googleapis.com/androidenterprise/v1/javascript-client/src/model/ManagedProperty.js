/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagedPropertyBundle from './ManagedPropertyBundle';

/**
 * The ManagedProperty model module.
 * @module model/ManagedProperty
 * @version v1
 */
class ManagedProperty {
    /**
     * Constructs a new <code>ManagedProperty</code>.
     * A managed property of a managed configuration. The property must match one of the properties in the app restrictions schema of the product. Exactly one of the value fields must be populated, and it must match the property&#39;s type in the app restrictions schema.
     * @alias module:model/ManagedProperty
     */
    constructor() { 
        
        ManagedProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedProperty} obj Optional instance to populate.
     * @return {module:model/ManagedProperty} The populated <code>ManagedProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedProperty();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('valueBool')) {
                obj['valueBool'] = ApiClient.convertToType(data['valueBool'], 'Boolean');
            }
            if (data.hasOwnProperty('valueBundle')) {
                obj['valueBundle'] = ManagedPropertyBundle.constructFromObject(data['valueBundle']);
            }
            if (data.hasOwnProperty('valueBundleArray')) {
                obj['valueBundleArray'] = ApiClient.convertToType(data['valueBundleArray'], [ManagedPropertyBundle]);
            }
            if (data.hasOwnProperty('valueInteger')) {
                obj['valueInteger'] = ApiClient.convertToType(data['valueInteger'], 'Number');
            }
            if (data.hasOwnProperty('valueString')) {
                obj['valueString'] = ApiClient.convertToType(data['valueString'], 'String');
            }
            if (data.hasOwnProperty('valueStringArray')) {
                obj['valueStringArray'] = ApiClient.convertToType(data['valueStringArray'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedProperty</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // validate the optional field `valueBundle`
        if (data['valueBundle']) { // data not null
          ManagedPropertyBundle.validateJSON(data['valueBundle']);
        }
        if (data['valueBundleArray']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueBundleArray'])) {
                throw new Error("Expected the field `valueBundleArray` to be an array in the JSON data but got " + data['valueBundleArray']);
            }
            // validate the optional field `valueBundleArray` (array)
            for (const item of data['valueBundleArray']) {
                ManagedPropertyBundle.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valueString'] && !(typeof data['valueString'] === 'string' || data['valueString'] instanceof String)) {
            throw new Error("Expected the field `valueString` to be a primitive type in the JSON string but got " + data['valueString']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['valueStringArray'])) {
            throw new Error("Expected the field `valueStringArray` to be an array in the JSON data but got " + data['valueStringArray']);
        }

        return true;
    }


}



/**
 * The unique key that identifies the property.
 * @member {String} key
 */
ManagedProperty.prototype['key'] = undefined;

/**
 * The boolean value - this will only be present if type of the property is bool.
 * @member {Boolean} valueBool
 */
ManagedProperty.prototype['valueBool'] = undefined;

/**
 * @member {module:model/ManagedPropertyBundle} valueBundle
 */
ManagedProperty.prototype['valueBundle'] = undefined;

/**
 * The list of bundles of properties - this will only be present if type of the property is bundle_array.
 * @member {Array.<module:model/ManagedPropertyBundle>} valueBundleArray
 */
ManagedProperty.prototype['valueBundleArray'] = undefined;

/**
 * The integer value - this will only be present if type of the property is integer.
 * @member {Number} valueInteger
 */
ManagedProperty.prototype['valueInteger'] = undefined;

/**
 * The string value - this will only be present if type of the property is string, choice or hidden.
 * @member {String} valueString
 */
ManagedProperty.prototype['valueString'] = undefined;

/**
 * The list of string values - this will only be present if type of the property is multiselect.
 * @member {Array.<String>} valueStringArray
 */
ManagedProperty.prototype['valueStringArray'] = undefined;






export default ManagedProperty;

