/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppVersion model module.
 * @module model/AppVersion
 * @version v1
 */
class AppVersion {
    /**
     * Constructs a new <code>AppVersion</code>.
     * This represents a single version of the app.
     * @alias module:model/AppVersion
     */
    constructor() { 
        
        AppVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppVersion} obj Optional instance to populate.
     * @return {module:model/AppVersion} The populated <code>AppVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppVersion();

            if (data.hasOwnProperty('isProduction')) {
                obj['isProduction'] = ApiClient.convertToType(data['isProduction'], 'Boolean');
            }
            if (data.hasOwnProperty('targetSdkVersion')) {
                obj['targetSdkVersion'] = ApiClient.convertToType(data['targetSdkVersion'], 'Number');
            }
            if (data.hasOwnProperty('track')) {
                obj['track'] = ApiClient.convertToType(data['track'], 'String');
            }
            if (data.hasOwnProperty('trackId')) {
                obj['trackId'] = ApiClient.convertToType(data['trackId'], ['String']);
            }
            if (data.hasOwnProperty('versionCode')) {
                obj['versionCode'] = ApiClient.convertToType(data['versionCode'], 'Number');
            }
            if (data.hasOwnProperty('versionString')) {
                obj['versionString'] = ApiClient.convertToType(data['versionString'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['track'] && !(typeof data['track'] === 'string' || data['track'] instanceof String)) {
            throw new Error("Expected the field `track` to be a primitive type in the JSON string but got " + data['track']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['trackId'])) {
            throw new Error("Expected the field `trackId` to be an array in the JSON data but got " + data['trackId']);
        }
        // ensure the json data is a string
        if (data['versionString'] && !(typeof data['versionString'] === 'string' || data['versionString'] instanceof String)) {
            throw new Error("Expected the field `versionString` to be a primitive type in the JSON string but got " + data['versionString']);
        }

        return true;
    }


}



/**
 * True if this version is a production APK.
 * @member {Boolean} isProduction
 */
AppVersion.prototype['isProduction'] = undefined;

/**
 * The SDK version this app targets, as specified in the manifest of the APK. See http://developer.android.com/guide/topics/manifest/uses-sdk-element.html
 * @member {Number} targetSdkVersion
 */
AppVersion.prototype['targetSdkVersion'] = undefined;

/**
 * Deprecated, use trackId instead.
 * @member {module:model/AppVersion.TrackEnum} track
 */
AppVersion.prototype['track'] = undefined;

/**
 * Track ids that the app version is published in. Replaces the track field (deprecated), but doesn't include the production track (see isProduction instead).
 * @member {Array.<String>} trackId
 */
AppVersion.prototype['trackId'] = undefined;

/**
 * Unique increasing identifier for the app version.
 * @member {Number} versionCode
 */
AppVersion.prototype['versionCode'] = undefined;

/**
 * The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be \"1.4\").
 * @member {String} versionString
 */
AppVersion.prototype['versionString'] = undefined;





/**
 * Allowed values for the <code>track</code> property.
 * @enum {String}
 * @readonly
 */
AppVersion['TrackEnum'] = {

    /**
     * value: "appTrackUnspecified"
     * @const
     */
    "appTrackUnspecified": "appTrackUnspecified",

    /**
     * value: "production"
     * @const
     */
    "production": "production",

    /**
     * value: "beta"
     * @const
     */
    "beta": "beta",

    /**
     * value: "alpha"
     * @const
     */
    "alpha": "alpha"
};



export default AppVersion;

