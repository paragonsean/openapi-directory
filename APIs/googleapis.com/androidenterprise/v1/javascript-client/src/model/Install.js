/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Install model module.
 * @module model/Install
 * @version v1
 */
class Install {
    /**
     * Constructs a new <code>Install</code>.
     * The existence of an Installs resource indicates that an app is installed on a particular device (or that an install is pending). The API can be used to create an install resource using the update method. This triggers the actual install of the app on the device. If the user does not already have an entitlement for the app, then an attempt is made to create one. If this fails (for example, because the app is not free and there is no available license), then the creation of the install fails. The API can also be used to update an installed app. If the update method is used on an existing install, then the app will be updated to the latest available version. Note that it is not possible to force the installation of a specific version of an app: the version code is read-only. If a user installs an app themselves (as permitted by the enterprise), then again an install resource and possibly an entitlement resource are automatically created. The API can also be used to delete an install resource, which triggers the removal of the app from the device. Note that deleting an install does not automatically remove the corresponding entitlement, even if there are no remaining installs. The install resource will also be deleted if the user uninstalls the app themselves.
     * @alias module:model/Install
     */
    constructor() { 
        
        Install.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Install</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Install} obj Optional instance to populate.
     * @return {module:model/Install} The populated <code>Install</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Install();

            if (data.hasOwnProperty('installState')) {
                obj['installState'] = ApiClient.convertToType(data['installState'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('versionCode')) {
                obj['versionCode'] = ApiClient.convertToType(data['versionCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Install</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Install</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['installState'] && !(typeof data['installState'] === 'string' || data['installState'] instanceof String)) {
            throw new Error("Expected the field `installState` to be a primitive type in the JSON string but got " + data['installState']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }

        return true;
    }


}



/**
 * Install state. The state \"installPending\" means that an install request has recently been made and download to the device is in progress. The state \"installed\" means that the app has been installed. This field is read-only.
 * @member {module:model/Install.InstallStateEnum} installState
 */
Install.prototype['installState'] = undefined;

/**
 * The ID of the product that the install is for. For example, \"app:com.google.android.gm\".
 * @member {String} productId
 */
Install.prototype['productId'] = undefined;

/**
 * The version of the installed product. Guaranteed to be set only if the install state is \"installed\".
 * @member {Number} versionCode
 */
Install.prototype['versionCode'] = undefined;





/**
 * Allowed values for the <code>installState</code> property.
 * @enum {String}
 * @readonly
 */
Install['InstallStateEnum'] = {

    /**
     * value: "installed"
     * @const
     */
    "installed": "installed",

    /**
     * value: "installPending"
     * @const
     */
    "installPending": "installPending"
};



export default Install;

