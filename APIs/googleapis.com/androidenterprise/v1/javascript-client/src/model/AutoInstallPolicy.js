/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoInstallConstraint from './AutoInstallConstraint';

/**
 * The AutoInstallPolicy model module.
 * @module model/AutoInstallPolicy
 * @version v1
 */
class AutoInstallPolicy {
    /**
     * Constructs a new <code>AutoInstallPolicy</code>.
     * @alias module:model/AutoInstallPolicy
     */
    constructor() { 
        
        AutoInstallPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutoInstallPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoInstallPolicy} obj Optional instance to populate.
     * @return {module:model/AutoInstallPolicy} The populated <code>AutoInstallPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoInstallPolicy();

            if (data.hasOwnProperty('autoInstallConstraint')) {
                obj['autoInstallConstraint'] = ApiClient.convertToType(data['autoInstallConstraint'], [AutoInstallConstraint]);
            }
            if (data.hasOwnProperty('autoInstallMode')) {
                obj['autoInstallMode'] = ApiClient.convertToType(data['autoInstallMode'], 'String');
            }
            if (data.hasOwnProperty('autoInstallPriority')) {
                obj['autoInstallPriority'] = ApiClient.convertToType(data['autoInstallPriority'], 'Number');
            }
            if (data.hasOwnProperty('minimumVersionCode')) {
                obj['minimumVersionCode'] = ApiClient.convertToType(data['minimumVersionCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoInstallPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoInstallPolicy</code>.
     */
    static validateJSON(data) {
        if (data['autoInstallConstraint']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['autoInstallConstraint'])) {
                throw new Error("Expected the field `autoInstallConstraint` to be an array in the JSON data but got " + data['autoInstallConstraint']);
            }
            // validate the optional field `autoInstallConstraint` (array)
            for (const item of data['autoInstallConstraint']) {
                AutoInstallConstraint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['autoInstallMode'] && !(typeof data['autoInstallMode'] === 'string' || data['autoInstallMode'] instanceof String)) {
            throw new Error("Expected the field `autoInstallMode` to be a primitive type in the JSON string but got " + data['autoInstallMode']);
        }

        return true;
    }


}



/**
 * The constraints for auto-installing the app. You can specify a maximum of one constraint.
 * @member {Array.<module:model/AutoInstallConstraint>} autoInstallConstraint
 */
AutoInstallPolicy.prototype['autoInstallConstraint'] = undefined;

/**
 * The auto-install mode. If unset, defaults to \"doNotAutoInstall\". An app is automatically installed regardless of a set maintenance window.
 * @member {module:model/AutoInstallPolicy.AutoInstallModeEnum} autoInstallMode
 */
AutoInstallPolicy.prototype['autoInstallMode'] = undefined;

/**
 * The priority of the install, as an unsigned integer. A lower number means higher priority.
 * @member {Number} autoInstallPriority
 */
AutoInstallPolicy.prototype['autoInstallPriority'] = undefined;

/**
 * The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.
 * @member {Number} minimumVersionCode
 */
AutoInstallPolicy.prototype['minimumVersionCode'] = undefined;





/**
 * Allowed values for the <code>autoInstallMode</code> property.
 * @enum {String}
 * @readonly
 */
AutoInstallPolicy['AutoInstallModeEnum'] = {

    /**
     * value: "autoInstallModeUnspecified"
     * @const
     */
    "autoInstallModeUnspecified": "autoInstallModeUnspecified",

    /**
     * value: "doNotAutoInstall"
     * @const
     */
    "doNotAutoInstall": "doNotAutoInstall",

    /**
     * value: "autoInstallOnce"
     * @const
     */
    "autoInstallOnce": "autoInstallOnce",

    /**
     * value: "forceAutoInstall"
     * @const
     */
    "forceAutoInstall": "forceAutoInstall"
};



export default AutoInstallPolicy;

