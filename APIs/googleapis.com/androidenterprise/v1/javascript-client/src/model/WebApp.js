/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebAppIcon from './WebAppIcon';

/**
 * The WebApp model module.
 * @module model/WebApp
 * @version v1
 */
class WebApp {
    /**
     * Constructs a new <code>WebApp</code>.
     * A WebApps resource represents a web app created for an enterprise. Web apps are published to managed Google Play and can be distributed like other Android apps. On a user&#39;s device, a web app opens its specified URL.
     * @alias module:model/WebApp
     */
    constructor() { 
        
        WebApp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebApp} obj Optional instance to populate.
     * @return {module:model/WebApp} The populated <code>WebApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebApp();

            if (data.hasOwnProperty('displayMode')) {
                obj['displayMode'] = ApiClient.convertToType(data['displayMode'], 'String');
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = ApiClient.convertToType(data['icons'], [WebAppIcon]);
            }
            if (data.hasOwnProperty('isPublished')) {
                obj['isPublished'] = ApiClient.convertToType(data['isPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('startUrl')) {
                obj['startUrl'] = ApiClient.convertToType(data['startUrl'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('versionCode')) {
                obj['versionCode'] = ApiClient.convertToType(data['versionCode'], 'String');
            }
            if (data.hasOwnProperty('webAppId')) {
                obj['webAppId'] = ApiClient.convertToType(data['webAppId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebApp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebApp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayMode'] && !(typeof data['displayMode'] === 'string' || data['displayMode'] instanceof String)) {
            throw new Error("Expected the field `displayMode` to be a primitive type in the JSON string but got " + data['displayMode']);
        }
        if (data['icons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['icons'])) {
                throw new Error("Expected the field `icons` to be an array in the JSON data but got " + data['icons']);
            }
            // validate the optional field `icons` (array)
            for (const item of data['icons']) {
                WebAppIcon.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startUrl'] && !(typeof data['startUrl'] === 'string' || data['startUrl'] instanceof String)) {
            throw new Error("Expected the field `startUrl` to be a primitive type in the JSON string but got " + data['startUrl']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['versionCode'] && !(typeof data['versionCode'] === 'string' || data['versionCode'] instanceof String)) {
            throw new Error("Expected the field `versionCode` to be a primitive type in the JSON string but got " + data['versionCode']);
        }
        // ensure the json data is a string
        if (data['webAppId'] && !(typeof data['webAppId'] === 'string' || data['webAppId'] instanceof String)) {
            throw new Error("Expected the field `webAppId` to be a primitive type in the JSON string but got " + data['webAppId']);
        }

        return true;
    }


}



/**
 * The display mode of the web app. Possible values include: - \"minimalUi\", the device's status bar, navigation bar, the app's URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - \"standalone\", the device's status bar and navigation bar are visible when the app is open. - \"fullScreen\", the app opens in full screen mode, hiding the device's status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. 
 * @member {module:model/WebApp.DisplayModeEnum} displayMode
 */
WebApp.prototype['displayMode'] = undefined;

/**
 * A list of icons representing this website. If absent, a default icon (for create) or the current icon (for update) will be used.
 * @member {Array.<module:model/WebAppIcon>} icons
 */
WebApp.prototype['icons'] = undefined;

/**
 * A flag whether the app has been published to the Play store yet.
 * @member {Boolean} isPublished
 */
WebApp.prototype['isPublished'] = undefined;

/**
 * The start URL, i.e. the URL that should load when the user opens the application.
 * @member {String} startUrl
 */
WebApp.prototype['startUrl'] = undefined;

/**
 * The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).
 * @member {String} title
 */
WebApp.prototype['title'] = undefined;

/**
 * The current version of the app. Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.
 * @member {String} versionCode
 */
WebApp.prototype['versionCode'] = undefined;

/**
 * The ID of the application. A string of the form \"app:<package name>\" where the package name always starts with the prefix \"com.google.enterprise.webapp.\" followed by a random id.
 * @member {String} webAppId
 */
WebApp.prototype['webAppId'] = undefined;





/**
 * Allowed values for the <code>displayMode</code> property.
 * @enum {String}
 * @readonly
 */
WebApp['DisplayModeEnum'] = {

    /**
     * value: "displayModeUnspecified"
     * @const
     */
    "displayModeUnspecified": "displayModeUnspecified",

    /**
     * value: "minimalUi"
     * @const
     */
    "minimalUi": "minimalUi",

    /**
     * value: "standalone"
     * @const
     */
    "standalone": "standalone",

    /**
     * value: "fullScreen"
     * @const
     */
    "fullScreen": "fullScreen"
};



export default WebApp;

