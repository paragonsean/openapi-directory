/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewDeviceEvent model module.
 * @module model/NewDeviceEvent
 * @version v1
 */
class NewDeviceEvent {
    /**
     * Constructs a new <code>NewDeviceEvent</code>.
     * An event generated when a new device is ready to be managed.
     * @alias module:model/NewDeviceEvent
     */
    constructor() { 
        
        NewDeviceEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewDeviceEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewDeviceEvent} obj Optional instance to populate.
     * @return {module:model/NewDeviceEvent} The populated <code>NewDeviceEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewDeviceEvent();

            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('dpcPackageName')) {
                obj['dpcPackageName'] = ApiClient.convertToType(data['dpcPackageName'], 'String');
            }
            if (data.hasOwnProperty('managementType')) {
                obj['managementType'] = ApiClient.convertToType(data['managementType'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewDeviceEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewDeviceEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['dpcPackageName'] && !(typeof data['dpcPackageName'] === 'string' || data['dpcPackageName'] instanceof String)) {
            throw new Error("Expected the field `dpcPackageName` to be a primitive type in the JSON string but got " + data['dpcPackageName']);
        }
        // ensure the json data is a string
        if (data['managementType'] && !(typeof data['managementType'] === 'string' || data['managementType'] instanceof String)) {
            throw new Error("Expected the field `managementType` to be a primitive type in the JSON string but got " + data['managementType']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The Android ID of the device. This field will always be present.
 * @member {String} deviceId
 */
NewDeviceEvent.prototype['deviceId'] = undefined;

/**
 * Policy app on the device.
 * @member {String} dpcPackageName
 */
NewDeviceEvent.prototype['dpcPackageName'] = undefined;

/**
 * Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device where the DPC is set as device owner, - \"managedProfile\", a device where the DPC is set as profile owner. 
 * @member {module:model/NewDeviceEvent.ManagementTypeEnum} managementType
 */
NewDeviceEvent.prototype['managementType'] = undefined;

/**
 * The ID of the user. This field will always be present.
 * @member {String} userId
 */
NewDeviceEvent.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>managementType</code> property.
 * @enum {String}
 * @readonly
 */
NewDeviceEvent['ManagementTypeEnum'] = {

    /**
     * value: "managedDevice"
     * @const
     */
    "managedDevice": "managedDevice",

    /**
     * value: "managedProfile"
     * @const
     */
    "managedProfile": "managedProfile"
};



export default NewDeviceEvent;

