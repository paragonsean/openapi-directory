/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyedAppState from './KeyedAppState';

/**
 * The AppState model module.
 * @module model/AppState
 * @version v1
 */
class AppState {
    /**
     * Constructs a new <code>AppState</code>.
     * List of states set by the app.
     * @alias module:model/AppState
     */
    constructor() { 
        
        AppState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppState} obj Optional instance to populate.
     * @return {module:model/AppState} The populated <code>AppState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppState();

            if (data.hasOwnProperty('keyedAppState')) {
                obj['keyedAppState'] = ApiClient.convertToType(data['keyedAppState'], [KeyedAppState]);
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppState</code>.
     */
    static validateJSON(data) {
        if (data['keyedAppState']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keyedAppState'])) {
                throw new Error("Expected the field `keyedAppState` to be an array in the JSON data but got " + data['keyedAppState']);
            }
            // validate the optional field `keyedAppState` (array)
            for (const item of data['keyedAppState']) {
                KeyedAppState.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }

        return true;
    }


}



/**
 * List of keyed app states. This field will always be present.
 * @member {Array.<module:model/KeyedAppState>} keyedAppState
 */
AppState.prototype['keyedAppState'] = undefined;

/**
 * The package name of the app. This field will always be present.
 * @member {String} packageName
 */
AppState.prototype['packageName'] = undefined;






export default AppState;

