/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MaintenanceWindow from './MaintenanceWindow';
import ProductPolicy from './ProductPolicy';

/**
 * The Policy model module.
 * @module model/Policy
 * @version v1
 */
class Policy {
    /**
     * Constructs a new <code>Policy</code>.
     * The device policy for a given managed device.
     * @alias module:model/Policy
     */
    constructor() { 
        
        Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Policy} obj Optional instance to populate.
     * @return {module:model/Policy} The populated <code>Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Policy();

            if (data.hasOwnProperty('autoUpdatePolicy')) {
                obj['autoUpdatePolicy'] = ApiClient.convertToType(data['autoUpdatePolicy'], 'String');
            }
            if (data.hasOwnProperty('deviceReportPolicy')) {
                obj['deviceReportPolicy'] = ApiClient.convertToType(data['deviceReportPolicy'], 'String');
            }
            if (data.hasOwnProperty('maintenanceWindow')) {
                obj['maintenanceWindow'] = MaintenanceWindow.constructFromObject(data['maintenanceWindow']);
            }
            if (data.hasOwnProperty('productAvailabilityPolicy')) {
                obj['productAvailabilityPolicy'] = ApiClient.convertToType(data['productAvailabilityPolicy'], 'String');
            }
            if (data.hasOwnProperty('productPolicy')) {
                obj['productPolicy'] = ApiClient.convertToType(data['productPolicy'], [ProductPolicy]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Policy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoUpdatePolicy'] && !(typeof data['autoUpdatePolicy'] === 'string' || data['autoUpdatePolicy'] instanceof String)) {
            throw new Error("Expected the field `autoUpdatePolicy` to be a primitive type in the JSON string but got " + data['autoUpdatePolicy']);
        }
        // ensure the json data is a string
        if (data['deviceReportPolicy'] && !(typeof data['deviceReportPolicy'] === 'string' || data['deviceReportPolicy'] instanceof String)) {
            throw new Error("Expected the field `deviceReportPolicy` to be a primitive type in the JSON string but got " + data['deviceReportPolicy']);
        }
        // validate the optional field `maintenanceWindow`
        if (data['maintenanceWindow']) { // data not null
          MaintenanceWindow.validateJSON(data['maintenanceWindow']);
        }
        // ensure the json data is a string
        if (data['productAvailabilityPolicy'] && !(typeof data['productAvailabilityPolicy'] === 'string' || data['productAvailabilityPolicy'] instanceof String)) {
            throw new Error("Expected the field `productAvailabilityPolicy` to be a primitive type in the JSON string but got " + data['productAvailabilityPolicy']);
        }
        if (data['productPolicy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productPolicy'])) {
                throw new Error("Expected the field `productPolicy` to be an array in the JSON data but got " + data['productPolicy']);
            }
            // validate the optional field `productPolicy` (array)
            for (const item of data['productPolicy']) {
                ProductPolicy.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Controls when automatic app updates on the device can be applied. Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, autoUpdatePolicy has no effect. \"choiceToTheUser\" allows the device's user to configure the app update policy. \"always\" enables auto updates. \"never\" disables auto updates. \"wifiOnly\" enables auto updates only when the device is connected to wifi.
 * @member {module:model/Policy.AutoUpdatePolicyEnum} autoUpdatePolicy
 */
Policy.prototype['autoUpdatePolicy'] = undefined;

/**
 * Whether the device reports app states to the EMM. The default value is \"deviceReportDisabled\".
 * @member {module:model/Policy.DeviceReportPolicyEnum} deviceReportPolicy
 */
Policy.prototype['deviceReportPolicy'] = undefined;

/**
 * @member {module:model/MaintenanceWindow} maintenanceWindow
 */
Policy.prototype['maintenanceWindow'] = undefined;

/**
 * The availability granted to the device for the specified products. \"all\" gives the device access to all products, regardless of approval status. \"all\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks. \"whitelist\" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.
 * @member {module:model/Policy.ProductAvailabilityPolicyEnum} productAvailabilityPolicy
 */
Policy.prototype['productAvailabilityPolicy'] = undefined;

/**
 * The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.
 * @member {Array.<module:model/ProductPolicy>} productPolicy
 */
Policy.prototype['productPolicy'] = undefined;





/**
 * Allowed values for the <code>autoUpdatePolicy</code> property.
 * @enum {String}
 * @readonly
 */
Policy['AutoUpdatePolicyEnum'] = {

    /**
     * value: "autoUpdatePolicyUnspecified"
     * @const
     */
    "autoUpdatePolicyUnspecified": "autoUpdatePolicyUnspecified",

    /**
     * value: "choiceToTheUser"
     * @const
     */
    "choiceToTheUser": "choiceToTheUser",

    /**
     * value: "never"
     * @const
     */
    "never": "never",

    /**
     * value: "wifiOnly"
     * @const
     */
    "wifiOnly": "wifiOnly",

    /**
     * value: "always"
     * @const
     */
    "always": "always"
};


/**
 * Allowed values for the <code>deviceReportPolicy</code> property.
 * @enum {String}
 * @readonly
 */
Policy['DeviceReportPolicyEnum'] = {

    /**
     * value: "deviceReportPolicyUnspecified"
     * @const
     */
    "deviceReportPolicyUnspecified": "deviceReportPolicyUnspecified",

    /**
     * value: "deviceReportDisabled"
     * @const
     */
    "deviceReportDisabled": "deviceReportDisabled",

    /**
     * value: "deviceReportEnabled"
     * @const
     */
    "deviceReportEnabled": "deviceReportEnabled"
};


/**
 * Allowed values for the <code>productAvailabilityPolicy</code> property.
 * @enum {String}
 * @readonly
 */
Policy['ProductAvailabilityPolicyEnum'] = {

    /**
     * value: "productAvailabilityPolicyUnspecified"
     * @const
     */
    "productAvailabilityPolicyUnspecified": "productAvailabilityPolicyUnspecified",

    /**
     * value: "whitelist"
     * @const
     */
    "whitelist": "whitelist",

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};



export default Policy;

