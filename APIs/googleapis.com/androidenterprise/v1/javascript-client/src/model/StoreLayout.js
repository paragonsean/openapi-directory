/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StoreLayout model module.
 * @module model/StoreLayout
 * @version v1
 */
class StoreLayout {
    /**
     * Constructs a new <code>StoreLayout</code>.
     * General setting for the managed Google Play store layout, currently only specifying the page to display the first time the store is opened.
     * @alias module:model/StoreLayout
     */
    constructor() { 
        
        StoreLayout.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoreLayout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoreLayout} obj Optional instance to populate.
     * @return {module:model/StoreLayout} The populated <code>StoreLayout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreLayout();

            if (data.hasOwnProperty('homepageId')) {
                obj['homepageId'] = ApiClient.convertToType(data['homepageId'], 'String');
            }
            if (data.hasOwnProperty('storeLayoutType')) {
                obj['storeLayoutType'] = ApiClient.convertToType(data['storeLayoutType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoreLayout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoreLayout</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['homepageId'] && !(typeof data['homepageId'] === 'string' || data['homepageId'] instanceof String)) {
            throw new Error("Expected the field `homepageId` to be a primitive type in the JSON string but got " + data['homepageId']);
        }
        // ensure the json data is a string
        if (data['storeLayoutType'] && !(typeof data['storeLayoutType'] === 'string' || data['storeLayoutType'] instanceof String)) {
            throw new Error("Expected the field `storeLayoutType` to be a primitive type in the JSON string but got " + data['storeLayoutType']);
        }

        return true;
    }


}



/**
 * The ID of the store page to be used as the homepage. The homepage is the first page shown in the managed Google Play Store. Not specifying a homepage is equivalent to setting the store layout type to \"basic\".
 * @member {String} homepageId
 */
StoreLayout.prototype['homepageId'] = undefined;

/**
 * The store layout type. By default, this value is set to \"basic\" if the homepageId field is not set, and to \"custom\" otherwise. If set to \"basic\", the layout will consist of all approved apps that have been whitelisted for the user.
 * @member {module:model/StoreLayout.StoreLayoutTypeEnum} storeLayoutType
 */
StoreLayout.prototype['storeLayoutType'] = undefined;





/**
 * Allowed values for the <code>storeLayoutType</code> property.
 * @enum {String}
 * @readonly
 */
StoreLayout['StoreLayoutTypeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default StoreLayout;

