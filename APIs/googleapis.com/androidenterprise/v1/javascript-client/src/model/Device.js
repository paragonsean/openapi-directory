/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceReport from './DeviceReport';
import Policy from './Policy';

/**
 * The Device model module.
 * @module model/Device
 * @version v1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * A Devices resource represents a mobile device managed by the EMM and belonging to a specific enterprise user.
     * @alias module:model/Device
     */
    constructor() { 
        
        Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('androidId')) {
                obj['androidId'] = ApiClient.convertToType(data['androidId'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('latestBuildFingerprint')) {
                obj['latestBuildFingerprint'] = ApiClient.convertToType(data['latestBuildFingerprint'], 'String');
            }
            if (data.hasOwnProperty('maker')) {
                obj['maker'] = ApiClient.convertToType(data['maker'], 'String');
            }
            if (data.hasOwnProperty('managementType')) {
                obj['managementType'] = ApiClient.convertToType(data['managementType'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = Policy.constructFromObject(data['policy']);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('report')) {
                obj['report'] = DeviceReport.constructFromObject(data['report']);
            }
            if (data.hasOwnProperty('retailBrand')) {
                obj['retailBrand'] = ApiClient.convertToType(data['retailBrand'], 'String');
            }
            if (data.hasOwnProperty('sdkVersion')) {
                obj['sdkVersion'] = ApiClient.convertToType(data['sdkVersion'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['androidId'] && !(typeof data['androidId'] === 'string' || data['androidId'] instanceof String)) {
            throw new Error("Expected the field `androidId` to be a primitive type in the JSON string but got " + data['androidId']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['latestBuildFingerprint'] && !(typeof data['latestBuildFingerprint'] === 'string' || data['latestBuildFingerprint'] instanceof String)) {
            throw new Error("Expected the field `latestBuildFingerprint` to be a primitive type in the JSON string but got " + data['latestBuildFingerprint']);
        }
        // ensure the json data is a string
        if (data['maker'] && !(typeof data['maker'] === 'string' || data['maker'] instanceof String)) {
            throw new Error("Expected the field `maker` to be a primitive type in the JSON string but got " + data['maker']);
        }
        // ensure the json data is a string
        if (data['managementType'] && !(typeof data['managementType'] === 'string' || data['managementType'] instanceof String)) {
            throw new Error("Expected the field `managementType` to be a primitive type in the JSON string but got " + data['managementType']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // validate the optional field `policy`
        if (data['policy']) { // data not null
          Policy.validateJSON(data['policy']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // validate the optional field `report`
        if (data['report']) { // data not null
          DeviceReport.validateJSON(data['report']);
        }
        // ensure the json data is a string
        if (data['retailBrand'] && !(typeof data['retailBrand'] === 'string' || data['retailBrand'] instanceof String)) {
            throw new Error("Expected the field `retailBrand` to be a primitive type in the JSON string but got " + data['retailBrand']);
        }

        return true;
    }


}



/**
 * The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, \"123456789abcdef0\".
 * @member {String} androidId
 */
Device.prototype['androidId'] = undefined;

/**
 * The internal hardware codename of the device. This comes from android.os.Build.DEVICE. (field named \"device\" per logs/wireless/android/android_checkin.proto)
 * @member {String} device
 */
Device.prototype['device'] = undefined;

/**
 * The build fingerprint of the device if known.
 * @member {String} latestBuildFingerprint
 */
Device.prototype['latestBuildFingerprint'] = undefined;

/**
 * The manufacturer of the device. This comes from android.os.Build.MANUFACTURER.
 * @member {String} maker
 */
Device.prototype['maker'] = undefined;

/**
 * Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device that has the EMM's device policy controller (DPC) as the device owner. - \"managedProfile\", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. - \"containerApp\", no longer used (deprecated). - \"unmanagedProfile\", a device that has been allowed (by the domain's admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC. 
 * @member {module:model/Device.ManagementTypeEnum} managementType
 */
Device.prototype['managementType'] = undefined;

/**
 * The model name of the device. This comes from android.os.Build.MODEL.
 * @member {String} model
 */
Device.prototype['model'] = undefined;

/**
 * @member {module:model/Policy} policy
 */
Device.prototype['policy'] = undefined;

/**
 * The product name of the device. This comes from android.os.Build.PRODUCT.
 * @member {String} product
 */
Device.prototype['product'] = undefined;

/**
 * @member {module:model/DeviceReport} report
 */
Device.prototype['report'] = undefined;

/**
 * Retail brand for the device, if set. See android.os.Build.BRAND
 * @member {String} retailBrand
 */
Device.prototype['retailBrand'] = undefined;

/**
 * API compatibility version.
 * @member {Number} sdkVersion
 */
Device.prototype['sdkVersion'] = undefined;





/**
 * Allowed values for the <code>managementType</code> property.
 * @enum {String}
 * @readonly
 */
Device['ManagementTypeEnum'] = {

    /**
     * value: "managedDevice"
     * @const
     */
    "managedDevice": "managedDevice",

    /**
     * value: "managedProfile"
     * @const
     */
    "managedProfile": "managedProfile",

    /**
     * value: "containerApp"
     * @const
     */
    "containerApp": "containerApp",

    /**
     * value: "unmanagedProfile"
     * @const
     */
    "unmanagedProfile": "unmanagedProfile"
};



export default Device;

