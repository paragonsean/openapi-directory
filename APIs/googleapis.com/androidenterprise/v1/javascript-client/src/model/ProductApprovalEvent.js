/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductApprovalEvent model module.
 * @module model/ProductApprovalEvent
 * @version v1
 */
class ProductApprovalEvent {
    /**
     * Constructs a new <code>ProductApprovalEvent</code>.
     * An event generated when a product&#39;s approval status is changed.
     * @alias module:model/ProductApprovalEvent
     */
    constructor() { 
        
        ProductApprovalEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductApprovalEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductApprovalEvent} obj Optional instance to populate.
     * @return {module:model/ProductApprovalEvent} The populated <code>ProductApprovalEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductApprovalEvent();

            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductApprovalEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductApprovalEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['approved'] && !(typeof data['approved'] === 'string' || data['approved'] instanceof String)) {
            throw new Error("Expected the field `approved` to be a primitive type in the JSON string but got " + data['approved']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }

        return true;
    }


}



/**
 * Whether the product was approved or unapproved. This field will always be present.
 * @member {module:model/ProductApprovalEvent.ApprovedEnum} approved
 */
ProductApprovalEvent.prototype['approved'] = undefined;

/**
 * The id of the product (e.g. \"app:com.google.android.gm\") for which the approval status has changed. This field will always be present.
 * @member {String} productId
 */
ProductApprovalEvent.prototype['productId'] = undefined;





/**
 * Allowed values for the <code>approved</code> property.
 * @enum {String}
 * @readonly
 */
ProductApprovalEvent['ApprovedEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "unapproved"
     * @const
     */
    "unapproved": "unapproved"
};



export default ProductApprovalEvent;

