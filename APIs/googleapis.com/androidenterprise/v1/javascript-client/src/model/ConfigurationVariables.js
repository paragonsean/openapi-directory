/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VariableSet from './VariableSet';

/**
 * The ConfigurationVariables model module.
 * @module model/ConfigurationVariables
 * @version v1
 */
class ConfigurationVariables {
    /**
     * Constructs a new <code>ConfigurationVariables</code>.
     * A configuration variables resource contains the managed configuration settings ID to be applied to a single user, as well as the variable set that is attributed to the user. The variable set will be used to replace placeholders in the managed configuration settings.
     * @alias module:model/ConfigurationVariables
     */
    constructor() { 
        
        ConfigurationVariables.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigurationVariables</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigurationVariables} obj Optional instance to populate.
     * @return {module:model/ConfigurationVariables} The populated <code>ConfigurationVariables</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigurationVariables();

            if (data.hasOwnProperty('mcmId')) {
                obj['mcmId'] = ApiClient.convertToType(data['mcmId'], 'String');
            }
            if (data.hasOwnProperty('variableSet')) {
                obj['variableSet'] = ApiClient.convertToType(data['variableSet'], [VariableSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigurationVariables</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigurationVariables</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mcmId'] && !(typeof data['mcmId'] === 'string' || data['mcmId'] instanceof String)) {
            throw new Error("Expected the field `mcmId` to be a primitive type in the JSON string but got " + data['mcmId']);
        }
        if (data['variableSet']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variableSet'])) {
                throw new Error("Expected the field `variableSet` to be an array in the JSON data but got " + data['variableSet']);
            }
            // validate the optional field `variableSet` (array)
            for (const item of data['variableSet']) {
                VariableSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID of the managed configurations settings.
 * @member {String} mcmId
 */
ConfigurationVariables.prototype['mcmId'] = undefined;

/**
 * The variable set that is attributed to the user.
 * @member {Array.<module:model/VariableSet>} variableSet
 */
ConfigurationVariables.prototype['variableSet'] = undefined;






export default ConfigurationVariables;

