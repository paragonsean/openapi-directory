/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupLicense model module.
 * @module model/GroupLicense
 * @version v1
 */
class GroupLicense {
    /**
     * Constructs a new <code>GroupLicense</code>.
     * Group license objects allow you to keep track of licenses (called entitlements) for both free and paid apps. For a free app, a group license is created when an enterprise admin first approves the product in Google Play or when the first entitlement for the product is created for a user via the API. For a paid app, a group license object is only created when an enterprise admin purchases the product in Google Play for the first time. Use the API to query group licenses. A Grouplicenses resource includes the total number of licenses purchased (paid apps only) and the total number of licenses currently in use. In other words, the total number of Entitlements that exist for the product. Only one group license object is created per product and group license objects are never deleted. If a product is unapproved, its group license remains. This allows enterprise admins to keep track of any remaining entitlements for the product.
     * @alias module:model/GroupLicense
     */
    constructor() { 
        
        GroupLicense.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupLicense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupLicense} obj Optional instance to populate.
     * @return {module:model/GroupLicense} The populated <code>GroupLicense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupLicense();

            if (data.hasOwnProperty('acquisitionKind')) {
                obj['acquisitionKind'] = ApiClient.convertToType(data['acquisitionKind'], 'String');
            }
            if (data.hasOwnProperty('approval')) {
                obj['approval'] = ApiClient.convertToType(data['approval'], 'String');
            }
            if (data.hasOwnProperty('numProvisioned')) {
                obj['numProvisioned'] = ApiClient.convertToType(data['numProvisioned'], 'Number');
            }
            if (data.hasOwnProperty('numPurchased')) {
                obj['numPurchased'] = ApiClient.convertToType(data['numPurchased'], 'Number');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupLicense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupLicense</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquisitionKind'] && !(typeof data['acquisitionKind'] === 'string' || data['acquisitionKind'] instanceof String)) {
            throw new Error("Expected the field `acquisitionKind` to be a primitive type in the JSON string but got " + data['acquisitionKind']);
        }
        // ensure the json data is a string
        if (data['approval'] && !(typeof data['approval'] === 'string' || data['approval'] instanceof String)) {
            throw new Error("Expected the field `approval` to be a primitive type in the JSON string but got " + data['approval']);
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }

        return true;
    }


}



/**
 * How this group license was acquired. \"bulkPurchase\" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is \"free\" (for free products).
 * @member {module:model/GroupLicense.AcquisitionKindEnum} acquisitionKind
 */
GroupLicense.prototype['acquisitionKind'] = undefined;

/**
 * Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.
 * @member {module:model/GroupLicense.ApprovalEnum} approval
 */
GroupLicense.prototype['approval'] = undefined;

/**
 * The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.
 * @member {Number} numProvisioned
 */
GroupLicense.prototype['numProvisioned'] = undefined;

/**
 * The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is \"free\").
 * @member {Number} numPurchased
 */
GroupLicense.prototype['numPurchased'] = undefined;

/**
 * The permission approval status of the product. This field is only set if the product is approved. Possible states are: - \"currentApproved\", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - \"needsReapproval\", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - \"allCurrentAndFutureApproved\", the current permissions are approved and any future permission updates will be automatically approved without administrator review. 
 * @member {module:model/GroupLicense.PermissionsEnum} permissions
 */
GroupLicense.prototype['permissions'] = undefined;

/**
 * The ID of the product that the license is for. For example, \"app:com.google.android.gm\".
 * @member {String} productId
 */
GroupLicense.prototype['productId'] = undefined;





/**
 * Allowed values for the <code>acquisitionKind</code> property.
 * @enum {String}
 * @readonly
 */
GroupLicense['AcquisitionKindEnum'] = {

    /**
     * value: "free"
     * @const
     */
    "free": "free",

    /**
     * value: "bulkPurchase"
     * @const
     */
    "bulkPurchase": "bulkPurchase"
};


/**
 * Allowed values for the <code>approval</code> property.
 * @enum {String}
 * @readonly
 */
GroupLicense['ApprovalEnum'] = {

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "unapproved"
     * @const
     */
    "unapproved": "unapproved"
};


/**
 * Allowed values for the <code>permissions</code> property.
 * @enum {String}
 * @readonly
 */
GroupLicense['PermissionsEnum'] = {

    /**
     * value: "currentApproved"
     * @const
     */
    "currentApproved": "currentApproved",

    /**
     * value: "needsReapproval"
     * @const
     */
    "needsReapproval": "needsReapproval",

    /**
     * value: "allCurrentAndFutureApproved"
     * @const
     */
    "allCurrentAndFutureApproved": "allCurrentAndFutureApproved"
};



export default GroupLicense;

