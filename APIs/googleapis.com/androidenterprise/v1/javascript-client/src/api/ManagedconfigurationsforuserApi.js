/**
 * Google Play EMM API
 * Manages the deployment of apps to Android Enterprise devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagedConfiguration from '../model/ManagedConfiguration';
import ManagedConfigurationsForUserListResponse from '../model/ManagedConfigurationsForUserListResponse';

/**
* Managedconfigurationsforuser service.
* @module api/ManagedconfigurationsforuserApi
* @version v1
*/
export default class ManagedconfigurationsforuserApi {

    /**
    * Constructs a new ManagedconfigurationsforuserApi. 
    * @alias module:api/ManagedconfigurationsforuserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidenterpriseManagedconfigurationsforuserDelete operation.
     * @callback module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a per-user managed configuration for an app for the specified user.
     * @param {String} enterpriseId The ID of the enterprise.
     * @param {String} userId The ID of the user.
     * @param {String} managedConfigurationForUserId The ID of the managed configuration (a product ID), e.g. \"app:com.google.android.gm\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidenterpriseManagedconfigurationsforuserDelete(enterpriseId, userId, managedConfigurationForUserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling androidenterpriseManagedconfigurationsforuserDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling androidenterpriseManagedconfigurationsforuserDelete");
      }
      // verify the required parameter 'managedConfigurationForUserId' is set
      if (managedConfigurationForUserId === undefined || managedConfigurationForUserId === null) {
        throw new Error("Missing the required parameter 'managedConfigurationForUserId' when calling androidenterpriseManagedconfigurationsforuserDelete");
      }

      let pathParams = {
        'enterpriseId': enterpriseId,
        'userId': userId,
        'managedConfigurationForUserId': managedConfigurationForUserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidenterpriseManagedconfigurationsforuserGet operation.
     * @callback module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves details of a per-user managed configuration for an app for the specified user.
     * @param {String} enterpriseId The ID of the enterprise.
     * @param {String} userId The ID of the user.
     * @param {String} managedConfigurationForUserId The ID of the managed configuration (a product ID), e.g. \"app:com.google.android.gm\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedConfiguration}
     */
    androidenterpriseManagedconfigurationsforuserGet(enterpriseId, userId, managedConfigurationForUserId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling androidenterpriseManagedconfigurationsforuserGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling androidenterpriseManagedconfigurationsforuserGet");
      }
      // verify the required parameter 'managedConfigurationForUserId' is set
      if (managedConfigurationForUserId === undefined || managedConfigurationForUserId === null) {
        throw new Error("Missing the required parameter 'managedConfigurationForUserId' when calling androidenterpriseManagedconfigurationsforuserGet");
      }

      let pathParams = {
        'enterpriseId': enterpriseId,
        'userId': userId,
        'managedConfigurationForUserId': managedConfigurationForUserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedConfiguration;
      return this.apiClient.callApi(
        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidenterpriseManagedconfigurationsforuserList operation.
     * @callback module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedConfigurationsForUserListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the per-user managed configurations for the specified user. Only the ID is set.
     * @param {String} enterpriseId The ID of the enterprise.
     * @param {String} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedConfigurationsForUserListResponse}
     */
    androidenterpriseManagedconfigurationsforuserList(enterpriseId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling androidenterpriseManagedconfigurationsforuserList");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling androidenterpriseManagedconfigurationsforuserList");
      }

      let pathParams = {
        'enterpriseId': enterpriseId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedConfigurationsForUserListResponse;
      return this.apiClient.callApi(
        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidenterpriseManagedconfigurationsforuserUpdate operation.
     * @callback module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds or updates the managed configuration settings for an app for the specified user. If you support the Managed configurations iframe, you can apply managed configurations to a user by specifying an mcmId and its associated configuration variables (if any) in the request. Alternatively, all EMMs can apply managed configurations by passing a list of managed properties.
     * @param {String} enterpriseId The ID of the enterprise.
     * @param {String} userId The ID of the user.
     * @param {String} managedConfigurationForUserId The ID of the managed configuration (a product ID), e.g. \"app:com.google.android.gm\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ManagedConfiguration} [managedConfiguration] 
     * @param {module:api/ManagedconfigurationsforuserApi~androidenterpriseManagedconfigurationsforuserUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedConfiguration}
     */
    androidenterpriseManagedconfigurationsforuserUpdate(enterpriseId, userId, managedConfigurationForUserId, opts, callback) {
      opts = opts || {};
      let postBody = opts['managedConfiguration'];
      // verify the required parameter 'enterpriseId' is set
      if (enterpriseId === undefined || enterpriseId === null) {
        throw new Error("Missing the required parameter 'enterpriseId' when calling androidenterpriseManagedconfigurationsforuserUpdate");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling androidenterpriseManagedconfigurationsforuserUpdate");
      }
      // verify the required parameter 'managedConfigurationForUserId' is set
      if (managedConfigurationForUserId === undefined || managedConfigurationForUserId === null) {
        throw new Error("Missing the required parameter 'managedConfigurationForUserId' when calling androidenterpriseManagedconfigurationsforuserUpdate");
      }

      let pathParams = {
        'enterpriseId': enterpriseId,
        'userId': userId,
        'managedConfigurationForUserId': managedConfigurationForUserId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagedConfiguration;
      return this.apiClient.callApi(
        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
