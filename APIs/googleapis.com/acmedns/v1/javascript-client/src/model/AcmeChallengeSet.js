/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcmeTxtRecord from './AcmeTxtRecord';

/**
 * The AcmeChallengeSet model module.
 * @module model/AcmeChallengeSet
 * @version v1
 */
class AcmeChallengeSet {
    /**
     * Constructs a new <code>AcmeChallengeSet</code>.
     * The up-to-date ACME challenge set on a domain for an RPC. This contains all of the ACME TXT records that exist on the domain.
     * @alias module:model/AcmeChallengeSet
     */
    constructor() { 
        
        AcmeChallengeSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AcmeChallengeSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcmeChallengeSet} obj Optional instance to populate.
     * @return {module:model/AcmeChallengeSet} The populated <code>AcmeChallengeSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcmeChallengeSet();

            if (data.hasOwnProperty('record')) {
                obj['record'] = ApiClient.convertToType(data['record'], [AcmeTxtRecord]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcmeChallengeSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcmeChallengeSet</code>.
     */
    static validateJSON(data) {
        if (data['record']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['record'])) {
                throw new Error("Expected the field `record` to be an array in the JSON data but got " + data['record']);
            }
            // validate the optional field `record` (array)
            for (const item of data['record']) {
                AcmeTxtRecord.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ACME challenges on the requested domain represented as individual TXT records.
 * @member {Array.<module:model/AcmeTxtRecord>} record
 */
AcmeChallengeSet.prototype['record'] = undefined;






export default AcmeChallengeSet;

