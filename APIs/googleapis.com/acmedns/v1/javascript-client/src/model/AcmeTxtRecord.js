/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AcmeTxtRecord model module.
 * @module model/AcmeTxtRecord
 * @version v1
 */
class AcmeTxtRecord {
    /**
     * Constructs a new <code>AcmeTxtRecord</code>.
     * The TXT record message that represents an ACME DNS-01 challenge.
     * @alias module:model/AcmeTxtRecord
     */
    constructor() { 
        
        AcmeTxtRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AcmeTxtRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcmeTxtRecord} obj Optional instance to populate.
     * @return {module:model/AcmeTxtRecord} The populated <code>AcmeTxtRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcmeTxtRecord();

            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcmeTxtRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcmeTxtRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['digest'] && !(typeof data['digest'] === 'string' || data['digest'] instanceof String)) {
            throw new Error("Expected the field `digest` to be a primitive type in the JSON string but got " + data['digest']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT record data entry.
 * @member {String} digest
 */
AcmeTxtRecord.prototype['digest'] = undefined;

/**
 * The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.
 * @member {String} fqdn
 */
AcmeTxtRecord.prototype['fqdn'] = undefined;

/**
 * Output only. The time when this record was last updated. This will be in UTC time.
 * @member {String} updateTime
 */
AcmeTxtRecord.prototype['updateTime'] = undefined;






export default AcmeTxtRecord;

