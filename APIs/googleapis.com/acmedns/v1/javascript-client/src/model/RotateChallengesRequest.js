/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcmeTxtRecord from './AcmeTxtRecord';

/**
 * The RotateChallengesRequest model module.
 * @module model/RotateChallengesRequest
 * @version v1
 */
class RotateChallengesRequest {
    /**
     * Constructs a new <code>RotateChallengesRequest</code>.
     * The request message for the RotateChallenges RPC. Requires an access token, a root domain, and either records_to_add or records_to_remove to be populated. Records may be set for multiple subdomains at once to support SAN requests for multiple subdomains in a single domain. By default, ACME TXT record challenges that are older than 30 days will be removed. Set &#x60;keep_expired_records&#x60; to false if this behavior is undesired. There is a record maximum of 100 records per domain including expired records. Any request sent that would exceed this maximum will result in a FAILED_PRECONDITION error. NEXT ID: 6
     * @alias module:model/RotateChallengesRequest
     */
    constructor() { 
        
        RotateChallengesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RotateChallengesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RotateChallengesRequest} obj Optional instance to populate.
     * @return {module:model/RotateChallengesRequest} The populated <code>RotateChallengesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RotateChallengesRequest();

            if (data.hasOwnProperty('accessToken')) {
                obj['accessToken'] = ApiClient.convertToType(data['accessToken'], 'Blob');
            }
            if (data.hasOwnProperty('keepExpiredRecords')) {
                obj['keepExpiredRecords'] = ApiClient.convertToType(data['keepExpiredRecords'], 'Boolean');
            }
            if (data.hasOwnProperty('recordsToAdd')) {
                obj['recordsToAdd'] = ApiClient.convertToType(data['recordsToAdd'], [AcmeTxtRecord]);
            }
            if (data.hasOwnProperty('recordsToRemove')) {
                obj['recordsToRemove'] = ApiClient.convertToType(data['recordsToRemove'], [AcmeTxtRecord]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RotateChallengesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RotateChallengesRequest</code>.
     */
    static validateJSON(data) {
        if (data['recordsToAdd']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recordsToAdd'])) {
                throw new Error("Expected the field `recordsToAdd` to be an array in the JSON data but got " + data['recordsToAdd']);
            }
            // validate the optional field `recordsToAdd` (array)
            for (const item of data['recordsToAdd']) {
                AcmeTxtRecord.validateJSON(item);
            };
        }
        if (data['recordsToRemove']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recordsToRemove'])) {
                throw new Error("Expected the field `recordsToRemove` to be an array in the JSON data but got " + data['recordsToRemove']);
            }
            // validate the optional field `recordsToRemove` (array)
            for (const item of data['recordsToRemove']) {
                AcmeTxtRecord.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain.
 * @member {Blob} accessToken
 */
RotateChallengesRequest.prototype['accessToken'] = undefined;

/**
 * Keep records older than 30 days that were used for previous requests.
 * @member {Boolean} keepExpiredRecords
 */
RotateChallengesRequest.prototype['keepExpiredRecords'] = undefined;

/**
 * ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.
 * @member {Array.<module:model/AcmeTxtRecord>} recordsToAdd
 */
RotateChallengesRequest.prototype['recordsToAdd'] = undefined;

/**
 * ACME TXT record challenges to remove.
 * @member {Array.<module:model/AcmeTxtRecord>} recordsToRemove
 */
RotateChallengesRequest.prototype['recordsToRemove'] = undefined;






export default RotateChallengesRequest;

