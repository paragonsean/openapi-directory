/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotateChallengesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotateChallengesRequest::OAIRotateChallengesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotateChallengesRequest::OAIRotateChallengesRequest() {
    this->initializeModel();
}

OAIRotateChallengesRequest::~OAIRotateChallengesRequest() {}

void OAIRotateChallengesRequest::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_keep_expired_records_isSet = false;
    m_keep_expired_records_isValid = false;

    m_records_to_add_isSet = false;
    m_records_to_add_isValid = false;

    m_records_to_remove_isSet = false;
    m_records_to_remove_isValid = false;
}

void OAIRotateChallengesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotateChallengesRequest::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_keep_expired_records_isValid = ::OpenAPI::fromJsonValue(m_keep_expired_records, json[QString("keepExpiredRecords")]);
    m_keep_expired_records_isSet = !json[QString("keepExpiredRecords")].isNull() && m_keep_expired_records_isValid;

    m_records_to_add_isValid = ::OpenAPI::fromJsonValue(m_records_to_add, json[QString("recordsToAdd")]);
    m_records_to_add_isSet = !json[QString("recordsToAdd")].isNull() && m_records_to_add_isValid;

    m_records_to_remove_isValid = ::OpenAPI::fromJsonValue(m_records_to_remove, json[QString("recordsToRemove")]);
    m_records_to_remove_isSet = !json[QString("recordsToRemove")].isNull() && m_records_to_remove_isValid;
}

QString OAIRotateChallengesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotateChallengesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_keep_expired_records_isSet) {
        obj.insert(QString("keepExpiredRecords"), ::OpenAPI::toJsonValue(m_keep_expired_records));
    }
    if (m_records_to_add.size() > 0) {
        obj.insert(QString("recordsToAdd"), ::OpenAPI::toJsonValue(m_records_to_add));
    }
    if (m_records_to_remove.size() > 0) {
        obj.insert(QString("recordsToRemove"), ::OpenAPI::toJsonValue(m_records_to_remove));
    }
    return obj;
}

QByteArray OAIRotateChallengesRequest::getAccessToken() const {
    return m_access_token;
}
void OAIRotateChallengesRequest::setAccessToken(const QByteArray &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIRotateChallengesRequest::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIRotateChallengesRequest::is_access_token_Valid() const{
    return m_access_token_isValid;
}

bool OAIRotateChallengesRequest::isKeepExpiredRecords() const {
    return m_keep_expired_records;
}
void OAIRotateChallengesRequest::setKeepExpiredRecords(const bool &keep_expired_records) {
    m_keep_expired_records = keep_expired_records;
    m_keep_expired_records_isSet = true;
}

bool OAIRotateChallengesRequest::is_keep_expired_records_Set() const{
    return m_keep_expired_records_isSet;
}

bool OAIRotateChallengesRequest::is_keep_expired_records_Valid() const{
    return m_keep_expired_records_isValid;
}

QList<OAIAcmeTxtRecord> OAIRotateChallengesRequest::getRecordsToAdd() const {
    return m_records_to_add;
}
void OAIRotateChallengesRequest::setRecordsToAdd(const QList<OAIAcmeTxtRecord> &records_to_add) {
    m_records_to_add = records_to_add;
    m_records_to_add_isSet = true;
}

bool OAIRotateChallengesRequest::is_records_to_add_Set() const{
    return m_records_to_add_isSet;
}

bool OAIRotateChallengesRequest::is_records_to_add_Valid() const{
    return m_records_to_add_isValid;
}

QList<OAIAcmeTxtRecord> OAIRotateChallengesRequest::getRecordsToRemove() const {
    return m_records_to_remove;
}
void OAIRotateChallengesRequest::setRecordsToRemove(const QList<OAIAcmeTxtRecord> &records_to_remove) {
    m_records_to_remove = records_to_remove;
    m_records_to_remove_isSet = true;
}

bool OAIRotateChallengesRequest::is_records_to_remove_Set() const{
    return m_records_to_remove_isSet;
}

bool OAIRotateChallengesRequest::is_records_to_remove_Valid() const{
    return m_records_to_remove_isValid;
}

bool OAIRotateChallengesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_expired_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_to_add.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_to_remove.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotateChallengesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
