/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcmeTxtRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcmeTxtRecord::OAIAcmeTxtRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcmeTxtRecord::OAIAcmeTxtRecord() {
    this->initializeModel();
}

OAIAcmeTxtRecord::~OAIAcmeTxtRecord() {}

void OAIAcmeTxtRecord::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIAcmeTxtRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcmeTxtRecord::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIAcmeTxtRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcmeTxtRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIAcmeTxtRecord::getDigest() const {
    return m_digest;
}
void OAIAcmeTxtRecord::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIAcmeTxtRecord::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIAcmeTxtRecord::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIAcmeTxtRecord::getFqdn() const {
    return m_fqdn;
}
void OAIAcmeTxtRecord::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIAcmeTxtRecord::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIAcmeTxtRecord::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIAcmeTxtRecord::getUpdateTime() const {
    return m_update_time;
}
void OAIAcmeTxtRecord::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAcmeTxtRecord::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAcmeTxtRecord::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIAcmeTxtRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcmeTxtRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
