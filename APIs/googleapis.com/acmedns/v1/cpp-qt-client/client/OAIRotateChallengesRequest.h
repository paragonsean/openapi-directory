/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRotateChallengesRequest.h
 *
 * The request message for the RotateChallenges RPC. Requires an access token, a root domain, and either records_to_add or records_to_remove to be populated. Records may be set for multiple subdomains at once to support SAN requests for multiple subdomains in a single domain. By default, ACME TXT record challenges that are older than 30 days will be removed. Set &#x60;keep_expired_records&#x60; to false if this behavior is undesired. There is a record maximum of 100 records per domain including expired records. Any request sent that would exceed this maximum will result in a FAILED_PRECONDITION error. NEXT ID: 6
 */

#ifndef OAIRotateChallengesRequest_H
#define OAIRotateChallengesRequest_H

#include <QJsonObject>

#include "OAIAcmeTxtRecord.h"
#include <QByteArray>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAcmeTxtRecord;

class OAIRotateChallengesRequest : public OAIObject {
public:
    OAIRotateChallengesRequest();
    OAIRotateChallengesRequest(QString json);
    ~OAIRotateChallengesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getAccessToken() const;
    void setAccessToken(const QByteArray &access_token);
    bool is_access_token_Set() const;
    bool is_access_token_Valid() const;

    bool isKeepExpiredRecords() const;
    void setKeepExpiredRecords(const bool &keep_expired_records);
    bool is_keep_expired_records_Set() const;
    bool is_keep_expired_records_Valid() const;

    QList<OAIAcmeTxtRecord> getRecordsToAdd() const;
    void setRecordsToAdd(const QList<OAIAcmeTxtRecord> &records_to_add);
    bool is_records_to_add_Set() const;
    bool is_records_to_add_Valid() const;

    QList<OAIAcmeTxtRecord> getRecordsToRemove() const;
    void setRecordsToRemove(const QList<OAIAcmeTxtRecord> &records_to_remove);
    bool is_records_to_remove_Set() const;
    bool is_records_to_remove_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_access_token;
    bool m_access_token_isSet;
    bool m_access_token_isValid;

    bool m_keep_expired_records;
    bool m_keep_expired_records_isSet;
    bool m_keep_expired_records_isValid;

    QList<OAIAcmeTxtRecord> m_records_to_add;
    bool m_records_to_add_isSet;
    bool m_records_to_add_isValid;

    QList<OAIAcmeTxtRecord> m_records_to_remove;
    bool m_records_to_remove_isSet;
    bool m_records_to_remove_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRotateChallengesRequest)

#endif // OAIRotateChallengesRequest_H
