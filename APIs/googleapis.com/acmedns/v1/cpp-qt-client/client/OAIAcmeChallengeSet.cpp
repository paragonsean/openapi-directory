/**
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcmeChallengeSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcmeChallengeSet::OAIAcmeChallengeSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcmeChallengeSet::OAIAcmeChallengeSet() {
    this->initializeModel();
}

OAIAcmeChallengeSet::~OAIAcmeChallengeSet() {}

void OAIAcmeChallengeSet::initializeModel() {

    m_record_isSet = false;
    m_record_isValid = false;
}

void OAIAcmeChallengeSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcmeChallengeSet::fromJsonObject(QJsonObject json) {

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("record")]);
    m_record_isSet = !json[QString("record")].isNull() && m_record_isValid;
}

QString OAIAcmeChallengeSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcmeChallengeSet::asJsonObject() const {
    QJsonObject obj;
    if (m_record.size() > 0) {
        obj.insert(QString("record"), ::OpenAPI::toJsonValue(m_record));
    }
    return obj;
}

QList<OAIAcmeTxtRecord> OAIAcmeChallengeSet::getRecord() const {
    return m_record;
}
void OAIAcmeChallengeSet::setRecord(const QList<OAIAcmeTxtRecord> &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAIAcmeChallengeSet::is_record_Set() const{
    return m_record_isSet;
}

bool OAIAcmeChallengeSet::is_record_Valid() const{
    return m_record_isValid;
}

bool OAIAcmeChallengeSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcmeChallengeSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
