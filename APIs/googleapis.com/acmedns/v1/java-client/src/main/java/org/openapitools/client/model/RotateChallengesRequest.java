/*
 * ACME DNS API
 * Google Domains ACME DNS API that allows users to complete ACME DNS-01 challenges for a domain.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcmeTxtRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for the RotateChallenges RPC. Requires an access token, a root domain, and either records_to_add or records_to_remove to be populated. Records may be set for multiple subdomains at once to support SAN requests for multiple subdomains in a single domain. By default, ACME TXT record challenges that are older than 30 days will be removed. Set &#x60;keep_expired_records&#x60; to false if this behavior is undesired. There is a record maximum of 100 records per domain including expired records. Any request sent that would exceed this maximum will result in a FAILED_PRECONDITION error. NEXT ID: 6
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:06.018144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RotateChallengesRequest {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private byte[] accessToken;

  public static final String SERIALIZED_NAME_KEEP_EXPIRED_RECORDS = "keepExpiredRecords";
  @SerializedName(SERIALIZED_NAME_KEEP_EXPIRED_RECORDS)
  private Boolean keepExpiredRecords;

  public static final String SERIALIZED_NAME_RECORDS_TO_ADD = "recordsToAdd";
  @SerializedName(SERIALIZED_NAME_RECORDS_TO_ADD)
  private List<AcmeTxtRecord> recordsToAdd = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDS_TO_REMOVE = "recordsToRemove";
  @SerializedName(SERIALIZED_NAME_RECORDS_TO_REMOVE)
  private List<AcmeTxtRecord> recordsToRemove = new ArrayList<>();

  public RotateChallengesRequest() {
  }

  public RotateChallengesRequest accessToken(byte[] accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain.
   * @return accessToken
   */
  @javax.annotation.Nullable
  public byte[] getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(byte[] accessToken) {
    this.accessToken = accessToken;
  }


  public RotateChallengesRequest keepExpiredRecords(Boolean keepExpiredRecords) {
    this.keepExpiredRecords = keepExpiredRecords;
    return this;
  }

  /**
   * Keep records older than 30 days that were used for previous requests.
   * @return keepExpiredRecords
   */
  @javax.annotation.Nullable
  public Boolean getKeepExpiredRecords() {
    return keepExpiredRecords;
  }

  public void setKeepExpiredRecords(Boolean keepExpiredRecords) {
    this.keepExpiredRecords = keepExpiredRecords;
  }


  public RotateChallengesRequest recordsToAdd(List<AcmeTxtRecord> recordsToAdd) {
    this.recordsToAdd = recordsToAdd;
    return this;
  }

  public RotateChallengesRequest addRecordsToAddItem(AcmeTxtRecord recordsToAddItem) {
    if (this.recordsToAdd == null) {
      this.recordsToAdd = new ArrayList<>();
    }
    this.recordsToAdd.add(recordsToAddItem);
    return this;
  }

  /**
   * ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.
   * @return recordsToAdd
   */
  @javax.annotation.Nullable
  public List<AcmeTxtRecord> getRecordsToAdd() {
    return recordsToAdd;
  }

  public void setRecordsToAdd(List<AcmeTxtRecord> recordsToAdd) {
    this.recordsToAdd = recordsToAdd;
  }


  public RotateChallengesRequest recordsToRemove(List<AcmeTxtRecord> recordsToRemove) {
    this.recordsToRemove = recordsToRemove;
    return this;
  }

  public RotateChallengesRequest addRecordsToRemoveItem(AcmeTxtRecord recordsToRemoveItem) {
    if (this.recordsToRemove == null) {
      this.recordsToRemove = new ArrayList<>();
    }
    this.recordsToRemove.add(recordsToRemoveItem);
    return this;
  }

  /**
   * ACME TXT record challenges to remove.
   * @return recordsToRemove
   */
  @javax.annotation.Nullable
  public List<AcmeTxtRecord> getRecordsToRemove() {
    return recordsToRemove;
  }

  public void setRecordsToRemove(List<AcmeTxtRecord> recordsToRemove) {
    this.recordsToRemove = recordsToRemove;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RotateChallengesRequest rotateChallengesRequest = (RotateChallengesRequest) o;
    return Arrays.equals(this.accessToken, rotateChallengesRequest.accessToken) &&
        Objects.equals(this.keepExpiredRecords, rotateChallengesRequest.keepExpiredRecords) &&
        Objects.equals(this.recordsToAdd, rotateChallengesRequest.recordsToAdd) &&
        Objects.equals(this.recordsToRemove, rotateChallengesRequest.recordsToRemove);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(accessToken), keepExpiredRecords, recordsToAdd, recordsToRemove);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RotateChallengesRequest {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    keepExpiredRecords: ").append(toIndentedString(keepExpiredRecords)).append("\n");
    sb.append("    recordsToAdd: ").append(toIndentedString(recordsToAdd)).append("\n");
    sb.append("    recordsToRemove: ").append(toIndentedString(recordsToRemove)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("keepExpiredRecords");
    openapiFields.add("recordsToAdd");
    openapiFields.add("recordsToRemove");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RotateChallengesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RotateChallengesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RotateChallengesRequest is not found in the empty JSON string", RotateChallengesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RotateChallengesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RotateChallengesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("recordsToAdd") != null && !jsonObj.get("recordsToAdd").isJsonNull()) {
        JsonArray jsonArrayrecordsToAdd = jsonObj.getAsJsonArray("recordsToAdd");
        if (jsonArrayrecordsToAdd != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordsToAdd").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordsToAdd` to be an array in the JSON string but got `%s`", jsonObj.get("recordsToAdd").toString()));
          }

          // validate the optional field `recordsToAdd` (array)
          for (int i = 0; i < jsonArrayrecordsToAdd.size(); i++) {
            AcmeTxtRecord.validateJsonElement(jsonArrayrecordsToAdd.get(i));
          };
        }
      }
      if (jsonObj.get("recordsToRemove") != null && !jsonObj.get("recordsToRemove").isJsonNull()) {
        JsonArray jsonArrayrecordsToRemove = jsonObj.getAsJsonArray("recordsToRemove");
        if (jsonArrayrecordsToRemove != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordsToRemove").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordsToRemove` to be an array in the JSON string but got `%s`", jsonObj.get("recordsToRemove").toString()));
          }

          // validate the optional field `recordsToRemove` (array)
          for (int i = 0; i < jsonArrayrecordsToRemove.size(); i++) {
            AcmeTxtRecord.validateJsonElement(jsonArrayrecordsToRemove.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RotateChallengesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RotateChallengesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RotateChallengesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RotateChallengesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RotateChallengesRequest>() {
           @Override
           public void write(JsonWriter out, RotateChallengesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RotateChallengesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RotateChallengesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RotateChallengesRequest
   * @throws IOException if the JSON string is invalid with respect to RotateChallengesRequest
   */
  public static RotateChallengesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RotateChallengesRequest.class);
  }

  /**
   * Convert an instance of RotateChallengesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

