# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acme_txt_record import AcmeTxtRecord
from openapi_server import util


class RotateChallengesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, keep_expired_records: bool=None, records_to_add: List[AcmeTxtRecord]=None, records_to_remove: List[AcmeTxtRecord]=None):
        """RotateChallengesRequest - a model defined in OpenAPI

        :param access_token: The access_token of this RotateChallengesRequest.
        :param keep_expired_records: The keep_expired_records of this RotateChallengesRequest.
        :param records_to_add: The records_to_add of this RotateChallengesRequest.
        :param records_to_remove: The records_to_remove of this RotateChallengesRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'keep_expired_records': bool,
            'records_to_add': List[AcmeTxtRecord],
            'records_to_remove': List[AcmeTxtRecord]
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'keep_expired_records': 'keepExpiredRecords',
            'records_to_add': 'recordsToAdd',
            'records_to_remove': 'recordsToRemove'
        }

        self._access_token = access_token
        self._keep_expired_records = keep_expired_records
        self._records_to_add = records_to_add
        self._records_to_remove = records_to_remove

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RotateChallengesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RotateChallengesRequest of this RotateChallengesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this RotateChallengesRequest.

        Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain.

        :return: The access_token of this RotateChallengesRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this RotateChallengesRequest.

        Required. ACME DNS access token. This is a base64 token secret that is procured from the Google Domains website. It authorizes ACME TXT record updates for a domain.

        :param access_token: The access_token of this RotateChallengesRequest.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def keep_expired_records(self):
        """Gets the keep_expired_records of this RotateChallengesRequest.

        Keep records older than 30 days that were used for previous requests.

        :return: The keep_expired_records of this RotateChallengesRequest.
        :rtype: bool
        """
        return self._keep_expired_records

    @keep_expired_records.setter
    def keep_expired_records(self, keep_expired_records):
        """Sets the keep_expired_records of this RotateChallengesRequest.

        Keep records older than 30 days that were used for previous requests.

        :param keep_expired_records: The keep_expired_records of this RotateChallengesRequest.
        :type keep_expired_records: bool
        """

        self._keep_expired_records = keep_expired_records

    @property
    def records_to_add(self):
        """Gets the records_to_add of this RotateChallengesRequest.

        ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.

        :return: The records_to_add of this RotateChallengesRequest.
        :rtype: List[AcmeTxtRecord]
        """
        return self._records_to_add

    @records_to_add.setter
    def records_to_add(self, records_to_add):
        """Sets the records_to_add of this RotateChallengesRequest.

        ACME TXT record challenges to add. Supports multiple challenges on the same FQDN.

        :param records_to_add: The records_to_add of this RotateChallengesRequest.
        :type records_to_add: List[AcmeTxtRecord]
        """

        self._records_to_add = records_to_add

    @property
    def records_to_remove(self):
        """Gets the records_to_remove of this RotateChallengesRequest.

        ACME TXT record challenges to remove.

        :return: The records_to_remove of this RotateChallengesRequest.
        :rtype: List[AcmeTxtRecord]
        """
        return self._records_to_remove

    @records_to_remove.setter
    def records_to_remove(self, records_to_remove):
        """Sets the records_to_remove of this RotateChallengesRequest.

        ACME TXT record challenges to remove.

        :param records_to_remove: The records_to_remove of this RotateChallengesRequest.
        :type records_to_remove: List[AcmeTxtRecord]
        """

        self._records_to_remove = records_to_remove
