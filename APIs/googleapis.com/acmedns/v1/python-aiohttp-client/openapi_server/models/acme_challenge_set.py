# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acme_txt_record import AcmeTxtRecord
from openapi_server import util


class AcmeChallengeSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record: List[AcmeTxtRecord]=None):
        """AcmeChallengeSet - a model defined in OpenAPI

        :param record: The record of this AcmeChallengeSet.
        """
        self.openapi_types = {
            'record': List[AcmeTxtRecord]
        }

        self.attribute_map = {
            'record': 'record'
        }

        self._record = record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcmeChallengeSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcmeChallengeSet of this AcmeChallengeSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record(self):
        """Gets the record of this AcmeChallengeSet.

        The ACME challenges on the requested domain represented as individual TXT records.

        :return: The record of this AcmeChallengeSet.
        :rtype: List[AcmeTxtRecord]
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this AcmeChallengeSet.

        The ACME challenges on the requested domain represented as individual TXT records.

        :param record: The record of this AcmeChallengeSet.
        :type record: List[AcmeTxtRecord]
        """

        self._record = record
