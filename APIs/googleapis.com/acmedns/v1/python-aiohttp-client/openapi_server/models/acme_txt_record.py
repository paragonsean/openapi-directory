# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcmeTxtRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None, fqdn: str=None, update_time: str=None):
        """AcmeTxtRecord - a model defined in OpenAPI

        :param digest: The digest of this AcmeTxtRecord.
        :param fqdn: The fqdn of this AcmeTxtRecord.
        :param update_time: The update_time of this AcmeTxtRecord.
        """
        self.openapi_types = {
            'digest': str,
            'fqdn': str,
            'update_time': str
        }

        self.attribute_map = {
            'digest': 'digest',
            'fqdn': 'fqdn',
            'update_time': 'updateTime'
        }

        self._digest = digest
        self._fqdn = fqdn
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcmeTxtRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcmeTxtRecord of this AcmeTxtRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this AcmeTxtRecord.

        Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT record data entry.

        :return: The digest of this AcmeTxtRecord.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this AcmeTxtRecord.

        Holds the ACME challenge data put in the TXT record. This will be checked to be a valid TXT record data entry.

        :param digest: The digest of this AcmeTxtRecord.
        :type digest: str
        """

        self._digest = digest

    @property
    def fqdn(self):
        """Gets the fqdn of this AcmeTxtRecord.

        The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.

        :return: The fqdn of this AcmeTxtRecord.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this AcmeTxtRecord.

        The domain/subdomain for the record. In a request, this MAY be Unicode or Punycode. In a response, this will be in Unicode. The fqdn MUST contain the root_domain field on the request.

        :param fqdn: The fqdn of this AcmeTxtRecord.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def update_time(self):
        """Gets the update_time of this AcmeTxtRecord.

        Output only. The time when this record was last updated. This will be in UTC time.

        :return: The update_time of this AcmeTxtRecord.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AcmeTxtRecord.

        Output only. The time when this record was last updated. This will be in UTC time.

        :param update_time: The update_time of this AcmeTxtRecord.
        :type update_time: str
        """

        self._update_time = update_time
