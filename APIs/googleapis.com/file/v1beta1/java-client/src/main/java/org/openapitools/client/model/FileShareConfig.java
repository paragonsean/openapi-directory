/*
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NfsExportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * File share configuration for the instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:18.454461-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileShareConfig {
  public static final String SERIALIZED_NAME_CAPACITY_GB = "capacityGb";
  @SerializedName(SERIALIZED_NAME_CAPACITY_GB)
  private String capacityGb;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NFS_EXPORT_OPTIONS = "nfsExportOptions";
  @SerializedName(SERIALIZED_NAME_NFS_EXPORT_OPTIONS)
  private List<NfsExportOptions> nfsExportOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_BACKUP = "sourceBackup";
  @SerializedName(SERIALIZED_NAME_SOURCE_BACKUP)
  private String sourceBackup;

  public FileShareConfig() {
  }

  public FileShareConfig capacityGb(String capacityGb) {
    this.capacityGb = capacityGb;
    return this;
  }

  /**
   * File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes.
   * @return capacityGb
   */
  @javax.annotation.Nullable
  public String getCapacityGb() {
    return capacityGb;
  }

  public void setCapacityGb(String capacityGb) {
    this.capacityGb = capacityGb;
  }


  public FileShareConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the file share. Must use 1-16 characters for the basic service tier and 1-63 characters for all other service tiers. Must use lowercase letters, numbers, or underscores &#x60;[a-z0-9_]&#x60;. Must start with a letter. Immutable.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FileShareConfig nfsExportOptions(List<NfsExportOptions> nfsExportOptions) {
    this.nfsExportOptions = nfsExportOptions;
    return this;
  }

  public FileShareConfig addNfsExportOptionsItem(NfsExportOptions nfsExportOptionsItem) {
    if (this.nfsExportOptions == null) {
      this.nfsExportOptions = new ArrayList<>();
    }
    this.nfsExportOptions.add(nfsExportOptionsItem);
    return this;
  }

  /**
   * Nfs Export Options. There is a limit of 10 export options per file share.
   * @return nfsExportOptions
   */
  @javax.annotation.Nullable
  public List<NfsExportOptions> getNfsExportOptions() {
    return nfsExportOptions;
  }

  public void setNfsExportOptions(List<NfsExportOptions> nfsExportOptions) {
    this.nfsExportOptions = nfsExportOptions;
  }


  public FileShareConfig sourceBackup(String sourceBackup) {
    this.sourceBackup = sourceBackup;
    return this;
  }

  /**
   * The resource name of the backup, in the format &#x60;projects/{project_id}/locations/{location_id}/backups/{backup_id}&#x60;, that this file share has been restored from.
   * @return sourceBackup
   */
  @javax.annotation.Nullable
  public String getSourceBackup() {
    return sourceBackup;
  }

  public void setSourceBackup(String sourceBackup) {
    this.sourceBackup = sourceBackup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileShareConfig fileShareConfig = (FileShareConfig) o;
    return Objects.equals(this.capacityGb, fileShareConfig.capacityGb) &&
        Objects.equals(this.name, fileShareConfig.name) &&
        Objects.equals(this.nfsExportOptions, fileShareConfig.nfsExportOptions) &&
        Objects.equals(this.sourceBackup, fileShareConfig.sourceBackup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityGb, name, nfsExportOptions, sourceBackup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileShareConfig {\n");
    sb.append("    capacityGb: ").append(toIndentedString(capacityGb)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfsExportOptions: ").append(toIndentedString(nfsExportOptions)).append("\n");
    sb.append("    sourceBackup: ").append(toIndentedString(sourceBackup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityGb");
    openapiFields.add("name");
    openapiFields.add("nfsExportOptions");
    openapiFields.add("sourceBackup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileShareConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileShareConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileShareConfig is not found in the empty JSON string", FileShareConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileShareConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileShareConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capacityGb") != null && !jsonObj.get("capacityGb").isJsonNull()) && !jsonObj.get("capacityGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityGb").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("nfsExportOptions") != null && !jsonObj.get("nfsExportOptions").isJsonNull()) {
        JsonArray jsonArraynfsExportOptions = jsonObj.getAsJsonArray("nfsExportOptions");
        if (jsonArraynfsExportOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nfsExportOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nfsExportOptions` to be an array in the JSON string but got `%s`", jsonObj.get("nfsExportOptions").toString()));
          }

          // validate the optional field `nfsExportOptions` (array)
          for (int i = 0; i < jsonArraynfsExportOptions.size(); i++) {
            NfsExportOptions.validateJsonElement(jsonArraynfsExportOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("sourceBackup") != null && !jsonObj.get("sourceBackup").isJsonNull()) && !jsonObj.get("sourceBackup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceBackup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceBackup").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileShareConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileShareConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileShareConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileShareConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FileShareConfig>() {
           @Override
           public void write(JsonWriter out, FileShareConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileShareConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileShareConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileShareConfig
   * @throws IOException if the JSON string is invalid with respect to FileShareConfig
   */
  public static FileShareConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileShareConfig.class);
  }

  /**
   * Convert an instance of FileShareConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

