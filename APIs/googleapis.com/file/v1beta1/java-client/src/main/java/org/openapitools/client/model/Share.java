/*
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NfsExportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Filestore share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:18.454461-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Share {
  public static final String SERIALIZED_NAME_BACKUP = "backup";
  @SerializedName(SERIALIZED_NAME_BACKUP)
  private String backup;

  public static final String SERIALIZED_NAME_CAPACITY_GB = "capacityGb";
  @SerializedName(SERIALIZED_NAME_CAPACITY_GB)
  private String capacityGb;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MOUNT_NAME = "mountName";
  @SerializedName(SERIALIZED_NAME_MOUNT_NAME)
  private String mountName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NFS_EXPORT_OPTIONS = "nfsExportOptions";
  @SerializedName(SERIALIZED_NAME_NFS_EXPORT_OPTIONS)
  private List<NfsExportOptions> nfsExportOptions = new ArrayList<>();

  /**
   * Output only. The share state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public Share() {
  }

  public Share(
     String createTime, 
     String name, 
     StateEnum state
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.state = state;
  }

  public Share backup(String backup) {
    this.backup = backup;
    return this;
  }

  /**
   * Immutable. Full name of the Cloud Filestore Backup resource that this Share is restored from, in the format of projects/{project_id}/locations/{location_id}/backups/{backup_id}. Empty, if the Share is created from scratch and not restored from a backup.
   * @return backup
   */
  @javax.annotation.Nullable
  public String getBackup() {
    return backup;
  }

  public void setBackup(String backup) {
    this.backup = backup;
  }


  public Share capacityGb(String capacityGb) {
    this.capacityGb = capacityGb;
    return this;
  }

  /**
   * File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
   * @return capacityGb
   */
  @javax.annotation.Nullable
  public String getCapacityGb() {
    return capacityGb;
  }

  public void setCapacityGb(String capacityGb) {
    this.capacityGb = capacityGb;
  }


  /**
   * Output only. The time when the share was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Share description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Share labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Share putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Share mountName(String mountName) {
    this.mountName = mountName;
    return this;
  }

  /**
   * The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
   * @return mountName
   */
  @javax.annotation.Nullable
  public String getMountName() {
    return mountName;
  }

  public void setMountName(String mountName) {
    this.mountName = mountName;
  }


  /**
   * Output only. The resource name of the share, in the format &#x60;projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Share nfsExportOptions(List<NfsExportOptions> nfsExportOptions) {
    this.nfsExportOptions = nfsExportOptions;
    return this;
  }

  public Share addNfsExportOptionsItem(NfsExportOptions nfsExportOptionsItem) {
    if (this.nfsExportOptions == null) {
      this.nfsExportOptions = new ArrayList<>();
    }
    this.nfsExportOptions.add(nfsExportOptionsItem);
    return this;
  }

  /**
   * Nfs Export Options. There is a limit of 10 export options per file share.
   * @return nfsExportOptions
   */
  @javax.annotation.Nullable
  public List<NfsExportOptions> getNfsExportOptions() {
    return nfsExportOptions;
  }

  public void setNfsExportOptions(List<NfsExportOptions> nfsExportOptions) {
    this.nfsExportOptions = nfsExportOptions;
  }


  /**
   * Output only. The share state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Share share = (Share) o;
    return Objects.equals(this.backup, share.backup) &&
        Objects.equals(this.capacityGb, share.capacityGb) &&
        Objects.equals(this.createTime, share.createTime) &&
        Objects.equals(this.description, share.description) &&
        Objects.equals(this.labels, share.labels) &&
        Objects.equals(this.mountName, share.mountName) &&
        Objects.equals(this.name, share.name) &&
        Objects.equals(this.nfsExportOptions, share.nfsExportOptions) &&
        Objects.equals(this.state, share.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backup, capacityGb, createTime, description, labels, mountName, name, nfsExportOptions, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Share {\n");
    sb.append("    backup: ").append(toIndentedString(backup)).append("\n");
    sb.append("    capacityGb: ").append(toIndentedString(capacityGb)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mountName: ").append(toIndentedString(mountName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfsExportOptions: ").append(toIndentedString(nfsExportOptions)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backup");
    openapiFields.add("capacityGb");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("mountName");
    openapiFields.add("name");
    openapiFields.add("nfsExportOptions");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Share
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Share.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Share is not found in the empty JSON string", Share.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Share.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Share` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backup") != null && !jsonObj.get("backup").isJsonNull()) && !jsonObj.get("backup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup").toString()));
      }
      if ((jsonObj.get("capacityGb") != null && !jsonObj.get("capacityGb").isJsonNull()) && !jsonObj.get("capacityGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityGb").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mountName") != null && !jsonObj.get("mountName").isJsonNull()) && !jsonObj.get("mountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mountName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("nfsExportOptions") != null && !jsonObj.get("nfsExportOptions").isJsonNull()) {
        JsonArray jsonArraynfsExportOptions = jsonObj.getAsJsonArray("nfsExportOptions");
        if (jsonArraynfsExportOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nfsExportOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nfsExportOptions` to be an array in the JSON string but got `%s`", jsonObj.get("nfsExportOptions").toString()));
          }

          // validate the optional field `nfsExportOptions` (array)
          for (int i = 0; i < jsonArraynfsExportOptions.size(); i++) {
            NfsExportOptions.validateJsonElement(jsonArraynfsExportOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Share.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Share' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Share> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Share.class));

       return (TypeAdapter<T>) new TypeAdapter<Share>() {
           @Override
           public void write(JsonWriter out, Share value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Share read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Share given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Share
   * @throws IOException if the JSON string is invalid with respect to Share
   */
  public static Share fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Share.class);
  }

  /**
   * Convert an instance of Share to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

