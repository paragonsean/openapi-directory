/*
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Filestore backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:18.454461-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Backup {
  public static final String SERIALIZED_NAME_CAPACITY_GB = "capacityGb";
  @SerializedName(SERIALIZED_NAME_CAPACITY_GB)
  private String capacityGb;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOWNLOAD_BYTES = "downloadBytes";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_BYTES)
  private String downloadBytes;

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SATISFIES_PZI = "satisfiesPzi";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZI)
  private Boolean satisfiesPzi;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SOURCE_FILE_SHARE = "sourceFileShare";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_SHARE)
  private String sourceFileShare;

  public static final String SERIALIZED_NAME_SOURCE_INSTANCE = "sourceInstance";
  @SerializedName(SERIALIZED_NAME_SOURCE_INSTANCE)
  private String sourceInstance;

  /**
   * Output only. The service tier of the source Filestore instance that this backup is created from.
   */
  @JsonAdapter(SourceInstanceTierEnum.Adapter.class)
  public enum SourceInstanceTierEnum {
    TIER_UNSPECIFIED("TIER_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    PREMIUM("PREMIUM"),
    
    BASIC_HDD("BASIC_HDD"),
    
    BASIC_SSD("BASIC_SSD"),
    
    HIGH_SCALE_SSD("HIGH_SCALE_SSD"),
    
    ENTERPRISE("ENTERPRISE"),
    
    ZONAL("ZONAL"),
    
    REGIONAL("REGIONAL");

    private String value;

    SourceInstanceTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceInstanceTierEnum fromValue(String value) {
      for (SourceInstanceTierEnum b : SourceInstanceTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceInstanceTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceInstanceTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceInstanceTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceInstanceTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceInstanceTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_INSTANCE_TIER = "sourceInstanceTier";
  @SerializedName(SERIALIZED_NAME_SOURCE_INSTANCE_TIER)
  private SourceInstanceTierEnum sourceInstanceTier;

  /**
   * Output only. The backup state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    FINALIZING("FINALIZING"),
    
    READY("READY"),
    
    DELETING("DELETING"),
    
    INVALID("INVALID");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE_BYTES = "storageBytes";
  @SerializedName(SERIALIZED_NAME_STORAGE_BYTES)
  private String storageBytes;

  public Backup() {
  }

  public Backup(
     String capacityGb, 
     String createTime, 
     String downloadBytes, 
     String name, 
     Boolean satisfiesPzi, 
     Boolean satisfiesPzs, 
     SourceInstanceTierEnum sourceInstanceTier, 
     StateEnum state, 
     String storageBytes
  ) {
    this();
    this.capacityGb = capacityGb;
    this.createTime = createTime;
    this.downloadBytes = downloadBytes;
    this.name = name;
    this.satisfiesPzi = satisfiesPzi;
    this.satisfiesPzs = satisfiesPzs;
    this.sourceInstanceTier = sourceInstanceTier;
    this.state = state;
    this.storageBytes = storageBytes;
  }

  /**
   * Output only. Capacity of the source file share when the backup was created.
   * @return capacityGb
   */
  @javax.annotation.Nullable
  public String getCapacityGb() {
    return capacityGb;
  }



  /**
   * Output only. The time when the backup was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Backup description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the backup with 2048 characters or less. Requests with longer descriptions will be rejected.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. Amount of bytes that will be downloaded if the backup is restored
   * @return downloadBytes
   */
  @javax.annotation.Nullable
  public String getDownloadBytes() {
    return downloadBytes;
  }



  public Backup kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * Immutable. KMS key name used for data encryption.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  public Backup labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Backup putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The resource name of the backup, in the format &#x60;projects/{project_id}/locations/{location_id}/backups/{backup_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzi
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzi() {
    return satisfiesPzi;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  public Backup sourceFileShare(String sourceFileShare) {
    this.sourceFileShare = sourceFileShare;
    return this;
  }

  /**
   * Name of the file share in the source Filestore instance that the backup is created from.
   * @return sourceFileShare
   */
  @javax.annotation.Nullable
  public String getSourceFileShare() {
    return sourceFileShare;
  }

  public void setSourceFileShare(String sourceFileShare) {
    this.sourceFileShare = sourceFileShare;
  }


  public Backup sourceInstance(String sourceInstance) {
    this.sourceInstance = sourceInstance;
    return this;
  }

  /**
   * The resource name of the source Filestore instance, in the format &#x60;projects/{project_id}/locations/{location_id}/instances/{instance_id}&#x60;, used to create this backup.
   * @return sourceInstance
   */
  @javax.annotation.Nullable
  public String getSourceInstance() {
    return sourceInstance;
  }

  public void setSourceInstance(String sourceInstance) {
    this.sourceInstance = sourceInstance;
  }


  /**
   * Output only. The service tier of the source Filestore instance that this backup is created from.
   * @return sourceInstanceTier
   */
  @javax.annotation.Nullable
  public SourceInstanceTierEnum getSourceInstanceTier() {
    return sourceInstanceTier;
  }



  /**
   * Output only. The backup state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The size of the storage used by the backup. As backups share storage, this number is expected to change with backup creation/deletion.
   * @return storageBytes
   */
  @javax.annotation.Nullable
  public String getStorageBytes() {
    return storageBytes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Backup backup = (Backup) o;
    return Objects.equals(this.capacityGb, backup.capacityGb) &&
        Objects.equals(this.createTime, backup.createTime) &&
        Objects.equals(this.description, backup.description) &&
        Objects.equals(this.downloadBytes, backup.downloadBytes) &&
        Objects.equals(this.kmsKeyName, backup.kmsKeyName) &&
        Objects.equals(this.labels, backup.labels) &&
        Objects.equals(this.name, backup.name) &&
        Objects.equals(this.satisfiesPzi, backup.satisfiesPzi) &&
        Objects.equals(this.satisfiesPzs, backup.satisfiesPzs) &&
        Objects.equals(this.sourceFileShare, backup.sourceFileShare) &&
        Objects.equals(this.sourceInstance, backup.sourceInstance) &&
        Objects.equals(this.sourceInstanceTier, backup.sourceInstanceTier) &&
        Objects.equals(this.state, backup.state) &&
        Objects.equals(this.storageBytes, backup.storageBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityGb, createTime, description, downloadBytes, kmsKeyName, labels, name, satisfiesPzi, satisfiesPzs, sourceFileShare, sourceInstance, sourceInstanceTier, state, storageBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Backup {\n");
    sb.append("    capacityGb: ").append(toIndentedString(capacityGb)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    downloadBytes: ").append(toIndentedString(downloadBytes)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    satisfiesPzi: ").append(toIndentedString(satisfiesPzi)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    sourceFileShare: ").append(toIndentedString(sourceFileShare)).append("\n");
    sb.append("    sourceInstance: ").append(toIndentedString(sourceInstance)).append("\n");
    sb.append("    sourceInstanceTier: ").append(toIndentedString(sourceInstanceTier)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageBytes: ").append(toIndentedString(storageBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityGb");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("downloadBytes");
    openapiFields.add("kmsKeyName");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("satisfiesPzi");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("sourceFileShare");
    openapiFields.add("sourceInstance");
    openapiFields.add("sourceInstanceTier");
    openapiFields.add("state");
    openapiFields.add("storageBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Backup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Backup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Backup is not found in the empty JSON string", Backup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Backup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Backup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capacityGb") != null && !jsonObj.get("capacityGb").isJsonNull()) && !jsonObj.get("capacityGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityGb").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("downloadBytes") != null && !jsonObj.get("downloadBytes").isJsonNull()) && !jsonObj.get("downloadBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadBytes").toString()));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sourceFileShare") != null && !jsonObj.get("sourceFileShare").isJsonNull()) && !jsonObj.get("sourceFileShare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFileShare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFileShare").toString()));
      }
      if ((jsonObj.get("sourceInstance") != null && !jsonObj.get("sourceInstance").isJsonNull()) && !jsonObj.get("sourceInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceInstance").toString()));
      }
      if ((jsonObj.get("sourceInstanceTier") != null && !jsonObj.get("sourceInstanceTier").isJsonNull()) && !jsonObj.get("sourceInstanceTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceInstanceTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceInstanceTier").toString()));
      }
      // validate the optional field `sourceInstanceTier`
      if (jsonObj.get("sourceInstanceTier") != null && !jsonObj.get("sourceInstanceTier").isJsonNull()) {
        SourceInstanceTierEnum.validateJsonElement(jsonObj.get("sourceInstanceTier"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("storageBytes") != null && !jsonObj.get("storageBytes").isJsonNull()) && !jsonObj.get("storageBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Backup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Backup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Backup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Backup.class));

       return (TypeAdapter<T>) new TypeAdapter<Backup>() {
           @Override
           public void write(JsonWriter out, Backup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Backup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Backup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Backup
   * @throws IOException if the JSON string is invalid with respect to Backup
   */
  public static Backup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Backup.class);
  }

  /**
   * Convert an instance of Backup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

