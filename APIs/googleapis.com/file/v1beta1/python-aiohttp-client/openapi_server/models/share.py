# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nfs_export_options import NfsExportOptions
from openapi_server import util


class Share(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup: str=None, capacity_gb: str=None, create_time: str=None, description: str=None, labels: Dict[str, str]=None, mount_name: str=None, name: str=None, nfs_export_options: List[NfsExportOptions]=None, state: str=None):
        """Share - a model defined in OpenAPI

        :param backup: The backup of this Share.
        :param capacity_gb: The capacity_gb of this Share.
        :param create_time: The create_time of this Share.
        :param description: The description of this Share.
        :param labels: The labels of this Share.
        :param mount_name: The mount_name of this Share.
        :param name: The name of this Share.
        :param nfs_export_options: The nfs_export_options of this Share.
        :param state: The state of this Share.
        """
        self.openapi_types = {
            'backup': str,
            'capacity_gb': str,
            'create_time': str,
            'description': str,
            'labels': Dict[str, str],
            'mount_name': str,
            'name': str,
            'nfs_export_options': List[NfsExportOptions],
            'state': str
        }

        self.attribute_map = {
            'backup': 'backup',
            'capacity_gb': 'capacityGb',
            'create_time': 'createTime',
            'description': 'description',
            'labels': 'labels',
            'mount_name': 'mountName',
            'name': 'name',
            'nfs_export_options': 'nfsExportOptions',
            'state': 'state'
        }

        self._backup = backup
        self._capacity_gb = capacity_gb
        self._create_time = create_time
        self._description = description
        self._labels = labels
        self._mount_name = mount_name
        self._name = name
        self._nfs_export_options = nfs_export_options
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Share':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Share of this Share.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup(self):
        """Gets the backup of this Share.

        Immutable. Full name of the Cloud Filestore Backup resource that this Share is restored from, in the format of projects/{project_id}/locations/{location_id}/backups/{backup_id}. Empty, if the Share is created from scratch and not restored from a backup.

        :return: The backup of this Share.
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this Share.

        Immutable. Full name of the Cloud Filestore Backup resource that this Share is restored from, in the format of projects/{project_id}/locations/{location_id}/backups/{backup_id}. Empty, if the Share is created from scratch and not restored from a backup.

        :param backup: The backup of this Share.
        :type backup: str
        """

        self._backup = backup

    @property
    def capacity_gb(self):
        """Gets the capacity_gb of this Share.

        File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.

        :return: The capacity_gb of this Share.
        :rtype: str
        """
        return self._capacity_gb

    @capacity_gb.setter
    def capacity_gb(self, capacity_gb):
        """Sets the capacity_gb of this Share.

        File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.

        :param capacity_gb: The capacity_gb of this Share.
        :type capacity_gb: str
        """

        self._capacity_gb = capacity_gb

    @property
    def create_time(self):
        """Gets the create_time of this Share.

        Output only. The time when the share was created.

        :return: The create_time of this Share.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Share.

        Output only. The time when the share was created.

        :param create_time: The create_time of this Share.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Share.

        A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.

        :return: The description of this Share.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Share.

        A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.

        :param description: The description of this Share.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this Share.

        Resource labels to represent user provided metadata.

        :return: The labels of this Share.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Share.

        Resource labels to represent user provided metadata.

        :param labels: The labels of this Share.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mount_name(self):
        """Gets the mount_name of this Share.

        The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.

        :return: The mount_name of this Share.
        :rtype: str
        """
        return self._mount_name

    @mount_name.setter
    def mount_name(self, mount_name):
        """Sets the mount_name of this Share.

        The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.

        :param mount_name: The mount_name of this Share.
        :type mount_name: str
        """

        self._mount_name = mount_name

    @property
    def name(self):
        """Gets the name of this Share.

        Output only. The resource name of the share, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.

        :return: The name of this Share.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Share.

        Output only. The resource name of the share, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.

        :param name: The name of this Share.
        :type name: str
        """

        self._name = name

    @property
    def nfs_export_options(self):
        """Gets the nfs_export_options of this Share.

        Nfs Export Options. There is a limit of 10 export options per file share.

        :return: The nfs_export_options of this Share.
        :rtype: List[NfsExportOptions]
        """
        return self._nfs_export_options

    @nfs_export_options.setter
    def nfs_export_options(self, nfs_export_options):
        """Sets the nfs_export_options of this Share.

        Nfs Export Options. There is a limit of 10 export options per file share.

        :param nfs_export_options: The nfs_export_options of this Share.
        :type nfs_export_options: List[NfsExportOptions]
        """

        self._nfs_export_options = nfs_export_options

    @property
    def state(self):
        """Gets the state of this Share.

        Output only. The share state.

        :return: The state of this Share.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Share.

        Output only. The share state.

        :param state: The state of this Share.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
