# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Snapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, filesystem_used_bytes: str=None, labels: Dict[str, str]=None, name: str=None, state: str=None):
        """Snapshot - a model defined in OpenAPI

        :param create_time: The create_time of this Snapshot.
        :param description: The description of this Snapshot.
        :param filesystem_used_bytes: The filesystem_used_bytes of this Snapshot.
        :param labels: The labels of this Snapshot.
        :param name: The name of this Snapshot.
        :param state: The state of this Snapshot.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'filesystem_used_bytes': str,
            'labels': Dict[str, str],
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'filesystem_used_bytes': 'filesystemUsedBytes',
            'labels': 'labels',
            'name': 'name',
            'state': 'state'
        }

        self._create_time = create_time
        self._description = description
        self._filesystem_used_bytes = filesystem_used_bytes
        self._labels = labels
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snapshot of this Snapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Snapshot.

        Output only. The time when the snapshot was created.

        :return: The create_time of this Snapshot.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Snapshot.

        Output only. The time when the snapshot was created.

        :param create_time: The create_time of this Snapshot.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Snapshot.

        A description of the snapshot with 2048 characters or less. Requests with longer descriptions will be rejected.

        :return: The description of this Snapshot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Snapshot.

        A description of the snapshot with 2048 characters or less. Requests with longer descriptions will be rejected.

        :param description: The description of this Snapshot.
        :type description: str
        """

        self._description = description

    @property
    def filesystem_used_bytes(self):
        """Gets the filesystem_used_bytes of this Snapshot.

        Output only. The amount of bytes needed to allocate a full copy of the snapshot content

        :return: The filesystem_used_bytes of this Snapshot.
        :rtype: str
        """
        return self._filesystem_used_bytes

    @filesystem_used_bytes.setter
    def filesystem_used_bytes(self, filesystem_used_bytes):
        """Sets the filesystem_used_bytes of this Snapshot.

        Output only. The amount of bytes needed to allocate a full copy of the snapshot content

        :param filesystem_used_bytes: The filesystem_used_bytes of this Snapshot.
        :type filesystem_used_bytes: str
        """

        self._filesystem_used_bytes = filesystem_used_bytes

    @property
    def labels(self):
        """Gets the labels of this Snapshot.

        Resource labels to represent user provided metadata.

        :return: The labels of this Snapshot.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Snapshot.

        Resource labels to represent user provided metadata.

        :param labels: The labels of this Snapshot.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Snapshot.

        Output only. The resource name of the snapshot, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/snapshots/{snapshot_id}`.

        :return: The name of this Snapshot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snapshot.

        Output only. The resource name of the snapshot, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/snapshots/{snapshot_id}`.

        :param name: The name of this Snapshot.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Snapshot.

        Output only. The snapshot state.

        :return: The state of this Snapshot.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Snapshot.

        Output only. The snapshot state.

        :param state: The state of this Snapshot.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
