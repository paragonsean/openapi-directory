# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NfsExportOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_mode: str=None, anon_gid: str=None, anon_uid: str=None, ip_ranges: List[str]=None, security_flavors: List[str]=None, squash_mode: str=None):
        """NfsExportOptions - a model defined in OpenAPI

        :param access_mode: The access_mode of this NfsExportOptions.
        :param anon_gid: The anon_gid of this NfsExportOptions.
        :param anon_uid: The anon_uid of this NfsExportOptions.
        :param ip_ranges: The ip_ranges of this NfsExportOptions.
        :param security_flavors: The security_flavors of this NfsExportOptions.
        :param squash_mode: The squash_mode of this NfsExportOptions.
        """
        self.openapi_types = {
            'access_mode': str,
            'anon_gid': str,
            'anon_uid': str,
            'ip_ranges': List[str],
            'security_flavors': List[str],
            'squash_mode': str
        }

        self.attribute_map = {
            'access_mode': 'accessMode',
            'anon_gid': 'anonGid',
            'anon_uid': 'anonUid',
            'ip_ranges': 'ipRanges',
            'security_flavors': 'securityFlavors',
            'squash_mode': 'squashMode'
        }

        self._access_mode = access_mode
        self._anon_gid = anon_gid
        self._anon_uid = anon_uid
        self._ip_ranges = ip_ranges
        self._security_flavors = security_flavors
        self._squash_mode = squash_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NfsExportOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NfsExportOptions of this NfsExportOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_mode(self):
        """Gets the access_mode of this NfsExportOptions.

        Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.

        :return: The access_mode of this NfsExportOptions.
        :rtype: str
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this NfsExportOptions.

        Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.

        :param access_mode: The access_mode of this NfsExportOptions.
        :type access_mode: str
        """
        allowed_values = ["ACCESS_MODE_UNSPECIFIED", "READ_ONLY", "READ_WRITE"]  # noqa: E501
        if access_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `access_mode` ({0}), must be one of {1}"
                .format(access_mode, allowed_values)
            )

        self._access_mode = access_mode

    @property
    def anon_gid(self):
        """Gets the anon_gid of this NfsExportOptions.

        An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.

        :return: The anon_gid of this NfsExportOptions.
        :rtype: str
        """
        return self._anon_gid

    @anon_gid.setter
    def anon_gid(self, anon_gid):
        """Sets the anon_gid of this NfsExportOptions.

        An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.

        :param anon_gid: The anon_gid of this NfsExportOptions.
        :type anon_gid: str
        """

        self._anon_gid = anon_gid

    @property
    def anon_uid(self):
        """Gets the anon_uid of this NfsExportOptions.

        An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.

        :return: The anon_uid of this NfsExportOptions.
        :rtype: str
        """
        return self._anon_uid

    @anon_uid.setter
    def anon_uid(self, anon_uid):
        """Sets the anon_uid of this NfsExportOptions.

        An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.

        :param anon_uid: The anon_uid of this NfsExportOptions.
        :type anon_uid: str
        """

        self._anon_uid = anon_uid

    @property
    def ip_ranges(self):
        """Gets the ip_ranges of this NfsExportOptions.

        List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.

        :return: The ip_ranges of this NfsExportOptions.
        :rtype: List[str]
        """
        return self._ip_ranges

    @ip_ranges.setter
    def ip_ranges(self, ip_ranges):
        """Sets the ip_ranges of this NfsExportOptions.

        List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.

        :param ip_ranges: The ip_ranges of this NfsExportOptions.
        :type ip_ranges: List[str]
        """

        self._ip_ranges = ip_ranges

    @property
    def security_flavors(self):
        """Gets the security_flavors of this NfsExportOptions.

        The security flavors allowed for mount operations. The default is AUTH_SYS.

        :return: The security_flavors of this NfsExportOptions.
        :rtype: List[str]
        """
        return self._security_flavors

    @security_flavors.setter
    def security_flavors(self, security_flavors):
        """Sets the security_flavors of this NfsExportOptions.

        The security flavors allowed for mount operations. The default is AUTH_SYS.

        :param security_flavors: The security_flavors of this NfsExportOptions.
        :type security_flavors: List[str]
        """
        allowed_values = ["SECURITY_FLAVOR_UNSPECIFIED", "AUTH_SYS", "KRB5", "KRB5I", "KRB5P"]  # noqa: E501
        if not set(security_flavors).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `security_flavors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(security_flavors) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._security_flavors = security_flavors

    @property
    def squash_mode(self):
        """Gets the squash_mode of this NfsExportOptions.

        Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.

        :return: The squash_mode of this NfsExportOptions.
        :rtype: str
        """
        return self._squash_mode

    @squash_mode.setter
    def squash_mode(self, squash_mode):
        """Sets the squash_mode of this NfsExportOptions.

        Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.

        :param squash_mode: The squash_mode of this NfsExportOptions.
        :type squash_mode: str
        """
        allowed_values = ["SQUASH_MODE_UNSPECIFIED", "NO_ROOT_SQUASH", "ROOT_SQUASH"]  # noqa: E501
        if squash_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `squash_mode` ({0}), must be one of {1}"
                .format(squash_mode, allowed_values)
            )

        self._squash_mode = squash_mode
