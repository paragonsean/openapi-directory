# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directory_services_config import DirectoryServicesConfig
from openapi_server.models.file_share_config import FileShareConfig
from openapi_server.models.network_config import NetworkConfig
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_gb: str=None, capacity_step_size_gb: str=None, create_time: str=None, description: str=None, directory_services: DirectoryServicesConfig=None, etag: str=None, file_shares: List[FileShareConfig]=None, kms_key_name: str=None, labels: Dict[str, str]=None, max_capacity_gb: str=None, max_share_count: str=None, multi_share_enabled: bool=None, name: str=None, networks: List[NetworkConfig]=None, protocol: str=None, satisfies_pzi: bool=None, satisfies_pzs: bool=None, state: str=None, status_message: str=None, suspension_reasons: List[str]=None, tier: str=None):
        """Instance - a model defined in OpenAPI

        :param capacity_gb: The capacity_gb of this Instance.
        :param capacity_step_size_gb: The capacity_step_size_gb of this Instance.
        :param create_time: The create_time of this Instance.
        :param description: The description of this Instance.
        :param directory_services: The directory_services of this Instance.
        :param etag: The etag of this Instance.
        :param file_shares: The file_shares of this Instance.
        :param kms_key_name: The kms_key_name of this Instance.
        :param labels: The labels of this Instance.
        :param max_capacity_gb: The max_capacity_gb of this Instance.
        :param max_share_count: The max_share_count of this Instance.
        :param multi_share_enabled: The multi_share_enabled of this Instance.
        :param name: The name of this Instance.
        :param networks: The networks of this Instance.
        :param protocol: The protocol of this Instance.
        :param satisfies_pzi: The satisfies_pzi of this Instance.
        :param satisfies_pzs: The satisfies_pzs of this Instance.
        :param state: The state of this Instance.
        :param status_message: The status_message of this Instance.
        :param suspension_reasons: The suspension_reasons of this Instance.
        :param tier: The tier of this Instance.
        """
        self.openapi_types = {
            'capacity_gb': str,
            'capacity_step_size_gb': str,
            'create_time': str,
            'description': str,
            'directory_services': DirectoryServicesConfig,
            'etag': str,
            'file_shares': List[FileShareConfig],
            'kms_key_name': str,
            'labels': Dict[str, str],
            'max_capacity_gb': str,
            'max_share_count': str,
            'multi_share_enabled': bool,
            'name': str,
            'networks': List[NetworkConfig],
            'protocol': str,
            'satisfies_pzi': bool,
            'satisfies_pzs': bool,
            'state': str,
            'status_message': str,
            'suspension_reasons': List[str],
            'tier': str
        }

        self.attribute_map = {
            'capacity_gb': 'capacityGb',
            'capacity_step_size_gb': 'capacityStepSizeGb',
            'create_time': 'createTime',
            'description': 'description',
            'directory_services': 'directoryServices',
            'etag': 'etag',
            'file_shares': 'fileShares',
            'kms_key_name': 'kmsKeyName',
            'labels': 'labels',
            'max_capacity_gb': 'maxCapacityGb',
            'max_share_count': 'maxShareCount',
            'multi_share_enabled': 'multiShareEnabled',
            'name': 'name',
            'networks': 'networks',
            'protocol': 'protocol',
            'satisfies_pzi': 'satisfiesPzi',
            'satisfies_pzs': 'satisfiesPzs',
            'state': 'state',
            'status_message': 'statusMessage',
            'suspension_reasons': 'suspensionReasons',
            'tier': 'tier'
        }

        self._capacity_gb = capacity_gb
        self._capacity_step_size_gb = capacity_step_size_gb
        self._create_time = create_time
        self._description = description
        self._directory_services = directory_services
        self._etag = etag
        self._file_shares = file_shares
        self._kms_key_name = kms_key_name
        self._labels = labels
        self._max_capacity_gb = max_capacity_gb
        self._max_share_count = max_share_count
        self._multi_share_enabled = multi_share_enabled
        self._name = name
        self._networks = networks
        self._protocol = protocol
        self._satisfies_pzi = satisfies_pzi
        self._satisfies_pzs = satisfies_pzs
        self._state = state
        self._status_message = status_message
        self._suspension_reasons = suspension_reasons
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_gb(self):
        """Gets the capacity_gb of this Instance.

        The storage capacity of the instance in gigabytes (GB = 1024^3 bytes). This capacity can be increased up to `max_capacity_gb` GB in multipliers of `capacity_step_size_gb` GB.

        :return: The capacity_gb of this Instance.
        :rtype: str
        """
        return self._capacity_gb

    @capacity_gb.setter
    def capacity_gb(self, capacity_gb):
        """Sets the capacity_gb of this Instance.

        The storage capacity of the instance in gigabytes (GB = 1024^3 bytes). This capacity can be increased up to `max_capacity_gb` GB in multipliers of `capacity_step_size_gb` GB.

        :param capacity_gb: The capacity_gb of this Instance.
        :type capacity_gb: str
        """

        self._capacity_gb = capacity_gb

    @property
    def capacity_step_size_gb(self):
        """Gets the capacity_step_size_gb of this Instance.

        Output only. The increase/decrease capacity step size.

        :return: The capacity_step_size_gb of this Instance.
        :rtype: str
        """
        return self._capacity_step_size_gb

    @capacity_step_size_gb.setter
    def capacity_step_size_gb(self, capacity_step_size_gb):
        """Sets the capacity_step_size_gb of this Instance.

        Output only. The increase/decrease capacity step size.

        :param capacity_step_size_gb: The capacity_step_size_gb of this Instance.
        :type capacity_step_size_gb: str
        """

        self._capacity_step_size_gb = capacity_step_size_gb

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. The time when the instance was created.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. The time when the instance was created.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Instance.

        The description of the instance (2048 characters or less).

        :return: The description of this Instance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Instance.

        The description of the instance (2048 characters or less).

        :param description: The description of this Instance.
        :type description: str
        """

        self._description = description

    @property
    def directory_services(self):
        """Gets the directory_services of this Instance.


        :return: The directory_services of this Instance.
        :rtype: DirectoryServicesConfig
        """
        return self._directory_services

    @directory_services.setter
    def directory_services(self, directory_services):
        """Sets the directory_services of this Instance.


        :param directory_services: The directory_services of this Instance.
        :type directory_services: DirectoryServicesConfig
        """

        self._directory_services = directory_services

    @property
    def etag(self):
        """Gets the etag of this Instance.

        Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.

        :return: The etag of this Instance.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Instance.

        Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.

        :param etag: The etag of this Instance.
        :type etag: str
        """

        self._etag = etag

    @property
    def file_shares(self):
        """Gets the file_shares of this Instance.

        File system shares on the instance. For this version, only a single file share is supported.

        :return: The file_shares of this Instance.
        :rtype: List[FileShareConfig]
        """
        return self._file_shares

    @file_shares.setter
    def file_shares(self, file_shares):
        """Sets the file_shares of this Instance.

        File system shares on the instance. For this version, only a single file share is supported.

        :param file_shares: The file_shares of this Instance.
        :type file_shares: List[FileShareConfig]
        """

        self._file_shares = file_shares

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this Instance.

        KMS key name used for data encryption.

        :return: The kms_key_name of this Instance.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this Instance.

        KMS key name used for data encryption.

        :param kms_key_name: The kms_key_name of this Instance.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def labels(self):
        """Gets the labels of this Instance.

        Resource labels to represent user provided metadata.

        :return: The labels of this Instance.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Instance.

        Resource labels to represent user provided metadata.

        :param labels: The labels of this Instance.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def max_capacity_gb(self):
        """Gets the max_capacity_gb of this Instance.

        Output only. The max capacity of the instance.

        :return: The max_capacity_gb of this Instance.
        :rtype: str
        """
        return self._max_capacity_gb

    @max_capacity_gb.setter
    def max_capacity_gb(self, max_capacity_gb):
        """Sets the max_capacity_gb of this Instance.

        Output only. The max capacity of the instance.

        :param max_capacity_gb: The max_capacity_gb of this Instance.
        :type max_capacity_gb: str
        """

        self._max_capacity_gb = max_capacity_gb

    @property
    def max_share_count(self):
        """Gets the max_share_count of this Instance.

        The max number of shares allowed.

        :return: The max_share_count of this Instance.
        :rtype: str
        """
        return self._max_share_count

    @max_share_count.setter
    def max_share_count(self, max_share_count):
        """Sets the max_share_count of this Instance.

        The max number of shares allowed.

        :param max_share_count: The max_share_count of this Instance.
        :type max_share_count: str
        """

        self._max_share_count = max_share_count

    @property
    def multi_share_enabled(self):
        """Gets the multi_share_enabled of this Instance.

        Indicates whether this instance uses a multi-share configuration with which it can have more than one file-share or none at all. File-shares are added, updated and removed through the separate file-share APIs.

        :return: The multi_share_enabled of this Instance.
        :rtype: bool
        """
        return self._multi_share_enabled

    @multi_share_enabled.setter
    def multi_share_enabled(self, multi_share_enabled):
        """Sets the multi_share_enabled of this Instance.

        Indicates whether this instance uses a multi-share configuration with which it can have more than one file-share or none at all. File-shares are added, updated and removed through the separate file-share APIs.

        :param multi_share_enabled: The multi_share_enabled of this Instance.
        :type multi_share_enabled: bool
        """

        self._multi_share_enabled = multi_share_enabled

    @property
    def name(self):
        """Gets the name of this Instance.

        Output only. The resource name of the instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Output only. The resource name of the instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this Instance.

        VPC networks to which the instance is connected. For this version, only a single network is supported.

        :return: The networks of this Instance.
        :rtype: List[NetworkConfig]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Instance.

        VPC networks to which the instance is connected. For this version, only a single network is supported.

        :param networks: The networks of this Instance.
        :type networks: List[NetworkConfig]
        """

        self._networks = networks

    @property
    def protocol(self):
        """Gets the protocol of this Instance.

        Immutable. The protocol indicates the access protocol for all shares in the instance. This field is immutable and it cannot be changed after the instance has been created. Default value: `NFS_V3`.

        :return: The protocol of this Instance.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Instance.

        Immutable. The protocol indicates the access protocol for all shares in the instance. This field is immutable and it cannot be changed after the instance has been created. Default value: `NFS_V3`.

        :param protocol: The protocol of this Instance.
        :type protocol: str
        """
        allowed_values = ["FILE_PROTOCOL_UNSPECIFIED", "NFS_V3", "NFS_V4_1"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def satisfies_pzi(self):
        """Gets the satisfies_pzi of this Instance.

        Output only. Reserved for future use.

        :return: The satisfies_pzi of this Instance.
        :rtype: bool
        """
        return self._satisfies_pzi

    @satisfies_pzi.setter
    def satisfies_pzi(self, satisfies_pzi):
        """Sets the satisfies_pzi of this Instance.

        Output only. Reserved for future use.

        :param satisfies_pzi: The satisfies_pzi of this Instance.
        :type satisfies_pzi: bool
        """

        self._satisfies_pzi = satisfies_pzi

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Instance.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Instance.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Instance.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Instance.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The instance state.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The instance state.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "REPAIRING", "DELETING", "ERROR", "RESTORING", "SUSPENDED", "REVERTING", "SUSPENDING", "RESUMING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status_message(self):
        """Gets the status_message of this Instance.

        Output only. Additional information about the instance state, if available.

        :return: The status_message of this Instance.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Instance.

        Output only. Additional information about the instance state, if available.

        :param status_message: The status_message of this Instance.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def suspension_reasons(self):
        """Gets the suspension_reasons of this Instance.

        Output only. Field indicates all the reasons the instance is in \"SUSPENDED\" state.

        :return: The suspension_reasons of this Instance.
        :rtype: List[str]
        """
        return self._suspension_reasons

    @suspension_reasons.setter
    def suspension_reasons(self, suspension_reasons):
        """Sets the suspension_reasons of this Instance.

        Output only. Field indicates all the reasons the instance is in \"SUSPENDED\" state.

        :param suspension_reasons: The suspension_reasons of this Instance.
        :type suspension_reasons: List[str]
        """
        allowed_values = ["SUSPENSION_REASON_UNSPECIFIED", "KMS_KEY_ISSUE"]  # noqa: E501
        if not set(suspension_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `suspension_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(suspension_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._suspension_reasons = suspension_reasons

    @property
    def tier(self):
        """Gets the tier of this Instance.

        The service tier of the instance.

        :return: The tier of this Instance.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Instance.

        The service tier of the instance.

        :param tier: The tier of this Instance.
        :type tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "STANDARD", "PREMIUM", "BASIC_HDD", "BASIC_SSD", "HIGH_SCALE_SSD", "ENTERPRISE", "ZONAL", "REGIONAL"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
