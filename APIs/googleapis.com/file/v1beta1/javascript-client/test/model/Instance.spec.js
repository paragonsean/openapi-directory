/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudFilestoreApi);
  }
}(this, function(expect, CloudFilestoreApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudFilestoreApi.Instance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Instance', function() {
    it('should create an instance of Instance', function() {
      // uncomment below and update the code to test Instance
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be.a(CloudFilestoreApi.Instance);
    });

    it('should have the property capacityGb (base name: "capacityGb")', function() {
      // uncomment below and update the code to test the property capacityGb
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property capacityStepSizeGb (base name: "capacityStepSizeGb")', function() {
      // uncomment below and update the code to test the property capacityStepSizeGb
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property directoryServices (base name: "directoryServices")', function() {
      // uncomment below and update the code to test the property directoryServices
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property fileShares (base name: "fileShares")', function() {
      // uncomment below and update the code to test the property fileShares
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyName (base name: "kmsKeyName")', function() {
      // uncomment below and update the code to test the property kmsKeyName
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maxCapacityGb (base name: "maxCapacityGb")', function() {
      // uncomment below and update the code to test the property maxCapacityGb
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property maxShareCount (base name: "maxShareCount")', function() {
      // uncomment below and update the code to test the property maxShareCount
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property multiShareEnabled (base name: "multiShareEnabled")', function() {
      // uncomment below and update the code to test the property multiShareEnabled
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property networks (base name: "networks")', function() {
      // uncomment below and update the code to test the property networks
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property satisfiesPzi (base name: "satisfiesPzi")', function() {
      // uncomment below and update the code to test the property satisfiesPzi
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property satisfiesPzs (base name: "satisfiesPzs")', function() {
      // uncomment below and update the code to test the property satisfiesPzs
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property suspensionReasons (base name: "suspensionReasons")', function() {
      // uncomment below and update the code to test the property suspensionReasons
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

    it('should have the property tier (base name: "tier")', function() {
      // uncomment below and update the code to test the property tier
      //var instance = new CloudFilestoreApi.Instance();
      //expect(instance).to.be();
    });

  });

}));
