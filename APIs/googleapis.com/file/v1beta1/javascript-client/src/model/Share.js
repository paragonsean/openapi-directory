/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NfsExportOptions from './NfsExportOptions';

/**
 * The Share model module.
 * @module model/Share
 * @version v1beta1
 */
class Share {
    /**
     * Constructs a new <code>Share</code>.
     * A Filestore share.
     * @alias module:model/Share
     */
    constructor() { 
        
        Share.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Share</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Share} obj Optional instance to populate.
     * @return {module:model/Share} The populated <code>Share</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Share();

            if (data.hasOwnProperty('backup')) {
                obj['backup'] = ApiClient.convertToType(data['backup'], 'String');
            }
            if (data.hasOwnProperty('capacityGb')) {
                obj['capacityGb'] = ApiClient.convertToType(data['capacityGb'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mountName')) {
                obj['mountName'] = ApiClient.convertToType(data['mountName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfsExportOptions')) {
                obj['nfsExportOptions'] = ApiClient.convertToType(data['nfsExportOptions'], [NfsExportOptions]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Share</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Share</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backup'] && !(typeof data['backup'] === 'string' || data['backup'] instanceof String)) {
            throw new Error("Expected the field `backup` to be a primitive type in the JSON string but got " + data['backup']);
        }
        // ensure the json data is a string
        if (data['capacityGb'] && !(typeof data['capacityGb'] === 'string' || data['capacityGb'] instanceof String)) {
            throw new Error("Expected the field `capacityGb` to be a primitive type in the JSON string but got " + data['capacityGb']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mountName'] && !(typeof data['mountName'] === 'string' || data['mountName'] instanceof String)) {
            throw new Error("Expected the field `mountName` to be a primitive type in the JSON string but got " + data['mountName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['nfsExportOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nfsExportOptions'])) {
                throw new Error("Expected the field `nfsExportOptions` to be an array in the JSON data but got " + data['nfsExportOptions']);
            }
            // validate the optional field `nfsExportOptions` (array)
            for (const item of data['nfsExportOptions']) {
                NfsExportOptions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Immutable. Full name of the Cloud Filestore Backup resource that this Share is restored from, in the format of projects/{project_id}/locations/{location_id}/backups/{backup_id}. Empty, if the Share is created from scratch and not restored from a backup.
 * @member {String} backup
 */
Share.prototype['backup'] = undefined;

/**
 * File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
 * @member {String} capacityGb
 */
Share.prototype['capacityGb'] = undefined;

/**
 * Output only. The time when the share was created.
 * @member {String} createTime
 */
Share.prototype['createTime'] = undefined;

/**
 * A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
 * @member {String} description
 */
Share.prototype['description'] = undefined;

/**
 * Resource labels to represent user provided metadata.
 * @member {Object.<String, String>} labels
 */
Share.prototype['labels'] = undefined;

/**
 * The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
 * @member {String} mountName
 */
Share.prototype['mountName'] = undefined;

/**
 * Output only. The resource name of the share, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.
 * @member {String} name
 */
Share.prototype['name'] = undefined;

/**
 * Nfs Export Options. There is a limit of 10 export options per file share.
 * @member {Array.<module:model/NfsExportOptions>} nfsExportOptions
 */
Share.prototype['nfsExportOptions'] = undefined;

/**
 * Output only. The share state.
 * @member {module:model/Share.StateEnum} state
 */
Share.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Share['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default Share;

