/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedActiveDirectoryConfig model module.
 * @module model/ManagedActiveDirectoryConfig
 * @version v1beta1
 */
class ManagedActiveDirectoryConfig {
    /**
     * Constructs a new <code>ManagedActiveDirectoryConfig</code>.
     * ManagedActiveDirectoryConfig contains all the parameters for connecting to Managed Active Directory.
     * @alias module:model/ManagedActiveDirectoryConfig
     */
    constructor() { 
        
        ManagedActiveDirectoryConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedActiveDirectoryConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedActiveDirectoryConfig} obj Optional instance to populate.
     * @return {module:model/ManagedActiveDirectoryConfig} The populated <code>ManagedActiveDirectoryConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedActiveDirectoryConfig();

            if (data.hasOwnProperty('computer')) {
                obj['computer'] = ApiClient.convertToType(data['computer'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedActiveDirectoryConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedActiveDirectoryConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['computer'] && !(typeof data['computer'] === 'string' || data['computer'] instanceof String)) {
            throw new Error("Expected the field `computer` to be a primitive type in the JSON string but got " + data['computer']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }

        return true;
    }


}



/**
 * The computer name is used as a prefix to the mount remote target. Example: if the computer_name is `my-computer`, the mount command will look like: `$mount -o vers=4,sec=krb5 my-computer.filestore.:`.
 * @member {String} computer
 */
ManagedActiveDirectoryConfig.prototype['computer'] = undefined;

/**
 * Fully qualified domain name.
 * @member {String} domain
 */
ManagedActiveDirectoryConfig.prototype['domain'] = undefined;






export default ManagedActiveDirectoryConfig;

