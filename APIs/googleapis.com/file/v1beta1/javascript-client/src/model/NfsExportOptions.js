/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NfsExportOptions model module.
 * @module model/NfsExportOptions
 * @version v1beta1
 */
class NfsExportOptions {
    /**
     * Constructs a new <code>NfsExportOptions</code>.
     * NFS export options specifications.
     * @alias module:model/NfsExportOptions
     */
    constructor() { 
        
        NfsExportOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NfsExportOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NfsExportOptions} obj Optional instance to populate.
     * @return {module:model/NfsExportOptions} The populated <code>NfsExportOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NfsExportOptions();

            if (data.hasOwnProperty('accessMode')) {
                obj['accessMode'] = ApiClient.convertToType(data['accessMode'], 'String');
            }
            if (data.hasOwnProperty('anonGid')) {
                obj['anonGid'] = ApiClient.convertToType(data['anonGid'], 'String');
            }
            if (data.hasOwnProperty('anonUid')) {
                obj['anonUid'] = ApiClient.convertToType(data['anonUid'], 'String');
            }
            if (data.hasOwnProperty('ipRanges')) {
                obj['ipRanges'] = ApiClient.convertToType(data['ipRanges'], ['String']);
            }
            if (data.hasOwnProperty('securityFlavors')) {
                obj['securityFlavors'] = ApiClient.convertToType(data['securityFlavors'], ['String']);
            }
            if (data.hasOwnProperty('squashMode')) {
                obj['squashMode'] = ApiClient.convertToType(data['squashMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NfsExportOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NfsExportOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessMode'] && !(typeof data['accessMode'] === 'string' || data['accessMode'] instanceof String)) {
            throw new Error("Expected the field `accessMode` to be a primitive type in the JSON string but got " + data['accessMode']);
        }
        // ensure the json data is a string
        if (data['anonGid'] && !(typeof data['anonGid'] === 'string' || data['anonGid'] instanceof String)) {
            throw new Error("Expected the field `anonGid` to be a primitive type in the JSON string but got " + data['anonGid']);
        }
        // ensure the json data is a string
        if (data['anonUid'] && !(typeof data['anonUid'] === 'string' || data['anonUid'] instanceof String)) {
            throw new Error("Expected the field `anonUid` to be a primitive type in the JSON string but got " + data['anonUid']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipRanges'])) {
            throw new Error("Expected the field `ipRanges` to be an array in the JSON data but got " + data['ipRanges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['securityFlavors'])) {
            throw new Error("Expected the field `securityFlavors` to be an array in the JSON data but got " + data['securityFlavors']);
        }
        // ensure the json data is a string
        if (data['squashMode'] && !(typeof data['squashMode'] === 'string' || data['squashMode'] instanceof String)) {
            throw new Error("Expected the field `squashMode` to be a primitive type in the JSON string but got " + data['squashMode']);
        }

        return true;
    }


}



/**
 * Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
 * @member {module:model/NfsExportOptions.AccessModeEnum} accessMode
 */
NfsExportOptions.prototype['accessMode'] = undefined;

/**
 * An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
 * @member {String} anonGid
 */
NfsExportOptions.prototype['anonGid'] = undefined;

/**
 * An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
 * @member {String} anonUid
 */
NfsExportOptions.prototype['anonUid'] = undefined;

/**
 * List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
 * @member {Array.<String>} ipRanges
 */
NfsExportOptions.prototype['ipRanges'] = undefined;

/**
 * The security flavors allowed for mount operations. The default is AUTH_SYS.
 * @member {Array.<module:model/NfsExportOptions.SecurityFlavorsEnum>} securityFlavors
 */
NfsExportOptions.prototype['securityFlavors'] = undefined;

/**
 * Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
 * @member {module:model/NfsExportOptions.SquashModeEnum} squashMode
 */
NfsExportOptions.prototype['squashMode'] = undefined;





/**
 * Allowed values for the <code>accessMode</code> property.
 * @enum {String}
 * @readonly
 */
NfsExportOptions['AccessModeEnum'] = {

    /**
     * value: "ACCESS_MODE_UNSPECIFIED"
     * @const
     */
    "ACCESS_MODE_UNSPECIFIED": "ACCESS_MODE_UNSPECIFIED",

    /**
     * value: "READ_ONLY"
     * @const
     */
    "READ_ONLY": "READ_ONLY",

    /**
     * value: "READ_WRITE"
     * @const
     */
    "READ_WRITE": "READ_WRITE"
};


/**
 * Allowed values for the <code>securityFlavors</code> property.
 * @enum {String}
 * @readonly
 */
NfsExportOptions['SecurityFlavorsEnum'] = {

    /**
     * value: "SECURITY_FLAVOR_UNSPECIFIED"
     * @const
     */
    "SECURITY_FLAVOR_UNSPECIFIED": "SECURITY_FLAVOR_UNSPECIFIED",

    /**
     * value: "AUTH_SYS"
     * @const
     */
    "AUTH_SYS": "AUTH_SYS",

    /**
     * value: "KRB5"
     * @const
     */
    "KRB5": "KRB5",

    /**
     * value: "KRB5I"
     * @const
     */
    "KRB5I": "KRB5I",

    /**
     * value: "KRB5P"
     * @const
     */
    "KRB5P": "KRB5P"
};


/**
 * Allowed values for the <code>squashMode</code> property.
 * @enum {String}
 * @readonly
 */
NfsExportOptions['SquashModeEnum'] = {

    /**
     * value: "SQUASH_MODE_UNSPECIFIED"
     * @const
     */
    "SQUASH_MODE_UNSPECIFIED": "SQUASH_MODE_UNSPECIFIED",

    /**
     * value: "NO_ROOT_SQUASH"
     * @const
     */
    "NO_ROOT_SQUASH": "NO_ROOT_SQUASH",

    /**
     * value: "ROOT_SQUASH"
     * @const
     */
    "ROOT_SQUASH": "ROOT_SQUASH"
};



export default NfsExportOptions;

