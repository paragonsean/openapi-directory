/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata() {
    this->initializeModel();
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::~OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata() {}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_per_sli_eligibility_isSet = false;
    m_per_sli_eligibility_isValid = false;
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_per_sli_eligibility_isValid = ::OpenAPI::fromJsonValue(m_per_sli_eligibility, json[QString("perSliEligibility")]);
    m_per_sli_eligibility_isSet = !json[QString("perSliEligibility")].isNull() && m_per_sli_eligibility_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_per_sli_eligibility.isSet()) {
        obj.insert(QString("perSliEligibility"), ::OpenAPI::toJsonValue(m_per_sli_eligibility));
    }
    return obj;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::getLocation() const {
    return m_location;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::getNodeId() const {
    return m_node_id;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::getPerSliEligibility() const {
    return m_per_sli_eligibility;
}
void OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::setPerSliEligibility(const OAIGoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility &per_sli_eligibility) {
    m_per_sli_eligibility = per_sli_eligibility;
    m_per_sli_eligibility_isSet = true;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::is_per_sli_eligibility_Set() const{
    return m_per_sli_eligibility_isSet;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::is_per_sli_eligibility_Valid() const{
    return m_per_sli_eligibility_isValid;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_sli_eligibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
