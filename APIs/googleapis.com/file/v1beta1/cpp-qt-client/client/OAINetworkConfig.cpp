/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_connect_mode_isSet = false;
    m_connect_mode_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_modes_isSet = false;
    m_modes_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_reserved_ip_range_isSet = false;
    m_reserved_ip_range_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_connect_mode_isValid = ::OpenAPI::fromJsonValue(m_connect_mode, json[QString("connectMode")]);
    m_connect_mode_isSet = !json[QString("connectMode")].isNull() && m_connect_mode_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_modes_isValid = ::OpenAPI::fromJsonValue(m_modes, json[QString("modes")]);
    m_modes_isSet = !json[QString("modes")].isNull() && m_modes_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_reserved_ip_range_isValid = ::OpenAPI::fromJsonValue(m_reserved_ip_range, json[QString("reservedIpRange")]);
    m_reserved_ip_range_isSet = !json[QString("reservedIpRange")].isNull() && m_reserved_ip_range_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_connect_mode_isSet) {
        obj.insert(QString("connectMode"), ::OpenAPI::toJsonValue(m_connect_mode));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_modes.size() > 0) {
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(m_modes));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_reserved_ip_range_isSet) {
        obj.insert(QString("reservedIpRange"), ::OpenAPI::toJsonValue(m_reserved_ip_range));
    }
    return obj;
}

QString OAINetworkConfig::getConnectMode() const {
    return m_connect_mode;
}
void OAINetworkConfig::setConnectMode(const QString &connect_mode) {
    m_connect_mode = connect_mode;
    m_connect_mode_isSet = true;
}

bool OAINetworkConfig::is_connect_mode_Set() const{
    return m_connect_mode_isSet;
}

bool OAINetworkConfig::is_connect_mode_Valid() const{
    return m_connect_mode_isValid;
}

QList<QString> OAINetworkConfig::getIpAddresses() const {
    return m_ip_addresses;
}
void OAINetworkConfig::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAINetworkConfig::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAINetworkConfig::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QList<QString> OAINetworkConfig::getModes() const {
    return m_modes;
}
void OAINetworkConfig::setModes(const QList<QString> &modes) {
    m_modes = modes;
    m_modes_isSet = true;
}

bool OAINetworkConfig::is_modes_Set() const{
    return m_modes_isSet;
}

bool OAINetworkConfig::is_modes_Valid() const{
    return m_modes_isValid;
}

QString OAINetworkConfig::getNetwork() const {
    return m_network;
}
void OAINetworkConfig::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkConfig::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkConfig::is_network_Valid() const{
    return m_network_isValid;
}

QString OAINetworkConfig::getReservedIpRange() const {
    return m_reserved_ip_range;
}
void OAINetworkConfig::setReservedIpRange(const QString &reserved_ip_range) {
    m_reserved_ip_range = reserved_ip_range;
    m_reserved_ip_range_isSet = true;
}

bool OAINetworkConfig::is_reserved_ip_range_Set() const{
    return m_reserved_ip_range_isSet;
}

bool OAINetworkConfig::is_reserved_ip_range_Valid() const{
    return m_reserved_ip_range_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connect_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ip_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
