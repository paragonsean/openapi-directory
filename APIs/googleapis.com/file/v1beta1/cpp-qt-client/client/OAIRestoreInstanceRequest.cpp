/**
 * Cloud Filestore API
 * The Cloud Filestore API is used for creating and managing cloud file servers.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreInstanceRequest::OAIRestoreInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreInstanceRequest::OAIRestoreInstanceRequest() {
    this->initializeModel();
}

OAIRestoreInstanceRequest::~OAIRestoreInstanceRequest() {}

void OAIRestoreInstanceRequest::initializeModel() {

    m_file_share_isSet = false;
    m_file_share_isValid = false;

    m_source_backup_isSet = false;
    m_source_backup_isValid = false;

    m_source_snapshot_isSet = false;
    m_source_snapshot_isValid = false;
}

void OAIRestoreInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreInstanceRequest::fromJsonObject(QJsonObject json) {

    m_file_share_isValid = ::OpenAPI::fromJsonValue(m_file_share, json[QString("fileShare")]);
    m_file_share_isSet = !json[QString("fileShare")].isNull() && m_file_share_isValid;

    m_source_backup_isValid = ::OpenAPI::fromJsonValue(m_source_backup, json[QString("sourceBackup")]);
    m_source_backup_isSet = !json[QString("sourceBackup")].isNull() && m_source_backup_isValid;

    m_source_snapshot_isValid = ::OpenAPI::fromJsonValue(m_source_snapshot, json[QString("sourceSnapshot")]);
    m_source_snapshot_isSet = !json[QString("sourceSnapshot")].isNull() && m_source_snapshot_isValid;
}

QString OAIRestoreInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_share_isSet) {
        obj.insert(QString("fileShare"), ::OpenAPI::toJsonValue(m_file_share));
    }
    if (m_source_backup_isSet) {
        obj.insert(QString("sourceBackup"), ::OpenAPI::toJsonValue(m_source_backup));
    }
    if (m_source_snapshot_isSet) {
        obj.insert(QString("sourceSnapshot"), ::OpenAPI::toJsonValue(m_source_snapshot));
    }
    return obj;
}

QString OAIRestoreInstanceRequest::getFileShare() const {
    return m_file_share;
}
void OAIRestoreInstanceRequest::setFileShare(const QString &file_share) {
    m_file_share = file_share;
    m_file_share_isSet = true;
}

bool OAIRestoreInstanceRequest::is_file_share_Set() const{
    return m_file_share_isSet;
}

bool OAIRestoreInstanceRequest::is_file_share_Valid() const{
    return m_file_share_isValid;
}

QString OAIRestoreInstanceRequest::getSourceBackup() const {
    return m_source_backup;
}
void OAIRestoreInstanceRequest::setSourceBackup(const QString &source_backup) {
    m_source_backup = source_backup;
    m_source_backup_isSet = true;
}

bool OAIRestoreInstanceRequest::is_source_backup_Set() const{
    return m_source_backup_isSet;
}

bool OAIRestoreInstanceRequest::is_source_backup_Valid() const{
    return m_source_backup_isValid;
}

QString OAIRestoreInstanceRequest::getSourceSnapshot() const {
    return m_source_snapshot;
}
void OAIRestoreInstanceRequest::setSourceSnapshot(const QString &source_snapshot) {
    m_source_snapshot = source_snapshot;
    m_source_snapshot_isSet = true;
}

bool OAIRestoreInstanceRequest::is_source_snapshot_Set() const{
    return m_source_snapshot_isSet;
}

bool OAIRestoreInstanceRequest::is_source_snapshot_Valid() const{
    return m_source_snapshot_isValid;
}

bool OAIRestoreInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
